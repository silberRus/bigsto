#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураДоступа() Экспорт
	
	ЗаказНаПеремещениеДоступен = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение);
		
	ЗаказМатериаловДоступен = Ложь;
	
	ПеремещениеДоступно = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров")
		И ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров);
		
	ПередачаМатериаловДоступна = Ложь;
	
	СтруктураДоступа = Новый Структура;
	СтруктураДоступа.Вставить("ЗаказНаПеремещениеДоступен", ЗаказНаПеремещениеДоступен);
	СтруктураДоступа.Вставить("ЗаказМатериаловДоступен",    ЗаказМатериаловДоступен);
	СтруктураДоступа.Вставить("ПеремещениеДоступно",        ПеремещениеДоступно);
	СтруктураДоступа.Вставить("ПередачаМатериаловДоступна", ПередачаМатериаловДоступна);
	
	Возврат СтруктураДоступа;
	
КонецФункции

Функция СтруктураДанныеЗаполнения() Экспорт
	
	СтруктураДанныеЗаполнения = Новый Структура();
	
	СтруктураДанныеЗаполнения.Вставить("СкладОтправитель",      Неопределено);
	СтруктураДанныеЗаполнения.Вставить("СкладПолучатель",       Неопределено);
	СтруктураДанныеЗаполнения.Вставить("Назначение",            Неопределено);
	СтруктураДанныеЗаполнения.Вставить("ДатаОтгрузки",          Неопределено);
	СтруктураДанныеЗаполнения.Вставить("ДатаСледующейОтгрузки", Неопределено);
	СтруктураДанныеЗаполнения.Вставить("ПотребностиДоДаты",     Неопределено);
	СтруктураДанныеЗаполнения.Вставить("ВариантОформления",     Неопределено);
	
	Возврат СтруктураДанныеЗаполнения;
	
КонецФункции

Процедура ПеремещаемыеТоварыВТаблицу(Параметры, АдресХранилища) Экспорт
	
	Товары = Параметры.Товары.СкопироватьКолонки();
	Товары.Колонки.Добавить("ДетальныеЗаписи", Новый ОписаниеТипов("ТаблицаЗначений"));
	Товары.Колонки.Добавить("НомерСтрокиДляПоиска", Новый ОписаниеТипов("Число"));
	
	ОбработкаОбъект = Обработки.УправлениеПеремещениемОбособленныхТоваров.Создать();
	Заполнить(Параметры.ДанныеЗаполнения, Товары, Параметры.ЭтоРаспределениеОстатков);
	ТоварыЗаполнитьСлужебныеРеквизиты(Товары);
	КорзинаСкладов = Параметры.КорзинаСкладов.СкопироватьКолонки();
	ЗаполнитьКорзинуСкладов(Товары, КорзинаСкладов);
	
	РезультатЗаполнения = Новый Структура("Товары, КорзинаСкладов", Товары, КорзинаСкладов);
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ОформитьДокументы(НачалоОтгрузки, ВыгруженнаяТаблица, ВариантОформления) Экспорт
	
	СообщенияОбОшибках = Новый Массив();
	СозданныеДокументы = Новый Массив();
	
	ВыгруженнаяТаблица.Колонки.Добавить("НачалоОтгрузки", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ВыгруженнаяТаблица.Колонки.Добавить("ОкончаниеПоступления", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ВыгруженнаяТаблица.Колонки.Добавить("ВариантОбеспечения");
	
	ОбеспечиватьОбособленно = Перечисления.ВариантыОбеспечения.Обособленно;
	НачалоЭтогоДня = НачалоДня(ТекущаяДатаСеанса());
	ДлительностьСуток = 3600 * 24;
	Для Каждого СтрокаТаблицы Из ВыгруженнаяТаблица Цикл
		
		СтрокаТаблицы.ВариантОбеспечения = ОбеспечиватьОбособленно;
		СтрокаТаблицы.НачалоОтгрузки = НачалоОтгрузки;
		СтрокаТаблицы.ОкончаниеПоступления = НачалоОтгрузки + ДлительностьСуток * СтрокаТаблицы.ДлительностьПеремещения;
		
	КонецЦикла;
	
	ПоляКлюча = "СкладОтправитель,СкладПолучатель,НаправлениеДеятельности";
	ВыгруженнаяТаблица.Сортировать(ПоляКлюча, Новый СравнениеЗначений);
	
	РезультатРазбиения = ОбеспечениеСервер.РазбитьТаблицуПоЗначениюКлюча(ВыгруженнаяТаблица, ПоляКлюча, ПоляКлюча);
	
	СтруктураДоступа = Обработки.УправлениеПеремещениемОбособленныхТоваров.СтруктураДоступа();
	
	Кладовые = Новый Соответствие();
	
	Если ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение Тогда
		
		Для Каждого Элемент Из РезультатРазбиения Цикл
			
			Если СтруктураДоступа.ЗаказМатериаловДоступен И Кладовые.Получить(Элемент.Ключ.СкладПолучатель) = Истина Тогда
				
				
			Иначе
				
				ДанныеЗаполненияДокумента = Новый Структура("СкладОтправитель,СкладПолучатель,НаправлениеДеятельности,Товары");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполненияДокумента, Элемент.Ключ);
				ДанныеЗаполненияДокумента.Товары = Элемент.Таблица;
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ЗаказНаПеремещение,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению,
					СообщенияОбОшибках);
				
			КонецЕсли;
			
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров Тогда
		
		Для Каждого Элемент Из РезультатРазбиения Цикл
			
			Если СтруктураДоступа.ПередачаМатериаловДоступна И Кладовые.Получить(Элемент.Ключ.СкладПолучатель) = Истина Тогда
				
				
			Иначе
				
				ДанныеЗаполненияДокумента = Новый Структура("СкладОтправитель,СкладПолучатель,НаправлениеДеятельности,Товары");
				ЗаполнитьЗначенияСвойств(ДанныеЗаполненияДокумента, Элемент.Ключ);
				ДанныеЗаполненияДокумента.Товары = Элемент.Таблица;
				
				ДокументОбъект = Обработки.ОбеспечениеПотребностей.ЗаполнитьИПровестиДокумент(
					Документы.ПеремещениеТоваров,
					ДанныеЗаполненияДокумента,
					Перечисления.СтатусыПеремещенийТоваров.Отгружено,
					СообщенияОбОшибках);
				
			КонецЕсли;
			
			СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("Документы, Сообщения", СозданныеДокументы, СообщенияОбОшибках);
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

#Область Прочие

Процедура Заполнить(ДанныеЗаполнения, Товары, ЭтоРаспределениеОстатков)
	
	СкладОтправитель      = ДанныеЗаполнения.СкладОтправитель;
	СкладПолучатель       = ДанныеЗаполнения.СкладПолучатель;
	Назначение            = ДанныеЗаполнения.Назначение;
	ДатаОтгрузки          = ДанныеЗаполнения.ДатаОтгрузки;
	ДатаСледующейОтгрузки = ДанныеЗаполнения.ДатаСледующейОтгрузки;
	ПотребностиДоДаты     = ДанныеЗаполнения.ПотребностиДоДаты;
	ВариантОформления     = ДанныеЗаполнения.ВариантОформления;
	
	Отборы = Новый Структура();
	Если ЗначениеЗаполнено(СкладОтправитель) Тогда
		Отборы.Вставить("СкладОтправитель", СкладОтправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		Отборы.Вставить("СкладПолучатель", СкладПолучатель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		Отборы.Вставить("Назначение", Назначение);
	КонецЕсли;
	
	ОтборЦеховаяКладовая = ОтборЦеховаяКладовая(ВариантОформления);
	
	Если ОтборЦеховаяКладовая <> Неопределено Тогда
		Отборы.Вставить("ОтборЦеховаяКладовая", ОтборЦеховаяКладовая);
	КонецЕсли;
	
	ТаблицаТовары = Товары(ДатаОтгрузки, ДатаСледующейОтгрузки, ПотребностиДоДаты, Отборы, ЭтоРаспределениеОстатков);
	
	ТаблицаТовары.Сортировать("Номенклатура,Характеристика,Назначение,Период,ДатаПотребности,СкладОтправитель,СкладПолучатель");
	
	МаксИндекс = ТаблицаТовары.Количество() - 1;
	Индекс = 0;
	ЕстьЗаписи = Индекс <= МаксИндекс;
	КлючСтроки = Новый Структура("Номенклатура,Характеристика,Назначение");
	ПустойСклад = Справочники.Склады.ПустаяСсылка();
	
	НомерСтроки = 1;
	Пока ЕстьЗаписи Цикл
	
		СтрокаТовары = ТаблицаТовары[Индекс];
		ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаТовары);
		
		ИзмениласьЗапись = Ложь;
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НомерСтрокиДляПоиска = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючСтроки);
		ДетальныеЗаписи = НоваяСтрока.ДетальныеЗаписи;
		ЗаполнитьКолонкиТаблицыДетальныеЗаписи(ДетальныеЗаписи);
		
		НесколькоДатПотребности      = Ложь;
		НесколькоСкладовОтправителей = Ложь;
		НесколькоСкладовПолучателей  = Ложь;
		
		// Цикл по сочетанию номенклатура\характеристика\назначение.
		Пока Не ИзмениласьЗапись Цикл
			
			СтрокаТовары = ТаблицаТовары[Индекс];
			
			Если СтрокаТовары.Потребность > 0 Или СтрокаТовары.Доступно > 0 Тогда
				
				// Заполнение детальной записи.
				КПеремещению = Мин(СтрокаТовары.Доступно, СтрокаТовары.Потребность);
				Если КПеремещению > 0 Тогда
					
					ДетальнаяЗапись = ДетальныеЗаписи.Добавить();
					ДетальнаяЗапись.Период            = СтрокаТовары.Период;
					ДетальнаяЗапись.КПеремещению      = КПеремещению;
					
					Если ЭтоРаспределениеОстатков Тогда
						ДетальнаяЗапись.Склад = СтрокаТовары.СкладПолучатель;
						ДетальнаяЗапись.СкладНаименование = СтрокаТовары.СкладПолучательНаименование;
						ДетальнаяЗапись.ДатаПотребности   = СтрокаТовары.ДатаПотребности;
					Иначе
						ДетальнаяЗапись.Склад = СтрокаТовары.СкладОтправитель;
						ДетальнаяЗапись.СкладНаименование = СтрокаТовары.СкладОтправительНаименование;
					КонецЕсли;
					
				КонецЕсли;
				
				// Заполнение полей основной записи (поля СкладОтправитель, СкладПолучатель, ДатаПотребности, НаправлениеДеятельности).
				Если ЭтоРаспределениеОстатков
						И СтрокаТовары.ДатаПотребности <> НоваяСтрока.ДатаПотребности
						И НоваяСтрока.ДатаПотребности <> '00010101'
						И СтрокаТовары.ДатаПотребности <> '00010101' Тогда
					
					НесколькоДатПотребности = Истина;
					
				КонецЕсли;
				
				Если СтрокаТовары.СкладОтправитель <> НоваяСтрока.СкладОтправитель
						И Не НоваяСтрока.СкладОтправитель.Пустая()
						И Не СтрокаТовары.СкладОтправитель.Пустая() Тогда
					
					НесколькоСкладовОтправителей = Истина;
					НоваяСтрока.СкладОтправитель = ПустойСклад;
					
				КонецЕсли;
				
				Если СтрокаТовары.СкладПолучатель <> НоваяСтрока.СкладПолучатель
						И Не НоваяСтрока.СкладПолучатель.Пустая()
						И Не СтрокаТовары.СкладПолучатель.Пустая() Тогда
					
					НесколькоСкладовПолучателей = Истина;
					НоваяСтрока.СкладПолучатель = ПустойСклад;
					
				КонецЕсли;
				
				Если Не ЭтоРаспределениеОстатков Тогда
					
					Если НоваяСтрока.ДатаПотребности = '00010101' Или СтрокаТовары.ДатаПотребности < НоваяСтрока.ДатаПотребности Тогда
						НоваяСтрока.ДатаПотребности = СтрокаТовары.ДатаПотребности;
					КонецЕсли;
					
				ИначеЕсли НесколькоДатПотребности Тогда
					НоваяСтрока.ДатаПотребности = '00010101';
				ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.ДатаПотребности) Тогда
					НоваяСтрока.ДатаПотребности = СтрокаТовары.ДатаПотребности;
				КонецЕсли;
				
				Если Не НесколькоСкладовОтправителей И ЗначениеЗаполнено(СтрокаТовары.СкладОтправитель) Тогда
					НоваяСтрока.СкладОтправитель = СтрокаТовары.СкладОтправитель;
				КонецЕсли;
				
				Если Не НесколькоСкладовПолучателей И ЗначениеЗаполнено(СтрокаТовары.СкладПолучатель) Тогда
					НоваяСтрока.СкладПолучатель = СтрокаТовары.СкладПолучатель;
				КонецЕсли;
				
				НоваяСтрока.НаправлениеДеятельности = СтрокаТовары.НаправлениеДеятельности;
				
				// Заполнение полей основной записи (поля Потребность, Доступно, Количество, КоличествоУпаковок, Отметка).
				НоваяСтрока.Потребность = НоваяСтрока.Потребность + СтрокаТовары.Потребность;
				НоваяСтрока.Доступно    = НоваяСтрока.Доступно    + СтрокаТовары.Доступно;
				
				Если КПеремещению > 0 Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество  + КПеремещению;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					НоваяСтрока.Отметка = Истина;
				КонецЕсли;
			
				// Заполнение полей основной записи (поля ОбеспечиваетсяПеремещением, ДлительностьПеремещения, ПоступитВСрок).
				НоваяСтрока.ОбеспечиваетсяПеремещением = НоваяСтрока.ОбеспечиваетсяПеремещением Или СтрокаТовары.ОбеспечиваетсяПеремещением;
				НоваяСтрока.ДлительностьПеремещения    = Макс(НоваяСтрока.ДлительностьПеремещения, СтрокаТовары.ДлительностьПеремещения);
				НоваяСтрока.ПоступитВСрок              = Мин(НоваяСтрока.ПоступитВСрок, СтрокаТовары.ПоступитВСрок);
				
			КонецЕсли;
			
			// Переход к следующей записи.
			Индекс = Индекс + 1;
			ЕстьЗаписи = Индекс <= МаксИндекс;
			
			ИзмениласьЗапись = Не ЕстьЗаписи Или ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, ТаблицаТовары[Индекс]);
			
		КонецЦикла;
		
		Если ЭтоРаспределениеОстатков Тогда
			
			ДетальныеЗаписи.Свернуть("Период,Склад,СкладНаименование,ДатаПотребности", "КПеремещению");
			ДетальныеЗаписи.Сортировать("Период,ДатаПотребности,СкладНаименование,Склад");
			
		Иначе
			
			ДетальныеЗаписи.Свернуть("Склад,СкладНаименование", "КПеремещению");
			ДетальныеЗаписи.Сортировать("СкладНаименование,Склад");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтборЦеховаяКладовая(ВариантОформления)
	
	ОтборЦеховаяКладовая = Неопределено;
	СтруктураДоступа = СтруктураДоступа();
	Если ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение
			И Не СтруктураДоступа.ЗаказНаПеремещениеДоступен Тогда
			
			ОтборЦеховаяКладовая = Истина;
			
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение
			И Не СтруктураДоступа.ЗаказМатериаловДоступен Тогда
			
			ОтборЦеховаяКладовая = Ложь;
			
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров
			И Не СтруктураДоступа.ПеремещениеДоступно Тогда
			
			ОтборЦеховаяКладовая = Истина;
			
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров
			И Не СтруктураДоступа.ПередачаМатериаловДоступна Тогда
			
			ОтборЦеховаяКладовая = Ложь;
			
	КонецЕсли;
	
	Возврат ОтборЦеховаяКладовая;
	
КонецФункции

Функция Товары(ДатаОтгрузки, ДатаСледующейОтгрузки, ПотребностиДоДаты, Отборы, ЭтоРаспределениеОстатков)
	
	СтруктураРезультата = ПотребностиИДоступныеОстатки(Отборы);
	Потребности      = СтруктураРезультата.Потребности;
	ДоступныеОстатки = СтруктураРезультата.ДоступныеОстатки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаПолучатели", Потребности);
	Запрос.УстановитьПараметр("ТаблицаОтправители",ДоступныеОстатки);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаОтгрузки",      ДатаОтгрузки);
	Запрос.УстановитьПараметр("ДатаСледующейОтгрузки", ДатаСледующейОтгрузки);
	Запрос.УстановитьПараметр("ПотребностиДоДаты", ПотребностиДоДаты);
	Запрос.УстановитьПараметр("ЕстьОтборПоДатеСледующейОтгрузки", ЗначениеЗаполнено(ДатаСледующейОтгрузки) И ЭтоРаспределениеОстатков);
	Запрос.УстановитьПараметр("ЕстьОтборПоПотребностиДоДаты", ЗначениеЗаполнено(ПотребностиДоДаты) И Не ЭтоРаспределениеОстатков);
	Запрос.УстановитьПараметр("ЭтоРаспределениеОстатков", ЭтоРаспределениеОстатков);
	
	Запрос.Текст =
		// 4.1) Загрузка таблицы доступных остатков на складе-отправителе, с датой доступности не позднее даты "К отгрузке до даты".
		"ВЫБРАТЬ
		|	ТаблицаОтправители.Номенклатура    КАК Номенклатура,
		|	ТаблицаОтправители.Характеристика  КАК Характеристика,
		|	ТаблицаОтправители.Склад           КАК Склад,
		|	ТаблицаОтправители.Назначение      КАК Назначение,
		|	ТаблицаОтправители.ДатаДоступности КАК ДатаДоступности,
		|	ТаблицаОтправители.Количество      КАК Количество
		|ПОМЕСТИТЬ ВтОтправители
		|ИЗ
		|	&ТаблицаОтправители КАК ТаблицаОтправители
		|ГДЕ
		|	ВЫБОР КОГДА &ДатаОтгрузки = &НачалоТекущегоДня ТОГДА
		|				ТаблицаОтправители.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
		|			ИНАЧЕ
		|				ТаблицаОтправители.ДатаДоступности <= &ДатаОтгрузки
		|		КОНЕЦ
		|;
		|
		|//////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтправители.Номенклатура    КАК Номенклатура,
		|	ТаблицаОтправители.Характеристика  КАК Характеристика,
		|	ТаблицаОтправители.Назначение      КАК Назначение,
		|	МАКСИМУМ(ТаблицаОтправители.Склад) КАК Склад
		|ПОМЕСТИТЬ ВтОтправителиНоменклатура
		|ИЗ
		|	ВтОтправители КАК ТаблицаОтправители
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтправители.Номенклатура, ТаблицаОтправители.Характеристика, ТаблицаОтправители.Назначение
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение
		|;
		|
		|//////////////////////////////////////////////////////
		// 4.2) Загрузка таблицы потребностей на складе-получателе.
		|ВЫБРАТЬ
		|	ТаблицаПолучатели.Номенклатура   КАК Номенклатура,
		|	ТаблицаПолучатели.Характеристика КАК Характеристика,
		|	ТаблицаПолучатели.Склад          КАК Склад,
		|	ТаблицаПолучатели.Назначение     КАК Назначение,
		|	ТаблицаПолучатели.ДатаОтгрузки   КАК ДатаОтгрузки,
		|	ТаблицаПолучатели.Количество     КАК Количество
		|ПОМЕСТИТЬ ВтПолучатели
		|ИЗ
		|	&ТаблицаПолучатели КАК ТаблицаПолучатели
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение
		|;
		|
		|//////////////////////////////////////////////////////
		|";
		
	// 4.3) Определение основного способа обеспечения.
	ТекстВычисленияСпособаОбеспечения =
		Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь) +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура              КАК Номенклатура,
		|	Товары.Характеристика            КАК Характеристика,
		|	Товары.Склад                     КАК Склад,
		|	
		|	ОсновнойСпособОбеспечения.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)               КАК ОбеспечиваетсяПеремещением,
		|	ЕСТЬNULL(ОсновнойСпособОбеспечения.ДлительностьВДнях, 0)                                                    КАК ДлительностьПеремещения,
		|	ОсновнойСпособОбеспечения.ИсточникОбеспеченияПотребностей ССЫЛКА Справочник.Склады
		|		И ОсновнойСпособОбеспечения.ИсточникОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтправительИзвестен,
		|	ОсновнойСпособОбеспечения.ИсточникОбеспеченияПотребностей                                                   КАК СкладОтправитель
		|	
		|	
		|ПОМЕСТИТЬ ВтСпособыОбеспечения
		|ИЗ
		|	ВтПолучатели КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК ОсновнойСпособОбеспечения
		|		ПО &ПодстановкаОсновногоСпособаОбеспечения
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
		
	Запрос.Текст = Запрос.Текст
		+ РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(ТекстВычисленияСпособаОбеспечения,
			"ПодстановкаОсновногоСпособаОбеспечения",
			"Товары.Номенклатура, Товары.Характеристика, Товары.Склад");
	
	Запрос.Текст = Запрос.Текст +
		// Потребности получателя.
		"ВЫБРАТЬ
		|	ТаблицаПолучатели.Номенклатура      КАК Номенклатура,
		|	ТаблицаПолучатели.Характеристика    КАК Характеристика,
		|	ТаблицаПолучатели.Склад             КАК СкладПолучатель,
		|	ТаблицаПолучатели.Склад.Наименование КАК СкладПолучательНаименование,
		|	ТаблицаПолучатели.Назначение        КАК Назначение,
		|	ЕСТЬNULL(ТаблицаПолучатели.Назначение.НаправлениеДеятельности,
		|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
		|	ТаблицаПолучатели.ДатаОтгрузки      КАК ДатаПотребности,
		|	ДОБАВИТЬКДАТЕ(ТаблицаПолучатели.ДатаОтгрузки, ДЕНЬ, -СпособыОбеспечения.ДлительностьПеремещения) КАК Период,
		|	ТаблицаПолучатели.ДатаОтгрузки >= ДОБАВИТЬКДАТЕ(&ДатаОтгрузки, ДЕНЬ,СпособыОбеспечения.ДлительностьПеремещения) КАК ПоступитВСрок,
		|	
		|	СпособыОбеспечения.ОбеспечиваетсяПеремещением КАК ОбеспечиваетсяПеремещением,
		|	СпособыОбеспечения.ДлительностьПеремещения КАК ДлительностьПеремещения,
		|	СпособыОбеспечения.СкладОтправительИзвестен КАК СкладОтправительИзвестен,
		|	СпособыОбеспечения.СкладОтправитель        КАК СкладОтправитель,
		|	
		|	ТаблицаПолучатели.Количество КАК Потребность
		|	
		|ИЗ
		|	ВтПолучатели КАК ТаблицаПолучатели
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК СпособыОбеспечения
		|		ПО СпособыОбеспечения.Номенклатура   = ТаблицаПолучатели.Номенклатура
		|		 И СпособыОбеспечения.Характеристика = ТаблицаПолучатели.Характеристика
		|		 И СпособыОбеспечения.Склад          = ТаблицаПолучатели.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОтправителиНоменклатура КАК ВтОтправителиНоменклатура
		|		ПО ВтОтправителиНоменклатура.Номенклатура   = ТаблицаПолучатели.Номенклатура
		|		 И ВтОтправителиНоменклатура.Характеристика = ТаблицаПолучатели.Характеристика
		|		 И ВтОтправителиНоменклатура.Назначение     = ТаблицаПолучатели.Назначение
		|		 И (ВтОтправителиНоменклатура.Склад <> ТаблицаПолучатели.Склад ИЛИ НЕ &ЭтоРаспределениеОстатков)
		|ГДЕ
		|	(ТаблицаПолучатели.ДатаОтгрузки < ДОБАВИТЬКДАТЕ(&ДатаСледующейОтгрузки, ДЕНЬ, СпособыОбеспечения.ДлительностьПеремещения) ИЛИ НЕ &ЕстьОтборПоДатеСледующейОтгрузки)
		|	И (ТаблицаПолучатели.ДатаОтгрузки < &ПотребностиДоДаты ИЛИ НЕ &ЕстьОтборПоПотребностиДоДаты)
		|	И НЕ ВтОтправителиНоменклатура.Номенклатура ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Период,
		|	ДатаПотребности,
		|	СкладПолучательНаименование
		|;
		|///////////////////////////////////////////////////////
		// Остатки отправителя.
		|ВЫБРАТЬ
		|	ТаблицаОтправители.Номенклатура    КАК Номенклатура,
		|	ТаблицаОтправители.Характеристика  КАК Характеристика,
		|	ТаблицаОтправители.Склад           КАК СкладОтправитель,
		|	МАКСИМУМ(ТаблицаОтправители.Склад.Наименование) КАК СкладОтправительНаименование,
		|	ТаблицаОтправители.Назначение      КАК Назначение,
		|	МАКСИМУМ(ТаблицаОтправители.Количество) КАК Доступно,
		|	ИСТИНА                             КАК ПоступитВСрок
		|	
		|ИЗ
		|	ВтОтправители КАК ТаблицаОтправители
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПолучатели КАК ТаблицаПолучатели
		|		ПО ТаблицаПолучатели.Номенклатура   = ТаблицаОтправители.Номенклатура
		|		 И ТаблицаПолучатели.Характеристика = ТаблицаОтправители.Характеристика
		|		 И ТаблицаПолучатели.Назначение     = ТаблицаОтправители.Назначение
		|		 И (ТаблицаПолучатели.Склад <> ТаблицаОтправители.Склад ИЛИ &ЭтоРаспределениеОстатков)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК СпособыОбеспечения
		|		ПО СпособыОбеспечения.Номенклатура   = ТаблицаПолучатели.Номенклатура
		|		 И СпособыОбеспечения.Характеристика = ТаблицаПолучатели.Характеристика
		|		 И СпособыОбеспечения.Склад          = ТаблицаПолучатели.Склад
		|	
		|ГДЕ
		|	НЕ ТаблицаПолучатели.Номенклатура ЕСТЬ NULL
		|	И (ТаблицаПолучатели.ДатаОтгрузки < ДОБАВИТЬКДАТЕ(&ДатаСледующейОтгрузки, ДЕНЬ, СпособыОбеспечения.ДлительностьПеремещения) ИЛИ НЕ &ЕстьОтборПоДатеСледующейОтгрузки)
		|	И (ТаблицаПолучатели.ДатаОтгрузки < &ПотребностиДоДаты ИЛИ НЕ &ЕстьОтборПоПотребностиДоДаты)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтправители.Номенклатура,
		|	ТаблицаОтправители.Характеристика,
		|	ТаблицаОтправители.Склад,
		|	ТаблицаОтправители.Назначение
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	СкладОтправительНаименование";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ВсегоТаблиц = ПакетРезультатов.Количество();
	
	ПотребностиПолучателя = ПакетРезультатов[ВсегоТаблиц - 2].Выгрузить();
	ОстаткиОтправителя = ПакетРезультатов[ВсегоТаблиц - 1].Выгрузить();
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("СкладПолучатель",            Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Результат.Колонки.Добавить("Назначение",                 Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Результат.Колонки.Добавить("НаправлениеДеятельности",    Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	Результат.Колонки.Добавить("СкладОтправитель",           Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Результат.Колонки.Добавить("Потребность",                ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Результат.Колонки.Добавить("Доступно",                   ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Результат.Колонки.Добавить("ДлительностьПеремещения",    ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(10, 0));
	Результат.Колонки.Добавить("ОбеспечиваетсяПеремещением", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДатаПотребности",            ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Период",                     ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ПоступитВСрок",              Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СкладОтправительНаименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СкладПолучательНаименование",  Новый ОписаниеТипов("Строка"));
	
	ПоляОтбора = "Номенклатура, Характеристика, Назначение";
	ОстаткиОтправителя.Индексы.Добавить(ПоляОтбора);
	РаспределитьКоличество(Результат, ПотребностиПолучателя, ОстаткиОтправителя, ПоляОтбора);
	
	Для Каждого Строка Из ПотребностиПолучателя Цикл
		
		Если Строка.Потребность > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ОстаткиОтправителя Цикл
		
		Если Строка.Доступно > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПотребностиИДоступныеОстатки(Отборы)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Остатки.Номенклатура           КАК Номенклатура,
		|	Остатки.Характеристика         КАК Характеристика,
		|	Остатки.Назначение             КАК Назначение,
		|	Остатки.Склад                  КАК Склад
		|ПОМЕСТИТЬ ВтТоварыОбособленные
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(, &СкладОтправитель И &Назначение И &Номенклатура И &Характеристика) КАК Остатки
		|ГДЕ
		|	Остатки.ПотребностьОстаток - Остатки.КЗаказуОстаток > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|//////////////////////////////////////////////////////////
		|" +
	РегистрыНакопления.ГрафикПоступленияТоваров.ТекстЗапросаОстатковИОборотовОбособленных(Ложь, Неопределено, Истина);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Если Отборы.Свойство("СкладОтправитель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкладОтправитель", "Склад = &СкладОтправитель");
		Запрос.УстановитьПараметр("СкладОтправитель", Отборы.СкладОтправитель);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкладОтправитель", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Назначение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Назначение", "Назначение = &Назначение");
		Запрос.УстановитьПараметр("Назначение", Отборы.Назначение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Назначение", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Номенклатура") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", Отборы.Номенклатура);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Характеристика") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Характеристика = &Характеристика");
		Запрос.УстановитьПараметр("Характеристика", Отборы.Характеристика);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДоступныеОстатки = РегистрыНакопления.ГрафикПоступленияТоваров.ТаблицаДоступныеОстатки(Выборка, Истина, "Товар");
	
	// 2) Получение остатков и оборотов на складе-получателе.
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Остатки.Номенклатура   КАК Номенклатура,
		|	Остатки.Характеристика КАК Характеристика,
		|	Остатки.Назначение     КАК Назначение,
		|	Остатки.Склад          КАК Склад
		|ПОМЕСТИТЬ ВтТоварыОбособленные
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров.Остатки(, &СкладПолучатель И &ОтборЦеховаяКладовая И &Назначение И &Номенклатура И &Характеристика) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоПодЗаказОстаток > 0
		|	И Остатки.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Назначение, Склад
		|;
		|
		|//////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Номенклатура           КАК Номенклатура,
		|	Т.Характеристика         КАК Характеристика,
		|	Т.Склад                  КАК Склад,
		|	Т.Назначение             КАК Назначение,
		|
		|	Т.НаличиеПодЗаказОстаток КАК Количество
		|
		|ПОМЕСТИТЬ ВтОбеспечениеЗаказов
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		(Номенклатура, Характеристика, Склад, Назначение) В(
		|			ВЫБРАТЬ
		|				Ключи.Номенклатура   КАК Номенклатура,
		|				Ключи.Характеристика КАК Характеристика,
		|				Ключи.Склад          КАК Склад,
		|				Ключи.Назначение     КАК Назначение
		|			ИЗ
		|				ВтТоварыОбособленные КАК Ключи
		|		)) КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.Номенклатура             КАК Номенклатура,
		|	Набор.Характеристика           КАК Характеристика,
		|	Набор.Склад                    КАК Склад,
		|	Набор.Назначение               КАК Назначение,
		|
		|	Набор.Период                   КАК Период,
		|	СУММА(Набор.Количество)        КАК Количество
		|
		|ПОМЕСТИТЬ ВтОборотыГрафикаОбособленные
		|ИЗ(
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура        КАК Номенклатура,
		|		Таблица.Характеристика      КАК Характеристика,
		|		Таблица.Склад               КАК Склад,
		|		Таблица.Назначение          КАК Назначение,
		|		
		|		ВЫБОР КОГДА Таблица.ДатаСобытия <= &НачалоТекущегоДня ТОГДА
		|					&НачалоТекущегоДня
		|				ИНАЧЕ
		|					Таблица.ДатаСобытия
		|			КОНЕЦ                         КАК Период,
		|			
		|		Таблица.КоличествоПодЗаказ        КАК Количество
		|	ИЗ
		|		РегистрНакопления.ГрафикПоступленияТоваров КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОбособленные КАК Отбор
		|			ПО Таблица.Номенклатура   = Отбор.Номенклатура
		|			 И Таблица.Характеристика = Отбор.Характеристика
		|			 И Таблица.Склад          = Отбор.Склад
		|			 И Таблица.Назначение     = Отбор.Назначение
		|	ГДЕ
		|		Таблица.Активность
		|		И Таблица.КоличествоПодЗаказ <> 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура        КАК Номенклатура,
		|		Таблица.Характеристика      КАК Характеристика,
		|		Таблица.Склад               КАК Склад,
		|		Таблица.Назначение          КАК Назначение,
		|		
		|		ВЫБОР КОГДА Таблица.ДатаОтгрузки <= &НачалоТекущегоДня ТОГДА
		|					&НачалоТекущегоДня
		|				ИНАЧЕ
		|					Таблица.ДатаОтгрузки
		|			КОНЕЦ                         КАК Период,
		|		
		|		-Таблица.КоличествоПодЗаказ       КАК Количество
		|	ИЗ
		|		РегистрНакопления.ГрафикОтгрузкиТоваров КАК Таблица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыОбособленные КАК Отбор
		|			ПО Таблица.Номенклатура   = Отбор.Номенклатура
		|			 И Таблица.Характеристика = Отбор.Характеристика
		|			 И Таблица.Склад          = Отбор.Склад
		|			 И Таблица.Назначение     = Отбор.Назначение
		|	ГДЕ
		|		Таблица.Активность
		|		И Таблица.КоличествоПодЗаказ <> 0) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Назначение,
		|	Набор.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период
		|;
		|
		|///////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад          КАК Склад,
		|	Таблица.Назначение     КАК Назначение,
		|
		|	ЕСТЬNULL(ОборотыГрафика.Период, ДАТАВРЕМЯ(1,1,1)) КАК Период,
		|	ЕСТЬNULL(ОборотыГрафика.Количество, 0)            КАК Оборот,
		|
		|	ЕСТЬNULL(ОстаткиСклада.Количество, 0) КАК Остаток
		|ИЗ
		|	ВтТоварыОбособленные КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОбеспечениеЗаказов КАК ОстаткиСклада
		|		ПО Таблица.Номенклатура   = ОстаткиСклада.Номенклатура
		|		 И Таблица.Характеристика = ОстаткиСклада.Характеристика
		|		 И Таблица.Склад          = ОстаткиСклада.Склад
		|		 И Таблица.Назначение     = ОстаткиСклада.Назначение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОборотыГрафикаОбособленные КАК ОборотыГрафика
		|		ПО Таблица.Номенклатура   = ОборотыГрафика.Номенклатура
		|		 И Таблица.Характеристика = ОборотыГрафика.Характеристика
		|		 И Таблица.Склад          = ОборотыГрафика.Склад
		|		 И Таблица.Назначение     = ОборотыГрафика.Назначение
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение,
		|	Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если Отборы.Свойство("СкладПолучатель") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкладПолучатель", "Склад = &СкладПолучатель");
		Запрос.УстановитьПараметр("СкладПолучатель", Отборы.СкладПолучатель);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкладПолучатель", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Назначение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Назначение", "Назначение = &Назначение");
		Запрос.УстановитьПараметр("Назначение", Отборы.Назначение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Назначение", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("ОтборЦеховаяКладовая") Тогда
		Запрос.УстановитьПараметр("ОтборЦеховаяКладовая", Отборы.ОтборЦеховаяКладовая);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЦеховаяКладовая", "Склад.ЦеховаяКладовая = &ОтборЦеховаяКладовая");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЦеховаяКладовая", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Номенклатура") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", Отборы.Номенклатура);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Номенклатура", "ИСТИНА");
	КонецЕсли;
	
	Если Отборы.Свойство("Характеристика") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "Характеристика = &Характеристика");
		Запрос.УстановитьПараметр("Характеристика", Отборы.Характеристика);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Характеристика", "ИСТИНА");
	КонецЕсли;

	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	ВыборкаПотребности = Запрос.Выполнить().Выбрать();
	
	// 3) Расчет необеспеченных потребностей на складе-получателе.
	Потребности = ДоступныеОстатки.СкопироватьКолонки();
	Потребности.Колонки.ДатаДоступности.Имя = "ДатаОтгрузки";
	КлючСтроки = ОбеспечениеКлиентСервер.КлючНоменклатураХарактеристикаСкладНазначение();
	
	ЕстьЗаписи = ВыборкаПотребности.Следующий();
	Пока ЕстьЗаписи Цикл
		
		ЗаполнитьЗначенияСвойств(КлючСтроки, ВыборкаПотребности);
		
		НарастающийИтог     = ВыборкаПотребности.Остаток;
		ИзмениласьЗапись = Ложь;
		
		// Цикл по сочетанию номенклатура \ характеристика \ склад \ назначение.
		Пока Не ИзмениласьЗапись Цикл
			
			НарастающийИтог = НарастающийИтог + ВыборкаПотребности.Оборот;
			
			Если НарастающийИтог < 0 Тогда
				
				СтрокаТаблицы = Потребности.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПотребности);
				СтрокаТаблицы.ДатаОтгрузки = ВыборкаПотребности.Период;
				СтрокаТаблицы.Количество = -НарастающийИтог;
				НарастающийИтог = 0;
				
			КонецЕсли;
			
			// Переход к следующей записи.
			ЕстьЗаписи = ВыборкаПотребности.Следующий();
			
			ИзмениласьЗапись = Не ЕстьЗаписи Или ОбеспечениеКлиентСервер.ИзменилсяКлюч(КлючСтроки, ВыборкаПотребности);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Структура("Потребности, ДоступныеОстатки", Потребности, ДоступныеОстатки);
	Возврат Результат;
	
КонецФункции

Процедура РаспределитьКоличество(Результат, ТаблицаПотребностей, ТаблицаОстатков, ПоляОтбора, ПолеФильтра = "")
	
	СтруктураОтбораОстатков = Новый Структура(ПоляОтбора);
	Для Каждого СтрокаТаблицы Из ТаблицаПотребностей Цикл
		
		Если ПолеФильтра <> "" И Не СтрокаТаблицы[ПолеФильтра] Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбораОстатков, СтрокаТаблицы);
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораОстатков);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если СтрокаТаблицы.Потребность <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если НайденнаяСтрока.Доступно > 0 Тогда
				
				КоличествоРаспределить = Мин(НайденнаяСтрока.Доступно, СтрокаТаблицы.Потребность);
				СтрокаТаблицы.Потребность = СтрокаТаблицы.Потребность - КоличествоРаспределить;
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.СкладОтправитель = НайденнаяСтрока.СкладОтправитель;
				НоваяСтрока.СкладОтправительНаименование = НайденнаяСтрока.СкладОтправительНаименование;
				НоваяСтрока.Доступно         = КоличествоРаспределить;
				НоваяСтрока.Потребность      = КоличествоРаспределить;
				НайденнаяСтрока.Доступно     = НайденнаяСтрока.Доступно - КоличествоРаспределить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиТаблицыДетальныеЗаписи(ДетальныеЗаписи)
	
	ДетальныеЗаписи.Колонки.Добавить("Период");
	ДетальныеЗаписи.Колонки.Добавить("КПеремещению", Новый ОписаниеТипов("Число"));
	ДетальныеЗаписи.Колонки.Добавить("Склад");
	ДетальныеЗаписи.Колонки.Добавить("Доступно");
	ДетальныеЗаписи.Колонки.Добавить("СкладНаименование");
	ДетальныеЗаписи.Колонки.Добавить("Потребность");
	ДетальныеЗаписи.Колонки.Добавить("ДатаПотребности");
	ДетальныеЗаписи.Колонки.Добавить("ЭтоЗаГраницейПериода");
	ДетальныеЗаписи.Колонки.Добавить("ЭтоДефицит");
	
КонецПроцедуры

Функция ДетальныеЗаписи(ПараметрыЗаполнения) Экспорт
	
	ДетальныеЗаписи = Новый ТаблицаЗначений();
	ЗаполнитьКолонкиТаблицыДетальныеЗаписи(ДетальныеЗаписи);
	
	Отборы = Новый Структура();
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СкладОтправитель) Тогда
		Отборы.Вставить("СкладОтправитель", ПараметрыЗаполнения.СкладОтправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.СкладПолучатель) Тогда
		Отборы.Вставить("СкладПолучатель", ПараметрыЗаполнения.СкладПолучатель);
	КонецЕсли;
	
	ОтборЦеховаяКладовая = ОтборЦеховаяКладовая(ПараметрыЗаполнения.ВариантОформления);
	
	Если ОтборЦеховаяКладовая <> Неопределено Тогда
		Отборы.Вставить("ОтборЦеховаяКладовая", ОтборЦеховаяКладовая);
	КонецЕсли;
	
	Отборы.Вставить("Назначение",     ПараметрыЗаполнения.Назначение);
	Отборы.Вставить("Номенклатура",   ПараметрыЗаполнения.Номенклатура);
	Отборы.Вставить("Характеристика", ПараметрыЗаполнения.Характеристика);
	
	ТаблицаТовары = Товары(
		ПараметрыЗаполнения.ДатаОтгрузки,
		ПараметрыЗаполнения.ДатаСледующейОтгрузки,
		ПараметрыЗаполнения.ПотребностиДоДаты,
		Отборы,
		ПараметрыЗаполнения.Режим = "РАСПРЕДЕЛЕНИЕ_ОСТАТКОВ");
	
	Если ПараметрыЗаполнения.Режим = "РАСПРЕДЕЛЕНИЕ_ОСТАТКОВ" Тогда
		Колонки = "Номенклатура,Характеристика,Назначение,Период,ДатаПотребности,СкладПолучательНаименование,СкладПолучатель";
	ИначеЕсли  ПараметрыЗаполнения.Режим = "ОБЕСПЕЧЕНИЕ_ПОТРЕБНОСТЕЙ" Тогда
		Колонки = "Номенклатура,Характеристика,Назначение,СкладОтправительНаименование,СкладОтправитель";
	КонецЕсли;
	
	ТаблицаТовары.Свернуть(Колонки, "Доступно,Потребность");
	ТаблицаТовары.Сортировать(Колонки);
	
	КоличествоДоступно    = 0;
	КоличествоПотребность = 0;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		КоличествоДоступно     = КоличествоДоступно    + СтрокаТаблицы.Доступно;
		КоличествоПотребность  = КоличествоПотребность + СтрокаТаблицы.Потребность;
		
		Если ПараметрыЗаполнения.Режим = "РАСПРЕДЕЛЕНИЕ_ОСТАТКОВ" И СтрокаТаблицы.Потребность > 0 ТОГДА
			
			НоваяСтрока = ДетальныеЗаписи.Добавить();
			
			НоваяСтрока.Период               = СтрокаТаблицы.Период;
			НоваяСтрока.Склад                = СтрокаТаблицы.СкладПолучатель;
			НоваяСтрока.СкладНаименование    = СтрокаТаблицы.СкладПолучательНаименование;
			НоваяСтрока.Потребность          = СтрокаТаблицы.Потребность;
			НоваяСтрока.ДатаПотребности      = СтрокаТаблицы.ДатаПотребности;
			
		ИначеЕсли ПараметрыЗаполнения.Режим = "ОБЕСПЕЧЕНИЕ_ПОТРЕБНОСТЕЙ" И СтрокаТаблицы.Доступно > 0 ТОГДА
			
			НоваяСтрока = ДетальныеЗаписи.Добавить();
			
			НоваяСтрока.Склад                = СтрокаТаблицы.СкладОтправитель;
			НоваяСтрока.СкладНаименование    = СтрокаТаблицы.СкладОтправительНаименование;
			НоваяСтрока.Доступно             = СтрокаТаблицы.Доступно;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("КоличествоДоступно,КоличествоПотребность,ДетальныеЗаписи",
		КоличествоДоступно,КоличествоПотребность,ДетальныеЗаписи);
	Возврат Результат;
	
КонецФункции

Процедура ТоварыЗаполнитьСлужебныеРеквизиты(Товары)
	
	// Для заполнения используются следующие данные табличной части Товары:
	// - Номенклатура,
	// - Отметка,
	// - Количество.
	//
	// Заполняются следующие реквизиты формы, сязанные с табличной частью Товары:
	// - Артикул,
	// - Упаковка,
	// - Код,
	// - Вес,
	// - ВесЕдиницы,
	// - Объем,
	// - ОбъемЕдиницы.
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИсточник.НомерСтрокиДляПоиска  КАК НомерСтрокиДляПоиска,
		|	ТаблицаИсточник.Номенклатура КАК Номенклатура,
		|	ТаблицаИсточник.Количество   КАК Количество,
		|	ТаблицаИсточник.Отметка      КАК Отметка
		|ПОМЕСТИТЬ ВтТаблицаИсточник
		|ИЗ
		|	&ТаблицаИсточник КАК ТаблицаИсточник
		|;
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИсточник.НомерСтрокиДляПоиска  КАК НомерСтрокиДляПоиска,
		|	
		|	НоменклатураИсточника.ЕдиницаИзмерения КАК Упаковка,
		|	НоменклатураИсточника.Код      КАК Код,
		|	НоменклатураИсточника.Артикул  КАК Артикул,
		|	&ТекстЗапросаВесНоменклатуры   КАК ВесЕдиницы,
		|	&ТекстЗапросаОбъемНоменклатуры КАК ОбъемЕдиницы,
		|	
		|	ВЫБОР КОГДА ТаблицаИсточник.Отметка ТОГДА
		|			ТаблицаИсточник.Количество * &ТекстЗапросаВесНоменклатуры
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ                          КАК Вес,
		|	
		|	ВЫБОР КОГДА ТаблицаИсточник.Отметка ТОГДА
		|			ТаблицаИсточник.Количество * &ТекстЗапросаОбъемНоменклатуры
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ                          КАК Объем
		|	
		|ИЗ
		|	ВтТаблицаИсточник КАК ТаблицаИсточник
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураИсточника
		|		ПО НоменклатураИсточника.Ссылка = ТаблицаИсточник.Номенклатура";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"НоменклатураИсточника.ЕдиницаИзмерения",
			"НоменклатураИсточника"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
			"НоменклатураИсточника.ЕдиницаИзмерения",
			"НоменклатураИсточника"));
		
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТаблицаИсточник = Товары.Скопировать(, "НомерСтрокиДляПоиска,Номенклатура,Отметка,Количество");
	
	Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовары = Товары[Выборка.НомерСтрокиДляПоиска - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТовары,
		                         Выборка,
		                         "Артикул,
		                         |Код,
		                         |Упаковка,
		                         |Вес,
		                         |ВесЕдиницы,
		                         |Объем,
		                         |ОбъемЕдиницы");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорзинуСкладов(Товары, КорзинаСкладов)
	
	ДанныеПоСкладам = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		Для Каждого ДетальнаяЗапись Из СтрокаТаблицы.ДетальныеЗаписи Цикл
			
			Значение = ДанныеПоСкладам.Получить(ДетальнаяЗапись.Склад);
			Если Значение = Неопределено Тогда
				
				Значение = Новый Структура("Вес,Объем,ЧастотаСтрок,ЧастотаСтрокСНулевымВесом,ЧастотаСтрокСНулевымОбъемом", 0, 0, 0, 0, 0);
				ДанныеПоСкладам.Вставить(ДетальнаяЗапись.Склад, Значение);
				
			КонецЕсли;
			
			Значение.Вес     = Значение.Вес   + СтрокаТаблицы.ВесЕдиницы   * ДетальнаяЗапись.КПеремещению;
			Значение.Объем   = Значение.Объем + СтрокаТаблицы.ОбъемЕдиницы * ДетальнаяЗапись.КПеремещению;
			Значение.ЧастотаСтрок = Значение.ЧастотаСтрок + 1;
			
			Значение.ЧастотаСтрокСНулевымВесом   = Значение.ЧастотаСтрокСНулевымВесом   + ?(СтрокаТаблицы.ВесЕдиницы   = 0, 0, 1);
			Значение.ЧастотаСтрокСНулевымОбъемом = Значение.ЧастотаСтрокСНулевымОбъемом + ?(СтрокаТаблицы.ОбъемЕдиницы = 0, 0, 1);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеПоСкладам Цикл
		
		НоваяСтрока = КорзинаСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
		НоваяСтрока.Склад = Элемент.Ключ;
		НоваяСтрока.ПризнакЕстьСтрокиСНулевымВесом   = ?(Значение.ЧастотаСтрокСНулевымВесом   = 0, 0, 1);
		НоваяСтрока.ПризнакЕстьСтрокиСНулевымОбъемом = ?(Значение.ЧастотаСтрокСНулевымОбъемом = 0, 0, 1);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
