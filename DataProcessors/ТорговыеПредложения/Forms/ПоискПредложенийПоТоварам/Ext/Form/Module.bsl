
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие; // Признак выполнения обработки закрытия формы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не БизнесСеть.ОрганизацияЗарегистрирована() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Требуется регистрация в сервисе 1С:Бизнес-сеть.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыКоманды <> Неопределено Тогда
		ЗаполнитьПоКонтексту(Параметры.ПараметрыКоманды);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ТорговыеПредложенияПереопределяемый.ВалютаРегламентированногоУчета();
	КонецЕсли;
	Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Параметры.Свойство("Организация", Организация);
	КонецЕсли;
	
	ПревышениеМинимальнойЦены = 25;
	МаксимальныйСрокПоставки = 7;
	ОграничениеТорговыхПредложений = 5;
	ПоискПоНаименованию = Истина;
	
	УникальныйИдентификаторКорзины = УникальныйИдентификатор;
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.СписокНоменклатура.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.СписокХарактеристика.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочникаЕдиницыИзмерения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ЕдиницыИзмерения");
	ОграничениеТипаИмяСправочникаЕдиницыИзмерения = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочникаЕдиницыИзмерения);
	Элементы.СписокНоменклатураЕдиницаИзмерения.ОграничениеТипа = ОграничениеТипаИмяСправочникаЕдиницыИзмерения;
	Элементы.СписокУпаковка.ОграничениеТипа = ОграничениеТипаИмяСправочникаЕдиницыИзмерения;
	
	// Проверка владельца упаковки.
	Если Метаданные.Справочники[ИмяСправочникаЕдиницыИзмерения].Владельцы.Количество() Тогда
		НовыйМассив = Новый Массив;
		Для Каждого ВладелецУпаковки Из Метаданные.Справочники[ИмяСправочникаЕдиницыИзмерения].Владельцы Цикл
			НовыйМассив.Добавить(Новый СвязьПараметраВыбора(ВладелецУпаковки.Имя, "Элементы.Список.Текущиеданные.Номенклатура"));
		КонецЦикла;
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СписокУпаковка.СвязиПараметровВыбора = НовыеСвязи;
	КонецЕсли;
	
	ТорговыеПредложенияПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	ДополнительныеПараметры = Новый Структура("ИмяФормы");
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ИсточникВыбора);
	ОбработкаВыбораНаСервере(ВыбранноеЗначение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВКорзине"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины Тогда 

		ПоставщикИдентификатор = СтрЗаменить(Параметр.ПоставщикИдентификатор, "/", "_");
		
		Отбор = Новый Структура("Идентификатор", ПоставщикИдентификатор);
		Если Поставщики.НайтиСтроки(Отбор).Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ПредложениеИдентификатор_" + ПоставщикИдентификатор,
			Параметр.ПредложениеИдентификатор);
			
		Если Параметр.Свойство("Номенклатура") Тогда
			Отбор.Вставить("Номенклатура", Параметр.Номенклатура);
		КонецЕсли;
		Если Параметр.Свойство("Характеристика") Тогда
			Отбор.Вставить("Характеристика", Параметр.Характеристика);
		КонецЕсли;
		
		ПоискСтроки = Список.НайтиСтроки(Отбор);
		Если ПоискСтроки.Количество() Тогда
			ТекущаяСтрока = ПоискСтроки[0];
			Если ТекущаяСтрока["Пометка_" + ПоставщикИдентификатор] = Ложь Тогда
				ТекущаяСтрока["Пометка_" + ПоставщикИдентификатор] = Истина;
				Элемент = Новый Структура;
				Элемент.Вставить("Имя", "Пометка_" + ПоставщикИдентификатор);
				Подключаемый_ПометкаПриИзменении(Элемент, ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзКорзины"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины Тогда
		
		Для Каждого ПредложениеИдентификатор Из Параметр.ИдентификаторыПредложений Цикл 
			Отбор = Новый Структура();
			Отбор.Вставить("ПредложениеИдентификатор", ПредложениеИдентификатор);
			ПоискСтроки = Список.НайтиСтроки(Отбор);
			Если ПоискСтроки.Количество() Тогда
				ТекущаяСтрока = ПоискСтроки[0];
				Для Каждого Поставщик Из Поставщики Цикл 
					ТекущаяСтрока["Пометка_" + Поставщик.Идентификатор] = Ложь;
					Элемент = Новый Структура;
					Элемент.Вставить("Имя", "Пометка_" + Поставщик.Идентификатор);
					Подключаемый_ПометкаПриИзменении(Элемент, ТекущаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_СформированыЗаказы" И Параметр.Свойство("УникальныйИдентификаторКорзины")
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины Тогда
		
		// Идентификаторы поставщиков для удаления колонок.
		ИдентификаторыПоставщиков = Новый Массив;
		
		// Очистка товаров.
		СписокУдаляемыхСтрок = Новый Массив;
		Для Каждого СтрокаСписка Из Список Цикл
			Если СтрокаСписка.Пометка Тогда
				СписокУдаляемыхСтрок.Добавить(СтрокаСписка);
				
				Если ИдентификаторыПоставщиков.Найти(СтрокаСписка.ПоставщикИдентификатор) = Неопределено Тогда
					ИдентификаторыПоставщиков.Добавить(СтрокаСписка.ПоставщикИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаСписка Из СписокУдаляемыхСтрок Цикл
			Список.Удалить(Список.Индекс(СтрокаСписка));
		КонецЦикла;
		
		ПересчитатьСводныеДанные(Ложь, ИдентификаторыПоставщиков);
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" ИЛИ ИмяСобытия = "ПодборПроизведен" Тогда
		
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	
	ТорговыеПредложенияПереопределяемый.ОбработатьОповещение(ИмяСобытия, Параметр, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокРегиона(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И НЕ ВыполняетсяЗакрытие И Список.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() <> 0 Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
						НСтр("ru = 'Список подобранных товаров будет очищен. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьПодобраноТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОформленияЗаказов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоТоварам.ОткрытьКарточку");
	
	Если СтрНайти(Поле.Имя, "_") > 0 Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Идентификатор = Сред(Поле.Имя, СтрНайти(Поле.Имя,"_") + 1);
		ПоставщикИдентификатор = "ПредложениеИдентификатор_" + Идентификатор;
		ПредложениеИдентификатор = ТекущиеДанные[ПоставщикИдентификатор];
		Если Не ЗначениеЗаполнено(ПредложениеИдентификатор) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
		ПараметрыФормы.Вставить("ПредложениеИдентификатор", ПредложениеИдентификатор);
		ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ПараметрыФормы.Вставить("Валюта", Валюта);
		ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ТорговоеПредложение", ПараметрыФормы, ЭтотОбъект,
			ПредложениеИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поставщики.Количество() И ТекущиеДанные.КоличествоПредложений > 0 Тогда
		
		// Формирование надписи о всех торговых предложениях по строке.
		Если ТекущиеДанные.МинимальнаяЦена = ТекущиеДанные.МаксимальнаяЦена Тогда
			ДиапазонЦен = СтрШаблон(НСтр("ru = 'цена %1 %2'"), ТекущиеДанные.МинимальнаяЦена, Валюта);
		Иначе
			ДиапазонЦен = СтрШаблон(НСтр("ru = 'цены %1 - %2 %3'"), ТекущиеДанные.МинимальнаяЦена,
				ТекущиеДанные.МаксимальнаяЦена, Валюта);
		КонецЕсли;
		
		Если ТекущиеДанные.МинимальныйСрокПоставки = ТекущиеДанные.МаксимальныйСрокПоставки Тогда
			Если ТекущиеДанные.МинимальныйСрокПоставки = 0 Тогда
				ДиапазонПоставки = НСтр("ru = 'товар в наличии'");
			Иначе
				ДиапазонПоставки = СтрШаблон(НСтр("ru = 'поставка %1 дн.'"), ТекущиеДанные.МинимальныйСрокПоставки);
			КонецЕсли;
		Иначе
			ДиапазонПоставки = СтрШаблон(НСтр("ru = 'поставка %1 - %2 дн.'"), ТекущиеДанные.МинимальныйСрокПоставки,
				ТекущиеДанные.МаксимальныйСрокПоставки);
		КонецЕсли;
		
		ИнформацияПоТовару = СтрШаблон(НСтр("ru = 'Всего предложений %1, %2, %3'"), ТекущиеДанные.КоличествоПредложений,
			ДиапазонЦен, ДиапазонПоставки);
		
	Иначе
		
		ИнформацияПоТовару = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПослеУдаления(Элемент)
	
	ИнформацияПоТовару = "";
	ПересчитатьСводныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, РеквизитыНоменклатуры(ТекущиеДанные.Номенклатура));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПоставщикИдентификатор) Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные["Цена_" + ТекущиеДанные.ПоставщикИдентификатор];
		ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПометкаПриИзменении(Элемент, ТекущиеДанные = Неопределено)
	
	Идентификатор = Сред(Элемент.Имя, 9);
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
	КонецЕсли;
	
	Для каждого СтрокаПоставщика Из Поставщики Цикл
		
		Если СтрокаПоставщика.Идентификатор = Идентификатор Тогда
			
			// Если строка не заполнена, то сбрасываем флаг выбора.
			Если ТекущиеДанные["Пометка_" + СтрокаПоставщика.Идентификатор] = Истина 
				И ТекущиеДанные["Цена_" + СтрокаПоставщика.Идентификатор] = 0 Тогда
				ТекущиеДанные["Пометка_" + СтрокаПоставщика.Идентификатор] = Ложь;
			КонецЕсли; 
			
			ТекущиеДанные.Пометка = ТекущиеДанные["Пометка_" + СтрокаПоставщика.Идентификатор];
			Если ТекущиеДанные.Пометка Тогда
				// Установка флага колонки поставщика и увеличение показателя "к заказу".
				ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные["Цена_" + СтрокаПоставщика.Идентификатор];
				СтрокаПоставщика.КЗаказу = СтрокаПоставщика.КЗаказу + 1;
				ТекущиеДанные.ПоставщикИдентификатор = СтрокаПоставщика.Идентификатор;
				ТекущиеДанные.ПредложениеИдентификатор = ТекущиеДанные["ПредложениеИдентификатор_"
					+ СтрокаПоставщика.Идентификатор];
				ТекущиеДанные.СтавкаНДС = ТекущиеДанные["СтавкаНДС_" + СтрокаПоставщика.Идентификатор];
				ТекущиеДанные.ЦенаВключаетНДС = ТекущиеДанные["ЦенаВключаетНДС_" + СтрокаПоставщика.Идентификатор];
			Иначе
				// Снятие флага с колонки поставщика и уменьшение показателя "к заказу".
				Если ЗначениеЗаполнено(ТекущиеДанные.ПредложениеИдентификатор) Тогда
					ТекущиеДанные.ПредложениеИдентификатор = "";
					СтрокаПоставщика.КЗаказу = СтрокаПоставщика.КЗаказу - 1;
				КонецЕсли;
				ТекущиеДанные.Сумма = 0;
				ТекущиеДанные.ПоставщикИдентификатор = Неопределено;
				ТекущиеДанные.СтавкаНДС = Неопределено;
				ТекущиеДанные.ЦенаВключаетНДС = Ложь;
			КонецЕсли;
			
		Иначе
			
			// Снятие флага с колонки поставщика и уменьшение показателя "к заказу".
			Если ТекущиеДанные["Пометка_" + СтрокаПоставщика.Идентификатор] = Истина Тогда
				ТекущиеДанные["Пометка_" + СтрокаПоставщика.Идентификатор] = Ложь;
				СтрокаПоставщика.КЗаказу = СтрокаПоставщика.КЗаказу - 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставщики

&НаКлиенте
Процедура ТаблицаПоставщиковПометкаПриИзменении(Элемент)
	
	// Снятие видимости колонок.
	Для Каждого СтрокаПоставщика Из Поставщики Цикл
		Видимость = СтрокаПоставщика.Пометка;
		Элементы["ГруппаПоставщика_" + СтрокаПоставщика.Идентификатор].Видимость = Видимость;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПредложения(Команда)
	
	ОчиститьСообщения();
	
	Обработчик = Новый ОписаниеОповещения("НастройкаПоискаПоТоварамЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОграничениеТорговыхПредложений", ОграничениеТорговыхПредложений);
	ПараметрыОткрытия.Вставить("ПревышениеМинимальнойЦены", ПревышениеМинимальнойЦены);
	ПараметрыОткрытия.Вставить("МаксимальныйСрокПоставки", МаксимальныйСрокПоставки);
	ПараметрыОткрытия.Вставить("ПоискПоНаименованию", ПоискПоНаименованию);
	ПараметрыОткрытия.Вставить("ПоискПоАртикулу", ПоискПоАртикулу);
	ПараметрыОткрытия.Вставить("ПоискПоШтрихКоду", ПоискПоШтрихКоду);
	ПараметрыОткрытия.Вставить("ПоискПоХарактеристике", ПоискПоХарактеристике);
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.НастройкаПоискаПоТоварам", ПараметрыОткрытия,,,,,
		Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтправитьЗаказы(Команда)
	
	ОткрытьФормуОформленияЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВыбранные(Команда)
	
	Пометка = Не Элементы.ФормаСкрытьВыбранные.Пометка;
	Элементы.ФормаСкрытьВыбранные.Пометка = Пометка;
	
	Если Пометка Тогда
		Отбор = Новый ФиксированнаяСтруктура("Пометка", Ложь);
		Элементы.Список.ОтборСтрок = Отбор;
	Иначе
		Элементы.Список.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоставщиков(Команда)
	
	Пометка = Не Элементы.ФормаСкрытьПоставщиков.Пометка;
	Элементы.ФормаСкрытьПоставщиков.Пометка = Пометка;
	Элементы.ГруппаПраво.Видимость = Не Пометка;

КонецПроцедуры

&НаКлиенте
Процедура АвтоподборПоМинимальнойЦене(Команда)
	
	АвтовыборПоСценарию("Цена");
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоподборПоСрокам(Команда)
	
	АвтовыборПоСценарию("СрокПоставки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	АвтовыборПоСценарию("СнятьПометки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРегиона(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РегионРежимОтбора",   РегионРежимОтбора);
	ПараметрыОткрытия.Вставить("РегионПредставление", РегионПредставление);
	ПараметрыОткрытия.Вставить("РегионЗначенияПолей", РегионЗначенияПолей);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборРегионаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ВыборРегионаПоиска", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереопределяемаяКоманда(Команда)
	
	ТорговыеПредложенияКлиентПереопределяемый.ОбработатьКомандуФормы(ЭтотОбъект, Команда);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоиска(Команда)
	
	Если Список.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменитьВалютуПоискаПродолжение", ЭтотОбъект),
			НСтр("ru = 'При изменении валюты необходимо выполнить повторный поиск товаров.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ИзменитьВалютуПоискаПродолжение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастройкаПоискаПоТоварамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоТоварам.НайтиПредложения");
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	ОграничениеТорговыхПредложений = Результат.ОграничениеТорговыхПредложений;
	ПревышениеМинимальнойЦены =      Результат.ПревышениеМинимальнойЦены;
	МаксимальныйСрокПоставки =       Результат.МаксимальныйСрокПоставки;
	ПоискПоНаименованию =            Результат.ПоискПоНаименованию;
	ПоискПоАртикулу =                Результат.ПоискПоАртикулу;
	ПоискПоШтрихКоду =               Результат.ПоискПоШтрихКоду;
	ПоискПоХарактеристике =          Результат.ПоискПоХарактеристике;
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Поиск торговых предложений по списку.'");
	Задание.ИмяПроцедуры = "ТорговыеПредложения.НайтиТорговыеПредложенияПоСпискуТоваров";
	
	ДлительнаяОперация = НайтиПредложенияВФоне(Задание, УникальныйИдентификатор);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Поиск торговых предложений.'");
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"НайтиПредложенияВФонеЗавершение", ЭтотОбъект, ПараметрыПроцедуры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция НайтиПредложенияВФоне( Знач Задание, Знач ИдентификаторФормы)
	
	ЗаполнитьПараметрыПоиска(Задание.ПараметрыПроцедуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, 
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПоиска(ПараметрыПоиска)
	
	Если ТипЗнч(ПараметрыПоиска) <> Тип("Структура") Тогда
		ПараметрыПоиска = Новый Структура;
	КонецЕсли;
	
	Если Валюта.Пустая() Тогда
		Валюта = ТорговыеПредложенияПереопределяемый.ВалютаРегламентированногоУчета();
	КонецЕсли;
	
	СписокЗначение = РеквизитФормыВЗначение("Список");
	СписокЗначение.ЗаполнитьЗначения(0, "КоличествоПредложений");
	СписокЗначение.ЗаполнитьЗначения("", "ПоставщикИдентификатор");
	ТорговыеПредложенияПереопределяемый.ДобавитьСлужебныеКолонкиТовары(СписокЗначение, ПоискПоШтрихКоду);
	ЗначениеВРеквизитФормы(СписокЗначение, "Список");
	
	ПараметрыПоиска.Вставить("ОграничениеТорговыхПредложений", ОграничениеТорговыхПредложений);
	ПараметрыПоиска.Вставить("ПревышениеМинимальнойЦены",      ПревышениеМинимальнойЦены);
	ПараметрыПоиска.Вставить("МаксимальныйСрокПоставки",       МаксимальныйСрокПоставки);
	ПараметрыПоиска.Вставить("ПоискПоНаименованию",            ПоискПоНаименованию);
	ПараметрыПоиска.Вставить("ПоискПоАртикулу",                ПоискПоАртикулу);
	ПараметрыПоиска.Вставить("ПоискПоШтрихКоду",               ПоискПоШтрихКоду);
	ПараметрыПоиска.Вставить("ПоискПоХарактеристике",          ПоискПоХарактеристике);
	ПараметрыПоиска.Вставить("ВалютаКод",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "Код"));
	ПараметрыПоиска.Вставить("Товары",                         Список.Выгрузить());
	ПараметрыПоиска.Товары.Индексы.Добавить("Номенклатура, Характеристика, Упаковка");
	
	// Регионы.
	Если РегионРежимОтбора <> 0 Тогда
		ПараметрыПоиска.Вставить("РегионРежимОтбора", РегионРежимОтбора);
		ПараметрыПоиска.Вставить("РегионЗначенияПолей", РегионЗначенияПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПредложенияВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если Результат = Неопределено Тогда // отменено пользователем.
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Фоновое задание отменено пользователем'");
		Возврат;
	КонецЕсли;
	
	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) 
			И ЭтоАдресВременногоХранилища(Результат.АдресРезультата)
			И ИдентификаторЗадания = ДополнительныеПараметры.ИдентификаторЗадания Тогда
			
			ЗагрузитьРезультатыПоиска(Результат.АдресРезультата);
			
			Если Поставщики.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Торговые предложения не найдены.'"));
			КонецЕсли;
			
		КонецЕсли;
		ИдентификаторЗадания = Неопределено;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'Поиск торговых предложений'"),
			Результат.ПодробноеПредставлениеОшибки,
			НСтр("ru = 'Ошибка поиска торговых предложений.'"),
			"БизнесСеть");
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"), 
					ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатыПоиска(АдресРезультата)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поставщики.Количество() Тогда
		УдалитьКолонкиПоставщиков(Поставщики.Выгрузить(, "Идентификатор").ВыгрузитьКолонку("Идентификатор"));
	КонецЕсли;
	Поставщики.Очистить();
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоставщиков = Результат.ТаблицаПоставщиков;
	ТаблицаРезультата = Результат.ТаблицаРезультата;
	ЗначениеСписок = РеквизитФормыВЗначение("Список");
	МассивРеквизитов = Новый Массив;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ТипЦена   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтавкаНДС = Неопределено;
	ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(Неопределено, СтавкаНДС);
	ТипСтавкаНДС = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(СтавкаНДС)));
	
	Для Каждого СтрокаРезультата Из ТаблицаПоставщиков Цикл
		
		Идентификатор = СтрокаРезультата.Идентификатор;
		СтрокаПоставщики = Поставщики.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоставщики, СтрокаРезультата);
		СтрокаПоставщики.Пометка = Истина;
		
		// Создание новых реквизитов формы.
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Пометка_"
			+ Идентификатор, ТипБулево, "Список", НСтр("ru = 'Пометка'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЕдиницаИзмерения_"
			+ Идентификатор, ТипСтрока, "Список", НСтр("ru = 'Ед. изм.'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Цена_"
			+ Идентификатор, ТипЦена,  "Список", НСтр("ru = 'Цена'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЛучшаяЦена_"
			+ Идентификатор, ТипБулево, "Список", НСтр("ru = 'Лучшая цена'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Валюта_"
			+ Идентификатор, ТипВалюта, "Список", НСтр("ru = 'Валюта'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СрокПоставки_"
			+ Идентификатор, ТипЧисло,  "Список", НСтр("ru = 'Срок'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Наличие_"
			+ Идентификатор, ТипСтрока, "Список", НСтр("ru = 'Наличие'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЛучшийСрок_"
			+ Идентификатор, ТипБулево, "Список", НСтр("ru = 'Лучший срок'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПредложениеИдентификатор_"
			+ Идентификатор, ТипСтрока, "Список", НСтр("ru = 'ПредложениеИдентификатор'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("СтавкаНДС_"
			+ Идентификатор, ТипСтавкаНДС, "Список", НСтр("ru = 'Ставка НДС'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦенаВключаетНДС_"
			+ Идентификатор, ТипБулево, "Список", НСтр("ru = 'Цена включает НДС'")));
		
		ДобавитьКолонкиТаблицыПоРеквизитам(ЗначениеСписок, МассивРеквизитов);
		
		ИзменитьРеквизиты(МассивРеквизитов);
		МассивРеквизитов.Очистить();
		
	КонецЦикла;
	
	// Заполнение найденных значений.
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		Идентификатор = СтрокаРезультата.ПоставщикИНН
			+ ?(ПустаяСтрока(СтрокаРезультата.ПоставщикКПП), "", "_" + СтрокаРезультата.ПоставщикКПП);
		
		// Установка значений.
		СтрокаСписка = ЗначениеСписок[СтрокаРезультата.ИндексСтроки]; // Получим строку по номеру.
		СтрокаСписка["Цена_" + Идентификатор]         = СтрокаРезультата.Цена;
		СтрокаСписка["СрокПоставки_" + Идентификатор] = СтрокаРезультата.СрокПоставки;
		Если СтрокаРезультата.СрокПоставки = 0 Тогда
			СтрокаСписка["Наличие_" + Идентификатор] = НСтр("ru = 'в наличии'");
			СтрокаСписка["ЛучшийСрок_" + Идентификатор] = Истина;
		Иначе
			СтрокаСписка["Наличие_" + Идентификатор] =    НСтр("ru = 'дн.'")
		КонецЕсли;
		СтрокаСписка["ЛучшаяЦена_" + Идентификатор]       = СтрокаРезультата.ЛучшаяЦена;
		СтрокаСписка["ЛучшийСрок_" + Идентификатор]       = СтрокаРезультата.ЛучшийСрок;
		СтрокаСписка["ЕдиницаИзмерения_" + Идентификатор] = СтрокаРезультата.Упаковка;
		СтрокаСписка["Валюта_" + Идентификатор]           = Валюта;
		СтрокаСписка["СтавкаНДС_" + Идентификатор]        = СтрокаРезультата.СтавкаНДС;
		СтрокаСписка["ПредложениеИдентификатор_" + Идентификатор] = СтрокаРезультата.ПредложениеИдентификатор;
		СтрокаСписка["ЦенаВключаетНДС_" + Идентификатор]  = СтрокаРезультата.ЦенаВключаетНДС;
		
		ЗаполнитьЗначенияСвойств(СтрокаСписка, СтрокаРезультата,
			"КоличествоПредложений, МинимальныйСрокПоставки, МаксимальныйСрокПоставки");
		СтрокаСписка.МинимальнаяЦена  = СтрокаРезультата.МинимальнаяЦена / 100;
		СтрокаСписка.МаксимальнаяЦена = СтрокаРезультата.МаксимальнаяЦена / 100;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ЗначениеСписок, "Список");
	
	// Удаление старых элементов условное оформление.
	МассивУдаления = Новый Массив;
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "ОтметкаЛучшегоПредложения" Тогда
			МассивУдаления.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементОформления Из МассивУдаления Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла;
	
	// Создание элементов формы.
	Для Каждого ЭлементСписка Из Поставщики Цикл
		Идентификатор = ЭлементСписка.Идентификатор;
		ЗаголовокГруппы = ЭлементСписка.Наименование;
		
		// Основная группа.
		НовыйЭлемент = Элементы.Добавить("ГруппаПоставщика_" + Идентификатор, Тип("ГруппаФормы"),
			Элементы.ГруппаПоставщиков);
		НовыйЭлемент.Заголовок = ЗаголовокГруппы;
		НовыйЭлемент.ОтображатьВШапке = Истина;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
		НовыйЭлемент.Видимость = Истина;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 7;
		
		// Группа выбора.
		НовыйЭлемент = Элементы.Добавить("ГруппаВыбора_" + Идентификатор, Тип("ГруппаФормы"),
			Элементы["ГруппаПоставщика_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Вертикальная;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 2;
		
		НовыйЭлемент = Элементы.Добавить("Пометка_" + Идентификатор, Тип("ПолеФормы"),
			Элементы["ГруппаВыбора_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПутьКДанным = "Список.Пометка_" + Идентификатор;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПометкаПриИзменении");
		НовыйЭлемент.ШиринаЭлемента = 2;
		
		// Блокировка изменения пустого поставщика.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = "БлокировкаБезПредложения";
		ЭлементУсловногоОформления.Использование = Истина;
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Пометка_" + Идентификатор].Имя);
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПредложениеИдентификатор_" + Идентификатор);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
		// Группа предложения.
		НовыйЭлемент = Элементы.Добавить("ГруппаПредложение_" + Идентификатор, Тип("ГруппаФормы"),
			Элементы["ГруппаПоставщика_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Вертикальная;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		// -- Подгруппа Цена.
		НовыйЭлемент = Элементы.Добавить("ГруппаЦена_" + Идентификатор, Тип("ГруппаФормы"),
			Элементы["ГруппаПредложение_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("Цена_" + Идентификатор, Тип("ПолеФормы"),
			Элементы["ГруппаЦена_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.ПутьКДанным = "Список.Цена_" + Идентификатор;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("Валюта_" + Идентификатор, Тип("ПолеФормы"),
			Элементы["ГруппаЦена_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.ПутьКДанным = "Список.Валюта_" + Идентификатор;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		// -- Подгруппа поставка.
		НовыйЭлемент = Элементы.Добавить("ГруппаПоставка_" + Идентификатор, Тип("ГруппаФормы"),
			Элементы["ГруппаПредложение_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("СрокПоставки_" + Идентификатор, Тип("ПолеФормы"),
			Элементы["ГруппаПоставка_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.ПутьКДанным = "Список.СрокПоставки_" + Идентификатор;
		НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		НовыйЭлемент = Элементы.Добавить("Наличие_" + Идентификатор, Тип("ПолеФормы"),
			Элементы["ГруппаПоставка_" + Идентификатор]);
		НовыйЭлемент.ОтображатьВШапке = Ложь;
		НовыйЭлемент.ПутьКДанным = "Список.Наличие_" + Идентификатор;
		НовыйЭлемент.Шрифт = Новый Шрифт(, 8);
		НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 5;
		
		// Лучшая цена.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = "ОтметкаЛучшегоПредложения";
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["Цена_" + Идентификатор].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЛучшаяЦена_" + Идентификатор);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
		
		// Лучший срок.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = "ОтметкаЛучшегоПредложения";
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["СрокПоставки_" + Идентификатор].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЛучшийСрок_" + Идентификатор);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));

	КонецЦикла;
	
	АвтовыборПоСценарию("Цена");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКолонкиТаблицыПоРеквизитам(ЗначениеСписок, МассивРеквизитов)
	
	Для каждого ЭлементМассива Из МассивРеквизитов Цикл
		ЗначениеСписок.Колонки.Добавить(ЭлементМассива.Имя, ЭлементМассива.ТипЗначения, ЭлементМассива.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьПодобраноТоваров(Форма)
	
	ВыбранныеСтроки = Форма.Список.НайтиСтроки(Новый Структура("Пометка", Истина));
	КоличествоТоваров = ВыбранныеСтроки.Количество();
	Форма.СуммаВсего = Форма.Список.Итог("Сумма");
	
	Если КоличествоТоваров = 0 Тогда
		Форма.НадписьПодобраноТоваров = НСтр("ru = 'Отсутствуют товары для заказа'");
	Иначе
		Форма.НадписьПодобраноТоваров = СтрШаблон(НСтр("ru = 'Товаров %1 поз. из %2 на сумму %3 %4'"),
			КоличествоТоваров, Форма.Список.Количество(), Форма.СуммаВсего, Форма.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСводныеДанные(РежимСнятияПометок = Ложь, ИдентификаторыПоставщиков = Неопределено)
	
	ОбновитьПоказателиПоставщиков(РежимСнятияПометок, ИдентификаторыПоставщиков);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОформленияЗаказов()
	
	ВыбранныеСтроки = Список.НайтиСтроки(Новый Структура("Пометка", Истина));

	СписокТоваров = Новый Массив;
	
	Для каждого СтрокаПоиска Из ВыбранныеСтроки Цикл
		
		Если Не СтрокаПоиска.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоставщика = Поставщики.НайтиСтроки(Новый Структура("Идентификатор", СтрокаПоиска.ПоставщикИдентификатор))[0];
		
		СоставПозиции = Новый Структура;
		СоставПозиции.Вставить("Наименование",     СтрокаПоиска.Номенклатура);
		СоставПозиции.Вставить("Номенклатура",     СтрокаПоиска.Номенклатура);
		СоставПозиции.Вставить("Характеристика",   СтрокаПоиска.Характеристика);
		СоставПозиции.Вставить("Количество",       СтрокаПоиска.Количество);
		СоставПозиции.Вставить("Сумма",            СтрокаПоиска.Сумма);
		СоставПозиции.Вставить("Упаковка",         СтрокаПоиска.Упаковка);
		СоставПозиции.Вставить("ЕдиницаИзмерения", СтрокаПоиска.ЕдиницаИзмерения);
		
		СоставПозиции.Вставить("ПоставщикИдентификатор", СтрокаПоиска.ПоставщикИдентификатор);
		СоставПозиции.Вставить("ПоставщикНаименование",  СтрокаПоставщика.Наименование);
		СоставПозиции.Вставить("ПоставщикИНН",           СтрокаПоставщика.ИНН);
		СоставПозиции.Вставить("ПоставщикКПП",           СтрокаПоставщика.КПП);
		СоставПозиции.Вставить("Контрагент",             СтрокаПоставщика.Контрагент);
		
		ПоставщикИдентификатор = СтрокаПоиска.ПоставщикИдентификатор;
		СоставПозиции.Вставить("Цена",         СтрокаПоиска["Цена_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("СрокПоставки", СтрокаПоиска["СрокПоставки_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("Валюта",       СтрокаПоиска["Валюта_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("ПредложениеИдентификатор", СтрокаПоиска["ПредложениеИдентификатор_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("СтавкаНДС",       СтрокаПоиска["СтавкаНДС_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("ЦенаВключаетНДС", СтрокаПоиска["ЦенаВключаетНДС_" + ПоставщикИдентификатор]);
		СоставПозиции.Вставить("КонтекстСтроки",  СтрокаПоиска.КонтекстСтроки);
		
		СписокТоваров.Добавить(СоставПозиции);
		
	КонецЦикла;
	
	Если СписокТоваров.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать позиции'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("СписокТоваров", СписокТоваров);
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	Если ЗначениеЗаполнено(КонтекстИсточника) Тогда
		ПараметрыОткрытия.Вставить("КонтекстИсточника", КонтекстИсточника);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда 
		ПараметрыОткрытия.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура АвтовыборПоСценарию(Режим)
	
	ОбновитьПоказателиПоставщиков(Истина);
	
	Для Каждого СтрокаСписка Из Список Цикл
		
		МинимальноеЗначение = 999999999;
		МинимальнаяЦена = 0;
		НайденныйПоставщик = "";
		
		Для каждого СтрокаПоставщики Из Поставщики Цикл
			
			ЦенаПредложения = СтрокаСписка["Цена_" + СтрокаПоставщики.Идентификатор];
			Если ЦенаПредложения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Режим = "Цена" Тогда
				Если ЗначениеЗаполнено(ЦенаПредложения) И (ЦенаПредложения < МинимальноеЗначение) Тогда
					МинимальноеЗначение = ЦенаПредложения;
					НайденныйПоставщик = СтрокаПоставщики.Идентификатор;
					МинимальнаяЦена = МинимальноеЗначение;
				КонецЕсли;
			ИначеЕсли Режим = "СрокПоставки" Тогда
				ЗначениеПоставщика = СтрокаСписка["СрокПоставки_" + СтрокаПоставщики.Идентификатор];
				Если ЗначениеПоставщика < МинимальноеЗначение Тогда
					МинимальноеЗначение = ЗначениеПоставщика;
					НайденныйПоставщик = СтрокаПоставщики.Идентификатор;
					МинимальнаяЦена = СтрокаСписка["Цена_" + СтрокаПоставщики.Идентификатор]
				КонецЕсли;
			ИначеЕсли Режим = "СнятьПометки" Тогда
				НайденныйПоставщик = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаПредложения) Тогда
				СтрокаПоставщики.Охват = СтрокаПоставщики.Охват + 1;
			КонецЕсли;
			
			СтрокаСписка["Пометка_" + СтрокаПоставщики.Идентификатор] = Ложь;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НайденныйПоставщик) Тогда
			СтрокаСписка["Пометка_" + НайденныйПоставщик] = Истина;
			СтрокаСписка.Пометка = Истина;
			СтрокаСписка.ПоставщикИдентификатор = НайденныйПоставщик;
			СтрокаСписка.Сумма = СтрокаСписка.Количество * МинимальнаяЦена;
			СтрокаСписка.ПредложениеИдентификатор = СтрокаСписка["ПредложениеИдентификатор_" + НайденныйПоставщик];
			СтрокаПоставщики = Поставщики.НайтиСтроки(Новый Структура("Идентификатор", НайденныйПоставщик));
			СтрокаПоставщики[0].КЗаказу = СтрокаПоставщики[0].КЗаказу + 1;
		Иначе
			СтрокаСписка.Пометка = Ложь;
			СтрокаСписка.ПредложениеИдентификатор = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.СуммаВсего = Список.Итог("Сумма");
	
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиПоставщиков(РежимСнятияПометок = Ложь, ИдентификаторыПоставщиков = Неопределено)
	
	Если ИдентификаторыПоставщиков = Неопределено Тогда
		ИдентификаторыПоставщиков = Новый Массив;
	КонецЕсли;
	
	Для каждого СтрокаПоставщики Из Поставщики Цикл
		
		СтрокаПоставщики.Охват = 0;
		СтрокаПоставщики.КЗаказу = 0;
		
		Если РежимСнятияПометок Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаСписка Из Список Цикл
			
			Если ЗначениеЗаполнено(СтрокаСписка["Цена_" + СтрокаПоставщики.Идентификатор]) Тогда
				СтрокаПоставщики.Охват = СтрокаПоставщики.Охват + 1;
			КонецЕсли;
			
			Если СтрокаСписка["Пометка_" + СтрокаПоставщики.Идентификатор] = Истина Тогда
				СтрокаПоставщики.КЗаказу = СтрокаПоставщики.КЗаказу + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаПоставщики.Охват = 0 Тогда
			Если ИдентификаторыПоставщиков.Найти(СтрокаПоставщики.Идентификатор) = Неопределено Тогда
				ИдентификаторыПоставщиков.Добавить(СтрокаПоставщики.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьКолонкиПоставщиков(ИдентификаторыПоставщиков);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКолонкиПоставщиков(ИдентификаторыПоставщиков)
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоставщиков Цикл
		
		// Удаление колонок с поставщиком.
		УдаляемыеРеквизиты.Добавить("Список.Пометка_"			+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЕдиницаИзмерения_"	+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.Цена_"				+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЛучшаяЦена_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.Валюта_"			+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.СрокПоставки_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.Наличие_"			+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЛучшийСрок_"		+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ПредложениеИдентификатор_" + Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.СтавкаНДС_"			+ Идентификатор);
		УдаляемыеРеквизиты.Добавить("Список.ЦенаВключаетНДС_"	+ Идентификатор);
		
		// Удаление неиспользуемых элементов формы.
		Элементы.Удалить(Элементы["ГруппаПоставщика_"			+ Идентификатор]);

		Поставщики.Удалить(Поставщики.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0]);
		
	КонецЦикла;
	
	// Удаление неиспользуемых реквизитов формы.
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено)
	
	ТорговыеПредложенияПереопределяемый.ОбработатьВыбор(ЭтотОбъект, ВыбранноеЗначение, ДополнительныеПараметры);
	ОбновитьНадписьПодобраноТоваров(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоТоваруНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОграничениеТорговыхПредложений", ОграничениеТорговыхПредложений);
	ПараметрыОткрытия.Вставить("ПревышениеМинимальнойЦены", ПревышениеМинимальнойЦены);
	ПараметрыОткрытия.Вставить("МаксимальныйСрокПоставки", МаксимальныйСрокПоставки);
	
	ЗаполненыЗначенияПоиска = Ложь;
	Если ПоискПоНаименованию И ЗначениеЗаполнено(ТекущиеДанные.Наименование) Тогда
		ПараметрыОткрытия.Вставить("ОтборНаименование", ТекущиеДанные.Наименование);
		ЗаполненыЗначенияПоиска = Истина;
	КонецЕсли;
	Если ПоискПоАртикулу И ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
		ПараметрыОткрытия.Вставить("ОтборАртикул", ТекущиеДанные.Артикул);
		ЗаполненыЗначенияПоиска = Истина;
	КонецЕсли;
	Если ПоискПоШтрихКоду И ТипЗнч(ТекущиеДанные.Штрихкоды) = Тип("Массив") И ТекущиеДанные.Штрихкоды.Количество() Тогда
		ПараметрыОткрытия.Вставить("ОтборШтрихКоды", ТекущиеДанные.Штрихкоды);
		ЗаполненыЗначенияПоиска = Истина;
	КонецЕсли;
	ПараметрыОткрытия.Вставить("Валюта", Валюта);
	
	Если ЗаполненыЗначенияПоиска = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоСтроке", ПараметрыОткрытия);
	
	// Дополнительно выполняется оповещение, необходимо если форма уже открыта ранее.
	Оповестить("ТорговыеПредложения_Обновить", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКонтексту(ПараметрыКоманды)
	
	ТаблицаТовары = РеквизитФормыВЗначение("Список", Тип("ТаблицаЗначений"));
	
	КонтекстИсточника = Неопределено;
	ТорговыеПредложенияПереопределяемый.СвойстваКонтекстаДокументовДляПоискаПредложений(ПараметрыКоманды, КонтекстИсточника, ТаблицаТовары);
	Если КонтекстИсточника <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтекстИсточника);
		ЗначениеВРеквизитФормы(ТаблицаТовары, "Список");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыНоменклатуры(Знач Номенклатура)
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИспользованиеХарактеристик");
	Реквизиты.Вставить("ЕдиницаИзмерения");
	Реквизиты.Вставить("НоменклатураПоставщика");
	Реквизиты.Вставить("Упаковка");
	ТорговыеПредложенияПереопределяемый.ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Номенклатура, Реквизиты);
	
	// Очистка данных.
	Реквизиты.Вставить("МаксимальнаяЦена", 0);
	Реквизиты.Вставить("МинимальнаяЦена", 0);
	Реквизиты.Вставить("МаксимальныйСрокПоставки", 0);
	Реквизиты.Вставить("МинимальныйСрокПоставки", 0);
	Реквизиты.Вставить("Сумма", 0);
	Реквизиты.Вставить("ПредложениеИдентификатор", "");
	Реквизиты.Вставить("ПоставщикИдентификатор", "");
	Реквизиты.Вставить("Пометка", Ложь);
	Реквизиты.Вставить("КоличествоПредложений", 0);
	Реквизиты.Вставить("Количество", 1);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Переопределяемое условное оформление (например, для единиц измерения).
	ТорговыеПредложенияПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, "СписокНоменклатураЕдиницаИзмерения", "Список.Упаковка");
	
	// Выделение текста для выбранных поставщиков.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Поставщики.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поставщики.КЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЖирныйШрифт = Новый Шрифт(,, Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);

КонецПроцедуры

&НаКлиенте
Процедура ВыборРегионаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РегионРежимОтбора") Тогда
		
		Результат.Свойство("РегионРежимОтбора", РегионРежимОтбора);
		Результат.Свойство("РегионПредставление", РегионПредставление);
		Результат.Свойство("РегионЗначенияПолей", РегионЗначенияПолей);
		
		ОбновитьЗаголовокРегиона(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокРегиона(Объект)
	
	РегионЗаголовок = "";
	Если Объект.РегионРежимОтбора = 0 Тогда
		РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
	ИначеЕсли Объект.РегионРежимОтбора = 1 Тогда
		Отказ = Ложь;
		Детализация = КоличествоРегионовЗакупкиПрофиляАбонента(Отказ);
		Если Отказ Тогда
			РегионЗаголовок = НСтр("ru = '<Ошибка данных профиля>'");
		ИначеЕсли ПустаяСтрока(Детализация) Тогда
			РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
		Иначе
			РегионЗаголовок = СтрШаблон(НСтр("ru = 'Регионы профиля (%1)'"), Детализация);	
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.РегионЗначенияПолей) Тогда
		Отказ = Ложь;
		Регион = ПоследнийУровеньКонтактнойИнформации(Объект.РегионЗначенияПолей, Отказ);
		Если Отказ Тогда
			Регион = НСтр("ru = 'Без отбора по регионам'");
		Иначе
			РегионЗаголовок = СтрШаблон(НСтр("ru = 'Регион %1'"), Регион);
		КонецЕсли;
	Иначе
		РегионЗаголовок = НСтр("ru = 'Без отбора по регионам'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(РегионЗаголовок) Тогда
		Объект.Элементы.ФормаВыборРегиона.Заголовок = РегионЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийУровеньКонтактнойИнформации(РегионЗначенияПолей, Отказ)
	
	Возврат ТорговыеПредложения.ПоследнийУровеньКонтактнойИнформации(РегионЗначенияПолей, Отказ);
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоРегионовЗакупкиПрофиляАбонента(Отказ)
	
	ТаблицыАдресовРегионов = ТорговыеПредложения.ПолучитьТаблицыАдресовАбонента(Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Если ТаблицыАдресовРегионов <> Неопределено И ТипЗнч(ТаблицыАдресовРегионов) = Тип("Структура")
		И ТаблицыАдресовРегионов.Свойство("РегионыЗакупки")
		И ТипЗнч(ТаблицыАдресовРегионов.РегионыЗакупки) = Тип("ТаблицаЗначений")
		И ТаблицыАдресовРегионов.РегионыЗакупки.Количество() Тогда
		Результат = ТаблицыАдресовРегионов.РегионыЗакупки.Количество();
		Если Результат = 1 Тогда
			Результат = ТорговыеПредложения.ПоследнийУровеньКонтактнойИнформации(ТаблицыАдресовРегионов.РегионыЗакупки[0].ЗначенияПолей, Отказ)
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВалютуПоискаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ИзменитьВалютуПоискаЗавершение", ЭтотОбъект), Валюта,
			НСтр("ru = 'Валюта поиска'"), Тип("СправочникСсылка.Валюты"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВалютуПоискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Валюта = Результат;
		Элементы.ИзменитьВалютуПоиска.Заголовок = СтрШаблон(НСтр("ru = 'Валюта: %1'"), Валюта);
		НайтиПредложения(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
