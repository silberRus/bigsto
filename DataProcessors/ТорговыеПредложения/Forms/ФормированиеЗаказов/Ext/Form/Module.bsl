
#Область ОписаниеПеременных

&НаКлиенте
Перем ХронологияПереключенияСтраниц;

&НаКлиенте
Перем ВыполняетсяЗакрытие; // Признак выполнения обработки закрытия формы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Проверка прав доступа.
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполнить доступные способы доставки Самовывоз.
	СпособыДоставкиСамовывоз = ТорговыеПредложенияПереопределяемый.СпособыДоставки("Самовывоз");
	Элементы.ЗаказыКОформлениюСпособДоставки.СписокВыбора.ЗагрузитьЗначения(
		ТорговыеПредложенияПереопределяемый.СпособыДоставки().ВыгрузитьЗначения());
	
	ЗаполнитьПараметрыФормы();
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	// Установка типов для элементов форм.
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ХарактеристикиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыХарактеристикаНоменклатуры.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("УпаковкиНоменклатуры");
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыУпаковка.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ФизическиеЛица");
	Если ИмяСправочника = Неопределено Тогда
		ОграничениеТипа = Новый ОписаниеТипов("Строка");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочника);	
	КонецЕсли;
	Элементы.КонтактноеЛицо.ОграничениеТипа = ОграничениеТипа;
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("ЕдиницыИзмерения");
	ОграничениеТипа = Новый ОписаниеТипов("Строка, СправочникСсылка." + ИмяСправочника);
	Элементы.ТоварыНоменклатураЕдиницаИзмерения.ОграничениеТипа = ОграничениеТипа;
	
	Элементы.ТоварыХарактеристикаНоменклатуры.Видимость = ОбменСКонтрагентамиПовтИсп.ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры();
	
	АдресаАбонента = ТорговыеПредложения.ОписаниеАдресовАбонента();
	ТорговыеПредложенияПереопределяемый.ЗаполнитьАдресаАбонента(АдресаАбонента);
	АдресаАбонента.Свернуть("ЗначенияПолей, Представление");
	Для Каждого СтрокаАдреса Из АдресаАбонента Цикл
		СобственныеАдресаДоставки.Добавить(СтрокаАдреса.ЗначенияПолей, СтрокаАдреса.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХронологияПереключенияСтраниц = Новый Массив;
	СменитьСтраницуШаги(Элементы.СтраницаПодготовкаЗаказов)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ТорговыеПредложения_ИзменитьКоличествоВКорзине"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины
		И Источник <> ЭтотОбъект Тогда
		
		Количество = 1; ЭтоРазница = Истина;
		Если Параметр.Свойство("Количество") Тогда
			Количество = Параметр.Количество;
			ЭтоРазница = Ложь;
		КонецЕсли;
		
		ИзменитьКоличествоВКорзинеПоИдентификатору(Параметр.ПредложениеИдентификатор, Количество, ЭтоРазница);
		
	ИначеЕсли ИмяСобытия = "ТорговыеПредложения_УдалитьИзКорзины"
		И Параметр.УникальныйИдентификаторКорзины = УникальныйИдентификаторКорзины
		И Источник <> ЭтотОбъект Тогда
		
		Для Каждого ПредложениеИдентификатор Из Параметр.ИдентификаторыПредложений Цикл
			ИзменитьКоличествоВКорзинеПоИдентификатору(ПредложениеИдентификатор, 0);
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПоставщику"
		И Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		Если Заказы.НайтиСтроки(Новый Структура("Ссылка", Источник)).Количество() Тогда
			ЗаполнитьРеквизитыЗаказов();
			Элементы.Заказы.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Настройки.Получить("Организация");
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			// Автозаполнение организации, если она единственная зарегистрированная в сервисе.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Организации1СБизнесСеть.Организация.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.Организации1СБизнесСеть КАК Организации1СБизнесСеть";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы И Не ВыполняетсяЗакрытие
		И Не Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаФинал Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
						НСтр("ru = 'Формирование заказов будет прервано. Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	УстановитьДоступностьФлагаУведомлятьПоПочте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	СтрокаТовары.Пометка = СтрокаТовары.Количество;
	
	ПриИзмененииКоличестваТоваров(СтрокаТовары);
	
	ПересчитатьИтоги(ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Поле.Имя = "ТоварыКоличество" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыНоменклатура" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыХарактеристикаНоменклатуры" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "ТоварыПоставщикНаименование" Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИНН", ТекущиеДанные.ПоставщикИНН);
		ПараметрыОткрытия.Вставить("КПП", ТекущиеДанные.ПоставщикКПП);
		БизнесСетьКлиент.ОткрытьПрофильУчастника(ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	ПараметрыФормы.Вставить("ПредложениеИдентификатор", ТекущиеДанные.ПредложениеИдентификатор);
	ПараметрыФормы.Вставить("Валюта", Валюта);
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ТорговоеПредложение", ПараметрыФормы, ЭтотОбъект,
		ТекущиеДанные.ПредложениеИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПометкаПриИзменении(Элемент)
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	СтрокаТовары.Количество = СтрокаТовары.Пометка;

	ПриИзмененииКоличестваТоваров(СтрокаТовары);
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() Тогда
		
		ИдентификаторыПредложений = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			ИдентификаторыПредложений.Добавить(Товары.НайтиПоИдентификатору(ИдентификаторСтроки).ПредложениеИдентификатор);
		КонецЦикла;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
		ПараметрыОповещения.Вставить("ИдентификаторыПредложений", ИдентификаторыПредложений);
		Оповестить("ТорговыеПредложения_УдалитьИзКорзины", ПараметрыОповещения);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ИспользованиеХарактеристик");
		Реквизиты.Вставить("НоменклатураПоставщика");
		Реквизиты.Вставить("ЕдиницаИзмерения");
		Реквизиты.Вставить("Упаковка");
		ЗаполнитьРеквизитыНоменклатуры(ТекущиеДанные.Номенклатура, Реквизиты);
	
		ТекущиеДанные.ИспользованиеХарактеристик = Реквизиты.ИспользованиеХарактеристик;
		ТекущиеДанные.НоменклатураПоставщика = Реквизиты.НоменклатураПоставщика;
		ТекущиеДанные.ЕдиницаИзмеренияНоменклатуры = Реквизиты.ЕдиницаИзмерения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.НоменклатураПоставщика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыКОформлению

&НаКлиенте
Процедура ЗаказыКОформлениюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюСпособДоставкиПриИзменении(Элемент)
	
	Элемент.Родитель.ТекущиеДанные.АдресДоставки = "";
	Элемент.Родитель.ТекущиеДанные.АдресДоставкиЗначенияПолей = "";
	ИнициализацияСпискаВыбораАдреса(Элемент.Родитель, Элементы.ЗаказыКОформлениюАдресДоставки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюАдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаказыКОформлению.ТекущиеДанные;
	
	ТекущиеДанные.АдресДоставкиЗначенияПолей = ВыбранноеЗначение;
	ТекущиеДанные.АдресДоставки = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКОформлениюАдресДоставки" Тогда
		ИнициализацияСпискаВыбораАдреса(Элемент, Элементы.ЗаказыКОформлениюАдресДоставки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОформлениюАдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаказыКОформлению.ТекущиеДанные;
	Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущиеДанные.СпособДоставки) = Неопределено Тогда // Доставка.
		
		СтандартнаяОбработка = Ложь;
		
		// Проверка изменения представления в поле.
		Если ТекущиеДанные.АдресДоставки <> Элемент.ТекстРедактирования Тогда
			ТекущиеДанные.АдресДоставки = Элементы.ЗаказыКОформлению.ТекущийЭлемент.ТекстРедактирования;
			ТекущиеДанные.АдресДоставкиЗначенияПолей = КонтактнаяИнформацияXMLПоПредставлению(ТекущиеДанные.АдресДоставки,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
		КонецЕсли;
		
		АдресДоставкиЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(АдресДоставкиЗначенияПолей);

		ВидКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		СкладЗначенияПолей     = ТекущиеДанные.АдресДоставкиЗначенияПолей;
		СкладПредставление     = ТекущиеДанные.АдресДоставки;
		
		ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ВидКонтактнойИнформации, СкладЗначенияПолей, СкладПредставление,,
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
			
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Введите адрес склада доставки'"));
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, ТекущиеДанные);
			
		УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,,Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтраницаПодготовкаЗаказов

&НаКлиенте
Процедура Добавить(Команда)
	
	ИмяФормыПоискаПредложенияПоСтроке = "Обработка.ТорговыеПредложения.Форма.ПоискПредложенийПоСтроке";
	
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма")
		И ЭтотОбъект.ВладелецФормы.ИмяФормы = ИмяФормыПоискаПредложенияПоСтроке
		И ЭтотОбъект.ВладелецФормы.Открыта() Тогда
		
		ЭтотОбъект.ВладелецФормы.Активизировать();
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
		ПараметрыОткрытия.Вставить("АдресТоваровВХранилище", АдресХранилищаТоваров());
		ОткрытьФорму(ИмяФормыПоискаПредложенияПоСтроке, ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьСнятьПометкиТаблицыТовары(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	УстановитьСнятьПометкиТаблицыТовары(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтправкиЗаказов

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте);
		УстановитьДоступностьФлагаУведомлятьПоПочте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаДлительнаяОперация

&НаКлиенте
Процедура ПовторитьТекущуюДлительнуюОперацию(Команда)
	
	Если Не ПустаяСтрока(ТекущийШаг) И Не ПустаяСтрока(СледующийШаг) Тогда
		ВыполнитьДлительнуюОперацию(Элементы[ТекущийШаг], Элементы[СледующийШаг]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаФинал

&НаКлиенте
Процедура ОткрытьИсходящиеДокументы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимИсходящихДокументов", Истина);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ДокументыОбмена", ПараметрыОткрытия);

КонецПроцедуры

#КонецОбласти

#Область КомандыНавигации

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	СледующаяСтраница       = Неопределено;
	СтраницаКомандНавигации = Неопределено;
	ДлительнаяОперация      = Ложь;
	
	Отказ = Ложь;
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда
		
		ПроверкаЗаполненияСтраницаПодготовкаЗаказов(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПодготовкаЗаказов);
		СледующаяСтраница  = Элементы.СтраницаОтправкиЗаказов;
		ДлительнаяОперация = Истина;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		// Проверка обязательного поля адреса электронной почты.
		Если Не ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите адрес электронной почты'"),,
				"ЭлектроннаяПочта",, Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка формата электронной почты.
		Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта, Истина) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Адрес электронной почты введен неверно'"),,
				"ЭлектроннаяПочта",, Отказ);
			Возврат;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаОтправкиЗаказов);
		СледующаяСтраница = Элементы.СтраницаФинал;
		ДлительнаяОперация = Истина;
		
	КонецЕсли;
	
	Если СледующаяСтраница <> Неопределено Тогда
		Если ДлительнаяОперация Тогда
			ВыполнитьДлительнуюОперацию(Элементы.Шаги.ТекущаяСтраница, СледующаяСтраница);
		Иначе
			СменитьСтраницуШаги(СледующаяСтраница);
			СменитьСтраницуКомандНавигации(СтраницаКомандНавигации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОтменитьАктивныеФоновыеОперации();
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		ПриВозвращенииСтраницаОтправкиЗаказов();
		
	Иначе
		
		ВернутьсяНаПредыдущуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОтменитьАктивныеФоновыеОперации();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтраницаПодготовкаЗаказов

&НаКлиенте
Процедура ПриОткрытииСтраницаПодготовкаЗаказов()
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗаполненияСтраницаПодготовкаЗаказов(Отказ)
	
	Если Товары.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрано ни одного товара к заказу.'"),,
			"Товары",,
			Отказ);
	КонецЕсли;
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		ТекущаяСтрока = Товары[ТекИндекс];
		Если ТекущаяСтрока.Пометка И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекстШаблонаОшибки = НСтр("ru='Не заполнено поле %1 в строке %2.'");
			ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.ТоварыНоменклатура.Заголовок, ТекИндекс + 1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекИндекс + 1, "Номенклатура"),,
				Отказ)
		КонецЕсли;
			
		Если ТекущаяСтрока.Пометка
			И Не ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНоменклатуры)
			И ТекущаяСтрока.ИспользованиеХарактеристик = Истина Тогда
			ТекстШаблонаОшибки = НСтр("ru='Не заполнено поле %1 в строке %2.'");
			ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.ТоварыХарактеристикаНоменклатуры.Заголовок, ТекИндекс + 1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекИндекс + 1, "ХарактеристикаНоменклатуры"),,
				Отказ)
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Организация не заполнена.'"),,
			"Организация",,Отказ);
	КонецЕсли;
	
	// Проверка адреса доставки
	Для ТекИндекс = 0 По ЗаказыКОформлению.Количество()-1 Цикл
		ТекущаяСтрока = ЗаказыКОформлению[ТекИндекс];
		Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущаяСтрока.СпособДоставки) = Неопределено
			И ПустаяСтрока(ТекущаяСтрока.АдресДоставки) Тогда // Доставка.
			ТекстШаблонаОшибки = НСтр("ru='Не указан адрес доставки %1 в строке %2.'");
			ТекстОшибки = СтрШаблон(ТекстШаблонаОшибки,	Элементы.ЗаказыКОформлению.Заголовок, ТекИндекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаказыКОформлению", ТекИндекс + 1, "АдресДоставки"),,
				Отказ)
		КонецЕсли;
	КонецЦикла;
		
	Если Элементы.ГруппаЗарегистрироватьОрганизацию.Видимость
		И Не ЗарегистрироватьОрганизацию Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не получено согласие регистрации организации к сервису 1С:Бизнес-сеть'"),,
			"ЗарегистрироватьОрганизацию",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкиТаблицыТовары(ЗначениеПометки)
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Пометка = ЗначениеПометки;
	КонецЦикла;
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваТоваров(СтрокаТовары)
	
	СтрокаТаблицы = ОписаниеСтрокиТаблицыТовары();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
	ПересчитатьСуммуПоСтроке(СтрокаТаблицы);
	ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
	
	ОповеститьОбИзмененииКоличества(СтрокаТовары.ПредложениеИдентификатор, СтрокаТовары.ПоставщикИдентификатор,
		СтрокаТовары.Количество);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Знач Организация)
	
	Показать = Не Организация.Пустая() И Не ОрганизацияЗарегистрирована(Организация);
	Элементы.НадписьЗарегистрироватьОрганизацию.Видимость = Показать;
	Элементы.ГруппаЗарегистрироватьОрганизацию.Видимость = Показать;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияЗарегистрирована(Знач Организация)
	
	Возврат БизнесСеть.ОрганизацияЗарегистрирована(Организация)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтоги(Форма)
	
	СпособДоставкиОсновной = Неопределено;
	Если Форма.СпособыДоставкиСамовывоз.Количество() Тогда
		СпособДоставкиОсновной = Форма.СпособыДоставкиСамовывоз[0].Значение;
	КонецЕсли;
	
	ТаблицаИтогов = ТаблицаИтогов(Форма.Товары);
	МассивПоставщиков = Новый Массив;
	Для Каждого СтрокаИтогов Из ТаблицаИтогов Цикл
		СтрокиПоиска = Форма.ЗаказыКОформлению.НайтиСтроки(Новый Структура("ПоставщикИдентификатор", СтрокаИтогов.ПоставщикИдентификатор));
		Если СтрокиПоиска.Количество() Тогда
			СтрокаЗаказа = СтрокиПоиска[0];
		Иначе
			СтрокаЗаказа = Форма.ЗаказыКОформлению.Добавить();
			СтрокаЗаказа.СпособДоставки = СпособДоставкиОсновной;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, СтрокаИтогов);
		МассивПоставщиков.Добавить(СтрокаИтогов.ПоставщикИдентификатор);
	КонецЦикла;
	
	// Обратный поиск для удаления неиспользуемых строк.
	ПоследняяСтрока = Форма.ЗаказыКОформлению.Количество() - 1;
	Для СчетчикСтрок = 0 По ПоследняяСтрока Цикл
		НомерСтроки = ПоследняяСтрока - СчетчикСтрок;
		СтрокаЗаказа = Форма.ЗаказыКОформлению.Получить(НомерСтроки);
		Если МассивПоставщиков.Найти(СтрокаЗаказа.ПоставщикИдентификатор) = Неопределено Тогда
			Форма.ЗаказыКОформлению.Удалить(НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	Форма.ЗаказыКОформлениюИтогКоличество = Форма.ЗаказыКОформлению.Итог("Количество");
	Форма.ЗаказыКОформлениюИтогСуммаСНДС = Форма.ЗаказыКОформлению.Итог("СуммаСНДС");
	Форма.Элементы.ЗаказыКОформлению.ВысотаВСтрокахТаблицы = Мин(Форма.ЗаказыКОформлению.Количество(), 5);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаИтогов(Знач Товары)
	
	ТаблицаИтогов = Товары.Выгрузить(Новый Структура("Пометка", Истина));
	ТаблицаИтогов.Колонки.Добавить("СтрокВЗаказе");
	ТаблицаИтогов.ЗаполнитьЗначения(1, "СтрокВЗаказе");
	ТаблицаИтогов.Свернуть("ПоставщикИдентификатор, ПоставщикНаименование", "СуммаСНДС, Количество, СтрокВЗаказе");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаИтогов);
	
КонецФункции

&НаСервере
Процедура ИзменитьКоличествоВКорзинеПоИдентификатору(ПредложениеИдентификатор, Количество, ЭтоРазница = Ложь)
	
	СтрокаТовары = Неопределено;
	СтрокиТоваровПоИдентификатору = Товары.НайтиСтроки(Новый Структура("ПредложениеИдентификатор", ПредложениеИдентификатор));
	Если СтрокиТоваровПоИдентификатору.Количество() Тогда
		
		Если Количество <> 0 Тогда
			СтрокаТовары = СтрокиТоваровПоИдентификатору[0];
			СтрокаТовары.Количество = ?(ЭтоРазница, СтрокаТовары.Количество + Количество, Количество);
		Иначе
			Товары.Удалить(Товары.Индекс(СтрокиТоваровПоИдентификатору[0]));
		КонецЕсли;
		
	Иначе
		
		Отказ = Ложь;
		Результат = ТорговыеПредложения.ПрочитатьТорговоеПредложение(ПредложениеИдентификатор, Валюта,, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Предложение = Результат.Данные;
		СтрокаТовары = Товары.Добавить();
		СтрокаТовары.ЕдиницаИзмерения         = Предложение.unit;
		СтрокаТовары.ЕдиницаИзмеренияКод      = Предложение.basicUnit;
		СтрокаТовары.ПредложениеИдентификатор = ПредложениеИдентификатор;
		СтрокаТовары.Количество      = Количество;
		СтрокаТовары.Наименование    = Предложение.name;
		СтрокаТовары.Характеристика  = Предложение.feature;
		СтрокаТовары.Пометка         = СтрокаТовары.Количество;
		СтрокаТовары.ПоставщикНаименование = Предложение.vendor.title;
		СтрокаТовары.ПоставщикИНН    = Предложение.vendor.inn;
		СтрокаТовары.ПоставщикКПП    = ?(Предложение.vendor.kpp = "0", "", Предложение.vendor.kpp);
		СтрокаТовары.ПоставщикИдентификатор = Предложение.vendor.inn
			+ ?(ЗначениеЗаполнено(СтрокаТовары.ПоставщикКПП), "_" + СтрокаТовары.ПоставщикКПП, "");
		ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(Предложение.nds, СтрокаТовары.СтавкаНДС);
		СтрокаТовары.Сумма           = Предложение.price / 100;
		СтрокаТовары.Цена            = Предложение.price / 100;
		СтрокаТовары.ЦенаВключаетНДС = Предложение.campaign.saleWithNds;
		
		ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(СтрокаТовары);
		
	КонецЕсли;
	
	Если СтрокаТовары <> Неопределено Тогда
		ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
	КонецЕсли;
	
	ПересчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(СтрокаТовары = Неопределено)
	
	Если СтрокаТовары = Неопределено Тогда
		СтрокиТоваров = Товары;
		Элементы.ТоварыГруппаНоменклатура.Видимость = Ложь;
	Иначе
		СтрокиТоваров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТовары);
	КонецЕсли;
	
	НоменклатураПоставщиков = Новый Массив;
	НайденнаяНоменклатураПоставщиков = Новый ТаблицаЗначений;
	НайденнаяНоменклатураПоставщиков.Колонки.Добавить("НоменклатураПоставщика");
	НайденнаяНоменклатураПоставщиков.Колонки.Добавить("СтрокаТоваров");
	Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
		Если Не ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			ДополнительныеРеквизиты = Новый Структура();
			
			ПредложениеИдентификатор = Сред(СтрокаТоваров.ПредложениеИдентификатор,
				СтрНайти(СтрокаТоваров.ПредложениеИдентификатор, "#") + 1);
				
			ДополнительныеРеквизиты.Вставить("Идентификатор", ПредложениеИдентификатор);
			НоменклатураПоставщика = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
				"НоменклатураПоставщиков",, ДополнительныеРеквизиты);
			Если НоменклатураПоставщика <> Неопределено Тогда
				НоваяСтрока = НайденнаяНоменклатураПоставщиков.Добавить();
				НоваяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
				НоваяСтрока.СтрокаТоваров = СтрокаТоваров;
				НоменклатураПоставщиков.Добавить(НоменклатураПоставщика);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НоменклатураПоставщиков.Количество() Тогда
		НайденнаяНоменклатураПоставщиков.Индексы.Добавить("НоменклатураПоставщика");
		
		ТаблицаНоменклатурыПоставщиков = ТорговыеПредложенияПереопределяемый.РеквизитыНоменклатурыПоставщика(НоменклатураПоставщиков);
		
		Для Каждого СтрокаТаблицы Из ТаблицаНоменклатурыПоставщиков Цикл
			Отбор = Новый Структура("НоменклатураПоставщика", СтрокаТаблицы.НоменклатураПоставщика);
			ТоварыСНоменклатуройПоставщика = НайденнаяНоменклатураПоставщиков.НайтиСтроки(Отбор);
			Для Каждого СтрокаТоваровСНоменклатуройПоставщика Из ТоварыСНоменклатуройПоставщика Цикл
				СтрокаТоваров = СтрокаТоваровСНоменклатуройПоставщика.СтрокаТоваров;
				ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаТаблицы);
				СтрокаТоваров.ИспользованиеХарактеристик = ЗначениеЗаполнено(СтрокаТоваров.ХарактеристикаНоменклатуры);
				Если СтрокаТоваров.ИспользованиеХарактеристик И СтрокаТоваров.ХарактеристикаНоменклатуры.Пустая() Тогда
					Элементы.ТоварыГруппаНоменклатура.Видимость = Истина;
					ИмяСправочникаНоменклатураПоставщиков = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("НоменклатураПоставщиков");
					СтрокаТоваров.НоменклатураПоставщика = Справочники[ИмяСправочникаНоменклатураПоставщиков].ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокиТоваров) = Тип("Массив") Тогда
		Элементы.ТоварыГруппаНоменклатура.Видимость = Макс(
			Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура), Элементы.ТоварыГруппаНоменклатура.Видимость);
	Иначе
		ИмяСправочникаНоменклатура = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Номенклатура");
		Элементы.ТоварыГруппаНоменклатура.Видимость = Макс(
			СтрокиТоваров.НайтиСтроки(Новый Структура("Номенклатура", Неопределено)).Количество(),
			СтрокиТоваров.НайтиСтроки(Новый Структура("Номенклатура",
				Справочники[ИмяСправочникаНоменклатура].ПустаяСсылка())).Количество(),
			Элементы.ТоварыГруппаНоменклатура.Видимость);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьРеквизитыНоменклатуры(Знач Номенклатура, Реквизиты)
	
	ТорговыеПредложенияПереопределяемый.ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Номенклатура, Реквизиты);
	
КонецФункции

&НаСервере
Функция АдресХранилищаТоваров()
	
	ТоварыОбъект = РеквизитФормыВЗначение("Товары");
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(ТоварыОбъект, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСуммуПоСтроке(СтрокаТовары)

	ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСтрокиТаблицыТовары()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("СтавкаНДС",		Неопределено);
	СтруктураСтроки.Вставить("Цена",			0);
	СтруктураСтроки.Вставить("ЦенаВключаетНДС",	Ложь);
	СтруктураСтроки.Вставить("Количество",		0);
	СтруктураСтроки.Вставить("Сумма",			0);
	СтруктураСтроки.Вставить("СуммаНДС",		0);
	СтруктураСтроки.Вставить("СуммаСНДС",		0);
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииКоличества(ПредложениеИдентификатор, ПоставщикИдентификатор, Количество)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	ПараметрыОповещения.Вставить("ПредложениеИдентификатор", ПредложениеИдентификатор);
	ПараметрыОповещения.Вставить("ПоставщикИдентификатор", ПоставщикИдентификатор);
	ПараметрыОповещения.Вставить("Количество", Количество);
	Оповестить("ТорговыеПредложения_ИзменитьКоличествоВКорзине", ПараметрыОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция КонтактнаяИнформацияXMLПоПредставлению(Текст, ВидКонтактнойИнформации)
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Текст, ВидКонтактнойИнформации);
КонецФункции

&НаКлиенте
Процедура ИнициализацияСпискаВыбораАдреса(Элемент, ПолеАдреса, ПоказыватьПредупреждение = Истина)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	СписокВыбора = ПолеАдреса.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если СпособыДоставкиСамовывоз.НайтиПоЗначению(ТекущиеДанные.СпособДоставки) <> Неопределено Тогда // Самовывоз.
		ПолеАдреса.КнопкаВыбора = Ложь;
		
		Отказ = Ложь;
		АдресаСамовывоза = ПолучитьАдресаПоставщика(ТекущиеДанные.ПоставщикИдентификатор, Отказ);
		Если Отказ ИЛИ АдресаСамовывоза <> Неопределено Тогда
			Для Каждого ЭлементСписка Из АдресаСамовывоза Цикл
				СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦикла;
		КонецЕсли;
		
		Если ПоказыватьПредупреждение И СписокВыбора.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Список адресов контрагента пустой.'"));
		КонецЕсли;
		
	Иначе
		
		ПолеАдреса.КнопкаВыбора = Истина;
		Для Каждого ЭлементСписка Из СобственныеАдресаДоставки Цикл
			СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресаПоставщика(ПоставщикИдентификатор, Отказ)
	
	Возврат ТорговыеПредложения.ПолучитьАдресаСамовывозаОрганизации(ПоставщикИдентификатор, Отказ);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.АдресДоставки = Результат.Представление;
		ДополнительныеПараметры.АдресДоставкиЗначенияПолей = Результат.КонтактнаяИнформация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОтправкиЗаказов

&НаКлиенте
Процедура ПриОткрытииСтраницаОтправкиЗаказов()
	
	Если ПустаяСтрока(ЭлектроннаяПочта) И ПустаяСтрока(Телефон)
		И ЗначениеЗаполнено(КонтактноеЛицо) И ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
			ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте);
	КонецЕсли;
	
	УстановитьДоступностьФлагаУведомлятьПоПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВозвращенииСтраницаОтправкиЗаказов()
	
	Если Заказы.Количество() > 0 Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить сформированные заказы'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'При переходе назад сформированные заказы будут удалены.'");
		Ответ = Неопределено;
		
		ВопросЗавершение = Новый ОписаниеОповещения("ПриВозвращенииСтраницаОтправкиЗаказовЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ВопросЗавершение, ТекстВопроса, Кнопки);
		
	Иначе
		
		ВернутьсяНаПредыдущуюСтраницу();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВозвращенииСтраницаОтправкиЗаказовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьДлительнуюОперацию(Элементы.СтраницаОтправкиЗаказов,
			Элементы.СтраницаПодготовкаЗаказов);               // Удаление сформированных заказов
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонтактнуюИнформацию(КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтактноеЛицо)) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = БизнесСеть.ОписаниеКонтактнойИнформацииПользователя();
	БизнесСетьПереопределяемый.ПолучитьКонтактнуюИнформациюПользователя(КонтактноеЛицо, СтруктураРеквизитов);
	ЭлектроннаяПочта = СтруктураРеквизитов.ЭлектроннаяПочта;
	Телефон = СтруктураРеквизитов.Телефон;
	УведомлятьПоПочте = ЗначениеЗаполнено(ЭлектроннаяПочта);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФлагаУведомлятьПоПочте()
	
	Элементы.УведомлятьПоПочте.Доступность = Не ПустаяСтрока(ЭлектроннаяПочта);
	Если Не Элементы.УведомлятьПоПочте.Доступность Тогда
		УведомлятьПоПочте = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура СменитьСтраницуШаги(Знач НоваяСтраница)
	
	Элементы.КомандыНавигации.Доступность = Истина;
	
	КомандыСВозвратом = Элементы.НазадДалее;
	КомандыБезВозврата = Элементы.ДалееОтмена;
	
	Если НоваяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда
		
		ПриОткрытииСтраницаПодготовкаЗаказов();
		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 1 из 2. Подготовка заказов'");

	ИначеЕсли НоваяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда
		
		ПриОткрытииСтраницаОтправкиЗаказов();
		Элементы.НадписьШаг.Заголовок = НСтр("ru = 'Шаг 2 из 2. Отправка заказов'");
		
	ИначеЕсли НоваяСтраница = Элементы.СтраницаФинал Тогда
		
		Оповестить("ТорговыеПредложения_СформированыЗаказы",
			Новый Структура("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины));
		
	КонецЕсли;
	
	Если ХронологияПереключенияСтраниц.Количество() Тогда
		СменитьСтраницуКомандНавигации(КомандыСВозвратом)
	Иначе
		СменитьСтраницуКомандНавигации(КомандыБезВозврата)
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = НоваяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуКомандНавигации(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КомандыНавигации.ТекущаяСтраница = НоваяСтраница;
	
	Если НоваяСтраница = Элементы.ДалееОтмена Тогда
		Элементы.ДалееПервая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееПервая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееПервая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалееОтмена Тогда
		Элементы.ДалееВторая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееВторая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееВторая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалее Тогда
		Элементы.ДалееТретья.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееТретья.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееТретья;
	ИначеЕсли НоваяСтраница = Элементы.НазадГотово Тогда
		Элементы.ГотовоПервая.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НоваяСтраница = Элементы.Готово Тогда
		Элементы.ГотовоВторая.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяНаПредыдущуюСтраницу()
	
	ПредыдущийШаг = ХронологияПереключенияСтраниц[ХронологияПереключенияСтраниц.ВГраница()];
	ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
	СменитьСтраницуШаги(ПредыдущийШаг);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаКлиенте
Процедура ВыполнитьДлительнуюОперацию(Знач ТекущаяСтраница, СледующаяСтраница)
	
	ОчиститьСообщения();
	
	СменитьСтраницуШаги(Элементы.СтраницаДлительнаяОперация);
	СменитьСтраницуКомандНавигации(Элементы.Отмена);
	Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаВПроцессе;
	
	ПараметрыПроцедуры = Новый Структура("Таблица, ДополнительныеПараметры");
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	Задание.ПараметрыПроцедуры = ПараметрыПроцедуры;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
	ДополнительныеПараметры.Вставить("СледующаяСтраница", СледующаяСтраница);
	
	Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
		И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
		
		Элементы.НазваниеТекущейДлительнойОперации.Заголовок = НСтр("ru = 'Подготовка заказов'");
			
		Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Торговые предложения. Подготовка заказов.'");
		Задание.ИмяПроцедуры = "Обработки.ТорговыеПредложения.СформироватьЗаказы";
		
		ДополнительныеПараметрыПроцедуры = Новый Структура();
		
		ДополнительныеПараметрыПроцедуры.Вставить("ЗарегистрироватьОрганизацию", ЗарегистрироватьОрганизацию);
		ДополнительныеПараметрыПроцедуры.Вставить("КонтекстИсточника", КонтекстИсточника);
		ДополнительныеПараметрыПроцедуры.Вставить("Организация",       Организация);
		ДополнительныеПараметрыПроцедуры.Вставить("Валюта",            Валюта);
		ДополнительныеПараметрыПроцедуры.Вставить("Доставка",          ЗаказыКОформлению);
		
		Если ЗарегистрироватьОрганизацию Тогда
			ДополнительныеПараметры.Вставить("РегистрацияОрганизации", Истина);
		КонецЕсли;
		
		Задание.ПараметрыПроцедуры.ДополнительныеПараметры = ДополнительныеПараметрыПроцедуры;
		Задание.ПараметрыПроцедуры.Таблица = Товары;

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
		И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
		
		Элементы.НазваниеТекущейДлительнойОперации.Заголовок = НСтр("ru = 'Удаление заказов'");
			
		Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Торговые предложения. Удаление заказов.'");
		Задание.ИмяПроцедуры = "Обработки.ТорговыеПредложения.УдалитьЗаказы";
		
		ДополнительныеПараметрыПроцедуры = Новый Структура();
		ДополнительныеПараметрыПроцедуры.Вставить("Организация", Организация);
		Задание.ПараметрыПроцедуры.ДополнительныеПараметры = ДополнительныеПараметрыПроцедуры;
		Задание.ПараметрыПроцедуры.Таблица = Заказы;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
		И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
		
		Элементы.НазваниеТекущейДлительнойОперации.Заголовок = НСтр("ru = 'Отправка заказов поставщику'");
		
		Задание.Наименование = НСтр("ru = '1С:Бизнес-сеть. Торговые предложения. Отправка заказов поставщику.'");
		Задание.ИмяПроцедуры = "Обработки.ТорговыеПредложения.ОтправитьЗаказы";
		
		ДополнительныеПараметрыЗаказа = ОписаниеСопроводительнойИнформацииЗаказа();
		ДополнительныеПараметрыЗаказа.СопроводительнаяИнформация = СопроводительнаяИнформация;
		ДополнительныеПараметрыЗаказа.УникальныйИдентификатор    = УникальныйИдентификатор;
		ДополнительныеПараметрыЗаказа.УведомлятьПоПочте          = УведомлятьПоПочте;
		ДополнительныеПараметрыЗаказа.КонтактноеЛицо             = Строка(КонтактноеЛицо);
		ДополнительныеПараметрыЗаказа.Организация                = Организация;
		ДополнительныеПараметрыЗаказа.Телефон                    = Телефон;
		ДополнительныеПараметрыЗаказа.ЭлектроннаяПочта           = ЭлектроннаяПочта;
		
		Задание.ПараметрыПроцедуры.ДополнительныеПараметры = ДополнительныеПараметрыЗаказа;
		Задание.ПараметрыПроцедуры.Таблица = Заказы;
		
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = Задание.Наименование;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ДлительнаяОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
	ДлительнаяОперация = ВыполнитьЗаданиеВФоне(Задание, УникальныйИдентификатор);

	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

&НаКлиенте
Функция ОписаниеСопроводительнойИнформацииЗаказа()
	
	Результат = Новый Структура();
	Результат.Вставить("СопроводительнаяИнформация");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("УведомлятьПоПочте");
	Результат.Вставить("КонтактноеЛицо");
	Результат.Вставить("Организация");
	Результат.Вставить("Телефон");
	Результат.Вставить("ЭлектроннаяПочта");
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗаданиеВФоне(Знач Задание, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	
	Если Задание.ПараметрыПроцедуры.Свойство("Таблица")
		И ТипЗнч(Задание.ПараметрыПроцедуры.Таблица) = Тип("ДанныеФормыКоллекция") Тогда
		Задание.ПараметрыПроцедуры.Таблица = Задание.ПараметрыПроцедуры.Таблица.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Задание.ПараметрыПроцедуры.Свойство("ДополнительныеПараметры")
		И Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Свойство("Доставка")
		И ТипЗнч(Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка) = Тип("ДанныеФормыКоллекция") Тогда
			Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка =
				Задание.ПараметрыПроцедуры.ДополнительныеПараметры.Доставка.Выгрузить(,
					"ПоставщикИдентификатор, СпособДоставки, АдресДоставки, АдресДоставкиЗначенияПолей");
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры,
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ДлительнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ТекстСообщения = "";
	
	Если Результат = Неопределено Тогда // Отменено пользователем.
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Фоновое задание отменено пользователем'");
	КонецЕсли;
	
	Если Результат.Свойство("Сообщения") Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяСтраница   = ДополнительныеПараметры.ТекущаяСтраница;
	СледующаяСтраница = ДополнительныеПараметры.СледующаяСтраница;

	Если Не Отказ И Результат.Статус = "Выполнено" Тогда
		
		// Обработка результата выполнения.
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
			
			Если ДополнительныеПараметры.Свойство("РегистрацияОрганизации") Тогда
				ТекстОповещения = НСтр("ru = 'Регистрация организации успешно выполнена.'");
				ПоказатьОповещениеПользователя(НСтр("ru = '1С:Бизнес-сеть'"),, ТекстОповещения,
					БиблиотекаКартинок.БизнесСеть);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Результат.АдресРезультата)
				И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				
				Заказы.Очистить();
				МассивЗаказов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
				
				Если ТипЗнч(МассивЗаказов) = Тип("Массив") Тогда
					Для Каждого Заказ Из МассивЗаказов Цикл
						НоваяСтрокаЗаказа = Заказы.Добавить();
						НоваяСтрокаЗаказа.Ссылка = Заказ.Ссылка;
						НоваяСтрокаЗаказа.ИдентификаторыПредложений.ЗагрузитьЗначения(Заказ.ИдентификаторыПредложений);
					КонецЦикла;
					ЗаполнитьРеквизитыЗаказов(Истина);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'Не было подготовлено ни одного заказа'");
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов/
			
			Если ЗначениеЗаполнено(Результат.АдресРезультата)
				И ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
				
				МассивСтатусовОтправкиЗаказов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
				Если ТипЗнч(МассивСтатусовОтправкиЗаказов) = Тип("Массив") Тогда
					ВсеЗаказыОправлены = Истина;
					Для Каждого СтатусовОтправкиЗаказа Из МассивСтатусовОтправкиЗаказов Цикл
						СтрокиТаблицыЗаказов = Заказы.НайтиСтроки(Новый Структура("Ссылка", СтатусовОтправкиЗаказа.Ссылка));
						Если СтрокиТаблицыЗаказов.Количество() Тогда
							НоваяСтрокаТаблицыЗаказов = СтрокиТаблицыЗаказов[0];
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗаказов, СтатусовОтправкиЗаказа);
							Если НоваяСтрокаТаблицыЗаказов.Пометка Тогда
								ВсеЗаказыОправлены = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если Не ВсеЗаказыОправлены Тогда
						Отказ = Истина;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка отправки документов'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
				НСтр("ru = 'При подготовке заказов произошла ошибка'");
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
				НСтр("ru = 'При удалении заказов произошла ошибка'");
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
			
			Элементы.ОписаниеОшибкиТекущейДлительнойОперации.Заголовок =
				НСтр("ru = 'При отправке заказов поставщику произошла ошибка'");
			
		КонецЕсли;
		
		ТекущийШаг   = ТекущаяСтраница.Имя;
		СледующийШаг = СледующаяСтраница.Имя;
		
		Элементы.СтраницыДлительнойОперации.ТекущаяСтраница = Элементы.СтраницаОшибка;
		СменитьСтраницуКомандНавигации(Элементы.НазадОтмена);
		
		Если Результат.Статус = "Ошибка" Тогда
			ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"), ОбщегоНазначенияКлиент.ДатаСеанса(), ТекстСообщения));
		КонецЕсли;
		
	Иначе
		
		СтраницаКомандНавигации = Неопределено;
		
		Если ТекущаяСтраница = Элементы.СтраницаПодготовкаЗаказов
			И СледующаяСтраница = Элементы.СтраницаОтправкиЗаказов Тогда // Создание заказов.
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаПодготовкаЗаказов Тогда // Удаление заказов.
			
			ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправкиЗаказов
			И СледующаяСтраница = Элементы.СтраницаФинал Тогда // Отправка заказов.
			
			СтраницаКомандНавигации = Элементы.Готово;
		
		КонецЕсли;
		
		СменитьСтраницуШаги(СледующаяСтраница);
		СменитьСтраницуКомандНавигации(СтраницаКомандНавигации);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЗаказов(Инициализация = Ложь)
	
	ТаблицаЗаказов = РеквизитФормыВЗначение("Заказы");
	ТорговыеПредложенияПереопределяемый.ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов);
	Если Инициализация Тогда
		ТаблицаЗаказов.ЗаполнитьЗначения(НСтр("ru = 'Готов к отправке'"), "Статус");
		ТаблицаЗаказов.ЗаполнитьЗначения(Истина, "Пометка");
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТаблицаЗаказов, "Заказы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктивныеФоновыеОперации()
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	Параметры.Свойство("УникальныйИдентификаторКорзины", УникальныйИдентификаторКорзины);
	Если Не ЗначениеЗаполнено(УникальныйИдентификаторКорзины) Тогда
		УникальныйИдентификаторКорзины = УникальныйИдентификатор;
	КонецЕсли;
	
	Если Параметры.Свойство("КонтекстИсточника", КонтекстИсточника) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтекстИсточника);
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	Если Не ИспользоватьНесколькоОрганизаций И Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ПоказатьСкрытьКомандуРегистрацииОрганизации(Элементы, Организация);
	
	Параметры.Свойство("Валюта", Валюта);
	
	ЗаголовокСумма = СтрШаблон("Сумма %1",
		?(Валюта.Пустая(), "", "("+ Валюта +")"));
	Элементы.ЗаказыКОформлениюСуммаСНДС.Заголовок = ЗаголовокСумма;
	
	Если Параметры.Свойство("АдресТоваровВХранилище", АдресТоваровВХранилище) И ЗначениеЗаполнено(Параметры.АдресТоваровВХранилище) Тогда
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресТоваровВХранилище);
		Товары.Загрузить(ТаблицаТоваров);
		
	ИначеЕсли Параметры.Свойство("СписокТоваров") Тогда
		
		Для Каждого СоставПозиции Из Параметры.СписокТоваров Цикл
			СтрокаТовары = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СоставПозиции);
			СоставПозиции.Свойство("ЕдиницаИзмерения", СтрокаТовары.ЕдиницаИзмеренияНоменклатуры);
			СоставПозиции.Свойство("Характеристика", СтрокаТовары.ХарактеристикаНоменклатуры);
			СтрокаТовары.ИспользованиеХарактеристик = ЗначениеЗаполнено(СтрокаТовары.ХарактеристикаНоменклатуры);
			ТорговыеПредложенияПереопределяемый.ПересчитатьСуммуПоСтроке(СтрокаТовары);
			СтрокаТовары.Пометка = СтрокаТовары.Количество;
		КонецЦикла;
		
	КонецЕсли;
	
	ПересчитатьИтоги(ЭтотОбъект);
	
	ЗаполнитьНоменклатуруПоНоменклатуреПоставщика();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Элементы.КомандыНавигации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Видимость Организации зависимости от функциональных опций
	Элементы.Организация.Видимость = ИспользоватьНесколькоОрганизаций;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Условное оформление для характеристик номенклатуры.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристикаНоменклатуры.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ИспользованиеХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Условное оформление для единиц измерения номенклатуры.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПоставщикаЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
