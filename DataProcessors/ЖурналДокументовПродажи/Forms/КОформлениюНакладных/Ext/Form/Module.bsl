
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Получение ФО
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"); 
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьРеализациюПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	// Установка отборов.
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("СостояниеНакладной", СостояниеНакладной);
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборПоСкладуСервер();
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеНакладной", 
		?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), СостояниеНакладной), 
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"Организация", 
		Организация, 
		СтруктураБыстрогоОтбора);
	
	Элементы.Склад.Видимость = ИспользоватьНесколькоСкладов;
	Элементы.СписокРаспоряженияНаОформлениеСостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СписокРаспоряженияНаОформлениеСостояниеНакладной.Видимость =  ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СостояниеНакладной.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеОрганизация",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеСклад",
		"Видимость",
		ИспользоватьНесколькоСкладов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеСделка",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокРаспоряженияНаОформлениеВалюта",
		"Видимость",
		ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	
	ЕстьПравоЧтенияОстатков = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	
	Элементы.СписокРаспоряженияНаОформление.Видимость = ЕстьПравоЧтенияОстатков;
	
	ЗаполнитьСпискиВыбораПоСостояниямОтгрузки();
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоЗаказам.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг)
		ИЛИ ПравоДоступа("Добавление", Метаданные.Документы.АктВыполненныхРабот);
	Элементы.СписокРаспоряженияНаОформлениеОформитьПоОтгрузке.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг);
	Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_РеализацияТоваровУслуг"
	 ИЛИ ИмяСобытия = "Запись_ЗаказКлиента"
	 ИЛИ ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот") Тогда
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЖурналДокументовПродажи.Форма.ПараметрыОформленияДокументовПродажи" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			СохранитьНастройки(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
		СтруктураБыстрогоОтбора.Свойство("СостояниеНакладной", СостояниеНакладной);
		Настройки.Удалить("СостояниеНакладной");
		СтруктураБыстрогоОтбора.Свойство("СостояниеОрдера", СостояниеОрдера);
		Настройки.Удалить("СостояниеОрдера");
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		Настройки.Удалить("Организация");
	Иначе
		Склад              = Настройки.Получить("Склад");
		СостояниеНакладной = Настройки.Получить("СостояниеНакладной");
		СостояниеОрдера    = Настройки.Получить("СостояниеОрдера");
		Организация        = Настройки.Получить("Организация");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), СостояниеНакладной),
		СтруктураБыстрогоОтбора, 
		Настройки,
		ЗначениеЗаполнено(СостояниеНакладной),
		,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"СостояниеОрдера",
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(СостояниеОрдера),
		,
		Истина);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		СтруктураБыстрогоОтбора,
		Настройки,
		ЗначениеЗаполнено(Организация));
		
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладуСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеНакладной));
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияФормы", "");
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.РеализацияТоваровУслуг.КОформлениюНакладных.Команда.ОформитьПоЗаказам");
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	ПоОрдерам = Ложь;
	ОформитьПродажу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.РеализацияТоваровУслуг.КОформлениюНакладных.Команда.ОформитьПоОтгрузке");
		
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ТекущиеДанные,ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	ПоОрдерам = Истина;
	ОформитьПродажу();
	
КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗавершение", ЭтотОбъект);
	ОткрытьФормуНастройкиПараметров(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеВыполнения(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	МассивТиповДокументов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ВыделенныйДокумент = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ВыделеннаяСтрока).Ссылка;
		ТипВыделенногоДокумента = ТипЗнч(ВыделенныйДокумент);
		
		Если МассивТиповДокументов.Найти(ТипВыделенногоДокумента) = Неопределено Тогда
			МассивТиповДокументов.Добавить(ТипВыделенногоДокумента);
			Если МассивТиповДокументов.Количество() > 1 Тогда
				ПоказатьПредупреждение( , НСтр("ru='Команда не может быть выполнена для документов разного вида.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокДокументов.НайтиПоЗначению(ВыделенныйДокумент) = Неопределено Тогда
			СписокДокументов.Добавить(ВыделенныйДокумент);
		КонецЕсли;
			
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
		Новый Структура("ВходящиеДокументы", СписокДокументов), 
		ЭтаФорма,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", Элементы.СписокРаспоряженияНаОформлениеДатаДокумента.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладуСервер()
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Настройки)
	
	СохраненыНастройкиОформления = Истина;
	
	СоздаватьДокументПродажи       = Настройки.СоздаватьДокументПродажи;
	ПечататьРеализациюТоваровУслуг = Настройки.ПечататьРеализациюТоваровУслуг;
	ПечататьАктВыполненныхРабот    = Настройки.ПечататьАктВыполненныхРабот;
	СоздаватьСчетФактуру           = Настройки.СоздаватьСчетФактуру;
	НеОткрыватьФормуСозданногоДокумента = Настройки.НеОткрыватьФормуСозданногоДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметров(Оповещение)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СоздаватьДокументПродажи",       СоздаватьДокументПродажи);
	ПараметрыФормы.Вставить("ПечататьРеализациюТоваровУслуг", ПечататьРеализациюТоваровУслуг);
	ПараметрыФормы.Вставить("ПечататьАктВыполненныхРабот",    ПечататьАктВыполненныхРабот);
	ПараметрыФормы.Вставить("СоздаватьСчетФактуру",           СоздаватьСчетФактуру);
	ПараметрыФормы.Вставить("НеОткрыватьФормуСозданногоДокумента", НеОткрыватьФормуСозданногоДокумента);
	
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.ПараметрыОформленияДокументовПродажи", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСпискиВыбораПоСостояниямОтгрузки()
	
	СписокВыбора = Элементы.СостояниеНакладной.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Все оформлено'"),Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Создать накладную'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2",НСтр("ru='Дооформить накладную'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Соответствуют накладным'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Не оформлены'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3",НСтр("ru='Не соответствуют накладным'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	СписокВыбора.Добавить("4",НСтр("ru='Не используется ордерная схема'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецФункции

#Область Создание_Документов

&НаКлиенте
Процедура ОформитьПродажу()
	
	Если Не СохраненыНастройкиОформления Тогда
		Оповещение = Новый ОписаниеОповещения("ОформитьПродажуЗавершение", ЭтотОбъект);
		ОткрытьФормуНастройкиПараметров(Оповещение);
		Возврат;
	КонецЕсли;
	
	ОформитьПродажуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажуЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;
	
	ОформитьПродажуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажуНаКлиенте()
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	СписокРаспоряжений.Очистить();
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		ДобавленнаяСтрока = СписокРаспоряжений.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НайденнаяСтрока);
	КонецЦикла;
	
	// Выбор варианта действия и возврат результата в виде имени формы, которую необходимо открыть и ее входящих параметров
	ПараметрыСозданныхДокументов = ОформитьНакладнуюНаСервере();
	Если ПараметрыСозданныхДокументов.Свойство("ОформитьРядНакладных") И ПараметрыСозданныхДокументов.ОформитьРядНакладных Тогда
		ДлительнаяОперация = ОформитьРядНакладныхПоТаблицам(ПараметрыСозданныхДокументов);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОформитьПродажуНаКлиентеЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	Иначе
		ОформитьПродажуНаКлиентеЗавершение(Неопределено, ПараметрыСозданныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажуНаКлиентеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПараметрыСозданныхДокументов = ДопПараметры;
	Иначе
		ПараметрыСозданныхДокументов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, 
				ЭтотОбъект,
				ПараметрыСозданныхДокументов),
			ПараметрыСозданныхДокументов.ТекстВопросаПользователю,
			РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") И НЕ НеОткрыватьФормуСозданногоДокумента Тогда
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, 
			ПараметрыСозданныхДокументов.Параметры,
			ЭтаФорма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("РежимПечатиДокументов") Тогда
		СозданныеДокументы = Новый Массив;
		МассивПечатаемыхДокументов = Новый Массив;
		
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			СозданныеДокументы = ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы;
		ИначеЕсли ПараметрыСозданныхДокументов.Параметры.Основание.Свойство("СозданныеДокументы") Тогда
			СозданныеДокументы = ПараметрыСозданныхДокументов.Параметры.Основание.СозданныеДокументы;
		КонецЕсли;
		Для Каждого ТекСтрока Из СозданныеДокументы Цикл
			ТекЭлемент = ТекСтрока.Значение;
			Если Не ТекЭлемент.Проведен Тогда
				
				Если ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
					ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда 
					ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				КонецЕсли; 
				
			ИначеЕсли ТекЭлемент.Печатать Тогда
				
				МассивПечатаемыхДокументов.Добавить(ТекЭлемент.Документ);
				
			КонецЕсли;
			
		КонецЦикла;
		Если СозданныеДокументы.Количество() > 0 Тогда
			
			Если МассивПечатаемыхДокументов.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
					"РегистрСведений.НастройкиПечатиОбъектов",
					"КомплектДокументов",
					МассивПечатаемыхДокументов,
					Новый Структура());
				ТекстСообщения = НСтр("ru = 'Документы созданы и напечатаны (%КоличествоДокументов%)'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Документы созданы (%КоличествоДокументов%)'");
			КонецЕсли;
				
			ПоказатьОповещениеПользователя(
				СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СозданныеДокументы.Количество()),
				,,
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокРаспоряженияНаОформление.Обновить();
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных()
	
	НастройкиФормы= НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru = 'Переоформление документов продажи по выбранным распоряжениям'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	НастройкиФормы.НакладнаяНаОтгрузку = Истина;
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЖурнала(КлючНазначенияИспользования)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация",Организация);
	СтруктураБыстрогоОтбора.Вставить("Склад",Склад);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("СтруктураБыстрогоОтбора",СтруктураБыстрогоОтбора);
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста","ЖурналДокументовПродажи");
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы",КлючНазначенияИспользования);
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы продажи'"));
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюНаСервере()
	
	Перем СписокОшибок;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОформитьРядНакладных", ЛОЖЬ);
	ПараметрыФормы.Вставить("АдресДокументыПоТипамНакладных", Неопределено);
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = РазделитьЗаказыПоПолнымИменамНакладных(СписокОшибок);
	
	Если ДокументыПоТипамНакладных.Количество() > 0 Тогда
		Если ПоОрдерам Тогда
			
			// Если выделен один документ и есть хотя бы одна накладная - открывается форма перезаполнения накладной
			// Если нет накладных и документы можно сгруппировать в одну накладную - открывается форма новой накладной
			// Если нет накладных и документы нельзя сгруппировать - открывается форма списка созданных накладных
			
			ЕстьНакладная = ЕстьНакладная(ДокументыПоТипамНакладных);
			ЕстьОрдер     = ЕстьОрдер(ДокументыПоТипамНакладных);
			ЕстьЗаказ     = ЕстьЗаказ(ДокументыПоТипамНакладных);
			
			ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
			Если ВсегоТаблиц > 1 Тогда
				
				Если ЕстьНакладная Тогда
					// Пакетно с исключением накладных и сообщением об исключенных документах
					// Распоряжения-накладные исключаются, т.к. должны быть обработаны индивидульно - нельзя ввести новую накладную 
					// по распоряжению-накладной
					
					ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок);
					ОсталосьТаблиц = ДокументыПоТипамНакладных.Количество();
					Если ОсталосьТаблиц > 0 Тогда
						ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
						АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных);
						ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
					КонецЕсли;
					
					Если ОсталосьТаблиц = 0 Тогда
						ТекстОшибки = НСтр("ru = 'Операция не выполнена.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					ИначеЕсли ВсегоТаблиц <> ОсталосьТаблиц Тогда
						ТекстОшибки = НСтр("ru = 'Операция выполнена с ошибками.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					КонецЕсли;
					
				Иначе
					// Пакетно если нет накладных
					ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
					АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных);
					ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
				КонецЕсли;
				
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				
				// Проверка наличия накладных
				// Если текущее распоряжение это заказ, и по нему есть накладные, открыть форму перезаполнения
				Если ЕстьНакладная И ЕстьЗаказ Тогда
					// Открытие формы перезаполнения
					ПараметрыФормы = ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
				Иначе
					// При попытке заполнить накладную по отсутствующему ордеру выдадим ошибку
					Если ЕстьНакладная И Не ЕстьОрдер И Не РежимБезВопросов Тогда
						ТекстОшибки = НСтр("ru = 'Недоступно оформление по отгрузке, так как не создано ни одного ордера.'");
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
					Иначе
						// Если это распоряжение-накладная, или заказ без накладной - открытие формы накладной, существующей или новой
						ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// При оформлении по заказам всегда создается новая накладная
			
			// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет функциональная опция
			// В ином случае открывается форма со списком созданных накладных
			
			Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
				// Пакетно
				ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
				АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных);
				ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СписокРаспоряжений.Количество() > 1 
		ИЛИ (ДокументыПоТипамНакладных.Количество() = 0 И НЕ ЗначениеЗаполнено(СписокОшибок)) Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		Если ПоОрдерам Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по отгрузке'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	КонецЕсли;
	
	РежимБезВопросов = Ложь;
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьНакладная(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - накладная не создана. Остальные состояния подразумевают наличие накладной, либо накладную без заказа
			Если Строка.СостояниеНакладной <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОрдер(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - ордер не создан. Остальные состояния подразумевают наличие ордера, либо что ордер не требуется (состояние 4)
			Если Строка.СостояниеОрдера <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаказ(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			Если ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ЗаказКлиента") 
				ИЛИ ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция РазделитьЗаказыПоПолнымИменамНакладных(СписокОшибок) 
	
	ТекущиеКлючи =  Обработки.ЖурналДокументовПродажи.СтруктураЗначащихРеквизитов();
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоЗначащимРеквизитамРаспоряжений();
	
	Запрос.УстановитьПараметр("МассивСсылок", СписокРаспоряжений.Выгрузить(,"Ссылка").ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	Запрос.УстановитьПараметр("ПоОрдерам",    ПоОрдерам);
	Запрос.УстановитьПараметр("ТаблицаСостояний", СписокРаспоряжений.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивТаблиц = Новый Массив();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивТаблиц;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выгрузка = РезультатЗапроса.Выгрузить();
	
	РазделеннаяТаблица = Неопределено;
	ПакетныйРежим = СписокРаспоряжений.Количество() > 1;
	ПредыдущаяОшибочнаяСсылка = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим И ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			ТекстОшибки = НСтр("ru = 'Невозможно перезаполнить накладную %1 вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли ПоОрдерам Тогда
			
			Если Строка.СостояниеОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по отгрузке, т.к. ордера соответствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по отгрузке, т.к. склад не использует ордерную схему.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		Иначе // оформление по заказам
			
			Если ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				ТекстОшибки = НСтр("ru = 'Распоряжение %1 явлется накладной. Для накладных оформление по заказам не доступно.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеНакладной = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки) 
			И ПредыдущаяОшибочнаяСсылка <> Строка.Ссылка Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			ПредыдущаяОшибочнаяСсылка = Строка.Ссылка;
			ТекстОшибки = "";
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать 
		//	в одну накладную заказы у которых разные склады)
		Если РазделеннаяТаблица = Неопределено 
			Или (Не ИспользоватьРеализациюПоНесколькимЗаказам
				И (Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				ИЛИ Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав))
			Или (Не ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам
				И Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)
			Или Строка.Партнер <> ТекущиеКлючи.Партнер
			Или Строка.Контрагент <> ТекущиеКлючи.Контрагент
			Или Строка.Договор <> ТекущиеКлючи.Договор
			Или Строка.Организация <> ТекущиеКлючи.Организация
			Или Строка.Соглашение <> ТекущиеКлючи.Соглашение
			Или Строка.Сделка <> ТекущиеКлючи.Сделка
			Или Строка.Склад <> ТекущиеКлючи.Склад
			Или Строка.Подразделение <> ТекущиеКлючи.Подразделение
			Или Строка.СкладОтгрузки <> ТекущиеКлючи.СкладОтгрузки
			Или Строка.ХозяйственнаяОперация <> ТекущиеКлючи.ХозяйственнаяОперация
			Или Строка.ВалютаВзаиморасчетов <> ТекущиеКлючи.ВалютаВзаиморасчетов
			Или Строка.НалогообложениеНДС <> ТекущиеКлючи.НалогообложениеНДС
			Или Строка.ЦенаВключаетНДС <> ТекущиеКлючи.ЦенаВключаетНДС
			Или Строка.ЗапрещеноВыбиратьГруппуСкладов <> ТекущиеКлючи.ЗапрещеноВыбиратьГруппуСкладов
			Или Строка.ВариантОформленияПродажи <> ТекущиеКлючи.ВариантОформленияПродажи
			Или Строка.СпособДоставки <> ТекущиеКлючи.СпособДоставки
			Или Строка.ПеревозчикПартнер <> ТекущиеКлючи.ПеревозчикПартнер
			Или Строка.АдресДоставки <> ТекущиеКлючи.АдресДоставки
			Или Строка.АдресДоставкиПеревозчика <> ТекущиеКлючи.АдресДоставкиПеревозчика
			Или Строка.ВернутьМногооборотнуюТару <> ТекущиеКлючи.ВернутьМногооборотнуюТару
			Или Строка.СрокВозвратаМногооборотнойТары <> ТекущиеКлючи.СрокВозвратаМногооборотнойТары
			Или Строка.ТребуетсяЗалогЗаТару <> ТекущиеКлючи.ТребуетсяЗалогЗаТару
			Или Строка.КалендарьВозвратаТары <> ТекущиеКлючи.КалендарьВозвратаТары
			Или Строка.РассчитыватьДатуВозвратаТарыПоКалендарю <> ТекущиеКлючи.РассчитыватьДатуВозвратаТарыПоКалендарю
			Или Строка.НаправлениеДеятельности <> ТекущиеКлючи.НаправлениеДеятельности Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

&НаСервере
Процедура ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок)
	
	ИзначальноеКоличество = ДокументыПоТипамНакладных.Количество();
	Для н = 1 По ИзначальноеКоличество Цикл
		Индекс = ИзначальноеКоличество - н;
		Таблица = ДокументыПоТипамНакладных[Индекс];
		
		Исключить = Ложь;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Если СтрокаТаблицы.СостояниеНакладной <> 1 Тогда
				Исключить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исключить Тогда
			
			Для Каждого Строка Из Таблица Цикл
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 действие не выполнено, так как по выбранным распоряжениям уже имеются накладные.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки, Неопределено);
			КонецЦикла;
			
			ДокументыПоТипамНакладных.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОформитьРядНакладныхПоТаблицам(СтруктураПараметров)
	
	НаименованиеЗадания = НСтр("ru = 'Оформление документов продажи'");
	ВыполняемыйМетод = "Обработки.ЖурналДокументовПродажи.ОформитьНакладные";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	АдресХранилища = СтруктураПараметров.АдресДокументыПоТипамНакладных;
	ДокументыПоТипамНакладных = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	СтруктураПараметров.Вставить("ДокументыПоТипамНакладных", ДокументыПоТипамНакладных);
	
	Если ДокументыПоТипамНакладных.Количество() < 10 Тогда
		ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПараметрыФормирования", ПараметрыФормированияДокументов());
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	МетаданныеНакладной = Метаданные.Документы.РеализацияТоваровУслуг;
	
	Если ПравоДоступа("Добавление", МетаданныеНакладной) Или ПравоДоступа("Изменение", МетаданныеНакладной) Тогда
		
		МассивСсылок = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		
		НастройкиФормы = НастройкиФормыПереоформленияНакладных();
		
		РеквизитыШапки = Новый Структура();
		ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки);
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Заказы", МассивСсылок);
		ПараметрыФормы.Вставить("Склад", РеквизитыШапки.Склад);
		ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
		ПараметрыФормы.Вставить("НастройкиФормы", НастройкиФормы);
		
		ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, ИмяФормы, Параметры", Ложь);
		
		ПараметрыИИмяФормы.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
		ПараметрыИИмяФормы.Параметры = ПараметрыФормы;
		
		Возврат ПараметрыИИмяФормы;
	Иначе
		ОшибкаДоступа = НСтр("ru = 'Нет прав на добавление/изменение реализаций товаров и услуг'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СписокРаспоряженияНаОформление",
			ОшибкаДоступа, 
			Неопределено);
			
		Возврат Новый Структура(); // Нет прав
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПоОрдерам, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока = ТаблицаДокументов[0];
	
	МетаданныеНакладной = Метаданные.Документы.РеализацияТоваровУслуг;
	ИмяНакладной = "РеализацияТоваровУслуг";
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	СтруктураПоиска = Обработки.ЖурналДокументовПродажи.СтруктураЗначащихРеквизитов();
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		Если ТипЗнч(Распоряжение)= Тип("ДокументСсылка.РеализацияТоваровУслуг")  Тогда
			РаспоряженияНакладные.Добавить(Распоряжение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Ложь;
	Если ПоОрдерам И РаспоряженияНакладные.Количество() > 0 Тогда
		// Для существующих распоряжений-накладных не перезаполняется шапка документа
		ПерезаполняемаяНакладная = РаспоряженияНакладные[0];
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, Заказы);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПоОрдерам);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяНакладной + ".Форма.ФормаДокумента");
		
		// Для вывода сообщения о количестве созданных документов
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыделеннаяСтрока);
		Если ВыделеннаяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
			ИЛИ ВыделеннаяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
			ПараметрыФормы.Вставить("СкладОтгрузки", Склад);
			ПараметрыФормы.Вставить("ВариантОформленияПродажи", ВыделеннаяСтрока.ВариантОформленияПродажи);
			ПараметрыФормы.Вставить("ПараметрыОформления", Новый Структура("ПоЗаказам, ПоОрдерам", НЕ ПоОрдерам, ПоОрдерам));
		Иначе
			ИмяНакладной = "АктВыполненныхРабот";
		КонецЕсли;
			
		РеквизитыРаспоряжения = Обработки.ЖурналДокументовПродажи.ПолучитьРеквизитыРаспоряжений(Заказы);
		РеквизитыШапки = Новый Структура();
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
		
		ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыФормы.Вставить("ДокументОснование", Заказы);
		
		Если НеОткрыватьФормуСозданногоДокумента Тогда
			Обработки.ЖурналДокументовПродажи.СоздатьДокументПродажи(СтруктураПоиска, ПараметрыФормы, СозданныеДокументы, ПараметрыФормированияДокументов());
			НастройкиФормы.Вставить("РежимПечатиДокументов", Истина);
		Иначе
			НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяНакладной + ".Форма.ФормаДокумента");
			
			// Для вывода сообщения о количестве созданных документов
			СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПерезаполняемаяНакладная) Тогда
		ПараметрыСОснованием.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыСОснованием.Вставить("Ключ", ПерезаполняемаяНакладная);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПоЗначащимРеквизитамРаспоряжений()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаСостояний.Ссылка КАК Ссылка,
		|	ТаблицаСостояний.СостояниеНакладной КАК СостояниеНакладной,
		|	ТаблицаСостояний.СостояниеОрдера КАК СостояниеОрдера
		|ПОМЕСТИТЬ
		|	ВТСостояния
		|ИЗ
		|	&ТаблицаСостояний КАК ТаблицаСостояний
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	СУММА(РаспоряжениеНаОформление.КОформлениюОстаток) КАК КОформлениюОстаток,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.ЗаказКлиента КАК Ссылка,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.НаправлениеДеятельности
		|ПОМЕСТИТЬ
		|	ВТРаспоряжения
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер КАК Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент КАК Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор КАК Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация КАК Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение КАК Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка КАК Сделка,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Склад КАК Склад,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.Склад
		|		КОНЕЦ КАК СкладОтгрузки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа
		|					И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИНАЧЕ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта КАК ВалютаВзаиморасчетов,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ КАК ПеревозчикПартнер,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставки,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставкиПеревозчика,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ КАК КалендарьВозвратаТары,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи В (ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг), ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))) КАК ЗаказыКлиентовОстатки
		|	ГДЕ
		|		НЕ &ПоОрдерам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Договор,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Организация,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Подразделение,
		|		НЕОПРЕДЕЛЕНО,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.КОформлениюОстаток,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС,
		|		ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЗаказыКлиентовОстатки.ЗаказКлиента.НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(
		|				,
		|				ЗаказКлиента В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|					И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Партнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Партнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Партнер
		|		КОНЕЦ КАК Партнер,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Контрагент
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Контрагент
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Контрагент
		|		КОНЕЦ КАК Контрагент,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Договор
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Договор
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Договор
		|		КОНЕЦ КАК Договор,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Организация
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация
		|		КОНЕЦ КАК Организация,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение
		|		КОНЕЦ КАК Соглашение,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Сделка
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Сделка
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Сделка
		|		КОНЕЦ КАК Сделка,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад
		|		КОНЕЦ КАК Склад,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Подразделение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Подразделение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Подразделение
		|		КОНЕЦ КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад
		|				КОНЕЦ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация
		|				КОНЕЦ
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.КОформлениюОстаток + ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Валюта
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Валюта
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Валюта
		|		КОНЕЦ КАК Валюта,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).НалогообложениеНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НалогообложениеНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).НалогообложениеНДС
		|		КОНЕЦ КАК НалогообложениеНДС,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ЦенаВключаетНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ЦенаВключаетНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ЦенаВключаетНДС
		|		КОНЕЦ КАК ЦенаВключаетНДС,
		|		ТоварыКОтгрузкеОстатки.Номенклатура.ВариантОформленияПродажи,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки
		|		КОНЕЦ КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ПеревозчикПартнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПеревозчикПартнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|				И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|				И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставкиПеревозчика
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставкиПеревозчика
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ВернутьМногооборотнуюТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ВернутьМногооборотнуюТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ВернутьМногооборотнуюТару
		|		КОНЕЦ КАК ВернутьМногооборотнуюТару,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				0
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СрокВозвратаМногооборотнойТары
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СрокВозвратаМногооборотнойТары
		|		КОНЕЦ КАК СрокВозвратаМногооборотнойТары,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ТребуетсяЗалогЗаТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ТребуетсяЗалогЗаТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ТребуетсяЗалогЗаТару
		|		КОНЕЦ КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).НаправлениеДеятельности
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НаправлениеДеятельности
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).НаправлениеДеятельности
		|		КОНЕЦ КАК НаправлениеДеятельности
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|				,
		|				ДокументОтгрузки В (&МассивСсылок)
		|					И (Склад = &Склад
		|						ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ТоварыКОтгрузкеОстатки
		|	ГДЕ
		|		&ПоОрдерам) КАК РаспоряжениеНаОформление
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.НаправлениеДеятельности
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка;
		|
		|ВЫБРАТЬ
		|	Распоряжения.Ссылка,
		|	Распоряжения.Партнер,
		|	Распоряжения.Контрагент,
		|	Распоряжения.Договор,
		|	Распоряжения.Организация,
		|	Распоряжения.Соглашение,
		|	Распоряжения.Сделка,
		|	Распоряжения.Склад,
		|	Распоряжения.Подразделение,
		|	Распоряжения.СкладОтгрузки,
		|	Распоряжения.ЗапрещеноВыбиратьГруппуСкладов,
		|	Распоряжения.ХозяйственнаяОперация,
		|	Распоряжения.КОформлениюОстаток,
		|	Распоряжения.ВалютаВзаиморасчетов,
		|	Распоряжения.НалогообложениеНДС,
		|	Распоряжения.ЦенаВключаетНДС,
		|	Распоряжения.ВариантОформленияПродажи,
		|	Распоряжения.СпособДоставки,
		|	Распоряжения.ПеревозчикПартнер,
		|	Распоряжения.АдресДоставки,
		|	Распоряжения.АдресДоставкиПеревозчика,
		|	Распоряжения.ВернутьМногооборотнуюТару,
		|	Распоряжения.СрокВозвратаМногооборотнойТары,
		|	Распоряжения.ТребуетсяЗалогЗаТару,
		|	Распоряжения.КалендарьВозвратаТары,
		|	Распоряжения.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	Распоряжения.НаправлениеДеятельности,
		|	Состояния.СостояниеНакладной,
		|	Состояния.СостояниеОрдера
		|ИЗ
		|	ВТРаспоряжения КАК Распоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостояния КАК Состояния
		|		ПО Состояния.Ссылка = Распоряжения.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжения.ВариантОформленияПродажи,
		|	Распоряжения.Партнер,
		|	Распоряжения.Контрагент,
		|	Распоряжения.Договор,
		|	Распоряжения.Организация,
		|	Распоряжения.Соглашение,
		|	Распоряжения.Сделка,
		|	Распоряжения.Подразделение,
		|	Распоряжения.СкладОтгрузки,
		|	Распоряжения.ХозяйственнаяОперация,
		|	Распоряжения.ВалютаВзаиморасчетов,
		|	Распоряжения.НалогообложениеНДС,
		|	Распоряжения.ЦенаВключаетНДС,
		|	Распоряжения.ЗапрещеноВыбиратьГруппуСкладов,
		|	Распоряжения.ВернутьМногооборотнуюТару,
		|	Распоряжения.СрокВозвратаМногооборотнойТары,
		|	Распоряжения.ТребуетсяЗалогЗаТару,
		|	Распоряжения.КалендарьВозвратаТары,
		|	Распоряжения.РассчитыватьДатуВозвратаТарыПоКалендарю";
		
	Возврат ТекстЗапроса
	
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонРазделеннойТаблицы()
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений;
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Сделка", Новый ОписаниеТипов("СправочникСсылка.СделкиСКлиентами"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("НалогообложениеНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЦенаВключаетНДС", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЗапрещеноВыбиратьГруппуСкладов", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СпособДоставки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыДоставки"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ПеревозчикПартнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("АдресДоставки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("АдресДоставкиПеревозчика", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВернутьМногооборотнуюТару", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СрокВозвратаМногооборотнойТары", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ТребуетсяЗалогЗаТару", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("КалендарьВозвратаТары", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВариантОформленияПродажи", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОформленияПродажи"));
	Возврат ШаблонРазделеннаяТаблица
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	ПараметрыФормирования = Новый Структура();
	ПараметрыФормирования.Вставить("ПечататьРеализациюТоваровУслуг", ПечататьРеализациюТоваровУслуг);
	ПараметрыФормирования.Вставить("ПечататьАктВыполненныхРабот", ПечататьАктВыполненныхРабот);
	ПараметрыФормирования.Вставить("СоздаватьСчетФактуру", СоздаватьСчетФактуру);
	ПараметрыФормирования.Вставить("СоздаватьДокументПродажи", СоздаватьДокументПродажи);
	ПараметрыФормирования.Вставить("Склад", Склад);
	ПараметрыФормирования.Вставить("НеОткрыватьФормуСозданногоДокумента", НеОткрыватьФормуСозданногоДокумента);
	ПараметрыФормирования.Вставить("ПоОрдерам", ПоОрдерам);
	Возврат ПараметрыФормирования
КонецФункции

#КонецОбласти

#КонецОбласти
