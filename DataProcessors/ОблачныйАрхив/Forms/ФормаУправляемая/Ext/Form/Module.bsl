&НаКлиенте
Перем УстановленАгент;

&НаКлиенте
Перем СертификатНайден;

&НаКлиенте
Перем ПутьДоАгента;

&НаКлиенте
Перем ИДИнформационнойБазы;

&НаКлиенте
Перем РасписаниеПоУмолчанию;

&НаКлиенте
Перем СтруктураНастройкиБэкапаИБ;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
// + Процедура обработчик события при открытии формы.
Процедура 	ПриОткрытии(Отказ)
	
	// Проверяем, что эта база файловая, в противном случае - завершаем работу
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если НЕ Лев(СтрокаСоединения,5) = "File=" Тогда
		ВыдатьПредупреждение(НСтр("ru = 'Сервис ""1С:Облачный архив"" используется только для резервного копирования файловых информационных баз.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверяем на предмет соответствия минимальной версии платформы
	НаВозврат = МодульнаяПроверитьВерсиюПлатформы();
	Если НЕ НаВозврат = Истина Тогда
		Сообщить(НаВозврат);
	КонецЕсли;
	
	// Проверяем на предмет соответствия актуальной версии агента
	НаВозврат = МодульнаяПроверитьНаАктуальнуюВерсиюАгента();
	Если НЕ НаВозврат = Истина Тогда
		Сообщить(НаВозврат);
	КонецЕсли; 			
	
	РасписаниеПоУмолчанию = Дата('00010101220000');
	
	Элементы.ГруппаАктивация.Видимость = Истина;
	Элементы.ОсновнаяПанель.Видимость  = Ложь;
	
	// Проверяем установленность агента
	ПутьДоАгента = "";
	УстановленАгент = МодульнаяПроверитьУстановленностьАгента();
	Если НЕ УстановленАгент = Ложь Тогда
		ПутьДоАгента = УстановленАгент;
		УстановленАгент = Истина;
	КонецЕсли;
	
	Если УстановленАгент = Ложь Тогда
		ИнициализироватьЗакладкуЗагрузкиАгента();
		Возврат;
	КонецЕсли;	
	
	// Проверяем наличие сертификата сервиса
	СертификатНайден = МодульнаяПроверитьНаличиеСертификатаСервиса(ПутьДоАгента);
	
	Если УстановленАгент = Истина И НЕ СертификатНайден Тогда
		ИнициализироватьЗакладкуАктивацииПодписки();
		Возврат;
	КонецЕсли;
	
	// Если все прошло нормально, то открываем основную страницу
	ИнициализироватьГлавнуюСтраницу();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаУстановкаАгента - группа Активация

&НаКлиенте
// + Обработчик нажатия на ссылку "Загрузить" закладки Агента
Процедура 	СсылкаЗагрузитьАгентаНажатие(Элемент)
	
	СсылкаНаАгент = МодульнаяПолучитьСсылкуНаАгента();
	
	ПерейтиПоНавигационнойСсылке(СсылкаНаАгент);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Группа Навигация

&НаКлиенте
// + Обработчик нажатия на картинку навигации в БД
Процедура 	ОсновнаяНавигацияБазыНажатие(Элемент)
	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяБазы;
	Элементы.КнопкаБазыГлавная.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте 
// + Обработчик нажатия на картинку навигации в Расписание
Процедура 	РасписаниеНажатие(Элемент)
	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяРасписание;
	Элементы.КнопкаРасписаниеГлавная.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
// + Обработчик нажатия на картику навигации в Журнал
Процедура 	ЖурналНажатие(Элемент)
	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяЖурнал;
	Элементы.КнопкаЖурналГлавная.КнопкаПоУмолчанию = Истина;
	ОбновитьЖурналЛогов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Страница ОсновнаяГлавная - группа Основная панель

&НаКлиенте
// + Обработчик нажатия на ссылку Переактивация
Процедура 	ОсновнаяСсылкаПереактивацияНажатие(Элемент)
	
	СертификатНайден = Ложь;
	
	Элементы.СтраницыАктивации.ТекущаяСтраница = Элементы.СтраницаАктивацияСервиса;	
	Элементы.ГруппаАктивация.Видимость = Истина;
	Элементы.ОсновнаяПанель.Видимость = Ложь;
	Элементы.АктивацияСервисаДалее.КнопкаПоУмолчанию = Истина;
	
	ОбновитьДоступностьПереходаСАктивацииСервиса();
	
КонецПроцедуры

&НаКлиенте
// + Обработчик нажатия на ссылку "Включить"
Процедура 	ГлавнаяСсылкаВключитьНажатие(Элемент)
	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяБазы;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ОсновнаяБазы - группа Основная панель

&НаКлиенте
// Процедура включает Текущую ИБ к резервному копированию
Процедура 	ФлажокБазаВключитьБэкапПриИзменении(Элемент)
	
	ПутьДоФайла = КаталогВременныхФайлов();
	Если Не Прав(ПутьДоФайла,1) = "\" Тогда ПутьДоФайла = ПутьДоФайла + "\"; КонецЕсли;
	
	Если БазыВключитьТекущуюБазуВБэкап = Ложь Тогда
		Ответ = Вопрос(НСтр("ru = 'Вы уверены, что хотите отключить резервное копирование текущей информационной базы?'"),РежимДиалогаВопрос.ДаНетОтмена,60,КодВозвратаДиалога.Отмена,НСтр("ru = 'Отключение резервного копирования базы'"),КодВозвратаДиалога.Отмена);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			БазыВключитьТекущуюБазуВБэкап = Истина;
		Иначе
			УдалитьФайлы("" + ПутьДоФайла,"" + ИДИнформационнойБазы + ".xml");	
		КонецЕсли;
	КонецЕсли;		
	
	Элементы.СтатусРезервноеКопированиеТекущейИБ.Видимость = НЕ БазыВключитьТекущуюБазуВБэкап;
	Элементы.ГлавнаяСсылкаВключить.Видимость = НЕ БазыВключитьТекущуюБазуВБэкап;
	
КонецПроцедуры

&НаКлиенте
// Событие перед началом изменения строки в таб части Баз
Процедура 	СписокБазПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда Отказ = Истина; Возврат; КонецЕсли;
	
	Если НЕ Элемент.ТекущиеДанные.ИДИнформационнойБазы = ИДИнформационнойБазы Тогда Отказ = Истина; КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Страница ОсновнаяГлавная - группа Журнал логов

&НаКлиенте
// Событие перед началом Изменения табличного поля "Журнал"
Процедура 	ТабличноеПолеЖурналПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;	
	
	ТекСтрока = Элементы.ТабличноеПолеЖурнал.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ТекСтрока.ПутьКФайлу,КодировкаТекста.ANSI);
	ТекстовыйДокумент.Показать(НСтр("ru = 'Лог за '") + ТекСтрока.Дата + " - " + ТекСтрока.Действие);	
	
КонецПроцедуры

&НаКлиенте
// Событие "При активизации строки" табличного поля "Журнал"
Процедура 	ТабличноеПолеЖурналПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТабличноеПолеЖурнал.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Элементы.ИнформационнаяНадписьЖурнал.Заголовок = НСтр("ru = 'Выделите строку журнала...'");
		Элементы.ИнформационнаяНадписьЖурнал.ЦветТекста = WebЦвета.ТемноСиний;
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.Статус = "Ошибка" Тогда
		Элементы.ИнформационнаяНадписьЖурнал.Заголовок = ТекСтрока.ОписаниеОшибок;
		Элементы.ИнформационнаяНадписьЖурнал.ЦветТекста = WebЦвета.Красный;
	Иначе
		Элементы.ИнформационнаяНадписьЖурнал.Заголовок = НСтр("ru = 'Действие по текущей строке выполнено без ошибок'");
		Элементы.ИнформационнаяНадписьЖурнал.ЦветТекста = WebЦвета.ТемноЗеленый;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// + Обработчик команды нажатия "Далее" на закладке "Активация"
Процедура 	АктивацияСервисаДалее(Команда)
	
	СписокОшибок = ОбновитьДоступностьПереходаСАктивацииСервиса();
	
	Если СписокОшибок.Количество() = 0 И НЕ АктивацияАдрес = "" И НЕ АктивацияКодДоступа = "" Тогда
		// Устанавливаем изначальные настройки для бэкап агента, если они не установлены
		Ошибка = МодульнаяУстановитьНачальныеНастройкиАгента(ПутьДоАгента);		
		Если НЕ Ошибка.Результат Тогда
			Ошибка = МодульнаяАктивироватьПодпискуЧерезАгента(ПутьДоАгента,АктивацияАдрес,АктивацияКодДоступа);
			Если Не Ошибка.Результат Тогда
				СертификатыЕсть = МодульнаяПроверитьНаличиеСертификатаСервиса(ПутьДоАгента);
				Если СертификатыЕсть Тогда
					ИнициализироватьГлавнуюСтраницу();
				Иначе
					Сообщить(нстр("ru = 'При получении сертификатов произошла ошибка.'"));	
				КонецЕсли;
			Иначе
				Для каждого Стр из Ошибка.Ошибки Цикл
					Сообщить(Стр);	
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для каждого Стр из Ошибка.Ошибки Цикл
				Сообщить(Стр);	
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для каждого СтрокаОшибка из СписокОшибок Цикл
			Если НЕ Найти(СтрокаОшибка.Представление,"IncorrectLoginOrPasswordApiException") = 0 Тогда
				СтрокаОшибка.Представление = НСтр("ru = 'Указаны неверные пара логин-пароль.'");
			КонецЕсли;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрокаОшибка.Представление;
			Сообщение.Поле = СтрокаОшибка.Значение;
			Сообщение.Сообщить();
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// + Обработчик команды нажатия на кнопку "На главную"
Процедура 	ПерейтиНаГлавную(Команда)
	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяГлавная;	
	
КонецПроцедуры

&НаКлиенте
// Обработкчик команды нажатия на кнопку "Сохранить" 
Процедура 	СохранитьНастройку(Команда)

 	ПутьДоФайла = КаталогВременныхФайлов();
	
	Если Не Прав(ПутьДоФайла,1) = "\" Тогда		
		ПутьДоФайла = ПутьДоФайла + "\";		
	КонецЕсли;
	
	ИмяФайлаНастройки = "" + ПутьДоФайла + ИДИнформационнойБазы + ".xml"; 
	ФайлНастройки = Новый Файл(ИмяФайлаНастройки);
	УдалитьФайлы("" + ПутьДоФайла,"" + ИДИнформационнойБазы + ".xml");
	
	Если НЕ ФайлНастройки.Существует() Тогда		
		ОбновитьСтруктуруНастроекПоЗначениямСФормы();
		МодульнаяЗаписатьИзСтруктурыВXML(ИмяФайлаНастройки,СтруктураНастройкиБэкапаИБ);					
	КонецЕсли; 
	
	Если БазыВключитьТекущуюБазуВБэкап Тогда					
		НаВозврат = МодульнаяОбновитьРасписаниеАгентаПоНастройкеКопированияИБ(ИДИнформационнойБазы,ПутьДоАгента);
	Иначе
		НаВозврат = МодульнаяОтключитьРасписаниеАгентаПоИДИнформационнойБазы(ИДИнформационнойБазы,ПутьДоАгента);	
	КонецЕсли;
	
	// Если ошибка
	Если НаВозврат.Результат = Ложь Тогда
		//	Сохранение расписания - запуск выполнения задания
		МодульнаяВнестиИзмененияВРегламентноеЗадание(БазыВключитьТекущуюБазуВБэкап,РасписаниеКопированияБД);
		ОбновитьСписокБаз();
		Модифицированность = Ложь;
	Иначе
		Для каждого Стр из НаВозврат.Ошибки Цикл
			Сообщить(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// + Обработчик команды нажатия на кнопку "Далее" закладки "Установка агента"
Процедура 	УстановкаАгентаДалее(Команда)
	
	ИнициализироватьЗакладкуАктивацииПодписки();
	
КонецПроцедуры

&НаКлиенте
// Функция обработчик команды "ОбновитьЖурналЛоов"
Процедура 	КомандаОбновитьЖурналЛогов(Команда)
	
	ОбновитьЖурналЛогов();	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// + Процедура открывает закладку активации подписки
Процедура	ИнициализироватьЗакладкуАктивацииПодписки()
	
	Элементы.ОсновнаяПанель.Видимость = Ложь;
	Элементы.ГруппаАктивация.Видимость = Истина;
	Элементы.СтраницыАктивации.ТекущаяСтраница = Элементы.СтраницаАктивацияСервиса;
	Элементы.АктивацияСервисаДалее.КнопкаПоУмолчанию = Истина;
	
	ОбновитьДоступностьПереходаСАктивацииСервиса();
	
КонецПроцедуры 

&НаКлиенте
// + Процедура открывает закладку "Загрузка агента"
Процедура	ИнициализироватьЗакладкуЗагрузкиАгента()
	
	Элементы.ОсновнаяПанель.Видимость = Ложь;
	Элементы.ГруппаАктивация.Видимость = Истина;
	Элементы.СтраницыАктивации.ТекущаяСтраница = Элементы.СтраницаУстановкаАгента;
	Элементы.УстановкаАгентаДалее.КнопкаПоУмолчанию = Истина;
	
	ОбновитьДоступностьПереходаСЗагрузкиАгента();
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет доступность кнопки "Далее" на закладке загрузке агента и проверяет установленность агента
Процедура	ОбновитьДоступностьПереходаСЗагрузкиАгента()
	
	УстановленАгент = МодульнаяПроверитьУстановленностьАгента();
	
	Если УстановленАгент = Ложь Тогда
		ПодключитьОбработчикОжидания("ОбновитьДоступностьПереходаСЗагрузкиАгента",10);
	Иначе
		ПутьДоАгента = УстановленАгент;
	КонецЕсли;
	
	Элементы.УстановкаАгентаДалее.Доступность = ?(УстановленАгент = Ложь,Ложь,Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает главную страницу "Управление резервным копированием"
Процедура	ИнициализироватьГлавнуюСтраницу()
	
	Элементы.ГруппаАктивация.Видимость = Ложь;
	Элементы.ОсновнаяПанель.Видимость = Истина;	
	Элементы.Основная.ТекущаяСтраница = Элементы.ОсновнаяГлавная;
	
	// Получаем ID информационной базы	
	ИДИнформационнойБазы = ПолучитьИДИнформационнойБазы();
	
	// Подгружаем настройку из файла
	НаВозврат = МодульнаяПолучитьСтруктуруНастройкиКопированияИБ(ИДИнформационнойБазы);
	СтруктураНастройкиБэкапаИБ = НаВозврат.Результат;
	Для каждого Стр из НаВозврат.Предупреждение Цикл
		Сообщить(Стр);		
	КонецЦикла;
	// Заполняем значениями из настройки поля
	БазыВключитьТекущуюБазуВБэкап = ?(СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.useit.Значение = "1",Истина,Ложь);	
	Попытка
		РасписаниеКопированияБД = МодульнаяПолучитьВремяИзUFC(СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.Schedule.Строки.time.Значение);
	Исключение
		РасписаниеКопированияБД = РасписаниеПоУмолчанию;
	КонецПопытки;	
	ХранениеКоличествоДневныхКопий   = СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Daily.Значение;
	ХранениеКоличествоМесячныхКопий  = СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Monthly.Значение;
	ХранениеКоличествоНедельныхКопий = СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Weekly.Значение;	
	
	ОбновитьСписокБаз();
	
	Элементы.СтатусРезервноеКопированиеТекущейИБ.Видимость = НЕ БазыВключитьТекущуюБазуВБэкап;
	Элементы.ГлавнаяСсылкаВключить.Видимость = НЕ БазыВключитьТекущуюБазуВБэкап;
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет список баз агента
Процедура	ОбновитьСписокБаз()
	
	СписокБаз.Очистить();
	НСтр = СписокБаз.Добавить();
	НСтр.Наименование = СокрЛП(СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DBName.Значение);
	НСтр.ИДИнформационнойБазы = ИДИнформационнойБазы;
	НСтр.Время = РасписаниеКопированияБД;
	НСтр.Включено = БазыВключитьТекущуюБазуВБэкап;
	НСтр.ПутьДоИБ = СокрЛП(СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DBFolder.Значение);  
	
	ПутьДоФайлаНастроекАгента = "" + ПутьДоАгента + "\config\BackupAgent.xml";
	СтруктураНастроек = МодульнаяЗаполнитьСтруктуруИзXML(ПутьДоФайлаНастроекАгента);
	
	ПутьДоРабочейПапки = СтруктураНастроек.Строки.EnvironmentConfiguration.Строки.OperationDirectory.Значение;
	
	НайденныеНастройки = НайтиФайлы(ПутьДоРабочейПапки,"*_backupConfig.xml",Истина);
	
	Для каждого Стр из НайденныеНастройки Цикл
		
		СтруктураНастройкиБэкапаСтороннейИБ = МодульнаяЗаполнитьСтруктуруИзXML(Стр.ПолноеИмя);
		Если СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DB_ID.Значение) = СокрЛП(ИДИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		НСтр = СписокБаз.Добавить();                                                                         
		НСтр.Наименование = СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DBName.Значение);
		НСтр.ИДИнформационнойБазы = СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DB_ID.Значение);
		НСтр.Время = МодульнаяПолучитьВремяИзUFC(СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Schedule.Строки.Time.Значение));
		НСтр.Включено = ?(СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DB_ID.Значение) = "1",Истина,Ложь);
		НСтр.ПутьДоИБ = СокрЛП(СтруктураНастройкиБэкапаСтороннейИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DBFolder.Значение);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ИД текущей информационной базы
Функция		ПолучитьИДИнформационнойБазы()
	// Нужно переделать хэш
	
	СтрокаСоединения = МодульнаяПолучитьПутьКИнформационнойБазе();
	
	Результат = "" + Лев(ИмяКомпьютера(),50) + Прав(СтрокаСоединения,150);
	
	Хэш = ПолучитьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы,".Форма.ФормаУправляемая",".Форма.ОбработкаХеш")).РасчетХЭШ(Результат);
		
	Возврат "DB-"+Хэш;
	
КонецФункции

&НаКлиенте
// + Процедура заполняет текущую настройку ИБ из значений с формы
Процедура	ОбновитьСтруктуруНастроекПоЗначениямСФормы()

	СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.useit.Значение = ?(БазыВключитьТекущуюБазуВБэкап,"1","0");
	СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.Schedule.Строки.time.Значение = МодульнаяПолучитьВремяВUFC(РасписаниеКопированияБД);
	СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Daily.Значение = ХранениеКоличествоДневныхКопий;	
	СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Weekly.Значение = ХранениеКоличествоНедельныхКопий;
	СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.RetentionRule.Строки.Monthly.Значение = ХранениеКоличествоМесячныхКопий;
	
	// Наименование БД
	Найдено = СписокБаз.НайтиСтроки(Новый Структура("ИДИнформационнойБазы",ИДИнформационнойБазы));
	Если НЕ Найдено.Количество() = 0 Тогда
		СтруктураНастройкиБэкапаИБ.Строки.DatabaseBackupConfiguration.Строки.Database.Строки.DBName.Значение = Найдено[0].Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Функция проверяет возможность перехода с закладки активации исходя из введенных данных в поля и возвращает список ошибок
Функция		ОбновитьДоступностьПереходаСАктивацииСервиса()
	
	// Нет проверки на запрещенные символы в логинах и кодах доступа	
	ВсеПоляВведеныВерно = Истина;
	
	СписокОшибок = Новый СписокЗначений;
	
	// Проверяем заполненность логин
	Если НЕ ЗначениеЗаполнено(АктивацияЛогин) Тогда
		ВсеПоляВведеныВерно = Ложь;
		СписокОшибок.Добавить("АктивацияЛогин",НСтр("ru = 'Не заполнено поле Логин.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АктивацияПароль) Тогда
		ВсеПоляВведеныВерно = Ложь;
		СписокОшибок.Добавить("АктивацияЛогин",НСтр("ru = 'Не заполнено поле Пароль.'"));
	КонецЕсли;
	
	ТикетАвторизации = "";
	ОписаниеОшибки = "";
	ПолучитьТикетНаСервере(ОписаниеОшибки);	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ТикетАвторизации = "";
		ВсеПоляВведеныВерно = Ложь;
		СписокОшибок.Добавить("АктивацияЛогин",НСтр("ru = 'Не удалось активировать сервис по причине:'") + Символы.ПС + ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТикетАвторизации) Тогда
		ОписаниеОшибки = "";
		АктивацияАдрес = "";
		АктивацияКодДоступа = "";
		ПолучитьАдресИКодДоступаНаСервере(ОписаниеОшибки);
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			АктивацияАдрес = "";
			АктивацияКодДоступа = "";
			ВсеПоляВведеныВерно = Ложь;
			СписокОшибок.Добавить("АктивацияЛогин",НСтр("ru = 'Не удалось активировать сервис по причине:'") + Символы.ПС + ОписаниеОшибки);
		КонецЕсли;			
	КонецЕсли;  
	
	Возврат СписокОшибок;
	
КонецФункции

&НаСервере
// * 
Процедура	ПолучитьТикетНаСервере(ОписаниеОшибки)
	
	ОписаниеОшибки = "";
	ТикетАвторизации = Строка(ПолучитьНовыйТикет(АктивацияЛогин, АктивацияПароль, "1C-cloud-backup", ОписаниеОшибки));
	
КонецПроцедуры

&НаСервере
// * 
Функция		ПолучитьНовыйТикет(Логин, Пароль, ИмяСервиса, ОписаниеОшибки)
	
	Попытка
		WSПрокси = МодульнаяWSПроксиСервиса();
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка при подключении к сервису аутентификации.'")
			+ " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		ПолученныйТикет = WSПрокси.getTicket(Логин, Пароль, ИмяСервиса);
		ОписаниеОшибки   = "";
		Возврат ПолученныйТикет;
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
// * 
Процедура	ПолучитьАдресИКодДоступаНаСервере(ОписаниеОшибки)
	
	ОтветСервиса = ПолучитьАдресИКодДоступа(ТикетАвторизации,ОписаниеОшибки);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ОтветСервиса) = Тип("Структура") Тогда
		АктивацияАдрес = ОтветСервиса.Адрес;
		АктивацияКодДоступа = ОтветСервиса.КодДоступа;
	Иначе
		ОписаниеОшибки = "Неверный ответ от сервиса ОблачныйАрхив";
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
// * 
Функция		ПолучитьАдресИКодДоступа(Тикет, ОписаниеОшибки)
	
	Попытка
		WSПрокси = МодульнаяWSСервисаОблачногоАрхива();
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка при подключении к сервису облачного архива.'")
			+ " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		КодАдресИКодДоступа = WSПрокси.checkTicket(Тикет);  
		
		Если НЕ Найти(КодАдресИКодДоступа,";;") = 0 Тогда
			НаВозврат = Новый Структура();
			НаВозврат.Вставить("Адрес",Лев(КодАдресИКодДоступа,Найти(КодАдресИКодДоступа,";;") - 1));
			НаВозврат.Вставить("КодДоступа",Прав(КодАдресИКодДоступа,СтрДлина(КодАдресИКодДоступа) - Найти(КодАдресИКодДоступа,";;") -1));
		Иначе
			НаВозврат = КодАдресИКодДоступа;
		КонецЕсли;
		ОписаниеОшибки  = "";
		Возврат НаВозврат;
	Исключение
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
// * Процедура в общем модуле
Функция		МодульнаяWSСервисаОблачногоАрхива()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.WSСервисаОблачногоАрхива();
	
КонецФункции

&НаСервере
// * Процедура в общем модуле
Функция		МодульнаяWSПроксиСервиса()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.WSПроксиСервиса();
	
КонецФункции

&НаСервере
// * Функция возвращает ложь в случае отсутствия установленного агента, или путь до агента
Функция		МодульнаяПроверитьУстановленностьАгента()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПроверитьУстановленностьАгента();
	
КонецФункции

&НаСервере
// * Процедура вносит изменения в расписание регламентного задания согласно установленному в полях
Процедура	МодульнаяВнестиИзмененияВРегламентноеЗадание(Использование,ВремяКопирования)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	МодульОбработки.ВнестиИзмененияВРегламентноеЗадание(Использование,ВремяКопирования);		
	
КонецПроцедуры

&НаСервере
// * Функция проверяет наличие выданных сертификатов для агента и возвращает ложь/истина по результату
Функция 	МодульнаяПроверитьНаличиеСертификатаСервиса(ПутьДоBackupAgent)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПроверитьНаличиеСертификатаСервиса(ПутьДоBackupAgent);	
	
КонецФункции

&НаСервере
// * Функция возвращает ссылку на агента для скачки
Функция		МодульнаяПолучитьСсылкуНаАгента()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьСсылкуНаАгента();	
	
КонецФункции

&НаСервере
// * Функция возвращает ошибку, если не удалось записать начальные настройки агента
Функция		МодульнаяУстановитьНачальныеНастройкиАгента(ПутьДоBackupAgent)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.УстановитьНачальныеНастройкиАгента(ПутьДоBackupAgent);		
	
КонецФункции

&НаСервере
// * Функция возвращает Ложь в случае отсуствия ошибок при активации сервиса по указанным данным с формы
Функция		МодульнаяАктивироватьПодпискуЧерезАгента(ПутьДоАгента,Логин,КодДоступа)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.АктивироватьПодпискуЧерезАгента(ПутьДоАгента,Логин,КодДоступа);	
	
КонецФункции

&НаСервере
// * Функция возвращает путь к информационной базе
Функция		МодульнаяПолучитьПутьКИнформационнойБазе()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьПутьКИнформационнойБазе();	
	
КонецФункции
 
&НаСервере
// * Функция возвращает настройку копирования БД по ИД, и ошибки с предупреждениями
Функция		МодульнаяПолучитьСтруктуруНастройкиКопированияИБ(ИДБД,ПутьКИБ = Неопределено,НаименованиеИБ = Неопределено,Расписание = Неопределено)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьСтруктуруНастройкиКопированияИБ(ИДБД,ПутьКИБ,НаименованиеИБ,Расписание);	
	
КонецФункции

&НаСервере
// * Функция возвращает да/нет в зависимости от обновления настройки через шедулера
Функция		МодульнаяОбновитьРасписаниеАгентаПоНастройкеКопированияИБ(ИДБД,ПутьДоBackupAgent)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ОбновитьРасписаниеАгентаПоНастройкеКопированияИБ(ИДБД,ПутьДоBackupAgent);	
 		
КонецФункции

&НаСервере
// * Функция возвращает да/нет в зависимости от обновления настройки через шедулера
Функция		МодульнаяОтключитьРасписаниеАгентаПоИДИнформационнойБазы(ИДБД,ПутьДоBackupAgent)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ОтключитьРасписаниеАгентаПоИДИнформационнойБазы(ИДБД,ПутьДоBackupAgent);	
 		
КонецФункции

&НаСервере
// * Функция возвращает Истина, если версия пригодна для работы обработки, и сообщение текстом, если не пригодна и какая минимальная
Функция		МодульнаяПроверитьВерсиюПлатформы()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПроверитьВерсиюПлатформы();	
 		
КонецФункции

&НаСервере
// * Функция возвращает Истина, если версия не отличается от актуальной или сообщение об отличии
Функция		МодульнаяПроверитьНаАктуальнуюВерсиюАгента()
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПроверитьНаАктуальнуюВерсиюАгента();	
 		
КонецФункции

&НаСервере
// * Функция возвращает XML настроек агента в виде структуры
Функция		МодульнаяПолучитьНастройкиАгента(ПутьДоBackupAgent)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьНастройкиАгента(ПутьДоBackupAgent);	
 		
КонецФункции

&НаКлиенте
// + Функция выдает предупреждение, в зависимости от режима использования модальности конфигурации
Функция		ВыдатьПредупреждение(ТекстПредупрежденияRu,ТекстПредупрежденияEn = Неопределено,Заголовок = "Предупреждение",Таймаут = 30)
	
	Если ИспользуетсяРежимМодальностиКонфигурации() Тогда
		Предупреждение(ТекстПредупрежденияRu,Таймаут,Заголовок);
	Иначе
		ПоказатьПредупреждение(,ТекстПредупрежденияRU,Таймаут,Заголовок);
	КонецЕсли;
	
КонецФункции

&НаСервере
// + Функция возвращает Истина/Ложь в зависимости от использования режима модальности конфиуграции
Функция		ИспользуетсяРежимМодальностиКонфигурации()
	Попытка
		Возврат Вычислить("Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать");
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
// + Процедура заполняет журнал логов по пути
Процедура	ОбновитьЖурналЛогов()
	
	ТабличноеПолеЖурнал.Очистить();
	
	ПутьДоФайлаНастроекАгента = "" + ПутьДоАгента + "\config\BackupAgent.xml";
	СтруктураНастроек = МодульнаяЗаполнитьСтруктуруИзXML(ПутьДоФайлаНастроекАгента);
	
	ПутьДоПапкиЛогов = СтруктураНастроек.Строки.EnvironmentConfiguration.Строки.Log.Строки.LogPath.Значение;
	
	МассивФайлов = НайтиФайлы(ПутьДоПапкиЛогов,"*.log",Истина);
	
	Для каждого Стр Из МассивФайлов Цикл
		НСтр = ТабличноеПолеЖурнал.Добавить();
		Нстр.ПутьКФайлу = Стр.ПолноеИмя;
		Нстр.ИмяФайла = Стр.ИмяБезРасширения;
		ЗаполнитьЗначенияСвойств(НСтр,МодульнаяЗаполнитьДанныеПоЛогу(Нстр.ПутьКФайлу,Нстр.ИмяФайла));
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	ТабличноеПолеЖурнал.Сортировать("Дата УБЫВ");
	
	
КонецПроцедуры

&НаСервере
//*  Функция возыращает структуру с заполненной информацией по логу
Функция		МодульнаяЗаполнитьДанныеПоЛогу(ПутьКФайлу,ИмяФайла)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ЗаполнитьДанныеПоЛогу(ПутьКФайлу,ИмяФайла);	
	
КонецФункции

&НаСервере
// * Функция возрвращает время в текущем часовом поясе
Функция		МодульнаяПолучитьВремяИзUFC(ВремяКопирования)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьВремяИзUFC(ВремяКопирования);	
	
КонецФункции

&НаСервере	
// * Функция возвращает время в UFC 
Функция		МодульнаяПолучитьВремяВUFC(РасписаниеКопированияБД)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ПолучитьВремяВUFC(РасписаниеКопированияБД);
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Работа с WSh Shell 

// * Функция возвращает ошибку процесса после выполнения команды черз WSh Shell
&НаСервере
Функция		МодульнаяСТДПолучитьОшибкуУПроцесса(Процесс)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.СТДПолучитьОшибкуУПроцесса(Процесс);		
	
КонецФункции

&НаСервере
// * Функция возвращает сообщение выводимое в StdOut процесса после выполнения команды черз WSh Shell
Функция		МодульнаяСТДПолучитьСообщениеУПроцесса(Процесс)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.СТДПолучитьСообщениеУПроцесса(Процесс);	
	
КонецФункции

 
////////////////////////////////////////////////////////////////////////////////
// Работа с XML

&НаСервере    
// * Процедура записывает НЕ произвольный набор (формат) ключей структуры
Процедура	МодульнаяЗаписатьИзСтруктурыВXML(ПутьКФайлу,Структура)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	МодульОбработки.ЗаписатьИзСтруктурыВXML(ПутьКФайлу,Структура);	
	
КонецПроцедуры

&НаСервере    
// * Функция возвращает структуру из XML (находится в модуле)
Функция		МодульнаяЗаполнитьСтруктуруИзXML(ПутьКФайлу)
	
	МодульОбработки = РеквизитФормыВЗначение("Объект");
	Возврат МодульОбработки.ЗаполнитьСтруктуруИзXML(ПутьКФайлу);	
	
КонецФункции

