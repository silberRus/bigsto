
#Область ОбъявлениеПеременных

Перем мСтруктураДанных;
Перем мКодировка;

Перем мНачалоXML;

#КонецОбласти


#Область РаботаСXML

Процедура РазобратьXML(МассивЧастейXML, ОписаниеОшибки)
	
	//
	
	ДеревоГрупп = Новый ДеревоЗначений;
	ДеревоГрупп.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ДеревоГрупп.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоГрупп.Колонки.Добавить("Ссылка");

	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Множественное", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Справочник", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Ссылка");
	ТаблицаСвойств.Колонки.Добавить("ВариантыЗначений", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Группы", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница", Новый ОписаниеТипов("Структура"));
	ТаблицаТоваров.Колонки.Добавить("Картинки", Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("ЗначенияСвойств", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("Ссылка");

	ТаблицаВидовЦен = Новый ТаблицаЗначений;
	ТаблицаВидовЦен.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("Ссылка");

	ТаблицаПредложений = Новый ТаблицаЗначений;
	ТаблицаПредложений.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	ТаблицаПредложений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаПредложений.Колонки.Добавить("Цены", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаПредложений.Колонки.Добавить("Ссылка");
	ТаблицаПредложений.Колонки.Добавить("Характеристики", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	//
	
	мСтруктураДанных.Вставить("ДеревоГрупп", ДеревоГрупп);
	мСтруктураДанных.Вставить("ТаблицаСвойств", ТаблицаСвойств);
	мСтруктураДанных.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	мСтруктураДанных.Вставить("ТаблицаВидовЦен", ТаблицаВидовЦен);
	мСтруктураДанных.Вставить("ТаблицаПредложений", ТаблицаПредложений);
	
	//
	
	Всего = МассивЧастейXML.Количество();
	Сч = 0;
	
	Для Каждого СтрокаXML Из МассивЧастейXML Цикл
		
		Сч = Сч + 1;
		
		РазобратьДанныеXML(СтрокаXML, ОписаниеОшибки);
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			Возврат;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура РазобратьДанныеXML(СтрокаXML, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML;
	
	Попытка
		ОбъектXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	ПоследовательностьЭлементов = "";
	
	ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ДеревоГрупп;
	мСтруктураДанных.Вставить("ТекущаяСтрокаДереваГрупп", ТекущаяСтрокаДереваГрупп);
	
	Пока Истина Цикл
		
		ОчереднойУзелXMLПрочитан = Ложь;
		
		Попытка
			ОчереднойУзелXMLПрочитан = ОбъектXML.Прочитать();
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат;
		КонецПопытки;
		
		Если НЕ ОчереднойУзелXMLПрочитан Тогда
			Прервать;
		КонецЕсли;
		
		ТипУзла = ОбъектXML.ТипУзла;
		ИмяУзла = ОбъектXML.Имя;
		
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ПоследовательностьЭлементов = ДобавитьЭлементКПоследовательности(ПоследовательностьЭлементов, ИмяУзла);
			
			ОбработатьНачалоЭлемента(ОбъектXML, ПоследовательностьЭлементов);
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			ОбработатьКонецЭлемента(ПоследовательностьЭлементов);
			
			ПоследовательностьЭлементов = УдалитьПоследнийЭлементИзПоследовательности(ПоследовательностьЭлементов);
			
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда
			
			ЗначениеЭлемента = СокрЛП(ОбъектXML.Значение);
			
			ОбработатьЗначениеЭлемента(ОбъектXML, ПоследовательностьЭлементов, ЗначениеЭлемента, ОписаниеОшибки);
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектXML.Закрыть();
	
КонецПроцедуры

Процедура ОбработатьКонецЭлемента(Знач ИмяЭлемента)
	
	Если Прав(ИмяЭлемента, 14) = ".Группа.Группы" Тогда
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Родитель;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьНачалоЭлемента(ОбъектXML, Знач ИмяЭлемента)
	
	Если Прав(ИмяЭлемента, 14) = ".Группа.Группы"
		ИЛИ ИмяЭлемента = "Классификатор.Группы" Тогда
		
		// Начинаются группы, надо добавить уровень
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Строки.Добавить();
	
	ИначеЕсли Прав(ИмяЭлемента, 14) = ".Группы.Группа" Тогда
			
		Родитель = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Родитель;
		Если Родитель = НеОпределено Тогда
			Родитель = мСтруктураДанных.ТекущаяСтрокаДереваГрупп.Владелец();
		КонецЕсли;
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп = Родитель.Строки.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство" Тогда
		
		мСтруктураДанных.ТаблицаСвойств.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока.Справочник = Истина;
		ТекСтрока.ВариантыЗначений.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
		ТекСтрока.ВариантыЗначений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		ТекСтрока.ВариантыЗначений.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар" Тогда
		
		мСтруктураДанных.ТаблицаТоваров.Добавить();
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		
		Если ТекСтрока.ЗначенияСвойств.Колонки.Количество() = 0 Тогда
			ТекСтрока.ЗначенияСвойств.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
			ТекСтрока.ЗначенияСвойств.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ТекСтрока.ЗначенияСвойств.Добавить();
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены" Тогда
		
		мСтруктураДанных.ТаблицаВидовЦен.Добавить();

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение" Тогда
		
		мСтруктураДанных.ТаблицаПредложений.Добавить();
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара" Тогда
		
		ТекПредложение = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		
		Если ТекПредложение.Характеристики.Колонки.Количество() = 0 Тогда
			ТекПредложение.Характеристики.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
			ТекПредложение.Характеристики.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
			
		ТекПредложение.Характеристики.Добавить();

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		
		Если ТекСтрока.Цены.Колонки.Количество() = 0 Тогда
			ТекСтрока.Цены.Колонки.Добавить("ИдТипаЦены", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("ЦенаЗаЕдиницу", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("Валюта", Новый ОписаниеТипов("Строка"));
			ТекСтрока.Цены.Колонки.Добавить("Единица", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ТекСтрока.Цены.Добавить();

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗначениеЭлемента(ОбъектXML, ИмяЭлемента, ЗначениеЭлемента, ОписаниеОшибки);
	
	ДлинаИд = 255;
	ОшибкаДлинаИд = "Ошибка данных XML: превышена максимальная длина идентификатора - более " + ДлинаИд + ": ";
	
	ИмяТекущегоЭлемента = ПолучитьИмяЭлементаИзПоследовательности(ИмяЭлемента);
	
	Если Прав(ИмяЭлемента, 17) = ".Группы.Группа.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Группы: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп[ИмяТекущегоЭлемента] = "G_" + ЗначениеЭлемента;
		
	ИначеЕсли Прав(ИмяЭлемента, 27) = ".Группы.Группа.Наименование" Тогда
		
		мСтруктураДанных.ТекущаяСтрокаДереваГрупп[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Свойства: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Значение"
		ИЛИ ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Справочник.Значение" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекВариант = ТекСтрока.ВариантыЗначений[ТекСтрока.ВариантыЗначений.Количество() - 1];
		ТекВариант.Значение = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.ВариантыЗначений.Справочник.ИдЗначения" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
		ТекВариант = ТекСтрока.ВариантыЗначений[ТекСтрока.ВариантыЗначений.Количество() - 1];
		ТекВариант.Ид = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "Классификатор.Свойства.Свойство.Множественное" Тогда
		
		Если ЗначениеЭлемента = "true" Тогда
			ТекСтрока = мСтруктураДанных.ТаблицаСвойств[мСтруктураДанных.ТаблицаСвойств.Количество() - 1];
			ТекСтрока.Множественное = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Ид" Тогда
		
		Если СтрДлина(ЗначениеЭлемента) > ДлинаИд Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Товары: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Наименование"
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.Описание" 
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.Артикул" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.БазоваяЕдиница" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрока.БазоваяЕдиница.Вставить("Значение", ЗначениеЭлемента);

	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Группы.Ид" Тогда
		
		Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
			
			ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
			ТекСтрока.Группы.Добавить("G_" + ЗначениеЭлемента);
			
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.Картинка" Тогда
		
		Если НЕ ПустаяСтрока(ЗначениеЭлемента) Тогда
			
			ТекСтрока = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
			ТекСтрока.Картинки.Добавить(ЗначениеЭлемента);
			
		КонецЕсли;

	ИначеЕсли ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства.Ид"
		ИЛИ ИмяЭлемента = "Каталог.Товары.Товар.ЗначенияСвойств.ЗначенияСвойства.Значение" Тогда
		
		ТекСтрокаТовара = мСтруктураДанных.ТаблицаТоваров[мСтруктураДанных.ТаблицаТоваров.Количество() - 1];
		ТекСтрокаСвойства = ТекСтрокаТовара.ЗначенияСвойств[ТекСтрокаТовара.ЗначенияСвойств.Количество() - 1];
		
		ТекСтрокаСвойства[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены.Ид"
		ИЛИ ИмяЭлемента = "ПакетПредложений.ТипыЦен.ТипЦены.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаВидовЦен[мСтруктураДанных.ТаблицаВидовЦен.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Ид" Тогда
		
		Поз = Найти(ЗначениеЭлемента, "#");
		
		ПраваяЧасть = Сред(ЗначениеЭлемента, Поз + 1);
		
		Если СтрДлина(ПраваяЧасть) > ДлинаИд Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Предложения: " + ОшибкаДлинаИд + ЗначениеЭлемента);
			Возврат;
			
		КонецЕсли;
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Наименование" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрока[ИмяТекущегоЭлемента] = ЗначениеЭлемента;
		
	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.ИдТипаЦены"
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.ЦенаЗаЕдиницу" 
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.Валюта" 
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.Цены.Цена.Единица" Тогда
		
		ТекСтрока = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрокаЦены = ТекСтрока.Цены[ТекСтрока.Цены.Количество() - 1];
		ТекСтрокаЦены[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	ИначеЕсли ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара.Наименование"
		ИЛИ ИмяЭлемента = "ПакетПредложений.Предложения.Предложение.ХарактеристикиТовара.ХарактеристикаТовара.Значение" Тогда
		
		ТекПредложение = мСтруктураДанных.ТаблицаПредложений[мСтруктураДанных.ТаблицаПредложений.Количество() - 1];
		ТекСтрокаХарактеристики = ТекПредложение.Характеристики[ТекПредложение.Характеристики.Количество() - 1];
		ТекСтрокаХарактеристики[ИмяТекущегоЭлемента] = ЗначениеЭлемента;

	КонецЕсли;

КонецПроцедуры

Функция КодировкаUTF8(Строка)
	
	СтрокаНРег = НРег(Строка);
	
	СигнатураUTF8 = НРег("<?xml version=""1.0"" encoding=""UTF-8""?>");
	
	UTF8УказанаЯвно = Найти(СтрокаНРег, СигнатураUTF8) > 0;
	
	Если UTF8УказанаЯвно Тогда
		Возврат Истина;
	КонецЕсли;
	
	СигнатураWIN1251 = НРег("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	WIN1251УказанаЯвно = Найти(СтрокаНРег, СигнатураWIN1251) > 0;
	
	Если WIN1251УказанаЯвно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Длина = СтрДлина(Строка);
	
	Для Сч = 1 По Длина Цикл
		
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		
		Если КодСимвола > 1105
			И КодСимвола < 1500 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьКодировку(ТекстФайла, ИмяФайла)
	
	Если НЕ мКодировка = НеОпределено Тогда
		Возврат мКодировка;
	КонецЕсли;
	
	ТекстФайла.Прочитать(ИмяФайла);
	
	СтрокаТекст = ТекстФайла.ПолучитьТекст();
	
	Если КодировкаUTF8(СтрокаТекст) Тогда
		
		Возврат КодировкаТекста.UTF8;
		
	КонецЕсли;
	
	Возврат КодировкаТекста.ANSI;
	
КонецФункции

Функция ПолучитьСтатусXML(ОтветСервера)
	
	СтатусXML = Новый Структура;
	СтатусXML.Вставить("Статус", "");
	СтатусXML.Вставить("XML", "");
	
	Поз = Найти(ОтветСервера, мНачалоXML);
	Если Поз = 0 Тогда
		Возврат СтатусXML;
	КонецЕсли;
	
	СтатусXML.Статус = СокрЛП(Лев(ОтветСервера, Поз - 1));
	СтатусXML.XML = СокрЛП(Сред(ОтветСервера, Поз));
	
	Возврат СтатусXML;
	
КонецФункции

#КонецОбласти


#Область ЗагрузкаИРазборДанных

Функция ИмпортВыполнен(ТоваровПолучено, АдресВХранилищеСтруктураДанных, Протокол) Экспорт
	
	ОписаниеОшибки = "";
	МассивЧастейXML = Новый Массив;
	мКодировка = НеОпределено;
	
	ЗагрузитьДанныеXMLССайта(МассивЧастейXML, ОписаниеОшибки);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если МассивЧастейXML.Количество() = 0 Тогда
		Сообщить("Данные XML не получены.");
		Возврат Ложь;
	КонецЕсли;
	
	Протокол = Протокол
		+ Символы.ПС
		+ ШтампВремени() + "Загружено блоков XML: " + МассивЧастейXML.Количество();
	
	мСтруктураДанных = Новый Структура;
	АдресВХранилищеСтруктураДанных = "";
	ТоваровПолучено = 0;
	
	Протокол = Протокол
		+ Символы.ПС
		+ Символы.ПС
		+ "Анализ данных XML:";
	
	РазобратьXML(МассивЧастейXML, ОписаниеОшибки);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Сообщить(ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТоваровПолучено = мСтруктураДанных.ТаблицаТоваров.Количество();
	
	Протокол = Протокол
		+ Символы.ПС
		+ ШтампВремени() + "Получено товаров: " + ТоваровПолучено;
	
	АдресВХранилищеСтруктураДанных = ПоместитьВоВременноеХранилище(мСтруктураДанных, Новый УникальныйИдентификатор());
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровСайта(АдресРесурса = "") Экспорт
	
	Адрес = ?(ПустаяСтрока(АдресРесурса), АдресСайта, АдресРесурса);
	
	СтруктураПараметровСайта = АдресСайтаРазобран(Адрес);
	
	Если НЕ СтруктураПараметровСайта.Свойство("ЗащищенноеСоединение") Тогда
		СтруктураПараметровСайта.Вставить("ЗащищенноеСоединение", Ложь);
	КонецЕсли;
	
	Если СтруктураПараметровСайта.Порт = 0 Тогда
		Если СтруктураПараметровСайта.ЗащищенноеСоединение Тогда
			СтруктураПараметровСайта.Порт = 443;
		Иначе
			СтруктураПараметровСайта.Порт = 80;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметровСайта.Порт = 443
		И НЕ СтруктураПараметровСайта.ЗащищенноеСоединение Тогда
		
		СтруктураПараметровСайта.ЗащищенноеСоединение = Истина;
		
	КонецЕсли;
	
	СтруктураПараметровСайта.Вставить("ИмяПользователя"    , ИмяПользователя);
	СтруктураПараметровСайта.Вставить("Пароль"             , Пароль);
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(СтруктураПараметровСайта.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, Б_ОбщиеПроцедурыИФункцииСервер.ПолучитьПрокси(НастройкаПроксиСервера, Протокол));
	
	СтруктураПараметровСайта.Вставить("Прокси", Прокси);
	
	Возврат СтруктураПараметровСайта;
	
КонецФункции

Функция ПолучитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки) Экспорт
	
	Соединение = НеОпределено; 
	
	Попытка 
		
		СисИнфо = Новый СистемнаяИнформация; 
		
		Если НЕ ПараметрыПодключения.ЗащищенноеСоединение тогда 
			ssl = Неопределено; 
		Иначе 
				
			ssl = Новый ЗащищенноеСоединениеOpenSSL( 
			Неопределено, 
			Неопределено); 
		КонецЕсли; 
		
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт, ПараметрыПодключения.ИмяПользователя, ПараметрыПодключения.Пароль, ПараметрыПодключения.Прокси, ,ssl);	
		
	Исключение 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
		НСтр("ru = 'Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"), 
		ПараметрыПодключения.Сервер, 
		ПараметрыПодключения.Порт)); 
		
		Соединение = Неопределено; 
		
	КонецПопытки; 
	
	
	Возврат Соединение; 
	
КонецФункции

Процедура ЗагрузитьДанныеXMLССайта(МассивЧастейXML, ОписаниеОшибки)
	
	СтруктураПараметровСайта = ПолучитьСтруктуруПараметровСайта();
	
	Соединение = ПолучитьСоединениеССервером(СтруктураПараметровСайта, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка при попытке установки соединения с сайтом.'"));
		Возврат;
	КонецЕсли;
	
	ОтветСервера = "";
	СтрокаСообщенияПользователю = "";
	
	Успешно = АвторизацияВыполнена(Соединение, СтруктураПараметровСайта, ОтветСервера, СтрокаСообщенияПользователю);
	
	Если Не ПустаяСтрока(СтрокаСообщенияПользователю) Тогда
		Сообщить(СтрокаСообщенияПользователю);
	КонецЕсли;
	
	Если Не Успешно Тогда
		ОписаниеОшибки = "Не удалось выполнить авторизацию.";
		Возврат;
	КонецЕсли;
	
	КукиИмя      	  = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение 	  = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОтветСервера = ПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=get_catalog&mode=init", ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено Тогда 
		ОписаниеОшибки = "Не удалось получить параметры обмена с сервера.";
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		ИнформацияДляПользователя = "";
		
		ОтветСервера = ПолучитьДанныеССервера(Соединение, СтруктураПараметровСайта.АдресСкрипта + "?type=get_catalog&mode=query", ЗаголовкиЗапросов, ИнформацияДляПользователя);
		
		Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ИнформацияДляПользователя);
			
		КонецЕсли;
		
		Если ОтветСервера = Неопределено Тогда 
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не удалось загрузить данные с сервера.");
			Возврат;
		КонецЕсли;
		
		Результат = СтрПолучитьСтроку(ОтветСервера, 1);
		
		Если Результат = "failure" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, "Не удалось загрузить данные с сервера. Ответ сервера:"
				+ Символы.ПС + ОтветСервера);
			Возврат;
			
		ИначеЕсли Результат = "finished=yes" Тогда
			
			Прервать;
			
		Иначе
			
			СтатусXML = ПолучитьСтатусXML(ОтветСервера);
			
			Если ПустаяСтрока(СтатусXML.XML) Тогда
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки, "Нет данных XML. Ответ сервера:"
					+ Символы.ПС + ОтветСервера);
				Возврат;
				
			КонецЕсли;
			
			МассивЧастейXML.Добавить(СтатусXML.XML);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьКартинки(АдресВХранилищеСтруктураДанных, Протокол) Экспорт
	
	Сч = 0;
	
	Обработано = 0;
	Загружено  = 0;
	Найдено    = 0;
	
	мСтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилищеСтруктураДанных);
	
	Для Каждого СтрокаТовара Из мСтруктураДанных.ТаблицаТоваров Цикл
		
		Сч = Сч + 1;
		
		Для Каждого Картинка Из СтрокаТовара.Картинки Цикл
			
			Обработано = Обработано + 1;
			
			Если ЗначениеЗаполнено(СтрокаТовара.Ссылка) тогда
			
				Если НЕ СтрокаТовара.Ссылка.ЭтоГруппа тогда
					
					КартинкаСсылка = НайтиКартинку(Картинка, СтрокаТовара.Ссылка);
					
					Если ЗначениеЗаполнено(КартинкаСсылка) Тогда
						Найдено = Найдено + 1;
						Продолжить;
					КонецЕсли;
					
					СтруктураПараметровСайта = ПолучитьСтруктуруПараметровСайта(Картинка);
					
					ОписаниеОшибки = "";
					
					Соединение = ПолучитьСоединениеССервером(СтруктураПараметровСайта, ОписаниеОшибки);
					
					Если Соединение = Неопределено Тогда
						ДобавитьОписаниеОшибки(ОписаниеОшибки, "Ошибка при попытке установки соединения с сайтом: " + Картинка);
						Сообщить(ОписаниеОшибки);
						Продолжить;
					КонецЕсли;
					
					РасширениеФайла = РасширениеФайла(Картинка);
					
					ФайлКартинки = ПолучитьИмяВременногоФайла(РасширениеФайла);
					
					Попытка
						Соединение.Получить(СтруктураПараметровСайта.АдресСкрипта, ФайлКартинки);
					Исключение
						Сообщить(ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
					
					СохранитьКартинку(ФайлКартинки, Картинка, РасширениеФайла, СтрокаТовара.Ссылка);
					
					Загружено = Загружено + 1;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДобавитьВПротокол(Протокол, "Картинки", Обработано, Найдено, Загружено);
	
КонецПроцедуры

Функция АвторизацияВыполнена(Соединение, ПараметрыПодключения, 
	ОтветСервера, ОписаниеОшибки, ТипСоединения = "catalog") Экспорт
	
	Соединение = ПолучитьСоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(Соединение, ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth", , ОписаниеОшибки);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'")
			+ Символы.ПС 
			+ НСтр("ru = 'Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеССервера(Соединение, ПараметрыЗапроса="", Заголовки="", СтрокаСообщенияПользователю = "")
	
	ОтветСервера   = Неопределено;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	
	Попытка
		Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
	Исключение
		СтрокаСообщенияПользователю = "Не удалось получить данные с сервера. Проверьте правильность адреса сервера, порт, имя пользователя и пароль,"
		+ Символы.ПС + "а также настройки подключения к Интернет." + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		
		ТекстОтвета.Прочитать(ИмяФайлаОтвета, ОпределитьКодировку(ТекстОтвета, ИмяФайлаОтвета));
		
		ОтветСервера = ТекстОтвета.ПолучитьТекст();
		
		Если ТекстОтвета.КоличествоСтрок() = 0 Тогда
			
			СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Получен пустой ответ сервера."; 	
			
		КонецЕсли;
		
	Иначе
		
		СтрокаСообщенияПользователю = СтрокаСообщенияПользователю + Символы.ПС + "Получение данных с сервера: Ответ сервера не получен."; 
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция АдресСайтаРазобран(Знач АдресСайта)
	
	НастройкиПодключения = Новый Структура;
	
	АдресСайта           = СокрЛП(АдресСайта);
	
	Сервер               = "";
	Порт                 = 0;
	АдресСкрипта         = "";
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер        = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока    = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			Порт = Число(ПортСтрока);
		Исключение
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер"              , Сервер);
	НастройкиПодключения.Вставить("Порт"                , Порт);
	НастройкиПодключения.Вставить("АдресСкрипта"        , АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат НастройкиПодключения;
	
КонецФункции

#КонецОбласти


#Область СозданиеДанных

Процедура СоздатьТовары(КоличествоКартинок, АдресВХранилищеСтруктураДанных, Протокол) Экспорт
	
	мСтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилищеСтруктураДанных);
	
	ПодготовитьТаблицуПредложений();
	
	Если СоздаватьГруппы Тогда
		
		Обработано = 0;
		Найдено    = 0;
		Создано    = 0;
		
		СтрокиДереваГрупп = мСтруктураДанных.ДеревоГрупп.Строки;
		НайтиСоздатьГруппыРекурсивно(СтрокиДереваГрупп, Обработано, Найдено, Создано);
		
		ДобавитьВПротокол(Протокол, "Группы", Обработано, Найдено, Создано);
		
	КонецЕсли;
	
	Сч = 0;
	
	ДокУстановкиЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	СтатусДокумента = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") Тогда
		СтатусДокумента = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	КонецЕсли;
	ДокУстановкиЦен.Статус = СтатусДокумента;
	
	НоменклатураСоздано = 0;
	НоменклатураНайдено = 0;
	
	СвойстваОбработано = 0;
	СвойстваСоздано    = 0;
	СвойстваНайдено    = 0;
	
	ХарактеристикиОбработано = 0;
	ХарактеристикиНайдено    = 0;
	ХарактеристикиСоздано    = 0;
	
	ВидыЦенОбработано = 0;
	ВидыЦенНайдено    = 0;
	ВидыЦенСоздано    = 0;
	ЦеныУстановлено   = 0;
	
	Для Каждого СтрокаТовара Из мСтруктураДанных.ТаблицаТоваров Цикл
		
		Сч = Сч + 1;
		
		Номенклатура = НеОпределено;
		НоменклатураСоздана = Ложь;
		НайтиСоздатьНоменклатуру(Номенклатура, СтрокаТовара, НоменклатураСоздана);
		
		Если НоменклатураСоздана Тогда
			НоменклатураСоздано = НоменклатураСоздано + 1;
		Иначе
			НоменклатураНайдено = НоменклатураНайдено + 1;
		КонецЕсли;
		
		СтрокаТовара.Ссылка = Номенклатура;
		
		Если СоздаватьСвойства Тогда
			
			ЗаполнитьСвойстваНоменклатруры(Номенклатура, СтрокаТовара.ЗначенияСвойств, СвойстваОбработано, СвойстваНайдено, СвойстваСоздано);
			
		КонецЕсли;
		
		Если СоздаватьХарактеристики И СоздаватьХарактеристикиДоступность Тогда
			
			СоздатьХарактеристикиНоменклатуры(Номенклатура, СтрокаТовара.Ид, ХарактеристикиОбработано, ХарактеристикиНайдено, ХарактеристикиСоздано);
			
		КонецЕсли;
		
		Если УстанавливатьЦены Тогда
			
			УстановитьЦены(Номенклатура, СтрокаТовара.Ид, ДокУстановкиЦен, ВидыЦенОбработано, ВидыЦенНайдено, ВидыЦенСоздано, ЦеныУстановлено);
			
		КонецЕсли;
		
		КоличествоКартинок = КоличествоКартинок + СтрокаТовара.Картинки.Количество();
		
	КонецЦикла;
	
	Если УстанавливатьЦены
		И ДокУстановкиЦен.Товары.Количество() > 0 Тогда
		
		ДокУстановкиЦен.Дата = ТекущаяДата();
		ДокУстановкиЦен.Комментарий = СформироватьКомментарийНовогоОбъекта();
		ДокУстановкиЦен.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
		
		Попытка
			ДокУстановкиЦен.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан документ установки цен: " + ДокУстановкиЦен.Ссылка);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	ДобавитьВПротокол(Протокол, "Товары", Сч, НоменклатураНайдено, НоменклатураСоздано);
	
	Если СоздаватьСвойства Тогда
		ДобавитьВПротокол(Протокол, "Свойства", СвойстваОбработано, СвойстваНайдено, СвойстваСоздано);
	КонецЕсли;
	
	Если СоздаватьХарактеристики и СоздаватьХарактеристикиДоступность Тогда
		ДобавитьВПротокол(Протокол, "Характеристики", ХарактеристикиОбработано, ХарактеристикиНайдено, ХарактеристикиСоздано);
	КонецЕсли;
	
	Если УстанавливатьЦены Тогда
		ДобавитьВПротокол(Протокол, "Виды цен", ВидыЦенОбработано, ВидыЦенНайдено, ВидыЦенСоздано);
		Протокол = Протокол
			+ Символы.ПС
			+ Символы.ПС
			+ "Установлено цен: " + ЦеныУстановлено;
	КонецЕсли;
	
	АдресВХранилищеСтруктураДанных = ПоместитьВоВременноеХранилище(мСтруктураДанных, Новый УникальныйИдентификатор());
	
КонецПроцедуры

Процедура НайтиСоздатьСвойство(ДанныеСвойства, Новое)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка как Объект
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Б_Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ДанныеСвойства.Ид);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеСвойства.Ссылка = Выборка.Объект;
		Возврат;
		
	КонецЕсли;
	
	//
	
	Если ДанныеСвойства.Справочник Тогда
		
		Тип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		
	Иначе
		
		Тип = Тип("Строка");
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип);
		ПараметрыСтроки = Новый КвалификаторыСтроки(50);

		ТипЗначения = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	Свойство.Наименование = ДанныеСвойства.Наименование;
	Свойство.Заголовок = ДанныеСвойства.Наименование;
	Свойство.Б_Идентификатор = ДанныеСвойства.Ид;

	Свойство.ТипЗначения = ТипЗначения;
	Свойство.ЭтоДополнительноеСведение = Истина;
	Свойство.Комментарий = СформироватьКомментарийНовогоОбъекта();
	Свойство.Записать();
	
	ЗаписьНабора = ВидНоменклатуры.НаборСвойств.ПолучитьОбъект();
	НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
	НовСвойство.Свойство = Свойство.Ссылка;
	ЗаписьНабора.Записать();
	
	ДанныеСвойства.Ссылка = Свойство.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
	Новое = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваНоменклатруры(Номенклатура, ТаблицаЗначенийСвойств, Обработано, Найдено, Создано);
	
	Для Каждого СтрокаЗначенияСвойства Из ТаблицаЗначенийСвойств Цикл
		
		Обработано = Обработано + 1;
		
		Если ПустаяСтрока(СтрокаЗначенияСвойства.Ид)
			ИЛИ ПустаяСтрока(СтрокаЗначенияСвойства.Значение)
			ИЛИ Лев(СтрокаЗначенияСвойства.Ид, 5) = "CML2_" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСвойства = мСтруктураДанных.ТаблицаСвойств.Найти(СтрокаЗначенияСвойства.Ид, "Ид");
		
		Если ДанныеСвойства = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСвойства.Множественное Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСвойства.Ссылка) Тогда
			
			Новое = Ложь;
			
			НайтиСоздатьСвойство(ДанныеСвойства, Новое);
			
			Если НЕ ЗначениеЗаполнено(ДанныеСвойства.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Новое Тогда
				Создано = Создано + 1;
			Иначе
				Найдено = Найдено + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьЗначениеСвойства(Номенклатура, ДанныеСвойства, СтрокаЗначенияСвойства.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьЗначениеСвойстваСправочник(ДанныеСвойства, ИдЗначенияИлиЗначениеСвойства, ЗначениеСвойстваСсылка)
	
	ЗначениеСвойства = ИдЗначенияИлиЗначениеСвойства;
	ИдЗначения = "";
	
	СтрокаВарианта = ДанныеСвойства.ВариантыЗначений.Найти(ИдЗначенияИлиЗначениеСвойства, "Ид");
	
	Если НЕ СтрокаВарианта = НеОпределено Тогда
		ЗначениеСвойства = СтрокаВарианта.Значение;
		ИдЗначения = СтрокаВарианта.Ид;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ПустаяСтрока(ИдЗначения) Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ЗначенияСвойствОбъектов.Ссылка
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
	
		Запрос.УстановитьПараметр("Наименование", ЗначениеСвойства);
		Запрос.УстановитьПараметр("Владелец", ДанныеСвойства.Ссылка);
		
	Иначе
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		   |	ЗначенияСвойствОбъектов.Ссылка
		   |ИЗ
		   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		   |ГДЕ
		   |	ЗначенияСвойствОбъектов.Б_Идентификатор = &Идентификатор
		   |	И ЗначенияСвойствОбъектов.Владелец = &Владелец";
	
		Запрос.УстановитьПараметр("Идентификатор", ИдЗначения);
		Запрос.УстановитьПараметр("Владелец", ДанныеСвойства.Ссылка);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗначениеСвойстваСсылка = Выборка.Ссылка;
		Возврат;
	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Спр = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	Спр.Владелец = ДанныеСвойства.Ссылка;
	Спр.Наименование = ЗначениеСвойства;
	Если НЕ ПустаяСтрока(ИдЗначения) Тогда
		Спр.Б_Идентификатор = ИдЗначения;
	КонецЕсли;
	Спр.Записать();
	ЗначениеСвойстваСсылка = Спр.Ссылка;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьЗначениеСвойства(Номенклатура, ДанныеСвойства, пЗначениеСвойства)
	
	ЗначениеСвойства = пЗначениеСвойства;
	
	Если ДанныеСвойства.Справочник Тогда
		
		НайтиСоздатьЗначениеСвойстваСправочник(ДанныеСвойства, пЗначениеСвойства, ЗначениеСвойства);
		
	КонецЕсли;
	
	Рег = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Рег.Объект = Номенклатура;
	Рег.Свойство = ДанныеСвойства.Ссылка;
	Рег.Значение = ЗначениеСвойства;
	Рег.Записать();
	
	//НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	//
	//СтрокаДопРеквизитов = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(ДанныеСвойства.Ссылка, "Свойство");
	//
	//Если СтрокаДопРеквизитов = Неопределено Тогда
	//	СтрокаДопРеквизитов = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
	//	СтрокаДопРеквизитов.Свойство = ДанныеСвойства.Ссылка;
	//КонецЕсли;
	//
	//СтрокаДопРеквизитов.Значение = ЗначениеСвойства;
	//
	//НоменклатураОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьЦены(Номенклатура, ИдНоменклатуры, ДокУстановкиЦен, ВидыЦенОбработано, ВидыЦенНайдено, ВидыЦенСоздано, ЦеныУстановлено)
	
	Найдено = мСтруктураДанных.ТаблицаПредложений.НайтиСтроки(Новый Структура("Ид", ИдНоменклатуры));
	
	Для Каждого СтрокаПредложения Из Найдено Цикл
		
		Если СтрокаПредложения.Цены.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаЦены Из СтрокаПредложения.Цены Цикл
			
			Если Номенклатура.ЭтоГруппа = Истина тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Цена = Число(СтрокаЦены.ЦенаЗаЕдиницу);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если Цена <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВидаЦены = мСтруктураДанных.ТаблицаВидовЦен.Найти(СтрокаЦены.ИдТипаЦены, "Ид");
			
			Если СтрокаВидаЦены = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаВидаЦены.Ссылка) Тогда
				
				НайтиСоздатьВидЦен(СтрокаВидаЦены, ВидыЦенОбработано, ВидыЦенНайдено, ВидыЦенСоздано);
				
				Если НЕ ЗначениеЗаполнено(СтрокаВидаЦены.Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьВидЦен = ДокУстановкиЦен.ВидыЦен.Найти(СтрокаВидаЦены.Ссылка, "ВидЦены");
			Если ЕстьВидЦен = НеОпределено Тогда
				НовСтрока = ДокУстановкиЦен.ВидыЦен.Добавить();
				НовСтрока.ВидЦены = СтрокаВидаЦены.Ссылка;
			КонецЕсли;
			
			ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
			Если ЗначениеЗаполнено(СтрокаПредложения.Ссылка) Тогда
				ХарактеристикаНоменклатуры = СтрокаПредложения.Ссылка;
			КонецЕсли;
			
			Найдено = ДокУстановкиЦен.Товары.НайтиСтроки(
				Новый Структура(
				"Номенклатура, Характеристика, ВидЦены",
				Номенклатура, ХарактеристикаНоменклатуры, СтрокаВидаЦены.Ссылка));
				
			Если Найдено.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовары = ДокУстановкиЦен.Товары.Добавить();
			СтрокаТовары.Номенклатура = Номенклатура;
			СтрокаТовары.Характеристика = ХарактеристикаНоменклатуры;
			СтрокаТовары.Цена = Цена;
			СтрокаТовары.ЦенаИзмененаВручную = Истина;
			СтрокаТовары.ВидЦены = СтрокаВидаЦены.Ссылка;
			
			ЦеныУстановлено = ЦеныУстановлено + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьВидЦен(СтрокаВидаЦены, ВидыЦенОбработано, ВидыЦенНайдено, ВидыЦенСоздано)
	
	ВидыЦенОбработано = ВидыЦенОбработано + 1;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыЦен.Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", СтрокаВидаЦены.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаВидаЦены.Ссылка = Выборка.Ссылка;
		ВидыЦенНайдено = ВидыЦенНайдено + 1;
		Возврат;
	
	КонецЕсли; 
	
	Спр = Справочники.ВидыЦен.СоздатьЭлемент();
	Спр.Наименование = СтрокаВидаЦены.Наименование;
	Спр.Идентификатор = ОбщегоНазначенияУТКлиентСервер.ПолучитьИдентификатор(Спр.Наименование);
	Спр.ВалютаЦены = Валюта;
	Спр.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;
	Спр.ОкруглятьВБольшуюСторону = Ложь;
	Спр.ИспользоватьПриПродаже = Истина;
	Спр.Записать();
	
	СтрокаВидаЦены.Ссылка = Спр.Ссылка;
	
	ВидыЦенСоздано = ВидыЦенСоздано + 1;
	
КонецПроцедуры

Процедура СоздатьХарактеристикиНоменклатуры(Номенклатура, ИдНоменклатуры, Обработано, пНайдено, Создано)
	
	Найдено = мСтруктураДанных.ТаблицаПредложений.НайтиСтроки(Новый Структура("Ид", ИдНоменклатуры));
	
	Для Каждого СтрокаПредложения Из Найдено Цикл
		
		Если ПустаяСтрока(СтрокаПредложения.ИдХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПредложения.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Обработано = Обработано + 1;
		
		НаименованиеХарактеристики = СтрокаПредложения.Наименование;
		
		Если ПустаяСтрока(СтрокаПредложения.Наименование) Тогда
			НаименованиеХарактеристики = СтрокаПредложения.ИдХарактеристики;
		КонецЕсли;
		
		НоваяХарактеристика = Ложь;
		ХарактеристикаСсылка = НеОпределено;
		НайтиСоздатьХарактеристику(СтрокаПредложения.ИдХарактеристики, Номенклатура, НаименованиеХарактеристики, ХарактеристикаСсылка, НоваяХарактеристика, СтрокаПредложения.Характеристики);
		
		Если НоваяХарактеристика Тогда
			Создано = Создано + 1;
		Иначе
			пНайдено = пНайдено + 1;
		КонецЕсли;
		
		СтрокаПредложения.Ссылка = ХарактеристикаСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьХарактеристику(ИдХарактеристики, Номенклатура, НаименованиеХарактеристики, ХарактеристикаСсылка, НоваяХарактеристика, СвойстваХарактеристики)
	
	ХарактеристикаСсылка = ПолучениеОбъектаПоКоду(ИдХарактеристики, "СправочникСсылка.ХарактеристикиНоменклатуры", "Справочник.ХарактеристикиНоменклатуры"); 
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ВладелецХарактеристики = Неопределено;
	
	Если ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		ВладелецХарактеристики = Номенклатура;
	Иначе
		ВладелецХарактеристики = ВидНоменклатуры;
	КонецЕсли;
	
	Спр = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	Спр.Владелец = ВладелецХарактеристики;
	Спр.Наименование = НаименованиеХарактеристики;
	Спр.Б_Идентификатор = ИдХарактеристики;	
	Спр.Записать();
	ХарактеристикаСсылка = Спр.Ссылка;
	НайтиСоздатьСвойстваХарактеристики(Спр.Ссылка, СвойстваХарактеристики);
	
	ЗафиксироватьТранзакцию();
	
	ХарактеристикаСсылка = Спр.Ссылка;
	
	НоваяХарактеристика = Истина;
	
КонецПроцедуры

Процедура НайтиСоздатьСвойстваХарактеристики(Характеристика, ТаблицаСвойств)
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		
		Если ПустаяСтрока(СтрокаСвойства.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		НайтиСоздатьСвойствоХарактеристики(Характеристика, СтрокаСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьСвойствоХарактеристики(Характеристика, СтрокаСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование
		|	И НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления
		|	И НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение";
	
	Запрос.УстановитьПараметр("Наименование", СтрокаСвойства.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Свойство = НеОпределено;
	Значение = НеОпределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
			
			Свойство = Выборка.Ссылка;
			
			Значение = ПолучитьЗначениеСвойства(Свойство, СтрокаСвойства.Значение);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Свойство = НеОпределено Тогда
		
		НовоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		НовоеСвойство.Наименование = СтрокаСвойства.Наименование;
		НовоеСвойство.Заголовок 	= СтрокаСвойства.Наименование;
		НовоеСвойство.Виден 		= Истина;
		НовоеСвойство.Доступен 		= Истина;
		НовоеСвойство.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов");
		НовоеСвойство.Записать();
		
		Свойство = НовоеСвойство.Ссылка;
		
	КонецЕсли;
	
	Если Значение = НеОпределено Тогда
		
		НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		НовоеЗначение.Владелец = Свойство;
		НовоеЗначение.Наименование = СтрокаСвойства.Значение;
		НовоеЗначение.Записать();
		
		Значение = НовоеЗначение.Ссылка;
		
	КонецЕсли;
	
	Если ВидНоменклатуры.НаборСвойствХарактеристик.ДополнительныеРеквизиты.Найти(Свойство, "Свойство") = Неопределено Тогда
		
		ЗаписьНабора = ВидНоменклатуры.НаборСвойствХарактеристик.ПолучитьОбъект();
		НовСвойство = ЗаписьНабора.ДополнительныеРеквизиты.Добавить();
		НовСвойство.Свойство = Свойство;
		ЗаписьНабора.Записать();
		
	КонецЕсли;
	
	ХарактеристикаОбъект = Характеристика.ПолучитьОбъект();
	
	СтрокаДопРеквизитов = ХарактеристикаОбъект.ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
	
	Если СтрокаДопРеквизитов = Неопределено Тогда
		СтрокаДопРеквизитов = ХарактеристикаОбъект.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизитов.Свойство = Свойство;
	КонецЕсли;
	
	СтрокаДопРеквизитов.Значение = Значение;
	
	ХарактеристикаОбъект.Записать();
	
КонецПроцедуры

Процедура НайтиСоздатьГруппыРекурсивно(СтрокиДереваГрупп, Обработано, Найдено, Создано)
	
	Для Каждого СтрокаГруппы Из СтрокиДереваГрупп Цикл
		
		Обработано = Обработано + 1;
		
		Если ПустаяСтрока(СтрокаГруппы.Ид) Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель = НеОпределено;
		
		Если СтрокаГруппы.Уровень() = 0 Тогда
			Родитель = ГруппаНоменклатуры;
		Иначе
			РодительВДереве = СтрокаГруппы.Родитель;
			Если НЕ РодительВДереве = НеОпределено Тогда
				Родитель = РодительВДереве.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ГруппаСсылка = ПолучениеОбъектаПоКоду(СтрокаГруппы.Ид, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура"); 
		
		Если ЗначениеЗаполнено(ГруппаСсылка) Тогда
			
			Найдено = Найдено + 1;
			
		Иначе
			
			Группа = Справочники.Номенклатура.СоздатьГруппу();
			Группа.Б_Идентификатор = СтрокаГруппы.Ид;
			Группа.Наименование = СтрокаГруппы.Наименование;
			Группа.Родитель = Родитель;
			
			НачатьТранзакцию();

			Группа.Записать();
			
			ЗафиксироватьТранзакцию();
			ГруппаСсылка = Группа.Ссылка;
			Создано = Создано + 1;
			
		КонецЕсли;
		
		СтрокаГруппы.Ссылка = ГруппаСсылка;
		
		НайтиСоздатьГруппыРекурсивно(СтрокаГруппы.Строки, Обработано, Найдено, Создано)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьНоменклатуру(НоменклатураСсылка, СтрокаТовара, Создана)
	
	НоменклатураСсылка = ПолучениеОбъектаПоКоду(СтрокаТовара.Ид, "СправочникСсылка.Номенклатура", "Справочник.Номенклатура"); 
	
	Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		
		Создана = Истина;
		
		НачатьТранзакцию();
		
		Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		
		Если ПустаяСтрока(СтрокаТовара.Артикул) Тогда
			
			Номенклатура.Артикул = ПолучитьЗначениеСвойстваНоменклатуры(СтрокаТовара.ЗначенияСвойств, "CML2_ARTICLE");
			
		Иначе
			
			Номенклатура.Артикул = СтрокаТовара.Артикул;
			
		КонецЕсли;
		
		Номенклатура.ВидНоменклатуры = ВидНоменклатуры;
		Номенклатура.ТипНоменклатуры = ВидНоменклатуры.ТипНоменклатуры;
		Номенклатура.ИспользованиеХарактеристик = ВидНоменклатуры.ИспользованиеХарактеристик;
		Номенклатура.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Номенклатура.ГруппаДоступа = ВидНоменклатуры.ГруппаДоступа;
		Номенклатура.ВариантОформленияПродажи = ?(ЗначениеЗаполнено(ВидНоменклатуры.ВариантОформленияПродажи), ВидНоменклатуры.ВариантОформленияПродажи, Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		Номенклатура.Описание = СтрокаТовара.Описание;
		Номенклатура.Наименование = СтрокаТовара.Наименование;
		Номенклатура.НаименованиеПолное = СтрокаТовара.Наименование;
		
		Номенклатура.Качество = Перечисления.ГрадацииКачества.Новый;
		УстановитьРодителяНоменклатуры(Номенклатура, СтрокаТовара.Группы);
		
		ЕдиницаИзмеренияCML = НеОпределено;
		СтрокаТовара.БазоваяЕдиница.Свойство("Значение", ЕдиницаИзмеренияCML);
		
		Если ЕдиницаИзмеренияCML = НеОпределено
			ИЛИ ПустаяСтрока(ЕдиницаИзмеренияCML) Тогда
			
			ЕдиницаИзмеренияCML = ПолучитьЗначениеСвойстваНоменклатуры(СтрокаТовара.ЗначенияСвойств, "CML2_BASE_UNIT");
			
		КонецЕсли;
		
		Если ПустаяСтрока(ЕдиницаИзмеренияCML) Тогда
			
			Номенклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
		Иначе
			
			ВыборкаЕдиницыИзмерения = Справочники.УпаковкиЕдиницыИзмерения.Выбрать();
			
			Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл
				
				Если ВыборкаЕдиницыИзмерения.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук И ВыборкаЕдиницыИзмерения.Наименование = ЕдиницаИзмеренияCML тогда
					Номенклатура.ЕдиницаИзмерения = ВыборкаЕдиницыИзмерения.Ссылка;	
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(Номенклатура.ЕдиницаИзмерения) Тогда
				
				Номенклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Номенклатура.Б_Идентификатор = СтрокаТовара.Ид;
		Номенклатура.Записать();
		НоменклатураСсылка = Номенклатура.Ссылка;
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиКартинку(АдресКартинки, Номенклатура)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НоменклатураПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|	И НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НоменклатураПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе)
		|	И НоменклатураПрисоединенныеФайлы.ПутьКФайлу ПОДОБНО &ПутьКФайлу";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Номенклатура);
	Запрос.УстановитьПараметр("ПутьКФайлу", АдресКартинки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
	
	Возврат НеОпределено;

КонецФункции

Процедура СохранитьКартинку(ФайлКартинки, АдресКартинки, РасширениеФайла, Номенклатура)
	
	Попытка
		Картинка = Новый Картинка(ФайлКартинки);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Спр = Справочники.НоменклатураПрисоединенныеФайлы.СоздатьЭлемент();
	Спр.ВладелецФайла = Номенклатура;
	Спр.Наименование = "Картинка с сайта";
	Спр.ПутьКФайлу = АдресКартинки;
	Спр.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	Спр.ФайлХранилище = Новый ХранилищеЗначения(Картинка);
	Спр.Расширение = РасширениеФайла;
	Спр.ДатаСоздания = ТекущаяДата();
	Спр.Записать();
	
	ПрисоединенныйФайл = Спр.Ссылка;
	
	Рег = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	Рег.ПрисоединенныйФайл = ПрисоединенныйФайл;
	Рег.ХранимыйФайл = ПрисоединенныйФайл.ФайлХранилище;
	Рег.Записать();
	
	Если НЕ ЗначениеЗаполнено(Номенклатура.ФайлКартинки) Тогда
		
		НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
		НоменклатураОбъект.ФайлКартинки = ПрисоединенныйФайл;
		НоменклатураОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ПрочиеПроцедурыИФункции

Процедура ПодготовитьТаблицуПредложений()
	
	мСтруктураДанных.ТаблицаПредложений.Колонки.Добавить("ИдХарактеристики", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаПредложения Из мСтруктураДанных.ТаблицаПредложений Цикл
		
		Поз = Найти(СтрокаПредложения.Ид, "#");
		
		Если Поз = 0 Тогда
			
			СтрокаПредложения.ИдХарактеристики = "";
			
		Иначе
			
			СтрокаПредложения.ИдХарактеристики = СокрЛП(Сред(СтрокаПредложения.Ид, Поз + 1));
			СтрокаПредложения.Ид = СокрЛП(Лев(СтрокаПредложения.Ид, Поз - 1));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРодителяНоменклатуры(Номенклатура, Группы)
	
	Если СоздаватьГруппы Тогда
		
		Если Группы.Количество() = 0 Тогда
			
			Номенклатура.Родитель = ГруппаНоменклатуры;
			
		Иначе
			
			ИдГруппы = Группы[0];
			
			Если ПустаяСтрока(ИдГруппы) Тогда
				
				Номенклатура.Родитель = ГруппаНоменклатуры;
				
			Иначе
				
				СтрокаГруппы = мСтруктураДанных.ДеревоГрупп.Строки.Найти(ИдГруппы, "Ид", Истина);
				
				Если СтрокаГруппы = НеОпределено Тогда
					
					Номенклатура.Родитель = ГруппаНоменклатуры;
					
				Иначе
					
					Номенклатура.Родитель = СтрокаГруппы.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Номенклатура.Родитель = ГруппаНоменклатуры;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьКомментарийНовогоОбъекта()
	
	Возврат ШтампВремени() + "Загружен автоматически с """ + Сервер + """";
	
КонецФункции

Функция ПолучитьЗначениеСвойстваНоменклатуры(ЗначенияСвойств, ИдСвойства)
	
	Если ЗначенияСвойств.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаСвойства = ЗначенияСвойств.Найти(ИдСвойства, "Ид");
	
	Если СтрокаСвойства = НеОпределено Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат СтрокаСвойства.Значение;
	
КонецФункции

Функция ШтампВремени()
	Возврат "[" + Формат(ТекущаяДата(), "ДЛФ=DT") + "] ";
КонецФункции

Процедура ДобавитьВПротокол(Протокол, ТекстРаздела, Обработано, Найдено, Создано)
	
	ТекстСообщения = "[[Время]] [ТекстРаздела]: Обработано [Обработано] (Найдено [Найдено], Создано [Создано])";
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Время]", Формат(ТекущаяДата(), "ДЛФ=DT"));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстРаздела]", ТекстРаздела);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Обработано]", Обработано);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Найдено]", Найдено);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Создано]", Создано);
	
	Протокол = Протокол
		+ Символы.ПС
		+ ТекстСообщения;
	
КонецПроцедуры

Функция РасширениеФайла(ИмяФайла)
	
	Строка = СтрЗаменить(ИмяФайла, ".", Символы.ПС);
	
	Всего = СтрЧислоСтрок(Строка);
	
	Если Всего < 2 Тогда
		Возврат "";
	КонецЕсли;
		
	Возврат СтрПолучитьСтроку(Строка, Всего);
	
КонецФункции

Функция ПолучитьЗначениеСвойства(Свойство, Значение)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Наименование = &Наименование
	|	И ЗначенияСвойствОбъектов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Наименование", Значение);
	Запрос.УстановитьПараметр("Владелец", Свойство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
	
	Возврат НеОпределено;

КонецФункции

Функция ДобавитьЭлементКПоследовательности(Знач ПоследовательностьЭлементов, Знач ИмяУзла)
	
	ИсключатьИзПоследовательности = Новый Массив;
	ИсключатьИзПоследовательности.Добавить("КоммерческаяИнформация");
	
	Если ИсключатьИзПоследовательности.Найти(ИмяУзла) = Неопределено Тогда
		
		Если НЕ ПоследовательностьЭлементов = "" Тогда
			ПоследовательностьЭлементов = ПоследовательностьЭлементов + ".";
		КонецЕсли;
		ПоследовательностьЭлементов = ПоследовательностьЭлементов + ИмяУзла;
		
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция УдалитьПоследнийЭлементИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока = СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ПоследовательностьЭлементов = "";
	
	Если КоличествоЭлементов > 0 Тогда
		КоличествоЭлементов = КоличествоЭлементов - 1;
		Для Счетчик = 1 По КоличествоЭлементов Цикл
			ПоследовательностьЭлементов	= ПоследовательностьЭлементов + "." + СтрПолучитьСтроку(ПромСтрока, Счетчик);
		КонецЦикла;
		ПоследовательностьЭлементов = Прав(ПоследовательностьЭлементов, СтрДлина(ПоследовательностьЭлементов) - 1);
	КонецЕсли;
	
	Возврат ПоследовательностьЭлементов;
	
КонецФункции

Функция ПолучитьИмяЭлементаИзПоследовательности(Знач ПоследовательностьЭлементов)
	
	ПромСтрока 	= СтрЗаменить(ПоследовательностьЭлементов, ".", Символы.ПС);
	КоличествоЭлементов = СтрЧислоСтрок(ПромСтрока);
	
	ИмяПоследнегоЭлемента = "";
	Если КоличествоЭлементов > 0 Тогда
		ИмяПоследнегоЭлемента = СтрПолучитьСтроку(ПромСтрока, КоличествоЭлементов);
	КонецЕсли;
	
	Возврат ИмяПоследнегоЭлемента;
	
КонецФункции

Процедура ДобавитьОписаниеОшибки(ОписаниеОшибки, Дополнение)
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ОписаниеОшибки = Дополнение;
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + Дополнение;
	КонецЕсли;
КонецПроцедуры

Функция ПолучениеОбъектаПоКоду(Код, ТипОбъекта, ИмяОбъекта = "") Экспорт
	
	Попытка
		Результат = XMLЗначение(Тип(ТипОбъекта), Код);
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Если Результат = Неопределено и ИмяОбъекта <> "" тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка
		|ИЗ
		|	" + ИмяОбъекта + " КАК Справочник
		|ГДЕ
		|	Справочник.Б_Идентификатор = &Идентификатор";
		запрос.УстановитьПараметр("Идентификатор",Код);
		тзнВрем = запрос.Выполнить().Выгрузить();
		Если тзнВрем.Количество() > 0 тогда
			Результат = тзнВрем[0].Ссылка; 	   
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено тогда
		Результат = ?(СокрЛП(Результат.ВерсияДанных) = "", Неопределено, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

мНачалоXML = "<?xml";