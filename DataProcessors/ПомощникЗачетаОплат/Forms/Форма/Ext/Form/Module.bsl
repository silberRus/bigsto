&НаКлиенте
Перем ПараметрыОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Параметры.Документ;
	
	КомиссионноеВознаграждение = Параметры.КомиссионноеВознаграждение;
	ЗеркальныйЗачетОплатыМеждуОрганизациями = Параметры.ЗеркальныйЗачетОплатыМеждуОрганизациями;
	
	ЗаполнитьРасшифровкуПлатежа();
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ТекстИсключения = НСтр("ru='Не предусмотрено непосредственное открытие формы обработки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	ПолучитьРеквизитыРасчетовСПартнером();
	
	Если (Не ЕстьРасчетыСКлиентами И Не ЕстьРасчетыСПоставщиками)
	 ИЛИ (КомиссионноеВознаграждение И СуммаВзаиморасчетов = 0)
	 ИЛИ (ПоЗаказу И РасчетыПоЗаказам) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Зачет оплаты не требуется использовать для документа %1'"),
			Документ);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"));
	ТипыПлатежныхДокументов.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	УправлениеЭлементамиФормы();
	
	Если Не ПраваПользователяПовтИсп.ЗачетОплаты() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьОтборПоДоговорам();
	
	СформироватьИнформационнуюНадписьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ДанныеИзменены", Истина);
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Авансы");
	МассивТаблиц.Добавить("Оплаты");
	МассивТаблиц.Добавить("Зачтено");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		
		МассивСтрок = ЭтаФорма[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
		
			Отказ = Истина;
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
				НСтр("ru = 'Данные зачета оплаты были изменены. Сохранить изменения?'"),
				РежимДиалогаВопрос.ДаНетОтмена);
				
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатЗачетаОплатыИЗакрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		РазблокироватьДокументыДляРедактирования();
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ АвансыРассчитаны Тогда
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
	КонецЕсли;
	
	УстановитьСтраницуАвансов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоВсемДоговорамПриИзменении(Элемент)
	
	УстановитьОтборПоДоговорам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОплатыДокумент" Тогда
		
		СтрокаТаблицы = Элементы.Оплаты.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.Документ);
		КонецЕсли;
		
	Иначе
		СтрокаТаблицы = Элементы.Оплаты.ТекущаяСтрока;
		МассивСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы);
		ЗачестьПлатежДляВыбранныхСтрок(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "АвансыЗаказ" Тогда
		
		СтрокаТаблицы = Элементы.Авансы.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.Заказ);
		КонецЕсли;
		
	Иначе
		СтрокаТаблицы = Элементы.Авансы.ТекущаяСтрока;
		МассивСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицы);
		ЗачестьАвансДляВыбранныхСтрок(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗачтено

&НаКлиенте
Процедура ЗачтеноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Зачтено.ТекущиеДанные;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		Если Поле.Имя = "ЗачтеноЗаказ" Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
				ПоказатьЗначение(Неопределено, СтрокаТаблицы.Документ);
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				ПоказатьЗначение(Неопределено, СтрокаТаблицы.Заказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачтеноПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Зачтено.ТекущиеДанные;
	СуммаПередРедактированием = ТекущиеДанные.СуммаЗачтено;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗачтеноПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

		ТекущиеДанные = Элементы.Зачтено.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачтеноПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Зачтено.ТекущиеДанные;
	Если ТекущиеДанные.СуммаЗачтено <> СуммаПередРедактированием Тогда
		
		ОчиститьСообщения();
		
		Отказ = Ложь;
		
		ИзменениеСуммы = СуммаПередРедактированием - ТекущиеДанные.СуммаЗачтено;
		
		Если ИзменениеСуммы < 0 Тогда
			ТекущиеДанные.СуммаЗачтено = СуммаПередРедактированием;
			ТекстПредупреждения = НСтр("ru='Зачтенная сумма может быть только уменьшена'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицы = Элементы.Зачтено.ТекущаяСтрока;
		СоответствиеСписания = Новый Соответствие;
		СоответствиеСписания.Вставить(СтрокаТаблицы, ИзменениеСуммы);
		ОтменитьЗачетНаСервере(СоответствиеСписания, , Отказ);
		
		Если Отказ Тогда
			ТекущиеДанные.СуммаЗачтено = СуммаПередРедактированием;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьПлатеж(Команда)
	
	МассивСтрок = Элементы.Оплаты.ВыделенныеСтроки;
	Если МассивСтрок.Количество() > 0 Тогда
		ЗачестьПлатежДляВыбранныхСтрок(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьАванс(Команда)
	
	МассивСтрок = Элементы.Авансы.ВыделенныеСтроки;
	Если МассивСтрок.Количество() > 0 Тогда
		ЗачестьАвансДляВыбранныхСтрок(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗачет(Команда)
	
	МассивСтрок = Элементы.Зачтено.ВыделенныеСтроки;
	Если МассивСтрок.Количество() > 0 Тогда
	
		ОчиститьСообщения();
		
		СоответствиеСписания = Новый Соответствие;
		Для Каждого Строка Из МассивСтрок Цикл
			СоответствиеСписания.Вставить(Строка, 0);
		КонецЦикла;
		
		ОтменитьЗачетНаСервере(СоответствиеСписания, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьПревышение(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ИсправитьПревышениеНаСервере(Отказ);
	
	Если Не Отказ И Превышение > 0 Тогда
		ТекстПредупреждения = НСтр("ru='Не удалось полностью исправить превышение. Возможно документы не доступны для редактирования.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуИЗакрыть(Команда)
	
	СохранитьРезультатЗачетаОплатыИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Показать(Команда)
	
	Элементы.ГруппаУправлениеПодвалом.ТекущаяСтраница = Элементы.СтраницаСкрытьПодвал;
	Элементы.ГруппаЗачтено.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Скрыть(Команда)
	
	Элементы.ГруппаУправлениеПодвалом.ТекущаяСтраница = Элементы.СтраницаПоказатьПодвал;
	Элементы.ГруппаЗачтено.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗачтеноСуммаЗачтено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.ДоступноРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Оплаты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Оплаты.ДоступноРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Зачтено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.ДоступноРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОплатыПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Оплаты.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Авансы.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыЗаказ.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Авансы.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРасчетов");
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Авансы.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Договор");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗачтеноДокумент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Будет создан документ ""Взаимозачет задолженности"">'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеДокументы);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АвансыДокумент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Авансы.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

		//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗачтеноЗаказ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.Документ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.Заказ");

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗачтеноСуммаРегл.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.СуммаРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Будет рассчитана автоматически'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗачтеноСуммаУпр.Имя);

	ОтборЭлемента =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Зачтено.СуммаУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Будет рассчитана автоматически'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	НесколькоОрганизаций  = ДоступныеОрганизации.Количество() > 1;
	
	Элементы.ОплатыОрганизация.Видимость  = НесколькоОрганизаций;
	Элементы.АвансыОрганизация.Видимость  = НесколькоОрганизаций;
	Элементы.ЗачтеноОрганизация.Видимость = НесколькоОрганизаций;
	
	Элементы.ОплатыПартнер.Видимость = (Партнер <> Справочники.Партнеры.НашеПредприятие);
	
	Элементы.АвансыДоговор.Видимость = ИспользоватьДоговоры;
	Элементы.ПоВсемДоговорам.Видимость = ИспользоватьДоговоры;
	
	Если ИспользоватьДоговоры Тогда
		Элементы.ПояснениеКТаблицеОплаты.Заголовок = НСтр("ru = 'Список нераспределенных платежей и документов оплаты, отнесенных на выбранный договор. Сумма будет распределена на зачитываемый объект расчетов.'");
	Иначе
		Элементы.ПояснениеКТаблицеОплаты.Заголовок = НСтр("ru = 'Список нераспределенных платежей и документов оплаты. Сумма будет распределена на зачитываемый объект расчетов.'");
	КонецЕсли;
	
	Если ИспользоватьДоговоры Тогда
		Элементы.ПояснениеКТаблицеАвансы.Заголовок = НСтр("ru = 'Остатки авансов по договорам контрагента. Для зачета/переноса аванса будет создан документ ""Взаимозачет задолженности"".'");
	Иначе
		Элементы.ПояснениеКТаблицеАвансы.Заголовок = НСтр("ru = 'Остатки авансов. Для зачета/переноса аванса будет создан документ ""Взаимозачет задолженности"".'");
	КонецЕсли;
	
	Элементы.ОплатыДоступноКЗачету.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Доступно (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	Элементы.АвансыДоступноКЗачету.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Доступно (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	Элементы.ЗачтеноСуммаЗачтено.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Зачтено (%1)'"),
		Строка(ВалютаВзаиморасчетов));
	
	Если РасчетыПоДоговорам Тогда
		Заголовок = НСтр("ru = 'Зачет оплат по договору:'") + " " + Строка(Договор);
	Иначе
		Заголовок = НСтр("ru = 'Зачет оплат по документу:'") + " " + Строка(Документ);
	КонецЕсли;
	
	Элементы.ЗачтеноСуммаРегл.Видимость = ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.ЗачтеноСуммаУпр.Видимость  = ВалютаВзаиморасчетов <> Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.АвансыСуммаРегл.Видимость  = ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.АвансыСуммаУпр.Видимость   = ВалютаВзаиморасчетов <> Константы.ВалютаУправленческогоУчета.Получить();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыРасчетовСПартнерами

&НаСервере
Процедура ЗаполнитьТаблицуПоРасчетамСПартнерами()
	
	Оплаты.Очистить();
	Авансы.Очистить();
	Зачтено.Очистить();
	АвансыРассчитаны = Ложь;
	
	Запрос = ИнициализироватьЗапросПоРасчетам();
	
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстЗапроса = ТекстЗапросаПоРасчетамСКлиентами();
	КонецЕсли;
	
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = ТекстЗапросаПоРасчетамСПоставщиками();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоЗапросов = Результат.ВГраница();
	
	//Оплаты
	ВыборкаОплаты = Результат[КоличествоЗапросов - 2].Выбрать();
	Пока ВыборкаОплаты.Следующий() Цикл
		
		НоваяСтрока = Оплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОплаты);
		
		НоваяСтрока.ВерсияДанных = ВерсияДанныхДокумента(ВыборкаОплаты.Документ);
		
		Если ВалютаВзаиморасчетов <> ВыборкаОплаты.ВалютаВзаиморасчетов Тогда
			НоваяСтрока.ДоступноКЗачету = ПересчитатьСуммуВВалютуВзаиморасчетов(
				ВыборкаОплаты.СуммаВВалютеПлатежа, ВыборкаОплаты.Валюта, ВыборкаОплаты.Дата);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОплат = Оплаты.Выгрузить();
	ТаблицаОплат.Свернуть("Организация, Документ, ВерсияДанных, СуммаДокумента, Валюта, Партнер, ДанныеИзменены, Дата, ДоступноРедактирование, РасшифровкаОбъектаРасчетов, Заказ", "ДоступноКЗачету, СуммаВВалютеПлатежа");
	Оплаты.Загрузить(ТаблицаОплат);
	
	// Зачтено
	ТаблицаЗачтено = Результат[КоличествоЗапросов].Выгрузить();
	ТаблицаЗачтено.Свернуть("Документ, Организация, Контрагент, Партнер, Дата, СуммаДокумента, Валюта, ВалютаВзаиморасчетов, Заказ,
		|Договор, ДоступноРедактирование, РасшифровкаОбъектаРасчетов, Порядок"
		,"СуммаЗачтено, СуммаВВалютеПлатежа, СуммаРегл, СуммаУпр");
		
	Для Каждого СтрокаЗачтено Из ТаблицаЗачтено Цикл
		
		НоваяСтрока = Зачтено.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗачтено);
		
		НоваяСтрока.ВерсияДанных = ВерсияДанныхДокумента(СтрокаЗачтено.Документ);
		
	КонецЦикла;
	
	// Авансы
	КлючиАналитики.ЗагрузитьЗначения(Результат[КоличествоЗапросов - 1].Выгрузить().ВыгрузитьКолонку("КлючАналитики"));
	
	АвансыРассчитаны = НЕ ЕстьЗаданияКРаспределениюВзаиморасчетов(ЕстьРасчетыСКлиентами, КлючиАналитики);
	
	ЗаполнитьТаблицуАвансов(Запрос);
	
	РассчитатьСуммуЗачета();
	РасчитатьКоличествоСтрок();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуКОплате()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация = &Организация
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И АналитикаПоПартнерам.Договор = &Договор
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщиками.КОплатеРасход, 0)) КАК КОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,Регистратор,
	|		&ЕстьРасчетыСПоставщиками
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказПоставщику = &ОбъектРасчетов
	|	) КАК РасчетыСПоставщиками
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСПоставщиками.КОплатеРасход, 0)) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)) КАК КОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,Регистратор,
	|		&ЕстьРасчетыСКлиентами
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента = &ОбъектРасчетов
	|	) КАК РасчетыСКлиентами
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)) > 0
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") И Договор = Неопределено Тогда
		Запрос.УстановитьПараметр("Договор", Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка());
	ИначеЕсли Договор = Неопределено Тогда
		Запрос.УстановитьПараметр("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
	Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		КОплате = Выборка.КОплате;
	Иначе
		КОплате = 0;
	КонецЕсли;
	
	Возврат КОплате;
	
КонецФункции // ПолучитьСуммуКОплате()

&НаСервере
Процедура ПолучитьРеквизитыРасчетовСПартнером()
	
	ИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ)).Имя;
	
	Попытка
		Если ОбщегоНазначения.ВидОбъектаПоСсылке(Документ) = "Документ" Тогда
			СтруктураРеквизитов = Документы[ИмяДокумента].РеквизитыДокумента(Документ);
		ИначеЕсли ОбщегоНазначения.ВидОбъектаПоСсылке(Документ) = "Справочник" Тогда
			СтруктураРеквизитов = Справочники[ИмяДокумента].РеквизитыОбъекта(Документ);
		КонецЕсли;
	Исключение
		СтруктураРеквизитов = Неопределено;
	КонецПопытки;
	
	Если СтруктураРеквизитов <> Неопределено Тогда
		
		ДатаДокумента = СтруктураРеквизитов.Дата;
		
		Если СтруктураРеквизитов.Свойство("РасчетыЧерезОтдельногоКонтрагента") 
				И СтруктураРеквизитов.РасчетыЧерезОтдельногоКонтрагента Тогда
			РасчетыЧерезОтдельногоКонтрагента = Истина;
		Иначе
			РасчетыЧерезОтдельногоКонтрагента = Ложь;
		КонецЕсли;
		
		Если ЗеркальныйЗачетОплатыМеждуОрганизациями И НЕ РасчетыЧерезОтдельногоКонтрагента Тогда
			Организация = СтруктураРеквизитов.Контрагент;
			Контрагент = СтруктураРеквизитов.Организация;
		ИначеЕсли ЗеркальныйЗачетОплатыМеждуОрганизациями И РасчетыЧерезОтдельногоКонтрагента Тогда
			Контрагент = СтруктураРеквизитов.Контрагент;
			Организация = СтруктураРеквизитов.ОрганизацияОтправитель;
		Иначе
			Организация = СтруктураРеквизитов.Организация;
			Контрагент = СтруктураРеквизитов.Контрагент;
		КонецЕсли;
		Партнер = СтруктураРеквизитов.Партнер;
		ВалютаВзаиморасчетов = СтруктураРеквизитов.ВалютаВзаиморасчетов;
		Валюта = ?(СтруктураРеквизитов.Свойство("Валюта"),СтруктураРеквизитов.Валюта,Справочники.Валюты.ПустаяСсылка());
		
		ХозяйственнаяОперация = СтруктураРеквизитов.ХозяйственнаяОперация;
		
		Если СтруктураРеквизитов.Свойство("ПоЗаказу") Тогда
			ПоЗаказу = СтруктураРеквизитов.ПоЗаказу;
		КонецЕсли;
		Если СтруктураРеквизитов.Свойство("Договор") Тогда
			Договор = СтруктураРеквизитов.Договор;
		КонецЕсли;
		Если СтруктураРеквизитов.Свойство("НаправлениеДеятельности") Тогда
			НаправлениеДеятельности = СтруктураРеквизитов.НаправлениеДеятельности;
		КонецЕсли;
		Если СтруктураРеквизитов.Свойство("ПорядокРасчетов") Тогда
			Если СтруктураРеквизитов.Свойство("РасчетыЧерезОтдельногоКонтрагента") 
				И СтруктураРеквизитов.РасчетыЧерезОтдельногоКонтрагента Тогда
				Если ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
					РасчетыПоДоговорам = ЗначениеЗаполнено(СтруктураРеквизитов.ДоговорПродажи) 
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитов.ДоговорПродажи,"ПорядокРасчетов") 
							= Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
					Договор = СтруктураРеквизитов.ДоговорПродажи;
				Иначе
					РасчетыПоДоговорам = ЗначениеЗаполнено(СтруктураРеквизитов.ДоговорПокупки)
						И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитов.ДоговорПокупки,"ПорядокРасчетов") 
							= Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
					Договор = СтруктураРеквизитов.ДоговорПокупки;
				КонецЕсли;
				РасчетыПоЗаказам = Ложь;
			Иначе				РасчетыПоДоговорам = СтруктураРеквизитов.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
				РасчетыПоЗаказам   = СтруктураРеквизитов.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектРасчетов = ?(РасчетыПоДоговорам, Договор, Документ);
		
		МассивРасчетыСПоставщиками = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРасчетыСПоставщиками, ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика));
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРасчетыСПоставщиками, ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРасчетыСПоставщиками, ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС));
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
		Если Не ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
			МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
		КонецЕсли;
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика);
		Если Не КомиссионноеВознаграждение Тогда
			МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитенту);
			Если Не ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
				МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
			КонецЕсли;
		Иначе
			МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
			Если ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
				МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
			КонецЕсли;
		КонецЕсли;
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
		МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
		ЕстьРасчетыСПоставщиками = МассивРасчетыСПоставщиками.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		МассивРасчетыСКлиентами = Новый Массив;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании);
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
		Если Не КомиссионноеВознаграждение Тогда
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
			Если ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
				МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
			КонецЕсли;
		Иначе
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитенту);
			Если Не ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
				МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
			КонецЕсли;
		КонецЕсли;
		МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов);
		Если ЗеркальныйЗачетОплатыМеждуОрганизациями Тогда
			МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
		КонецЕсли;
		ЕстьРасчетыСКлиентами = МассивРасчетыСКлиентами.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		МассивРасчетыМеждуОрганизациями = Новый Массив;
		МассивРасчетыМеждуОрганизациями.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
		МассивРасчетыМеждуОрганизациями.Добавить(Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями);
		ЕстьРасчетыМеждуОрганизациями = МассивРасчетыМеждуОрганизациями.Найти(ХозяйственнаяОперация) <> Неопределено;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями Тогда
			Если КомиссионноеВознаграждение Тогда
				СуммаВзаиморасчетов = СтруктураРеквизитов.СуммаВознаграждения;
			Иначе
				СуммаВзаиморасчетов = СтруктураРеквизитов.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			СуммаВзаиморасчетов = ПолучитьСуммуКОплате();
		КонецЕсли;
			
		МассивОрганизаций = Новый Массив;
		ГоловнаяОрганизация = Организация;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") 
			И (ЕстьРасчетыСКлиентами Или ЕстьРасчетыСПоставщиками) Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.ГоловнаяОрганизация КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка = &Организация
			|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
			|	И Организации.ОбособленноеПодразделение");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если МассивОрганизаций.Количество() > 0 Тогда
				ГоловнаяОрганизация = МассивОрганизаций[0];
			КонецЕсли;
			
		КонецЕсли;
		
		МассивОрганизаций.Добавить(Организация);
		ДоступныеОрганизации.ЗагрузитьЗначения(МассивОрганизаций);
		
		МассивПартнеров = Новый Массив;
		Если Партнер <> Справочники.Партнеры.НеизвестныйПартнер Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	&Партнер КАК Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеРегистра.Родитель КАК Партнер
			|ИЗ
			|	РегистрСведений.ИерархияПартнеров КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.Партнер = &Партнер");
			
			Запрос.УстановитьПараметр("Партнер", Партнер);
			МассивПартнеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
			
		КонецЕсли;
		
		МассивПартнеров.Добавить(Справочники.Партнеры.НеизвестныйПартнер);
		ДоступныеПартнеры.ЗагрузитьЗначения(МассивПартнеров);
		
		Если (ЕстьРасчетыСКлиентами И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
			Или (ЕстьРасчетыСПоставщиками И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками"))) Тогда
			ИспользоватьДоговоры = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьЗапросПоРасчетам()
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",                  ДоступныеОрганизации);
	Запрос.УстановитьПараметр("Партнер",                      ДоступныеПартнеры);
	Запрос.УстановитьПараметр("Контрагент",                   Контрагент);
	Запрос.УстановитьПараметр("Договор",                      Договор);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",      НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Документ",                     Документ);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",         ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОбъектРасчетов",               ОбъектРасчетов);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",        ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаУПоставщика",ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика));
	Запрос.УстановитьПараметр("ДатаДокумента",                НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ТекущийМесяц",                 НачалоМесяца(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТипыПлатежныхДокументов",      ТипыПлатежныхДокументов);
	Запрос.УстановитьПараметр("РасшифровкаПлатежа",           РасшифровкаПлатежа.Выгрузить());
	Запрос.УстановитьПараметр("ТипыНакладных",                Метаданные.ОпределяемыеТипы.ОбъектРасчетовНакладная.Тип.Типы());
	Запрос.УстановитьПараметр("ВалютаРеглУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЭтоУправленческаяОрганизация = (Организация = Справочники.Организации.УправленческаяОрганизация);
	Запрос.УстановитьПараметр("ЭтоУправленческаяОрганизация", ЭтоУправленческаяОрганизация);
	
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстВременныеТаблицы = ТекстВременныеТаблицыПоРасчетамСКлиентами();
	КонецЕсли;
	
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстВременныеТаблицы = ТекстВременныеТаблицыПоРасчетамСПоставщиками();;
	КонецЕсли;
	
	Запрос.Текст = ТекстВременныеТаблицы;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуАвансов(ЗНАЧ Запрос = Неопределено)
	
	Авансы.Очистить();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Запрос = Неопределено Тогда
		Запрос = ИнициализироватьЗапросПоРасчетам();
	КонецЕсли;
	
	Если ЕстьРасчетыСПоставщиками Тогда
		Запрос.Текст = ТекстЗапросаАвансыПоРасчетамСПоставщиками();
	КонецЕсли;
	
	Если ЕстьРасчетыСКлиентами Тогда
		Запрос.Текст = ТекстЗапросаАвансыПоРасчетамСКлиентами();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаАвансы = Результат.Выбрать();
	Пока ВыборкаАвансы.Следующий() Цикл
		
		НоваяСтрока = Авансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАвансы);
		НоваяСтрока.СуммаВВалютеПлатежа = НоваяСтрока.ДоступноКЗачету;
		
		Если ВалютаВзаиморасчетов <> ВыборкаАвансы.ВалютаВзаиморасчетов Тогда
			Если ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
				НоваяСтрока.ДоступноКЗачету = ВыборкаАвансы.СуммаРегл;
			ИначеЕсли ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
				НоваяСтрока.ДоступноКЗачету = ВыборкаАвансы.СуммаУпр;
			Иначе
				НоваяСтрока.ДоступноКЗачету = ПересчитатьСуммуВВалютуВзаиморасчетов(
					ВыборкаАвансы.ДоступноКЗачету, ВыборкаАвансы.ВалютаВзаиморасчетов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтраницуАвансов();
	
КонецПроцедуры

#Область РасчетыСПоставщиками

&НаСервере
Функция ТекстВременныеТаблицыПоРасчетамСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	АналитикаПоПартнерам.Договор КАК Договор
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер В (&Партнер)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерамРегл
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И АналитикаПоПартнерам.Партнер В (&Партнер)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщиками.ЗаказПоставщику                   КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта                            КАК Валюта,
	|	РасчетыСПоставщиками.СуммаОстаток                      КАК СуммаАванса
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|			И ЗаказПоставщику <> &ОбъектРасчетов
	|	) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказПоставщику,
	|	Валюта
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщиками.ЗаказПоставщику                   КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта                            КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаЗачтено
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,, Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаПриход > 0
	|		ИЛИ (РасчетыСПоставщиками.Регистратор = &ОбъектРасчетов
	|			И НЕ РасчетыСПоставщиками.ЗаказПоставщику = &ОбъектРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказПоставщику,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасшифровкаПлатежаНакладная.Партнер     КАК Партнер,
	|	ТаблицаРасшифровкаПлатежаНакладная.Заказ       КАК Заказ,
	|	ТаблицаРасшифровкаПлатежаНакладная.Контрагент  КАК Контрагент,
	|	ТаблицаРасшифровкаПлатежаНакладная.Договор     КАК Договор,
	|	ТаблицаРасшифровкаПлатежаНакладная.Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежаНакладная.Валюта      КАК Валюта,
	|	ТаблицаРасшифровкаПлатежаНакладная.Сумма       КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежаНакладная
	|ИЗ &РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежаНакладная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчеты.Партнер КАК Партнер,
	|	ТаблицаРасчеты.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаРасчеты.Валюта КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаОтбораДокументов
	|ИЗ 
	|	(ВЫБРАТЬ
	|		ТаблицаОстатков.Партнер,
	|		ТаблицаОстатков.ЗаказПоставщику,
	|		ТаблицаОстатков.Валюта
	|	ИЗ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗачтено.Партнер,
	|		ТаблицаЗачтено.ЗаказПоставщику,
	|		ТаблицаЗачтено.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРасшифровкаПлатежаНакладная.Партнер,
	|		ТаблицаРасшифровкаПлатежаНакладная.Заказ,
	|		ТаблицаРасшифровкаПлатежаНакладная.Валюта
	|	
	|	) КАК ТаблицаРасчеты
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ЗаказПоставщику,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаДолга
	|
	|ПОМЕСТИТЬ ТаблицаОстатковРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
	|		&ХозяйственнаяОперация В (&ХозОперацииЗакупкаУПоставщика)
	|		И &ЭтоУправленческаяОрганизация
	|		И ЗаказПоставщику ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерамРегл КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаОстаток < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказПоставщику)
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказПоставщику)
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И (ДанныеДокумента.ОрганизацияПолучатель = &Контрагент
	|		ИЛИ ДанныеДокумента.КассаПолучатель.Владелец = &Контрагент)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказПоставщику)
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|	)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказПоставщику)
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|	И ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.БанковскийСчетПолучатель.Владелец = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|		И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Поставщик = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровПоставщику.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	&ЭтоУправленческаяОрганизация
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|		И (ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|			ИЛИ НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
	|ГДЕ
	|	ДанныеДокумента.Организация В(&Организация)
	|	И (ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.Контрагент = &Контрагент
	|		ИЛИ НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента И ДанныеДокумента.ОрганизацияПолучатель = &Контрагент)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                         КАК Ссылка,
	|	ДанныеДокумента.Дата                           КАК Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)         КАК СуммаДокумента
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = ТаблицаОтбораДокументов.ЗаказПоставщику
	|ГДЕ
	|	ДанныеДокумента.Организация В(&Организация)
	|	И ДанныеДокумента.ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам)
	|		)
	|	И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL 
	|		ИЛИ (ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = НЕОПРЕДЕЛЕНО
	|			И ТаблицаРасшифровкаПлатежа.ДокументРасчетов=ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                         КАК Ссылка,
	|	ДанныеДокумента.Дата                           КАК Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)         КАК СуммаДокумента
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыМеждуОрганизациями КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО 
	|		ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = ТаблицаОтбораДокументов.ЗаказПоставщику
	|		И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|ГДЕ
	|	ДанныеДокумента.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам)
	|	И ДанныеДокумента.Организация  = &Контрагент
	|	И ДанныеДокумента.ОрганизацияПолучатель В(&Организация)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                   КАК Ссылка,
	|	ДанныеДокумента.Дата                     КАК Дата,
	|	&ВалютаРеглУчета                         КАК Валюта,
	|	ДанныеДокумента.СуммаРегл                КАК СуммаДокумента
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказПоставщику
	|		И ТаблицаРасшифровкаПлатежа.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.КонтрагентДебитор = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказПоставщику ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Оплаты (Нераспределенные платежи).
	// (1) Документы оплаты в рамках выбранного договора после даты документа, с расчетами не по договорам.
	// в них можно заменить некорректный объект расчетов на корректный.
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ЗаказПоставщику                                 КАК Заказ,
	|	ТаблицаОстатков.Валюта                                          КАК ВалютаВзаиморасчетов,
	|	РасчетыСПоставщиками.Регистратор                                КАК Документ,
	
	|	Аналитика.КлючАналитики                                         КАК КлючАналитики,
	|	Аналитика.Организация                                           КАК Организация,
	|	Аналитика.Партнер                                               КАК Партнер,
	|	Аналитика.Контрагент                                            КАК Контрагент,
	
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))              КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                   КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСПоставщиками.Валюта) КАК Валюта,
	
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов,
	|		РасчетыСПоставщиками.СуммаПриход)                           КАК ДоступноКЗачету,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа,
	|		РасчетыСПоставщиками.СуммаПриход)                           КАК СуммаВВалютеПлатежа,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл,
	|		РасчетыСПоставщиками.СуммаПриход)                           КАК СуммаРегл,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплаты,
	|		РасчетыСПоставщиками.СуммаПриход)                           КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                           КАК ДоступноРедактирование,
	|	ЛОЖЬ                                                            КАК РасшифровкаОбъектаРасчетов
	|
	|ПОМЕСТИТЬ ТаблицаКРаспределению
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(&ДатаДокумента,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				КлючАналитики.Договор = &Договор
	|			)
	|		И (ЗаказПоставщику, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаОстатков.ЗаказПоставщику,
	|				ТаблицаОстатков.Валюта
	|			ИЗ
	|				ТаблицаОстатков КАК ТаблицаОстатков
	|			ГДЕ
	|				ТаблицаОстатков.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			)
	|	) КАК РасчетыСПоставщиками
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаОстатков.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Валюта = ТаблицаОстатков.Валюта
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСПоставщиками.Регистратор = ТаблицаДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		(ДвиженияРасчеты.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)))
	|		И (ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0)
	|		И РасчетыСПоставщиками.Регистратор = ДвиженияРасчеты.Регистратор
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|	
	|ГДЕ
	|	РасчетыСПоставщиками.СуммаПриход > 0
	|	И РасчетыСПоставщиками.Регистратор <> &Документ
	|	И НЕ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|	И ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг 
	|				И ТаблицаДокументов.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) НЕ В (&ТипыПлатежныхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// (2) Документы оплаты с пустым объектом расчетов или по объекту расчетов- платежке.
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику                            КАК Заказ,
	|	РасчетыСПоставщиками.Валюта                                     КАК ВалютаВзаиморасчетов,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСПоставщиками.ЗаказПоставщику 
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор
	|	КОНЕЦ                                                           КАК Документ,
	|	Аналитика.КлючАналитики                                         КАК КлючАналитики,
	|	Аналитика.Организация                                           КАК Организация,
	|	Аналитика.Партнер                                               КАК Партнер,
	|	Аналитика.Контрагент                                            КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))              КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                   КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСПоставщиками.Валюта) КАК Валюта,
	
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику = НЕОПРЕДЕЛЕНО 
	|			ТОГДА  ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСПоставщиками.СуммаПриход)
	|		ИНАЧЕ РасчетыСПоставщиками.СуммаПриход - РасчетыСПоставщиками.СуммаРасход
	|	КОНЕЦ                                                           КАК ДоступноКЗачету,
	
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа, РасчетыСПоставщиками.СуммаПриход)
	|		КОГДА РасчетыСПоставщиками.СуммаПриход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСПоставщиками.СуммаПриход - РасчетыСПоставщиками.СуммаРасход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа, РасчетыСПоставщиками.СуммаПриход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСПоставщиками.СуммаПриход))
	|	КОНЕЦ                                                         КАК СуммаВВалютеПлатежа,
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСПоставщиками.СуммаПриход)
	|		КОГДА РасчетыСПоставщиками.СуммаПриход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСПоставщиками.СуммаПриход - РасчетыСПоставщиками.СуммаРасход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСПоставщиками.СуммаПриход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСПоставщиками.СуммаПриход))
	|	КОНЕЦ                                                         КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплаты, РасчетыСПоставщиками.СуммаПриход)
	|		КОГДА РасчетыСПоставщиками.СуммаПриход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСПоставщиками.СуммаПриход - РасчетыСПоставщиками.СуммаРасход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСПоставщиками.СуммаПриход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСПоставщиками.СуммаПриход))
	|	КОНЕЦ                                                         КАК СуммаУпр,
	
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                           КАК ДоступноРедактирование,
	|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов) 
	|		И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(3000,1,1)), ДЕНЬ) < &ДатаДокумента 
	|		И ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных)                        КАК РасшифровкаОбъектаРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСПоставщиками
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|				ТОГДА РасчетыСПоставщиками.ЗаказПоставщику 
	|			ИНАЧЕ РасчетыСПоставщиками.Регистратор
	|		КОНЕЦ = ТаблицаДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		(ДвиженияРасчеты.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)))
	|		И (ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0)
	|		И ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов) 
	|				ТОГДА РасчетыСПоставщиками.ЗаказПоставщику = ДвиженияРасчеты.Регистратор
	|			ИНАЧЕ РасчетыСПоставщиками.Регистратор = ДвиженияРасчеты.Регистратор
	|		КОНЕЦ
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатковРеглУчет КАК ТаблицаОстатковРеглУчет
	|	ПО
	|		РасчетыСПоставщиками.Регистратор = ТаблицаОстатковРеглУчет.ЗаказПоставщику
	|	
	|ГДЕ
	|	ТаблицаОстатковРеглУчет.СуммаДолга ЕСТЬ NULL
	|	И (ВЫБОР
	|			КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг 
	|					И ТаблицаДокументов.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ)
	|	И ((РасчетыСПоставщиками.Регистратор <> &Документ И РасчетыСПоставщиками.ЗаказПоставщику = НЕОПРЕДЕЛЕНО И РасчетыСПоставщиками.СуммаПриход > 0)
	|		ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|				И Аналитика.Договор = &Договор
	|				И Аналитика.НаправлениеДеятельности = &НаправлениеДеятельности
	|				И РасчетыСПоставщиками.Валюта = &ВалютаВзаиморасчетов 
	|				И (ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных)
	|					ИЛИ (НАЧАЛОПЕРИОДА(ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(3000,1,1)), ДЕНЬ) >= &ДатаДокумента И (НЕ ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных))))))
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоРасчетамСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаКРаспределению.Документ                      КАК Документ,
	|	ТаблицаКРаспределению.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|	ТаблицаКРаспределению.Организация                   КАК Организация,
	|	ТаблицаКРаспределению.Партнер                       КАК Партнер,
	|	ТаблицаКРаспределению.Контрагент                    КАК Контрагент,
	|	ТаблицаКРаспределению.Дата                          КАК Дата,
	|	ТаблицаКРаспределению.СуммаДокумента                КАК СуммаДокумента,
	|	ТаблицаКРаспределению.Валюта                        КАК Валюта,
	|	ТаблицаКРаспределению.ДоступноРедактирование        КАК ДоступноРедактирование,
	|	ТаблицаКРаспределению.РасшифровкаОбъектаРасчетов    КАК РасшифровкаОбъектаРасчетов,
	|	ТаблицаКРаспределению.Заказ                         КАК Заказ,
	|	СУММА(ТаблицаКРаспределению.ДоступноКЗачету)        КАК ДоступноКЗачету,
	|	СУММА(ТаблицаКРаспределению.СуммаВВалютеПлатежа)    КАК СуммаВВалютеПлатежа,
	|	СУММА(ТаблицаКРаспределению.СуммаРегл)              КАК СуммаРегл,
	|	СУММА(ТаблицаКРаспределению.СуммаУпр)               КАК СуммаУпр
	|ИЗ
	|	ТаблицаКРаспределению КАК ТаблицаКРаспределению
	|ГДЕ 
	|	НЕ ТаблицаКРаспределению.Документ ССЫЛКА Документ.ВзаимозачетЗадолженности
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКРаспределению.Документ,
	|	ТаблицаКРаспределению.ВалютаВзаиморасчетов,
	|	ТаблицаКРаспределению.Организация,
	|	ТаблицаКРаспределению.Партнер,
	|	ТаблицаКРаспределению.Контрагент,
	|	ТаблицаКРаспределению.Дата,
	|	ТаблицаКРаспределению.СуммаДокумента,
	|	ТаблицаКРаспределению.Валюта,
	|	ТаблицаКРаспределению.ДоступноРедактирование,
	|	ТаблицаКРаспределению.РасшифровкаОбъектаРасчетов,
	|	ТаблицаКРаспределению.Заказ
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаКРаспределению.ДоступноКЗачету) > 0
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Наличие заданий по авансам
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Зачтено (зачтенные оплаты и авансы)
	|ВЫБРАТЬ
	|	ТаблицаЗачтено.Валюта                                            КАК ВалютаВзаиморасчетов,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСПоставщиками.ЗаказПоставщику
	|		ИНАЧЕ РасчетыСПоставщиками.Регистратор
	|	КОНЕЦ                                                            КАК Документ,
	|	Аналитика.Организация                                            КАК Организация,
	|	Аналитика.Контрагент                                             КАК Контрагент,
	|	ЕСТЬNULL(ДвиженияКонтрагент.Партнер, Аналитика.Партнер)          КАК Партнер,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))               КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                    КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСПоставщиками.Валюта)  КАК Валюта,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСПоставщиками.ЗаказПоставщику
	|		ИНАЧЕ ДвиженияКонтрагент.ОбъектРасчетов
	|	КОНЕЦ                                                            КАК Заказ,
	|	ДвиженияКонтрагент.Договор                                       КАК Договор,
	|
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику <> &ОбъектРасчетов 
	|			ТОГДА РасчетыСПоставщиками.СуммаРасход
	|		ИНАЧЕ ЕСТЬNULL(
	|			ВЫБОР КОГДА
	|				РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.КорСуммаВВалютеВзаиморасчетов
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов
	|			КОНЕЦ,
	|			РасчетыСПоставщиками.СуммаПриход)
	|	КОНЕЦ                                                            КАК СуммаЗачтено,
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику <> &ОбъектРасчетов 
	|			ТОГДА 0 //Объект расчетов-платежка, сумма платежа в валюте платежа может быть расчитана только в платежке.
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.СуммаРегл
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа
	|			КОНЕЦ,
	|		РасчетыСПоставщиками.СуммаПриход)
	|	КОНЕЦ                                                            КАК СуммаВВалютеПлатежа,
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику <> &ОбъектРасчетов 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.СуммаРегл
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыРегл
	|			КОНЕЦ, РасчетыСПоставщиками.СуммаПриход)
	|	КОНЕЦ                                                            КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику <> &ОбъектРасчетов 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.Сумма
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплаты
	|			КОНЕЦ, РасчетыСПоставщиками.СуммаПриход)
	|	КОНЕЦ                                                            КАК СуммаУпр,
	|	
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ИЛИ РасчетыСПоставщиками.Регистратор = &Документ ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                            КАК ДоступноРедактирование,
	|	РасчетыСПоставщиками.Регистратор = &Документ                     КАК РасшифровкаОбъектаРасчетов,
	|	ВЫБОР
	|		КОГДА ДвиженияКонтрагент.Договор = &Договор ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ                                                            КАК Порядок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И (ЗаказПоставщику, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаЗачтено.ЗаказПоставщику,
	|				ТаблицаЗачтено.Валюта
	|			ИЗ
	|				ТаблицаЗачтено КАК ТаблицаЗачтено
	|			)
	|	) КАК РасчетыСПоставщиками
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаЗачтено КАК ТаблицаЗачтено
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ТаблицаЗачтено.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаЗачтено.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Валюта = ТаблицаЗачтено.Валюта
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСПоставщиками.Регистратор = ТаблицаДокументов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		ДвиженияРасчеты.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|		И ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0
	|		И РасчетыСПоставщиками.Регистратор = ДвиженияРасчеты.Регистратор
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагент
	|	ПО
	|		ДвиженияКонтрагент.ХозяйственнаяОперация = 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|		И ДвиженияКонтрагент.СуммаВВалютеВзаиморасчетов > 0
	|		И РасчетыСПоставщиками.Регистратор = ДвиженияКонтрагент.Регистратор
	|		И РасчетыСПоставщиками.ЗаказПоставщику = ДвиженияКонтрагент.КорОбъектРасчетов
	|		И РасчетыСПоставщиками.Валюта = ДвиженияКонтрагент.КорВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияКонтрагент.Организация
	|		И Аналитика.Партнер = ДвиженияКонтрагент.КорПартнер
	|		И Аналитика.Контрагент = ДвиженияКонтрагент.КорКонтрагент
	|		
	|ГДЕ
	|	((РасчетыСПоставщиками.СуммаПриход <> 0 И РасчетыСПоставщиками.ЗаказПоставщику = &ОбъектРасчетов И РасчетыСПоставщиками.Регистратор <> &Документ)
	|	ИЛИ (РасчетыСПоставщиками.СуммаРасход <> 0 И РасчетыСПоставщиками.ЗаказПоставщику <> &ОбъектРасчетов И РасчетыСПоставщиками.Регистратор = &Документ))
	|	И ВЫБОР КОГДА
	|			РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.ВзаимозачетЗадолженности).ВидОперации В 
	|			(ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Клиента),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Поставщика))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Валюта                                        КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.Заказ                                         КАК Документ,
	|	РасшифровкаПлатежа.Организация                                   КАК Организация,
	|	РасшифровкаПлатежа.Контрагент                                    КАК Контрагент,
	|	РасшифровкаПлатежа.Партнер                                       КАК Партнер,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))               КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                    КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасшифровкаПлатежа.Валюта)     КАК Валюта,
	|	РасшифровкаПлатежа.Заказ                                         КАК Заказ,
	|	РасшифровкаПлатежа.Договор                                       КАК Договор,
	|
	|	РасшифровкаПлатежа.Сумма                                         КАК СуммаЗачтено,
	|	0                                                                КАК СуммаВВалютеПлатежа,
	|	0                                                                КАК СуммаРегл,
	|	0                                                                КАК СуммаУпр,
	|
	|	ИСТИНА                                                           КАК ДоступноРедактирование,
	|	ИСТИНА                                                           КАК РасшифровкаОбъектаРасчетов,
	|	1                                                                КАК Порядок
	|ИЗ
	|	ТаблицаРасшифровкаПлатежаНакладная КАК РасшифровкаПлатежа
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасшифровкаПлатежа.Заказ = ТаблицаДокументов.Ссылка	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаАвансыПоРасчетамСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСПоставщиками.ЗаказПоставщику                   КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта                            КАК Валюта,
	|	РасчетыСПоставщиками.ПредоплатаОстаток                 КАК СуммаАванса,
	|	РасчетыСПоставщиками.ПредоплатаРеглОстаток             КАК СуммаРегл,
	|	РасчетыСПоставщиками.ПредоплатаУпрОстаток              КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ТаблицаОстатковПоДокументам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказПоставщику <> &ОбъектРасчетов
	|	) КАК РасчетыСПоставщиками
	|	
	|ГДЕ
	|	РасчетыСПоставщиками.ПредоплатаОстаток > 0
	|	И РасчетыСПоставщиками.ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказПоставщику,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковПоДокументам.ЗаказПоставщику                   КАК Заказ,
	|	ТаблицаОстатковПоДокументам.Валюта                            КАК ВалютаВзаиморасчетов,
	|	Аналитика.Организация                                         КАК Организация,
	|	Аналитика.Партнер                                             КАК Партнер,
	|	Аналитика.Контрагент                                          КАК Контрагент,
	|	Аналитика.Договор                                             КАК Договор,
	|	СУММА(ТаблицаОстатковПоДокументам.СуммаАванса)                КАК ДоступноКЗачету,
	|	СУММА(ТаблицаОстатковПоДокументам.СуммаРегл)                  КАК СуммаРегл,
	|	СУММА(ТаблицаОстатковПоДокументам.СуммаУпр)                   КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА Аналитика.Договор = &Договор ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ                                                         КАК Порядок
	|ИЗ
	|	ТаблицаОстатковПоДокументам КАК ТаблицаОстатковПоДокументам
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОстатковПоДокументам.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаОстатковПоДокументам.ЗаказПоставщику) НЕ В (&ТипыПлатежныхДокументов) 
	|	ИЛИ (ТИПЗНАЧЕНИЯ(ТаблицаОстатковПоДокументам.ЗаказПоставщику) В (&ТипыПлатежныхДокументов)
	|		И НЕ (ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных) И Аналитика.Договор = &Договор))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковПоДокументам.ЗаказПоставщику,
	|	ТаблицаОстатковПоДокументам.Валюта,
	|	ТаблицаОстатковПоДокументам.СуммаАванса,
	|	Аналитика.Организация,
	|	Аналитика.Партнер,
	|	Аналитика.Контрагент,
	|	Аналитика.Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Порядок
	|";
	Возврат ТекстЗапроса;
	
КонецФункции
	
#КонецОбласти

#Область РасчетыСКлиентами

&НаСервере
Функция ТекстВременныеТаблицыПоРасчетамСКлиентами ()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Договор       КАК Договор
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В(&Организация)
	|	И АналитикаПоПартнерам.Партнер В (&Партнер)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерамРегл
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И АналитикаПоПартнерам.Партнер В (&Партнер)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентами.СуммаОстаток КАК СуммаДолга
	|
	|ПОМЕСТИТЬ ТаблицаОстатковРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
	|		&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		И &ЭтоУправленческаяОрганизация
	|		И ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
	|		И АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерамРегл КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.СуммаОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентами.ЗаказКлиента                      КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта                            КАК Валюта,
	|	-РасчетыСКлиентами.СуммаОстаток                     КАК СуммаАванса
	|
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента <> &ОбъектРасчетов
	|	) КАК РасчетыСКлиентами
	|	
	|ГДЕ
	|	РасчетыСКлиентами.СуммаОстаток < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентами.ЗаказКлиента                     КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта                           КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаЗачтено
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,, Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСКлиентами
	|ГДЕ
	|	РасчетыСКлиентами.ЗаказКлиента = &ОбъектРасчетов
	|		ИЛИ (РасчетыСКлиентами.Регистратор = &ОбъектРасчетов
	|			И НЕ РасчетыСКлиентами.ЗаказКлиента = &ОбъектРасчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасшифровкаПлатежаНакладная.Партнер     КАК Партнер,
	|	ТаблицаРасшифровкаПлатежаНакладная.Заказ       КАК Заказ,
	|	ТаблицаРасшифровкаПлатежаНакладная.Контрагент  КАК Контрагент,
	|	ТаблицаРасшифровкаПлатежаНакладная.Договор     КАК Договор,
	|	ТаблицаРасшифровкаПлатежаНакладная.Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежаНакладная.Валюта      КАК Валюта,
	|	ТаблицаРасшифровкаПлатежаНакладная.Сумма       КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежаНакладная
	|ИЗ &РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежаНакладная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчеты.Партнер КАК Партнер,
	|	ТаблицаРасчеты.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаРасчеты.Валюта КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаОтбораДокументов
	|ИЗ 
	|	(ВЫБРАТЬ
	|		ТаблицаОстатков.Партнер,
	|		ТаблицаОстатков.ЗаказКлиента,
	|		ТаблицаОстатков.Валюта
	|	ИЗ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗачтено.Партнер,
	|		ТаблицаЗачтено.ЗаказКлиента,
	|		ТаблицаЗачтено.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаРасшифровкаПлатежаНакладная.Партнер,
	|		ТаблицаРасшифровкаПлатежаНакладная.Заказ,
	|		ТаблицаРасшифровкаПлатежаНакладная.Валюта
	|	
	|	) КАК ТаблицаРасчеты
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		(НЕ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|			И ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|			И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказКлиента)
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|			И ДанныеДокумента.КассаОтправитель.Владелец = &Контрагент
	|		ИЛИ НЕ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|			И ДанныеДокумента.Контрагент = &Контрагент)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|	(НЕ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|		И ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|	ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|		И ТаблицаОтбораДокументов.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие))
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказКлиента)
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	И ДанныеДокумента.БанковскийСчетОтправитель.Владелец = &Контрагент
	|	ИЛИ НЕ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|	И ДанныеДокумента.Контрагент = &Контрагент)
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И (ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|			ИЛИ ТаблицаРасшифровкаПлатежа.Ссылка = ТаблицаОтбораДокументов.ЗаказКлиента)
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВозвратТоваровОтКлиента.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	ДанныеДокумента.Валюта                               КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)               КАК СуммаДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ДанныеДокумента.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	&ЭтоУправленческаяОрганизация
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                         КАК Ссылка,
	|	ДанныеДокумента.Дата                           КАК Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(ТаблицаРасшифровкаПлатежа.Сумма)         КАК СуммаДокумента
	|ИЗ
	|	Документ.ВводОстатков КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВводОстатков.РасчетыСПартнерами КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = ТаблицаОтбораДокументов.ЗаказКлиента
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов)
	|		)
	|	И ТаблицаРасшифровкаПлатежа.Контрагент = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ 
	|		(ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = НЕОПРЕДЕЛЕНО 
	|			И ТаблицаРасшифровкаПлатежа.ДокументРасчетов=ЗНАЧЕНИЕ(Документ.ПервичныйДокумент.ПустаяСсылка)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка         КАК Ссылка,
	|	ДанныеДокумента.Дата           КАК Дата,
	|	&ВалютаРеглУчета               КАК Валюта,
	|	ДанныеДокумента.СуммаРегл      КАК СуммаДокумента
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтбораДокументов КАК ТаблицаОтбораДокументов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОтбораДокументов.Партнер
	|		И ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов = ТаблицаОтбораДокументов.Валюта
	|		И ТаблицаРасшифровкаПлатежа.Заказ = ТаблицаОтбораДокументов.ЗаказКлиента
	|		И ТаблицаРасшифровкаПлатежа.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|ГДЕ
	|	ДанныеДокумента.Организация В (&Организация)
	|	И ДанныеДокумента.КонтрагентКредитор = &Контрагент
	|	И (НЕ ТаблицаОтбораДокументов.ЗаказКлиента ЕСТЬ NULL ИЛИ ТаблицаРасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// Оплаты (Нераспределенные платежи).
	// (1) Документы оплаты в рамках выбранного договора до даты документа
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ЗаказКлиента                                  КАК Заказ,
	|	ТаблицаОстатков.Валюта                                        КАК ВалютаВзаиморасчетов,
	|	РасчетыСКлиентами.Регистратор                                 КАК Документ,
	|	Аналитика.КлючАналитики                                       КАК КлючАналитики,
	|	Аналитика.Организация                                         КАК Организация,
	|	Аналитика.Партнер                                             КАК Партнер,
	|	Аналитика.Контрагент                                          КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))            КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                 КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСКлиентами.Валюта)  КАК Валюта,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов,
	|		РасчетыСКлиентами.СуммаРасход)                            КАК ДоступноКЗачету,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа,
	|		РасчетыСКлиентами.СуммаРасход)                            КАК СуммаВВалютеПлатежа,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл,
	|		РасчетыСКлиентами.СуммаРасход)                            КАК СуммаРегл,
	|	ЕСТЬNULL(ДвиженияРасчеты.СуммаОплаты,
	|		РасчетыСКлиентами.СуммаРасход)                            КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                         КАК ДоступноРедактирование,
	|	ЛОЖЬ                                                          КАК РасшифровкаОбъектаРасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаКРаспределению
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(&ДатаДокумента,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				КлючАналитики.Договор = &Договор
	|			)
	|		И (ЗаказКлиента, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаОстатков.ЗаказКлиента,
	|				ТаблицаОстатков.Валюта
	|			ИЗ
	|				ТаблицаОстатков КАК ТаблицаОстатков
	|			ГДЕ
	|				ТаблицаОстатков.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			)
	|	) КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатков КАК ТаблицаОстатков
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
	|		И РасчетыСКлиентами.Валюта = ТаблицаОстатков.Валюта
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСКлиентами.Регистратор = ТаблицаДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		ДвиженияРасчеты.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации))
	|		И ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0
	|		И РасчетыСКлиентами.Регистратор = ДвиженияРасчеты.Регистратор
	|		И РасчетыСКлиентами.ЗаказКлиента = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|
	|ГДЕ
	|	РасчетыСКлиентами.СуммаРасход > 0
	|	И РасчетыСКлиентами.Регистратор <> &Документ
	|	И НЕ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) НЕ В (&ТипыПлатежныхДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// (2) Документы оплаты с пустым объектом расчетов или по объекту расчетов-платежке.
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.ЗаказКлиента                                КАК Заказ,
	|	РасчетыСКлиентами.Валюта                                      КАК ВалютаВзаиморасчетов,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСКлиентами.ЗаказКлиента 
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор
	|	КОНЕЦ                                                         КАК Документ,
	|	Аналитика.КлючАналитики                                       КАК КлючАналитики,
	|	Аналитика.Организация                                         КАК Организация,
	|	Аналитика.Партнер                                             КАК Партнер,
	|	Аналитика.Контрагент                                          КАК Контрагент,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))            КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                 КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСКлиентами.Валюта)  КАК Валюта,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа, РасчетыСКлиентами.СуммаРасход)
	|		ИНАЧЕ РасчетыСКлиентами.СуммаРасход - РасчетыСКлиентами.СуммаПриход
	|	КОНЕЦ                                                         КАК ДоступноКЗачету,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа, РасчетыСКлиентами.СуммаРасход)
	|		КОГДА РасчетыСКлиентами.СуммаРасход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСКлиентами.СуммаРасход - РасчетыСКлиентами.СуммаПриход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа, РасчетыСКлиентами.СуммаРасход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСКлиентами.СуммаРасход))
	|	КОНЕЦ                                                         КАК СуммаВВалютеПлатежа,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСКлиентами.СуммаРасход)
	|		КОГДА РасчетыСКлиентами.СуммаРасход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСКлиентами.СуммаРасход - РасчетыСКлиентами.СуммаПриход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСКлиентами.СуммаРасход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСКлиентами.СуммаРасход))
	|	КОНЕЦ                                                         КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента = НЕОПРЕДЕЛЕНО 
	|			ТОГДА ЕСТЬNULL(ДвиженияРасчеты.СуммаОплаты, РасчетыСКлиентами.СуммаРасход)
	|		КОГДА РасчетыСКлиентами.СуммаРасход = 0 
	|			ТОГДА 0
	|		ИНАЧЕ (РасчетыСКлиентами.СуммаРасход - РасчетыСКлиентами.СуммаПриход)
	|				* (ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыРегл, РасчетыСКлиентами.СуммаРасход) 
	|					/ ЕСТЬNULL(ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов, РасчетыСКлиентами.СуммаРасход))
	|	КОНЕЦ                                                         КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                         КАК ДоступноРедактирование,
	|	ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов) 
	|	И НАЧАЛОПЕРИОДА(ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(3000,1,1)), ДЕНЬ) < &ДатаДокумента 
	|		И ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных)                      КАК РасшифровкаОбъектаРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|				ТОГДА РасчетыСКлиентами.ЗаказКлиента 
	|			ИНАЧЕ РасчетыСКлиентами.Регистратор
	|		КОНЕЦ = ТаблицаДокументов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		ДвиженияРасчеты.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации))
	|		И ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0
	|		И ВЫБОР 
	|			КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов) 
	|				ТОГДА РасчетыСКлиентами.ЗаказКлиента = ДвиженияРасчеты.Регистратор
	|			ИНАЧЕ РасчетыСКлиентами.Регистратор = ДвиженияРасчеты.Регистратор
	|		КОНЕЦ
	|		И РасчетыСКлиентами.ЗаказКлиента = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОстатковРеглУчет КАК ТаблицаОстатковРеглУчет
	|	ПО
	|		РасчетыСКлиентами.Регистратор = ТаблицаОстатковРеглУчет.ЗаказКлиента
	|
	|ГДЕ
	|	ТаблицаОстатковРеглУчет.СуммаДолга ЕСТЬ NULL
	|	И ((РасчетыСКлиентами.Регистратор <> &Документ И РасчетыСКлиентами.ЗаказКлиента = НЕОПРЕДЕЛЕНО И РасчетыСКлиентами.СуммаРасход > 0)
	|		ИЛИ (ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|				И Аналитика.Договор = &Договор
	|				И Аналитика.НаправлениеДеятельности = &НаправлениеДеятельности
	|				И РасчетыСКлиентами.Валюта = &ВалютаВзаиморасчетов 
	|				И (ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных)
	|					ИЛИ (НАЧАЛОПЕРИОДА(ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(3000,1,1)), ДЕНЬ) >= &ДатаДокумента И НЕ ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных)))))
	|
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоРасчетамСКлиентами()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКРаспределению.Документ                      КАК Документ,
	|	ТаблицаКРаспределению.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|	ТаблицаКРаспределению.Организация                   КАК Организация,
	|	ТаблицаКРаспределению.Партнер                       КАК Партнер,
	|	ТаблицаКРаспределению.Контрагент                    КАК Контрагент,
	|	ТаблицаКРаспределению.Дата                          КАК Дата,
	|	ТаблицаКРаспределению.СуммаДокумента                КАК СуммаДокумента,
	|	ТаблицаКРаспределению.Валюта                        КАК Валюта,
	|	ТаблицаКРаспределению.ДоступноРедактирование        КАК ДоступноРедактирование,
	|	ТаблицаКРаспределению.РасшифровкаОбъектаРасчетов    КАК РасшифровкаОбъектаРасчетов,
	|	ТаблицаКРаспределению.Заказ                         КАК Заказ,
	|	СУММА(ТаблицаКРаспределению.ДоступноКЗачету)        КАК ДоступноКЗачету,
	|	СУММА(ТаблицаКРаспределению.СуммаВВалютеПлатежа)    КАК СуммаВВалютеПлатежа,
	|	СУММА(ТаблицаКРаспределению.СуммаРегл)              КАК СуммаРегл,
	|	СУММА(ТаблицаКРаспределению.СуммаУпр)               КАК СуммаУпр
	|ИЗ
	|	ТаблицаКРаспределению КАК ТаблицаКРаспределению
	|ГДЕ 
	|	НЕ ТаблицаКРаспределению.Документ ССЫЛКА Документ.ВзаимозачетЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаКРаспределению.Документ,
	|	ТаблицаКРаспределению.ВалютаВзаиморасчетов,
	|	ТаблицаКРаспределению.Организация,
	|	ТаблицаКРаспределению.Партнер,
	|	ТаблицаКРаспределению.Контрагент,
	|	ТаблицаКРаспределению.Дата,
	|	ТаблицаКРаспределению.СуммаДокумента,
	|	ТаблицаКРаспределению.Валюта,
	|	ТаблицаКРаспределению.ДоступноРедактирование,
	|	ТаблицаКРаспределению.РасшифровкаОбъектаРасчетов,
	|	ТаблицаКРаспределению.Заказ
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаКРаспределению.ДоступноКЗачету) > 0
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//Наличие заданий по авансам
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Зачтено (зачтенные оплаты и авансы)
	|ВЫБРАТЬ
	|	ТаблицаЗачтено.Валюта                                            КАК ВалютаВзаиморасчетов,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор
	|	КОНЕЦ                                                            КАК Документ,
	|	Аналитика.Организация                                            КАК Организация,
	|	Аналитика.Контрагент                                             КАК Контрагент,
	|	ЕСТЬNULL(ДвиженияКонтрагент.КорПартнер, Аналитика.Партнер)       КАК Партнер,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))               КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                    КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасчетыСКлиентами.Валюта)     КАК Валюта,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
	|		ИНАЧЕ ДвиженияКонтрагент.КорОбъектРасчетов
	|	КОНЕЦ                                                            КАК Заказ,
	|	ДвиженияКонтрагент.КорДоговор                                    КАК Договор,
	|
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> &ОбъектРасчетов 
	|			ТОГДА РасчетыСКлиентами.СуммаПриход
	|		ИНАЧЕ ЕСТЬNULL(
	|			ВЫБОР КОГДА
	|				РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.СуммаВВалютеВзаиморасчетов
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов
	|			КОНЕЦ,
	|			РасчетыСКлиентами.СуммаРасход)
	|	КОНЕЦ                                                            КАК СуммаЗачтено,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> &ОбъектРасчетов 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.СуммаРегл
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыВВалютеПлатежа
	|			КОНЕЦ,
	|		РасчетыСКлиентами.СуммаРасход)
	|	КОНЕЦ                                                            КАК СуммаВВалютеПлатежа,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> &ОбъектРасчетов 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.СуммаРегл
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплатыРегл
	|			КОНЕЦ,
	|		РасчетыСКлиентами.СуммаРасход)
	|	КОНЕЦ                                                            КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> &ОбъектРасчетов 
	|			ТОГДА 0
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА
	|				РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|			ТОГДА ДвиженияКонтрагент.Сумма
	|				ИНАЧЕ ДвиженияРасчеты.СуммаОплаты
	|			КОНЕЦ,
	|		РасчетыСКлиентами.СуммаРасход)
	|	КОНЕЦ                                                            КАК СуммаУпр,
	|
	|	ВЫБОР КОГДА НЕ ТаблицаДокументов.Ссылка ЕСТЬ NULL ИЛИ РасчетыСКлиентами.Регистратор = &Документ ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                                            КАК ДоступноРедактирование,
	|	ВЫБОР
	|		КОГДА ДвиженияКонтрагент.КорДоговор = &Договор ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ                                                            КАК Порядок,
	|	РасчетыСКлиентами.Регистратор = &Документ                        КАК РасшифровкаОбъектаРасчетов
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,
	|		Регистратор,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И (ЗаказКлиента, Валюта) В (
	|			ВЫБРАТЬ
	|				ТаблицаЗачтено.ЗаказКлиента,
	|				ТаблицаЗачтено.Валюта
	|			ИЗ
	|				ТаблицаЗачтено КАК ТаблицаЗачтено
	|			)
	|	) КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаЗачтено КАК ТаблицаЗачтено
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ТаблицаЗачтено.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.ЗаказКлиента = ТаблицаЗачтено.ЗаказКлиента
	|		И РасчетыСКлиентами.Валюта = ТаблицаЗачтено.Валюта
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасчетыСКлиентами.Регистратор = ТаблицаДокументов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияРасчеты
	|	ПО
	|		ДвиженияРасчеты.ХозяйственнаяОперация В
	|			(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации))
	|		И ДвиженияРасчеты.СуммаОплатыВВалютеВзаиморасчетов > 0
	|		И РасчетыСКлиентами.Регистратор = ДвиженияРасчеты.Регистратор
	|		И РасчетыСКлиентами.ЗаказКлиента = ДвиженияРасчеты.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ДвиженияРасчеты.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияРасчеты.Организация
	|		И Аналитика.Партнер = ДвиженияРасчеты.Партнер
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДвиженияКонтрагент
	|	ПО
	|		ДвиженияКонтрагент.ХозяйственнаяОперация = 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности)
	|		И ДвиженияКонтрагент.СуммаВВалютеВзаиморасчетов > 0
	|		И РасчетыСКлиентами.Регистратор = ДвиженияКонтрагент.Регистратор
	|		И РасчетыСКлиентами.ЗаказКлиента = ДвиженияКонтрагент.ОбъектРасчетов
	|		И РасчетыСКлиентами.Валюта = ДвиженияКонтрагент.ВалютаВзаиморасчетов
	|		И Аналитика.Организация = ДвиженияКонтрагент.Организация
	|		И Аналитика.Партнер = ДвиженияКонтрагент.Партнер
	|		И Аналитика.Контрагент = ДвиженияКонтрагент.Контрагент
	|
	|		
	|ГДЕ
	|	(РасчетыСКлиентами.СуммаРасход <> 0 И РасчетыСКлиентами.ЗаказКлиента = &ОбъектРасчетов И РасчетыСКлиентами.Регистратор <> &Документ)
	|	ИЛИ (РасчетыСКлиентами.СуммаПриход <> 0 И РасчетыСКлиентами.ЗаказКлиента <> &ОбъектРасчетов И РасчетыСКлиентами.Регистратор = &Документ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Валюта                                        КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.Заказ                                         КАК Документ,
	|	РасшифровкаПлатежа.Организация                                   КАК Организация,
	|	РасшифровкаПлатежа.Контрагент                                    КАК Контрагент,
	|	РасшифровкаПлатежа.Партнер                                       КАК Партнер,
	|	ЕСТЬNULL(ТаблицаДокументов.Дата, ДАТАВРЕМЯ(1,1,1))               КАК Дата,
	|	ЕСТЬNULL(ТаблицаДокументов.СуммаДокумента, 0)                    КАК СуммаДокумента,
	|	ЕСТЬNULL(ТаблицаДокументов.Валюта, РасшифровкаПлатежа.Валюта)     КАК Валюта,
	|	РасшифровкаПлатежа.Заказ                                         КАК Заказ,
	|	РасшифровкаПлатежа.Договор                                       КАК Договор,
	|
	|	РасшифровкаПлатежа.Сумма                                         КАК СуммаЗачтено,
	|	РасшифровкаПлатежа.Сумма                                         КАК СуммаВВалютеПлатежа,
	|	0                                                                КАК СуммаРегл,
	|	0                                                                КАК СуммаУпр,
	|
	|	ИСТИНА                                                           КАК ДоступноРедактирование,
	|	1                                                                КАК Порядок,
	|	ИСТИНА                                                           КАК РасшифровкаОбъектаРасчетов
	|ИЗ
	|	ТаблицаРасшифровкаПлатежаНакладная КАК РасшифровкаПлатежа
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		РасшифровкаПлатежа.Заказ = ТаблицаДокументов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Дата";
	
	Возврат ТекстЗапроса;
		
КонецФункции

&НаСервере
Функция ТекстЗапросаАвансыПоРасчетамСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентами.ЗаказКлиента                      КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта                            КАК Валюта,
	|	РасчетыСКлиентами.ПредоплатаОстаток                 КАК СуммаАванса,
	|	РасчетыСКлиентами.ПредоплатаРеглОстаток             КАК СуммаРегл,
	|	РасчетыСКлиентами.ПредоплатаУпрОстаток              КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ТаблицаОстатковПоДокументам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|		И ЗаказКлиента <> &ОбъектРасчетов
	|	) КАК РасчетыСКлиентами
	|	
	|ГДЕ
	|	РасчетыСКлиентами.ПредоплатаОстаток < 0
	|	И РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказКлиента,
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковПоДокументам.ЗаказКлиента                      КАК Заказ,
	|	ТаблицаОстатковПоДокументам.Валюта                            КАК ВалютаВзаиморасчетов,
	|	Аналитика.Организация                                         КАК Организация,
	|	Аналитика.Партнер                                             КАК Партнер,
	|	Аналитика.Контрагент                                          КАК Контрагент,
	|	Аналитика.Договор                                             КАК Договор,
	|	СУММА(-ТаблицаОстатковПоДокументам.СуммаАванса)               КАК ДоступноКЗачету,
	|	СУММА(-ТаблицаОстатковПоДокументам.СуммаРегл)                 КАК СуммаРегл,
	|	СУММА(-ТаблицаОстатковПоДокументам.СуммаУпр)                  КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА Аналитика.Договор = &Договор ТОГДА
	|			1
	|		ИНАЧЕ
	|			2
	|	КОНЕЦ                                                         КАК Порядок
	|ИЗ
	|	ТаблицаОстатковПоДокументам КАК ТаблицаОстатковПоДокументам
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОстатковПоДокументам.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(ТаблицаОстатковПоДокументам.ЗаказКлиента) НЕ В (&ТипыПлатежныхДокументов) 
	|		ИЛИ (ТИПЗНАЧЕНИЯ(ТаблицаОстатковПоДокументам.ЗаказКлиента) В (&ТипыПлатежныхДокументов)
	|		И НЕ (ТИПЗНАЧЕНИЯ(&ОбъектРасчетов) В (&ТипыНакладных) И Аналитика.Договор = &Договор)))
	|	И НЕ (&ЭтоУправленческаяОрганизация И ТаблицаОстатковПоДокументам.ЗаказКлиента = Неопределено)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатковПоДокументам.ЗаказКлиента,
	|	ТаблицаОстатковПоДокументам.Валюта,
	|	ТаблицаОстатковПоДокументам.СуммаАванса,
	|	Аналитика.Организация,
	|	Аналитика.Партнер,
	|	Аналитика.Контрагент,
	|	Аналитика.Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Порядок
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ВерсияДанныхДокумента(ДокументСсылка)
	
	ИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка)).Имя;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		ВерсияДанных = Выборка.ВерсияДанных;
	Иначе
		ВерсияДанных = "            ";
	КонецЕсли;
	
	Возврат ВерсияДанных;
	
КонецФункции

&НаСервере
Функция СостояниеФоновогоЗаданияВзаиморасчетов()
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если Задания.Количество() > 0 Тогда
		Если Задания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат "Активно";
		ИначеЕсли Задания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		Иначе
			Возврат "Завершено";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	Состояние = СостояниеФоновогоЗаданияВзаиморасчетов();
	
	Если Состояние = Неопределено ИЛИ Состояние = "Завершено" Тогда
		
		АвансыРассчитаны = НЕ ЕстьЗаданияКРаспределениюВзаиморасчетов(ЕстьРасчетыСКлиентами, КлючиАналитики);
		
		Если НЕ АвансыРассчитаны Тогда
			
			Ключ = Новый УникальныйИдентификатор();
			СтруктураРасчетов = Новый Структура("АналитикиУчетаПоПартнерам, Организации",КлючиАналитики.ВыгрузитьЗначения(), Неопределено);
			
			Если ЕстьРасчетыСКлиентами Тогда
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСКлиентами",Ключ);
			Иначе
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСПоставщиками",Ключ);
			КонецЕсли;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Иначе
			Ключ = Неопределено;
			ЗаполнитьТаблицуАвансов();
		КонецЕсли;
		
	ИначеЕсли Состояние = "Активно" Тогда
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
	Иначе
		ТекстСообщения = НСтр("ru = 'Во время распределения расчетов по документам произошла ошибка. Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		АвансыРассчитаны = Истина;
		Авансы.Очистить();
		УстановитьСтраницуАвансов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЗачетов

&НаКлиенте
Процедура ЗачестьПлатежДляВыбранныхСтрок(МассивСтрок)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьПодтверждениеЗачетаПлатежа",
		ЭтаФорма,
		МассивСтрок);
	
	Если Недостает <= 0 Тогда
		
		Режим = Новый СписокЗначений;
		Текст = НСтр("ru = 'Продолжить'");
		Режим.Добавить(КодВозвратаДиалога.Да, Текст);
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Сумма к оплате полностью зачтена.'"), Режим);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПодтверждениеЗачетаПлатежа(Результат, МассивСтрок) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗачестьНаСервере(МассивСтрок, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьАвансДляВыбранныхСтрок(МассивСтрок)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьПодтверждениеЗачетаАванса",
		ЭтаФорма,
		МассивСтрок);
	
	Если Недостает <= 0 Тогда
		
		Режим = Новый СписокЗначений;
		Текст = НСтр("ru = 'Продолжить'");
		Режим.Добавить(КодВозвратаДиалога.Да, Текст);
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Сумма к оплате полностью зачтена.'"), Режим);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПодтверждениеЗачетаАванса(Результат, МассивСтрок) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗачестьНаСервере(МассивСтрок, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗачестьНаСервере(МассивСтрок, ЭтоОплата)
	
	Если ЭтоОплата И Не ЗаблокироватьДокументыДляРедактирования(МассивСтрок, "Оплаты") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормы = ЭтаФорма[?(ЭтоОплата, "Оплаты", "Авансы")];
	
	РаспределитьОстаток = (Недостает > 0);
	
	СписокСтрок = Новый СписокЗначений;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СписокСтрок.Добавить(СтрокаТаблицы, ТаблицаФормы.Индекс(СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	СписокСтрок.СортироватьПоПредставлению();
	
	СтруктураПоиска = Новый Структура("Документ, Партнер");
	Если НЕ ЭтоОплата Тогда
		СтруктураПоиска.Вставить("Заказ");
	КонецЕсли;
	
	Для Каждого Строка Из СписокСтрок Цикл
		
		СтрокаТаблицы = Строка.Значение;
		Если ЭтоОплата И НЕ СтрокаТаблицы.ДоступноРедактирование Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКЗачету         = СтрокаТаблицы.ДоступноКЗачету;
		СуммаВВалютеПлатежа  = СтрокаТаблицы.СуммаВВалютеПлатежа;
		
		Если РаспределитьОстаток Тогда
			
			СуммаБазиса  = СтрокаТаблицы.ДоступноКЗачету;
			СуммаКЗачету = ВзаиморасчетыСервер.СписатьСумму(СтрокаТаблицы.ДоступноКЗачету, Недостает);
			
			СуммаВВалютеПлатежа = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
				СтрокаТаблицы.СуммаВВалютеПлатежа,
				СуммаКЗачету,
				СуммаБазиса);
			Если НЕ ЭтоОплата Тогда
				СуммаРегл= ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаТаблицы.СуммаРегл,
					СуммаКЗачету,
					СуммаБазиса);
				СуммаУпр = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаТаблицы.СуммаУпр,
					СуммаКЗачету,
					СуммаБазиса);
			Иначе
				Если НЕ ЭтоОплата Тогда
					СуммаРегл = 0;
					СуммаУпр = 0;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.ДоступноКЗачету = 0;
			Если НЕ ЭтоОплата Тогда
				СуммаРегл = СтрокаТаблицы.СуммаРегл;
				СуммаУпр = СтрокаТаблицы.СуммаУпр;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаКЗачету = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		ЗачтенныеСтроки = Зачтено.НайтиСтроки(СтруктураПоиска);
		
		Если ЗачтенныеСтроки.Количество() = 0 Тогда
			СтрокаЗачета = Зачтено.Добавить();
			Если ЭтоОплата Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗачета, СтрокаТаблицы, , "СуммаВВалютеПлатежа");
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаЗачета, СтрокаТаблицы, , "СуммаВВалютеПлатежа, СуммаУпр, СуммаРегл");
			КонецЕсли;
			СтрокаЗачета.ДоступноРедактирование = Истина;
		Иначе
			СтрокаЗачета = ЗачтенныеСтроки[0];
		КонецЕсли;
		
		СтрокаЗачета.СуммаЗачтено        = СтрокаЗачета.СуммаЗачтено + СуммаКЗачету;
		СтрокаЗачета.СуммаВВалютеПлатежа = СтрокаЗачета.СуммаВВалютеПлатежа + СуммаВВалютеПлатежа;
		Если НЕ ЭтоОплата Тогда
			СтрокаЗачета.СуммаРегл = СтрокаЗачета.СуммаРегл + СуммаРегл;
			СтрокаЗачета.СуммаУпр = СтрокаЗачета.СуммаУпр + СуммаУпр;
		КонецЕсли;
		СтрокаЗачета.ДанныеИзменены = Истина;
		
		Если СтрокаТаблицы.ДоступноКЗачету = 0 Тогда
			ТаблицаФормы.Удалить(СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.ДанныеИзменены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Зачтено.Сортировать("Организация, Дата");
	
	РассчитатьСуммуЗачета();
	РасчитатьКоличествоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗачетНаСервере(СоответствиеСтрок, СуммаСтрокиИзменена = Истина, Отказ = Ложь)
	
	МассивСтрок = Новый Массив;
	Для Каждого ЭлементСтроки Из СоответствиеСтрок Цикл
		МассивСтрок.Добавить(ЭлементСтроки.Ключ);
	КонецЦикла;
	
	Если Не ЗаблокироватьДокументыДляРедактирования(МассивСтрок, "Зачтено") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтроки Из СоответствиеСтрок Цикл
		
		СтрокаТаблицы = Зачтено.НайтиПоИдентификатору(ЭлементСтроки.Ключ);
		Если СтрокаТаблицы = Неопределено Или Не СтрокаТаблицы.ДоступноРедактирование Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКОтмене = ЭлементСтроки.Значение;
		СуммаБазиса  = СтрокаТаблицы.СуммаЗачтено + ?(СуммаСтрокиИзменена, СуммаКОтмене, 0);
		
		Если СуммаКОтмене = 0 Тогда
			СуммаКОтмене = СтрокаТаблицы.СуммаЗачтено;
			СтрокаТаблицы.СуммаЗачтено = 0;
		ИначеЕсли Не СуммаСтрокиИзменена Тогда
			СтрокаТаблицы.СуммаЗачтено = СтрокаТаблицы.СуммаЗачтено - СуммаКОтмене;
		КонецЕсли;
		
		ЭтоОтменаАванса = Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) 
			Или ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ВзаимозачетЗадолженности");
		
		Если ЭтоОтменаАванса Тогда
			
			СтруктураПоиска = Новый Структура("Документ, Партнер, Заказ");
			ТаблицаПоиска = Авансы;
			
		Иначе
			
			СтруктураПоиска = Новый Структура("Документ, Партнер");
			ТаблицаПоиска = Оплаты;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		
		НайденныеСтроки = ТаблицаПоиска.НайтиСтроки(СтруктураПоиска);
		
		Если ЭтоОтменаАванса Тогда
			СуммаКОтменеРегл = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
				СтрокаТаблицы.СуммаРегл,
				СуммаКОтмене,
				СуммаБазиса);
			СуммаКОтменеУпр = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
				СтрокаТаблицы.СуммаУпр,
				СуммаКОтмене,
				СуммаБазиса);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаОплаты = ТаблицаПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаТаблицы, , "СуммаВВалютеПлатежа");
			Если ЭтоОтменаАванса Тогда
				СтрокаОплаты.СуммаРегл = СуммаКОтменеРегл;
				СтрокаОплаты.СуммаУпр = СуммаКОтменеУпр;
			КонецЕсли;
		Иначе
			СтрокаОплаты = НайденныеСтроки[0];
			Если ЭтоОтменаАванса Тогда
				СтрокаОплаты.СуммаРегл = СтрокаОплаты.СуммаРегл + СуммаКОтменеРегл;
				СтрокаОплаты.СуммаУпр = СтрокаОплаты.СуммаУпр + СуммаКОтменеУпр;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаВВалютеПлатежа > 0 Тогда
			СуммаКОтменеВВалютеПлатежа = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
				СтрокаТаблицы.СуммаВВалютеПлатежа,
				СуммаКОтмене,
				СуммаБазиса);
		Иначе 
			СуммаКОтменеВВалютеПлатежа = СтрокаОплаты.СуммаВВалютеПлатежа / СуммаБазиса * СуммаКОтмене;
		КонецЕсли;
		
		СтрокаОплаты.СуммаВВалютеПлатежа = СтрокаОплаты.СуммаВВалютеПлатежа + СуммаКОтменеВВалютеПлатежа;
		
		СтрокаОплаты.ДоступноКЗачету = СтрокаОплаты.ДоступноКЗачету + СуммаКОтмене;
		
		Если НЕ ЭтоОтменаАванса
			И СтрокаОплаты.РасшифровкаОбъектаРасчетов <> СтрокаТаблицы.РасшифровкаОбъектаРасчетов Тогда
			 СтрокаОплаты.РасшифровкаОбъектаРасчетов = СтрокаТаблицы.РасшифровкаОбъектаРасчетов;
		КонецЕсли;
		
		Если Не ЭтоОтменаАванса Тогда
			СтрокаОплаты.СуммаВВалютеПлатежа = СтрокаОплаты.СуммаВВалютеПлатежа + СуммаКОтменеВВалютеПлатежа;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаЗачтено = 0 Тогда
			Зачтено.Удалить(СтрокаТаблицы);
			СтрокаОплаты.ДанныеИзменены = Истина;
		Иначе
			СтрокаТаблицы.ДанныеИзменены = Истина;
			СтрокаОплаты.ДанныеИзменены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Оплаты.Сортировать("Организация, Дата");
	Авансы.Сортировать("Организация, Порядок");
	
	РассчитатьСуммуЗачета();
	РасчитатьКоличествоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьПревышениеНаСервере(Отказ)
	
	СуммаКРаспределению = Превышение;
	
	СоответствиеСписания = Новый Соответствие;
	
	РазмерТаблицы = Зачтено.Количество();
	
	Для Сч = 1 По РазмерТаблицы Цикл
		
		СтрокаТаблицы = Зачтено[РазмерТаблицы - Сч];
		
		Если Не СтрокаТаблицы.ДоступноРедактирование Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаЗачтено < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКОтмене = Мин(СтрокаТаблицы.СуммаЗачтено, СуммаКРаспределению);
		СуммаКРаспределению = СуммаКРаспределению - СуммаКОтмене;
		
		СоответствиеСписания.Вставить(СтрокаТаблицы.ПолучитьИдентификатор(), СуммаКОтмене);
		
		Если СуммаКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтменитьЗачетНаСервере(СоответствиеСписания, Ложь, Отказ);
	
КонецПроцедуры

&НаСервере
Функция ЗаблокироватьДокументыДляРедактирования(МассивСтрок, ИмяТаблицы)
	
	Отказ = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаФормы = ЭтаФорма[ИмяТаблицы];
	
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		
		СтрокаТаблицы = ТаблицаФормы.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИндексСтроки = ТаблицаФормы.Индекс(СтрокаТаблицы);
		
		Если СтрокаТаблицы = Неопределено
			Или СтрокаТаблицы.ДанныеИзменены Или Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВерсияДанных <> ВерсияДанныхДокумента(СтрокаТаблицы.Документ) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось заблокировать %1. Данные были изменены или удалены другим пользователем.'"),
				СтрокаТаблицы.Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				ИмяТаблицы + "[" + (ИндексСтроки) + "].Документ");
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ (ПоЗаказу И РасчетыПоЗаказам)
			И НЕ РасчетыПоДоговорам
			И ЗначениеЗаполнено(СтрокаТаблицы.Заказ) 
			И СтрокаТаблицы.Дата < ДатаДокумента Тогда
			ИзменениеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(
				ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ),
				Документ, Ложь);
			ДокументСообщения=Документ;
		Иначе
			ИзменениеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(
				ОбщегоНазначения.ИмяТаблицыПоСсылке(СтрокаТаблицы.Документ),
				СтрокаТаблицы.Документ, Ложь);
			ДокументСообщения = СтрокаТаблицы.Документ
		КонецЕсли;
		
		Если ИзменениеЗапрещено Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось изменить %1. Документ находится в запрещенном для изменения периоде.'"),
				ДокументСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				ИмяТаблицы + "[" + (ИндексСтроки) + "].Документ");
			Отказ = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(
				СтрокаТаблицы.Документ,
				,// ВерсияДанных
				УникальныйИдентификатор);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось заблокировать %1. %2'"),
				СтрокаТаблицы.Документ,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				ИмяТаблицы + "[" + (ИндексСтроки) + "].Документ");
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область ЗаписьИзменений

&НаКлиенте
Процедура СохранитьРезультатЗачетаОплатыИЗакрыть()
	
	Перем МассивОбработанныхДокументов;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	ЗаписатьИзмененияНаСервере(МассивОбработанныхДокументов, Отказ);
	
	Если ЕстьРасчетыМеждуОрганизациями И МассивОбработанныхДокументов.Количество() > 0
		И НЕ СоответствуютЗеркальнымПлатежам(МассивОбработанныхДокументов) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивОбработанныхДокументов", МассивОбработанныхДокументов);
		ДополнительныеПараметры.Вставить("Документ", Документ);
				
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			СторонаОплатыТекст = ?(ЗеркальныйЗачетОплатыМеждуОрганизациями, НСтр("ru = 'комиссионера'"),НСтр("ru = 'комитента'") );
			СторонаОплатыВыполненоТекст = ?(ЗеркальныйЗачетОплатыМеждуОрганизациями, НСтр("ru = 'комитента'"),НСтр("ru = 'комиссионера'") );
		Иначе
			СторонаОплатыТекст = ?(ЗеркальныйЗачетОплатыМеждуОрганизациями, НСтр("ru = 'получателя'"),НСтр("ru = 'отправителя'") );
			СторонаОплатыВыполненоТекст = ?(ЗеркальныйЗачетОплатыМеждуОрганизациями, НСтр("ru = 'отправителя'"),НСтр("ru = 'получателя'") );
		КонецЕсли;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести зачет'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отказаться'"));
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зачтена оплата на стороне %1. 
			|Провести зачет аналогичных платежей на стороне %2?'"), СторонаОплатыВыполненоТекст ,СторонаОплатыТекст);

		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьЗеркальныеИзмененияДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, СписокКнопок);
	КонецЕсли;
	
	ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов);
	
	Оповестить("ЗачтенаОплата", Документ);
	
	Если Не Отказ Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере(МассивОбработанныхДокументов, Отказ)
	
	МассивОбработанныхДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить("Авансы");
	МассивТаблиц.Добавить("Оплаты");
	МассивТаблиц.Добавить("Зачтено");
	
	Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
		
		ТаблицаФормы = ЭтаФорма[ИмяТаблицы];
		
		Для Каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		
			Если Не СтрокаТаблицы.ДанныеИзменены Тогда
				Продолжить;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			ИндексСтроки = ТаблицаФормы.Индекс(СтрокаТаблицы);
			ПолеОшибки = ИмяТаблицы + "[" + (ИндексСтроки) + "].Документ";
			
			ДанныеДокумента = Новый Структура("Организация, Партнер, Валюта");
			ДанныеКор       = Новый Структура("Партнер, Заказ, ВалютаВзаиморасчетов, Организация");
			Суммы           = Новый Структура("СуммаЗачтено, СуммаВВалютеПлатежа, СуммаРегл, СуммаУпр");
			ЗаполнитьЗначенияСвойств(ДанныеДокумента, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(ДанныеКор, СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(Суммы, СтрокаТаблицы);
			
			Если ИмяТаблицы = "Оплаты" 
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Заказ) И НЕ СтрокаТаблицы.РасшифровкаОбъектаРасчетов Тогда
				
				Суммы.СуммаЗачтено = 0;
				
				ОтразитьЗачетОплатыВДокументе(
					СтрокаТаблицы.Документ,
					ДанныеДокумента,
					Суммы,
					ПолеОшибки,
					Отказ);
				
			ИначеЕсли ИмяТаблицы = "Авансы" Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
					
					Суммы.СуммаЗачтено = 0;
					
					ПолеОшибки = ИмяТаблицы + "[" + (ИндексСтроки) + "].Заказ";
					ОтразитьЗачетАвансаВДокументе(
						СтрокаТаблицы.Документ,
						ДанныеКор,
						Суммы,
						ПолеОшибки,
						Отказ);
					
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
				
				СоздатьВзаимозачетЗадолженности(ДанныеКор, Суммы, ПолеОшибки, Отказ);
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Документ) = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
				
				ОтразитьЗачетАвансаВДокументе(
					СтрокаТаблицы.Документ,
					ДанныеКор,
					Суммы,
					ПолеОшибки,
					Отказ);
				
			Иначе
					
				Если ИмяТаблицы = "Оплаты" Тогда
					Суммы.СуммаЗачтено = 0;
				КонецЕсли;
				
				Если НЕ (РасчетыПоЗаказам И ПоЗаказу) И НЕ РасчетыПоДоговорам
					И ЗначениеЗаполнено(СтрокаТаблицы.Заказ)
					И СтрокаТаблицы.РасшифровкаОбъектаРасчетов Тогда
						
					ОтразитьЗачетОплатыВДокументе(ОбъектРасчетов,
						ДанныеДокумента,
						Суммы,
						ПолеОшибки,
						Отказ,
						СтрокаТаблицы.Документ)
				Иначе
					ОтразитьЗачетОплатыВДокументе(
						СтрокаТаблицы.Документ,
						ДанныеДокумента,
						Суммы,
						ПолеОшибки,
						Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
				МассивОбработанныхДокументов.Добавить(СтрокаТаблицы.Документ);
				СтрокаТаблицы.ДанныеИзменены = Ложь;
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Восстановим последовательность расчетов с партнером.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер В (&Партнер)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|");
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	Запрос.УстановитьПараметр("Партнер",     ДоступныеПартнеры);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	
	ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
	МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("КлючАналитики");
	
	Если ЕстьРасчетыСКлиентами И МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(КонецРасчета, АналитикиРасчета);
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками  И МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
		АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
		РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(КонецРасчета, АналитикиРасчета);
	КонецЕсли;
	
	РазблокироватьДокументыДляРедактирования();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьЗачетОплатыВДокументе(ДокументСсылка, ДанныеДокумента, СтруктураСумм, ПолеОшибки, Отказ, ОбъектРасчетовЗачета = Неопределено)
	
	Если ОбъектРасчетовЗачета = Неопределено Тогда
		ОбъектРасчетовЗачета = ОбъектРасчетов;
	КонецЕсли;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ЭтоАвансовыйОтчет = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет"));
	ЭтоВводОстатков = (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводОстатков"));
	Если ЭтоАвансовыйОтчет Тогда
		ИмяТабличнойЧасти = "ОплатаПоставщикам";
	ИначеЕсли ЭтоВводОстатков Тогда
		Если ЕстьРасчетыМеждуОрганизациями Тогда
			ИмяТабличнойЧасти = "РасчетыМеждуОрганизациями";
		Иначе
			ИмяТабличнойЧасти = "РасчетыСПартнерами";
		КонецЕсли;
	Иначе
		ИмяТабличнойЧасти = ИмяТабличнойЧастиПоУмолчанию(ДокументСсылка);
	КонецЕсли;
	
	ТаблицаРасшифровкаПлатежа = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить();
	Колонки = ТаблицаРасшифровкаПлатежа.Колонки;
	
	Если ТаблицаРасшифровкаПлатежа.Количество() = 0 И Метаданные.ОпределяемыеТипы.ОбъектРасчетовНакладная.Тип.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(ДокументОбъект.СуммаДокумента, ДокументОбъект.СуммаВзаиморасчетов, ТаблицаРасшифровкаПлатежа);
	КонецЕсли;
	
	Если Колонки.Найти("СуммаВзаиморасчетов") = Неопределено Тогда
		Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если Колонки.Найти("Заказ") = Неопределено Тогда
		Колонки.Добавить("Заказ");
	КонецЕсли;
	
	Если ЭтоВводОстатков Тогда
		
		МассивОбъектовРасчетов = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов");
		ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивОбъектовРасчетов, "Заказ");
		
		МассивСумм = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("Сумма");
		ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	ЕстьКолонкаПартнер = Ложь;
	ЕстьКолонкаПоставщик = Ложь;
	
	СтруктураОтбор = Новый Структура;
	Если Колонки.Найти("Партнер") <> Неопределено И (Партнер <> Справочники.Партнеры.НашеПредприятие) Тогда
		СтруктураОтбор.Вставить("Партнер", ДанныеДокумента.Партнер);
		ЕстьКолонкаПартнер = Истина;
	КонецЕсли;
	Если Колонки.Найти("Поставщик") <> Неопределено Тогда
		СтруктураОтбор.Вставить("Поставщик", ДанныеДокумента.Партнер);
		ЕстьКолонкаПоставщик = Истина;
	КонецЕсли;
	Если Колонки.Найти("Контрагент") <> Неопределено Тогда
		СтруктураОтбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЭтоВводОстатков Тогда
		СтруктураОтбор.Вставить("ВалютаВзаиморасчетов", ДанныеДокумента.Валюта);
	КонецЕсли;
	
	ЕстьОснованиеПлатежа = (Колонки.Найти("ОснованиеПлатежа") <> Неопределено);
	
	Если СтруктураОтбор.Количество() = 0 Тогда
		МассивСтрок = Новый Массив;
		Для каждого СтрокаРасшифровки Из ТаблицаРасшифровкаПлатежа Цикл
			МассивСтрок.Добавить(СтрокаРасшифровки);
		КонецЦикла;
	Иначе
		МассивСтрок = ТаблицаРасшифровкаПлатежа.НайтиСтроки(СтруктураОтбор);
	КонецЕсли;
	
	ДанныеИзменены = Ложь;
	
	ПересчитыватьСуммуНДС = (ТаблицаРасшифровкаПлатежа.Колонки.Найти("СуммаНДС") <> Неопределено);
	
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если СтруктураСумм.СуммаЗачтено = 0 Тогда
		
			Если СтрокаДокумента.Заказ = ОбъектРасчетовЗачета Тогда
				
				СтрокаДокумента.Заказ = Неопределено;
				Если ЕстьОснованиеПлатежа Тогда
					СтрокаДокумента.ОснованиеПлатежа = Неопределено;
				КонецЕсли;
				Если ПересчитыватьСуммуНДС Тогда
					СтрокаДокумента.СтавкаНДС = Неопределено;
					СтрокаДокумента.СуммаНДС = 0;
				КонецЕсли;
				ДанныеИзменены = Истина;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.Заказ = ОбъектРасчетовЗачета
			Или СтрокаДокумента.Заказ = Договор
			Или Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) 
			Или  СтрокаДокумента.Заказ =  ДокументОбъект.Ссылка Тогда
			
			СуммаСтрокиДокумента = СтрокаДокумента.Сумма;
			СуммаВВалютеПлатежа  = СтруктураСумм.СуммаВВалютеПлатежа;
			
			Списано = ВзаиморасчетыСервер.СписатьСуммуПропорционально(СтрокаДокумента.Сумма, СтруктураСумм.СуммаЗачтено, СтрокаДокумента.СуммаВзаиморасчетов);
			
			Если ТипыПлатежныхДокументов.НайтиПоЗначению(ТипЗнч(ОбъектРасчетовЗачета)) <> Неопределено
				ИЛИ ВалютаВзаиморасчетов = СтрокаДокумента.ВалютаВзаиморасчетов Тогда
				
				СписаноВВалютеВзаиморасчетов = ВзаиморасчетыСервер.СписатьСумму(
					СтрокаДокумента.СуммаВзаиморасчетов,
					СтруктураСумм.СуммаЗачтено);
					
			Иначе
				
				ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаВзаиморасчетов,
					Списано,
					СуммаСтрокиДокумента);
					
				СписаноВВалютеВзаиморасчетов = СтруктураСумм.СуммаЗачтено;
			КонецЕсли;
			
			ДанныеИзменены = Истина;
			
			Если ПересчитыватьСуммуНДС Тогда
				СписаноНДС = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаНДС,
					Списано,
					СуммаСтрокиДокумента);
			КонецЕсли;
			
			СписаноРегл = 0;
			Если ЭтоВводОстатков Тогда
				СуммаСписаноРегл = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаРегл,
					Списано,
					СуммаСтрокиДокумента);
				СуммаСписаноУпр = ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаУпр,
					Списано,
					СуммаСтрокиДокумента);
			КонецЕсли;
			
			Если СуммаСтрокиДокумента = Списано Тогда
				СтрокаОплаты = СтрокаДокумента;
			Иначе
				СтрокаОплаты = ТаблицаРасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтрокаДокумента);
				Если СтрокаДокумента.Заказ = ОбъектРасчетовЗачета Тогда
					СтрокаДокумента.Заказ = Неопределено;
					Если ЕстьОснованиеПлатежа Тогда
						СтрокаДокумента.ОснованиеПлатежа = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДанныеИзменены = Истина;
			КонецЕсли;
			
			СтрокаОплаты.Сумма = Списано;
			СтрокаОплаты.СуммаВзаиморасчетов = СписаноВВалютеВзаиморасчетов;
			
			Если ПересчитыватьСуммуНДС Тогда
				СтрокаОплаты.СуммаНДС = СписаноНДС;
			КонецЕсли;
			
			Если ЭтоВводОстатков Тогда
				СтрокаОплаты.СуммаРегл = СуммаСписаноРегл;
				СтрокаОплаты.СуммаУпр = СуммаСписаноУпр;
			КонецЕсли;
			
			Если ТипыПлатежныхДокументов.НайтиПоЗначению(ТипЗнч(ОбъектРасчетовЗачета)) = Неопределено
				И СтрокаОплаты.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
				СтрокаОплаты.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
				ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если СтрокаОплаты.Заказ <> ОбъектРасчетовЗачета Тогда
				СтрокаОплаты.Заказ = ОбъектРасчетовЗачета;
				ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если ДанныеДокумента.Партнер <> Партнер Тогда
				Если ЕстьКолонкаПартнер Тогда
					СтрокаОплаты.Партнер = Партнер;
					ДанныеИзменены = Истина;
				КонецЕсли;
				Если ЕстьКолонкаПоставщик Тогда
					СтрокаОплаты.Поставщик = Партнер;
					ДанныеИзменены = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОснованиеПлатежа И Не ЗначениеЗаполнено(СтрокаОплаты.ОснованиеПлатежа) Тогда
				СтрокаОплаты.ОснованиеПлатежа = СтрокаОплаты.Заказ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеИзменены Тогда
		
		ИменаКолонок = "";
		МассивИсключаемыхКолонок = Новый Массив;
		МассивИсключаемыхКолонок.Добавить("НомерСтроки");
		МассивИсключаемыхКолонок.Добавить("ИдентификаторСтроки");
		МассивИсключаемыхКолонок.Добавить("Сумма");
		МассивИсключаемыхКолонок.Добавить("СуммаВзаиморасчетов");
		МассивИсключаемыхКолонок.Добавить("СуммаРегл");
		Для Каждого Колонка Из Колонки Цикл
			Если МассивИсключаемыхКолонок.Найти(Колонка.Имя) = Неопределено Тогда
				ИменаКолонок = ИменаКолонок + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		ИменаКолонок = Лев(ИменаКолонок, СтрДлина(ИменаКолонок) - 1);
		ИменаКолонокСуммирования = "Сумма, СуммаВзаиморасчетов";
		Если ЭтоВводОстатков Тогда
			ИменаКолонокСуммирования = ИменаКолонокСуммирования + ", СуммаРегл";
		КонецЕсли;
		
		ТаблицаРасшифровкаПлатежа.Свернуть(ИменаКолонок, ИменаКолонокСуммирования);
		ТаблицаРасшифровкаПлатежа.Сортировать("Заказ");
		
		Если ЭтоВводОстатков Тогда
			
			МассивОбъектовРасчетов = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("Заказ");
			ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивОбъектовРасчетов, "ОбъектРасчетов");
			
			МассивСумм = ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("СуммаВзаиморасчетов");
			ТаблицаРасшифровкаПлатежа.ЗагрузитьКолонку(МассивСумм, "Сумма");
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетовЗачета, "Дата, Номер");
			
			Для Каждого СтрокаТаблицы Из ТаблицаРасшифровкаПлатежа Цикл
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов)
				 И Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
					СтрокаТаблицы.НомерРасчетногоДокумента = ЗначенияРеквизитов.Номер;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов)
				 И Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
					СтрокаТаблицы.ДатаРасчетногоДокумента = ЗначенияРеквизитов.Дата;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
					СтрокаТаблицы.НомерРасчетногоДокумента = "";
					СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ВводОстатков") Тогда
			ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(ТаблицаРасшифровкаПлатежа,
				ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ДанныеДокумента.Валюта, ТаблицаРасшифровкаПлатежа.ВыгрузитьКолонку("Заказ")));
		КонецЕсли;
		
		ДокументОбъект[ИмяТабличнойЧасти].Загрузить(ТаблицаРасшифровкаПлатежа);
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать документ %1. %2'"),
					ДокументСсылка,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
			КонецПопытки;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать документ %1'"),
				ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтразитьЗачетАвансаВДокументе(ДокументВзаимозачета, ДанныеКор, СтруктураСумм, ПолеОшибки, Отказ)
	
	ДокументОбъект = ДокументВзаимозачета.ПолучитьОбъект();
	
	КорСтруктураСумм = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураСумм);
	
	ОтборЗачета = Новый Структура;
	ОтборЗачета.Вставить("ТипРасчетов", 
		?(ЕстьРасчетыСКлиентами, 
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком));
	ОтборЗачета.Вставить("Партнер", Партнер);
	ОтборЗачета.Вставить("Заказ", ОбъектРасчетов);
	
	ОтборАванса = Новый Структура;
	ОтборАванса.Вставить("ТипРасчетов", ОтборЗачета.ТипРасчетов);
	ОтборАванса.Вставить("Партнер", ДанныеКор.Партнер);
	ОтборАванса.Вставить("Заказ", ДанныеКор.Заказ);
	
	ДебиторскаяЗадолженность = ДокументОбъект.ДебиторскаяЗадолженность.Выгрузить();
	
	МассивСтрок = ДебиторскаяЗадолженность.НайтиСтроки(?(ЕстьРасчетыСКлиентами, ОтборЗачета, ОтборАванса));
	Списано = 0;
	СуммаРасчетов = 0;
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если СтруктураСумм.СуммаЗачтено = 0 Тогда
			ДебиторскаяЗадолженность.Удалить(СтрокаДокумента);
		Иначе
			
			Если СтруктураСумм.СуммаЗачтено < СтрокаДокумента.СуммаВзаиморасчетов Тогда
				
				Списано = Списано + (СтрокаДокумента.СуммаВзаиморасчетов - СтруктураСумм.СуммаЗачтено);
				СтрокаДокумента.СуммаВзаиморасчетов = СтрокаДокумента.СуммаВзаиморасчетов - Списано;
				
				СуммаРасчетов = СуммаРасчетов + СтрокаДокумента.СуммаВзаиморасчетов ;
				СтрокаДокумента.СуммаРегл           = СтруктураСумм.СуммаРегл;
				СтрокаДокумента.СуммаУпр            = СтруктураСумм.СуммаУпр;
				
			КонецЕсли;
			
			Если ЕстьРасчетыСКлиентами Тогда
				СтрокаДокумента.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			КонецЕсли;
			
			СтруктураСумм.СуммаЗачтено        = СтруктураСумм.СуммаЗачтено - СтрокаДокумента.СуммаВзаиморасчетов;
			СтруктураСумм.СуммаРегл           = СтруктураСумм.СуммаРегл - СтрокаДокумента.СуммаРегл;
			СтруктураСумм.СуммаУпр            = СтруктураСумм.СуммаУпр - СтрокаДокумента.СуммаУпр;
		КонецЕсли;
		
	КонецЦикла;
	
	КредиторскаяЗадолженность = ДокументОбъект.КредиторскаяЗадолженность.Выгрузить();
	
	МассивСтрок = КредиторскаяЗадолженность.НайтиСтроки(?(ЕстьРасчетыСКлиентами, ОтборАванса, ОтборЗачета));
	
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если КорСтруктураСумм.СуммаЗачтено = 0 Тогда
			КредиторскаяЗадолженность.Удалить(СтрокаДокумента);
		Иначе
			
			СуммаРегл = КорСтруктураСумм.СуммаРегл;
			
			Если КорСтруктураСумм.СуммаРегл < СтрокаДокумента.СуммаРегл Тогда
				
				ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаВзаиморасчетов,
					СтрокаДокумента.СуммаРегл - СуммаРегл,
					СтрокаДокумента.СуммаРегл);
				
				СтрокаДокумента.СуммаРегл = КорСтруктураСумм.СуммаРегл;
				СтрокаДокумента.СуммаУпр = КорСтруктураСумм.СуммаУпр;
				
			Иначе
				ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаВзаиморасчетов,
					Списано,
					СуммаРасчетов);
				
				ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаРегл,
					Списано,
					СуммаРасчетов);
				
				ВзаиморасчетыСервер.СписатьСуммуПропорционально(
					СтрокаДокумента.СуммаУпр,
					Списано,
					СуммаРасчетов);
				
			КонецЕсли;
			
			КорСтруктураСумм.СуммаРегл = КорСтруктураСумм.СуммаРегл - СтрокаДокумента.СуммаРегл;
			КорСтруктураСумм.СуммаУпр = КорСтруктураСумм.СуммаУпр - СтрокаДокумента.СуммаУпр;
			
			ВзаиморасчетыСервер.СписатьСуммуПропорционально(
				КорСтруктураСумм.СуммаЗачтено,
				СуммаРегл - КорСтруктураСумм.СуммаРегл,
				СуммаРегл);
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ДебиторскаяЗадолженность.Загрузить(ДебиторскаяЗадолженность);
	ДокументОбъект.КредиторскаяЗадолженность.Загрузить(КредиторскаяЗадолженность);
	
	ДокументОбъект.СуммаРегл = ДебиторскаяЗадолженность.Итог("СуммаРегл");
	ДокументОбъект.СуммаУпр  = ДебиторскаяЗадолженность.Итог("СуммаУпр");
	
	Если КредиторскаяЗадолженность.Количество() = 0
		И ДебиторскаяЗадолженность.Количество() = 0 Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать документ %1. %2'"),
				ДокументВзаимозачета,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецПопытки;
		
	ИначеЕсли ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать документ %1. %2'"),
				ДокументВзаимозачета,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
		КонецПопытки;
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось записать документ %1'"),
			ДокументВзаимозачета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВзаимозачетЗадолженности(ДанныеКор, СтруктураСумм, ПолеОшибки, Отказ)
	
	Сумма = СтруктураСумм.СуммаЗачтено;
	
	ДокументОбъект = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	
	
	
	Если МассивТипов.Найти(ТипЗнч(Документ)) = Неопределено Тогда
		ДокументОбъект.Дата = КонецДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата"));
	Иначе
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	ДокументОбъект.ДокументОснование = Документ;
	
	ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой ""Зачет оплат"".'");
	
	ТипКонтрагента = Неопределено;
	Если ЕстьРасчетыМеждуОрганизациями Тогда
		
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный;
		ТипКонтрагента = ?(ЕстьРасчетыСКлиентами,
			Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент,
			Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик);
			
	ИначеЕсли ЕстьРасчетыСКлиентами Тогда
		ДокументОбъект.ВидОперации  = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента;
		ТипКонтрагента = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
	Иначе //РасчетыСПоставщиками
		ДокументОбъект.ВидОперации  = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика;
		ТипКонтрагента = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
	КонецЕсли;
	
	Если ДанныеКор.Организация <> Организация Тогда
		ДокументОбъект.Организация    = ГоловнаяОрганизация;
	Иначе
		ДокументОбъект.Организация    = Организация;
	КонецЕсли;
	
	ДокументОбъект.КонтрагентКредитор = Контрагент;
	ДокументОбъект.КонтрагентДебитор  = Контрагент;
	ДокументОбъект.ТипДебитора        = ТипКонтрагента;
	ДокументОбъект.ТипКредитора       = ТипКонтрагента;
	ДокументОбъект.СуммаРегл          = СтруктураСумм.СуммаРегл;
	ДокументОбъект.СуммаУпр           = СтруктураСумм.СуммаУпр;
	
	Если ЕстьРасчетыСКлиентами Тогда
		СтрокаАванса = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
		СтрокаЗачета = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
	Иначе
		СтрокаАванса = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
		СтрокаЗачета = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
	КонецЕсли;
	
	СтрокаАванса.Организация          = Организация;
	СтрокаАванса.Партнер              = Партнер;
	СтрокаАванса.Заказ                = ОбъектРасчетов;
	СтрокаАванса.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	СтрокаАванса.СуммаВзаиморасчетов  = Сумма;
	СтрокаАванса.СуммаРегл            = СтруктураСумм.СуммаРегл;
	СтрокаАванса.СуммаУпр             = СтруктураСумм.СуммаУпр;
	
	ЗаполнитьЗначенияСвойств(СтрокаЗачета, ДанныеКор);
	СтрокаЗачета.СуммаВзаиморасчетов = СтруктураСумм.СуммаВВалютеПлатежа;
	СтрокаЗачета.СуммаРегл           = СтруктураСумм.СуммаРегл;
	СтрокаЗачета.СуммаУпр            = СтруктураСумм.СуммаУпр;

	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать документ взаимозачета. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПолеОшибки, , Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов)
	
	Если МассивОбработанныхДокументов.Количество() = 0 Тогда
		Текст = НСтр("ru='Изменений в зачете оплаты не было'");
		Пояснение = НСтр("ru='Изменений в документах при зачете оплаты не было'");
		ПоказатьОповещениеПользователя(
			Текст,
			, // НавигационнаяСсылка
			Пояснение,
			БиблиотекаКартинок.Информация32);
	Иначе
		Для Каждого ДокументСсылка Из МассивОбработанныхДокументов Цикл
			Текст = НСтр("ru='Изменен зачет оплаты'");
			Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменен зачет оплаты по документу: %1'"),
				ДокументСсылка);
			ПоказатьОповещениеПользователя(
				Текст,
				ПолучитьНавигационнуюСсылку(ДокументСсылка),
				Пояснение,
				БиблиотекаКартинок.Информация32);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДокументыДляРедактирования()
	
	РазблокироватьДанныеДляРедактирования(
			, // Ключ
			УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	РазблокироватьДокументыДляРедактирования();
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуЗачета()
	
	СуммаЗачета = Зачтено.Итог("СуммаЗачтено");
	
	Если СуммаЗачета < СуммаВзаиморасчетов Тогда
		Недостает = СуммаВзаиморасчетов - СуммаЗачета;
		Превышение = 0;
	Иначе
		Недостает = 0;
		Превышение = СуммаЗачета - СуммаВзаиморасчетов;
	КонецЕсли;
	
	Элементы.ИсправитьПревышение.Видимость = (Превышение > 0);
	
	ОбновитьИнформационнуюНадписьИтогов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационнуюНадписьИтогов()
	
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сумма к оплате %1 %2.'"),
		Формат(СуммаВзаиморасчетов, "ЧДЦ=2; ЧРД=; ЧН="),
		ВалютаВзаиморасчетов)));
	
	МассивСтрок.Добавить("   ");
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Зачтено на сумму %1 %2.'"),
		Формат(СуммаЗачета, "ЧДЦ=2; ЧРД=; ЧН="),
		ВалютаВзаиморасчетов)));
	
	Если Недостает > 0 Тогда
		
		МассивСтрок.Добавить("   ");
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Недостает %1 %2.'"),
			Формат(Недостает, "ЧДЦ=2; ЧРД=; ЧН="),
			ВалютаВзаиморасчетов);
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Текст, , ЦветаСтиля.ПросроченныеДанныеЦвет));
		
	ИначеЕсли Превышение > 0 Тогда
		
		МассивСтрок.Добавить("   ");
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Превышение на %1 %2.'"),
			Формат(Превышение, "ЧДЦ=2; ЧРД=; ЧН="),
			ВалютаВзаиморасчетов);
			
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Текст, , ЦветаСтиля.ПросроченныеДанныеЦвет));
		
	КонецЕсли;
	
	ИнформационнаяНадпись = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформационнуюНадписьОтборы()
	
	НадписьОтборы = НСтр("ru='%Организация%, %Партнер%, %Контрагент%, %Договор%'");
	
	Если Не ИспользоватьДоговоры Тогда
		НадписьОтборы = СтрЗаменить(НадписьОтборы, ", %Договор%", "");
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		НадписьОтборы = СтрЗаменить(НадписьОтборы, ", %Контрагент%", "");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		НадписьОтборы = СтрЗаменить(НадписьОтборы, "%Организация%,", "");
	КонецЕсли;
	
	НадписьОтборы = СтрЗаменить(НадписьОтборы,"%Организация%",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Организация: %1'"), Организация));
	НадписьОтборы = СтрЗаменить(НадписьОтборы,"%Партнер%",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Партнер: %1'"), Партнер));
	НадписьОтборы = СтрЗаменить(НадписьОтборы,"%Контрагент%",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Контрагент: %1'"), Контрагент));
	НадписьОтборы = СтрЗаменить(НадписьОтборы,"%Договор%",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Договор: %1'"), Договор));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДоговорам()
	
	Если Не ИспользоватьДоговоры Или ПоВсемДоговорам = 1 Тогда
		Элементы.Авансы.ОтборСтрок = Неопределено;
	Иначе
		ОтборАвансы = Новый ФиксированнаяСтруктура("Договор", Договор);
		Элементы.Авансы.ОтборСтрок = ОтборАвансы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьСуммуВВалютуВзаиморасчетов(Сумма, ИсходнаяВалюта, Знач ДатаКурса = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДатаКурса) Тогда
		ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Результат = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(
		Сумма, ИсходнаяВалюта, ВалютаВзаиморасчетов, ДатаКурса);
		
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РасчитатьКоличествоСтрок()
	
	ОплатыКоличествоСтрок = Оплаты.Количество();
	АвансыКоличествоСтрок = Авансы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗеркальныеИзмененияДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		МассивОбработанныхДокументов = ВыполнитьЗеркальныеИзмененияДокументовНаСервере(ДополнительныеПараметры.МассивОбработанныхДокументов);
			
		Если МассивОбработанныхДокументов.Количество() > 0 Тогда
			ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов);
			
			Оповестить("ЗачтенаОплата", ДополнительныеПараметры.Документ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствуютЗеркальнымПлатежам(МассивОбработанныхДокументов)
	
	Соответствуют = Истина;
	
	Для Каждого ДокументСсылка Из МассивОбработанныхДокументов Цикл
		
		ЗеркальныйПлатежСсылка = Неопределено;
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			
			ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументСсылка);
			
			Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
				Если Не Документы.СписаниеБезналичныхДенежныхСредств.СоответствуетЗеркальномуПлатежу(ДокументСсылка,ЗеркальныйПлатежСсылка) Тогда
					Соответствуют = Ложь;
				КонецЕсли;				
			КонецЕсли;

		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
			
			ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументСсылка);
			
			Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
				Если Не Документы.ПоступлениеБезналичныхДенежныхСредств.СоответствуетЗеркальномуПлатежу(ДокументСсылка,ЗеркальныйПлатежСсылка) Тогда
					Соответствуют = Ложь;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствуют;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗеркальныеИзмененияДокументовНаСервере(МассивОбработанныхДокументов)
	
	ОбработанныеДокументы = Новый Массив();
	
	Для Каждого ДокументСсылка Из МассивОбработанныхДокументов Цикл
		
		ЗеркальныйПлатежСсылка = Неопределено;
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументСсылка);
			
			Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
				ЗеркальныйПлатежОбъект = ЗеркальныйПлатежСсылка.ПолучитьОбъект();
				Успешно = Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ДокументСсылка,ЗеркальныйПлатежОбъект);
				
				Если Успешно Тогда
					Попытка
						ЗеркальныйПлатежОбъект.Записать(РежимЗаписиДокумента.Проведение);
						ОбработанныеДокументы.Добавить(ЗеркальныйПлатежОбъект.Ссылка);
					Исключение
						КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Помощник зачета оплаты, зеркальное изменение документов оплат.'", КодОсновногоЯзыка),
							УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ВызватьИсключение;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
			ЗеркальныйПлатежСсылка = Документы.ПоступлениеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(ДокументСсылка);
			
			Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
				ЗеркальныйПлатежОбъект = ЗеркальныйПлатежСсылка.ПолучитьОбъект();
				Успешно = Документы.ПоступлениеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(ДокументСсылка,ЗеркальныйПлатежОбъект);
				
				Если Успешно Тогда
					Попытка
						ЗеркальныйПлатежОбъект.Записать(РежимЗаписиДокумента.Проведение);
						ОбработанныеДокументы.Добавить(ЗеркальныйПлатежОбъект.Ссылка);
					Исключение
						КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Помощник зачета оплаты, зеркальное изменение документов оплат.'",КодОсновногоЯзыка),
							УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ВызватьИсключение;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработанныеДокументы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа()
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов",МетаданныеДокумента) Тогда
		ПолеВалюта = "ВалютаВзаиморасчетов";
	Иначе
		ПолеВалюта = "Валюта";
	КонецЕсли;
	
	ИмяТЧ = ИмяТабличнойЧастиПоУмолчанию(Документ);
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента)
		И МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТЧ) <> Неопределено Тогда
		
		ИмяДокумента = МетаданныеДокумента.Имя;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.Заказ                       КАК Заказ,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов         КАК Сумма,
		|	РасшифровкаПлатежа.Ссылка.Организация          КАК Организация,
		|	РасшифровкаПлатежа.Ссылка.Партнер              КАК Партнер,
		|	РасшифровкаПлатежа.Ссылка.Контрагент           КАК Контрагент,
		|	РасшифровкаПлатежа.Ссылка.Договор              КАК Договор,
		|	РасшифровкаПлатежа.Ссылка.%ПолеВалюта% КАК Валюта
		|ИЗ
		|	Документ.%ИмяДокумента%.%ИмяТЧ% КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка
		|	И НЕ РасшифровкаПлатежа.Ссылка.Проведен
		|	И РасшифровкаПлатежа.Заказ <> Неопределено";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяДокумента%", ИмяДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяТЧ%", ИмяТЧ);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ПолеВалюта%", ПолеВалюта);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Документ);
		РасшифровкаПлатежа.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяТабличнойЧастиПоУмолчанию(ДокументСсылка)
	
	Если (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионера") И НЕ КомиссионноеВознаграждение)
		ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитенту") И КомиссионноеВознаграждение) 
		ИЛИ ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"))
			И ЗеркальныйЗачетОплатыМеждуОрганизациями) Тогда
		ИмяТЧ = "РасшифровкаПлатежаСКлиентом";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		Если ЗеркальныйЗачетОплатыМеждуОрганизациями И КомиссионноеВознаграждение Тогда
			ИмяТЧ = "РасшифровкаПлатежаСКлиентомВознаграждение";
		ИначеЕсли ЗеркальныйЗачетОплатыМеждуОрганизациями И НЕ КомиссионноеВознаграждение Тогда
			ИмяТЧ = "РасшифровкаПлатежаСКлиентом";
		ИначеЕсли НЕ ЗеркальныйЗачетОплатыМеждуОрганизациями И КомиссионноеВознаграждение Тогда
			ИмяТЧ = "РасшифровкаПлатежаСПоставщикомВознаграждение";
		Иначе
			ИмяТЧ = "РасшифровкаПлатежаСПоставщиком";
		КонецЕсли;
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитенту") И НЕ КомиссионноеВознаграждение)
		ИЛИ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионера") И КомиссионноеВознаграждение) 
		ИЛИ ((ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") 
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
				ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"))
			И НЕ ЗеркальныйЗачетОплатыМеждуОрганизациями) Тогда
		ИмяТЧ = "РасшифровкаПлатежаСПоставщиком";
	Иначе
		ИмяТЧ = "РасшифровкаПлатежа";
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

&НаСервере
Процедура УстановитьСтраницуАвансов()
	Если АвансыРассчитаны Тогда
		Элементы.ГруппаСтраницыАвансы.ТекущаяСтраница = Элементы.СтраницаРаспределениеВыполнено;
	Иначе
		Элементы.ГруппаСтраницыАвансы.ТекущаяСтраница = Элементы.СтраницаРаспределениеВыполняется;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьЗаданияКРаспределениюВзаиморасчетов(РасчетыСКлиентами, КлючиАналитики)
	
	Если ЕстьРасчетыСКлиентами Тогда
		ИмяРегистраЗаданий = "ЗаданияКРаспределениюРасчетовСКлиентами";
	Иначе
		ИмяРегистраЗаданий = "ЗаданияКРаспределениюРасчетовСПоставщиками";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Номер
	|ИЗ
	|	РегистрСведений.%1 КАК Задания
	|ГДЕ
	|	Задания.АналитикаУчетаПоПартнерам В (&КлючиАналитики)
	|	И Задания.Месяц <= &Месяц";
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяРегистраЗаданий);
	Запрос.УстановитьПараметр("КлючиАналитики",КлючиАналитики);
	Запрос.УстановитьПараметр("Месяц",НачалоМесяца(ТекущаяДатаСеанса()));
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти
