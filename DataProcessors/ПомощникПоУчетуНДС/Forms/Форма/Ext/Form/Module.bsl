#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	ОбщегоНазначенияУТ.ОбработкаЗаполнения(Объект, Новый Структура, СтандартнаяОбработка); 
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Если Параметры.Свойство("НачалоПериода") Тогда
			Объект.НачалоПериода = Параметры.НачалоПериода;
		Иначе
			Объект.НачалоПериода = НачалоКвартала(ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода = КонецКвартала(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОрганизации();
	
	УправлениеТорговлей					= ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	ЗаполнениеРаздела7ДекларацииПоНДС	= ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС");
	
	Элементы.ГруппаРеестрПоНДС.Видимость					= НЕ УправлениеТорговлей;
	Элементы.ГруппаДекларацияПоНДС.Видимость				= НЕ УправлениеТорговлей;
	Элементы.ГруппаАнализСостоянияУчетаПоНДС.Видимость		= НЕ УправлениеТорговлей;
	Элементы.ГруппаСверкаДанныхУчетаНДС.Видимость			= НЕ УправлениеТорговлей;
	Элементы.ГруппаОтчетыПоНДСВЭлектронномВиде.Видимость	= НЕ УправлениеТорговлей;
	Элементы.ГруппаЗаполнениеРаздела7.Видимость				= НЕ УправлениеТорговлей И ЗаполнениеРаздела7ДекларацииПоНДС;
	Элементы.ДекорацияФормированиеЗаписейРаздела7.Видимость = НЕ УправлениеТорговлей И ЗаполнениеРаздела7ДекларацииПоНДС;
	
	Если УправлениеТорговлей Тогда
		Элементы.ГруппаТаможенныеДекларацииЭкспорт.Видимость = Ложь;
	КонецЕсли;
	
	Если УправлениеТорговлей Тогда
		Элементы.ДекорацияОтражениеДокументовВРеглУчете.Заголовок = НСтр("ru = 'Формирование записей книг покупок и продаж'");
	КонецЕсли;
	
	Элементы.ГруппаНДССостояниеРеализации0.Видимость       = Константы.ИспользоватьПродажиНаЭкспорт.Получить();
	Элементы.ГруппаСчетФактураКомитента.Видимость          = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	Элементы.ГруппаСчетФактураКомиссионеру.Видимость       = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");
	Элементы.ГруппаЗаявлениеОВвозеТоваров.Видимость        = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	Элементы.ДекорацияПодтвержденияОплатыВБюджет.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	
	Элементы.ГруппаЗаписиКнигиПродаж.Видимость           = ПолучитьФункциональнуюОпцию("ФормироватьОтчетностьПоНДС");
	Элементы.ГруппаЗаписиКнигиПокупок.Видимость          = ПолучитьФункциональнуюОпцию("ФормироватьОтчетностьПоНДС");
	
	ТолькоОформлениеДокументов = Ложь;
	Если Параметры.Свойство("ТолькоОформлениеДокументов", ТолькоОформлениеДокументов) Тогда
		УстановитьВидимостьОформлениеЭлементов();
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Период, Организация", Объект.НачалоПериода, Объект.Организация));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ЭтаФормаОткрытаИзФормыЗакрытияМесяца = ЗакрытиеМесяцаСервер.ЭтаФормаОткрытаИзФормыЗакрытияМесяца(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Организация) ИЛИ ЭтаФормаОткрытаИзФормыЗакрытияМесяца Тогда
		Настройки.Удалить("Объект.Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) ИЛИ ЭтаФормаОткрытаИзФормыЗакрытияМесяца Тогда
		Настройки.Удалить("Объект.НачалоПериода");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КонецПериода) ИЛИ ЭтаФормаОткрытаИзФормыЗакрытияМесяца Тогда
		Настройки.Удалить("Объект.КонецПериода");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки.Получить("ПоказатьПояснения") = Неопределено Тогда
		ПоказатьПояснения = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "Запись_СчетФактураПолученный"
		Или ИмяСобытия = "Запись_СчетФактураВыданный"
		Или ИмяСобытия = "Запись_СчетФактураНалоговыйАгент"
		Или ИмяСобытия = "Запись_СчетФактураПолученныйНалоговыйАгент"
		Или ИмяСобытия = "Запись_СчетФактураКомиссионера"
		Или ИмяСобытия = "Запись_СчетФактураКомитента"
		Или ИмяСобытия = "Запись_ТаможеннаяДекларацияЭкспорт"
		Или ИмяСобытия = "Запись_ТаможеннаяДекларацияИмпорт"
		Или ИмяСобытия = "Запись_ЗаписьКнигиПродаж"
		Или ИмяСобытия = "Запись_ЗаписьКнигиПокупок"
		Или ИмяСобытия = "Запись_СписаниеНДСНаРасходы"
		Или ИмяСобытия = "Запись_БлокировкаВычетаНДС" Тогда

		Если ПроверитьЗаполнение() Тогда
			УстановитьВидимостьОформлениеЭлементов();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	НачалоПериодаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	КонецПериодаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#Область ОбработчикиСобытийНажатие

&НаКлиенте
Процедура ДекорацияАнализСостоянияУчетаПоНДСНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияАнализСостоянияУчетаПоНДС.Нажатие");
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураПолученныйНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураПолученный.Нажатие");
	
	Если СтрЗаканчиваетсяНа(Элемент.Заголовок, ")") Тогда
		
		Форма = ПолучитьФорму("Отчет.НаличиеСчетовФактур.Форма.ФормаОтчета");
		Форма.Отчет.Организация   = Объект.Организация;
		Форма.Отчет.НачалоПериода = Объект.НачалоПериода;
		Форма.Отчет.КонецПериода  = Объект.КонецПериода;
		Форма.Отчет.НаличиеСчетаФактуры = Ложь;
		Форма.Отчет.СписокДокументов.Очистить();
		Форма.Открыть();
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Объект.Организация);
		
		ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураВыданныйНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураВыданный.Нажатие");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("Месяц", КонецМесяца(Объект.КонецПериода));
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Отбор);
		Если КОформлению.СчетФактураВыданный Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураВыданныйАвансНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураВыданныйАванс.Нажатие");
	
	Отбор = СтруктураОтбораПоШапке();
	Отбор.Вставить("ПравилоОтбораАванса", ПредопределенноеЗначение("Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ВсеОплаты"));
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Отбор);
		Если КОформлению.СчетФактураВыданныйАванс Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
			ПараметрыФормы.Вставить("ЗаполнитьПриОткрытии");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураВыданныйАванс.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураПолученныйНалоговыйАгентНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураПолученныйНалоговыйАгент.Нажатие");
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураОтбораПоШапке());
		Если КОформлению.СчетФактураПолученныйНалоговыйАгент Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураПолученныйАвансНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураПолученныйАванс.Нажатие");
	
	Отбор = СтруктураОтбораПоШапке();
	Отбор.Вставить("ОтборСостояние", "ТребуетсяРегистрацияСчетаФактуры");
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Отбор);
		Если КОформлению.СчетФактураПолученныйАванс Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
			ПараметрыФормы.Вставить("ЗаполнитьПриОткрытии");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураПолученныйАванс.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураНалоговыйАгентНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураНалоговыйАгент.Нажатие");
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураОтбораПоШапке());
		Если КОформлению.СчетФактураНалоговыйАгент Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураНалоговыйАгент.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураКомитентаНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураКомитента.Нажатие");
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураОтбораПоШапке());
		Если КОформлению.СчетФактураКомитента Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураКомитента.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСчетФактураКомиссионеруНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияСчетФактураКомиссионеру.Нажатие");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Отбор);
		Если КОформлению.СчетФактураКомиссионеру Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		Иначе
			Отбор.Вставить("НачалоПериода", Объект.НачалоПериода);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураКомиссионеру.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТаможенныеДекларацииИмпортНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияТаможеннаяДекларацияИмпорт.Нажатие");
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураОтбораПоШапке());
		Если КОформлению.ТаможеннаяДекларацияИмпорт Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ТаможеннаяДекларацияИмпорт.Форма.РабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаявлениеОВвозеТоваровНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияЗаявлениеОВвозеТоваров.Нажатие");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	Если КОформлению <> Неопределено Тогда
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Отбор);
		Если КОформлению.ЗаявлениеОВвозеТоваров Тогда
			ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению");
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПеречислениеНДСВБюджетНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ИмяКлючевойОперации = СтрШаблон("Обработка.ПомощникПоУчетуНДС.Форма.СписокДокументов.ДекорацияПеречислениеНДСВБюджетНажатие.%1",
									"Обработка.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Форма.СписокДокументов");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборЗаявлений", 2);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Обработка.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Форма.СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналДокументовНДСНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ИмяКлючевойОперации = СтрШаблон("Обработка.ПомощникПоУчетуНДС.Форма.СписокДокументов.ДекорацияЖурналДокументовНДСНажатие.%1",
									"Обработка.ЖурналДокументовНДС.Форма.СписокДокументов");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Обработка.ЖурналДокументовНДС.Форма.СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодтвержденияОплатыВБюджетНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ИмяКлючевойОперации = СтрШаблон("Обработка.ПомощникПоУчетуНДС.Форма.СписокДокументов.ДекорацияПодтвержденияОплатыВБюджет.%1",
									"Обработка.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Форма.СписокДокументов");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборЗаявлений", 1);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Обработка.ПеречислениеНДСВБюджетПоОтдельнымОперациям.Форма.СписокДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТаможенныеДекларацииЭкспортНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНДССостояниеРеализации0Нажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Элемент.ДекорацияНДССостояниеРеализации0.Нажатие");
	
	СтруктураПериод = Новый Структура("НачалоПериода, КонецПериода", НачалоКвартала(Объект.КонецПериода), Объект.КонецПериода);
	
	Форма = ОткрытьФорму("РегистрСведений.НДССостояниеРеализации0.Форма.ФормаРабочееМесто");
	Форма.Организация = Объект.Организация;
	Если СтрЗаканчиваетсяНа(Элемент.Заголовок, ")") Тогда
		Форма.Состояние = ПредопределенноеЗначение("Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение");
	КонецЕсли;
	Форма.НачалоПериода = СтруктураПериод.НачалоПериода;
	Форма.КонецПериода = СтруктураПериод.КонецПериода;
	Форма.ВыбратьПериодЗавершение(СтруктураПериод, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСписанияНДСнаРасходыНажатие(Элемент)
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
	СтруктураБыстрогоОтбора.Вставить("НачалоПериода", Объект.НачалоПериода);
	СтруктураБыстрогоОтбора.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Документ.СписаниеНДСнаРасходы.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПартииТоваровНажатие(Элемент)

	ОткрытьОперацииЗакрытияМесяца();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРаспределениеНДСНажатие(Элемент)

	ОткрытьОперацииЗакрытияМесяца();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтражениеДокументовВРеглУчетеНажатие(Элемент)
	
	ОткрытьОперацииЗакрытияМесяца();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеестрСчетовФактурВыданныхНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ВыставленныеСчетаФактуры");
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.НачалоПериода);
	ОткрытьФорму("Отчет.РеестрСчетовФактурДляСверки.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеестрСчетовФактурПолученныхНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ПолученныеСчетаФактуры");
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.НачалоПериода);
	ОткрытьФорму("Отчет.РеестрСчетовФактурДляСверки.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКнигаПокупокНажатие(Элемент)
	
	ПараметрыЗаполненияФормы = Новый Структура;
	ПараметрыЗаполненияФормы.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполненияФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗаполненияФормы.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЗаполненияФормы", ПараметрыЗаполненияФормы);
	ОткрытьФорму("Отчет.КнигаПокупок.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКнигаПродажНажатие(Элемент)
	
	ПараметрыЗаполненияФормы = Новый Структура;
	ПараметрыЗаполненияФормы.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполненияФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗаполненияФормы.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЗаполненияФормы", ПараметрыЗаполненияФормы);
	ОткрытьФорму("Отчет.КнигаПродаж.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналУчетаПолученныхВыставленныхСчетовФактурНажатие(Элемент)

	ПараметрыЗаполненияФормы = Новый Структура;
	ПараметрыЗаполненияФормы.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполненияФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыЗаполненияФормы.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЗаполненияФормы", ПараметрыЗаполненияФормы);
	ОткрытьФорму("Отчет.ЖурналУчетаСчетовФактур.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетыПоНДСВЭлектронномВидеНажатие(Элемент)

	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеестрДокументовПодтверждающихЛьготуНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФормированиеЗаписейРаздела7Нажатие(Элемент)
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеестрПоНДСНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДекларацияПоНДСНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСверкаДанныхУчетаНДСНажатие(Элемент)
	
	
	Возврат; // В УТ не требуется
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСнятиеБлокировкиВычетаНДСНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", Объект.КонецПериода);
	
	ОткрытьФорму("Документ.БлокировкаВычетаНДС.Форма.ФормаРабочееМесто", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаписиКнигиПродажНажатие(Элемент)
	
	Отбор = Новый Структура();
	Отбор.Вставить("НачалоПериода", Объект.НачалоПериода);
	Отбор.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Документ.ЗаписьКнигиПродаж.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаписиКнигиПокупокНажатие(Элемент)
	
	Отбор = Новый Структура();
	Отбор.Вставить("НачалоПериода", Объект.НачалоПериода);
	Отбор.Вставить("КонецПериода", Объект.КонецПериода);
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода, КонецПериода");
	Если ПроверитьЗаполнение() Тогда
		УстановитьВидимостьОформлениеЭлементов();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПояснения(Команда)
	
	ПоказатьПояснения = Не ПоказатьПояснения;
	УстановитьЗаголовокКомандыИВидимостьПояснений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализРаспределенияНДС(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.НачалоПериода);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Отчет.АнализРаспределенияНДС.Форма.ФормаОтчета", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояния(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Обработка.ПомощникПоУчетуНДС.Форма.Команда.ОбновитьСостояния");
	
	Если ПроверитьЗаполнение() Тогда
		УстановитьВидимостьОформлениеЭлементов();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокКомандыИВидимостьПояснений()
	
	Если ПоказатьПояснения Тогда
		Элементы.ФормаПояснения.Заголовок = НСтр("ru = 'Скрыть пояснения'");
	Иначе
		Элементы.ФормаПояснения.Заголовок = НСтр("ru = 'Показать пояснения'");
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если СтрЗаканчиваетсяНа(ЭлементФормы.Имя, "ExtendedTooltip") Или СтрЗаканчиваетсяНа(ЭлементФормы.Имя, "РасширеннаяПодсказка") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет и ПоказатьПояснения Тогда
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ИначеЕсли ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу и НЕ ПоказатьПояснения Тогда
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьЗаполнение() Тогда
		УстановитьВидимостьОформлениеЭлементов();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОформлениеЭлементов(ПроверятьРасширенныйНалоговыйПериод = Истина)
	
	Если ПроверятьРасширенныйНалоговыйПериод 
		И НачалоКвартала(Объект.КонецПериода) = Объект.НачалоПериода
		И КонецКвартала(Объект.КонецПериода) = КонецДня(Объект.КонецПериода) Тогда
		// Выбран квартал. В случае расширенного налогового периода необходимо правильно указать дату начала.
		Объект.НачалоПериода = УчетНДСПереопределяемый.НачалоНалоговогоПериода(
			Объект.Организация, Объект.КонецПериода);
	КонецЕсли;

	ОтобразитьПоясненияКПериодуОтчета();
	
	ЦветГиперссылкиНетДанных = Метаданные.ЭлементыСтиля.ЦветТекстаНеактуальногоСписка.Значение;
	ЦветГиперссылки = Метаданные.ЭлементыСтиля.ЦветГиперссылки.Значение;
	
	СтруктураВидимостиЭлементов = Обработки.ПомощникПоУчетуНДС.ВидимостьЭлементов(Объект.Организация, Объект.НачалоПериода);
	Для Каждого Элемент Из СтруктураВидимостиЭлементов Цикл
		Элементы["Декорация" + Элемент.Ключ].Видимость = Элемент.Значение;
	КонецЦикла;
	
	ЗаголовкиЭлементов = ОписаниеЗаголовковЭлементов();
	
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	
	ПараметрыДанных = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		ПараметрыДанных.Вставить("МассивОрганизаций", СписокДоступныхОрганизаций.ВыгрузитьЗначения());
	Иначе
		ПараметрыДанных.Вставить("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(Объект.Организация));
	КонецЕсли;
	
	ПараметрыДанных.Вставить("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	ПараметрыДанных.Вставить("КонецПериода",  КонецДня(Объект.КонецПериода));
	
	ДанныеИсточников = Обработки.ПомощникПоУчетуНДС.СформироватьЗапросПоДокументамКОформлению(ПараметрыДанных, СтруктураВидимостиЭлементов);
	
	КОформлению = Новый Структура;
	
	Для Каждого Источник Из ДанныеИсточников Цикл
		
		ИмяЭлемента = "Декорация" + Источник.Документ;
		
		Если Источник.КоличествоОформленных = 0 и Источник.КоличествоКОформлению = 0 Тогда
			Элементы[ИмяЭлемента].Видимость = Истина;
			Элементы[ИмяЭлемента].Заголовок = ЗаголовкиЭлементов[Источник.Документ].НетДанных;
			Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылкиНетДанных;
			Элементы[ИмяЭлемента].Гиперссылка = Ложь;
			КОформлению.Вставить(Источник.Документ, Ложь);
		ИначеЕсли Источник.КоличествоКОформлению = 0 Тогда
			Элементы[ИмяЭлемента].Видимость = Истина;
			Элементы[ИмяЭлемента].Заголовок = ЗаголовкиЭлементов[Источник.Документ].ЕстьДанныеОбработано;
			Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылки;
			Элементы[ИмяЭлемента].Гиперссылка = Истина;
			КОформлению.Вставить(Источник.Документ, Ложь);
		Иначе
			Элементы[ИмяЭлемента].Видимость = Истина;
			Элементы[ИмяЭлемента].Заголовок = 
									СтрЗаменить(ЗаголовкиЭлементов[Источник.Документ].ЕстьДанныеКОбработке, "%1", Источник.КоличествоКОформлению);
			Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылки;
			Элементы[ИмяЭлемента].Гиперссылка = Истина;
			КОформлению.Вставить(Источник.Документ, Истина);
		КонецЕсли;
	КонецЦикла;
		
	Если ТолькоОформлениеДокументов Тогда
		Элементы.ГруппаСтатусРегламентныхОпераций.Видимость = Ложь;
		Элементы.ГруппаОтчетностьПоНДСОбщая.Видимость = Ложь;
		Элементы.ГруппаСервисОбщая.Видимость = Ложь;
	КонецЕсли;
	
	ДанныеПоПрочимОперациям = Обработки.ПомощникПоУчетуНДС.СформироватьЗапросПоПрочимОперациям(ПараметрыДанных);
	Для каждого Операция Из ДанныеПоПрочимОперациям Цикл
		ИмяЭлемента = "Декорация" + Операция.Ключ;
		Если Операция.Значение > 0 Тогда 
			Элементы[ИмяЭлемента].Заголовок = СтрШаблон(ЗаголовкиЭлементов[Операция.Ключ].ЕстьДанные, Операция.Значение);
			Элементы[ИмяЭлемента].Гиперссылка = Истина;
		Иначе
			Элементы[ИмяЭлемента].Заголовок = ЗаголовкиЭлементов[Операция.Ключ].НетДанных;
			Элементы[ИмяЭлемента].Гиперссылка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоДокументовКОплате = Обработки.ПеречислениеНДСВБюджетПоОтдельнымОперациям.ПолучитьКоличествоДокументовКОплате(ПараметрыДанных, Истина);
	ИмяЭлемента = "Декорация" + "ПеречислениеНДСВБюджет";
	Если КоличествоДокументовКОплате > 0 Тогда 
		Элементы[ИмяЭлемента].Заголовок = СтрШаблон(ЗаголовкиЭлементов["ПеречислениеНДСВБюджет"].ЕстьДанные, КоличествоДокументовКОплате);
		Элементы[ИмяЭлемента].Гиперссылка = Истина;
		Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылки;
	Иначе
		Элементы[ИмяЭлемента].Заголовок = ЗаголовкиЭлементов["ПеречислениеНДСВБюджет"].НетДанных;
		Элементы[ИмяЭлемента].Гиперссылка = Ложь;
		Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылкиНетДанных;
	КонецЕсли;
	
	КоличествоКПодтверждению = Обработки.ПеречислениеНДСВБюджетПоОтдельнымОперациям.ПолучитьКоличествоЗаявленийКПодтверждениюОплаты(ПараметрыДанных);
	ИмяЭлемента = "Декорация" + "ПодтвержденияОплатыВБюджет";
	Если КоличествоКПодтверждению > 0 Тогда 
		Элементы[ИмяЭлемента].Заголовок = СтрШаблон(ЗаголовкиЭлементов["ПодтвержденияОплатыВБюджет"].ЕстьДанные, КоличествоКПодтверждению);
		Элементы[ИмяЭлемента].Гиперссылка = Истина;
		Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылки;
	Иначе
		Элементы[ИмяЭлемента].Заголовок = ЗаголовкиЭлементов["ПодтвержденияОплатыВБюджет"].НетДанных;
		Элементы[ИмяЭлемента].Гиперссылка = Ложь;
		Элементы[ИмяЭлемента].ЦветТекста = ЦветГиперссылкиНетДанных;
	КонецЕсли;
	
	УстановитьСтатусыРегламентированныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусыРегламентированныхОпераций()
	
	Если Не Элементы.ГруппаСтатусРегламентныхОпераций.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	СостояниеРаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	СостояниеОтражениеДокументовВРеглУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	НезакрытыйПериодПартииТоваров = Неопределено;
	НезакрытыйПериодРаспределениеНДС = Неопределено;
	НезакрытыйПериодОтражениеДокументовВРеглУчете = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Организация) 
			и ЗначениеЗаполнено(Объект.НачалоПериода) 
				и ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		
		Период = Объект.НачалоПериода;
		
		ЭтапыЗакрытияМесяца = Новый Массив;
		ЭтапыЗакрытияМесяца.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
		ЭтапыЗакрытияМесяца.Добавить(Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС);
		ЭтапыЗакрытияМесяца.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
		
		Пока Период < КонецМесяца(Объект.КонецПериода) Цикл
				
			СостояниеЭтапов = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
				ЭтапыЗакрытияМесяца,
				Период,
				Объект.Организация);
			
			СостояниеПартииТоваров = СостояниеЭтапов[Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости];
			СостояниеРаспределениеНДС = СостояниеЭтапов[Перечисления.ОперацииЗакрытияМесяца.РаспределениеНДС];
			СостояниеОтражениеДокументовВРеглУчете = СостояниеЭтапов[Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете];
			
			Если СостояниеПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
				Или СостояниеПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
				
				Элементы.ДекорацияПартииТоваров.Гиперссылка = Истина;
				Элементы.ДекорацияПартииТоваров.Заголовок = 
							СтрШаблон(НСтр("ru = 'Сформировать движения по партиям товаров (%1)'"), Формат(Период, "ДФ='MMММ yyyy'"));
				НезакрытыйПериодПартииТоваров = Период;
				
			ИначеЕсли СостояниеПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
				
				Элементы.ДекорацияПартииТоваров.Гиперссылка = Ложь;
				Элементы.ДекорацияПартииТоваров.Заголовок = НСтр("ru = 'Движения по партиям товаров сформированы'");
				НезакрытыйПериодПартииТоваров = Неопределено;
				
			ИначеЕсли СостояниеПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
				
				Элементы.ДекорацияПартииТоваров.Гиперссылка = Ложь;
				Элементы.ДекорацияПартииТоваров.Заголовок = НСтр("ru = 'Движения по партиям товаров формировать не требуется'");
				НезакрытыйПериодПартииТоваров = Неопределено;
				
			КонецЕсли;
			
			Если СостояниеРаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
				Или СостояниеРаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
				
				Элементы.ДекорацияРаспределениеНДС.Гиперссылка = Истина;
				Элементы.ДекорацияРаспределениеНДС.Заголовок = 
							СтрШаблон(НСтр("ru = 'Выполнить распределение НДС (%1)'"), Формат(Период, "ДФ='MMММ yyyy'"));
				НезакрытыйПериодРаспределениеНДС = Период;
				
				Элементы.ГруппаАнализРаспределенияНДС.Видимость = Ложь;
				
			ИначеЕсли СостояниеРаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
				
				Элементы.ДекорацияРаспределениеНДС.Гиперссылка = Ложь;
				Элементы.ДекорацияРаспределениеНДС.Заголовок = НСтр("ru = 'Распределение НДС выполнено'");
				НезакрытыйПериодРаспределениеНДС = Неопределено;
				
				Элементы.ГруппаАнализРаспределенияНДС.Видимость = Истина;
				
			ИначеЕсли СостояниеРаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
				
				Элементы.ДекорацияРаспределениеНДС.Гиперссылка = Ложь;
				Элементы.ДекорацияРаспределениеНДС.Заголовок = НСтр("ru = 'Распределение НДС выполнять не требуется'");
				НезакрытыйПериодРаспределениеНДС = Неопределено;
				
				Элементы.ГруппаАнализРаспределенияНДС.Видимость = Ложь;
				
			КонецЕсли;
			
			Если СостояниеОтражениеДокументовВРеглУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
				Или СостояниеОтражениеДокументовВРеглУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
				
				Если УправлениеТорговлей Тогда
					ШаблонЗаголовка = НСтр("ru = 'Сформировать записи книг покупок и продаж (%1)'"); 
				Иначе
					ШаблонЗаголовка = НСтр("ru = 'Отразить документы в регламентированном учете (%1)'"); 
				КонецЕсли;
				
				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Гиперссылка = Истина;
				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Заголовок = СтрШаблон(ШаблонЗаголовка, Формат(Период, "ДФ='MMММ yyyy'"));
				НезакрытыйПериодОтражениеДокументовВРеглУчете = Период;
				
			ИначеЕсли СостояниеОтражениеДокументовВРеглУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
				
				Если УправлениеТорговлей Тогда
					ТекстЗаголовка = НСтр("ru = 'Записи книг покупок и продаж сформированы'"); 
				Иначе
					ТекстЗаголовка = НСтр("ru = 'Документы в регламентированном учете отражены'"); 
				КонецЕсли;

				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Гиперссылка = Ложь;
				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Заголовок = ТекстЗаголовка;
				НезакрытыйПериодОтражениеДокументовВРеглУчете = Неопределено;
				
			ИначеЕсли СостояниеОтражениеДокументовВРеглУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
				
				Если УправлениеТорговлей Тогда
					ТекстЗаголовка = НСтр("ru = 'Формирование записей книг покупок и продаж не требуется'"); 
				Иначе
					ТекстЗаголовка = НСтр("ru = 'Отражение документов в регламентированном учете не требуется'"); 
				КонецЕсли;
				
				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Гиперссылка = Ложь;
				Элементы.ДекорацияОтражениеДокументовВРеглУчете.Заголовок = ТекстЗаголовка;
				НезакрытыйПериодОтражениеДокументовВРеглУчете = Неопределено;
				
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(НезакрытыйПериодПартииТоваров) 
				Или ЗначениеЗаполнено(НезакрытыйПериодРаспределениеНДС) 
				Или ЗначениеЗаполнено(НезакрытыйПериодОтражениеДокументовВРеглУчете) Тогда
				
				Прервать;
			КонецЕсли;
			
			Период = ДобавитьМесяц(Период, 1);
		КонецЦикла;
	Иначе
		Элементы.ДекорацияПартииТоваров.Гиперссылка = Ложь;
		Элементы.ДекорацияРаспределениеНДС.Гиперссылка = Ложь;
		Элементы.ДекорацияОтражениеДокументовВРеглУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	УстановитьКартинкуСтатусаЭтапа(СостояниеПартииТоваров, "ПартииТоваров");
	УстановитьКартинкуСтатусаЭтапа(СостояниеРаспределениеНДС, "РаспределениеНДС");
	УстановитьКартинкуСтатусаЭтапа(СостояниеОтражениеДокументовВРеглУчете, "ОтражениеДокументовВРеглУчете");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСтатусаЭтапа(Этап, НазваниеЭтапа)
	
	Если Не ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексЗначения = Перечисления.СостоянияОперацийЗакрытияМесяца.Индекс(Этап);
	ИмяПеречисления = Метаданные.Перечисления.СостоянияОперацийЗакрытияМесяца.ЗначенияПеречисления[ИндексЗначения].Имя;
	Элементы["Картинки" + НазваниеЭтапа].ТекущаяСтраница = Элементы[НазваниеЭтапа + ИмяПеречисления];
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперацииЗакрытияМесяца()

	ПериодРаспределениеНДС    = ?(ЗначениеЗаполнено(НезакрытыйПериодРаспределениеНДС), НезакрытыйПериодРаспределениеНДС, Объект.НачалоПериода);
	ПериодПартииТоваров       = ?(ЗначениеЗаполнено(НезакрытыйПериодПартииТоваров),    НезакрытыйПериодПартииТоваров,    Объект.НачалоПериода);
	ПериодОтражениеВРеглУчете = ?(ЗначениеЗаполнено(НезакрытыйПериодПартииТоваров),    НезакрытыйПериодПартииТоваров,    Объект.НачалоПериода);
	
	ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации", 
								Объект.Организация, 
								Мин(ПериодРаспределениеНДС, ПериодПартииТоваров, ПериодОтражениеВРеглУчете));
	ОткрытьФорму("Обработка.ОперацииЗакрытияМесяца.Форма", ПараметрыФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеЗаголовковЭлементов()
	
	ЗаголовкиЭлементов = Новый Соответствие;
	
	ЗаголовкиЭлементов.Вставить("СчетФактураПолученный", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры от поставщиков получены'"),
					НСтр("ru = 'Ожидается получение счетов-фактур от поставщиков (%1)'"),
					НСтр("ru = 'Нет поступлений от поставщиков'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураВыданный", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры по реализации выставлены'"),
					НСтр("ru = 'Выставить счета-фактуры по реализациям (%1)'"),
					НСтр("ru = 'Нет реализаций покупателям'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураПолученныйНалоговыйАгент", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры от поставщиков по товарам с обратным обложением НДС получены'"),
					НСтр("ru = 'Ожидается получение счетов-фактур от поставщиков по товарам с обратным обложением НДС (%1)'"),
					НСтр("ru = 'Нет поступлений товаров с обратным обложением НДС'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураВыданныйАванс", // Счет-фактура выданный на аванс полученный
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры по полученным авансам выставлены'"),
					НСтр("ru = 'Выставить счета-фактуры по полученным авансам (%1)'"),
					НСтр("ru = 'Нет авансов от покупателей'")));
			
	ЗаголовкиЭлементов.Вставить("СчетФактураПолученныйАванс", // Счет-фактура полученный на аванс выданный
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры по выданным авансам оформлены'"),
					НСтр("ru = 'Ожидается получение счетов-фактур по выданным авансам (%1)'"),
					НСтр("ru = 'Нет авансов поставщикам'")));
					
	ЗаголовкиЭлементов.Вставить("СчетФактураНалоговыйАгент", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры налогового агента выставлены'"),
					НСтр("ru = 'Выставить счета-фактуры налогового агента (%1)'"),
					НСтр("ru = 'Нет оплат с удержанием НДС налоговым агентом'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураКомитента", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры от комитентов получены'"),
					НСтр("ru = 'Ожидается получение счетов-фактур от комитентов (%1)'"),
					НСтр("ru = 'Нет отчетов комитентам (принципалам)'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураКомиссионеру", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все счета-фактуры комиссионерам выставлены'"),
					НСтр("ru = 'Выставить счета-фактуры комиссионерам (%1)'"),
					НСтр("ru = 'Нет отчетов комиссионеров (агентов)'")));
	
	ЗаголовкиЭлементов.Вставить("ТаможеннаяДекларацияИмпорт", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все декларации на товары по импорту оформлены'"),
					НСтр("ru = 'Оформить декларации на товары по импорту (%1)'"),
					НСтр("ru = 'Нет импортированных товаров'")));
	
	ЗаголовкиЭлементов.Вставить("ЗаявлениеОВвозеТоваров", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все заявления о ввозе товаров из стран Таможенного союза оформлены'"),
					НСтр("ru = 'Оформить заявления о ввозе товаров из стран Таможенного союза (%1)'"),
					НСтр("ru = 'Нет поступлений из стран Таможенного союза'")));
	
	ЗаголовкиЭлементов.Вставить("ТаможеннаяДекларацияЭкспорт", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все таможенные декларации на экспорт оформлены'"),
					НСтр("ru = 'Оформить таможенные декларации на экспорт (%1)'"),
					НСтр("ru = 'Нет продаж на экспорт'")));
	
	ЗаголовкиЭлементов.Вставить("СчетФактураНаНеподтвержденнуюРеализацию0", 
			Новый Структура("ЕстьДанныеОбработано, ЕстьДанныеКОбработке, НетДанных",
					НСтр("ru = 'Все подтверждения ставки 0% реализаций установлены'"),
					НСтр("ru = 'Установить подтверждение ставки 0% по реализациям (%1)'"),
					НСтр("ru = 'Нет реализаций по ставке 0%'")));
					
	ЗаголовкиЭлементов.Вставить("ЗаписиКнигиПродаж", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Нет ручных записей книги продаж'"),
					НСтр("ru = 'Записи книги продаж (%1)'")));
					
	ЗаголовкиЭлементов.Вставить("ЗаписиКнигиПокупок", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Нет ручных записей книги покупок'"),
					НСтр("ru = 'Записи книги покупок (%1)'")));
					
	ЗаголовкиЭлементов.Вставить("СписанияНДСнаРасходы", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Нет списаний НДС на расходы'"),
					НСтр("ru = 'Списание НДС на расходы (%1)'")));

	ЗаголовкиЭлементов.Вставить("БлокировкиВычетаНДС", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Нет счетов-фактур, заблокированных для вычета НДС'"),
					НСтр("ru = 'Блокировка принятия НДС к вычету (%1)'")));
	
	ЗаголовкиЭлементов.Вставить("ПеречислениеНДСВБюджет", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Нет документов к оплате НДС в бюджет'"),
					НСтр("ru = 'Требуется оплата НДС в бюджет (%1)'")));
	
	ЗаголовкиЭлементов.Вставить("ПодтвержденияОплатыВБюджет", 
			Новый Структура("НетДанных, ЕстьДанные",
					НСтр("ru = 'Все подтверждения оплаты оформлены'"),
					НСтр("ru = 'Указать подтверждения оплаты НДС по заявлениям о ввозе товаров из ЕАЭС (%1)'")));
	
	Возврат ЗаголовкиЭлементов;
	
КонецФункции

&НаКлиенте
Функция СтруктураОтбораПоШапке()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Отбор.Вставить("НачалоПериода", Объект.НачалоПериода);
	Отбор.Вставить("КонецПериода", Объект.КонецПериода);
	Возврат Отбор;
	
КонецФункции

&НаСервере
Функция ДоступныеОрганизации(Организация = Неопределено)
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСправочника.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)");
		
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
	Иначе
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизации()
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации().ВыгрузитьЗначения());
	СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>'"));
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	УстановитьВидимостьОформлениеЭлементов();
КонецПроцедуры


&НаСервере
Процедура НачалоПериодаПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Объект.КонецПериода < Объект.НачалоПериода Тогда
		Объект.КонецПериода = Объект.НачалоПериода;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		УстановитьВидимостьОформлениеЭлементов(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура КонецПериодаПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Объект.КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Объект.КонецПериода < Объект.НачалоПериода Тогда
		Объект.КонецПериода = Объект.НачалоПериода;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		УстановитьВидимостьОформлениеЭлементов(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
// Отображает текстовое пояснение по корректности выбора периода формирования отчета.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//
Процедура ОтобразитьПоясненияКПериодуОтчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	БлижайшийНалоговыйПериод = УчетНДСВызовСервера.БлижайшийНалоговыйПериодСервер(
		Объект.Организация,
		Объект.КонецПериода);
	
	УчетВедется = Объект.КонецПериода >= НачалоКвартала(БлижайшийНалоговыйПериод.Начало);
	Элементы.ГруппаОсновная.Видимость = Истина;
	
	Если БлижайшийНалоговыйПериод.Конец = КонецДня(КонецКвартала(Объект.КонецПериода))
	   И КонецКвартала(БлижайшийНалоговыйПериод.Начало) < КонецКвартала(БлижайшийНалоговыйПериод.Период) Тогда
		
		// Расширенный налоговый период
		
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		ШаблонСообщения = НСтр("ru='Период с даты регистрации %1 по %2 включается в отчетность по НДС за %3.'");
		ТекстПояснения = СтрШаблон(
			ШаблонСообщения,
			Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D"), 
			Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D"),
			Формат(БлижайшийНалоговыйПериод.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
		
	ИначеЕсли УчетВедется 
		    И БлижайшийНалоговыйПериод.Конец > КонецДня(КонецКвартала(Объект.КонецПериода)) Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность за %4.'");
		ТекстПояснения = СтрШаблон(
			ШаблонСообщения,
			Формат(КонецКвартала(Объект.КонецПериода), "ДФ='к ''квартал'' гггг ''года'''"),
			Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D"), 
			Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D"),
			Формат(БлижайшийНалоговыйПериод.Конец, "ДФ='к ''квартал'' гггг ''года'''"));
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
	ИначеЕсли УчетВедется Тогда
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
	Иначе
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		Если КонецКвартала(БлижайшийНалоговыйПериод.Начало) < КонецКвартала(БлижайшийНалоговыйПериод.Период) Тогда
			ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно. Первый налоговый период: с %2 по %3.'");
			ТекстПояснения = СтрШаблон(
				ШаблонСообщения,
				Формат(КонецКвартала(Объект.КонецПериода), "ДФ='к ''квартал'' гггг ''года'''"),
				Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D"), 
				Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D"));
		Иначе
			ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно. Первый налоговый период: %2.'");
			ТекстПояснения = СтрШаблон(
				ШаблонСообщения,
				Формат(КонецКвартала(Объект.КонецПериода), "ДФ='к ''квартал'' гггг ''года'''"),
				ПредставлениеПериода(БлижайшийНалоговыйПериод.Начало,КонецКвартала(БлижайшийНалоговыйПериод.Начало),"ФП = Истина"));
		КонецЕсли;
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ТекстПояснения;
		Элементы.ГруппаОсновная.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
