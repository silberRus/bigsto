#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает информацию о количестве документов по учету НДС к обработке по организации за период.
//
// Параметры:
//	ПараметрыЗапроса - Структура вида "МассивОрганизаций, НачалоПериода, КонецПериода"
//	СтруктураВидимостиЭлементов - Структура, определяет - формировать ли запрос по документу. 
// 									См. ПолучитьСтруктуруВидимостиЭлементов()
//	ТолькоОбязательныеОперации - Булево, Отбирать для анализа только обязательыне операции (требуется для 
//									индикации состояния в помощнике закрытия месяца)
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица документов в обработке и уже сформированных (Документ, КоличествоКОформлению, КоличествоОформленных)
//
Функция СформироватьЗапросПоДокументамКОформлению(ПараметрыЗапроса, СтруктураВидимостиЭлементов = Неопределено, ТолькоОбязательныеОперации = Ложь) Экспорт
	
	Если СтруктураВидимостиЭлементов = Неопределено Тогда
		СтруктураВидимостиЭлементов = ВидимостьЭлементов(ПараметрыЗапроса.МассивОрганизаций, ПараметрыЗапроса.НачалоПериода);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.КонецПериода) Тогда
		ПараметрыЗапроса.КонецПериода = Дата('209901010000');
	КонецЕсли;
	
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыЗапроса.МассивОрганизаций);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		МассивОрганизаций,
		Справочники.Организации.УправленческаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций",		МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",			ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",			ПараметрыЗапроса.КонецПериода);
	
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураВыданный"));
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураВыданныйАванс"));
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураКомиссионеру"));
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "ЗаявлениеОВвозеТоваров"));
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураНалоговыйАгент"));
	ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураПолученныйНалоговыйАгент"));
	
	Если ТолькоОбязательныеОперации = Ложь Тогда
		
		ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураПолученный"));
		ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураПолученныйАванс"));
		ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураКомитента"));
		ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "ТаможеннаяДекларацияИмпорт"));
		ТекстыЗапросов.Добавить(ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, ПараметрыЗапроса, "СчетФактураНаНеподтвержденнуюРеализацию0"));
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, РазделительЗапросов());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьЗапросПоПрочимОперациям(ПараметрыЗапроса) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.КонецПериода) Тогда
		ПараметрыЗапроса.КонецПериода = Дата('209901010000');
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Документ.ЗаписьКнигиПродаж КАК ЗаписьКнигиПродаж
	|ГДЕ
	|	ЗаписьКнигиПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаписьКнигиПродаж.Организация В (&МассивОрганизаций)
	|	И ЗаписьКнигиПродаж.Проведен
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Документ.ЗаписьКнигиПокупок КАК ЗаписьКнигиПокупок
	|ГДЕ
	|	ЗаписьКнигиПокупок.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаписьКнигиПокупок.Организация В (&МассивОрганизаций)
	|	И ЗаписьКнигиПокупок.Проведен
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияБлокировкиВычетаНДСПоСчетамФактурам.СрезПоследних(
	|		&КонецПериода, 
	|		Организация В (&МассивОрганизаций)) КАК СостоянияБлокировки 
	|ГДЕ
	|	СостоянияБлокировки.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБлокировкиВычетаНДС.Установлена)
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Документ.СписаниеНДСнаРасходы КАК СписаниеНДСнаРасходы
	|ГДЕ
	|	СписаниеНДСнаРасходы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СписаниеНДСнаРасходы.Организация В (&МассивОрганизаций)
	|	И СписаниеНДСнаРасходы.Проведен
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",		ПараметрыЗапроса.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",		ПараметрыЗапроса.КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций",  ПараметрыЗапроса.МассивОрганизаций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаписиКнигиПродаж",   0);
	Результат.Вставить("ЗаписиКнигиПокупок",  0);
	Результат.Вставить("БлокировкиВычетаНДС", 0);
	Результат.Вставить("СписанияНДСнаРасходы", 0);
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ЗаписиКнигиПродаж", Выборка.Количество);
	КонецЕсли;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("ЗаписиКнигиПокупок", Выборка.Количество);
	КонецЕсли;
	
	Выборка = РезультатЗапроса[2].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("БлокировкиВычетаНДС", Выборка.Количество);
	КонецЕсли;

	Выборка = РезультатЗапроса[3].Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Вставить("СписанияНДСнаРасходы", Выборка.Количество);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает информацию о количестве документов по учету НДС к обработке по организации за период.
//
// Параметры:
//	ПараметрыЗапроса - Структура вида "МассивОрганизаций, НачалоПериода, КонецПериода"
//
// Возвращаемое значение:
//	Структура - (ЕстьНевыполненныеОперации, ЕстьОбязательныеНевыполненныеОперации), тип элементов структуры - булево 
//
Функция ОперацииПоНДСКВыполнению(ПараметрыЗапроса) Экспорт
	
	НевыполненныеОперации = 0;
	ОбязательныеНевыполненныеОперации = 0;
	
	ТолькоОбязательныеОперации = Истина;
	СтруктураВидимостиЭлементов = Неопределено;
	ТаблицаНевыполненныхОпераций = СформироватьЗапросПоДокументамКОформлению(ПараметрыЗапроса, СтруктураВидимостиЭлементов, ТолькоОбязательныеОперации);
	Для Каждого Строка Из ТаблицаНевыполненныхОпераций Цикл
		
		Если	Строка.Документ = "СчетФактураВыданный" 
			Или Строка.Документ = "СчетФактураВыданныйАванс" 
			Или Строка.Документ = "СчетФактураПолученныйНалоговыйАгент"
			Или Строка.Документ = "СчетФактураКомиссионеру"
			Или Строка.Документ = "ЗаявлениеОВвозеТоваров"
			Или Строка.Документ = "СчетФактураНалоговыйАгент" Тогда
			
			ОбязательныеНевыполненныеОперации = ОбязательныеНевыполненныеОперации + Строка.КоличествоКОформлению;
		КонецЕсли;
		
		НевыполненныеОперации = НевыполненныеОперации + Строка.КоличествоКОформлению;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("НевыполненныеОперации", НевыполненныеОперации);
	Результат.Вставить("ОбязательныеНевыполненныеОперации", ОбязательныеНевыполненныеОперации);
	Результат.Вставить("ЕстьОперацииКВыполнению", (НевыполненныеОперации > 0));
	Результат.Вставить("ЕстьОбязательныеОперацииКВыполнению", (ОбязательныеНевыполненныеОперации > 0));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапросаСчетФактура(СтруктураВидимостиЭлементов, Параметры, ИмяИсточника)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяИсточника КАК Документ,
	|	&КоличествоКОформлению КАК КоличествоКОформлению,
	|	КОЛИЧЕСТВО(СчетФактура.Ссылка) КАК КоличествоОформленных
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Проведен
	|	И СчетФактура.Организация В (&МассивОрганизаций)
	|	И СчетФактура.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|";
	
	Если СтруктураВидимостиЭлементов[ИмяИсточника] Тогда
		КоличествоДокументов = Документы[ИмяИсточника].ЕстьСчетаФактурыКОформлению(Параметры);
	Иначе
		КоличествоДокументов = 0;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетФактураВыданный", ИмяИсточника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоКОформлению", Формат(КоличествоДокументов, "ЧН=; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяИсточника", """" + ИмяИсточника + """");
	
	Возврат ТекстЗапроса;

КонецФункции

Функция РазделительЗапросов()
	Возврат 
		"
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|";
КонецФункции

#КонецОбласти
	
#Область Прочее

Функция ВидимостьЭлементов(Организация, Период) Экспорт
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период);
	
	СтруктураВидимостиЭлементов = Новый Структура;
	СтруктураВидимостиЭлементов.Вставить("СчетФактураВыданный",			Истина);
	СтруктураВидимостиЭлементов.Вставить("СчетФактураПолученный",		Истина);
	СтруктураВидимостиЭлементов.Вставить("СчетФактураВыданныйАванс",	Не ПрименяетсяУСН);
	СтруктураВидимостиЭлементов.Вставить("СчетФактураПолученныйАванс",	Не ПрименяетсяУСН Или ПолучитьФункциональнуюОпцию("ПокупкаТоваровОблагаемыхНДСУПокупателя"));
	СтруктураВидимостиЭлементов.Вставить("СчетФактураНалоговыйАгент",	Истина);
	СтруктураВидимостиЭлементов.Вставить("СчетФактураКомитента",		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках"));
	СтруктураВидимостиЭлементов.Вставить("СчетФактураКомиссионеру",		ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
	СтруктураВидимостиЭлементов.Вставить("ЗаявлениеОВвозеТоваров",		ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки"));
	СтруктураВидимостиЭлементов.Вставить("ПодтвержденияОплатыВБюджет",	ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки"));
	СтруктураВидимостиЭлементов.Вставить("ТаможеннаяДекларацияИмпорт",	ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки"));
	
	СтруктураВидимостиЭлементов.Вставить("СчетФактураПолученныйНалоговыйАгент", ПолучитьФункциональнуюОпцию("ПокупкаТоваровОблагаемыхНДСУПокупателя"));
	
	СтруктураВидимостиЭлементов.Вставить("ФормированиеЗаписейРаздела7",			ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС"));
	СтруктураВидимостиЭлементов.Вставить("РеестрДокументовПодтверждающихЛьготу",ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС"));
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		СтруктураВидимостиЭлементов.Вставить("ТаможеннаяДекларацияЭкспорт", Ложь);
	КонецЕсли;
	
	СтруктураВидимостиЭлементов.Вставить("СчетФактураНаНеподтвержденнуюРеализацию0", ПолучитьФункциональнуюОпцию("ИспользоватьНДС0"));
	
	Возврат СтруктураВидимостиЭлементов;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументыПродажи

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Обработки.ПомощникПоУчетуНДС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Помощник по учету НДС'");
	
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ИмяФормыРабочееМесто());
	
КонецФункции

Функция ИмяФормыРабочееМесто() Экспорт
	
	Возврат "Обработка.ПомощникПоУчетуНДС.Форма.Форма";
	
КонецФункции

#КонецОбласти

#КонецЕсли
