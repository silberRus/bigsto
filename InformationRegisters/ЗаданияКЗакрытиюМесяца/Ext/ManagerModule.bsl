#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКЗакрытиюМесяца
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКЗакрытиюМесяца.Имя;
	
КонецФункции

// Увеличивает номер задания в константе.
//
//
// Возвращаемое значение:
//	Число - Предыдущий номер задания из константы "Номер задания к закрытию месяца".
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Возвращает номер задания из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к закрытию месяца".
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.ТекущийНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//	ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  Операция - Перечисление.ОперацииЗакрытияМесяца - регламентная операция 
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				Операция = Неопределено, НомерЗадания = Неопределено) Экспорт
				
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = Справочники.Организации.ДоступныеОрганизации();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Операция) Тогда
		
		// Создадим задание для каждой возможной операции
		МассивОпераций = Новый Массив;
	
		Для ИндексОперации = 0 По Перечисления.ОперацииЗакрытияМесяца.Количество() - 1 Цикл
			МассивОпераций.Добавить(Перечисления.ОперацииЗакрытияМесяца.Получить(ИндексОперации));
		КонецЦикла;
		
	Иначе
		
		МассивОпераций = ОбщегоНазначенияУТКлиентСервер.Массив(Операция)
		
	КонецЕсли;
	
	// Запишем задания.
	НачатьТранзакцию();
	
	Попытка
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
			
			Для Каждого ТекущаяОперация Из МассивОпераций Цикл
				
				Месяц = НачалоМесяца(ПериодЗадания);
				
				
				НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
				НаборЗаписей.Месяц        = Месяц;
				НаборЗаписей.Операция     = ТекущаяОперация;
				НаборЗаписей.Организация  = ТекущаяОрганизация;
				НаборЗаписей.Документ     = ДокументЗадания;
				НаборЗаписей.НомерЗадания = НомерЗадания;
				НаборЗаписей.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, Операция, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(СтруктураПолей.Месяц, СтруктураПолей.Документ, СтруктураПолей.Организация, СтруктураПолей.Операция, НомерЗадания);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к закрытию месяца за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// В РИБ закрытие месяца выполняется только в главном узле, при этом из подчиненных узлов
// записи регистра отправляются в главный узел. При получении в ГУ записей от ПУ,
// они регистрируются с текущим номером задания ГУ. Когда в ПУ приходит квитанция о получении
// данных в ГУ, в ПУ записи регистра снимаются с регистрации к обмену и удаляются, т.к. штатными
// средствами (после закрытия месяца, либо при получении удаления от ГУ) в ПУ они не могут быть удалены.
//
Процедура УдалитьЗаписиВПодчиненномУзлеРИБ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданияКЗакрытиюМесяца.Месяц КАК Месяц,
		|	ЗаданияКЗакрытиюМесяца.Операция КАК Операция,
		|	ЗаданияКЗакрытиюМесяца.Организация КАК Организация,
		|	ЗаданияКЗакрытиюМесяца.Документ КАК Документ,
		|	ЗаданияКЗакрытиюМесяца.НомерЗадания КАК НомерЗадания
		|ИЗ
		|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца.Изменения КАК ЗаданияКЗакрытиюМесяцаИзменения
		|		ПО ЗаданияКЗакрытиюМесяца.Месяц = ЗаданияКЗакрытиюМесяцаИзменения.Месяц
		|			И ЗаданияКЗакрытиюМесяца.Организация = ЗаданияКЗакрытиюМесяцаИзменения.Организация
		|			И ЗаданияКЗакрытиюМесяца.Операция = ЗаданияКЗакрытиюМесяцаИзменения.Операция
		|			И ЗаданияКЗакрытиюМесяца.Документ = ЗаданияКЗакрытиюМесяцаИзменения.Документ
		|			И ЗаданияКЗакрытиюМесяца.НомерЗадания = ЗаданияКЗакрытиюМесяцаИзменения.НомерЗадания
		|ГДЕ
		|	ЗаданияКЗакрытиюМесяцаИзменения.Месяц ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
	Для Сч = 1-ТаблицаЗаписей.Количество() По 0 Цикл
		Выборка = ТаблицаЗаписей[-Сч];
		НаборЗаписей = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Операция.Установить(Выборка.Операция);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Формирует задания на следующий период.
//
// Параметры:
//  ВременныеТаблицы	- МенеджерВременныхТаблиц - Содержит таблицу КэшГраниц.
//  СледующийМесяц		- Дата - Дата, начиная с которой нужно сформировать задания.
//
Процедура СформироватьЗаданияНаСледующийПериод(ВременныеТаблицы, СледующийМесяц) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Операция,
	|	Задания.Организация,
	|	МАКСИМУМ(Задания.НомерЗадания) КАК НомерЗадания
	|ИЗ
	|	КэшГраниц КАК Задания
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Операция,
	|	Задания.Организация";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СледующийПериод = СледующийМесяц;
		
		
		Если ЗначениеЗаполнено(СледующийПериод) Тогда
			НоваяЗапись = РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Месяц = СледующийПериод;
			НоваяЗапись.Записать(Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваБезналичные", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваВКассахККМ", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваВПути", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваНаличные", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ПартииПрочихРасходов", "Период", "РегламентныеОперации");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов", "Период", "РегламентныеОперации");
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	// В УТ пустой обработчик
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
