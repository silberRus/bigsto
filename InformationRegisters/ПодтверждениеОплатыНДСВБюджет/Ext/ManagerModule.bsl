#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ТекстСостояниеОплатыНДСВБюджет(СчетФактура) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетФактура) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ПустаяСсылка();
	
	// к оплате
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
	Набор.Прочитать();
	КОплате = Набор.Итог("Сумма");
	Если КОплате > 0 Тогда 
		ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
	КонецЕсли;
	
	// оплачено
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Набор.Прочитать();
	ТаблицаОплат = Набор.Выгрузить();
	ТаблицаОплат.Сортировать("ДатаПодтвержденияОплаты Убыв");
	Если ТаблицаОплат.Количество() > 0 И ТекущееСостояние.Пустая() Тогда 
		ТекущееСостояние 		= Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		ДатаПодтвержденияОплаты = Формат(ТаблицаОплат[0].ДатаПодтвержденияОплаты, "ДЛФ=D");
		Если ТаблицаОплат.Количество() > 1 Тогда
			СтрокаПлатежноРасчетныеДокументы = НСтр("ru = '<несколько платежей>'");
		Иначе
			СтрокаПлатежноРасчетныеДокументы = НСтр("ru = '№ '") + ТаблицаОплат[0].СтрокаПлатежноРасчетныеДокументы;
		КонецЕсли;
	КонецЕсли;
	
	// получено подтверждение
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Набор.Прочитать();
		Если Набор.Количество() Тогда
			ТекущееСостояние 		 = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			НомерОтметкиОРегистрации = Набор[0].НомерОтметкиОРегистрации;
			ДатаПодтвержденияОплаты  = Формат(Набор[0].ДатаПодтвержденияОплаты, "ДЛФ=D");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата подтверждена %1 г. Отметка № %2'"),
			ДатаПодтвержденияОплаты,
			НомерОтметкиОРегистрации);
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'НДС оплачен %1 (%2)'"),
			ДатаПодтвержденияОплаты,
			СтрокаПлатежноРасчетныеДокументы);
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Укажите реквизиты документов оплаты НДС. Всего к оплате (руб.): %1.'"),
			Формат(КОплате, "ЧДЦ=2; ЧГ=0"));
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Регистрирует документ к оплате в бюджет
//
// Параметры:
// 	Ссылка - документ учета НДС или документ оплаты
//  ДополнительныеСвойства	 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  										имеющую ключ ТаблицаПодтверждениеОплатыНДСВБюджет (ТаблицаЗначений)
//  Отказ					 - Булево - 
//
Процедура ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") 
	  ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
	  ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
			ЗарегистрироватьКОплатеВБюджет(Ссылка, ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодтверждениеОплатыНДСВБюджет);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		МассивСчетовФактурКОбработке = Новый Массив;
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПодтверждениеОплатыНДСВБюджет") Тогда
			СчетаФактуры = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодтверждениеОплатыНДСВБюджет.ВыгрузитьКолонку("СчетФактура");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовФактурКОбработке, СчетаФактуры);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("СчетаФактурыПередЗаписью") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовФактурКОбработке, ДополнительныеСвойства.СчетаФактурыПередЗаписью);
		КонецЕсли;
		ОбновитьДанныеЗаявок(МассивСчетовФактурКОбработке);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивСчетовФактурКОбработке = Новый Массив;
		Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПодтверждениеОплатыНДСВБюджет") Тогда
			СчетаФактуры = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодтверждениеОплатыНДСВБюджет.ВыгрузитьКолонку("СчетФактура");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовФактурКОбработке, СчетаФактуры);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("СчетаФактурыПередЗаписью") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовФактурКОбработке, ДополнительныеСвойства.СчетаФактурыПередЗаписью);
		КонецЕсли;
		ОбновитьДанныеОплаты(МассивСчетовФактурКОбработке);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеОплатыНДСВБюджетПередЗаписью(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") 
		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	СчетаФактурыПередЗаписью = Новый Массив;
		
	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		СчетаФактурыПередЗаписью.Добавить(ДокументОбъект.ДокументОснование);	
	КонецЕсли;
	
	Если СчетаФактурыПередЗаписью.Количество() > 0 Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("СчетаФактурыПередЗаписью", СчетаФактурыПередЗаписью);
	КонецЕсли;
		
КонецПроцедуры

#Область ФормаДокументыОплаты

Функция ПолучитьСуммуНДСКОплатеВБюджет(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") 
		ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Возврат СчетФактура.Товары.Итог("СуммаНДС");
	ИначеЕсли ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		Возврат СчетФактура.РасшифровкаСуммы.Итог("СуммаНДС");
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеОтметкиНалоговогоОргана(СчетФактура) Экспорт
	
	СтруктураОтметки = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") И Не СчетФактура.Пустая() Тогда
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.СчетФактура.Установить(СчетФактура);
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
		Набор.Прочитать();
		Если Набор.Количество() = 1 Тогда
			СтруктураОтметки = Новый Структура("НомерОтметкиОРегистрации,ДатаПодтвержденияОплаты");
			ЗаполнитьЗначенияСвойств(СтруктураОтметки, Набор[0]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтметки;
	
КонецФункции

Функция ПолучитьДанныеОплат(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Набор.Прочитать();
	
	Возврат Набор.Выгрузить();
	
КонецФункции

// Возвращает таблицу документов оплаты счета-фактуры
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент -  Документ учета НДС
//
// Возвращаемое значение:
// 	ДокументыОплаты - ТаблицаЗначений - Таблица оплаты НДС в бюджет.
//
Функция СформироватьТаблицуОплатНДСВБюджет(СчетФактура, РучныеКорректировки = Неопределено) Экспорт
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	СформироватьДанныеСчетовФактур(СчетФактура, ВременныеТаблицы);
	СформироватьДанныеОплаты(ВременныеТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучныеКорректировки.РучнаяКорректировка КАК РучнаяКорректировка,
		|	РучныеКорректировки.Сумма КАК Сумма,
		|	РучныеКорректировки.Номер КАК Номер,
		|	РучныеКорректировки.Дата КАК Дата
		|ПОМЕСТИТЬ ВтРучныеКорректировки
		|ИЗ
		|	&РучныеКорректировки КАК РучныеКорректировки
		|ГДЕ
		|	РучныеКорректировки.РучнаяКорректировка = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК РучнаяКорректировка,
		|	Оплаты.Номер КАК Номер,
		|	Оплаты.Дата КАК Дата,
		|	Оплаты.Сумма КАК Сумма
		|ИЗ
		|	ВтОплаты КАК Оплаты
		|ГДЕ
		|	НЕ (Оплаты.Номер, Оплаты.Дата) В
		|				(ВЫБРАТЬ
		|					ВтРучныеКорректировки.Номер КАК Номер,
		|					ВтРучныеКорректировки.Дата КАК Дата
		|				ИЗ
		|					ВтРучныеКорректировки КАК ВтРучныеКорректировки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтРучныеКорректировки.РучнаяКорректировка,
		|	ВтРучныеКорректировки.Номер,
		|	ВтРучныеКорректировки.Дата,
		|	ВтРучныеКорректировки.Сумма
		|ИЗ
		|	ВтРучныеКорректировки КАК ВтРучныеКорректировки";	
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РучныеКорректировки.РучнаяКорректировка КАК РучнаяКорректировка,
		|	РучныеКорректировки.Сумма КАК Сумма,
		|	РучныеКорректировки.Номер КАК Номер,
		|	РучныеКорректировки.Дата КАК Дата,
		|	РучныеКорректировки.ДатаПеречисленияНалога КАК ДатаПеречисленияНалога
		|ПОМЕСТИТЬ ВтРучныеКорректировки
		|ИЗ
		|	&РучныеКорректировки КАК РучныеКорректировки
		|ГДЕ
		|	РучныеКорректировки.РучнаяКорректировка = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК РучнаяКорректировка,
		|	Оплаты.Номер КАК Номер,
		|	Оплаты.Дата КАК Дата,
		|	Оплаты.Сумма КАК Сумма,
		|	Оплаты.ДатаПеречисленияНалога КАК ДатаПеречисленияНалога
		|ИЗ
		|	ВтОплаты КАК Оплаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтРучныеКорректировки.РучнаяКорректировка,
		|	ВтРучныеКорректировки.Номер,
		|	ВтРучныеКорректировки.Дата,
		|	ВтРучныеКорректировки.Сумма,
		|	ВтРучныеКорректировки.ДатаПеречисленияНалога
		|ИЗ
		|	ВтРучныеКорректировки КАК ВтРучныеКорректировки";
		
		Запрос.УстановитьПараметр("Дата", СчетФактура.Дата);
	КонецЕсли;
	
	Если РучныеКорректировки = Неопределено Тогда
		РучныеКорректировки = Новый ТаблицаЗначений;
		РучныеКорректировки.Колонки.Добавить("Сумма", 					ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
		РучныеКорректировки.Колонки.Добавить("Номер", 					ОбщегоНазначения.ОписаниеТипаСтрока(15));
		РучныеКорректировки.Колонки.Добавить("Дата", 				 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		РучныеКорректировки.Колонки.Добавить("ДатаПеречисленияНалога", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		РучныеКорректировки.Колонки.Добавить("РучнаяКорректировка", 	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Запрос.УстановитьПараметр("РучныеКорректировки", РучныеКорректировки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записывает данные об оплате НДС в бюджет по документу, уменьшает регистрацию к оплате
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент -  Документ учета НДС
//  ТаблицаОплат - ТаблицаЗначений - данные об оплатах
//
Процедура ЗаписатьДанныеОплаты(СчетФактура, ТаблицаОплат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Для Каждого СтрокаТаблицыОплат Из ТаблицаОплат Цикл
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура 						= СчетФактура;
		СтрокаОплаты.Состояние 							= Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма 								= СтрокаТаблицыОплат.Сумма;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога 	= СтрокаТаблицыОплат.Дата;
		СтрокаОплаты.НомерДокументаПеречисленияНалога 	= СтрокаТаблицыОплат.Номер;
		СтрокаОплаты.ДатаПодтвержденияОплаты 			= СтрокаТаблицыОплат.ДатаПеречисленияНалога;
		СтрокаОплаты.РучнаяКорректировка 				= СтрокаТаблицыОплат.РучнаяКорректировка;
	КонецЦикла;
	Набор.Записать();
	
	Набор.Очистить();
	КОплате = ПолучитьСуммуНДСКОплатеВБюджет(СчетФактура);
	Оплачено = ТаблицаОплат.Итог("Сумма");
	Если КОплате > Оплачено Тогда
		Если НЕ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
			Набор.Записать();
		КонецЕсли;
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		СтрокаКОплате = Набор.Добавить();
		СтрокаКОплате.СчетФактура 	= СчетФактура;
		СтрокаКОплате.Состояние 	= Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
		СтрокаКОплате.Сумма 		= КОплате - Оплачено;
		// пробуем найти заявку
		ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
		СформироватьДанныеСчетовФактур(СчетФактура, ВременныеТаблицы);
		СформироватьДанныеЗаявок(ВременныеТаблицы);
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ Т.ЗаявкаНаРасходованиеДенежныхСредств ИЗ ВтЗаявки КАК Т";
		Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаКОплате.ЗаявкаНаРасходованиеДенежныхСредств = Выборка.ЗаявкаНаРасходованиеДенежныхСредств;
		КонецЕсли;
	Иначе
		// удалим запись с состоянием Ожидает оплаты
		Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
		Набор.Записать();
		Если НЕ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
			СтрокаПодтверждения = Набор.Добавить();
			СтрокаПодтверждения.СчетФактура = СчетФактура;
			СтрокаПодтверждения.Состояние 	= Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			Если ТаблицаОплат.Количество() > 0 Тогда
				ТаблицаОплат.Сортировать("ДатаПеречисленияНалога Убыв");
				Если Не ЗначениеЗаполнено(ТаблицаОплат[0].ДатаПеречисленияНалога) Тогда
					ТаблицаОплат.Сортировать("Дата Убыв");
					СтрокаПодтверждения.ДатаПодтвержденияОплаты = ТаблицаОплат[0].Дата;
				Иначе
					СтрокаПодтверждения.ДатаПодтвержденияОплаты = ТаблицаОплат[0].ДатаПеречисленияНалога;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Набор.Записать(); 
	
КонецПроцедуры

// Записывает данные о подтверждении уплаты НДС в бюджет налоговым органом
//
// Параметры:
// 	СчетФактура - ДокументСсылка.ЗаявлениеОВвозеТоваров -  Документ учета НДС
//  ОплатаПодтверждена - Булево - подтверждение получено, если Ложь, то запись о подтверждении оплаты удаляется из регистра
//  НомерОтметкиОРегистрации - Строка - номер отметки налогового органа
//  ДатаПодтвержденияОплаты - Дата - дата подтверждения оплаты
//
Процедура ЗаписатьПодтверждениеОплаты(СчетФактура, ОплатаПодтверждена, НомерОтметкиОРегистрации, ДатаПодтвержденияОплаты) Экспорт
	
	Если ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
	Если ОплатаПодтверждена Тогда
		СтрокаПодтверждения = Набор.Добавить();
		СтрокаПодтверждения.СчетФактура 				= СчетФактура;
		СтрокаПодтверждения.Состояние 					= Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
		СтрокаПодтверждения.ДатаПодтвержденияОплаты 	= ДатаПодтвержденияОплаты;
		СтрокаПодтверждения.НомерОтметкиОРегистрации 	= НомерОтметкиОРегистрации;
	КонецЕсли;
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Регистрирует документ к оплате в бюджет
//
// Параметры:
// 	Ссылка - ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент -  Документ учета НДС
//  ДополнительныеСвойства	 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  										имеющую ключ ТаблицаПодтверждениеОплатыНДСВБюджет (ТаблицаЗначений)
//  Отказ					 - Булево - 
//
Процедура ЗарегистрироватьКОплатеВБюджет(СчетФактура, ТаблицаПодтверждениеОплатыНДСВБюджет)
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.СчетФактура.Установить(СчетФактура);
	
	// проверим данные об оплате
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.Оплачено);
	Набор.Прочитать();
	Оплачено = Набор.Итог("Сумма");
	МассивДат = Набор.ВыгрузитьКолонку("ДатаПодтвержденияОплаты");
	ДатаПодтвержденияОплаты = '00010101';
	Для Каждого ЭлементМассива Из МассивДат Цикл
		ДатаПодтвержденияОплаты = Макс(ЭлементМассива,ДатаПодтвержденияОплаты);
	КонецЦикла;
	
	// сформируем запись к оплате
	Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты);
	Набор.Загрузить(ТаблицаПодтверждениеОплатыНДСВБюджет);
	КОплате = Набор.Итог("Сумма");
	Если КОплате <= Оплачено Тогда
		// запись к оплате очищаем
		Набор.Очистить();
		Набор.Записать();
		// нужно сформировать запись с подтверждением оплаты на случай, если уменьшилась сумма НДС в счете-фактуре и оплата стала полной
		Если Не ТипЗнч(СчетФактура) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
			Набор.Отбор.Состояние.Установить(Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение);
			СтрокаПодтверждения = Набор.Добавить();
			СтрокаПодтверждения.СчетФактура = СчетФактура;
			СтрокаПодтверждения.Состояние 	= Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			СтрокаПодтверждения.ДатаПодтвержденияОплаты = ДатаПодтвержденияОплаты;
			Набор.Записать();
		КонецЕсли;
	ИначеЕсли Набор.Количество() = 1 Тогда
		Набор[0].Сумма = КОплате - Оплачено;	
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеСчетовФактур(СчетаФактуры, ВременныеТаблицы) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	// ВтСчетаФактуры
	|ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Документ,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Дата КАК Дата,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Организация КАК Организация,
	|	СУММА(ЗаявлениеОВвозеТоваров.СуммаНДС) КАК СуммаНДС,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Договор КАК Договор,
	|	NULL КАК ДокументОснование,
	|	NULL КАК ВидАгентскогоДоговора
	|ПОМЕСТИТЬ ВтСчетаФактуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Дата,
	|	ЗаявлениеОВвозеТоваров.Ссылка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураНалоговыйАгент.Ссылка,
	|	СчетФактураНалоговыйАгент.Ссылка.Дата,
	|	СчетФактураНалоговыйАгент.Ссылка.Организация,
	|	СУММА(СчетФактураНалоговыйАгент.СуммаНДС),
	|	СчетФактураНалоговыйАгент.Ссылка.Договор,
	|	СчетФактураНалоговыйАгент.Ссылка.ДокументОснование,
	|	СчетФактураНалоговыйАгент.Ссылка.ВидАгентскогоДоговора
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент.РасшифровкаСуммы КАК СчетФактураНалоговыйАгент
	|ГДЕ
	|	СчетФактураНалоговыйАгент.Ссылка В(&СчетаФактуры)
	|	ИЛИ СчетФактураНалоговыйАгент.Ссылка.ДокументОснование В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураНалоговыйАгент.Ссылка,
	|	СчетФактураНалоговыйАгент.Ссылка.Дата,
	|	СчетФактураНалоговыйАгент.Ссылка.Организация,
	|	СчетФактураНалоговыйАгент.Ссылка.ВидАгентскогоДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Организация,
	|	СУММА(ТаможеннаяДекларацияИмпорт.СуммаНДС),
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Договор,
	|	NULL КАК ДокументОснование,
	|	NULL
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка В(&СчетаФактуры)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаможеннаяДекларацияИмпорт.Ссылка,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата,
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВтСчетаФактуры.Дата,ДЕНЬ)) КАК Дата
	|ПОМЕСТИТЬ ВтНачалоРасчета
	|ИЗ
	|	ВтСчетаФактуры КАК ВтСчетаФактуры
	|;
	|";	
	
	Запрос.УстановитьПараметр("СчетаФактуры", СчетаФактуры);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьДанныеОплаты(ВременныеТаблицы) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.РасчетныйДокумент КАК ДокументОплаты,
	|	Расчеты.ПредоплатаРегл КАК Сумма,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ПОМЕСТИТЬ ВтРасчеты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.Регистратор = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.Регистратор,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент = Расчеты.Регистратор
	|			ТОГДА Расчеты.ПредоплатаРегл
	|		ИНАЧЕ Расчеты.ДолгРегл
	|	КОНЕЦ,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.ЗаказПоставщику = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	Расчеты.Регистратор,
	|	Расчеты.ДолгРегл,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Расчеты.Период >= НачалоРасчета.Дата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО Расчеты.РасчетныйДокумент = СчетаФактуры.Документ
	|ГДЕ
	|	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Расчеты.Активность
	|	И Расчеты.РасчетныйДокумент <> Расчеты.ЗаказПоставщику
	|	И Расчеты.РасчетныйДокумент <> Расчеты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтПлатежиВБюджет
	|ИЗ
	|	ЖурналДокументов.Платежи КАК Платежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНачалоРасчета КАК НачалоРасчета
	|		ПО Платежи.Дата >= НачалоРасчета.Дата
	|ГДЕ
	|	Платежи.Операция = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Платежи.Тип = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|	И Платежи.Проведен
	|	И ВЫРАЗИТЬ(Платежи.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).ПроведеноБанком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Документ КАК СчетФактура,
	|	РасшифровкаПлатежа.Ссылка КАК ДокументОплаты,
	|	РасшифровкаПлатежа.Ссылка.ДатаПроведенияБанком КАК ДатаПроведенияБанком,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ВтДокументыОплаты
	|ИЗ
	|	ВтПлатежиВБюджет КАК ПлатежиВБюджет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ПО (РасшифровкаПлатежа.Ссылка = ПлатежиВБюджет.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК СчетаФактуры
	|		ПО РасшифровкаПлатежа.Ссылка.ДокументОснование = СчетаФактуры.Документ
	|;
	|
	// ВтОплаты
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.Организация КАК Организация,
	|	ДокументыОплаты.СчетФактура КАК СчетФактура,
	|	ДокументыОплаты.ДокументОплаты КАК ДокументОплаты,
	|	СУММА(ДокументыОплаты.Сумма) КАК Сумма,
	|	ДанныеПервичныхДокументов.Номер КАК Номер,
	|	ДанныеПервичныхДокументов.Дата КАК Дата,
	|	ДокументыОплаты.ДатаПроведенияБанком КАК ДатаПеречисленияНалога
	|ПОМЕСТИТЬ ВтОплаты
	|ИЗ
	|	ВтДокументыОплаты КАК ДокументыОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументыОплаты.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДокументыОплаты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОплаты.Организация,
	|	ДокументыОплаты.СчетФактура,
	|	ДокументыОплаты.ДокументОплаты,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	ДокументыОплаты.ДатаПроведенияБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Организация,
	|	Расчеты.СчетФактура,
	|	Расчеты.ДокументОплаты,
	|	СУММА(Расчеты.Сумма),
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	NULL
	|ИЗ
	|	ВтРасчеты КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Расчеты.ДокументОплаты = ДанныеПервичныхДокументов.Документ
	|			И Расчеты.Организация = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Организация,
	|	Расчеты.СчетФактура,
	|	Расчеты.ДокументОплаты,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расчеты.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтДокументыОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРасчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтПлатежиВБюджет
	|;
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьДанныеЗаявок(ВременныеТаблицы) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ПОМЕСТИТЬ ВтАктуальныеЗаявки
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
	|			,
	|			Организация В
	|				(ВЫБРАТЬ Т.Организация ИЗ ВтСчетаФактуры КАК Т)) КАК ДенежныеСредстваКВыплатеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявкаНаРасходованиеДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтАктуальныеЗаявки.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|				РасшифровкаПлатежа.Ссылка.ДокументОснование
	|		КАК СчетФактура
	|ПОМЕСТИТЬ ВтЗаявкиНаОплату
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАктуальныеЗаявки КАК ВтАктуальныеЗаявки
	|		ПО РасшифровкаПлатежа.Ссылка = ВтАктуальныеЗаявки.ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка.Проведен	
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЗаявкиНаОплату.ЗаявкаНаРасходованиеДенежныхСредств 	КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВтСчетаФактуры.Документ 								КАК СчетФактура
	|ПОМЕСТИТЬ втЗаявкиПредварительная
	|ИЗ
	|	ВтЗаявкиНаОплату КАК ВтЗаявкиНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ПО ВтЗаявкиНаОплату.СчетФактура = ВтСчетаФактуры.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтЗаявкиНаОплату.ЗаявкаНаРасходованиеДенежныхСредств 	КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВтСчетаФактуры.Документ 								КАК СчетФактура
	|ИЗ
	|	ВтЗаявкиНаОплату КАК ВтЗаявкиНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ПО ВтЗаявкиНаОплату.СчетФактура = ВтСчетаФактуры.ДокументОснование
	|
	|;
	|
	// втЗаявки
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Заявки.ЗаявкаНаРасходованиеДенежныхСредств) КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	Заявки.СчетФактура 									 КАК СчетФактура
	|ПОМЕСТИТЬ втЗаявки
	|ИЗ
	|	втЗаявкиПредварительная КАК Заявки
	|СГРУППИРОВАТЬ ПО
	|	Заявки.СчетФактура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтАктуальныеЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗаявкиПредварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтЗаявкиНаОплату
	|;
	|";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Актуализирует данные об оплате НДС в бюджет, уменьшает регистрацию к оплате
//
// Параметры:
// 	СчетаФактуры - массив документов с типами ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент
//
Процедура ОбновитьДанныеОплаты(СчетаФактуры)
	
	Если Не ТипЗнч(СчетаФактуры) = Тип("Массив") 
		ИЛИ СчетаФактуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	СформироватьДанныеСчетовФактур(СчетаФактуры, ВременныеТаблицы);
	СформироватьДанныеОплаты(ВременныеТаблицы);
	СформироватьДанныеЗаявок(ВременныеТаблицы);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВтСчетаФактуры.Организация КАК Организация,
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура КАК СчетФактура,
	|	ПодтверждениеОплатыНДСВБюджет.Состояние КАК Состояние,
	|	ПодтверждениеОплатыНДСВБюджет.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ПодтверждениеОплатыНДСВБюджет.НомерДокументаПеречисленияНалога КАК НомерДокументаПеречисленияНалога,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаДокументаПеречисленияНалога КАК ДатаДокументаПеречисленияНалога,
	|	ПодтверждениеОплатыНДСВБюджет.Сумма КАК Сумма,
	|	ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты КАК ДатаПодтвержденияОплаты
	|ПОМЕСТИТЬ втРучныеКорректировкиОплат
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ПО ПодтверждениеОплатыНДСВБюджет.СчетФактура = ВтСчетаФактуры.Документ
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.РучнаяКорректировка
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено)
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	НомерДокументаПеречисленияНалога,
	|	ДатаДокументаПеречисленияНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРучныеКорректировкиОплат.Организация КАК Организация,
	|	втРучныеКорректировкиОплат.СчетФактура КАК СчетФактура,
	|	втРучныеКорректировкиОплат.Состояние КАК Состояние,
	|	втРучныеКорректировкиОплат.РучнаяКорректировка КАК РучнаяКорректировка,
	|	втРучныеКорректировкиОплат.НомерДокументаПеречисленияНалога КАК НомерДокументаПеречисленияНалога,
	|	втРучныеКорректировкиОплат.ДатаДокументаПеречисленияНалога КАК ДатаДокументаПеречисленияНалога,
	|	втРучныеКорректировкиОплат.Сумма КАК Сумма,
	|	втРучныеКорректировкиОплат.ДатаПодтвержденияОплаты КАК ДатаПодтвержденияОплаты
	|ПОМЕСТИТЬ втПолнаяТаблицаОплат
	|ИЗ
	|	втРучныеКорректировкиОплат КАК втРучныеКорректировкиОплат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОплаты.Организация КАК Организация,
	|	ВтОплаты.СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.Оплачено),
	|	ЛОЖЬ,
	|	ВтОплаты.Номер,
	|	ВтОплаты.Дата,
	|	ВтОплаты.Сумма,
	|	ВтОплаты.ДатаПеречисленияНалога
	|ИЗ
	|	ВтОплаты КАК ВтОплаты
	|ГДЕ
	|	НЕ (ВтОплаты.СчетФактура, ВтОплаты.Номер, ВтОплаты.Дата) В
	|				(ВЫБРАТЬ
	|					Т.СчетФактура,
	|					Т.НомерДокументаПеречисленияНалога,
	|					Т.ДатаДокументаПеречисленияНалога
	|				ИЗ
	|					втРучныеКорректировкиОплат КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПолнаяТаблицаОплат.СчетФактура 						КАК СчетФактура,
	|	МАКСИМУМ(втПолнаяТаблицаОплат.ДатаПодтвержденияОплаты) 	КАК ДатаПодтвержденияОплаты,
	|	СУММА(втПолнаяТаблицаОплат.Сумма) 						КАК Сумма
	|ПОМЕСТИТЬ втСуммыОплат
	|ИЗ
	|	втПолнаяТаблицаОплат КАК втПолнаяТаблицаОплат
	|СГРУППИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПолнаяТаблицаОплат.СчетФактура 						КАК СчетФактура,
	|	втПолнаяТаблицаОплат.Состояние 							КАК Состояние,
	|	втПолнаяТаблицаОплат.Сумма 								КАК Сумма,
	|	втПолнаяТаблицаОплат.РучнаяКорректировка 				КАК РучнаяКорректировка,
	|	втПолнаяТаблицаОплат.НомерДокументаПеречисленияНалога 	КАК НомерДокументаПеречисленияНалога,
	|	втПолнаяТаблицаОплат.ДатаДокументаПеречисленияНалога 	КАК ДатаДокументаПеречисленияНалога,
	|	втПолнаяТаблицаОплат.ДатаПодтвержденияОплаты 			КАК ДатаПодтвержденияОплаты,
	|	NULL 													КАК ВидАгентскогоДоговора,
	|	NULL 													КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ИЗ
	|	втПолнаяТаблицаОплат КАК втПолнаяТаблицаОплат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтСчетаФактуры.Документ,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты),
	|	ВЫБОР 
	|		КОГДА ВтСчетаФактуры.СуммаНДС - ЕСТЬNULL(втСуммыОплат.Сумма, 0) > 0 
	|			ТОГДА ВтСчетаФактуры.СуммаНДС - ЕСТЬNULL(втСуммыОплат.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВтСчетаФактуры.ВидАгентскогоДоговора,
	|	втЗаявки.ЗаявкаНаРасходованиеДенежныхСредств
	|ИЗ
	|	ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплат КАК втСуммыОплат
	|		ПО ВтСчетаФактуры.Документ = втСуммыОплат.СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявки КАК втЗаявки
	|		ПО ВтСчетаФактуры.Документ = втЗаявки.СчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтСчетаФактуры.Документ,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение),
	|	ВЫБОР 
	|		КОГДА ВтСчетаФактуры.СуммаНДС <= ЕСТЬNULL(втСуммыОплат.Сумма, 0) 
	|			ТОГДА ЕСТЬNULL(втСуммыОплат.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫБОР 
	|		КОГДА втСуммыОплат.ДатаПодтвержденияОплаты > ВтСчетаФактуры.Дата 
	|			ТОГДА втСуммыОплат.ДатаПодтвержденияОплаты
	|		ИНАЧЕ ВтСчетаФактуры.Дата
	|	КОНЕЦ,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплат КАК втСуммыОплат
	|		ПО ВтСчетаФактуры.Документ = втСуммыОплат.СчетФактура
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ВтСчетаФактуры.Документ) = ТИП(Документ.ЗаявлениеОВвозеТоваров)
	|
	|ИТОГИ ПО
	|	СчетФактура,
	|	Состояние";	
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВыборкаПоСостояниям = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСостояниям.Следующий() Цикл
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.СчетФактура.Установить(ВыборкаПоДокументам.СчетФактура);
			Набор.Отбор.Состояние.Установить(ВыборкаПоСостояниям.Состояние);
			Выборка = ВыборкаПоСостояниям.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Сумма <> 0 Тогда
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
				КонецЕсли;
			КонецЦикла;
			Набор.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для указанных счетов-фактур записывает данные о сформированных заявках на оплату
//
// Параметры:
// 	СчетаФактуры - массив документов с типами ДокументСсылка.ЗаявлениеОВвозеТоваров, ДокументСсылка.ТаможеннаяДекларацияИмпорт, 
// 						 ДокументСсылка.СчетФактураНалоговыйАгент
//
Процедура ОбновитьДанныеЗаявок(СчетаФактуры)
	
	Если Не ТипЗнч(СчетаФактуры) = Тип("Массив") 
		ИЛИ СчетаФактуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	СформироватьДанныеСчетовФактур(СчетаФактуры, ВременныеТаблицы);
	СформироватьДанныеЗаявок(ВременныеТаблицы);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВтСчетаФактуры.Документ 							КАК СчетФактура,
	|	ПодтверждениеОплатыНДСВБюджет.Состояние 			КАК Состояние,
	|	ПодтверждениеОплатыНДСВБюджет.Сумма 				КАК Сумма,
	|	ВтСчетаФактуры.ВидАгентскогоДоговора 				КАК ВидАгентскогоДоговора,
	|	втЗаявки.ЗаявкаНаРасходованиеДенежныхСредств        КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаФактуры КАК ВтСчетаФактуры
	|		ПО ПодтверждениеОплатыНДСВБюджет.СчетФактура = ВтСчетаФактуры.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявки КАК втЗаявки
	|		ПО ВтСчетаФактуры.Документ = втЗаявки.СчетФактура
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты)
	|ИТОГИ ПО
	|	СчетФактура";	
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.СчетФактура.Установить(ВыборкаПоДокументам.СчетФактура);
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор.Отбор.Состояние.Установить(Выборка.Состояние);
			Запись = Набор.Добавить();
	 		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_11_4_2

// Регистрирует данные для обработчика обновления УТ 11.4.2
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = ЗаявлениеОВвозеТоваров.Ссылка)
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураНалоговыйАгент.Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент.РасшифровкаСуммы КАК СчетФактураНалоговыйАгент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = СчетФактураНалоговыйАгент.Ссылка)
	|ГДЕ
	|	СчетФактураНалоговыйАгент.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|		ПО (ПодтверждениеОплатыНДСВБюджет.СчетФактура = ТаможеннаяДекларацияИмпорт.Ссылка)
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка.Проведен
	|	И ПодтверждениеОплатыНДСВБюджет.СчетФактура ЕСТЬ NULL
	|";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры

// Заполняет регистр по данным шапок и табличных частей документов НДС
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
	МетаданныеДокумента = Метаданные.Документы.СчетФактураВыданный;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметрыВыборкиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанных.ИмяВременнойТаблицы = "втДокументыКОбработкеПредварительная";
	ПолныеИменаОбъектов = "Документ.ЗаявлениеОВвозеТоваров,Документ.ТаможеннаяДекларацияИмпорт,Документ.СчетФактураНалоговыйАгент";
	РезультатЗаблокированныеОбъекты =
		ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(Параметры.Очередь,ПолныеИменаОбъектов,МенеджерВременныхТаблиц);
	РезультатДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь,
		ПолноеИмяРегистра,
		МенеджерВременныхТаблиц,
		ДополнительныеПараметрыВыборкиДанных);
		
	Если РезультатДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда	
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыКОбработке.СчетФактура КАК СчетФактура
		|ПОМЕСТИТЬ втДокументыКОбработке
		|ИЗ
		|	втДокументыКОбработкеПредварительная КАК ДокументыКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаблокированныеОбъекты КАК ЗаблокированныеОбъекты
		|		ПО ДокументыКОбработке.СчетФактура = ЗаблокированныеОбъекты.Ссылка
		|ГДЕ
		|	ЗаблокированныеОбъекты.Ссылка ЕСТЬ NULL
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетФактура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка,
		|	ЗаявлениеОВвозеТоваров.Ссылка.ВерсияДанных КАК ВерсияДанных,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаДокументаПеречисленияНалога КАК УдалитьДатаДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерДокументаПеречисленияНалога КАК УдалитьНомерДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьОплатаПодтверждена КАК УдалитьОплатаПодтверждена,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаПодтвержденияОплаты КАК УдалитьДатаПодтвержденияОплаты,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерОтметкиОРегистрации КАК УдалитьНомерОтметкиОРегистрации,
		|	СУММА(ЗаявлениеОВвозеТоваров.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО ЗаявлениеОВвозеТоваров.Ссылка = ДокументыКОбработке.СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявлениеОВвозеТоваров.Ссылка,
		|	ЗаявлениеОВвозеТоваров.Ссылка.ВерсияДанных,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерДокументаПеречисленияНалога,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьОплатаПодтверждена,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьДатаПодтвержденияОплаты,
		|	ЗаявлениеОВвозеТоваров.Ссылка.УдалитьНомерОтметкиОРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО ТаможеннаяДекларацияИмпорт.Ссылка = ДокументыКОбработке.СчетФактура
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаможеннаяДекларацияИмпорт.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураНалоговыйАгент.Ссылка КАК Ссылка,
		|	СчетФактураНалоговыйАгент.ВерсияДанных КАК ВерсияДанных,
		|	СчетФактураНалоговыйАгент.УдалитьДатаДокументаПеречисленияНалога КАК УдалитьДатаДокументаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.УдалитьНомерДокументаПеречисленияНалога КАК УдалитьНомерДокументаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.УдалитьНалогПеречислен КАК УдалитьНалогПеречислен,
		|	СчетФактураНалоговыйАгент.УдалитьДатаПеречисленияНалога КАК УдалитьДатаПеречисленияНалога,
		|	СчетФактураНалоговыйАгент.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.СчетФактураНалоговыйАгент КАК СчетФактураНалоговыйАгент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыКОбработке КАК ДокументыКОбработке
		|		ПО СчетФактураНалоговыйАгент.Ссылка = ДокументыКОбработке.СчетФактура";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втЗаблокированныеОбъекты",РезультатЗаблокированныеОбъекты.ИмяВременнойТаблицы);
		
		Результат = Запрос.ВыполнитьПакет();
	
		ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
		ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
		ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПодтверждениеОплатыНДСВБюджет";
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("СчетФактура");
		ТаблицаДанных.Добавить(); // 1 строка
		
#Область ЗаявленияОВвозе
		
		Выборка = Результат[1].Выбрать(); 
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.УстановитьЗначение("СчетФактура", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявлениеОВвозеТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.СчетФактура.Установить(Выборка.Ссылка);
			ЗаполнитьЗаписиПоДаннымЗаявленияОВвозе(Набор, Выборка);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка,"ВерсияДанных");
				Если Версия = Выборка.ВерсияДанных Тогда
					ТаблицаДанных[0].СчетФактура = Выборка.Ссылка;
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;	
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		
#КонецОбласти
		
#Область СчетаФактурыНалоговыйАгент
		Выборка = Результат[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.УстановитьЗначение("СчетФактура", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = Блокировка.Добавить("Документ.СчетФактураНалоговыйАгент");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		
			Набор = СоздатьНаборЗаписей();
			Набор.Отбор.СчетФактура.Установить(Выборка.Ссылка);
			ЗаполнитьЗаписиПоДаннымСчетаФактурыНалоговогоАгента(Набор, Выборка);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка,"ВерсияДанных");
				Если Версия = Выборка.ВерсияДанных Тогда
					ТаблицаДанных[0].СчетФактура = Выборка.Ссылка;
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
					ЗафиксироватьТранзакцию();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;	
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
#КонецОбласти
		
#Область ТаможенныеДекларацииИмпорт
		Если Не Результат[2].Пустой() Тогда
			ТаблицаДанных.Очистить();
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
				ЭлементБлокировки.ИсточникДанных = Результат[2];
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетФактура","Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить("Документ.ТаможеннаяДекларацияИмпорт");
				ЭлементБлокировки.ИсточникДанных = Результат[2];
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыКОбработке.СчетФактура КАК Ссылка,
			|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата КАК Дата,
			|	СУММА(ЕСТЬNULL(ТаможеннаяДекларацияИмпорт.СуммаНДС,0)) КАК СуммаНДС
			|ПОМЕСТИТЬ ТаможенныеДекларации
			|ИЗ
			|	втДокументыКОбработке КАК ДокументыКОбработке
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
			|		ПО ТаможеннаяДекларацияИмпорт.Ссылка = ДокументыКОбработке.СчетФактура
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыКОбработке.СчетФактура,
			|	ТаможеннаяДекларацияИмпорт.Ссылка.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаможенныеДекларации.Ссылка КАК Ссылка,
			|	ТаможенныеДекларации.СуммаНДС КАК СуммаНДС,
			|	ЕСТЬNULL(ДокументыОплатыНалога.НомерДокумента, """") КАК Номер,
			|	ЕСТЬNULL(ДокументыОплатыНалога.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)) КАК Дата,
			|	МАКСИМУМ(ИСТИНА) КАК РучнаяКорректировка,
			|	МАКСИМУМ(1) КАК Сумма
			|ИЗ
			|	ТаможенныеДекларации КАК ТаможенныеДекларации
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.УдалитьДокументыОплатыНалога КАК ДокументыОплатыНалога
			|		ПО ТаможенныеДекларации.Ссылка = ДокументыОплатыНалога.Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаможенныеДекларации.Ссылка,
			|	ЕСТЬNULL(ДокументыОплатыНалога.НомерДокумента, """"),
			|	ЕСТЬNULL(ДокументыОплатыНалога.ДатаДокумента, ДАТАВРЕМЯ(1,1,1)),
			|	ТаможенныеДекларации.СуммаНДС
			|ИТОГИ
			|	МАКСИМУМ(СуммаНДС)
			|ПО
			|	Ссылка";	
			
			ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл
				Если ВыборкаПоДокументам.СуммаНДС <> 0 Тогда
					Набор = СоздатьНаборЗаписей();
					Набор.Отбор.СчетФактура.Установить(ВыборкаПоДокументам.Ссылка);
					ЗаполнитьЗаписиПоДаннымТаможеннойДекларации(Набор, ВыборкаПоДокументам);
					Попытка
						ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
						ТаблицаДанных.Добавить().СчетФактура = ВыборкаПоДокументам.Ссылка;
					Исключение
						ОтменитьТранзакцию();
						ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  ВыборкаПоДокументам.Ссылка);
						ВызватьИсключение;
					КонецПопытки;
				Иначе
					ТаблицаДанных.Добавить().СчетФактура = ВыборкаПоДокументам.Ссылка;
				КонецЕсли;
			КонецЦикла;
			Попытка
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаДанных,ДополнительныеПараметры,Параметры.Очередь);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Документы.ТаможеннаяДекларацияИмпорт.ПустаяСсылка());
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
#КонецОбласти

	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымСчетаФактурыНалоговогоАгента(Набор, СчетФактура)
	
	Если Не СчетФактура.УдалитьНалогПеречислен Тогда // строка ОжидаетОплаты
		СтрокаКОплате = Набор.Добавить();
		СтрокаКОплате.СчетФактура = СчетФактура.Ссылка;
		СтрокаКОплате.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
		СтрокаКОплате.Сумма = СчетФактура.СуммаНДС;
	Иначе // считаем, что оплачено полностью
		// оплата только одна, закрепляем ручной корректировкой
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = СчетФактура.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = СчетФактура.СуммаНДС;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = СчетФактура.УдалитьДатаДокументаПеречисленияНалога;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = СчетФактура.УдалитьНомерДокументаПеречисленияНалога;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Истина;
		// сохраняем дату перечисления налога
		СтрокаПодтверждения = Набор.Добавить();
		СтрокаПодтверждения.СчетФактура = СчетФактура.Ссылка;
		СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
		СтрокаПодтверждения.ДатаПодтвержденияОплаты = СчетФактура.УдалитьДатаПеречисленияНалога;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымЗаявленияОВвозе(Набор, СчетФактура)
	
	Если Не СчетФактура.УдалитьОплатаПодтверждена Тогда //строка ОжидаетОплаты
		СтрокаКОплате = Набор.Добавить();
		СтрокаКОплате.СчетФактура = СчетФактура.Ссылка;
		СтрокаКОплате.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ОжидаетОплаты;
		СтрокаКОплате.Сумма = СчетФактура.СуммаНДС;
	Иначе // считаем, что оплачено полностью
		
		// оплата только одна, закрепляем ручной корректировкой
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = СчетФактура.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = СчетФактура.СуммаНДС;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = СчетФактура.УдалитьДатаДокументаПеречисленияНалога;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = СчетФактура.УдалитьНомерДокументаПеречисленияНалога;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Истина;
		
		// подтверждение оплаты
		Если ЗначениеЗаполнено(СчетФактура.УдалитьНомерОтметкиОРегистрации) ИЛИ ЗначениеЗаполнено(СчетФактура.УдалитьДатаПодтвержденияОплаты) Тогда
			СтрокаПодтверждения = Набор.Добавить();
			СтрокаПодтверждения.СчетФактура = СчетФактура.Ссылка;
			СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
			СтрокаПодтверждения.ДатаПодтвержденияОплаты = СчетФактура.УдалитьДатаПодтвержденияОплаты;
			СтрокаПодтверждения.НомерОтметкиОРегистрации = СчетФактура.УдалитьНомерОтметкиОРегистрации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаписиПоДаннымТаможеннойДекларации(Набор, ВыборкаПоДокументам)
	
	Выборка = ВыборкаПоДокументам.Выбрать();
	СуммаНДС = 0;
	ДатаПодтвержденияОплаты = '0001-01-01';
	Пока Выборка.Следующий() Цикл
		СтрокаОплаты = Набор.Добавить();
		СтрокаОплаты.СчетФактура = Выборка.Ссылка;
		СтрокаОплаты.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.Оплачено;
		СтрокаОплаты.Сумма = Выборка.Сумма;
		СтрокаОплаты.ДатаДокументаПеречисленияНалога = Выборка.Дата;
		СтрокаОплаты.НомерДокументаПеречисленияНалога = Выборка.Номер;
		Если ЗначениеЗаполнено(СтрокаОплаты.ДатаДокументаПеречисленияНалога) Тогда
			СтрокаОплаты.СтрокаПлатежноРасчетныеДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 от %2'"),
				СтрокаОплаты.НомерДокументаПеречисленияНалога,
				Формат(СтрокаОплаты.ДатаДокументаПеречисленияНалога, "ДЛФ=D"));
		КонецЕсли;
		СтрокаОплаты.РучнаяКорректировка = Выборка.РучнаяКорректировка;
		СуммаНДС = Выборка.СуммаНДС;
		ДатаПодтвержденияОплаты = Макс(Выборка.Дата, ДатаПодтвержденияОплаты);
	КонецЦикла;

	Если СуммаНДС <> 0 Тогда
		МассивСтарыхСумм = Набор.ВыгрузитьКолонку("Сумма");
		МассивНовыхСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНДС, МассивСтарыхСумм);
		Набор.ЗагрузитьКолонку(МассивНовыхСумм, "Сумма");
	КонецЕсли;
	
	// подтверждение оплаты
	СтрокаПодтверждения = Набор.Добавить();
	СтрокаПодтверждения.СчетФактура = ВыборкаПоДокументам.Ссылка;
	СтрокаПодтверждения.Состояние = Перечисления.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение;
	СтрокаПодтверждения.Сумма = СуммаНДС;
	СтрокаПодтверждения.ДатаПодтвержденияОплаты = ДатаПодтвержденияОплаты;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
