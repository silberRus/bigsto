
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Партнер = Параметры.Партнер;
	
	ЗаполнитьПотребностиКлиента();
	
	Если Не ЗначениеЗаполнено(Соглашение) Тогда
		СтруктураСоглашения = ПолучитьСоглашениеСКлиентом(Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураСоглашения) Тогда
		Соглашение = СтруктураСоглашения.Ссылка;
		Склад = СтруктураСоглашения.Склад;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("ef02ae83-b55a-11e4-8ed0-001517b9d0ec"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПериодПотребности" Тогда
		
		УникальныйИдентификаторСтроки = Параметр.УникальныйИдентификаторСтроки;
		МассивЗначений = Параметр.МассивЗначений;
		ОбновитьЗначениеПотребности(УникальныйИдентификаторСтроки, МассивЗначений);
		
	ИначеЕсли ИмяСобытия = "ЖелаемаяЦена" Тогда
		
		СтрокиДляИЗменения = ПотребностиКлиента.НайтиСтроки(Новый Структура("УникальныйИдентификатор", Параметр.УникальныйИдентификаторСтроки));
		
		Для Каждого Строка Из СтрокиДляИЗменения Цикл
			Строка.ЖелаемаяЦена = Параметр.Цена;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНаСервере();
	Иначе
		Отказ = Истина;
		ТекстПредупреждения = "Закройте форму потребности клиента вручную. Иначе данные будут потеряны.";
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = ТекущаяДата();
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиКлиентаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребностиКлиента
&НаКлиенте
Процедура ПотребностиКлиентаПотребностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификаторСтроки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.УникальныйИдентификатор);
	МассивЗначений = СтрРазделить(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Потребность, ";");
	ИндексМассива = 0;
	
	Для Каждого ЭлементМассива Из МассивЗначений Цикл;
		Если СтрДлина(ЭлементМассива) > 2 Тогда
			МассивЗначений.Установить(ИндексМассива, Дата(ЭлементМассива));
		ИначеЕсли ЭлементМассива <> "" Тогда
			МассивЗначений.Установить(ИндексМассива, Дата(2, ЭлементМассива, 1));
		КонецЕсли;
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивЗначений", МассивЗначений);
	
	ОткрытьФорму("РегистрСведений.ПотребностьКлиентов.Форма.ВыборПериода", ПараметрыФормы, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиКлиентаКоличествоПриИзменении(Элемент)
	ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Сумма = 
		ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Количество * 
		?(ЗначениеЗаполнено(
			ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ЦенаСоСкидкой),
			ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ЦенаСоСкидкой,
			ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Цена);
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиКлиентаВысокаяЦенаПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.ВысокаяЦена = Ложь Тогда
		
		Элемент.Родитель.ТекущиеДанные.ЖелаемаяЦена = 0;
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторСтроки", ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.УникальныйИдентификатор);
		
		ОткрытьФорму("РегистрСведений.ПотребностьКлиентов.Форма.ВыборЦены", ПараметрыФормы, ЭтаФорма, , ВариантОткрытияОкна.ОтдельноеОкно, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьВсеИзменения(Команда)
	ОтменитьВсеИзмененияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	Настройки = ПолучитьНастройкиНаСервере();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Соглашение);
	ПараметрыФормы.Вставить("Организация", Настройки.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Ложь);
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Ложь);
	ПараметрыФормы.Вставить("Склад", Склад);
	ПараметрыФормы.Вставить("Валюта", Настройки.Валюта);
	ПараметрыФормы.Вставить("Заголовок", "Потребность клиентов");
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("Документ", Настройки.Документ);

	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Ложь);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьНаСервере();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПотребностиКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПотребностьКлиентов.Клиент КАК Клиент,
	|	ПотребностьКлиентов.Склад КАК Склад,
	|	ПотребностьКлиентов.Соглашение КАК Соглашение,
	|	ПотребностьКлиентов.Номенклатура КАК Номенклатура,
	|	ПотребностьКлиентов.Количество КАК Количество,
	|	ПотребностьКлиентов.Цена КАК Цена,
	|	ПотребностьКлиентов.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	ПотребностьКлиентов.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ПотребностьКлиентов.ЖелаемаяЦена КАК ЖелаемаяЦена,
	|	ПотребностьКлиентов.ПериодРегистрации КАК ПериодРегистрации,
	|	ПотребностьКлиентов.Ответственный КАК Ответственный,
	|	ПотребностьКлиентов.ВысокаяЦена КАК ВысокаяЦена,
	|	ПотребностьКлиентов.ВидЦены КАК ВидЦены,
	|	ПериодыПотребностиКлиентов.ПериодПотребности КАК ПериодПотребности,
	|	ПотребностьКлиентов.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ПотребностьКлиентов.ПериодИзменения КАК ПериодИзменения
	|ИЗ
	|	РегистрСведений.ПотребностьКлиентов КАК ПотребностьКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыПотребностиКлиентов КАК ПериодыПотребностиКлиентов
	|		ПО ПотребностьКлиентов.УникальныйИдентификатор = ПериодыПотребностиКлиентов.УникальныйИдентификатор
	|ГДЕ
	|	ПотребностьКлиентов.Активно
	|	И ПотребностьКлиентов.Клиент = &Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодИзменения
	|ИТОГИ ПО
	|	УникальныйИдентификатор";
	Запрос.УстановитьПараметр("Клиент", Партнер);
	
	Результат = Запрос.Выполнить();
	ПотребностиКлиента.Очистить();
	
	Если Не Результат.Пустой() Тогда
		
		ВыборкаПоГруппировке = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоГруппировке.Следующий() Цикл
			
			Выборка = ВыборкаПоГруппировке.Выбрать();
			МассивЗначений = Новый Массив;
			Итератор = 1;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.ПериодПотребности) Тогда
					ПериодПотребности = "";
				ИначеЕсли Год(Выборка.ПериодПотребности) = 2 Тогда
					ПериодПотребности = Месяц(Выборка.ПериодПотребности);
				Иначе
					ПериодПотребности = Формат(Выборка.ПериодПотребности, "ДФ=yyyyMMdd");
				КонецЕсли;
				
				МассивЗначений.Добавить(ПериодПотребности);
				
				Если Итератор = Выборка.Количество() Тогда
					НоваяСтрока = ПотребностиКлиента.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Потребность = СтрСоединить(МассивЗначений, ";");
					НоваяСтрока.Сумма = НоваяСтрока.ЦенаСоСкидкой * НоваяСтрока.Количество;
					Склад = Выборка.Склад;
					Соглашение = Выборка.Соглашение;
				КонецЕсли;
				
				Итератор = Итератор + 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПотребностиКлиентаПриОткрытии.Загрузить(ПотребностиКлиента.Выгрузить());

КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПотребностиКлиента.Номенклатура КАК Номенклатура,
	|	ПотребностиКлиента.Количество КАК Количество,
	|	ПотребностиКлиента.ВидЦены КАК ВидЦены,
	|	ПотребностиКлиента.Цена КАК Цена,
	|	ПотребностиКлиента.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	ПотребностиКлиента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ПотребностиКлиента.Сумма КАК Сумма,
	|	ПотребностиКлиента.ВысокаяЦена КАК ВысокаяЦена,
	|	ПотребностиКлиента.ЖелаемаяЦена КАК ЖелаемаяЦена,
	|	ПотребностиКлиента.Потребность КАК Потребность,
	|	ПотребностиКлиента.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ПотребностиКлиента.Склад КАК Склад,
	|	ПотребностиКлиента.Соглашение КАК Соглашение
	|ПОМЕСТИТЬ ПотребностиКлиента
	|ИЗ
	|	&ПотребностиКлиента КАК ПотребностиКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотребностиКлиентаПриОткрытии.Номенклатура КАК Номенклатура,
	|	ПотребностиКлиентаПриОткрытии.Количество КАК Количество,
	|	ПотребностиКлиентаПриОткрытии.ВидЦены КАК ВидЦены,
	|	ПотребностиКлиентаПриОткрытии.Цена КАК Цена,
	|	ПотребностиКлиентаПриОткрытии.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	ПотребностиКлиентаПриОткрытии.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ПотребностиКлиентаПриОткрытии.Сумма КАК Сумма,
	|	ПотребностиКлиентаПриОткрытии.ВысокаяЦена КАК ВысокаяЦена,
	|	ПотребностиКлиентаПриОткрытии.ЖелаемаяЦена КАК ЖелаемаяЦена,
	|	ПотребностиКлиентаПриОткрытии.Потребность КАК Потребность,
	|	ПотребностиКлиентаПриОткрытии.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ПотребностиКлиентаПриОткрытии.Склад КАК Склад,
	|	ПотребностиКлиентаПриОткрытии.Соглашение КАК Соглашение
	|ПОМЕСТИТЬ ПотребностиКлиентаПриОткрытии
	|ИЗ
	|	&ПотребностиКлиентаПриОткрытии КАК ПотребностиКлиентаПриОткрытии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Клиент КАК Клиент,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	ВложенныйЗапрос.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.ВысокаяЦена КАК ВысокаяЦена,
	|	ВложенныйЗапрос.ЖелаемаяЦена КАК ЖелаемаяЦена,
	|	ВложенныйЗапрос.Потребность КАК Потребность,
	|	ВложенныйЗапрос.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Соглашение КАК Соглашение,
	|	ВложенныйЗапрос.Новый КАК Новый,
	|	ВложенныйЗапрос.Удалено КАК Удалено,
	|	ВложенныйЗапрос.Изменено КАК Изменено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностиКлиента.Номенклатура КАК Номенклатура,
	|		ПотребностиКлиента.Количество КАК Количество,
	|		ПотребностиКлиента.ВидЦены КАК ВидЦены,
	|		ПотребностиКлиента.Цена КАК Цена,
	|		ПотребностиКлиента.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|		ПотребностиКлиента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|		ПотребностиКлиента.Сумма КАК Сумма,
	|		ПотребностиКлиента.ВысокаяЦена КАК ВысокаяЦена,
	|		ПотребностиКлиента.ЖелаемаяЦена КАК ЖелаемаяЦена,
	|		ПотребностиКлиента.Потребность КАК Потребность,
	|		ЕСТЬNULL(ПотребностиКлиента.УникальныйИдентификатор, ПотребностиКлиентаПриОткрытии.УникальныйИдентификатор) КАК УникальныйИдентификатор,
	|		ПотребностиКлиента.Склад КАК Склад,
	|		ПотребностиКлиента.Соглашение КАК Соглашение,
	|		ВЫБОР
	|			КОГДА ПотребностиКлиентаПриОткрытии.УникальныйИдентификатор ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Новый,
	|		ВЫБОР
	|			КОГДА ПотребностиКлиента.УникальныйИдентификатор ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Удалено,
	|		ВЫБОР
	|			КОГДА ПотребностиКлиента.УникальныйИдентификатор ЕСТЬ NULL
	|					ИЛИ ПотребностиКлиентаПриОткрытии.УникальныйИдентификатор ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПотребностиКлиента.Количество <> ПотребностиКлиентаПриОткрытии.Количество
	|				ТОГДА ИСТИНА
	|			КОГДА ПотребностиКлиента.Сумма <> ПотребностиКлиентаПриОткрытии.Сумма
	|				ТОГДА ИСТИНА
	|			КОГДА ПотребностиКлиента.ВысокаяЦена <> ПотребностиКлиентаПриОткрытии.ВысокаяЦена
	|				ТОГДА ИСТИНА
	|			КОГДА ПотребностиКлиента.ЖелаемаяЦена <> ПотребностиКлиентаПриОткрытии.ЖелаемаяЦена
	|				ТОГДА ИСТИНА
	|			КОГДА ПотребностиКлиента.Потребность <> ПотребностиКлиентаПриОткрытии.Потребность
	|				ТОГДА ИСТИНА
	|			КОГДА ПотребностиКлиента.Склад <> ПотребностиКлиентаПриОткрытии.Склад
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Изменено
	|	ИЗ
	|		ПотребностиКлиента КАК ПотребностиКлиента
	|			ПОЛНОЕ СОЕДИНЕНИЕ ПотребностиКлиентаПриОткрытии КАК ПотребностиКлиентаПриОткрытии
	|			ПО ПотребностиКлиента.УникальныйИдентификатор = ПотребностиКлиентаПриОткрытии.УникальныйИдентификатор) КАК ВложенныйЗапрос
	|ГДЕ
	|	(ВложенныйЗапрос.Новый
	|			ИЛИ ВложенныйЗапрос.Удалено
	|			ИЛИ ВложенныйЗапрос.Изменено)";
	
	ПустаяТаблицаПотребности = ИнициализироватьТаблицуПотребности();
	
	Запрос.УстановитьПараметр("ПотребностиКлиента", ?(ПотребностиКлиента.Количество() > 0, ПотребностиКлиента.Выгрузить(), ПустаяТаблицаПотребности));
	Запрос.УстановитьПараметр("ПотребностиКлиентаПриОткрытии", ?(ПотребностиКлиентаПриОткрытии.Количество() > 0, ПотребностиКлиентаПриОткрытии.Выгрузить(), ПустаяТаблицаПотребности));
	Запрос.УстановитьПараметр("Клиент", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	//Запись регистра сведений ПотребностьКлиентов.
	
	НаборЗаписей = РегистрыСведений.ПотребностьКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Клиент.Установить(Партнер);
	НаборЗаписей.Прочитать();
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ПериодыПотребности = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Новый Тогда
			Строка = ТаблицаНабора.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Строка.УникальныйИдентификатор = Новый УникальныйИдентификатор(Выборка.УникальныйИдентификатор);
			Строка.Активно = Истина;
			ПериодыПотребности.Вставить(Строка.УникальныйИдентификатор, Выборка.Потребность);
			Строка.ПериодРегистрации = ТекущаяДата();
		КонецЕсли;
		
		Если Выборка.Удалено Или Выборка.Изменено Тогда
			
			СтрокиОтбора = ТаблицаНабора.НайтиСтроки(Новый Структура("УникальныйИдентификатор", Новый УникальныйИдентификатор(Выборка.УникальныйИдентификатор)));
			
			Для Каждого Строка Из СтрокиОтбора Цикл
				
				Если Выборка.Удалено Тогда
					Строка.Активно = Ложь;
				КонецЕсли;
				
				Если Выборка.Изменено Тогда
					ЗаполнитьЗначенияСвойств(Строка, Выборка, , "УникальныйИдентификатор");
					ПериодыПотребности.Вставить(Строка.УникальныйИдентификатор, Выборка.Потребность);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Строка.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Строка.ПериодИзменения = ТекущаяДата();
		
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаНабора);
	НаборЗаписей.Записать();
	
	//Запись регистра сведений ПериодыПотребностиКлиентов.
	
	Для Каждого КлючИЗначение Из ПериодыПотребности Цикл
		
		НаборЗаписейПериодов = РегистрыСведений.ПериодыПотребностиКлиентов.СоздатьНаборЗаписей();
		НаборЗаписейПериодов.Отбор.УникальныйИдентификатор.Установить(КлючИЗначение.Ключ);
		МассивЗначений = СтрРазделить(КлючИЗначение.Значение, ";");
		
		Для Каждого ЭлементМассива Из МассивЗначений Цикл
			
			Если ЭлементМассива <> "" Тогда
				
				Если СтрДлина(ЭлементМассива) > 2 Тогда
					ПериодПотребности = Дата(ЭлементМассива);
				Иначе
					ПериодПотребности = Дата(2, ЭлементМассива, 1);
				КонецЕсли;
				
				ЗаписьНабора = НаборЗаписейПериодов.Добавить();
				ЗаписьНабора.УникальныйИдентификатор = КлючИЗначение.Ключ;
				ЗаписьНабора.ПериодПотребности = ПериодПотребности;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейПериодов.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Соглашение", Соглашение);
	
	ОбъектЗаказ = Документы.БП_РегистрацияУпущенногоСпроса.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ОбъектЗаказ, ОбъектСтруктура);
	ОбъектЗаказ.Товары.Загрузить(ТаблицаТоваров);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ОбъектЗаказ, СтруктураПараметры);
	
	Для Каждого Строка Из ОбъектЗаказ.Товары Цикл
		
		НоваяСтрока = ПотребностиКлиента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Соглашение = Соглашение;
		НовыйУИД = Новый УникальныйИдентификатор;
		НоваяСтрока.УникальныйИдентификатор = Строка(НовыйУИД);
		
	КонецЦикла;
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ПолучитьСоглашениеСКлиентом(Партнер);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.Склад КАК Склад
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Партнер = &Партнер
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("961fc82f-a8c2-45ac-8938-c30b6cb09abb")));
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСоглашения = Новый Структура;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураСоглашения.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураСоглашения.Вставить("Склад", Выборка.Склад);
	КонецЦикла;
	
	Возврат СтруктураСоглашения;
	
КонецФункции

&НаСервере
Процедура ОтменитьВсеИзмененияНаСервере()
	ПотребностиКлиента.Загрузить(ПотребностиКлиентаПриОткрытии.Выгрузить());
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("Валюта", ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Результат.Вставить("Документ", Документы.ЗаказКлиента.ПустаяСсылка());
	Результат.Вставить("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("961fc82f-a8c2-45ac-8938-c30b6cb09abb")));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗначениеПотребности(УникальныйИдентификаторСтроки, МассивЗначений)
	
	ИндексМассива = 0;
	
	Для Каждого ЭлементМассива Из МассивЗначений Цикл
		Если Год(ЭлементМассива) = 2 Тогда
			МассивЗначений.Установить(ИндексМассива, Месяц(ЭлементМассива));
		ИначеЕсли СтрДлина(ЭлементМассива) > 2 Тогда
			МассивЗначений.Установить(ИндексМассива, Формат(ЭлементМассива, "ДФ=yyyyMMdd"));
		КонецЕсли;
		ИндексМассива = ИндексМассива + 1;
	КонецЦикла;
	
	СтрокиДляИЗменения = ПотребностиКлиента.НайтиСтроки(Новый Структура("УникальныйИдентификатор", УникальныйИдентификаторСтроки));
	
	Для Каждого Строка Из СтрокиДляИЗменения Цикл
		Строка.Потребность = СтрСоединить(МассивЗначений, ";");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТаблицуПотребности()
	
	ТаблицаПотребности = Новый ТаблицаЗначений;
	
	ТаблицаПотребности.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребности.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаПотребности.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("ЦенаСоСкидкой", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("ВысокаяЦена", Новый ОписаниеТипов("Булево"));
	ТаблицаПотребности.Колонки.Добавить("ЖелаемаяЦена", Новый ОписаниеТипов("Число"));
	ТаблицаПотребности.Колонки.Добавить("Потребность",  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаПотребности.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаПотребности.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаПотребности.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	
	Возврат ТаблицаПотребности;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПотребностиКлиентаЖелаемаяЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПотребностиКлиента.ВысокаяЦена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти


















