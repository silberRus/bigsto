#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров.ПолноеИмя();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтоимостьТоваров КАК Данные
	|ГДЕ
	|	Данные.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|");
	
	Запрос.УстановитьПараметр("ИспользоватьВидыЗапасов",  ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметры);
КонецПроцедуры

// Обработчик обновления УТ 11.4.1.
// Производится вычистка виды запасов для работ и продукции давальца.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров.ПолноеИмя();
	МетаданныеРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор                                            КАК Регистратор,
	|	Движения.Период                                                 КАК Период,
	|	Движения.АналитикаУчетаНоменклатуры                             КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                                           КАК ВидЗапасов,
	|	Движения.Организация                                            КАК Организация,
	|	Движения.РазделУчета                                            КАК РазделУчета,
	|
	|	Движения.Стоимость                                              КАК Стоимость,
	|	Движения.СтоимостьЗабалансовая                                  КАК СтоимостьЗабалансовая,
	|	Движения.СтоимостьБезНДС                                        КАК СтоимостьБезНДС,
	|	Движения.СтоимостьДопРасходы                                    КАК СтоимостьДопРасходы,
	|	Движения.СтоимостьДопРасходыБезНДС                              КАК СтоимостьДопРасходыБезНДС,
	|	Движения.Трудозатраты                                           КАК Трудозатраты,
	|	Движения.ПостатейныеПостоянныеСНДС                              КАК ПостатейныеПостоянныеСНДС,
	|	Движения.ПостатейныеПостоянныеБезНДС                            КАК ПостатейныеПостоянныеБезНДС,
	|	Движения.СтоимостьРегл                                          КАК СтоимостьРегл,
	|	Движения.СтоимостьЗабалансоваяРегл                              КАК СтоимостьЗабалансоваяРегл,
	|	Движения.ДопРасходыРегл                                         КАК ДопРасходыРегл,
	|	Движения.ТрудозатратыРегл                                       КАК ТрудозатратыРегл,
	|	Движения.ПостатейныеПостоянныеРегл                              КАК ПостатейныеПостоянныеРегл,
	|	Движения.ПостояннаяРазница                                      КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница                                       КАК ВременнаяРазница
	|ИЗ
	|	РегистрСведений.СтоимостьТоваров КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыСведений.СтоимостьТоваров.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
