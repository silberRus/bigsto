#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает массив идентификаторов протоколов расчета указанных организаций.
//
Функция ПолучитьПротоколыРасчета(ПериодРасчета, МассивОрганизаций) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВариантыРасчета = Новый Массив;
	
	Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета)) Тогда
		ВариантыРасчета.Добавить(Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость);
		ВариантыРасчета.Добавить(Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	Иначе
		ВариантыРасчета.Добавить(Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	КонецЕсли;
	
	ИдентификаторыПротоколов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИдентификаторПротокола КАК ИдентификаторПротокола,
	|	Т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОшибкиРасчетаПартийИСебестоимости КАК Т
	|ГДЕ
	|	Т.Период = &Период
	|	И Т.Организация В (&МассивОрганизаций)
	|	И Т.ВариантРасчета В (&ВариантыРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторПротокола,
	|	Организация
	|ИТОГИ ПО
	|	ИдентификаторПротокола";
	
	Запрос.УстановитьПараметр("Период", 		   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	Запрос.УстановитьПараметр("ВариантыРасчета",   ВариантыРасчета);
	
	ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторов.Следующий() Цикл
		
		ИдентификаторыПротоколов.Вставить(ВыборкаИдентификаторов.ИдентификаторПротокола, Новый Массив);
		
		Выборка = ВыборкаИдентификаторов.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторыПротоколов[Выборка.ИдентификаторПротокола].Добавить(Выборка.Организация);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИдентификаторыПротоколов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрСведений.ОшибкиРасчетаПартийИСебестоимости";
	
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	Проверка = ЗакрытиеМесяцаСервер.СлужебнаяПроверкаЭтапа(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проверка", Проверка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ПроблемыСостоянияСистемы.ПроверяемыйПериод, МЕСЯЦ) КАК Период,
	|	ПроблемыСостоянияСистемы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТЗарегистрированныеПроблемы
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК ПроблемыСостоянияСистемы
	|ГДЕ
	|	ПроблемыСостоянияСистемы.Проверка = &Проверка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период,
	|	Т.Организация
	|ИЗ
	|	РегистрСведений.ОшибкиРасчетаПартийИСебестоимости КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеПроблемы КАК Проблемы
	|		ПО Т.Период = Проблемы.Период
	|			И Т.Организация = Проблемы.Организация
	|ГДЕ
	|	Т.ТипОшибки <> ЗНАЧЕНИЕ(Перечисление.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияНДС)
	|	И Проблемы.Организация ЕСТЬ NULL";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Подготовим выборку данных.
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТРегистрацияОшибок";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		ПолноеИмяРегистра(),
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период КАК Период,
	|	Т.Организация
	|ИЗ
	|	ВТРегистрацияОшибок КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Период";
	
	ВыборкаПериоды = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПериоды.Следующий() Цикл
		
		МассивОрганизаций = Новый Массив;
		
		ВыборкаОрганизации = ВыборкаПериоды.Выбрать();
		
		НачатьТранзакцию();
		
		Попытка
			
			Пока ВыборкаОрганизации.Следующий() Цикл
				
				МассивОрганизаций.Добавить(ВыборкаОрганизации.Организация);
				
				// Отметим запись в текущем регистре как отработанную.
				НаборЗаписей = РегистрыСведений.ОшибкиРасчетаПартийИСебестоимости.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Период.Установить(ВыборкаПериоды.Период);
				НаборЗаписей.Отбор.Организация.Установить(ВыборкаОрганизации.Организация);
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				
			КонецЦикла;
			
			// Создадим запись в новом универсальном регистре результатов проверок состояния учета.
			ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
				Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
				МассивОрганизаций,
				ВыборкаПериоды.Период);
			
			ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРегистрации,
				НСтр("ru='При выполнении расчета по организации ""%1"" за период %2 были диагностированы ошибки.
					|Подробнее см. протокол расчета.'"),
				Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
				
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
