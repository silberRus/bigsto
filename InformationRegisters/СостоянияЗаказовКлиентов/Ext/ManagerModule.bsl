#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа
//
//	Параметры:
//		Заказы - ДокументСсылка - документ, в рамках проведения которого перерасчитывается состояние
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения
//
Процедура ОтразитьСостояниеЗаказа(Заказы, Отказ, УдалениеПроведения = Ложь, Очередь = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Заказы) = Тип("Массив") Тогда
		МассивСсылок = Заказы;
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(Заказы) Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Заказы);
	Иначе
		
		МассивСсылок = Новый Массив();
		Если Заказы.ДополнительныеСвойства.Свойство("МассивЗависимыхЗаказовКлиентов") Тогда
			МассивСсылок = Новый Массив(Заказы.ДополнительныеСвойства.МассивЗависимыхЗаказовКлиентов);
		КонецЕсли;
		// При записи документов, если в них указаны назначения, документы проводятся по РН: Обеспечение заказов.
		// В наборе записей регистра формируется доп. свойство "ДляЗаписиПодчиненныхДанных" содержащее массив записанных заказов.
		// Этими заказами необходимо дополнить массив ссылок для расчета состояний.
		РегистрыНакопления.ОбеспечениеЗаказов.ДобавитьЗаказыИзНазначений(МассивСсылок, Заказы);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		
		Для Каждого СтрокаСсылка Из МассивСсылок Цикл
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаСсылка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		Возврат
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Заказ, Состояние, ДатаСобытия, 
		|СуммаОплаты, ПроцентОплаты, СуммаОтгрузки, ПроцентОтгрузки, СуммаДолга, ПроцентДолга, ЕстьРасхожденияОрдерНакладная");
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийЗаказов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаПредыдущихСостоянийЗаказов.НайтиСтроки(СтруктураПоиска);
		
		СостояниеИзменено = НЕ Булево(МассивДействующихСостояний.Количество());
		Если СостояниеИзменено Тогда
			
			Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
			
			СтрокаНабора = Набор.Добавить();
			
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОтгрузки);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОплаты);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентДолга);
			
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			
			Попытка
				Если Очередь <> Неопределено Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
				Иначе
					Набор.Записать(Истина);
				КонецЕсли;
			Исключение
				Если ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заказа клиента: %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаказКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				ИначеЕсли ТипЗнч(СтрокаТаблицы.Заказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось отразить состояние заявки на возврат: %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаТаблицы.Заказ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента, СтрокаТаблицы.Заказ, ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
		Иначе
			Если Очередь <> Неопределено Тогда
				
				Набор = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
				Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицы состояний заказов клиентов и давальцев
//
//	Параметры:
//		МассивСсылок - Массив - массив заказов, таблицы состояний которых требуется получить
// Возвращаемое значение:
//	Структура - структура состояний содержащая значения:
//		ТаблицаСостоянийЗаказов
//		ТаблицаПредыдущихСостоянийЗаказов
//
Функция ТаблицыСостоянийЗаказов(МассивСсылок) Экспорт
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(МассивСсылок);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок);
	
	Возврат Новый Структура("ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов",
		ТаблицаСостоянийЗаказов, ТаблицаПредыдущихСостоянийЗаказов);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Округляет проценты отгрузки, оплаты, долга
//
// Параметры:
//	ОкругляемоеЧисло - Число - округляемое число
//
Процедура ОкруглитьПроценты(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаСостоянийЗаказов(МассивСсылок)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	ПервыйЗапрос = Истина;
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
		+ ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
		+ ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
		+ ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
		;
	
	ТекстЗапроса = "";
	
	Для Каждого ТипДокумента из СоотвествиеТипов Цикл
		
		Если Не ПервыйЗапрос Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			" ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		МенеджерОбъекта             = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
		ТекстЗапроса                = ТекстЗапроса + МенеджерОбъекта.ТекстЗапросаДляРасчетаСостоянийЗаказов();
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаВременныхТаблиц + ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивЗаказов", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МенеджерСоздаетОрдера", Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Менеджером);
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки"));
				
	
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента", 
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Запрос.УстановитьПараметр("МерныеТипыВеличин", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
																"ЗаказКлиента В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&МассивЗаказов)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);

	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Функция возвращает текст запроса для расчета даты актуальности состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОбороты.Период КАК Период,
		|	РасчетыСКлиентамиОбороты.КОплатеПриход КАК КОплатеПриход,
		|	РасчетыСКлиентамиОбороты.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ ЭтапыРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , День, ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	РасчетыСКлиентамиОстатки.КОплатеРасход КАК КОплатеРасход
		|ПОМЕСТИТЬ ОплаченоПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(, , , ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыРасчетов.Период КАК Период,
		|	ЭтапыРасчетов.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ РезультатРасчетов
		|ИЗ
		|	ЭтапыРасчетов КАК ЭтапыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыРасчетов КАК РасчетыСКлиентами
		|		ПО (РасчетыСКлиентами.Период <= ЭтапыРасчетов.Период)
		|			И (РасчетыСКлиентами.ЗаказКлиента = ЭтапыРасчетов.ЗаказКлиента)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК Оплачено
		|		ПО ЭтапыРасчетов.ЗаказКлиента = Оплачено.ЗаказКлиента
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыРасчетов.Период,
		|	ЭтапыРасчетов.ЗаказКлиента,
		|	Оплачено.КОплатеРасход
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЭтапыРасчетов.КОплатеПриход) - ЕСТЬNULL(Оплачено.КОплатеРасход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РезультатРасчетов.Период) КАК ДатаАктуальности,
		|	РезультатРасчетов.ЗаказКлиента КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДатыАктуальностиЗаказовКлиентов
		|ИЗ
		|	РезультатРасчетов КАК РезультатРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатРасчетов.ЗаказКлиента
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаГрафик.Период) КАК МинимальнаяДатаОтгрузки,
		|	ТаблицаГрафик.Регистратор КАК ЗаказКлиента
		|ПОМЕСТИТЬ ДатыОтгрузкиЗаказовКлиентов
		|ИЗ
		|	РегистрНакопления.ГрафикОтгрузкиТоваров КАК ТаблицаГрафик
		|ГДЕ
		|	ТаблицаГрафик.Регистратор В (&МассивЗаказов)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГрафик.Регистратор
		|;
		|///////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЭтапыРасчетов;
		|УНИЧТОЖИТЬ ОплаченоПоЗаказам;
		|УНИЧТОЖИТЬ РезультатРасчетов;
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса для расчета состояний обеспечения заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийОбеспеченияЗаказа()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Заказ,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|				И ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеТребуется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеИзЗаказовОжидается,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				И ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток,0) < ЗаказКлиентаТовары.Количество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбособленноеОбеспечениеТребуется
		|ПОМЕСТИТЬ ВТСостоянияОбеспечения
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Назначение.Заказ В (&МассивЗаказов)) КАК ОбеспечениеЗаказовОстатки
		|			ПО ЗаказКлиентаТовары.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
		|				И ЗаказКлиентаТовары.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		|				И ЗаказКлиентаТовары.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
		|				И ЗаказКлиентаТовары.Склад = ОбеспечениеЗаказовОстатки.Склад
		|	
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка В(&МассивЗаказов)
		|	И НЕ ЗаказКлиентаТовары.Отменено
		|	И НЕ ЗаказКлиентаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиентаТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаменяющиеТовары.Ссылка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется))
		|				И ЗаменяющиеТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))	
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОбеспечениеИзЗаказовОжидается,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаменяющиеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|				И ЕСТЬNULL(ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток,0) < ЗаменяющиеТовары.Количество
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаменяющиеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки(,Назначение.Заказ В (&МассивЗаказов)) КАК ОбеспечениеЗаказовОстатки
		|			ПО ЗаменяющиеТовары.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
		|				И ЗаменяющиеТовары.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
		|				И ЗаменяющиеТовары.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
		|				И ЗаменяющиеТовары.Ссылка.Склад = ОбеспечениеЗаказовОстатки.Склад
		|ГДЕ
		|	ЗаменяющиеТовары.Ссылка В(&МассивЗаказов)
		|	И НЕ ЗаменяющиеТовары.Отменено
		|	И НЕ ЗаменяющиеТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаменяющиеТовары.Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;";
	
	Возврат ТекстЗапроса
	
КонецФункции


// Функция возвращает текст запроса для расчета расхождений ордер-накладная.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаРасхожденийОрдерНакладная()
	
	ТекстЗапроса = ТекстЗапросаДляРасчетаЕстьОрдер() + "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ТоварыКОтгрузке.КОформлениюПриход > 0 
		|			И ТоварыКОтгрузке.КОформлениюРасход <> (ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ЕстьРасхожденияОрдерНакладная,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА &МенеджерСоздаетОрдера
		|			И (ТоварыКОтгрузке.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТоварыКОтгрузке.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)))
		|			И ВТЕстьОрдер.ЕстьОрдер ЕСТЬ NULL ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ) КАК ТребуетсяОрдер
		|ПОМЕСТИТЬ ВТРасхожденияОрдерНакладная
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьОрдер КАК ВТЕстьОрдер
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = ВТЕстьОрдер.ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
		|			ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
		|				И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Функция возвращает текст запроса для поиска расходных ордеров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаЕстьОрдер()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки КАК ЗаказКлиента,
		|	ИСТИНА КАК ЕстьОрдер
		|ПОМЕСТИТЬ ВТЕстьОрдер
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , Регистратор, , ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузке.ДокументОтгрузки
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказКлиента
		|;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

//Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов, ПеречислениеСсылка.СостоянияЗаявокНаВозвратТоваровОтКлиента
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаОтгрузки - Число
//			ПроцентОтгрузки - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СостоянияЗаказовКлиентов.Заказ КАК Заказ,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	СостоянияЗаказовКлиентов.ДатаСобытия КАК ДатаСобытия,
	|	СостоянияЗаказовКлиентов.СуммаОплаты КАК СуммаОплаты,
	|	СостоянияЗаказовКлиентов.ПроцентОплаты КАК ПроцентОплаты,
	|	СостоянияЗаказовКлиентов.СуммаОтгрузки КАК СуммаОтгрузки,
	|	СостоянияЗаказовКлиентов.ПроцентОтгрузки КАК ПроцентОтгрузки,
	|	СостоянияЗаказовКлиентов.СуммаДолга КАК СуммаДолга,
	|	СостоянияЗаказовКлиентов.ПроцентДолга КАК ПроцентДолга,
	|	СостоянияЗаказовКлиентов.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|ГДЕ
	|	СостоянияЗаказовКлиентов.Заказ В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает текст запроса для расчета допустимых отклонения мерных товаров.
Функция ТекстЗапросаДопустимыхОтклонения(СоотвествиеТипов)
	
	Если НЕ СоотвествиеТипов["Документ.ЗаказКлиента"] = Неопределено
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаявкаНаВозвратТоваровОтКлиента"] = Неопределено
		ИЛИ НЕ СоотвествиеТипов["Документ.ЗаказДавальца"] = Неопределено Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказКлиента                           КАК ЗаказКлиента,
		|	СУММА(ЗаказыОстатки.КОформлениюКонечныйОстаток)      КАК КОформлениюКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.ЗаказаноКонечныйОстаток)         КАК ЗаказаноКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаКонечныйОстаток)            КАК СуммаКонечныйОстаток,
		|	СУММА(ЗаказыОстатки.СуммаРасходСУчетомМерныхТоваров) КАК СуммаРасходСУчетомМерныхТоваров,
		|	СУММА(ЗаказыОстатки.СуммаРасход)                     КАК СуммаРасход
		|	
		|ПОМЕСТИТЬ ВТЗаказыКлиентовОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ЗаказыКлиентовОстатки.ЗаказКлиента   КАК ЗаказКлиента,
		|		ЗаказыКлиентовОстатки.Номенклатура   КАК Номенклатура,
		|		ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
		|		ЗаказыКлиентовОстатки.Склад          КАК Склад,
		|		ЗаказыКлиентовОстатки.Серия          КАК Серия,
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК КОформлениюКонечныйОстаток,
		|	
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток <= ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток >= -(ЗаказыКлиентовОстатки.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК ЗаказаноКонечныйОстаток,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаКонечныйОстаток, 0) КАК СуммаКонечныйОстаток,
		|		
		|		ВЫБОР
		|			КОГДА ЗаказыКлиентовОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЗаказыКлиентовОстатки.СуммаКонечныйОстаток <= 
		|								ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыКлиентовОстатки.СуммаКонечныйОстаток >= 
		|								-ЗаказыКлиентовОстатки.СуммаПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							ТОГДА ЗаказыКлиентовОстатки.СуммаПриход
		|						ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|					КОНЕЦ
		|			ИНАЧЕ ЗаказыКлиентовОстатки.СуммаРасход
		|		КОНЕЦ                                                    КАК СуммаРасходСУчетомМерныхТоваров,
		|		
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаРасход, 0) КАК СуммаРасход
		|		
		|	ИЗ РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
		|		,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки) КАК ЗаказыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.ЗаказКлиента КАК ЗаказКлиента,
		|	СУММА(ТоварыОстатки.КОтгрузкеОстаток) КАК КОтгрузкеОстаток
		|
		|ПОМЕСТИТЬ ВТТоварыКОтгрузкеОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента,
		|		ТоварыКОтгрузкеОстатки.Номенклатура     КАК Номенклатура,
		|		ТоварыКОтгрузкеОстатки.Характеристика   КАК Характеристика,
		|		ТоварыКОтгрузкеОстатки.Склад            КАК Склад,
		|		ТоварыКОтгрузкеОстатки.Серия            КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток <= ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток >= -(ТоварыКОтгрузкеОстатки.КОтгрузкеПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеКонечныйОстаток, 0)
		|		КОНЕЦ                                   КАК КОтгрузкеОстаток
		|
		|ИЗ РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(&НачПериодТоварыКОтгрузке, &КонПериодТоварыКОтгрузке,
		|	,, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.ЗаказКлиента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли
