
&НаКлиенте
Перем стОбъект;

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьЭлементыДоставки()
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Иницализация доставки
	Если ПоказыватьЭлементыДоставки() Тогда
		ИницилизироватьДоставку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкладыКромеШапки()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ Склад
	|ИЗ (
	|		ВЫБРАТЬ Склад ИЗ Документ.КП.Товары ГДЕ Ссылка = &Ссылка И Склад <> Ссылка.Склад
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ Склад ИЗ Документ.ЗаказКлиента.Товары ГДЕ Ссылка = &Ссылка И Склад <> Ссылка.Склад
	|	) Запрос
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции


&НаСервере
Процедура ПрочитатьНастройкиВТаблицу()
	
	Суффикс = АТ_ДоставкаСервер.Суффикс();
	АТ_ДоставкаСервер.ПрочитатьНастройкиВТаблицу(ЭтаФорма[Суффикс + "Таблица"], Объект);
	ЭтаФорма[Суффикс + "стИндекс"] = -1;
	//АТ_ДоставкаСервер.ОбновитьЗначениеДоставки(Форма);
	
КонецПроцедуры
&НаСервере
Процедура СохранитьТаблицуВБазе(ОбъектСохранения)
	
	АТ_ДоставкаСервер.СохранитьТаблицуВБазе(ОбъектСохранения, ЭтаФорма[АТ_ДоставкаСервер.Суффикс() + "Таблица"]);
	
КонецПроцедуры
&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	Если ПоказыватьЭлементыДоставки() Тогда
	
		текДанные = Элементы.СписокДокументов.ТекущиеДанные;
		
		Если стОбъект <> Неопределено И Модифицированность Тогда
			СохранитьТаблицуВБазе(стОбъект);
			Модифицированность = Ложь;
			ВидимостьСохранялки();
			//ПоказатьОповещениеПользователя("Изменения были сохранены",,стОбъект, БиблиотекаКартинок.СохранитьФайл);
		КонецЕсли;
		
		Если текДанные <> Неопределено И стОбъект <> текДанные.Объект Тогда
			
			Объект = текДанные.Объект;
			
			ПрочитатьНастройкиВТаблицу();
			АТ_ДоставкаКлиент.ОбновитьВидимость(ЭтаФорма);
			
		КонецЕсли;
		
		стОбъект = ?(текДанные = Неопределено, Неопределено, текДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСохранялки()
	
	//ЩаВидно = Элементы.ДекорацияМодифицированность.Видимость;
	//Если Модифицированность <> ЩаВидно Тогда
	//	Элементы.ДекорацияМодифицированность.Видимость = Модифицированность;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	текДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(текДанные.Заказ) Тогда
			ОткрытьФорму("РегистрСведений.АТ_МаршрутДоставки.Форма.ФормаЗаписейОбъекта", Новый Структура("Объект", текДанные.Заказ), ЭтаФорма);
		ИначеЕсли ЗначениеЗаполнено(текДанные.КП) Тогда
			ОткрытьФорму("РегистрСведений.АТ_МаршрутДоставки.Форма.ФормаЗаписейОбъекта", Новый Структура("Объект", текДанные.КП), ЭтаФорма);
		Иначе
			ПоказатьОповещениеПользователя("Нет заказа",,"Редактировать доставку можно только в заказе");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры


#Область Доставка

// Настройки для этой формы менять тут:

&НаСервере
Функция ДоступныеСпособыДоставки()
	
	// Возвращает доступные способы доставки для этой формы
	
	Способы = Новый Массив;
	//Способы.Добавить(Перечисления.СпособыДоставки.Самовывоз);
	Способы.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	//Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи);
	Способы.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	//Способы.Добавить(Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки);
	
	Возврат Способы;
	
КонецФункции
&НаСервере
Функция ПолучитьСписокОтправителей() Экспорт
	
	// Возвращает возможных отправителей в зависимости от настроек формы
	
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(Объект) Тогда
		Если Не Объект.Склад.Пустая() Тогда
			Массив.Добавить(Объект.Склад);
		КонецЕсли;
		КонвертацияТипов.ДобавитьМассивВКонецМассива(Массив, ПолучитьСкладыКромеШапки());
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции
&НаСервере
Функция ПолучитьСписокПолучателей() Экспорт
	
	// Возвращает возможных получателей в зависимости от настроек формы
	
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(Объект) Тогда
		Массив.Добавить(Объект.Партнер);
		Массив.Добавить(Объект.Склад);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции
&НаКлиенте
Функция ПолучитьДатуДоставки() Экспорт
	
	// Возвращает дату на которую расчитана доставка (для определяения времни доставки)
	
	текДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Возврат ?(текДанные = Неопределено, '00010101', текДанные.Дата);
	
КонецФункции

&НаКлиенте
Процедура ИницилизироватьДоставку()
	
	// При открытии пряем старую доставку и достаем новую
	
	АТ_ДоставкаКлиент.ИницилизироватьЗакладкуДоставки(ЭтаФорма);
		
КонецПроцедуры
&НаСервере
Процедура СоздатьЭлементыДляДоставкиНаСервере(АдресЭлементов)
	
	// При создании элементов доставки указываем группу к которой привязываем все элементы
	
	ГруппаРодительДоставки = Элементы.РеквизитыДоставки;
	АТ_ДоставкаСервер.ЗаполнитьЭлементыПоШаблону(ЭтаФорма, ГруппаРодительДоставки, АдресЭлементов, ДоступныеСпособыДоставки(), Ложь);
	
КонецПроцедуры


// Далее везде одинаковое (трогать не надо)

// Действия

&НаСервере
Функция ОтпрИПолуч(Отправитель, Получатель)
	
	Возврат Новый Структура("Отправитель, Получатель", Отправитель, Получатель);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииРеквизитаДоставкиНаСервере(текИндекс)
	
	АТ_ДоставкаСервер.ЗапомнитьЗначениеДоставки(ЭтаФорма, текИндекс);
	АТ_ДоставкаСервер.ОбновитьОтображениеСписка(ЭтаФорма);
	
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииРеквизитаДоставки(Элемент)
	
	АТ_ДоставкаКлиент.ПриИзмененииПоля(ЭтаФорма, Элемент);
	ПриИзмененииРеквизитаДоставкиНаСервере(АТ_ДоставкаКлиент.текИндекс(ЭтаФорма));
	ВидимостьСохранялки();
		
КонецПроцедуры
&НаКлиенте
Процедура НачалоВыбораРеквизитаДоставки(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АТ_ДоставкаКлиент.НачалоВыбораПоля(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура АвтоПодборРеквизитаДоставки(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АТ_ДоставкаКлиент.АвтоПодборПоля(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииНаДекорациюДоставки(Элемент)
	
	АТ_ДоставкаКлиент.ПриНажатииДекорации(ЭтаФорма, Элемент);
	ВидимостьСохранялки();
	
КонецПроцедуры
&НаКлиенте
Процедура НажатиеНаКнопкуДоставки(Кнопка)
	
	АТ_ДоставкаКлиент.НажатиеНаКнопку(ЭтаФорма, Кнопка);
	ВидимостьСохранялки();
	
КонецПроцедуры

Функция ПолучитьВозможныйСписокДоставок() Экспорт
	
	Возврат АТ_ДоставкаСервер.ПолучитьВозможныйСписокДоставок(ЭтаФорма);
	
КонецФункции

// Иницилизация

&НаСервере
Функция МультидоставкаВключена()
	
	Возврат АТ_ДоставкаСервер.Включено();
	
КонецФункции

&НаКлиенте
Процедура СоздатьЭлементыДляДоставки(АдресЭлементов) Экспорт
	
	СоздатьЭлементыДляДоставкиНаСервере(АдресЭлементов);
	АТ_ДоставкаКлиент.ОбновитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиДоставки(Элемент)
	
	АТ_ДоставкаКлиент.ПриАктивизацииСтроки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыДоставкиНаСервере(ИндексСтроки)
	
	АТ_ДоставкаСервер.ОбновитьЗначениеДоставки(ЭтаФорма, ИндексСтроки);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьРеквизитыДоставки(ИндексСтроки) Экспорт

	ОбновитьРеквизитыДоставкиНаСервере(ИндексСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьРеквизитыДоставкиНаСервере(ИндексСтроки)
	
	АТ_ДоставкаСервер.ЗапомнитьЗначениеДоставки(ЭтаФорма, ИндексСтроки);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗапомнитьРеквизитыДоставки(ИндексСтроки) Экспорт
	
	ЗапомнитьРеквизитыДоставкиНаСервере(ИндексСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если МультидоставкаВключена() Тогда
		АТ_ДоставкаСервер.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	текДанные = Элемент.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		ИмяКолонки = Сред(Элемент.ТекущийЭлемент.Имя, СтрДлина("СписокДокументов") + 1);
		Значение = Элемент.ТекущиеДанные[ИмяКолонки];
		Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) <> Тип("Дата") Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(,Значение);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти