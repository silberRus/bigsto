#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Синхронизация регл.сумм в учетных регистрах по данным СуммыДокументовВВалютеРегл
// Параметры:
// 	РегистраторыСумм - ДокументСсылка, Массив - одиночный ДокументСсылка или массив типов ДокументСсылка.
Процедура ОбновитьДвиженияДокументов(РегистраторыСумм) Экспорт
	
	СоставОбновления = Новый Структура();
	// регистры НДС к синхронизации регл.сумм
	СоставОбновления.Вставить("НДСЗаписиКнигиПродаж", РегистрыНакопления.НДСЗаписиКнигиПродаж);
	СоставОбновления.Вставить("НДСЗаписиКнигиПокупок", РегистрыНакопления.НДСЗаписиКнигиПокупок);
	СоставОбновления.Вставить("НДСПредъявленный", РегистрыНакопления.НДСПредъявленный);
	СоставОбновления.Вставить("ЖурналУчетаСчетовФактур", РегистрыСведений.ЖурналУчетаСчетовФактур);
	// регистры партий к синхронизации регл.сумм
	СоставОбновления.Вставить("ПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций);
	СоставОбновления.Вставить("ПартииПроизводственныхЗатрат", РегистрыНакопления.ПартииПроизводственныхЗатрат);
	СоставОбновления.Вставить("ПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	СоставОбновления.Вставить("ПартииПрочихРасходов", РегистрыНакопления.ПартииПрочихРасходов);
	// регистры себестоимости к синхронизации регл.сумм
	СоставОбновления.Вставить("СебестоимостьТоваров", РегистрыНакопления.СебестоимостьТоваров);
	СоставОбновления.Вставить("ВыручкаИСебестоимостьПродаж", РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	СоставОбновления.Вставить("Закупки", РегистрыНакопления.Закупки);
	СоставОбновления.Вставить("ДвиженияКонтрагентДоходыРасходы", РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы);
	
	Регистраторы = ОбщегоНазначенияУТКлиентСервер.Массив(РегистраторыСумм);
	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;
	
	СоставОбновления.Удалить("ПартииТоваровОрганизаций");
	СоставОбновления.Удалить("ПартииПроизводственныхЗатрат");
	СоставОбновления.Удалить("ПрочиеРасходы");
	СоставОбновления.Удалить("ПартииПрочихРасходов");
	СоставОбновления.Удалить("СебестоимостьТоваров");
	СоставОбновления.Удалить("ВыручкаИСебестоимостьПродаж");
	СоставОбновления.Удалить("Закупки");
	СоставОбновления.Удалить("ДвиженияКонтрагентДоходыРасходы");
	
	Для Каждого СФ Из СчетаФактурыВыданные(Регистраторы) Цикл
		ОбновитьДвиженияДокумента(СФ.Ссылка, СоставОбновления);
	КонецЦикла;
	
	Для Каждого СФ Из СчетаФактурыПолученные(Регистраторы) Цикл
		ОбновитьДвиженияДокумента(СФ.Ссылка, СоставОбновления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)
	Перем Таблица;
	ДопСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
	Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Ссылка, ДопСвойства, СоставОбновления);
	Таблицы = ДопСвойства.ТаблицыДляДвижений;
	
	ДопСвойства.Вставить("ДатаРегистратора", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата"));
	ДопСвойства.Вставить("ПартионныйУчетВключен",
		УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ДопСвойства.ДатаРегистратора)));
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
			Если Таблицы.Свойство("Таблица" + ОписаниеОбновления.Ключ, Таблица) Тогда
				ЗаписатьДвиженияВБазу(ОписаниеОбновления.Значение, Таблица, Ссылка, ДопСвойства);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось записать движения %Обновление% по причине %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обновление%", ОписаниеОбновления.Ключ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			НСтр("ru= 'Частичное обновление движений документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ДопСвойства)
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	
	Набор.ДополнительныеСвойства.Вставить("ЭтоНовый", ДопСвойства.ЭтоНовый);
	Набор.ДополнительныеСвойства.Вставить("РежимЗаписи", ДопСвойства.РежимЗаписи);
	Набор.ДополнительныеСвойства.Вставить("ДатаРегистратора", ДопСвойства.ДатаРегистратора);
	Набор.ДополнительныеСвойства.Вставить("СтруктураОтраженияРеглПроводок", Новый Структура);
	Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
		Новый Структура("СтруктураВременныеТаблицы, ПартионныйУчетВключен",
			// Структура для передачи данных в модули наборов записей.
			ДопСвойства.ДляПроведения.СтруктураВременныеТаблицы,
			ДопСвойства.ПартионныйУчетВключен));
	
	Если Таблица.Количество() > 0 Тогда
		Набор.Загрузить(Таблица);
		Набор.УстановитьАктивность(Истина);
		Набор.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Функция СчетаФактурыВыданные(РегистраторыСумм)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СФ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СФ
		|ГДЕ
		|	СФ.ДокументОснование В (&РегистраторыСумм) И СФ.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	СФ.Дата ВОЗР
		|");
	Запрос.УстановитьПараметр("РегистраторыСумм", РегистраторыСумм);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция СчетаФактурыПолученные(РегистраторыСумм)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СФ.Ссылка КАК Ссылка,
		|	СФ.ДатаСоставления,
		|	СФ.ДатаИсправления
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СФ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
		|		ПО Основания.Ссылка = СФ.Ссылка
		|ГДЕ
		|	Основания.ДокументОснование В (&РегистраторыСумм) И СФ.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СФ.Ссылка,
		|	СФ.ДатаСоставления,
		|	СФ.ДатаИсправления
		|ИЗ
		|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СФ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК Основания
		|		ПО Основания.Ссылка = СФ.Ссылка
		|ГДЕ
		|	Основания.ДокументОснование В (&РегистраторыСумм) И СФ.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	СФ.ДатаСоставления ВОЗР, СФ.ДатаИсправления ВОЗР
		|");
	Запрос.УстановитьПараметр("РегистраторыСумм", РегистраторыСумм);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#Область ОбновлениеИнформационнойБазы

#Область ОбработчикОбновления_2_4_1

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл.ПолноеИмя();
	
	Запрос = Новый Запрос;
	
	//ЭТАП 1 Для записей уже присутствующих в регистре заполняем три новых ресурса
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументовВВалютеРегл.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|ГДЕ
	|	СуммыДокументовВВалютеРегл.СуммаБезНДСРегл <> 0
	|	И СуммыДокументовВВалютеРегл.СуммаБезНДСУпр = 0
	|	И НЕ ТИПЗНАЧЕНИЯ(СуммыДокументовВВалютеРегл.Регистратор) В
	|		(ТИП(Документ.КорректировкаРеализации), ТИП(Документ.КорректировкаПриобретения))";
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",Константы.ВалютаРегламентированногоУчета.Получить());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
	//ЭТАП 2 Для отсутствующих записей проводим документы по одному регистру
	
	Запрос.Текст = ТекстЗапросаРегистрацииДанныхКОбработке();
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",Константы.ПартионныйУчетВерсии22.Получить());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ТипыДокументовКОбработке = ТипыДокументовКОбработке();
	
	Для Каждого ТипДокумента из ТипыДокументовКОбработке Цикл
		
		ПолноеИмяДокумента = "Документ." + ТипДокумента.Значение;
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ДополнительныеПараметрыИсточникиДанных = Неопределено;
		
		Если ТипДокумента.Значение = "ПриобретениеТоваровУслуг" Тогда
			ДополнительныеПараметрыИсточникиДанных = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
			ДополнительныеПараметрыИсточникиДанных.ДополнительныеИсточникиДанных.Вставить("Договор");
		КонецЕсли;
		
		Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(Параметры.Очередь,
						ПолноеИмяДокумента,
						ПолноеИмяРегистра,
						МенеджерВременныхТаблиц,
						ДополнительныеПараметрыИсточникиДанных);
		
		Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

		Валюты = Новый Структура("ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, КэшКурсовВалют",
			ВалютаРегламентированногоУчета,
			ВалютаУправленческогоУчета,
			РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют());
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СсылкиДляОбработки.Регистратор                                   КАК Регистратор,
		|	ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").Проведен                          КАК Проведен,
		|	ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").ВерсияДанных                      КАК ВерсияДанных,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.РеализацияТоваровУслуг) 
		|		И ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация,0) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПереходаПраваСобственности, ДАТАВРЕМЯ(1,1,1))
		|		КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.КорректировкаПриобретения) 
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование.Дата, ДАТАВРЕМЯ(1,1,1))
		|		КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.КорректировкаРеализации)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата, ДАТАВРЕМЯ(1,1,1))
		|		ИНАЧЕ ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").Дата
		|	КОНЕЦ                                                            КАК Дата,
		|	МИНИМУМ(НЕ Суммы.ИдентификаторСтроки ЕСТЬ NULL)                  КАК ЕстьЗаписи,
		|	ЕСТЬNULL(Суммы.Период, ДАТАВРЕМЯ(1,1,1))                         КАК Период,
		|	ЕСТЬNULL(Суммы.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДС, 0))                            КАК СуммаБезНДС,
		|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))                        КАК СуммаБезНДСРегл,
		|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0))                         КАК СуммаБезНДСУпр
		|
		|ИЗ
		|	&ВТДляОбработки КАК СсылкиДляОбработки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|	ПО
		|		СсылкиДляОбработки.Регистратор = Суммы.Регистратор
		|СГРУППИРОВАТЬ ПО
		|	СсылкиДляОбработки.Регистратор,
		|	ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").Проведен,
		|	ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").ВерсияДанных,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.РеализацияТоваровУслуг) 
		|		И ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация,0) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.РеализацияТоваровУслуг).ДатаПереходаПраваСобственности, ДАТАВРЕМЯ(1,1,1))
		|		КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.КорректировкаПриобретения) 
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование.Дата, ДАТАВРЕМЯ(1,1,1))
		|		КОГДА ТИПЗНАЧЕНИЯ(СсылкиДляОбработки.Регистратор) = ТИП(Документ.КорректировкаРеализации)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата, ДАТАВРЕМЯ(1,1,1))
		|		ИНАЧЕ ВЫРАЗИТЬ(СсылкиДляОбработки.Регистратор КАК " + ПолноеИмяДокумента + ").Дата
		|	КОНЕЦ,
		|	ЕСТЬNULL(Суммы.Период, ДАТАВРЕМЯ(1,1,1)),
		|	ЕСТЬNULL(Суммы.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработки", Результат.ИмяВременнойТаблицы);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ИнвентаризацияНаличныхДенежныхСредств") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				Продолжить;
			КонецЕсли;
			
			МетаданныеДокумента = Выборка.Регистратор.Метаданные();
			
			НачатьТранзакцию();
			
			Попытка
			
				Попытка
					
					Блокировка = Новый БлокировкаДанных;
					
					ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					
					ЭлементБлокировки = Блокировка.Добавить("Документ."+МетаданныеДокумента.Имя);
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					
					Блокировка.Заблокировать();
					
				Исключение
					
					ОтменитьТранзакцию();
					ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ и его движения: %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
											УровеньЖурналаРегистрации.Предупреждение,
											МетаданныеРегистра,
											Выборка.Регистратор,
											ТекстСообщения);
					Продолжить;
					
				КонецПопытки;
				
				Если Выборка.ВерсияДанных <> Выборка.Регистратор.ВерсияДанных Тогда
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				//Был проведен при регистрации до обработки распровели
				Если НЕ Выборка.Проведен 
					//Был проведен, но не было в регистре. Перепровели и появился в регистре.
					ИЛИ Выборка.Проведен И Выборка.ЕстьЗаписи 
						И Выборка.Валюта = ВалютаРегламентированногоУчета Тогда
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
					ВалютаДокумента = ВалютаРегламентированногоУчета;
				Иначе
					ВалютаДокумента = Выборка.Валюта;
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				
				ДопСвойства = Новый Структура;
				ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.Регистратор, ДопСвойства);
				ПолноеИмяДокумента = Выборка.Регистратор.Метаданные().ПолноеИмя();
				
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяДокумента);
				МенеджерДокумента.ИнициализироватьДанныеДокумента(Выборка.Регистратор, ДопСвойства, МетаданныеРегистра.Имя);
				
				ДокументБезБазыНДСУпр = ДокументБезБазыНДСУпр(Выборка.Регистратор);
				
				НовыйНаборЗаписей = ДопСвойства.ТаблицыДляДвижений["Таблица" + МетаданныеРегистра.Имя];
				НовыйНаборЗаписей.Индексы.Добавить("ИдентификаторСтроки");
				
				МассивИдентификаторов = НовыйНаборЗаписей.Скопировать();
				МассивИдентификаторов.Свернуть("ИдентификаторСтроки");
				МассивИдентификаторов = МассивИдентификаторов.ВыгрузитьКолонку("ИдентификаторСтроки");
				
				ОбъектИзменен = Ложь;
				СуммыЗаполнены = Ложь;
				
				Для Каждого Идентификатор Из МассивИдентификаторов Цикл 
					
					СтрокиНовогоНабора = НовыйНаборЗаписей.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Идентификатор));
					
					Пока СтрокиНовогоНабора.Количество() > 1 Цикл
						СтрокиНовогоНабора[0].СуммаБезНДС     = СтрокиНовогоНабора[0].СуммаБезНДС + СтрокиНовогоНабора[1].СуммаБезНДС;
						СтрокиНовогоНабора[0].СуммаНДС        = СтрокиНовогоНабора[0].СуммаНДС + СтрокиНовогоНабора[1].СуммаНДС;
						СтрокиНовогоНабора[0].СуммаБезНДСРегл = СтрокиНовогоНабора[0].СуммаБезНДСРегл + СтрокиНовогоНабора[1].СуммаБезНДСРегл;
						СтрокиНовогоНабора[0].СуммаНДСРегл    = СтрокиНовогоНабора[0].СуммаНДСРегл + СтрокиНовогоНабора[1].СуммаНДСРегл;
						СтрокиНовогоНабора[0].СуммаБезНДСУпр  = СтрокиНовогоНабора[0].СуммаБезНДСУпр + СтрокиНовогоНабора[1].СуммаБезНДСУпр;
						СтрокиНовогоНабора[0].СуммаНДСУпр     = СтрокиНовогоНабора[0].СуммаНДСУпр + СтрокиНовогоНабора[1].СуммаНДСУпр;
						Если НЕ ДокументБезБазыНДСУпр Тогда
							СтрокиНовогоНабора[0].БазаНДСРегл     = СтрокиНовогоНабора[0].БазаНДСРегл + СтрокиНовогоНабора[1].БазаНДСРегл;
							СтрокиНовогоНабора[0].БазаНДСУпр      = СтрокиНовогоНабора[0].БазаНДСУпр + СтрокиНовогоНабора[1].БазаНДСУпр;
						КонецЕсли;
						НовыйНаборЗаписей.Удалить(НовыйНаборЗаписей.Индекс(СтрокиНовогоНабора[1]));
						СтрокиНовогоНабора.Удалить(1);
						ОбъектИзменен = Истина;
					КонецЦикла;
					
				КонецЦикла;
				
				Если Выборка.Проведен И НаборЗаписей.Количество() = 0 И НовыйНаборЗаписей.Количество() <> 0 Тогда
					НаборЗаписей.Загрузить(НовыйНаборЗаписей);
					ТипРасчетов = НаборЗаписей[0].ТипРасчетов;
					АналитикаУчетаПоПартнерам = НаборЗаписей.выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
					ОбъектИзменен = Истина;
				Иначе
					
					Если ВалютаДокумента = ВалютаУправленческогоУчета Тогда
						
						Для Каждого Запись Из НаборЗаписей Цикл
							Запись.СуммаБезНДСУпр = Запись.СуммаБезНДС;
							Если НЕ ДокументБезБазыНДСУпр Тогда
								Запись.БазаНДСУпр = Запись.СуммаБезНДС;
							КонецЕсли;
							Запись.СуммаНДСУпр = Запись.СуммаНДС;
						КонецЦикла;
						СуммыЗаполнены = Истина;
						ОбъектИзменен = Истина;
						
					ИначеЕсли ВалютаРегламентированногоУчета = ВалютаУправленческогоУчета Тогда
						
						Для Каждого Запись Из НаборЗаписей Цикл
							Запись.СуммаБезНДСУпр = Запись.СуммаБезНДСРегл;
							Если НЕ ДокументБезБазыНДСУпр Тогда
								Запись.БазаНДСУпр = Запись.СуммаБезНДСРегл;
							КонецЕсли;
							Запись.СуммаНДСУпр = Запись.СуммаНДСРегл;
						КонецЦикла;
						СуммыЗаполнены = Истина;
						ОбъектИзменен = Истина;
						
					КонецЕсли;
					
					Копия = НаборЗаписей.Выгрузить();
					Для Каждого ЗаписьНовогоНабора из НовыйНаборЗаписей Цикл
						Если НовыйНаборЗаписей.Колонки.Найти("ИдентификаторСтроки") <> Неопределено Тогда
							ИмеющаясяЗаписьКопии = Копия.Найти(ЗаписьНовогоНабора.ИдентификаторСтроки, "ИдентификаторСтроки");
						ИначеЕсли Копия.Количество() > 0 Тогда
							ИмеющаясяЗаписьКопии = Копия[0];
						Иначе
							Продолжить;
						КонецЕсли;
						
						Если ИмеющаясяЗаписьКопии <> Неопределено Тогда
							ИмеющаясяЗапись = НаборЗаписей[Копия.Индекс(ИмеющаясяЗаписьКопии)];
							Если ЗаписьНовогоНабора.СуммаБезНДСУпр <> 0 Тогда
								ИмеющаясяЗапись.СуммаБезНДСУпр = ЗаписьНовогоНабора.СуммаБезНДСУпр;
								ОбъектИзменен = Истина;
							КонецЕсли;
							Если ЗаписьНовогоНабора.СуммаНДСУпр <> 0 Тогда
								ИмеющаясяЗапись.СуммаНДСУпр = ЗаписьНовогоНабора.СуммаНДСУпр;
								ОбъектИзменен = Истина;
							КонецЕсли;
							Если НЕ ДокументБезБазыНДСУпр И НовыйНаборЗаписей.Колонки.Найти("БазаНДСУпр") <> Неопределено Тогда
								Если ЗаписьНовогоНабора.БазаНДСУпр <> 0 Тогда
									ИмеющаясяЗапись.БазаНДСУпр = ЗаписьНовогоНабора.БазаНДСУпр;
									ОбъектИзменен = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ИмеющаясяЗапись = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ИмеющаясяЗапись, ЗаписьНовогоНабора);
							ОбъектИзменен = Истина;
						КонецЕсли;
						
						Если АналитикаУчетаПоПартнерам = Неопределено Тогда 
							Если НовыйНаборЗаписей.Колонки.Найти("АналитикаУчетаПоПартнерам") <> Неопределено 
								И ЗначениеЗаполнено(ЗаписьНовогоНабора.АналитикаУчетаПоПартнерам) Тогда
								АналитикаУчетаПоПартнерам = ЗаписьНовогоНабора.АналитикаУчетаПоПартнерам;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				Если АналитикаУчетаПоПартнерам = Неопределено Тогда
					АналитикаУчетаПоПартнерам = Справочники.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка();
				КонецЕсли;
				
				Если ТребуетсяРаспределение(Выборка.Регистратор) И НЕ СуммыЗаполнены Тогда
					РассчитатьСуммыДокументовВВалютеУпр(Выборка.Регистратор, НаборЗаписей, АналитикаУчетаПоПартнерам, Выборка.Дата, Валюты, ВалютаДокумента);
					ОбъектИзменен = Истина;
				КонецЕсли;
			
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Регистратор);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеРегистра,
					Выборка.Регистратор,
					ТекстСообщения);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Неопределено;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура РассчитатьСуммыДокументовВВалютеУпр(ДокументСсылка, НаборЗаписей, АналитикаУчетаПоПартнерам, Дата, Валюты, ВалютаДокумента)
	
	Для СчетчикТипРасчетов = 0 По 1 Цикл
		
		Если СчетчикТипРасчетов = 0 И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Продолжить;
		КонецЕсли;
		
		ТипРасчетов =?(СчетчикТипРасчетов = 0,Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком, Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
		
		Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ТекстРасчета = СуммыПоставщиковВВалютеРегл();
		Иначе
			ТекстРасчета = СуммыКлиентовВВалютеРегл();
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = ТекстРасчета;
		
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
		
		РезультатПоРасчетам = Запрос.Выполнить();
		ВыборкаПоРасчетам = РезультатПоРасчетам.Выбрать();
		
		КорректировкаЗадолженности = Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности;
		
		Для СчетчикВидДвижения = 0 по 1 Цикл
			
			ВыборкаПоРасчетам.Сбросить();
			
			СуммаДокументаУпр = 0;
			СуммаДокумента = 0;
			Для Каждого СтрокаНабораЗаписей из НаборЗаписей Цикл
				Если (СчетчикВидДвижения = 0 И СтрокаНабораЗаписей.СуммаБезНДС < 0) 
					ИЛИ (СчетчикВидДвижения = 1 И СтрокаНабораЗаписей.СуммаБезНДС > 0) Тогда
					Если СтрокаНабораЗаписей.ТипРасчетов = ТипРасчетов Тогда
						СуммаДокумента = СуммаДокумента + СтрокаНабораЗаписей.СуммаНДС + СтрокаНабораЗаписей.СуммаБезНДС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			КурсВалютыУпр      = 0;
			БазаНДСУпр         = 0;

			Если ВыборкаПоРасчетам.Количество() = 0 Тогда
				
				КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					ВалютаДокумента,
					Дата,
					Валюты.КэшКурсовВалют);
					
				КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					Валюты.ВалютаУправленческогоУчета,
					Дата,
					Валюты.КэшКурсовВалют);
				
				Если КурсВалютыУпр = 0 Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Нулевой курс валюты управленческого учета на %ДатаКурса%'"),"%ДатаКурса%", Формат(Дата,"ДЛФ=DD")));
				ИначеЕсли КурсВалютыДокумента = 0 Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Нулевой курс валюты документа на %ДатаКурса%'"),"%ДатаКурса%", Формат(Дата,"ДЛФ=DD")));
				КонецЕсли;
					
				СуммаДокументаУпр = Окр(СуммаДокумента * КурсВалютыДокумента / КурсВалютыУпр,2);
				
			КонецЕсли;
			
			Пока ВыборкаПоРасчетам.Следующий() Цикл
				
				КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					ВыборкаПоРасчетам.Валюта,
					Дата,
					Валюты.КэшКурсовВалют);
				КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
					Валюты.ВалютаУправленческогоУчета,
					Дата,
					Валюты.КэшКурсовВалют);
				
				Если КурсВалютыУпр = 0 Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Нулевой курс валюты управленческого учета на %ДатаКурса%'"),"%ДатаКурса%", Формат(Дата,"ДЛФ=DD")));
				ИначеЕсли КурсВалютыВзаиморасчетов = 0 Тогда
					ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Нулевой курс валюты взаиморасчетов на %ДатаКурса%'"),"%ДатаКурса%", Формат(Дата,"ДЛФ=DD")));
				КонецЕсли;
				
				ДолгУпр  = ВыборкаПоРасчетам.Долг * КурсВалютыВзаиморасчетов / КурсВалютыУпр;
				Если (ВыборкаПоРасчетам.ХозяйственнаяОперация = КорректировкаЗадолженности И СчетчикВидДвижения = 0)
					ИЛИ (НЕ ВыборкаПоРасчетам.ХозяйственнаяОперация = КорректировкаЗадолженности  И СчетчикВидДвижения = 1) Тогда
					СуммаДокументаУпр  = СуммаДокументаУпр + ВыборкаПоРасчетам.ПредоплатаУпр + ДолгУпр;
				КонецЕсли;
				
				ПорядокОплаты = ВыборкаПоРасчетам.ПорядокОплаты;
			КонецЦикла;

			УчтеноБазыРаспределения = 0;
			УжеРаспределеноУпр = 0;

			Для Каждого Запись Из НаборЗаписей Цикл
				
				Если (СчетчикВидДвижения = 1 И Запись.СуммаБезНДС < 0) 
					ИЛИ (СчетчикВидДвижения = 0 И Запись.СуммаБезНДС > 0) 
					ИЛИ СуммаДокумента = 0
					ИЛИ ТипРасчетов <> Запись.ТипРасчетов Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаСНДС = Запись.СуммаБезНДС + Запись.СуммаНДС;
				
				СуммаСНДСУпр  = Окр(СуммаДокументаУпр * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределеноУпр;
				
				УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДС;
				УжеРаспределеноУпр      = УжеРаспределеноУпр + СуммаСНДСУпр;
				
				ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Запись.СтавкаНДС);
				
				Если ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте Тогда
					
					КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						Запись.Валюта,
						Дата,
						Валюты.КэшКурсовВалют);
					
					Если КурсВалютыДокумента = 0 Тогда
						ВызватьИсключение(СтрЗаменить(НСтр("ru = 'Нулевой курс валюты документа на %ДатаКурса%'"),"%ДатаКурса%", Формат(Дата,"ДЛФ=DD")));
					КонецЕсли;
					
					Запись.БазаНДСУпр = Запись.СуммаБезНДС * КурсВалютыДокумента / КурсВалютыУпр;
					Запись.СуммаНДСУпр = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Запись.БазаНДСУпр, ТекПроцентНДС, Ложь);
					Запись.СуммаБезНДСУпр = СуммаСНДСУпр - Запись.СуммаНДСУпр;
					
				Иначе
					
					Запись.СуммаНДСУпр = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСУпр, ТекПроцентНДС);
					Запись.СуммаБезНДСУпр = СуммаСНДСУпр - Запись.СуммаНДСУпр;
					Запись.БазаНДСУпр  = Запись.СуммаБезНДСУпр;
					
				КонецЕсли;
				
				Если Запись.СуммаБезНДС + Запись.СуммаНДС < 0 Тогда
					Запись.СуммаНДСУпр = -Запись.СуммаНДСУпр;
					Запись.СуммаБезНДСУпр = -Запись.СуммаБезНДСУпр;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаРегистрацииДанныхКОбработке()
	
	ТекстЗапроса = 

	#Область АвансовыйОтчет
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ПрочиеРасходы КАК ТаблицаПрочиеРасходы
	|			ПО ТаблицаПрочиеРасходы.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ВЫБОР КОГДА ТаблицаДокумента.Мультивалютный
	|		ТОГДА ТаблицаПрочиеРасходы.Валюта = &ВалютаРегламентированногоУчета
	|		ИНАЧЕ ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	  КОНЕЦ
	|	И ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаКонвертацияВалюты.ИдентификаторСтроки
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|			ПО ТаблицаКонвертацияВалюты.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Мультивалютный
	|	И (ТаблицаКонвертацияВалюты.Валюта = &ВалютаРегламентированногоУчета
	|		ИЛИ ТаблицаКонвертацияВалюты.ВалютаКонвертации = &ВалютаРегламентированногоУчета)
	|	И ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область АктВыполненныхРабот
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|			ПО ТаблицаУслуги.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ВзаимозачетЗадолженности
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДебиторскаяЗадолженность.ИдентификаторСтроки
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТаблицаДебиторскаяЗадолженность
	|			ПО ТаблицаДебиторскаяЗадолженность.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДебиторскаяЗадолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаКредиторскаяЗадолженность.ИдентификаторСтроки
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТаблицаКредиторскаяЗадолженность
	|			ПО ТаблицаКредиторскаяЗадолженность.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаКредиторскаяЗадолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ВозвратТоваровМеждуОрганизациями
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И НЕ ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
	|	И ТаблицаДокумента.Проведен" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ВозвратТоваровОтКлиента
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И НЕ ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ВозвратТоваровПоставщику
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +

	#КонецОбласти
	
	#Область ВыкупВозвратнойТарыКлиентом
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыКлиентом.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ВыкупВозвратнойТарыУПоставщика
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ЗаписьКнигиПокупок
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ЗаписьКнигиПокупок КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаписьКнигиПокупок.Ценности КАК ТаблицаЦенности
	|			ПО ТаблицаЦенности.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ЗаписьКнигиПродаж
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ЗаписьКнигиПродаж КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаписьКнигиПродаж.Ценности КАК ТаблицаЦенности
	|			ПО ТаблицаЦенности.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ЗаписьКнигиПродаж КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаписьКнигиПродаж.Расхождения КАК ТаблицаРасхождения
	|			ПО ТаблицаРасхождения.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеПрочегоНачисленияНДС)
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти

	#Область НачисленияКредитовИДепозитов
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаНачисления.ИдентификаторСтроки
	|ИЗ
	|	Документ.НачисленияКредитовИДепозитов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачисленияКредитовИДепозитов.Начисления КАК ТаблицаНачисления
	|			ПО ТаблицаНачисления.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаНачисления.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОперацияПоПлатежнойКарте
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОперацияПоЯндексКассе
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОперации.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ТаблицаОперации
	|ГДЕ
	|	ТаблицаОперации.Проведен
	|	И ТаблицаОперации.ВалютаКомиссии = &ВалютаРегламентированногоУчета
	|	И ТаблицаОперации.СуммаКомиссии <> 0" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОприходованиеИзлишковТоваров
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеИзлишковТоваров.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетБанкаПоОперациямЭквайринга
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетКомиссионера
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера.Товары КАК ТЧТовары
	|			ПО ТЧТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТЧТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета
	|	И Документ.СуммаВознаграждения <> 0" + ТекстОбъединить() +

	#КонецОбласти
	
	#Область ОтчетКомиссионераОСписании
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетКомитенту
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомитенту КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетКомитентуОСписании
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетОРозничныхПродажах
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ТЧОплата
	|			ПО ТЧОплата.Ссылка = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры НЕ В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|			ПО ТаблицаПодарочныеСертификаты.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетПоКомиссииМеждуОрганизациями
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ТаблицаВидыЗапасов.ВидЗапасов.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Услуги
	|			ПО Услуги.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И Услуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Услуги.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета
	|	И Документ.СуммаВознаграждения <> 0" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ОтчетПоКомиссииМеждуОрганизациямиОСписании
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)" + ТекстОбъединить() +

	#КонецОбласти
	
	#Область ПередачаТоваровМеждуОрганизациями
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПересортицаТоваров
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПересортицаТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета
	|	И НЕ ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПорчаТоваров
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПорчаТоваров КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПорчаТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|			ПО ТаблицаВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	&ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета
	|	И НЕ ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|	И ТаблицаДокумента.Проведен" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПоступлениеБезналичныхДенежныхСредств
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета
	|	И Документ.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТаблицаДокумента.ХозяйственнаяОперация НЕ В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета))" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПриобретениеТоваровУслуг
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	)" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПриобретениеУслугПрочихАктивов
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +

	#КонецОбласти
	
	#Область ПриходныйКассовыйОрдер
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область ПрочееОприходованиеТоваров
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета
	|	И ТаблицаДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область РасходныйКассовыйОрдер
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область РеализацияТоваровУслуг
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК ТЧВидыЗапасов
	|			ПО ТЧВидыЗапасов.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область РеализацияУслугПрочихАктивов
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|			ПО ТаблицаДоходы.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета" + ТекстОбъединить() +
	
	#КонецОбласти
	
	#Область СписаниеБезналичныхДенежныхСредств
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Документ
	|ГДЕ
	|	Документ.Проведен
	|	И Документ.Валюта = &ВалютаРегламентированногоУчета
	|	И Документ.ХозяйственнаяОперация Не В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаЛизингодателю),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	NULL
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТЧРасшифровкаПлатежа
	|			ПО ТЧРасшифровкаПлатежа.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.Валюта = &ВалютаРегламентированногоУчета
	|	И ТаблицаДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаЛизингодателю),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))" + ТекстОбъединить() +
	
	#КонецОбласти
	
	
	
	#Область СписаниеЗадолженности
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ДанныеТЧ.ИдентификаторСтроки
	|ИЗ
	|	Документ.СписаниеЗадолженности КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеЗадолженности.Задолженность КАК ДанныеТЧ
	|			ПО ДанныеТЧ.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеТЧ.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета" +
	
	#КонецОбласти
	
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокументов.Регистратор КАК Регистратор
	|ИЗ 
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО	
	|		ТаблицаДокументов.Регистратор = Суммы.Регистратор
	|		И (ТаблицаДокументов.ИдентификаторСтроки ЕСТЬ NULL ИЛИ ЕСТЬNULL(ТаблицаДокументов.ИдентификаторСтроки,0) = Суммы.ИдентификаторСтроки)
	|ГДЕ
	|	Суммы.Регистратор ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОбъединить()
	Возврат "
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|";
КонецФункции

Функция СуммыКлиентовВВалютеРегл()
	Возврат "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ДанныеРегистра.ЗаказКлиента.ПорядокОплаты) КАК ПорядокОплаты,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК ПредоплатаУпр,
	|
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|			ТОГДА ДанныеРегистра.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|ГДЕ ДанныеРегистра.Регистратор = &Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
	|			ИЛИ ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) В (&АналитикаУчетаПоПартнерам))
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Валюта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции

Функция СуммыПоставщиковВВалютеРегл()
	Возврат "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ДанныеРегистра.ЗаказПоставщику.ПорядокОплаты) КАК ПорядокОплаты,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		 		И Поступление.Организация = Аналитика.Организация 
	|			ТОГДА 
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|				ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.ПредоплатаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|		 		И Поступление.Организация = Аналитика.Организация 
	|			ТОГДА 
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.ПредоплатаУпр
	|				ИНАЧЕ 0
	|				КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.ПредоплатаУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК ПредоплатаУпр,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			И Поступление.Организация = Аналитика.Организация
	|			ТОГДА
	|				ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|			 		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|					ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			 		ИЛИ ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				ТОГДА ДанныеРегистра.Долг
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА ДанныеРегистра.Долг
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|	ПО Аналитика.Ссылка = ДанныеРегистра.АналитикаУчетаПоПартнерам
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Поступление
	|	ПО Поступление.Ссылка = ДанныеРегистра.Регистратор
	|
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам)
	|			ИЛИ ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) В (&АналитикаУчетаПоПартнерам))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Валюта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции

Функция ТребуетсяРаспределение(ДокументСсылка)
	
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыУПоставщика"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаПриобретения"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	
	
	Если СписокТипов.НайтиПоЗначению(ТипЗнч(ДокументСсылка)) = Неопределено Тогда
		Возврат ЛОЖЬ;
	ИНАЧЕ
		Возврат ИСТИНА;
	КонецЕсли;
	
КонецФункции

Функция ДокументБезБазыНДСУпр(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИнвентаризацияНаличныхДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТипыДокументовКОбработке()
	
	СписокТипов = Новый СписокЗначений;
	
	СписокТипов.Добавить("АвансовыйОтчет");
	СписокТипов.Добавить("АктВыполненныхРабот");
	СписокТипов.Добавить("ВзаимозачетЗадолженности");
	СписокТипов.Добавить("ВнесениеДенежныхСредствВКассуККМ");
	СписокТипов.Добавить("ВозвратТоваровМеждуОрганизациями");
	СписокТипов.Добавить("ВозвратТоваровОтКлиента");
	СписокТипов.Добавить("ВозвратТоваровПоставщику");
	СписокТипов.Добавить("ВыкупВозвратнойТарыКлиентом");
	СписокТипов.Добавить("ВыкупВозвратнойТарыУПоставщика");
	СписокТипов.Добавить("ЗаписьКнигиПокупок");
	СписокТипов.Добавить("ЗаписьКнигиПродаж");
	СписокТипов.Добавить("ИнвентаризацияНаличныхДенежныхСредств");
	СписокТипов.Добавить("НачисленияКредитовИДепозитов");
	СписокТипов.Добавить("ОперацияПоПлатежнойКарте");
	СписокТипов.Добавить("ОперацияПоЯндексКассе");
	СписокТипов.Добавить("ОприходованиеИзлишковТоваров");
	СписокТипов.Добавить("ОтчетБанкаПоОперациямЭквайринга");
	СписокТипов.Добавить("ОтчетКомиссионера");
	СписокТипов.Добавить("ОтчетКомиссионераОСписании");
	СписокТипов.Добавить("ОтчетКомитенту");
	СписокТипов.Добавить("ОтчетКомитентуОСписании");
	СписокТипов.Добавить("ОтчетОРозничныхПродажах");
	СписокТипов.Добавить("ОтчетПоКомиссииМеждуОрганизациями");
	СписокТипов.Добавить("ОтчетПоКомиссииМеждуОрганизациямиОСписании");
	СписокТипов.Добавить("ПередачаТоваровМеждуОрганизациями");
	СписокТипов.Добавить("ПересортицаТоваров");
	СписокТипов.Добавить("ПорчаТоваров");
	СписокТипов.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	СписокТипов.Добавить("ПриобретениеТоваровУслуг");
	СписокТипов.Добавить("ПриобретениеУслугПрочихАктивов");
	СписокТипов.Добавить("ПриходныйКассовыйОрдер");
	СписокТипов.Добавить("ПрочееОприходованиеТоваров");
	СписокТипов.Добавить("РасходныйКассовыйОрдер");
	СписокТипов.Добавить("РеализацияТоваровУслуг");
	СписокТипов.Добавить("РеализацияУслугПрочихАктивов");
	СписокТипов.Добавить("СписаниеБезналичныхДенежныхСредств");
	СписокТипов.Добавить("ВыемкаДенежныхСредствИзКассыККМ");
	
	
	
	СписокТипов.Добавить("СписаниеЗадолженности");
	
	Возврат СписокТипов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
