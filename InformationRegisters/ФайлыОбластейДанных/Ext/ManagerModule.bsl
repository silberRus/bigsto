#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ПрограммныйИнтерфейс

// Возвращает имя, размер, расположение или двоичные данные файла по идентификатору.
// Если файл хранится на диске, в значение ПолноеИмя возвращается расположение файла.
// Если файл хранится в информационной базе, в значение Данные возвращаются двоичные данные. 
// 
// Параметры:
//  Идентификатор - Строка(36) - идентификатор файла
// 
// Возвращаемое значение:
//  Структура - описание файла, см. НовыйОписаниеФайла()
//      * ИмяФайла - Строка - имя файла
//      * Размер - Число - размер файла в байтах
//      * ПолноеИмя - Строка - расположение файла в томе.
//      * Данные - ДвоичныеДанные - двоичные данные файла.
//      * CRC32 - Число - контрольная сумма данных файла.
//
Функция ОписаниеФайла(Знач Идентификатор) Экспорт

    Словарь = ФайлыОбластейДанныхПовтИсп.СловарьПодсистемы();
    
    ИдентификаторФайла = Новый УникальныйИдентификатор(Идентификатор);
    
    ОписаниеФайла = НовыйОписаниеФайла();
    
    Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
    Запись.Идентификатор = ИдентификаторФайла;
    УстановитьПривилегированныйРежим(Истина);
    Запись.Прочитать();
    УстановитьПривилегированныйРежим(Ложь);
    
    Если Запись.Выбран() Тогда
        ОписаниеФайла.Имя = Запись.Имя;
        ОписаниеФайла.Размер = Запись.Размер;
        Если Запись.ХранитьНаДиске Тогда
            ОписаниеФайла.ПолноеИмя = РаботаСФайламиСлужебный.ПолныйПутьТома(Запись.ТомНаДиске) + Запись.ПутьКФайлу;
        Иначе
            ОписаниеФайла.Данные = Запись.Файл.Получить();
        КонецЕсли;
        ОписаниеФайла.CRC32 = Запись.ФайлCRC32;
    Иначе
        ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.ФайлНеНайденПоИдентификатору, ИдентификаторФайла));
    КонецЕсли;
    
    Возврат ОписаниеФайла;
    
КонецФункции

// Возвращает двоичные данные файла по идентификатору.
// 
// Параметры:
//  Идентификатор - Строка(36) - идентификатор файла
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные файла.
//
Функция ДвоичныеДанныеФайла(Знач Идентификатор) Экспорт
    
    ОписаниеФайла = ОписаниеФайла(Идентификатор);
    Если ЗначениеЗаполнено(ОписаниеФайла.Данные) Тогда
        Возврат ОписаниеФайла.Данные;
    ИНаче
        Возврат Новый ДвоичныеДанные(ОписаниеФайла.ПолноеИмя);
    КонецЕсли; 
	
КонецФункции

// Сохраняет данные как запись о файле в этом регистре сведений.
// Если параметр Данные = Неопределено, должен быть заполнен параметр ПолноеИмя = полное имя файла с путем.
//
// Параметры:
//  Имя - Строка - Имя файла в хранилище.
//  Данные - ДвоичныеДанные, Неопределено - данные файла.
//  ПолноеИмя - Строка, Неопределено - полное имя файла с путем, если Данные = Неопределено.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор файла.
//
Функция Загрузить(Знач Имя, Данные = Неопределено, ПолноеИмя = Неопределено, Временный = Ложь) Экспорт
    
    Словарь = ФайлыОбластейДанныхПовтИсп.СловарьПодсистемы();
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Если ЗначениеЗаполнено(ПолноеИмя) Тогда
			СвойстваФайла = Новый Файл(ПолноеИмя);
			Имя = СвойстваФайла.Имя;
		Иначе
			ВызватьИсключение(Словарь.ИмяФайлаДляСохраненияНеЗадано);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Данные) И Не ЗначениеЗаполнено(ПолноеИмя) Тогда
		ВызватьИсключение(Словарь.ИнформацияОФайлеОтсутствует);
	КонецЕсли;
	СвойстваФайла = Новый Файл(Имя);
	Запись = СоздатьМенеджерЗаписи();
	Запись.Идентификатор = Новый УникальныйИдентификатор;
	Запись.Имя = СвойстваФайла.Имя;
    Запись.Временный = Временный;
	Запись.ХранитьНаДиске = РаботаСФайламиСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Запись.Размер = Данные.Размер();
		ДобавляемыеДанные = Данные;
	Иначе // Иначе это должен быть путь к файлу на диске.
		СохраняемыйФайл = Новый Файл(ПолноеИмя);
		Если НЕ СохраняемыйФайл.Существует() Или Не СохраняемыйФайл.ЭтоФайл() Тогда 
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Словарь.ФайлНеНайденПоПолномуИмени, СохраняемыйФайл.ПолноеИмя);
		КонецЕсли;
		Запись.Размер = СохраняемыйФайл.Размер();
		Если Запись.ХранитьНаДиске Тогда
			ДобавляемыеДанные = СохраняемыйФайл.ПолноеИмя;
		Иначе
			ДобавляемыеДанные = Новый ДвоичныеДанные(СохраняемыйФайл.ПолноеИмя);
		КонецЕсли;
    КонецЕсли;
    Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
    Если ТипЗнч(ДобавляемыеДанные) = Тип("ДвоичныеДанные") Тогда
        Хеширование.Добавить(ДобавляемыеДанные);
    Иначе
        Хеширование.ДобавитьФайл(ДобавляемыеДанные);
    КонецЕсли; 
    Запись.ФайлCRC32 = Хеширование.ХешСумма;
	Если Запись.ХранитьНаДиске Тогда
		// Добавить в один из томов, где есть свободное место
        ПутьКФайлу = "";
	    СсылкаНаТом = Неопределено;
        ДатаПоследнегоИзменения = ТекущаяУниверсальнаяДата();
        СведенияОФайле = РаботаСФайламиСлужебный.ДобавитьФайлВТом(ДобавляемыеДанные, ДатаПоследнегоИзменения,
			СвойстваФайла.ИмяБезРасширения,	ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СвойстваФайла.Расширение)); 
	    Запись.ТомНаДиске = СведенияОФайле.Том;
        Запись.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
	Иначе
		Запись.Файл = Новый ХранилищеЗначения(ДобавляемыеДанные, Новый СжатиеДанных(9));
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запись.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Запись.Идентификатор;
	
КонецФункции

// Удалить файл из информационной базы
//
// Параметры:
//  ИдентификаторФайла - УникальныйИдентификатор -  идентификатор удяляемого файла.
//  УдалятьЕслиНаДиске - Булево - Если Ложь и хранение на диске, регистрируется как временный и с диска не удаляется.
//
// Возвращаемое значение:
//  Булево - Успешность удаления.
//
Функция Удалить(Знач ИдентификаторФайла, Знач УдалятьЕслиНаДиске = Истина) Экспорт
	
    Словарь = ФайлыОбластейДанныхПовтИсп.СловарьПодсистемы();
    УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		БлокироватьЗаписьОФайлеВРегистре(ИдентификаторФайла);
		Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
		Запись.Идентификатор = ИдентификаторФайла;
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			ЗафиксироватьТранзакцию();
			ЗаписьЖурналаРегистрации(Словарь.КорневоеСобытие + "." + Словарь.УдалениеФайлаИзХранилища, 
				УровеньЖурналаРегистрации.Ошибка,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Словарь.ФайлНеНайденПоИдентификатору, ИдентификаторФайла));
			Возврат Ложь;
		КонецЕсли;
		// Имя файла для удаления в случае дискового хранения.
		ПолноеИмя = ?(Запись.ХранитьНаДиске, РаботаСФайламиСлужебный.ПолныйПутьТома(Запись.ТомНаДиске) + Запись.ПутьКФайлу, "");
		// Удалить запись из регистра.
		Запись.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(Словарь.КорневоеСобытие + "." + Словарь.УдалениеФайлаИзХранилища, 
            УровеньЖурналаРегистрации.Ошибка,,, 
            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	Если Не ПустаяСтрока(ПолноеИмя) Тогда // Хранение на диске.
		УдалитьФайлТома(ПолноеИмя);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

// Устанавливает у файла признак "Временный" = Истина.
//
// Параметры:
//  ИдентификаторФайла - УникальныйИдентификатор -  идентификатор файла.
//
Функция УстановитьПризнакВременного(Знач ИдентификаторФайла) Экспорт
	
    Словарь = ФайлыОбластейДанныхПовтИсп.СловарьПодсистемы();
    УстановитьПривилегированныйРежим(Истина);
    Запись = РегистрыСведений.ФайлыОбластейДанных.СоздатьМенеджерЗаписи();
    Запись.Идентификатор = ИдентификаторФайла;
    Запись.Прочитать();
	Если Не Запись.Выбран() Тогда
		ЗаписьЖурналаРегистрации(Словарь.КорневоеСобытие + "." + Словарь.УстановкаПризнакаВременный, 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Словарь.ФайлНеНайденПоИдентификатору, ИдентификаторФайла));
		Возврат Ложь;
    КонецЕсли;
    Запись.Временный = Истина;
    Запись.Записать();
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает незаполненную структуру нужного формата.
//
// Возвращаемое значение:
// Структура:
//  Имя - Неопределено - имя файла (ожидается Строка)
//  ПолноеИмя - Неопределено - расположение файла (ожидается Строка) 
//  Размер - Неопределено - размер файла в байтах (ожидается Число)
//  Данные - Неопределено - данные файла (ожидаются ДвоичныеДанные)
//  CRC32 - Неопределено - контрольная сумма (ожидаются CRC32 хеш сумма от данных файла)
//
Функция НовыйОписаниеФайла()
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя");
	ОписаниеФайла.Вставить("ПолноеИмя");
    ОписаниеФайла.Вставить("Размер");
	ОписаниеФайла.Вставить("Данные");
	ОписаниеФайла.Вставить("CRC32");
    Возврат ОписаниеФайла;
	
КонецФункции

// Заблокировать запись регистра сведений Файлы.
//
// Параметры:
// КлючРегистра - УникальныйИдентификатор - измерение регистра сведений.
//
Процедура БлокироватьЗаписьОФайлеВРегистре(Знач ИдентификаторФайла)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ФайлыОбластейДанных.ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", ИдентификаторФайла);
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция УдалитьФайлТома(Знач ФайлДляУдаления)
    
    Словарь = ФайлыОбластейДанныхПовтИсп.СловарьПодсистемы();
	Если ТипЗнч(ФайлДляУдаления) = Тип("Строка") Тогда // Полный путь.
		СвойстваФайла = Новый Файл(ФайлДляУдаления);
	ИначеЕсли ТипЗнч(ФайлДляУдаления) = Тип("Файл") Тогда
		СвойстваФайла = ФайлДляУдаления;
	Иначе
		ВызватьИсключение Словарь.НеверныйТипЗаданияФайла;
	КонецЕсли;
	Если СвойстваФайла.Существует() Тогда 
        Попытка
            СвойстваФайла.УстановитьТолькоЧтение(Ложь);
            УдалитьФайлы(СвойстваФайла.ПолноеИмя);
            // Удалить каталог, если он пуст.
            Если НайтиФайлы(СвойстваФайла.Путь, "*.*").Количество() = 0 Тогда
                УдалитьФайлы(СвойстваФайла.Путь);
            КонецЕсли;
            Возврат Истина;
        Исключение
        КонецПопытки;
    КонецЕсли;
	Возврат Ложь;
		
КонецФункции

#КонецОбласти 

#КонецЕсли