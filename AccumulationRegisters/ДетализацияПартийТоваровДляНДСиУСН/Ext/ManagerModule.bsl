#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Движения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы ПО ИСТИНА
	|ГДЕ
	|	Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);

КонецПроцедуры

// Обработчик обновления УТ 11.4.1.
// Очищаются виды запасов с типом запасов Услуга.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Движения.Период 						КАК Период,
	|	Движения.Регистратор 					КАК Регистратор,
	|	Движения.ВидДвижения 					КАК ВидДвижения,
	|	Движения.Организация 					КАК Организация,
	|	Движения.РазделУчета 					КАК РазделУчета,
	|	Движения.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                  	КАК ВидЗапасов,
	|	Движения.Партия 						КАК Партия,
	|	Движения.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
	|	Движения.ВидДеятельностиНДС 			КАК ВидДеятельностиНДС,
	|	Движения.АналитикаУчетаПартий 			КАК АналитикаУчетаПартий,
	|	Движения.ДокументПоступления 			КАК ДокументПоступления,
	|	Движения.Количество 					КАК Количество,
	|	Движения.СтоимостьБезНДС 				КАК СтоимостьБезНДС,
	|	Движения.НДС 							КАК НДС,
	|	Движения.НДСУпр							КАК НДСУпр,
	|	Движения.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	Движения.КорАналитикаУчетаНоменклатуры 	КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА Движения.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.КорВидЗапасов
	|	КОНЕЦ                                  	КАК КорВидЗапасов,
	|	Движения.КорВидДеятельностиНДС 			КАК КорВидДеятельностиНДС,
	|	Движения.СтатьяРасходовАктивов 			КАК СтатьяРасходовАктивов,
	|	Движения.АналитикаРасходов 				КАК АналитикаРасходов,
	|	Движения.АналитикаАктивов 				КАК АналитикаАктивов,
	|	Движения.РасчетПартий 					КАК РасчетПартий,
	|	Движения.ТипЗаписи 						КАК ТипЗаписи,
	|	Движения.ДокументИсточник 				КАК ДокументИсточник,
	|	Движения.Знаменатель 					КАК Знаменатель,
	|	Движения.КорАналитикаФинансовогоУчета 	КАК КорАналитикаФинансовогоУчета,
	|	Движения.СтатьяСписанияНДС 				КАК СтатьяСписанияНДС,
	|	Движения.АналитикаСписанияНДС 			КАК АналитикаСписанияНДС
	|ИЗ
	|	РегистрНакопления.ДетализацияПартийТоваровДляНДСиУСН КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Регистратор";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Загрузить(Запрос.Выполнить().Выгрузить());
			
			Если Набор.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать движения документа ""%1"" по причине:
					|%2'"),
				Регистратор,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(),
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
