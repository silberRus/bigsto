#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Формирует текст запроса для формирования движений по регистру "Активы и пассивы".
//
Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(ЕстьВтПартииПрочихРасходов = Истина) Экспорт
	
	ТекстЗапроса = "
	// Отражение уменьшения пассивов у организации - источника.
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.Организация КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|
	// Отражение увеличения пассивов учете у организации - получателя.
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Строки.ОрганизацияПолучатель КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
	|	Строки.ОрганизацияПолучатель КАК Аналитика,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ИЗ
	|	ВтПрочиеРасходы КАК Строки
	|ГДЕ
	|	Строки.ОрганизацияПолучатель <> Строки.Организация
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.ОрганизацияПолучатель,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности
	|";
	Если ЕстьВтПартииПрочихРасходов Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
		// Отражение уменьшения пассивов у организации - источника.
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	Строки.Организация КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.Организация КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.Организация,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|
		// Отражение увеличения пассивов учете у организации - получателя.
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Строки.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Строки.ОрганизацияПолучатель КАК Организация,
		|	Строки.Подразделение КАК Подразделение,
		|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки) КАК Статья,
		|	Строки.ОрганизацияПолучатель КАК Аналитика,
		|	СУММА(Строки.Стоимость) КАК Сумма
		|ИЗ
		|	ВтПартииПрочихРасходов КАК Строки
		|ГДЕ
		|	Строки.ОрганизацияПолучатель <> Строки.Организация
		|СГРУППИРОВАТЬ ПО
		|	Строки.Период,
		|	Строки.ОрганизацияПолучатель,
		|	Строки.Подразделение,
		|	Строки.НаправлениеДеятельности
		|";
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрНакопления.ПрочиеАктивыПассивы";
	
КонецФункции

#Область ОбработчикиОбновления

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	// Регистрация документов влияющих на управленческий баланс происходит в регистрах-источниках данных для управленческого баланса.
	// Ниже перечислены все регистры накопления в которых происходит вызов процедуры ЗарегистироватьКОбновлениюУправленческогоБаланса:
	// - ТоварыКОформлениюОтчетовКомитенту
	
	
	// Регистрация документов изменяющих движения текущего регистра.
	
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	ДляОбновленияУпрБаланса = Новый Соответствие;
	
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.КорректировкаРеализации"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомиссионера"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомиссионераОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомитенту"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетКомитентуОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПересортицаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПорчаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.СборкаТоваров"), Истина);
	ДляОбновленияУпрБаланса.Вставить(Тип("ДокументСсылка.СписаниеНедостачТоваров"), Истина);
	
	
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопИсточники = ВлияетНаУправленческийБаланс();
	ДопПараметры.ДополнительныеИсточникиДанных = ДопИсточники;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь, Неопределено, ПолноеИмяРегистра, ДопПараметры);
		
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы;
	ВключаяОнлайнРасчеты = Истина;
	БалансовыеРегистры = Обработки.ДвиженияАктивовПассивов.БалансовыеРегистры(ВключаяОнлайнРасчеты);
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		ТипДокументСсылка = ТипЗнч(Регистратор);
		МетаданныеДокументСсылка = Регистратор.Метаданные();
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			#Область БлокировкаИсточниковУпрБаланса
			Если ДляОбновленияУпрБаланса[ТипДокументСсылка] <> Неопределено Тогда
				
				ИсточникиБаланса = Новый Массив;
				Для Каждого Набор Из МетаданныеДокументСсылка.Движения Цикл
				
					ПолноеИмяНабора = Набор.ПолноеИмя();
					Если СтрНайти(ПолноеИмяНабора, "РегистрНакопления") = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяНабора = СтрЗаменить(ПолноеИмяНабора, "РегистрНакопления.", "");
					Если ИмяНабора = "ПрочиеАктивыПассивы" Тогда
						ИсточникиБаланса.Добавить(ИмяНабора);
						Продолжить;
					КонецЕсли;
					БалансовыйРегистр = БалансовыеРегистры.Свойство(ИмяНабора);
					Если НЕ БалансовыйРегистр Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяНабора + ".НаборЗаписей");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
					
					ИсточникиБаланса.Добавить(ИмяНабора);
					
				КонецЦикла;
				
			КонецЕсли;
			#КонецОбласти
			
			Блокировка.Заблокировать();
		
			НаборЗаписей = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
			
			// Обновим даные управленческого баланса
			Если ДляОбновленияУпрБаланса[ТипДокументСсылка] <> Неопределено Тогда
				ОбновитьУправленческийБаланс(Регистратор, НаборЗаписей, ИсточникиБаланса);
			КонецЕсли;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось заполнить движения по регистру ""Активы и пассивы"" документа ""%1"" по причине: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра,
				Регистратор,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеУправленческогоБаланса

Процедура ЗарегистироватьКОбновлениюУправленческогоБаланса(Параметры, Регистраторы, ПолноеИмяРегистраИсточника) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс")
		ИЛИ НЕ Константы.ЗаполненыДвиженияАктивовПассивов.Получить()
		ИЛИ НЕ ВлияетНаУправленческийБаланс(ПолноеИмяРегистраИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУпрБаланса = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	ПараметрыУпрБаланса.Очередь = ОбновлениеИнформационнойБазы.ОчередьОтложенногоОбработчикаОбновления("РегистрыНакопления.ПрочиеАктивыПассивы.ОбработатьДанныеДляПереходаНаНовуюВерсию");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(ПараметрыУпрБаланса, Регистраторы, ПолноеИмяРегистра());
	
КонецПроцедуры

Процедура ОбновитьУправленческийБаланс(Регистратор, ПрочиеАктивыПассивы, ИсточникиБаланса)
	
	ТаблицыДляДвижений = Новый Структура;
	Для Каждого ИмяРегистра Из ИсточникиБаланса Цикл
		Если ИмяРегистра = "ПрочиеАктивыПассивы" И ПрочиеАктивыПассивы.Количество() > 0 Тогда
			ТаблицыДляДвижений.Вставить("ПрочиеАктивыПассивы", ПрочиеАктивыПассивы.Выгрузить());
		Иначе
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			ТаблицыДляДвижений.Вставить(ИмяРегистра, Набор.Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДвижений = Новый Структура("Ссылка", Регистратор);
	ПараметрыДвижений.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	ПараметрыДвижений.Вставить("ВидОтложенногоРасчета", Перечисления.ВидыИсточниковУправленческогоБаланса.РасчетБаланса);
	ЗапросДвижений = Обработки.ДвиженияАктивовПассивов.ЗапросДвижений(ПараметрыДвижений);
	Если ЗапросДвижений <> Неопределено Тогда
		ДвиженияАктивовПассивов = ЗапросДвижений.Выполнить().Выгрузить();
		Если ПрочиеАктивыПассивы.Количество() > 0 Тогда
			ПрочиеАктивыПассивы.Очистить();
		КонецЕсли;
		Для Каждого Движение Из ДвиженияАктивовПассивов Цикл
			НоваяЗапись = ПрочиеАктивыПассивы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Движение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет влияние обновления регистра-источника на управленческий баланс.
// Если в регистре-источник изменились незначимые реквизиты или обработчик обновления отсутствует,
// то после его обновления движения упр. баланса не изменятся.
// Флаги проставляются вручную на основании экспертной оценки.
//
// Параметры:
//  ПолноеИмяРегистра - Строка - полное имя регистра в формате "РегистрНакопления.ИмяРегисра"
//
// Возвращаемое значение:
//  Истина - изменения в источника влияют на упр. баланс
//  Соответствие - если ПолноеИмяРегистра = НЕОПРЕДЕЛНО, возвращается соответствие со всеми влияющими источниками упр. баланса
Функция ВлияетНаУправленческийБаланс(ПолноеИмяРегистра = Неопределено)
	
	ОбновлениеИзменитБаланс = Новый Соответствие;
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеДокументСсылкаы"                     , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваБезналичные"           , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваВКассахККМ"            , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваВПути"                 , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваНаличные"              , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц"       , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПартииПрочихРасходов"                  , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПереданнаяВозвратнаяТара"              , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПодарочныеСертификаты"                 , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПринятаяВозвратнаяТара"                , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеАктивыПассивы"                   , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеДоходы"                          , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ПрочиеРасходы"                         , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов"  , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСКлиентамиПоДокументам"         , Ложь);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.РасчетыСПоставщикамиПоДокументам"      , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.СебестоимостьТоваров"                  , Истина);
	ОбновлениеИзменитБаланс.Вставить("РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту"     , Истина);
	
	Если ПолноеИмяРегистра = Неопределено Тогда
		ВлияющиеИсточники = Новый Соответствие;
		Для Каждого Источник Из ОбновлениеИзменитБаланс Цикл
			Если Источник.Значение Тогда
				ВлияющиеИсточники.Вставить(Источник.Ключ, Истина);
			КонецЕсли;
		КонецЦикла;
		Возврат ВлияющиеИсточники;
	КонецЕсли;
	
	Возврат ОбновлениеИзменитБаланс[ПолноеИмяРегистра];
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
