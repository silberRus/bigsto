#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	// Ниже приведеный код, должен выполняться до проверки:
	// Если ОбменДанными.Загрузка Тогда
	//	Возврат
	// КонецЕсли;
	// т.к. существет проверка на доп. свойство ДляПроведения, и 
	// данный объект в РИБ при записи должен создавать запись р/с Задания к перерасчету взаиморасчетов.
	
	Если Не ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
		Возврат;
	КонецЕсли;
	
	БлокироватьДляИзменения = Истина;
	
	// Текущее состояние набора помещается во временную таблицу,
	// чтобы при записи получить изменение нового набора относительно текущего.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Регистратор                  КАК Регистратор,
	|	Таблица.ЗаказПоставщику              КАК ЗаказПоставщику,
	|	Таблица.Валюта                       КАК Валюта,
	|	ВЫБОР КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ВЫБОР КОГДА Таблица.Сумма < 0 ТОГДА
	|					0
	|				ИНАЧЕ -Таблица.Сумма
	|			КОНЕЦ
	|		ИНАЧЕ Таблица.Сумма
	|	КОНЕЦ                                КАК СуммаПередЗаписью
	|
	|ПОМЕСТИТЬ РасчетыСПоставщикамиПередЗаписью
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|	И НЕ &ЭтоНовый
	|	И Таблица.ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	|	И НЕ &ОбменДанными
	|;
	|/////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период                    КАК Период,
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
	|	Расчеты.Валюта                    КАК Валюта,
	|	Расчеты.Сумма                     КАК Сумма,
	|	Расчеты.Оплачивается              КАК Оплачивается,
	|	Расчеты.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Расчеты.СуммаРегл                 КАК СуммаРегл,
	|	Расчеты.СуммаУпр                  КАК СуммаУпр,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ РасчетыСПоставщикамиИсходныеДвижения
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Регистратор = &Регистратор
	|	И Расчеты.Сумма <> 0
	|");
	
	Запрос.УстановитьПараметр("Регистратор",  Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЭтоНовый",     ?(ДополнительныеСвойства.Свойство("ЭтоНовый"), ДополнительныеСвойства.ЭтоНовый, Ложь));
	Запрос.УстановитьПараметр("ОбменДанными", ОбменДанными.Загрузка);
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СФормироватьТаблицуОбъектовОплаты();
	РегистрыСведений.ГрафикПлатежей.УстановитьБлокировкиДанныхДляРасчетаГрафика(
		ДополнительныеСвойства.ТаблицаОбъектовОплаты, "РегистрНакопления.РасчетыСПоставщиками", "ЗаказПоставщику");
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	// Проверка:
	// Если ОбменДанными.Загрузка Тогда
	//	Возврат
	// КонецЕсли;
	// Не требуется, т.к. существет проверка на доп. свойство ДляПроведения,
	// а данный объект в РИБ при записи должен создавать запись р/с Задания к перерасчету взаиморасчетов.
	
	Если НЕ ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, МЕСЯЦ) КАК Месяц,
	|	Таблица.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Таблица.ЗаказПоставщику              КАК ОбъектРасчетов,
	|	&Регистратор                         КАК Документ
	|ПОМЕСТИТЬ РасчетыСПоставщикамиЗаданияКРасчетамСПоставщиками
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расчеты.Период                    КАК Период,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
	|		Расчеты.Валюта                    КАК Валюта,
	|		Расчеты.Сумма                     КАК Сумма,
	|		Расчеты.Оплачивается              КАК Оплачивается,
	|		Расчеты.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|		Расчеты.СуммаРегл                 КАК СуммаРегл,
	|		Расчеты.СуммаУпр                  КАК СуммаУпр,
	|		Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|	ИЗ РасчетыСПоставщикамиИсходныеДвижения КАК Расчеты
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|		
	|	ВЫБРАТЬ
	|		Расчеты.Период                    КАК Период,
	|		Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Расчеты.ЗаказПоставщику           КАК ЗаказПоставщику,
	|		Расчеты.Валюта                    КАК Валюта,
	|		-Расчеты.Сумма                    КАК Сумма,
	|		-Расчеты.Оплачивается             КАК Оплачивается,
	|		Расчеты.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|		-Расчеты.СуммаРегл                КАК СуммаРегл,
	|		-Расчеты.СуммаУпр                 КАК СуммаУпр,
	|		Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|	ИЗ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ГДЕ Расчеты.Регистратор = &Регистратор
	|		И Расчеты.Сумма <> 0
	|) КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.АналитикаУчетаПоПартнерам,
	|	Таблица.ЗаказПоставщику,
	|	Таблица.Валюта,
	|	Таблица.ХозяйственнаяОперация,
	|	Таблица.СтатьяДвиженияДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Сумма) <> 0
	|	ИЛИ СУММА(Таблица.СуммаРегл) <> 0
	|	ИЛИ СУММА(Таблица.СуммаУпр) <> 0
	|;
	|////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.ЗаказПоставщику        КАК ЗаказПоставщику,
	|	ТаблицаИзменений.Валюта                 КАК Валюта,
	|	СУММА(ТаблицаИзменений.СуммаКИзменению) КАК СуммаКИзменению
	|	
	|ПОМЕСТИТЬ ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику            КАК ЗаказПоставщику,
	|		Таблица.Валюта                     КАК Валюта,
	|		Таблица.СуммаПередЗаписью          КАК СуммаКИзменению
	|	ИЗ
	|		РасчетыСПоставщикамиПередЗаписью КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику  КАК ЗаказПоставщику,
	|		Таблица.Валюта           КАК Валюта,
	|		-Таблица.Сумма           КАК СуммаКИзменению
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Таблица
	|	ГДЕ
	|		Таблица.Регистратор = &Регистратор
	|		И ТИПЗНАЧЕНИЯ(Таблица.ЗаказПоставщику)В (ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|													ТИП(Документ.СписаниеБезналичныхДенежныхСредств),
	|													ТИП(Документ.ПриходныйКассовыйОрдер),
	|													ТИП(Документ.РасходныйКассовыйОрдер),
	|													ТИП(Документ.ОперацияПоПлатежнойКарте))
	|		И (Таблица.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ПоступлениеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			И Таблица.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка)
	|			И Таблица.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)
	|			И Таблица.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка)
	|			И Таблица.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ОперацияПоПлатежнойКарте.ПустаяСсылка)
	|			)
	|
	|) КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.ЗаказПоставщику,
	|	ТаблицаИзменений.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаИзменений.СуммаКИзменению) <> 0
	|;
	|////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РасчетыСПоставщикамиИсходныеДвижения
	|");
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаИзменениеАвансыПоНакладным = МассивРезультатов[1].Выбрать();
	ВыборкаИзменениеАвансыПоНакладным.Следующий();
	СтруктураВременныеТаблицы.Вставить("ДвиженияРасчетыСПоставщикамиИзменениеАвансыПоНакладным", ВыборкаИзменениеАвансыПоНакладным.Количество > 0);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСПоставщиками(
		ДополнительныеСвойства.ТаблицаОбъектовОплаты.ВыгрузитьКолонку("ОбъектОплаты"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу заказов, которые были раньше в движениях и которые сейчас будут записаны
//
Процедура СФормироватьТаблицуОбъектовОплаты()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ЗаказПоставщику КАК ОбъектОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|	И Таблица.ЗаказПоставщику <> НЕОПРЕДЕЛЕНО
	|";
	
	ТаблицаОбъектовОплаты = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНовыхОбъектовОплаты = Выгрузить(, "ЗаказПоставщику");
	ТаблицаНовыхОбъектовОплаты.Свернуть("ЗаказПоставщику");
	Для Каждого Запись Из ТаблицаНовыхОбъектовОплаты Цикл
		Если Не ЗначениеЗаполнено(Запись.ЗаказПоставщику) Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаОбъектовОплаты.Найти(Запись.ЗаказПоставщику, "ОбъектОплаты") = Неопределено Тогда
			ТаблицаОбъектовОплаты.Добавить().ОбъектОплаты = Запись.ЗаказПоставщику;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ТаблицаОбъектовОплаты", ТаблицаОбъектовОплаты);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли