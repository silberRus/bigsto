#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьДвижения(ДопСвойства, ИмяСвойства, Регистр, Регистратор, УстанавливатьАктивность = Истина) Экспорт
	
	Отказ = Ложь;
		
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Регистратор, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
		Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Регистратор, ДопСвойства);
		
	Если ДопСвойства.ТаблицыДляДвижений.Свойство(ИмяСвойства) Тогда
		ЗаписатьДвиженияВБазу(Регистр, ДопСвойства.ТаблицыДляДвижений[ИмяСвойства], Регистратор,,УстанавливатьАктивность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ЗаполнятьЦиклом = Ложь, УстановитьАктивность = Истина, ДопСвойства = Неопределено) Экспорт
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	Набор.Прочитать();
	Если ДопСвойства <> Неопределено Тогда
		Для Каждого Свойство ИЗ ДопСвойства Цикл
			Набор.ДополнительныеСвойства.Вставить(Свойство.Ключ, Свойство.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Набор.Количество() > 0 Или Таблица.Количество() > 0 Тогда
		Если ЗаполнятьЦиклом Тогда
			Для Каждого Строка Из Таблица Цикл
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
			КонецЦикла;
		Иначе
			Набор.Загрузить(Таблица);
		КонецЕсли;
		Если УстановитьАктивность Тогда
			Набор.УстановитьАктивность(Истина);
		КонецЕсли;
		Набор.Записать();
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления УТ 11.4.1.
// Очищаются виды запасов с типом запасов Услуга.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Регистратор                   КАК Регистратор,
	|	Движения.Период                        КАК Период,
	|	Движения.ВидДвижения                   КАК ВидДвижения,
	|	Движения.Организация                   КАК Организация,
	|	Движения.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	Движения.ДокументПоступления           КАК ДокументПоступления,
	|	ВЫБОР КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                                  КАК ВидЗапасов,
	|	Движения.АналитикаУчетаПартий          КАК АналитикаУчетаПартий,
	|	Движения.ДокументПоступленияРасходов   КАК ДокументПоступленияРасходов,
	|	Движения.СтатьяРасходов                КАК СтатьяРасходов,
	|	Движения.Стоимость                     КАК Стоимость,
	|	Движения.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл                 КАК СтоимостьРегл,
	|	Движения.НДСРегл                       КАК НДСРегл,
	|	Движения.ПостояннаяРазница             КАК ПостояннаяРазница,
	|	Движения.ВременнаяРазница              КАК ВременнаяРазница,
	|	Движения.НалогообложениеНДС            КАК НалогообложениеНДС,
	|	Движения.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	Движения.ПодразделениеРасходов         КАК ПодразделениеРасходов,
	|	Движения.СтатьяРасходовСписания        КАК СтатьяРасходовСписания,
	|	Движения.АналитикаРасходов             КАК АналитикаРасходов,
	|	Движения.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	Движения.Количество                    КАК Количество,
	|	Движения.ДокументИсточник              КАК ДокументИсточник
	|
	|ИЗ
	|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли