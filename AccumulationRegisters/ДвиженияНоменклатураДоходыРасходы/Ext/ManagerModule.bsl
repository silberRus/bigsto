#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.4.1.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	Если Не Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходование
	|		ПО ДанныеРегистра.Регистратор = ПрочееОприходование.Ссылка
	|			И ПрочееОприходование.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|		ПО ДанныеРегистра.АналитикаУчетаНоменклатуры = Ключи.Ссылка
	|
	|	ГДЕ
	|		Ключи.Склад ССЫЛКА Справочник.Партнеры
	|		И ДанныеРегистра.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		И ДанныеРегистра.ИсточникГФУНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеРегистра.Регистратор КАК Ссылка
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|	ГДЕ
	|		ДанныеРегистра.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|
	|	) КАК ДанныеРегистра
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), ДополнительныеПараметры);
КонецПроцедуры

// Обработчик обновления УТ 11.4.1:
// очищаются виды запасов для товаров выкупленных у комитента.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ДвиженияНоменклатураДоходыРасходы";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Движения.Регистратор          КАК Регистратор,
	|	Движения.Период               КАК Период,
	|	Движения.ХозяйственнаяОперация      КАК ХозяйственнаяОперация,
	|	Движения.Организация                КАК Организация,
	|	Движения.Подразделение              КАК Подразделение,
	|	Движения.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	Движения.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Движения.Склад                      КАК Склад,
	|	Движения.ТипЗапасов                 КАК ТипЗапасов,
	|	ВЫБОР КОГДА НЕ ПрочееОприходование.Ссылка ЕСТЬ NULL
	|			И Ключи.Склад ССЫЛКА Справочник.Партнеры
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И Движения.ИсточникГФУНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		КОГДА Движения.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ВидЗапасов
	|	КОНЕЦ                               КАК ВидЗапасов,
	|	Движения.СтатьяДоходовРасходов      КАК СтатьяДоходовРасходов,
	|	Движения.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	Движения.АналитикаДоходов           КАК АналитикаДоходов,
	|	Движения.АналитикаРасходов          КАК АналитикаРасходов,
	|	Движения.АналитикаАктивовПассивов   КАК АналитикаАктивовПассивов,
	|	Движения.Количество              КАК Количество,
	|	Движения.Стоимость               КАК Стоимость,
	|	Движения.СтоимостьБезНДС         КАК СтоимостьБезНДС,
	|	Движения.СтоимостьРегл           КАК СтоимостьРегл,
	|	ВЫБОР КОГДА НЕ ПрочееОприходование.Ссылка ЕСТЬ NULL
	|			И Ключи.Склад ССЫЛКА Справочник.Партнеры
	|			И Движения.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И Движения.ИсточникГФУНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		КОГДА Движения.ИсточникГФУНоменклатуры.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ Движения.ИсточникГФУНоменклатуры
	|	КОНЕЦ                               КАК ИсточникГФУНоменклатуры,
	|	Движения.ДокументДвижения           КАК ДокументДвижения,
	|	Движения.РасчетСебестоимости        КАК РасчетСебестоимости
	|ИЗ
	|	РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = Движения.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходование
	|	ПО Движения.Регистратор = ПрочееОприходование.Ссылка
	|		И ПрочееОприходование.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|ГДЕ
	|	Движения.Регистратор = &Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	
	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор, ДополнительныеПараметры);
			Иначе
				Набор.Загрузить(Результат);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
КонецПроцедуры

#КонецОбласти

#КонецЕсли
