#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Структура допустимых отборов товаров к передаче {Склад, Организация, ОрганизацияПолучатель, НачалоПериода, КонецПериода}
Функция ОтборыТоваровКПередаче(Отборы = Неопределено) Экспорт
	ДоступныеПоляОтбора = Новый Структура();
	ДоступныеПоляОтбора.Вставить("Склад", Неопределено);
	ДоступныеПоляОтбора.Вставить("Организация", Неопределено);
	ДоступныеПоляОтбора.Вставить("ОрганизацияПолучатель", Неопределено);
	ДоступныеПоляОтбора.Вставить("НалогообложениеНДС", Неопределено);
	ДоступныеПоляОтбора.Вставить("ТипЗапасов", Новый Массив());
	ДоступныеПоляОтбора.Вставить("НачалоПериода", '00010101');
	ДоступныеПоляОтбора.Вставить("КонецПериода", '39991231235959');
	
	Если Неопределено <> Отборы Тогда
		ЗаполнитьЗначенияСвойств(ДоступныеПоляОтбора, Отборы);
	КонецЕсли;
	Возврат ДоступныеПоляОтбора;
КонецФункции

// Перечень (таблица) позиций и количеств к оформлению передач в разрезе измерений регистра резервов товаров организаций.
// Поля таблицы:
//	{Период, ДатаОформления, Отправитель, Получатель, Склад, АналитикаУчетаНоменклатуры,
//	ВидЗапасов, НомерГТД, ВидЗапасовПолучателя, НалогообложениеНДС, ТипЗапасов,
//	Потреблено}
Функция ТоварыКПередаче(Отборы = Неопределено) Экспорт
	ВсеОтборы = ОтборыТоваровКПередаче(Отборы);
	
	НачалоТоваровКПередаче = ПерваяПотребностьКПередаче(ВсеОтборы.ОрганизацияПолучатель, ВсеОтборы.Склад);
	
	Запрос = Новый Запрос(ТекстОстаткиКПередачеИПотреблению());
	Запрос.УстановитьПараметр("НачалоПериода",
		НачалоМесяца(?(ЗначениеЗаполнено(ВсеОтборы.НачалоПериода), ВсеОтборы.НачалоПериода, НачалоТоваровКПередаче)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ВсеОтборы.КонецПериода));
	Запрос.УстановитьПараметр("Склад", ВсеОтборы.Склад);
	Запрос.УстановитьПараметр("Организация", ВсеОтборы.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ВсеОтборы.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НалогообложениеНДС", ВсеОтборы.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ТипЗапасов", ВсеОтборы.ТипЗапасов);
	Запрос.УстановитьПараметр("ПоВсемТипамЗапасов", Не ЗначениеЗаполнено(ВсеОтборы.ТипЗапасов));
	Результат = Запрос.Выполнить();
	
	ТоварыКПередаче = Новый ТаблицаЗначений;
	Для Каждого Колонка Из Результат.Колонки Цикл
		Имя = Колонка.Имя;
		Если Имя = "ПериодПрихода" Или Имя = "Передано" Тогда
			Продолжить;
		КонецЕсли;
		ТоварыКПередаче.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Передано = 0.;
	Потребление = Неопределено;
	Измерение = Новый Структура(
		"НомерГТД, ВидЗапасовПолучателя, Отправитель, Склад, АналитикаУчетаНоменклатуры, Месяц, Потребления, НалогообложениеНДС");
	Измерение.Потребления = ТоварыКПередаче.СкопироватьКолонки();

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзмерениеИзменилось =
			Измерение.АналитикаУчетаНоменклатуры <> Выборка.АналитикаУчетаНоменклатуры
			Или Измерение.Склад <> Выборка.Склад
			Или Измерение.Отправитель <> Выборка.Отправитель
			Или Измерение.ВидЗапасовПолучателя <> Выборка.ВидЗапасовПолучателя
			Или Измерение.НомерГТД <> Выборка.НомерГТД
			Или Измерение.Месяц <> НачалоМесяца(Выборка.Период)
			Или Измерение.НалогообложениеНДС <> Выборка.НалогообложениеНДС;
		Если ИзмерениеИзменилось Тогда
			ДополнитьТоварыКПередаче(ТоварыКПередаче, Измерение.Потребления, Передано, ВсеОтборы);
			
			Передано = 0.;
			Потребление = Неопределено;
			ЗаполнитьЗначенияСвойств(Измерение, Выборка);
			Измерение.Месяц = НачалоМесяца(Выборка.Период);
			Измерение.Потребления.Очистить();
		КонецЕсли;
		
		Если Выборка.Потреблено > Передано Тогда
			Если Потребление = Неопределено Или Выборка.ДатаОформления > Потребление.ДатаОформления Тогда
				Потребление = Измерение.Потребления.Добавить();
				ЗаполнитьЗначенияСвойств(Потребление, Выборка);
				Потребление.Потреблено = 0.;
			КонецЕсли;
			Потребление.Потреблено = Потребление.Потреблено + Выборка.Потреблено - Передано;
			Потребление.Период = Макс(Потребление.Период, Выборка.Период);
			Передано = 0.;
		Иначе
			Передано = Передано + Выборка.Передано - Выборка.Потреблено;
		КонецЕсли;
		
	КонецЦикла;
	ДополнитьТоварыКПередаче(ТоварыКПередаче, Измерение.Потребления, Передано, ВсеОтборы);
	
	Возврат ТоварыКПередаче;
КонецФункции

#Область СверткаДвижений

// Обрабатывает событие ПриЗаписи набора записей регистра "Резервы товаров организаций" и при необходимости запускает свертку движений.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей.РезервыТоваровОрганизаций - записываемый набор записей
//
Процедура ПриЗаписиРегистраРезервыТоваровОрганизаций(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство(ПризнакЗаписиНабораПриСвертке()) Тогда
		Возврат; // запись сформирована механизмом свертки - больше с ней ничего делать не надо
	КонецЕсли;
	
	ПараметрыЗапускаСвертки = Новый Структура("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	
	СвернутьДанныеРегистра(ПараметрыЗапускаСвертки);
	
КонецПроцедуры

// Безусловный запуск процесса свертки движений регистра "Резервы товаров организаций" по всем организациям.
//
Процедура ВыполнитьСверткуРегистраРезервыТоваровОрганизаций() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыЗапускаСвертки = Новый Структура("ИгнорироватьЗапретСвертки", Истина);
		
		СвернутьДанныеРегистра(ПараметрыЗапускаСвертки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

// Функция выполняет взаимозачет строк временной таблицы ВТДвиженияДляСвертки и помещает результат в таблицу значений
// СтруктураДанныхСвертки.ТаблицаДвижений.
//
// Параметры:
//  СтруктураДанныхСвертки			 - Структура				 - структура с ключами:
//		* ТаблицаДвижений			 - ТаблицаЗначенией			 - таблица значений, в которую нужно поместить результат взаимозачета
//		* МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, в котором должны быть таблицы
//			ВТДвиженияДляСвертки и ВТНаборыПолей
// 
// Возвращаемое значение:
//  Массив - массив номеров наборов полей, для которых не удалось выполнить взаимозачет 
//
Функция ВыполнитьВзаимозачетВТДвиженийПоРезервам(СтруктураДанныхСвертки) Экспорт
	
	// Пронумеруем ВТНаборыПолей в колонке НомерНабораПолей. 
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", СтруктураДанныхСвертки.МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("ОграниченияВыборки", Новый Структура);
	ПараметрыРасчета.ОграниченияВыборки.Вставить("КоличествоСтрокВТЗ", МаксимальноеКоличествоСтрокВТаблицеЗначений());
	
	ПараметрыНумерации = УниверсальныеМеханизмыПартийИСебестоимости.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"Организация",
		"",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов",
		"НомерНабораПолей",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов");
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТНаборыПолей");

	// Выполним свертку записей - "взаимозачет" записей таблицы ВТДвиженияДляСвертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Месяц КАК Месяц,
	|	Т.Регистратор КАК Регистратор,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	Т.ЭтоСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерНабораПолей,
	|	Период,
	|	Регистратор,
	|	НалогообложениеНДС
	|ИТОГИ ПО
	|	НомерНабораПолей,
	|	Месяц";
	
	ВыборкаСторноНаборыПолей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Месяц КАК Месяц,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	0 КАК ПриоритетНалогообложения,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	НЕ Т.ЭтоСторно
	|	И Т.Месяц = &МесяцСторно
	|	И Поля.НомерНабораПолей = &НомерНабораПолей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	НезакрытыеЗаписиСторно = Новый Массив;
	
	Пока ВыборкаСторноНаборыПолей.Следующий() Цикл
		ВыборкаСторноМесяцы = ВыборкаСторноНаборыПолей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСторноМесяцы.Следующий() Цикл
			
			ТекущийНомерНабораПолей = ВыборкаСторноНаборыПолей.НомерНабораПолей;
			
			Запрос.УстановитьПараметр("НомерНабораПолей",  ТекущийНомерНабораПолей);
			Запрос.УстановитьПараметр("МесяцСторно", ВыборкаСторноМесяцы.Месяц);
			
			ТаблицаДляЗачета = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаДляЗачета.Количество() = 0 Тогда
				НезакрытыеЗаписиСторно.Добавить(ТекущийНомерНабораПолей);
				Продолжить; // для этого номера набора нечем зачитывать записи сторно
			КонецЕсли;
			
			ВыборкаСторноЗаписи = ВыборкаСторноМесяцы.Выбрать();
			
			Пока ВыборкаСторноЗаписи.Следующий() Цикл
				
				// Упорядочим ТаблицаДляЗачета по периоду и налогообложению.
				Для Каждого ТекСтр Из ТаблицаДляЗачета Цикл
					
					Если НЕ ЗначениеЗаполнено(ВыборкаСторноЗаписи.НалогообложениеНДС) Тогда
						
						Если ЗначениеЗаполнено(ТекСтр.НалогообложениеНДС) Тогда
							ТекСтр.ПриоритетНалогообложения = 0;
						Иначе
							ТекСтр.ПриоритетНалогообложения = 1;
						КонецЕсли;
						
					Иначе
						
						Если ВыборкаСторноЗаписи.НалогообложениеНДС = ТекСтр.НалогообложениеНДС Тогда
							ТекСтр.ПриоритетНалогообложения = 0;
						ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтр.НалогообложениеНДС) Тогда
							ТекСтр.ПриоритетНалогообложения = 1;
						Иначе
							ТекСтр.ПриоритетНалогообложения = 2;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаДляЗачета.Сортировать(
					"Период, ПриоритетНалогообложения, НалогообложениеНДС, Регистратор",
					Новый СравнениеЗначений);
				
				// Зачтем текущую запись сторно из ВыборкаСторноЗаписи записями из ТаблицаДляЗачета.
				КоличествоСторно = ВыборкаСторноЗаписи.Количество; // отрицательное
				
				Пока КоличествоСторно < 0 И ТаблицаДляЗачета.Количество() > 0 Цикл
					
					// Текущая запись сторно еще не закрыта и есть записи, которыми можно ее закрыть.
					КоличествоЗачета = Мин(-КоличествоСторно, ТаблицаДляЗачета[0].Количество); // положительное
					
					ДобавитьЗаписиДляСверткиВТаблицуЗначений(
						СтруктураДанныхСвертки,
						ВыборкаСторноЗаписи,
						ТаблицаДляЗачета,
						КоличествоЗачета);
					
					Если ТаблицаДляЗачета[0].Количество > КоличествоЗачета Тогда
						ТаблицаДляЗачета[0].Количество = ТаблицаДляЗачета[0].Количество - КоличествоЗачета;
					Иначе
						ТаблицаДляЗачета.Удалить(0);
					КонецЕсли;
					
					КоличествоСторно = КоличествоСторно + КоличествоЗачета;
					
				КонецЦикла;
				
				Если КоличествоСторно < 0 Тогда
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(НезакрытыеЗаписиСторно, ТекущийНомерНабораПолей);
				КонецЕсли;
				
				Если ТаблицаДляЗачета.Количество() = 0 Тогда
					Прервать; // для этого номера набора больше нечем зачитывать оставшиеся записи сторно
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла
	КонецЦикла;
	
	Возврат НезакрытыеЗаписиСторно;

КонецФункции

// Вспомогательная процедура свертки движений - переносит данные из таблицы значений во временную таблицу менеджера
// временных таблиц.
//
// Параметры:
//  СтруктураДанныхСвертки			 - Структура				 - структура с ключами:
//		* ТаблицаДвижений			 - ТаблицаЗначенией			 - таблица значений, которую требуется объединить
//																   с временной таблицей ВТТаблицаДвижений
//		* МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, в котором должны быть
//																   таблица ВТТаблицаДвижений
//
Процедура ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки) Экспорт
	
	Если СтруктураДанныхСвертки.ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Перенесем данные из таблицы значений ТаблицаДвижений во временную таблицу ВТТаблицаДвижений.
	ПоляТаблицы    = "%1НомерНабораПолей, %1Период, %1Регистратор, %1НалогообложениеНДС, %1Количество, %1РегистраторСторно";
	РесурсыТаблицы = "%1Количество";
	
	УниверсальныеМеханизмыПартийИСебестоимости.ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
		СтруктураДанныхСвертки.МенеджерВременныхТаблиц,
		"ВТТаблицаДвижений",
		СтруктураДанныхСвертки.ТаблицаДвижений,
		ПоляТаблицы,
		ПоляТаблицы,
		РесурсыТаблицы);
	
	СтруктураДанныхСвертки.ТаблицаДвижений.Очистить();
	
КонецПроцедуры

// Метод фонового задания свертки.
//
Процедура ВыполнитьФоновуюСверткуДвиженийПоРезервамТоваровОрганизаций() Экспорт
	
	ПараметрыЗадания = Новый Структура("КоличествоОшибок, КоличествоПовторов", 0, 0);
	
	// Свертку будем выполнять до тех пор, пока не наступит одно из условий:
	//	- все движения будут свернуты
	//	- будет достигнуто максимально возможное количество запусков, завершившихся ошибкой
	//	- будет достигнуто максимально возможное количество запусков (общее)
	ПерезапускатьСвертку = Истина;
	
	Пока ПерезапускатьСвертку Цикл
		
		Если ПараметрыЗадания.КоличествоОшибок >= МаксимальноеКоличествоОшибокФоновогоЗаданияСвертки() Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновая свертка движений по резервам товаров организаций остановлена.
					|Количество неудачных попыток: %1.'"),
				ПараметрыЗадания.КоличествоОшибок);
			
			СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
			
			ПерезапускатьСвертку = Ложь;
			
		ИначеЕсли ПараметрыЗадания.КоличествоПовторов >= МаксимальноеКоличествоПовторовФоновогоЗаданияСвертки() Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновая свертка движений по резервам товаров организаций остановлена.
					|Возможные причины: зацикливание свертки или некорректные исходные данные.
					|Количество повторных запусков: %1.'"),
				ПараметрыЗадания.КоличествоПовторов);
			
			СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
			
			ПерезапускатьСвертку = Ложь;
			
		КонецЕсли;
		
		Если ПерезапускатьСвертку Тогда
			
			Если ТребуетсяСвернутьДвиженияПоРезервамТоваровОрганизаций(ПараметрыЗадания) Тогда
			
				// Выполняем свертку движений.
				ЕстьОшибка = НЕ СвернутьДвиженияПоРезервамТоваровОрганизаций(ПараметрыЗадания);
			
				ПараметрыЗадания.КоличествоПовторов = ПараметрыЗадания.КоличествоПовторов + 1;
				ПараметрыЗадания.КоличествоОшибок 	= ПараметрыЗадания.КоличествоОшибок + ?(ЕстьОшибка, 1, 0);
				
			Иначе
				
				ПерезапускатьСвертку = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак наличия в ИБ записей сторно в приходных движениях (т.е. необходима свертка движений).
//
// Возвращаемое значение:
//	Булево - признак наличия записей сторно
//
Функция ЕстьЗаписиСторно() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Резервы.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Резервы.Организация КАК Организация,
	|	Резервы.ВидЗапасов КАК ВидЗапасов,
	|	Резервы.НомерГТД КАК НомерГТД,
	|	Резервы.ЭтоСторно КАК ЭтоСторно,
	|	Резервы.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций.Остатки(, ЭтоСторно = ИСТИНА) КАК Резервы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Создает служебные таблицы ВТДвиженияДляСвертки и ВТНаборыПолей.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, в котором нужно создать таблицу.
//
Процедура СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Сформируем таблицу движений ВТДвиженияДляСвертки, в которой будут содержаться как записи сторно, так и записи для зачета сторно.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СлужебноеВидДвиженияПриход,
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц,
	|	Т.Регистратор,
	|	Т.Период,
	|	Т.Организация КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.НомерГТД КАК НомерГТД,
	|	Т.КорОрганизация КАК КорОрганизация,
	|	Т.КорВидЗапасов КАК КорВидЗапасов,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Т.ЭтоСторно КАК ЭтоСторно,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТДвиженияДляСвертки
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
	|ГДЕ
	|	Т.Активность
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ),
	|	Т.Регистратор,
	|	Т.Период,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.КорОрганизация,
	|	Т.КорВидЗапасов,
	|	Т.НалогообложениеНДС,
	|	Т.ЭтоСторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СлужебноеВидДвиженияПриход,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД,
	|	КорОрганизация,
	|	КорВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК НомерНабораПолей,
	|	Т.СлужебноеВидДвиженияПриход,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.КорОрганизация,
	|	Т.КорВидЗапасов
	|ПОМЕСТИТЬ ВТНаборыПолей
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|ГДЕ
	|	Т.ЭтоСторно
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает служебную структуру для свертки сторно.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, который будет помещен в струтуру.
// 
// Возвращаемое значение:
//  Структура - Структура с ключами "МенеджерВременныхТаблиц" и "ТаблицаДвижений".
//
Функция СтруктураДанныхСвертки(МенеджерВременныхТаблиц) Экспорт
	
	Перем СтруктураДанныхСвертки;
	
	// Подготовим структуру данных для выполнения свертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	0 КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Т.Количество КАК Количество,
	|	Т.Регистратор КАК РегистраторСторно
	|ПОМЕСТИТЬ ВТТаблицаДвижений
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДвижений.НомерНабораПолей,
	|	ВТТаблицаДвижений.Период,
	|	ВТТаблицаДвижений.Регистратор,
	|	ВТТаблицаДвижений.НалогообложениеНДС,
	|	ВТТаблицаДвижений.Количество,
	|	ВТТаблицаДвижений.РегистраторСторно
	|ИЗ
	|	ВТТаблицаДвижений КАК ВТТаблицаДвижений";
	
	СтруктураДанныхСвертки = Новый Структура;
	СтруктураДанныхСвертки.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	СтруктураДанныхСвертки.Вставить("ТаблицаДвижений", 		   Запрос.Выполнить().Выгрузить());
	Возврат СтруктураДанныхСвертки;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Метод возвращает дату первой потребности к передаче товаров.
Функция ПерваяПотребностьКПередаче(Организация, Склад)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТТ.Период КАК Период,
		|	ТТ.АналитикаУчетаНоменклатуры,
		|	ТТ.Организация,
		|	ТТ.ВидЗапасов,
		|	ТТ.НомерГТД,
		|	ТТ.КоличествоПриход,
		|	ТТ.КоличествоРасход
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций.Обороты( , , МЕСЯЦ,
		|		&ОрганизацияПолучатель В (НЕОПРЕДЕЛЕНО, Организация)
		|	) КАК ТТ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.КлючАналитики = ТТ.АналитикаУчетаНоменклатуры
		|ГДЕ
		|	ТТ.КоличествоПриход > ТТ.КоличествоРасход
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитика.Склад КАК Справочник.Склады), ВЫРАЗИТЬ(Аналитика.Склад КАК Справочник.СтруктураПредприятия))
		|УПОРЯДОЧИТЬ ПО
		|	ТТ.Период
		|");
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Период, '00010101');
КонецФункции

// Текст запроса остатков к передаче и потреблению на каждый день.
// Поля результата запроса:
//		{Период, ДатаОформления, Отправитель, Получатель, Склад, АналитикаУчетаНоменклатуры,
//		ВидЗапасов, НомерГТД, ВидЗапасовПолучателя, НалогообложениеНДС, ТипЗапасов,
//		Передано, Потреблено}
// Упорядоченность:
//		{Получатель, ВидЗапасовПолучателя, Отправитель, АналитикаУчетаНоменклатуры, НомерГТД, Период}
Функция ТекстОстаткиКПередачеИПотреблению()
	Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Расходы.Период, ДЕНЬ) КАК ПериодРасхода,
		|	Расходы.АналитикаУчетаНоменклатуры,
		|	Расходы.Организация,
		|	Расходы.ВидЗапасов,
		|	Расходы.НомерГТД,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(Приходы.Период, ДЕНЬ)) КАК ПериодПрихода
		|ПОМЕСТИТЬ
		|	Даты
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК Расходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовПродавцов
		|		ПО ВидыЗапасовПродавцов.Ссылка = Расходы.ВидЗапасов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
		|		ПО Аналитики.КлючАналитики = Расходы.АналитикаУчетаНоменклатуры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК Приходы
		|		ПО Приходы.АналитикаУчетаНоменклатуры = Расходы.АналитикаУчетаНоменклатуры
		|		И Приходы.Период <= КОНЕЦПЕРИОДА(Расходы.Период, ДЕНЬ)
		|		И Приходы.Организация = Расходы.КорОрганизация
		|		И Приходы.ВидЗапасов = Расходы.КорВидЗапасов
		|		И Приходы.НомерГТД = Расходы.НомерГТД
		|ГДЕ
		|	Расходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Приходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИЛИ Приходы.Количество < 0.)
		|	И &Организация В (НЕОПРЕДЕЛЕНО, Расходы.КорОрганизация)
		|	И &ОрганизацияПолучатель В (НЕОПРЕДЕЛЕНО, Расходы.Организация)
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.Склады), ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.СтруктураПредприятия))
		|	И (&НалогообложениеНДС В (НЕОПРЕДЕЛЕНО, Расходы.НалогообложениеНДС)
		|		ИЛИ Расходы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
		|	И (ВидыЗапасовПродавцов.ТипЗапасов В (&ТипЗапасов) ИЛИ &ПоВсемТипамЗапасов)
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Расходы.Период, ДЕНЬ),
		|	Расходы.АналитикаУчетаНоменклатуры,
		|	Расходы.Организация,
		|	Расходы.ВидЗапасов,
		|	Расходы.НомерГТД
		|;
		|/////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДД.Период,
		|	(ВЫБОР
		|		КОГДА ЕСТЬNULL(Даты.ПериодПрихода, &НачалоПериода) <= НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ) ТОГДА НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ)
		|		КОГДА Даты.ПериодПрихода = ДД.Период ТОГДА ДД.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Даты.ПериодПрихода, ДЕНЬ, 1) КОНЕЦ) КАК ДатаОформления,
		|	ВЫБОР КОГДА ДД.КорОрганизация = ДД.Организация
		|		И ДД.КорВидЗапасов.ВладелецТовара <> НЕОПРЕДЕЛЕНО
		|		ТОГДА ДД.КорВидЗапасов.ВладелецТовара
		|		ИНАЧЕ ДД.КорОрганизация
		|	КОНЕЦ КАК Отправитель,
		|	ДД.Организация КАК Получатель,
		|	Аналитики.Склад,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ДД.КорВидЗапасов КАК ВидЗапасов,
		|	ДД.НомерГТД,
		|	ДД.ВидЗапасов КАК ВидЗапасовПолучателя,
		|	ДД.НалогообложениеНДС,
		|	ВидыЗапасовПродавцов.ТипЗапасов,
		|	СУММА(ВЫБОР
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Количество < 0
		|			ТОГДА 0 - ДД.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Передано,
		|	СУММА(ВЫБОР
		|		КОГДА ДД.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДД.Количество > 0
		|			ТОГДА ДД.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Потреблено
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК ДД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовПродавцов
		|		ПО ВидыЗапасовПродавцов.Ссылка = ДД.ВидЗапасов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
		|		ПО Аналитики.КлючАналитики = ДД.АналитикаУчетаНоменклатуры
		|	ЛЕВОЕ СОЕДИНЕНИЕ Даты КАК Даты
		|		ПО Даты.ПериодРасхода = ДД.Период
		|		И Даты.АналитикаУчетаНоменклатуры = ДД.АналитикаУчетаНоменклатуры
		|		И Даты.Организация = ДД.Организация
		|		И Даты.ВидЗапасов = ДД.ВидЗапасов
		|		И Даты.НомерГТД = ДД.НомерГТД
		|ГДЕ
		|	ДД.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И &ОрганизацияПолучатель В (НЕОПРЕДЕЛЕНО, ДД.Организация)
		|	И &Организация В (НЕОПРЕДЕЛЕНО, ДД.КорОрганизация)
		|	И &Склад В (НЕОПРЕДЕЛЕНО, ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.Склады), ВЫРАЗИТЬ(Аналитики.Склад КАК Справочник.СтруктураПредприятия))
		|	И (&НалогообложениеНДС В (НЕОПРЕДЕЛЕНО, ДД.НалогообложениеНДС)
		|		ИЛИ ДД.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
		|	И (ВидыЗапасовПродавцов.ТипЗапасов В (&ТипЗапасов) ИЛИ &ПоВсемТипамЗапасов)
		|СГРУППИРОВАТЬ ПО
		|	ДД.Период,
		|	(ВЫБОР
		|		КОГДА ЕСТЬNULL(Даты.ПериодПрихода, &НачалоПериода) <= НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ) ТОГДА НАЧАЛОПЕРИОДА(ДД.Период, МЕСЯЦ)
		|		КОГДА Даты.ПериодПрихода = ДД.Период ТОГДА ДД.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(Даты.ПериодПрихода, ДЕНЬ, 1) КОНЕЦ),
		|	ВЫБОР КОГДА ДД.КорОрганизация = ДД.Организация
		|		И ДД.КорВидЗапасов.ВладелецТовара <> НЕОПРЕДЕЛЕНО
		|		ТОГДА ДД.КорВидЗапасов.ВладелецТовара
		|		ИНАЧЕ ДД.КорОрганизация
		|	КОНЕЦ,
		|	ДД.КорОрганизация,
		|	ДД.Организация,
		|	Аналитики.Склад,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ДД.КорВидЗапасов,
		|	ДД.НомерГТД,
		|	ДД.ВидЗапасов,
		|	ВидыЗапасовПродавцов.ТипЗапасов,
		|	ДД.НалогообложениеНДС
		|ИМЕЮЩИЕ
		|	СУММА(ДД.Количество) <> 0
		|УПОРЯДОЧИТЬ ПО
		|	ДД.Организация,
		|	ДД.ВидЗапасов,
		|	ДД.КорОрганизация,
		|	ДД.АналитикаУчетаНоменклатуры,
		|	ДД.НомерГТД,
		|	ДД.Период
		|";
КонецФункции

Процедура ДополнитьТоварыКПередаче(ТоварыКПередаче, Потребления, Передано, ВсеОтборы)
	Для Каждого Потребление Из Потребления Цикл
		Если Передано > 0. Тогда
			Потреблено = Мин(Потребление.Потреблено, Передано);
			Потребление.Потреблено = Потребление.Потреблено - Потреблено;
			Передано = Передано - Потреблено;
		КонецЕсли;
		Если Потребление.Потреблено > 0.
			И Потребление.ДатаОформления >= ВсеОтборы.НачалоПериода
			И Потребление.ДатаОформления <= ВсеОтборы.КонецПериода
		Тогда
			ТоварКПередаче = ТоварыКПередаче.Добавить();
			ЗаполнитьЗначенияСвойств(ТоварКПередаче, Потребление);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область СверткаДвижений

// Запускает процесс свертки движений регистра "Резервы товаров организаций".
//
// Параметры:
//	ПараметрыЗапускаСвертки - Структура - параметры запуска процедуры
//		- Регистратор - ДокументСсылка - документ, при проведении которого запускается свертка
//		- ИгнорироватьЗапретСвертки - Булево - запускать независимо от включения режима отладки
//
// Возвращаемое значение:
//	Булево - признак запуска фонового задания свертки (т.е. есть данные для свертки)
//
Функция СвернутьДанныеРегистра(ПараметрыЗапускаСвертки = Неопределено)
	
	ЗапущеныЗаданияСвертки    = Ложь;
	РегистраторЗапуска 		  = Неопределено;
	ИгнорироватьЗапретСвертки = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрыЗапускаСвертки) Тогда
		
		ПараметрыЗапускаСвертки.Свойство("Регистратор", 			  РегистраторЗапуска);
		ПараметрыЗапускаСвертки.Свойство("ИгнорироватьЗапретСвертки", ИгнорироватьЗапретСвертки);
		
		ИгнорироватьЗапретСвертки = ?(ИгнорироватьЗапретСвертки = Неопределено, Ложь, ИгнорироватьЗапретСвертки);
		
	КонецЕсли;
	
	Если НЕ ИгнорироватьЗапретСвертки И ОбщегоНазначенияУТ.РежимОтладки() Тогда
		Возврат ЗапущеныЗаданияСвертки;
	КонецЕсли;
	
	// Проверим наличие записей сторно в приходных движениях.
	// Если таких записей нет, то ничего сворачивать не требуется.
	Если НЕ ЕстьЗаписиСторно() Тогда
		Возврат ЗапущеныЗаданияСвертки; // нет записей сторно
	КонецЕсли;
	
	ЗапуститьСвертку = Ложь;
	
	// Проверим, нет уже запущенного фонового задания свертки движений.
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		Если НЕ Константы.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций.Получить() Тогда
			
			Константы.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций.Установить(Истина);
			
			ЗапуститьСвертку = Истина;
			
		КонецЕсли;
		
	Исключение
		
		Если ЗначениеЗаполнено(РегистраторЗапуска) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить проведение документа ""%1"" по причине ""%2"".'"),
				РегистраторЗапуска,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось запустить задание свертки движений по резервам товаров организаций по причине ""%1"".'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		СообщитьОбОшибкеСверткиРезервов(ТекстСообщения, РегистраторЗапуска);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	Если ЗапуститьСвертку Тогда
		
		ЗапущеныЗаданияСвертки = Истина;
		
		// Проверим, что нет уже запущенного фонового задания свертки движений.
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", 		"СверткаДвиженийПоРезервамТоваровОрганизаций");
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() > 0 Тогда
			Возврат ЗапущеныЗаданияСвертки;
		КонецЕсли;
		
		// Запустим фоновое задание свертки движений.
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить("РегистрыНакопления.РезервыТоваровОрганизаций.ВыполнитьФоновуюСверткуДвиженийПоРезервамТоваровОрганизаций");
		
		ФоновыеЗадания.Выполнить(
			"ОбщегоНазначения.ВыполнитьМетодКонфигурации",
			ПараметрыЗадания,
			Отбор.Ключ,
			НСтр("ru = 'Свертка движений по резервам товаров организаций'"));
			
	КонецЕсли;
	
	Возврат ЗапущеныЗаданияСвертки;
	
КонецФункции

// Проверяет наличие приходных записей сторно - если они есть, то требуется свертка.
//
Функция ТребуетсяСвернутьДвиженияПоРезервамТоваровОрганизаций(ПараметрыЗадания)
	
	ТребуетсяСвертка = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		// Проверим наличие записей сторно в приходных движениях.
		// Если таких записей нет, то ничего сворачивать не требуется.
		Если НЕ ЕстьЗаписиСторно() Тогда
			
			ТребуетсяСвертка = Ложь;
			
			УстановитьПривилегированныйРежим(Истина);
			Константы.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций.Установить(Ложь);
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПараметрыЗадания.КоличествоОшибок = ПараметрыЗадания.КоличествоОшибок + 1;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить свертку движений по резервам товаров организаций по причине ""%1"".'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ТребуетсяСвертка;
	
КонецФункции

// Основная процедура свертки движений.
//
Функция СвернутьДвиженияПоРезервамТоваровОрганизаций(ПараметрыЗадания) 
	
	ЕстьОшибка = Ложь;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСторно
	|ИЗ
	|	ВТДвиженияДляСвертки КАК ВТДвиженияДляСвертки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина; // нет записей сторно, завершено успешно
	КонецЕсли;
	
	СтруктураДанныхСвертки = СтруктураДанныхСвертки(МенеджерВременныхТаблиц);
	НезакрытыеЗаписиСторно = ВыполнитьВзаимозачетВТДвиженийПоРезервам(СтруктураДанныхСвертки);
	
	Если НезакрытыеЗаписиСторно.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить свертку всех записей сторно резервов товаров организаций.'");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Организация.Наименование КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры.Наименование КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов.Наименование КАК ВидЗапасов,
		|	Т.НомерГТД КАК НомерГТД,
		|	Т.КорОрганизация.Наименование КАК КорОрганизация,
		|	Т.КорВидЗапасов.Наименование КАК КорВидЗапасов
		|ИЗ
		|	ВТНаборыПолей КАК Т
		|ГДЕ
		|	Т.НомерНабораПолей В(&НезакрытыеЗаписиСторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	АналитикаУчетаНоменклатуры,
		|	ВидЗапасов";
		
		Запрос.УстановитьПараметр("НезакрытыеЗаписиСторно", НезакрытыеЗаписиСторно);
		
		Выборка = Запрос.Выполнить().Выбрать();
		НомерНабора = 0;
		
		Пока Выборка.Следующий() Цикл
			
			НомерНабора = НомерНабора + 1;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1: организация: ""%2"",  номенклатура: ""%3"",  вид запасов: ""%4"",  номер ГТД: ""%5"",  кор. организация: ""%6"",  кор. вид запасов: ""%7""'"),
					СокрЛП(НомерНабора),
					СокрЛП(Выборка.Организация),
					СокрЛП(Выборка.АналитикаУчетаНоменклатуры),
					СокрЛП(Выборка.ВидЗапасов),
					СокрЛП(Выборка.НомерГТД),
					СокрЛП(Выборка.КорОрганизация),
					СокрЛП(Выборка.КорВидЗапасов));
			
		КонецЦикла;
		
		ЕстьОшибка = Истина;
		СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
		
	КонецЕсли;
	
	ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки); // помещаем все записи в ВТТаблицаДвижений
	ЗаписаноУспешно = ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки);
	
	СтруктураДанныхСвертки.МенеджерВременныхТаблиц.Закрыть();
	СтруктураДанныхСвертки = Неопределено;
	
	Возврат ЗаписаноУспешно И НЕ ЕстьОшибка;
	
КонецФункции

// Вспомогательная процедура свертки движений - добавляет записи зачета сторно в таблицу значений.
//
Процедура ДобавитьЗаписиДляСверткиВТаблицуЗначений(СтруктураДанныхСвертки, ЗаписьСторно, ТаблицаДляЗачета, Количество)
	
	// Создадим запись для уменьшения количества в записи сторно.
	НоваяЗапись = СтруктураДанныхСвертки.ТаблицаДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьСторно);
	НоваяЗапись.Количество = Количество;
	
	// Создадим запись для уменьшения количества в зачитываемой записи.
	НоваяЗапись = СтруктураДанныхСвертки.ТаблицаДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ТаблицаДляЗачета[0]);
	НоваяЗапись.Количество = -Количество;
	НоваяЗапись.РегистраторСторно = ЗаписьСторно.Регистратор; // запомним документ сторно, который был зачтен
	
	// Если таблица движений достигла большого размера - перенесем из нее данные во временную таблицу.
	Если СтруктураДанныхСвертки.ТаблицаДвижений.Количество() >= МаксимальноеКоличествоСтрокВТаблицеЗначений() Тогда
		ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки);
	КонецЕсли;
	
КонецПроцедуры

// Основная процедура записи движений.
//
Функция ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки)
	
	ЕстьОшибка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	
	// Выберем все регистраторы, по которым выполнялся зачет сторно.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.РегистраторСторно КАК Регистратор
	|ИЗ
	|	ВТТаблицаДвижений КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	ВыборкаРегистраторы = Результат.Выбрать();
	
	Пока ВыборкаРегистраторы.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Регистратор", ВыборкаРегистраторы.Регистратор);
		
		// Выберем очередную порцию регистраторов, по которым будет выполняться запись движений.
		// В одной транзакции будет выполнена запись
		//	- всех движений текущего регистратора
		//	- зачтенных им движений сторно других регистраторов
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.Период КАК Период,
		|	Движения.Регистратор КАК Регистратор,
		|	Поля.СлужебноеВидДвиженияПриход КАК СлужебноеВидДвиженияПриход,
		|	Поля.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Поля.Организация КАК Организация,
		|	Поля.ВидЗапасов КАК ВидЗапасов,
		|	Поля.НомерГТД КАК НомерГТД,
		|	Поля.КорОрганизация КАК КорОрганизация,
		|	Поля.КорВидЗапасов КАК КорВидЗапасов,
		|	Движения.НалогообложениеНДС КАК НалогообложениеНДС,
		|	Движения.Количество КАК Количество,
		|	Движения.НомерНабораПолей КАК НомерНабораПолей,
		|	Движения.РегистраторСторно КАК РегистраторСторно
		|ПОМЕСТИТЬ ВТКорректирующиеДвижения
		|ИЗ
		|	ВТТаблицаДвижений КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
		|		ПО Движения.НомерНабораПолей = Поля.НомерНабораПолей
		|ГДЕ
		|	(Движения.Регистратор = &Регистратор
		|				И Движения.Регистратор = НЕОПРЕДЕЛЕНО
		|			ИЛИ Движения.РегистраторСторно = &Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Регистратор КАК Регистратор,
		|	МИНИМУМ(ВложенныйЗапрос.ПриоритетЗаписи) КАК ПриоритетЗаписи
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТКорректирующиеДвижения.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА ВТКорректирующиеДвижения.Количество > 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ПриоритетЗаписи
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК ВТКорректирующиеДвижения
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ВТКорректирующиеДвижения.РегистраторСторно,
		|		3
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК ВТКорректирующиеДвижения
		|	ГДЕ
		|		ВТКорректирующиеДвижения.РегистраторСторно <> НЕОПРЕДЕЛЕНО) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ПриоритетЗаписи,
		|	Регистратор";
		
		ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРегистраторов.Количество() = 0 Тогда
			ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
			Продолжить; // движения уже были записаны ранее
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Заблокируем регистраторы для записи.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервыТоваровОрганизаций.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаРегистраторов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();		
			
			// Проверим, что в движениях регистраторов не было изменений за время выполнения расчета.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТТекущиеДвиженияДляСвертки
			|ИЗ
			|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО Т.Регистратор = Регистраторы.Регистратор
			|ГДЕ
			|	Т.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(Т.Источник) КАК Источник,
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС,
			|	СУММА(Т.Количество) КАК Количество
			|ИЗ
			|	(ВЫБРАТЬ
			|		1 КАК Источник,
			|		Т.Период КАК Период,
			|		Т.Регистратор КАК Регистратор,
			|		Т.ВидДвижения КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|		Т.Организация КАК Организация,
			|		Т.ВидЗапасов КАК ВидЗапасов,
			|		Т.НомерГТД КАК НомерГТД,
			|		Т.КорОрганизация КАК КорОрганизация,
			|		Т.КорВидЗапасов КАК КорВидЗапасов,
			|		Т.НалогообложениеНДС КАК НалогообложениеНДС,
			|		Т.Количество КАК Количество
			|	ИЗ
			|		ВТТекущиеДвиженияДляСвертки КАК Т
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		-1,
			|		Т.Период,
			|		Т.Регистратор,
			|		ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход
			|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		КОНЕЦ,
			|		Т.АналитикаУчетаНоменклатуры,
			|		Т.Организация,
			|		Т.ВидЗапасов,
			|		Т.НомерГТД,
			|		Т.КорОрганизация,
			|		Т.КорВидЗапасов,
			|		Т.НалогообложениеНДС,
			|		-Т.Количество
			|	ИЗ
			|		ВТДвиженияДляСвертки КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|			ПО Т.Регистратор = Регистраторы.Регистратор) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.Источник) = 0 И
			|	СУММА(Т.Количество) <> 0";
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ОтменитьТранзакцию();
				
				Блокировка = Неопределено;
				
				ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
				
				Продолжить; // текущие движения регистраторов изменились относительно того, какие они были в начале расчета
				
			КонецЕсли;
			
			// Сформируем новые движения по регистраторам:
			// движения регистраторов из ИБ - корректировочные движения
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТНовыеДвижения
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Период КАК Период,
			|		Т.Регистратор КАК Регистратор,
			|		Т.ВидДвижения КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|		Т.Организация КАК Организация,
			|		Т.ВидЗапасов КАК ВидЗапасов,
			|		Т.НомерГТД КАК НомерГТД,
			|		Т.КорОрганизация КАК КорОрганизация,
			|		Т.КорВидЗапасов КАК КорВидЗапасов,
			|		Т.НалогообложениеНДС КАК НалогообложениеНДС,
			|		Т.Количество КАК Количество
			|	ИЗ
			|		РегистрНакопления.РезервыТоваровОрганизаций КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|			ПО Т.Регистратор = Регистраторы.Регистратор
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Период,
			|		Т.Регистратор,
			|		ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход
			|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		КОНЕЦ КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры,
			|		Т.Организация,
			|		Т.ВидЗапасов,
			|		Т.НомерГТД,
			|		Т.КорОрганизация,
			|		Т.КорВидЗапасов,
			|		Т.НалогообложениеНДС,
			|		Т.Количество
			|	ИЗ
			|		ВТКорректирующиеДвижения КАК Т) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	Т.НалогообложениеНДС
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.Количество) <> 0";
			
			УстановитьПривилегированныйРежим(Истина);
			Запрос.Выполнить(); // создание ВТНовыеДвижения
			УстановитьПривилегированныйРежим(Ложь);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период КАК Период,
			|	Т.Регистратор КАК Регистратор,
			|	Т.ВидДвижения КАК ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|	Т.Организация КАК Организация,
			|	Т.ВидЗапасов КАК ВидЗапасов,
			|	Т.НомерГТД КАК НомерГТД,
			|	Т.КорОрганизация КАК КорОрганизация,
			|	Т.КорВидЗапасов КАК КорВидЗапасов,
			|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
			|	Т.Количество КАК Количество,
			|	Т.Количество < 0 КАК ЭтоСторно
			|ИЗ
			|	ВТНовыеДвижения КАК Т
			|ГДЕ
			|	Т.Регистратор = &РегистраторДляЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	ВидДвижения,
			|	АналитикаУчетаНоменклатуры,
			|	Организация,
			|	ВидЗапасов,
			|	НомерГТД,
			|	КорОрганизация,
			|	КорВидЗапасов,
			|	НалогообложениеНДС";
			
			// Запишем новые движения регистраторов.
			Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
				
				Запрос.УстановитьПараметр("РегистраторДляЗаписи", ТекСтр.Регистратор);
				
				НаборЗаписейРезервов = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписейРезервов.ДополнительныеСвойства.Вставить(ПризнакЗаписиНабораПриСвертке(), Истина);
				
				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
				
				НаборЗаписейРезервов.ДополнительныеСвойства.Вставить("ДляПроведения", 
					Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
					
				НаборЗаписейРезервов.Отбор.Регистратор.Установить(ТекСтр.Регистратор);
				
				НаборЗаписейРезервов.Загрузить(Запрос.Выполнить().Выгрузить());
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписейРезервов.Записать(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЦикла;
			
			Блокировка = Неопределено;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЕстьОшибка = Истина;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить запись движений по резервам товаров организаций по причине ""%1"".'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
			
		КонецПопытки;
		
		ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
		
	КонецЦикла;
	
	// Очистим очередь для свертки движений.
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ВыполняетсяСверткаДвиженийПоРезервамТоваровОрганизаций.Установить(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЕстьОшибка = Истина;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить свертку движений по резервам товаров организаций по причине ""%1"".'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		СообщитьОбОшибкеСверткиРезервов(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат НЕ ЕстьОшибка;
	
КонецФункции

// Вспомогательная процедура записи движений - при окончании записи очередной порции регистраторов выполняет необходимые действия с временными таблицами.
//
Процедура ЗакончитьЗаписьСвернутыхРегистраторов(Запрос)
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТРегистраторы") > 0 Тогда
		
		// Скорректировать ВТДвиженияДляСвертки и ВТТаблицаДвижений на ВТКорректирующиеДвижения: "+" и "-" соответственно
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Организация,
		|	Т.ВидЗапасов,
		|	Т.НомерГТД,
		|	Т.КорОрганизация,
		|	Т.КорВидЗапасов,
		|	Т.НалогообложениеНДС,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТДвиженияДляСвертки_Временная
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Период КАК Период,
		|		Т.Регистратор КАК Регистратор,
		|		Т.СлужебноеВидДвиженияПриход КАК СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.Организация КАК Организация,
		|		Т.ВидЗапасов КАК ВидЗапасов,
		|		Т.НомерГТД КАК НомерГТД,
		|		Т.КорОрганизация КАК КорОрганизация,
		|		Т.КорВидЗапасов КАК КорВидЗапасов,
		|		Т.НалогообложениеНДС КАК НалогообложениеНДС,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		ВТДвиженияДляСвертки КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Период,
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры,
		|		Т.Организация,
		|		Т.ВидЗапасов,
		|		Т.НомерГТД,
		|		Т.КорОрганизация,
		|		Т.КорВидЗапасов,
		|		Т.НалогообложениеНДС,
		|		Т.Количество
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК Т) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Организация,
		|	Т.ВидЗапасов,
		|	Т.НомерГТД,
		|	Т.КорОрганизация,
		|	Т.КорВидЗапасов,
		|	Т.НалогообложениеНДС
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДвиженияДляСвертки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ ВТДвиженияДляСвертки
		|ИЗ
		|	ВТДвиженияДляСвертки_Временная КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДвиженияДляСвертки_Временная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.РегистраторСторно,
		|	Т.НомерНабораПолей,
		|	Т.НалогообложениеНДС,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаДвижений_Временная
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Период КАК Период,
		|		Т.Регистратор КАК Регистратор,
		|		Т.РегистраторСторно КАК РегистраторСторно,
		|		Т.НомерНабораПолей КАК НомерНабораПолей,
		|		Т.НалогообложениеНДС КАК НалогообложениеНДС,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		ВТТаблицаДвижений КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Период,
		|		Т.Регистратор,
		|		Т.РегистраторСторно,
		|		Т.НомерНабораПолей,
		|		Т.НалогообложениеНДС,
		|		-Т.Количество
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК Т) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.РегистраторСторно,
		|	Т.НомерНабораПолей,
		|	Т.НалогообложениеНДС
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ ВТТаблицаДвижений
		|ИЗ
		|	ВТТаблицаДвижений_Временная КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.НомерНабораПолей,
		|	Т.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДвижений_Временная
		|";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТКорректирующиеНаборыПолей, ВТКорректирующиеДвижения, ВТРегистраторы, ВТТекущиеДвиженияДляСвертки, ВТНовыеДвижения");
	
КонецПроцедуры

// Выводит сообщение об ошибке свертки в журнал регистрации.
//
Процедура СообщитьОбОшибкеСверткиРезервов(ТекстСообщения, Регистратор = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Свертка движений по резервам товаров организаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Регистратор.Метаданные(),
			Регистратор,
			ТекстСообщения);
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает максимально допустимое количество запусков свертки, заканчивающихся ошибкой.
//
Функция МаксимальноеКоличествоОшибокФоновогоЗаданияСвертки()
	Возврат 3;
КонецФункции

// Возвращает максимально допустимое количество запусков свертки (общее).
//
Функция МаксимальноеКоличествоПовторовФоновогоЗаданияСвертки()
	Возврат 10;
КонецФункции

// Возвращает максимально допустимое количество строк в таблице значений. При превышении этого количества таблица значений кэшируется во временную таблицу.
//
Функция МаксимальноеКоличествоСтрокВТаблицеЗначений()
	Возврат 100000;
КонецФункции

// Возвращает имя дополнительного свойства - признака того, что запись выполняется механизмом свертки.
//
Функция ПризнакЗаписиНабораПриСвертке()
	Возврат "ВыполняетсяСверткаДвиженийРезервовТоваровОрганизаций";
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = Истина;
	
	УдалитьЛишниеСторно(ВидДвиженияНакопления.Приход);
	УдалитьЛишниеСторно(ВидДвиженияНакопления.Расход);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСторно
	|ИЗ
	|	ВТДвиженияДляСвертки КАК ВТДвиженияДляСвертки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет записей сторно, завершено успешно
	КонецЕсли;
	
	СтруктураДанныхСвертки = СтруктураДанныхСвертки(МенеджерВременныхТаблиц);
	НезакрытыеЗаписиСторно = ВыполнитьВзаимозачетВТДвиженийПоРезервам_Устаревшая(СтруктураДанныхСвертки);
	
	Если НезакрытыеЗаписиСторно.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить свертку всех записей сторно резервов товаров организаций.'");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Организация.Наименование КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры.Наименование КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов.Наименование КАК ВидЗапасов,
		|	Т.НомерГТД КАК НомерГТД,
		|	Т.КорОрганизация.Наименование КАК КорОрганизация,
		|	Т.КорВидЗапасов.Наименование КАК КорВидЗапасов
		|ИЗ
		|	ВТНаборыПолей КАК Т
		|ГДЕ
		|	Т.НомерНабораПолей В(&НезакрытыеЗаписиСторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	АналитикаУчетаНоменклатуры,
		|	ВидЗапасов";
		
		Запрос.УстановитьПараметр("НезакрытыеЗаписиСторно", НезакрытыеЗаписиСторно);
		
		Выборка = Запрос.Выполнить().Выбрать();
		НомерНабора = 0;
		
		Пока Выборка.Следующий() Цикл
			
			НомерНабора = НомерНабора + 1;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1: организация: ""%2"",  номенклатура: ""%3"",  вид запасов: ""%4"",  номер ГТД: ""%5"",  кор. организация: ""%6"",  кор. вид запасов: ""%7""'"),
					СокрЛП(НомерНабора),
					СокрЛП(Выборка.Организация),
					СокрЛП(Выборка.АналитикаУчетаНоменклатуры),
					СокрЛП(Выборка.ВидЗапасов),
					СокрЛП(Выборка.НомерГТД),
					СокрЛП(Выборка.КорОрганизация),
					СокрЛП(Выборка.КорВидЗапасов));
			
		КонецЦикла;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки);
	ЗаписаноУспешно = ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки);
	
	Если Не ЗаписаноУспешно Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запись движений по резервам товаров организаций, см. журнал регистрации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = Ложь;
	 	
КонецПроцедуры

// Устаревший вариант функции ВыполнитьВзаимозачетВТДвиженийПоРезервам. Требуется для перехода на новую версию ИБ.
Функция ВыполнитьВзаимозачетВТДвиженийПоРезервам_Устаревшая(СтруктураДанныхСвертки)
	
	// Пронумеруем ВТНаборыПолей в колонке НомерНабораПолей. 
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", СтруктураДанныхСвертки.МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("ОграниченияВыборки", Новый Структура);
	ПараметрыРасчета.ОграниченияВыборки.Вставить("КоличествоСтрокВТЗ", МаксимальноеКоличествоСтрокВТаблицеЗначений());
	
	ПараметрыНумерации = УниверсальныеМеханизмыПартийИСебестоимости.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"Организация",
		"",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов",
		"НомерНабораПолей",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов");
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТНаборыПолей");

	// Выполним свертку записей - "взаимозачет" записей таблицы ВТДвиженияДляСвертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Месяц КАК Месяц,
	|	Т.Регистратор КАК Регистратор,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	Т.ЭтоСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерНабораПолей,
	|	Период,
	|	Регистратор,
	|	НалогообложениеНДС
	|ИТОГИ
	|	МИНИМУМ(Месяц)
	|ПО
	|	НомерНабораПолей";
	
	ВыборкаСторноНаборыПолей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Месяц КАК Месяц,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.НалогообложениеНДС КАК НалогообложениеНДС,
	|	0 КАК ПриоритетНалогообложения,
	|	Т.Количество КАК Количество,
	|	ЛОЖЬ КАК ПодходящийПериод
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	НЕ Т.ЭтоСторно
	|	И Т.Месяц >= &ПервыйМесяцСторно
	|	И Поля.НомерНабораПолей = &НомерНабораПолей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	НезакрытыеЗаписиСторно = Новый Массив;
	
	Пока ВыборкаСторноНаборыПолей.Следующий() Цикл
		
		ТекущийНомерНабораПолей = ВыборкаСторноНаборыПолей.НомерНабораПолей;
		
		Запрос.УстановитьПараметр("НомерНабораПолей",  ТекущийНомерНабораПолей);
		Запрос.УстановитьПараметр("ПервыйМесяцСторно", ВыборкаСторноНаборыПолей.Месяц);
		
		ТаблицаДляЗачета = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДляЗачета.Количество() = 0 Тогда
			НезакрытыеЗаписиСторно.Добавить(ТекущийНомерНабораПолей);
			Продолжить; // для этого номера набора нечем зачитывать записи сторно
		КонецЕсли;
		
		ВыборкаСторноЗаписи = ВыборкаСторноНаборыПолей.Выбрать();
		
		Пока ВыборкаСторноЗаписи.Следующий() Цикл
			
			// Упорядочим ТаблицаДляЗачета по периоду и налогообложению.
			Для Каждого ТекСтр Из ТаблицаДляЗачета Цикл
				
				ТекСтр.ПодходящийПериод = (ТекСтр.Месяц >= ВыборкаСторноЗаписи.Месяц);
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСторноЗаписи.НалогообложениеНДС) Тогда
					
					Если ЗначениеЗаполнено(ТекСтр.НалогообложениеНДС) Тогда
						ТекСтр.ПриоритетНалогообложения = 0;
					Иначе
						ТекСтр.ПриоритетНалогообложения = 1;
					КонецЕсли;
					
				Иначе

					Если ВыборкаСторноЗаписи.НалогообложениеНДС = ТекСтр.НалогообложениеНДС Тогда
						ТекСтр.ПриоритетНалогообложения = 0;
					ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтр.НалогообложениеНДС) Тогда
						ТекСтр.ПриоритетНалогообложения = 1;
					Иначе
						ТекСтр.ПриоритетНалогообложения = 2;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаДляЗачета.Сортировать(
				"ПодходящийПериод Убыв, Период, ПриоритетНалогообложения, НалогообложениеНДС, Регистратор",
				Новый СравнениеЗначений);
			
			// Зачтем текущую запись сторно из ВыборкаСторноЗаписи записями из ТаблицаДляЗачета.
			КоличествоСторно = ВыборкаСторноЗаписи.Количество; // отрицательное
			
			Пока КоличествоСторно < 0 И ТаблицаДляЗачета.Количество() > 0 И ТаблицаДляЗачета[0].ПодходящийПериод Цикл
				
				// Текущая запись сторно еще не закрыта и есть записи, которыми можно ее закрыть.
				КоличествоЗачета = Мин(-КоличествоСторно, ТаблицаДляЗачета[0].Количество); // положительное
				
				ДобавитьЗаписиДляСверткиВТаблицуЗначений(
					СтруктураДанныхСвертки,
					ВыборкаСторноЗаписи,
					ТаблицаДляЗачета,
					КоличествоЗачета);
				
				Если ТаблицаДляЗачета[0].Количество > КоличествоЗачета Тогда
					ТаблицаДляЗачета[0].Количество = ТаблицаДляЗачета[0].Количество - КоличествоЗачета;
				Иначе
					ТаблицаДляЗачета.Удалить(0);
				КонецЕсли;
				
				КоличествоСторно = КоличествоСторно + КоличествоЗачета;
				
			КонецЦикла;
			
			Если КоличествоСторно < 0 Тогда
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(НезакрытыеЗаписиСторно, ТекущийНомерНабораПолей);
			КонецЕсли;
			
			Если ТаблицаДляЗачета.Количество() = 0 Тогда
				Прервать; // для этого номера набора больше нечем зачитывать оставшиеся записи сторно
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НезакрытыеЗаписиСторно;

КонецФункции

Процедура УдалитьЛишниеСторно(ВидДвижения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) КАК Период
		|ПОМЕСТИТЬ РезервыТоваровОрганизаций
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество > 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ),
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	Период,
		|	НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) КАК Период
		|ПОМЕСТИТЬ СторноРезервовТоваровОрганизаций
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество < 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ),
		|	РезервыТоваровОрганизаций.НомерГТД,
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД,
		|	ВидЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторноРезервовТоваровОрганизаций.Период КАК Период,
		|	СторноРезервовТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СторноРезервовТоваровОрганизаций.Организация КАК Организация,
		|	СторноРезервовТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	СторноРезервовТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	СторноРезервовТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	СторноРезервовТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СторноРезервовТоваровОрганизаций.Количество + ЕСТЬNULL(РезервыТоваровОрганизаций.Количество, 0) КАК ПревышениеСторно
		|ПОМЕСТИТЬ ОтборыРезервовПоПревышающимСторно
		|ИЗ
		|	СторноРезервовТоваровОрганизаций КАК СторноРезервовТоваровОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|		ПО СторноРезервовТоваровОрганизаций.АналитикаУчетаНоменклатуры = РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры
		|			И СторноРезервовТоваровОрганизаций.Организация = РезервыТоваровОрганизаций.Организация
		|			И СторноРезервовТоваровОрганизаций.ВидЗапасов = РезервыТоваровОрганизаций.ВидЗапасов
		|			И СторноРезервовТоваровОрганизаций.НомерГТД = РезервыТоваровОрганизаций.НомерГТД
		|			И СторноРезервовТоваровОрганизаций.Период = РезервыТоваровОрганизаций.Период
		|			И СторноРезервовТоваровОрганизаций.КорОрганизация = РезервыТоваровОрганизаций.КорОрганизация
		|			И СторноРезервовТоваровОрганизаций.КорВидЗапасов = РезервыТоваровОрганизаций.КорВидЗапасов
		|ГДЕ
		|	СторноРезервовТоваровОрганизаций.Количество + ЕСТЬNULL(РезервыТоваровОрганизаций.Количество, 0) < 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.Регистратор КАК Регистратор,
		|	РезервыТоваровОрганизаций.Период КАК Период,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	ОтборыРезервовПоПревышающимСторно.ПревышениеСторно КАК ПревышениеСторно,
		|	ОтборыРезервовПоПревышающимСторно.Период КАК НачалоПериода
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборыРезервовПоПревышающимСторно КАК ОтборыРезервовПоПревышающимСторно
		|		ПО РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры = ОтборыРезервовПоПревышающимСторно.АналитикаУчетаНоменклатуры
		|			И РезервыТоваровОрганизаций.Организация = ОтборыРезервовПоПревышающимСторно.Организация
		|			И РезервыТоваровОрганизаций.ВидЗапасов = ОтборыРезервовПоПревышающимСторно.ВидЗапасов
		|			И РезервыТоваровОрганизаций.КорОрганизация = ОтборыРезервовПоПревышающимСторно.КорОрганизация
		|			И РезервыТоваровОрганизаций.КорВидЗапасов = ОтборыРезервовПоПревышающимСторно.КорВидЗапасов
		|			И РезервыТоваровОрганизаций.НомерГТД = ОтборыРезервовПоПревышающимСторно.НомерГТД
		|			И (НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) = ОтборыРезервовПоПревышающимСторно.Период)
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество < 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервыТоваровОрганизаций.Регистратор,
		|	РезервыТоваровОрганизаций.Период,
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов,
		|	ОтборыРезервовПоПревышающимСторно.Период,
		|	ОтборыРезервовПоПревышающимСторно.ПревышениеСторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|ИТОГИ ПО
		|	НачалоПериода,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД,
		|	ПревышениеСторно";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНачалоПериода = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеРегистраторовНаборов = Новый Соответствие;
	
	Пока ВыборкаНачалоПериода.Следующий() Цикл
		ВыборкаАналитикаУчетаНоменклатуры = ВыборкаНачалоПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАналитикаУчетаНоменклатуры.Следующий() Цикл
			ВыборкаОрганизация = ВыборкаАналитикаУчетаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизация.Следующий() Цикл
				ВыборкаВидЗапасов = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидЗапасов.Следующий() Цикл
					ВыборкаКорОрганизация = ВыборкаВидЗапасов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаКорОрганизация.Следующий() Цикл
						ВыборкаКорВидЗапасов = ВыборкаКорОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКорВидЗапасов.Следующий() Цикл
							ВыборкаНомерГТД = ВыборкаКорВидЗапасов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаНомерГТД.Следующий() Цикл
								ВыборкаПревышениеСторно = ВыборкаНомерГТД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаПревышениеСторно.Следующий() Цикл
									
									ПревышениеСторно = ВыборкаПревышениеСторно.ПревышениеСторно;
									КорПревышениеСторно = ВыборкаПревышениеСторно.ПревышениеСторно;
									
									ВыборкаДетальныеЗаписи = ВыборкаПревышениеСторно.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ВыборкаДетальныеЗаписи.Следующий() И ПревышениеСторно Цикл
										
										ТаблицаЗаписей = СоответствиеРегистраторовНаборов.Получить(ВыборкаДетальныеЗаписи.Регистратор);
										Если ТаблицаЗаписей = Неопределено Тогда 
											НаборЗаписей = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
											НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
											НаборЗаписей.Прочитать();
											ТаблицаЗаписей = НаборЗаписей.Выгрузить();
											ТаблицаЗаписей.Индексы.Добавить("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
											СоответствиеРегистраторовНаборов.Вставить(ВыборкаДетальныеЗаписи.Регистратор, ТаблицаЗаписей);
										КонецЕсли;
										
										ЗаписиКУдалениюИзТаблицы = Новый Массив;
										
										СтруктураПоиска = Новый Структура("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
										ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальныеЗаписи);
										СтрокиТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
										
										Для Каждого СтрокаИзТаблицы Из СтрокиТаблицыЗаписей Цикл
											
											Если СтрокаИзТаблицы.Количество >= 0 Тогда
												Продолжить;
											КонецЕсли;
											
											ВычитаемоеСторно = Макс(СтрокаИзТаблицы.Количество, ПревышениеСторно);
											СтрокаИзТаблицы.Количество = СтрокаИзТаблицы.Количество - ВычитаемоеСторно;
											Если СтрокаИзТаблицы.Количество = 0 Тогда
												ЗаписиКУдалениюИзТаблицы.Добавить(СтрокаИзТаблицы);
											КонецЕсли;
											
											ПревышениеСторно = ПревышениеСторно - ВычитаемоеСторно;
											
											Если Не ПревышениеСторно Тогда
												Прервать;
											КонецЕсли;
											
										КонецЦикла;
										
										КорСтруктураПоиска = Новый Структура("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
										КорСтруктураПоиска.Период = ВыборкаДетальныеЗаписи.Период;
										КорСтруктураПоиска.АналитикаУчетаНоменклатуры = ВыборкаДетальныеЗаписи.АналитикаУчетаНоменклатуры;
										КорСтруктураПоиска.ВидЗапасов = ВыборкаДетальныеЗаписи.КорВидЗапасов;
										КорСтруктураПоиска.Организация = ВыборкаДетальныеЗаписи.КорОрганизация;
										КорСтруктураПоиска.НомерГТД = ВыборкаДетальныеЗаписи.НомерГТД;
										КорСтруктураПоиска.КорВидЗапасов = ВыборкаДетальныеЗаписи.ВидЗапасов;
										КорСтруктураПоиска.КорОрганизация = ВыборкаДетальныеЗаписи.Организация;
										КорСтрокиТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(КорСтруктураПоиска);
										
										Для Каждого КорСтрокаИзТаблицы Из КорСтрокиТаблицыЗаписей Цикл
											
											Если КорСтрокаИзТаблицы.Количество >= 0 Тогда
												Продолжить;
											КонецЕсли;
											
											ВычитаемоеСторно = Макс(КорСтрокаИзТаблицы.Количество, КорПревышениеСторно);
											КорСтрокаИзТаблицы.Количество = КорСтрокаИзТаблицы.Количество - ВычитаемоеСторно;
											Если КорСтрокаИзТаблицы.Количество = 0 Тогда
												ЗаписиКУдалениюИзТаблицы.Добавить(КорСтрокаИзТаблицы);
											КонецЕсли;
											
											КорПревышениеСторно = КорПревышениеСторно - ВычитаемоеСторно;
											
											Если Не КорПревышениеСторно Тогда
												Прервать;
											КонецЕсли;
											
										КонецЦикла;
										
										Если ЗаписиКУдалениюИзТаблицы.Количество() Тогда
											Для Каждого ЗаписьКУдалению Из ЗаписиКУдалениюИзТаблицы Цикл
												ТаблицаЗаписей.Удалить(ЗаписьКУдалению);
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого НаборРегистратор Из СоответствиеРегистраторовНаборов Цикл
		Набор = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(НаборРегистратор.Ключ);
		Набор.Загрузить(НаборРегистратор.Значение);
		Набор.ДополнительныеСвойства.Вставить(ПризнакЗаписиНабораПриСвертке(), Истина);
		СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
		Набор.ДополнительныеСвойства.Вставить("НеПроверятьЛишнееСторно", Истина);
		Набор.Записывать = Истина;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
