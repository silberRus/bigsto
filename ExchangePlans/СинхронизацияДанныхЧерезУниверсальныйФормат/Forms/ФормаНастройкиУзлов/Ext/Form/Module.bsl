
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыПодключения") Тогда
		ПараметрыСоединения = Параметры.ПараметрыПодключения;
	КонецЕсли;
	
	ИменаРеквизитов                   = СтруктураСоответсвтияНастройкиОтборовРеквизитамФормы();
	ИменаРеквизитовБазыКорреспондента = СтруктураСоответсвтияНастройкиОтборовКорреспондентаРеквизитамФормы();
	
	Если Параметры.Свойство("ИдентификаторНастройки") Тогда
		ИдентификаторНастройки = Параметры.ИдентификаторНастройки;
	КонецЕсли;
	
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	СформироватьСписокВыбораПравилФормированияДоговора();
	
	СтруктураОтбора = Новый Структура("Использовать", Истина);
	ОрганизацииУП.Загрузить(ОрганизацииУП.Выгрузить(СтруктураОтбора));
	Для Каждого Строка Из ОрганизацииУП Цикл
		Строка.Представление = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСсылки));
	КонецЦикла;
	Если Не ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) тогда
		РежимВыгрузкиПриНеобходимости = 
			Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
	КонецЕсли;

	Если ИспользоватьОтборПоОрганизациямУП Тогда
		ПравилаОтбораОрганизаций = "Отбор";
	Иначе
		
		Если ВыгружатьУправленческуюОрганизацию Тогда
			ПравилаОтбораОрганизаций = "УпрОрганизация";
		Иначе
			ПравилаОтбораОрганизаций = "БезОтбора";
		КонецЕсли;
		
	КонецЕсли;
	
	ВидыЦенНоменклатуры.Загрузить(ВидыЦенНоменклатуры.Выгрузить(СтруктураОтбора));
	Для Каждого Строка Из ВидыЦенНоменклатуры Цикл
		Строка.Представление = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УникальныйИдентификаторСсылки));
	КонецЦикла;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ВидыЦен.Ссылка
				|ИЗ
				|	Справочник.ВидыЦен КАК ВидыЦен
				|ГДЕ
				|	ВидыЦен.ПометкаУдаления = ЛОЖЬ");
				
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВидЦеныПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	ПолучитьОписаниеКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИндексРеквизита = ПроверяемыеРеквизиты.Найти("ПравилаСозданияДоговоровКонтрагентов");
	Если (Не ФормироватьДоговора() ИЛИ ЗначениеЗаполнено(ПравилаСозданияДоговоровКонтрагентов))
		И ИндексРеквизита <> Неопределено Тогда
		
		ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыУправлениеТорговлей

&НаКлиенте
Процедура ПереключательОтбораСправочниковСОтборомПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораСУпрПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораБезУпрПриИзменении(Элемент)
	УстрановитьУсловияОрганиченияСинхронизации();
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиУППриИзменении(Элемент)
	
	Если ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументовУП = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаУППриИзменении(Элемент)
	ПравилаОтправкиДокументовУП = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямУППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагОтправлятьВидыЦенНоменклатурыПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкиПравилОтправкиДляИнформационнойБазыБухгалтерияПредприятия

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиБППриИзменении(Элемент)
	Если ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости" 
		И ПравилаОтправкиДокументовБП = "НеСинхронизировать" Тогда
		
		ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация";
		
	КонецЕсли;

	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаБППриИзменении(Элемент)
	ПравилаОтправкиДокументовБП = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФлагИспользоватьОтборПоОрганизациямБППриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не ЗаписатьИЗакрытьНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ФормаНастройкиУзловКомандаЗакрытьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = Новый Структура();
	Если ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийУП" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииУП");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
		
		Если Не ВыгружатьУправленческуюОрганизацию
			И Не ПолучитьФункциональнуюОпциюИнтерфейса("ИспользоватьУправленческуюОрганизацию") Тогда
		
			КоллекцияФильтров = Новый Массив;
			
			Накладываемыефильтры = Новый Структура();
			Накладываемыефильтры.Вставить("РеквизитОтбора",    "Ссылка");
			Накладываемыефильтры.Вставить("Условие",           "<>");
			Накладываемыефильтры.Вставить("ИмяПараметра",      "ИсключаемаяСсылка");
			Накладываемыефильтры.Вставить("ЗначениеПараметра", 
				ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация"));
			
			КоллекцияФильтров.Добавить(Накладываемыефильтры);
			
		Иначе
			
			КоллекцияФильтров = Неопределено;
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      КоллекцияФильтров);
		
	ИначеЕсли ТекущийЭлемент.Имя = "ОткрытьСписокВыбранныхОрганизацийБП" Тогда
		
		ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ОрганизацииБП");
		ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "УникальныйИдентификаторСсылки");
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            ПараметрыСоединения);
		
		ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите организации для отбора:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОтправляемыхВидовЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения",          "ВидыЦенНоменклатуры");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Представление");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора",                       "Справочник.ВидыЦен");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",                   НСтр("ru = 'Выберите виды цен для отправки:'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений",                СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения",            Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров",                      Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	
	ОписаниеКонтекста = (""
		+ СформироватьОписаниеПравилОтправкиУП()
		+ Символы.ПС + Символы.ПС
		+ СформироватьОписаниеПравилОтправкиБП()
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	//Обновим заголовок выбранных организаций конфигурации "Управление торговлей"
	Если ОрганизацииУП.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииУП.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийУП.Заголовок = НовыйЗаголовокОрганизаций;
	
	//Обновим заголовок выбранных организаций конфигурации "Бухгалтерия предприятия"
	Если ОрганизацииБП.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ", ");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизацийБП.Заголовок = НовыйЗаголовокОрганизаций;
	
	//Обновим заголовок выбранных видов цен
	Если ВидыЦенНоменклатуры.Количество() > 0 Тогда
		
		ВыбранныеВидыЦен = ВидыЦенНоменклатуры.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокВидовЦен = СтрСоединить(ВыбранныеВидыЦен, ",");
		
	Иначе
		
		НовыйЗаголовокВидовЦен = НСтр("ru = 'Выбрать виды цен'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокОтправляемыхВидовЦенНоменклатуры.Заголовок = НовыйЗаголовокВидовЦен;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеПравилОтправкиУП()
	
	ТекстОписанияУП = НСтр("ru = 'Правила отправки данных из этой информационной базы:'") + Символы.ПС;
	
	Если ПравилаОтправкиСправочниковУП = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
			НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
			НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковУП = "НеСинхронизировать" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП + 
		НСтр("ru = 'Данные из этой информационной базы отправляться не будут.'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовУП) Тогда
			
			ТекстОписанияУП = ТекстОписанияУП 
				+ Символы.ПС 
				+ НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
				
			ТекстОписанияУП = СтрЗаменить( ТекстОписанияУП,
										   "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовУП, "ДЛФ=D"));
		Иначе
			
			ТекстОписанияУП = ТекстОписанияУП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
				
		КонецЕсли;
		
	ИначеЕсли ПравилаОтправкиДокументовУП = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует необходимые ему документы к отправке;'");
		
	ИначеЕсли ПравилаОтправкиДокументовУП = "НеСинхронизировать"
		И ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Документы из этой информационной базы отправляться не будут;'");
		
	КонецЕсли;
	
	Если ИспользоватьОтборПоОрганизациямУП
		И ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
		
		КоллекцияЗначений = ОрганизацииУП.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Все данные будут
				| отправляться с отбором по организациям: %ПредставлениеКоллекции%;'");
		ТекстОписанияУП = СтрЗаменить(ТекстОписанияУП, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		Если ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
			
			Если ПравилаОтбораОрганизаций = "УпрОрганизация" Тогда
				ТекстОписанияУП = ТекстОписанияУП 
					+ Символы.ПС 
					+ НСтр("ru = 'Данные будут отправляться по всем организациям, включая управленческую;'");
			Иначе
				ТекстОписанияУП = ТекстОписанияУП 
					+ Символы.ПС 
					+ НСтр("ru = 'Данные будут отправляться по всем организациям, кроме ""Управленческой организации"";'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыгружатьЦеныНоменклатуры 
		И ПравилаОтправкиСправочниковУП <> "НеСинхронизировать" Тогда
		
		КоллекцияЗначений = ВидыЦенНоменклатуры.Выгрузить().ВыгрузитьКолонку("Представление");
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Дополнительно будет отправляться информация о ценах номенклатуры: %ПредставлениеКоллекции%.'");
		ТекстОписанияУП = СтрЗаменить(ТекстОписанияУП, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	ИначеЕсли Не ВыгружатьЦеныНоменклатуры
		И ПравилаОтправкиСправочниковУП = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписанияУП = ТекстОписанияУП 
			+ Символы.ПС 
			+ НСтр("ru = 'Цены номенклатуры отправляться не будут.'");
		
	КонецЕсли;
	
	Возврат ТекстОписанияУП;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеПравилОтправкиБП()
	
	ТекстОписанияБП = НСтр("ru = 'Правила отправки данных из информационной базы ""Бухгалтерия предприятия"" :'") + Символы.ПС;
	
	Если ПравилаОтправкиСправочниковБП = "АвтоматическаяСинхронизация" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
			НСтр("ru = 'Вся нормативно-справочная информация регистрируется к отправке автоматически;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
			НСтр("ru = 'К отправке регистрируется только используемая в документах нормативно-справочная информация;'");
			
	ИначеЕсли ПравилаОтправкиСправочниковБП = "НеСинхронизировать" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП + 
		НСтр("ru = 'Данные из информационной базы ""Бухгалтерия предприятия"" отправляться не будут.'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация" Тогда
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
			
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Документы автоматически регистрируются к отправке начиная с %ДатаНачала%;'");
				
			ТекстОписанияБП = СтрЗаменить( ТекстОписанияБП,
										   "%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовБП, "ДЛФ=D"));
										   
		Иначе
			
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все документы автоматически регистрируются к отправке;'");
				
		КонецЕсли;
		
	ИначеЕсли ПравилаОтправкиДокументовБП = "ИнтерактивнаяСинхронизация" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП 
			+ Символы.ПС 
			+ НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует необходимые ему документы к отправке;'");
		
	ИначеЕсли ПравилаОтправкиДокументовБП = "НеСинхронизировать"
		И ПравилаОтправкиСправочниковБП <> "НеСинхронизировать" Тогда
		
		ТекстОписанияБП = ТекстОписанияБП 
			+ Символы.ПС 
			+ НСтр("ru = 'Документы из информационной базы ""Бухгалтерия предприятия"" отправляться не будут;'");
		
	КонецЕсли;
	
	Если ПравилаОтправкиСправочниковБП <> "НеСинхронизировать" Тогда
		
		Если ИспользоватьОтборПоОрганизациямБП Тогда
			
			КоллекцияЗначений = ОрганизацииБП.Выгрузить().ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Все данные будут
					| отправляться с отбором по организациям: %ПредставлениеКоллекции%.'");
			ТекстОписанияБП = СтрЗаменить(ТекстОписанияБП, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
		Иначе
		
			ТекстОписанияБП = ТекстОписанияБП 
				+ Символы.ПС 
				+ НСтр("ru = 'Данные будут отправляться по всем организациям.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОписанияБП;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	//Правила отправки информационной базы "Управление торговлей"
	
	Элементы.ДатаНачалаВыгрузкиДокументовУП.Доступность = ПравилаОтправкиДокументовУП = "АвтоматическаяСинхронизация";
	Элементы.ПереключательДокументыНеОтправлятьУП.Доступность = Не ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости";
	Элементы.ОписаниеДокументыНеОтправлятьУП.Доступность = Не ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости";
		
	Элементы.ГруппаДокументыУП.ПодчиненныеЭлементы.ГруппаРежимОтправкиДокументовУП.Доступность = 
		Не ПравилаОтправкиСправочниковУП = "НеСинхронизировать";
	
	//Видимость отбора по организациям
	Элементы.ГруппаСтраницыОтборПоОрганизациямУП.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Если Элементы.ГруппаСтраницыОтборПоОрганизациямУП.Видимость Тогда

		Если ПравилаОтправкиСправочниковУП = "НеСинхронизировать" Тогда
			
			Элементы.ГруппаСтраницыОтборПоОрганизациямУП.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаОтборПоОрганизациямПустаяУП;
			
		Иначе
			
			Элементы.ГруппаСтраницыОтборПоОрганизациямУП.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаОтборПоОрганизациямУП;
			
			Элементы.ГруппаСтраницыКомандаВыбораОрганизаций.ТекущаяСтраница = ?(ИспользоватьОтборПоОрганизациямУП,
				Элементы.ГруппаСтраницаКомандаВыбратьОрганизации,
				Элементы.ГруппаСтраницаКомандаВыбратьОрганизацииПустая);
			
			//Видимость управленческой организации и вариантаотбора
			ИспользоватьУправленческуюОрганизацию =
				ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию")
					И Не ИдентификаторНастройки = "ОбменУП2ЗУП3";
					
			Элементы.ГруппаВыборУправленческойОрганизации.Видимость = ИспользоватьУправленческуюОрганизацию;
			
			Элементы.ГруппаСтраницыВариантВыбораОтбора.ТекущаяСтраница = ?(ИспользоватьУправленческуюОрганизацию,
				Элементы.ГруппаСтраницаПереключательОтбора,
				Элементы.ГруппаСтраницаФлагОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Видимость выгружаемых видов цен
	Если ПравилаОтправкиСправочниковУП = "НеСинхронизировать"
		Или ПравилаОтправкиСправочниковУП = "СинхронизироватьПоНеобходимости"
		Или ИдентификаторНастройки = "ОбменУП2ЗУП3" Тогда
		
		Элементы.ГруппаСтраницыОтправлятьВидыЦенНоменклатуры.ТекущаяСтраница = 
			Элементы.ГруппаСтраницаОтправлятьВидыЦенНоменклатурыПустая;
		
	Иначе
		
		Элементы.ГруппаСтраницыОтправлятьВидыЦенНоменклатуры.ТекущаяСтраница = 
			Элементы.ГруппаСтраницаОтправлятьВидыЦенНоменклатуры;
		
		Если ВыгружатьЦеныНоменклатуры И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
			
			Элементы.ГруппаСтраницыКомандаВыбратьВидыЦен.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаКомандаВыбратьВидыЦен;
			
		Иначе
			
			Элементы.ГруппаСтраницыКомандаВыбратьВидыЦен.ТекущаяСтраница = 
				Элементы.ГруппаСтраницаКомандаВыбратьВидыЦенПустая;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаВыгружатьАналитикуПоСкладамУП.Видимость = Не ПравилаОтправкиДокументовУП = "НеСинхронизировать"
		И Не ИдентификаторНастройки = "ОбменУП2ЗУП3";
		
	Элементы.ГруппаДатаЗапретаРедактированияДанныхУП.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДатыЗапретаИзменения")
		И Не ПравилаОтправкиДокументовУП = "НеСинхронизировать";
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставПрочихНастроекУП");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаПрочееУП");
	
	// Правила отправки информационной базы корреспондента

	Элементы.ДатаНачалаВыгрузкиДокументовБП.Доступность = ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация";
		
	Элементы.ГруппаДокументыБП.ПодчиненныеЭлементы.ГруппаРежимОтправкиДокументовБП.Доступность =
		Не ПравилаОтправкиСправочниковБП = "НеСинхронизировать";
		
	// Видимость отбора по организациям
	Если ПравилаОтправкиСправочниковБП = "НеСинхронизировать" Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОтборПоОрганизацииБП",
			"Видимость",
			Ложь);
			
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаОтборПоОрганизацииБП",
			"Видимость",
			Истина);
			
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОткрытьСписокВыбранныхОрганизацийБП",
			"Видимость",
			ИспользоватьОтборПоОрганизациямБП);
			
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			"ПереключательДокументыНеОтправлятьБП,ОписаниеДокументыНеОтправлятьБП",
			"Доступность",
			Не ПравилаОтправкиСправочниковБП = "СинхронизироватьПоНеобходимости");
		
	КонецЕсли;
	
	#Область ГруппаПравилаСозданияДоговоровКонтрагентов
	Элементы.ГруппаПравилаСозданияДоговоровКонтрагентов.Видимость = ФормироватьДоговора();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПолеПравилаСозданияДоговоровКонтрагентов",
		"Доступность",
		Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Количество() > 1);
	#КонецОбласти
	
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаСоставДополнительныхОтборовБП");
	УстановитьВидимостьГруппыНаСервере(Элементы, "ГруппаНастройкаДополнительныхОтборовБП");
	
КонецПроцедуры

&НаСервере
Функция ФормироватьДоговора()
	
	Возврат (ПравилаОтправкиДокументовУП <> "НеСинхронизировать" И ИдентификаторНастройки <> "ОбменУП2ЗУП3");
	
КонецФункции

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = ЭтаФорма[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	МассивВыбранныхЗначений  = ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения);
	
	Возврат МассивВыбранныхЗначений;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		СписокВыбранныхЗначений.Колонки.Идентификатор.Имя = "УникальныйИдентификаторСсылки";
		СписокВыбранныхЗначений.Колонки.Добавить("Использовать");
		СписокВыбранныхЗначений.ЗаполнитьЗначения( Истина, "Использовать");
		ЭтаФорма[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстрановитьУсловияОрганиченияСинхронизации()
	
	Если ПравилаОтбораОрганизаций = "Отбор" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Истина;
		ВыгружатьУправленческуюОрганизацию = Ложь;
		
	ИначеЕсли ПравилаОтбораОрганизаций = "УпрОрганизация" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Ложь;
		ВыгружатьУправленческуюОрганизацию = Истина;
		
	ИначеЕсли ПравилаОтбораОрганизаций = "БезОтбора" Тогда
		
		ИспользоватьОтборПоОрганизациямУП = Ложь;
		ВыгружатьУправленческуюОрганизацию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
&НаСервере
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

&НаСервере
Функция СтруктураСоответсвтияНастройкиОтборовРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыгружатьЦеныНоменклатуры",            "ВыгружатьЦеныНоменклатуры");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",      "ИспользоватьОтборПоОрганизациямУП");
	СтруктураНастроек.Вставить("ВыгружатьУправленческуюОрганизацию",   "ВыгружатьУправленческуюОрганизацию");
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",         "ДатаНачалаВыгрузкиДокументовУП");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",            "ПравилаОтправкиДокументовУП");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",          "ПравилаОтправкиСправочниковУП");
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",            "РежимВыгрузкиСправочниковУП");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",              "РежимВыгрузкиДокументовУП");
	СтруктураНастроек.Вставить("УправленческаяОрганизация",            "УправленческаяОрганизация");
	СтруктураНастроек.Вставить("Организации",                          "ОрганизацииУП");
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",          "ВыгружатьАналитикуПоСкладамУП");
	СтруктураНастроек.Вставить("ВидыЦенНоменклатуры",                  "ВидыЦенНоменклатуры");
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураСоответсвтияНастройкиОтборовКорреспондентаРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",      "ИспользоватьОтборПоОрганизациямБП");
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",         "ДатаНачалаВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",            "ПравилаОтправкиДокументовБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиСправочников",          "ПравилаОтправкиСправочниковБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",            "РежимВыгрузкиСправочниковБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",              "РежимВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",        "РежимВыгрузкиПриНеобходимости");
	СтруктураНастроек.Вставить("Организации",                          "ОрганизацииБП");
	СтруктураНастроек.Вставить("ВыгружатьАналитикуПоСкладам",          "ВыгружатьАналитикуПоСкладамБП");
	СтруктураНастроек.Вставить("ВариантНастройки",                     "ВариантНастройки");
	СтруктураНастроек.Вставить("ОтправлятьДокументыПокупкиПродажи",    "ОтправлятьДокументыПокупкиПродажи");
	СтруктураНастроек.Вставить("ОтправлятьСкладскиеДокументы",         "ОтправлятьСкладскиеДокументы");
	СтруктураНастроек.Вставить("ОтправлятьАвансовыеОтчеты",            "ОтправлятьАвансовыеОтчеты");
	СтруктураНастроек.Вставить("ОтправлятьСправочники",                "ОтправлятьСправочникиБП");
	СтруктураНастроек.Вставить("ОтправлятьНоменклатуру",               "ОтправлятьНоменклатуруБП");
	СтруктураНастроек.Вставить("ОтправлятьБанковскиеДокументы",        "ОтправлятьБанковскиеДокументыБП");
	СтруктураНастроек.Вставить("ОтправлятьКассовыеДокументы",          "ОтправлятьКассовыеДокументыБП");
	СтруктураНастроек.Вставить("ОтправлятьВедомостиНаВыплатуЗарплаты", "ОтправлятьВедомостиНаВыплатуЗарплатыБП");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ЗаписатьИЗакрытьНаСервере()
	
	Если Не ИспользоватьОтборПоОрганизациямУП И ОрганизацииУП.Количество() <> 0 Тогда
		ОрганизацииУП.Очистить();
	ИначеЕсли ОрганизацииУП.Количество() = 0 И ИспользоватьОтборПоОрганизациямУП Тогда
		ИспользоватьОтборПоОрганизациямУП = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОтборПоОрганизациямБП И ОрганизацииБП.Количество() <> 0 Тогда
		ОрганизацииБП.Очистить();
	ИначеЕсли ОрганизацииБП.Количество() = 0 И ИспользоватьОтборПоОрганизациямБП Тогда
		ИспользоватьОтборПоОрганизациямБП = Ложь;
	КонецЕсли;
	
	Если Не ВыгружатьЦеныНоменклатуры И ВидыЦенНоменклатуры.Количество() <> 0 Тогда
		ВидыЦенНоменклатуры.Очистить();
	ИначеЕсли ВидыЦенНоменклатуры.Количество() = 0 И ВыгружатьЦеныНоменклатуры Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
			ВыгружатьЦеныНоменклатуры = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ВидЦеныПоУмолчанию)Тогда
				НоваяСтрока = ВидыЦенНоменклатуры.Добавить();
				НоваяСтрока.Представление = ВидЦеныПоУмолчанию;
				НоваяСтрока.УникальныйИдентификаторСсылки = Строка(ВидЦеныПоУмолчанию.УникальныйИдентификатор());
			Иначе
				ВыгружатьЦеныНоменклатуры = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УправленческаяОрганизация) Тогда
		УправленческаяОрганизация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация");
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовУП <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументовУП = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Если ПравилаОтправкиДокументовБП <> "АвтоматическаяСинхронизация" Тогда
		ДатаНачалаВыгрузкиДокументовБП = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	ПолучитьОписаниеКонтекста();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппыНаСервере(ЭлементыФормы, ИмяГруппы)
	
	ГруппаФормы = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если ГруппаФормы = Неопределено
		Или Не ТипЗнч(ГруппаФормы) = Тип("ГруппаФормы") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Видимость = Ложь;
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		
		Если Не ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы")	Тогда
			Продолжить; // устанавливаем видимость только по видимости дочерних групп первого уровня вложенности
		КонецЕсли;
		
		Видимость = Видимость ИЛИ ПодчиненныйЭлемент.Видимость;
			
	КонецЦикла;
	
	ГруппаФормы.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораПравилФормированияДоговора()
	
	// Сформируем список выбора для реквизита "ПравилаСозданияДоговоровКонтрагентов"
	СписокПравилФормированияДоговора = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СписокПравилФормированияДоговора();
	Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Очистить();
	Для Каждого ЭлементПравил Из СписокПравилФормированияДоговора Цикл
		Элементы.ПолеПравилаСозданияДоговоровКонтрагентов.СписокВыбора.Добавить(ЭлементПравил.Значение, ЭлементПравил.Представление);
	КонецЦикла;
	
	Если СписокПравилФормированияДоговора.Количество() = 1 Тогда
		ПравилаСозданияДоговоровКонтрагентов = СписокПравилФормированияДоговора[0].Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПравилаСозданияДоговоровКонтрагентов)
		И СписокПравилФормированияДоговора.НайтиПоЗначению(ПравилаСозданияДоговоровКонтрагентов) = Неопределено Тогда
		
		ПравилаСозданияДоговоровКонтрагентов = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
