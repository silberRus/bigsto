#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мДокументыКДопроведению;
Перем мЗаказыДляОтражения;
Перем мДанныеДляСозданияПерерасчетаСебестоимости;

Перем мКонтактыВзаимодействия;
Перем мПредментыВзаимодействия;
Перем мПапкиВзаимодействия;

Перем мПоставщикиЗаданийПартионногоУчета;
Перем мПоставщикиЗаданийВзаиморасчетовСКлиентами;
Перем мПоставщикиЗаданийВзаиморасчетовСПоставщиками;

Перем мДанныеДляФормированияЗаписейКнигиПокупокПродаж;
Перем мПоставщикиЗаданийКФормированиюЗаписейКнигиПокупокПродаж;

Перем ГлДокументыКОтражениюВРеестре;

Перем ГлДанныеДляСозданияЗаданийВзаиморасчетовСКлиентами;
Перем ГлДанныеДляСозданияЗаданийВзаиморасчетовСПоставщиками;

#Область ОбработчикиСобытий

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		
		МетаДанныеЭлементаДанных = ЭлементДанных.Метаданные();
		
		Если Метаданные.Документы.Содержит(МетаДанныеЭлементаДанных) 
			И ОбменДаннымиУТУП.ОбъектНеПроходитФильтр(ЭлементДанных, Ссылка)
			И ЭлементДанных.Проведен Тогда
			мДокументыКДопроведению.Добавить(ЭлементДанных);
		КонецЕсли;
		
		Если мПоставщикиЗаданийПартионногоУчета[МетаДанныеЭлементаДанных] <> Неопределено Тогда
			мДанныеДляСозданияПерерасчетаСебестоимости.Добавить(ЭлементДанных);
		КонецЕсли;
		
		Если мПоставщикиЗаданийВзаиморасчетовСКлиентами.Найти(ТипЗнч(ЭлементДанных)) <> Неопределено
			Или мПоставщикиЗаданийВзаиморасчетовСПоставщиками.Найти(ТипЗнч(ЭлементДанных)) <> Неопределено Тогда
			
			ЭлементДанных.ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура("СтруктураВременныеТаблицы", 
				Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц)));
			ЭлементДанных.ДополнительныеСвойства.Вставить("ДатаРегистратора", КонецДня(ТекущаяДата()));
			ЭлементДанных.ДополнительныеСвойства.Вставить("РежимЗаписи",      РежимЗаписиДокумента.Запись);
			
			Если мПоставщикиЗаданийВзаиморасчетовСКлиентами.Найти(ТипЗнч(ЭлементДанных)) <> Неопределено Тогда
				ГлДанныеДляСозданияЗаданийВзаиморасчетовСКлиентами.Добавить(ЭлементДанных);
			Иначе
				ГлДанныеДляСозданияЗаданийВзаиморасчетовСПоставщиками.Добавить(ЭлементДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		Если мПоставщикиЗаданийКФормированиюЗаписейКнигиПокупокПродаж.Найти(МетаДанныеЭлементаДанных) <> Неопределено Тогда
			Если ОбщегоНазначения.ЭтоРегистр(МетаДанныеЭлементаДанных) Тогда
				ЭлементДанных.ДополнительныеСвойства.Вставить("ДляПроведения");
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаДанныеЭлементаДанных) Тогда
				мДанныеДляФормированияЗаписейКнигиПокупокПродаж.Добавить(ЭлементДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если РегистрыСведений.РеестрДокументов.ОбъектВключенВСоставДанныхРеестра(ЭлементДанных) Тогда
			ГлДокументыКОтражениюВРеестре.Вставить(МетаДанныеЭлементаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриПолученииДанныхФайла(ЭлементДанных);
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		
		МетаДанныеЭлементаДанных = ЭлементДанных.Метаданные();

		Если РегистрыСведений.РеестрДокументов.ОбъектВключенВСоставДанныхРеестра(ЭлементДанных) Тогда
			ГлДокументыКОтражениюВРеестре.Вставить(МетаДанныеЭлементаДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриПолученииДанныхФайла(ЭлементДанных);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЭтотОбъект.Ссылка <> ПланыОбмена.СОтборами.ЭтотУзел() Тогда
		
		Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
			
			ОбщиеДанныеУзлов = ОбменДаннымиПовтИсп.ОбщиеДанныеУзлов(ЭтотОбъект.Ссылка);
			НастройкиЦентальногоУзлаРИБ = ПланыОбмена.СОтборами.ЭтотУзел().ПолучитьОбъект();
			
			//Обновим данные подчиненного предопределнного узла РИБ с отборами если это необходимо
			Если ОбменДаннымиСобытия.ДанныеРазличаются(ЭтотОбъект, НастройкиЦентальногоУзлаРИБ, ОбщиеДанныеУзлов) Тогда
				ОбменДаннымиСобытия.ЗаполнитьЗначенияСвойствОбъекта(НастройкиЦентальногоУзлаРИБ, ЭтотОбъект, ОбщиеДанныеУзлов);
				НастройкиЦентальногоУзлаРИБ.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, Ссылка) Тогда
			ПослеЗагрузкиДанных();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента)
	
	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Удалить 
		И ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		
		ОбъектМетаданных = ЭлементДанных.Метаданные();
		
		Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
			
			ПереопределитьНаборЗаписей(ЭлементДанных, Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза)
	
	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Удалить 
		И ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		
		ОбъектМетаданных = ЭлементДанных.Метаданные();
		
		Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
			
			ПереопределитьНаборЗаписей(ЭлементДанных, Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переопределяет стандартное поведение при загрузке данных;
//
Процедура ПриПолученииДанныхФайла(ЭлементДанных)
	
	ТипПолучаемогоОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ТипПолучаемогоОбъекта = Тип("СправочникОбъект.СегментыНоменклатуры")
		Или ТипПолучаемогоОбъекта = Тип("СправочникОбъект.СегментыПартнеров")
		Или ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ПравилаНачисленияИСписанияБонусныхБаллов")
		Или ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ВидыОповещенийКлиентам") Тогда
		
		Если Не ЭлементДанных.ЭтоГруппа Тогда
			ЭлементДанных.РегламентноеЗадание = ПолучитьРеглЗаданияЭтойИБ( 
				ЭлементДанных, "РегламентноеЗадание");
		КонецЕсли;
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.НастройкиАдресныхСкладов") Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	НастройкиАдресныхСкладовНовая.Склад,
			|	НастройкиАдресныхСкладовНовая.Помещение,
			|	НастройкиАдресныхСкладовНовая.ГлубинаАнализа,
			|	НастройкиАдресныхСкладовНовая.МинимальнаяВероятностьОтгрузки,
			|	НастройкиАдресныхСкладовНовая.УровеньОбслуживанияУпаковокКлассаX,
			|	НастройкиАдресныхСкладовНовая.УровеньОбслуживанияУпаковокКлассаY,
			|	НастройкиАдресныхСкладовНовая.УровеньОбслуживанияУпаковокКлассаZ,
			|	НастройкиАдресныхСкладовНовая.ИспользоватьАдресноеХранение,
			|	НастройкиАдресныхСкладовНовая.ИспользоватьАдресноеХранениеСправочно,
			|	НастройкиАдресныхСкладовНовая.ИспользоватьРабочиеУчастки,
			|	НастройкиАдресныхСкладовНовая.НастройкаФормированияПоРабочимУчасткамОтбор,
			|	НастройкиАдресныхСкладовНовая.ОграничиватьПоВесуОтбор,
			|	НастройкиАдресныхСкладовНовая.ОграничиватьПоОбъемуОтбор,
			|	НастройкиАдресныхСкладовНовая.ОграничениеПоОбъемуОтбор,
			|	НастройкиАдресныхСкладовНовая.ОграничениеПоВесуОтбор,
			|	НастройкиАдресныхСкладовНовая.РабочийУчастокОтбор
			|ПОМЕСТИТЬ ВТ_НовыйНаборЗаписей
			|ИЗ
			|	&ТаблицаНабораЗаписей КАК НастройкиАдресныхСкладовНовая
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НовыйНаборЗаписей.Склад КАК Склад,
			|	ВТ_НовыйНаборЗаписей.Помещение КАК Помещение,
			|	ВТ_НовыйНаборЗаписей.ГлубинаАнализа,
			|	ВТ_НовыйНаборЗаписей.МинимальнаяВероятностьОтгрузки,
			|	ВТ_НовыйНаборЗаписей.УровеньОбслуживанияУпаковокКлассаX,
			|	ВТ_НовыйНаборЗаписей.УровеньОбслуживанияУпаковокКлассаY,
			|	ВТ_НовыйНаборЗаписей.УровеньОбслуживанияУпаковокКлассаZ,
			|	ВТ_НовыйНаборЗаписей.ИспользоватьАдресноеХранение,
			|	ВТ_НовыйНаборЗаписей.ИспользоватьАдресноеХранениеСправочно,
			|	ВТ_НовыйНаборЗаписей.ИспользоватьРабочиеУчастки,
			|	ВТ_НовыйНаборЗаписей.НастройкаФормированияПоРабочимУчасткамОтбор,
			|	ВТ_НовыйНаборЗаписей.ОграничиватьПоВесуОтбор,
			|	ВТ_НовыйНаборЗаписей.ОграничиватьПоОбъемуОтбор,
			|	ВТ_НовыйНаборЗаписей.ОграничениеПоОбъемуОтбор,
			|	ВТ_НовыйНаборЗаписей.ОграничениеПоВесуОтбор,
			|	ВТ_НовыйНаборЗаписей.РабочийУчастокОтбор,
			|	ЕСТЬNULL(НастройкиАдресныхСкладов.РегламентноеЗаданиеРасчетаПоказателейПрогноза,       &ПустойИдентификатор) КАК РегламентноеЗаданиеРасчетаПоказателейПрогноза,
			|	ЕСТЬNULL(НастройкиАдресныхСкладов.РегламентноеЗаданиеСозданиеЗаданийНаОтбор,           &ПустойИдентификатор) КАК РегламентноеЗаданиеСозданиеЗаданийНаОтбор,
			|	ЕСТЬNULL(НастройкиАдресныхСкладов.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров, """") КАК РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров,
			|	ВЫБОР
			|		КОГДА НастройкиАдресныхСкладов.РегламентноеЗаданиеСозданиеЗаданийНаОтбор ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ НастройкиАдресныхСкладов.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор
			|	КОНЕЦ КАК ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор
			|ИЗ
			|	ВТ_НовыйНаборЗаписей КАК ВТ_НовыйНаборЗаписей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
			|		ПО ВТ_НовыйНаборЗаписей.Склад = НастройкиАдресныхСкладов.Склад
			|			И ВТ_НовыйНаборЗаписей.Помещение = НастройкиАдресныхСкладов.Помещение");
			
		Запрос.УстановитьПараметр("ТаблицаНабораЗаписей", ЭлементДанных.Выгрузить());
		Запрос.УстановитьПараметр("ПустойИдентификатор",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		
		Результат = Запрос.Выполнить().Выгрузить();
		ЭлементДанных.Загрузить(Результат);
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.КонтактыВзаимодействий") Тогда
		
		КонтактВзаимодействия = ЭлементДанных.Отбор.Контакт.Значение;
		
		Если мКонтактыВзаимодействия.Найти(КонтактВзаимодействия) = Неопределено Тогда
			мКонтактыВзаимодействия.Добавить(КонтактВзаимодействия);
		КонецЕсли;
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.ПредметыПапкиВзаимодействий") Тогда
		
		мПредментыВзаимодействия = ОбменДаннымиУТУП.ОбъединитьМассивы(мПредментыВзаимодействия,ЭлементДанных.ВыгрузитьКолонку("Предмет"));
		мПапкиВзаимодействия     = ОбменДаннымиУТУП.ОбъединитьМассивы(мПапкиВзаимодействия,    ЭлементДанных.ВыгрузитьКолонку("ПапкаЭлектронногоПисьма"));
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ЗаказКлиента")
		Или ТипЗнч(ЭлементДанных) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		мЗаказыДляОтражения.Добавить(ЭлементДанных.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных()
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ЗаменитьДублиКлючейАналитики();
	Справочники.КлючиАналитикиУчетаПоПартнерам.ЗаменитьДублиКлючейАналитики();
	Справочники.КлючиАналитикиУчетаПартий.ЗаменитьДублиКлючейАналитики();
	Справочники.ВидыЗапасов.ЗаменитьДублиВидовЗапасов();
	Справочники.КлючиАналитикиУчетаНаборов.ЗаменитьДублиКлючейАналитики();
	
	Если мЗаказыДляОтражения.Количество() > 0 Тогда
		РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(мЗаказыДляОтражения, Ложь, Ложь);
	КонецЕсли;
	
	Если ГлДокументыКОтражениюВРеестре.Количество() > 0 Тогда
		РегистрыСведений.РеестрДокументов.ОтразитьДанныеДокументовВРеестре(ГлДокументыКОтражениюВРеестре);
	КонецЕсли;
	
	Для Каждого ДанныеДляПерерасчета Из мДанныеДляСозданияПерерасчетаСебестоимости Цикл
		УниверсальныеМеханизмыПартийИСебестоимости.ПриПолученииДанныхОтПодчиненного(ДанныеДляПерерасчета);
	КонецЦикла;
	
	Для Каждого ДанныеНабора Из ГлДанныеДляСозданияЗаданийВзаиморасчетовСКлиентами Цикл
		ВзаиморасчетыСервер.ОтразитьЗаданияКРаспределениюРасчетовСКлиентами(ДанныеНабора.Отбор.Регистратор, ДанныеНабора.ДополнительныеСвойства);
	КонецЦикла;
	
	Для Каждого ДанныеНабора Из ГлДанныеДляСозданияЗаданийВзаиморасчетовСПоставщиками Цикл
		ВзаиморасчетыСервер.ОтразитьЗаданияКРаспределениюРасчетовСПоставщиками(ДанныеНабора.Отбор.Регистратор, ДанныеНабора.ДополнительныеСвойства);
	КонецЦикла;
	
	//Расчет состояния контактов и очистка от дублей справочника СтроковыеКонтактыВзаимодействия
	Если мКонтактыВзаимодействия.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ОсновнойОбход.Ссылка КАК Ссылка,
			|	ПовторнаяВыборка.Ссылка КАК Дубль,
			|	ПовторнаяВыборка.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.СтроковыеКонтактыВзаимодействий КАК ОсновнойОбход
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтроковыеКонтактыВзаимодействий КАК ПовторнаяВыборка
			|		ПО ОсновнойОбход.Наименование = ПовторнаяВыборка.Наименование
			|			И (НЕ ОсновнойОбход.Ссылка = ПовторнаяВыборка.Ссылка)
			|ГДЕ
			|	НЕ ПовторнаяВыборка.Ссылка ЕСТЬ NULL 
			|	И ОсновнойОбход.Ссылка В(&МассивПолученных)
			|	И НЕ ОсновнойОбход.ПометкаУдаления
			|
			|СГРУППИРОВАТЬ ПО
			|	ОсновнойОбход.Ссылка,
			|	ПовторнаяВыборка.Ссылка");

		Запрос.УстановитьПараметр("МассивПолученных", мКонтактыВзаимодействия);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			// Сформируем соответствие ссылок и дублей.
			СоответствиеЗначений = Новый Соответствие;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				СоответствиеЗначений.Вставить(Выборка.Дубль, Выборка.Ссылка);
				
				Если Не Выборка.ПометкаУдаления Тогда
					СправочникОбъект = Выборка.Дубль.ПолучитьОбъект();
					Попытка
						СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбщегоНазначенияУТ.ЗаменитьСсылки(СоответствиеЗначений);
		
		КонецЕсли;
		
		//Расчет состояния контактов
		Взаимодействия.РассчитатьРассмотреноПоКонтактам(Взаимодействия.ТаблицаДанныхДляРасчетаРассмотрено(мКонтактыВзаимодействия, "Контакт"));
		
	КонецЕсли;
	
	//Расчет состояние предметов взаимодействия
	Если мПредментыВзаимодействия.Количество() > 0 Тогда
		Взаимодействия.РассчитатьРассмотреноПоПредметам(Взаимодействия.ТаблицаДанныхДляРасчетаРассмотрено(мПредментыВзаимодействия, "Предмет"));
	КонецЕсли;
	
	//Расчет состояния папок взаимодействия
	Если мПапкиВзаимодействия.Количество() > 0 Тогда
		Взаимодействия.РассчитатьРассмотреноПоПапкам(Взаимодействия.ТаблицаДанныхДляРасчетаРассмотрено(мПапкиВзаимодействия, "Папка"));
	КонецЕсли;
	
	Для Каждого ДокументОбъект Из мДокументыКДопроведению Цикл
		
		ДокументСсылка = ДокументОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
			
			Если ОбменДаннымиУТУП.ОбъектНеПроходитФильтр(ДокументОбъект, Ссылка) Тогда
				ДокументОбъект.ОбменДанными.Загрузка = Ложь;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если мДанныеДляФормированияЗаписейКнигиПокупокПродаж.Количество() > 0 Тогда
		РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СформироватьЗаданияПоДокументам(мДанныеДляФормированияЗаписейКнигиПокупокПродаж);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеглЗаданияЭтойИБ(ЭлементДанных, ИмяРеквизита)
	
	Если Не ОбщегоНазначения.СсылкаСуществует(ЭлементДанных.Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеглЗаданияЭтойИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ЭлементДанных.Ссылка, ИмяРеквизита);
		
	Если Не ЗначениеЗаполнено(РеглЗаданияЭтойИБ)
		Или РегламентныеЗадания.НайтиПоУникальномуИдентификатору(РеглЗаданияЭтойИБ) = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РеглЗаданияЭтойИБ;
	КонецЕсли;
	
КонецФункции

Процедура ПереопределитьНаборЗаписей(ЭлементДанных, УзелПланаОбмена)
	
	КоличествоЗаписейВНаборе = ЭлементДанных.Количество() - 1;
	
	Пока КоличествоЗаписейВНаборе >= 0 Цикл
		
		ЗаписьНабора = ЭлементДанных[КоличествоЗаписейВНаборе];
		
		Если ОбменДаннымиУТУП.ОбъектНеПроходитФильтр(ЗаписьНабора, УзелПланаОбмена) Тогда
			ЭлементДанных.Удалить(ЗаписьНабора);
		КонецЕсли;
		
		КоличествоЗаписейВНаборе = КоличествоЗаписейВНаборе - 1;
		
	КонецЦикла;
	
КонецПроцедуры

мДокументыКДопроведению                       = Новый Массив;
мДанныеДляСозданияПерерасчетаСебестоимости    = Новый Массив;
мПоставщикиЗаданийПартионногоУчета            = РасчетСебестоимости.ВходящиеДанныеМеханизма(, Истина);
мПоставщикиЗаданийВзаиморасчетовСКлиентами    = ОбменДаннымиУТУП.РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСКлиентами();
мПоставщикиЗаданийВзаиморасчетовСПоставщиками = ОбменДаннымиУТУП.РегистрыДляСозданияЗаданийКРасчетуВзаиморасчетовСПоставщиками();
мЗаказыДляОтражения                           = Новый Массив;

мКонтактыВзаимодействия               = Новый Массив;
мПредментыВзаимодействия              = Новый Массив;
мПапкиВзаимодействия                  = Новый Массив;

мПоставщикиЗаданийКФормированиюЗаписейКнигиПокупокПродаж = РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.ВходящиеДанныеМеханизма();
мДанныеДляФормированияЗаписейКнигиПокупокПродаж = Новый Массив;

ГлДокументыКОтражениюВРеестре = Новый Соответствие;

ГлДанныеДляСозданияЗаданийВзаиморасчетовСКлиентами    = Новый Массив;
ГлДанныеДляСозданияЗаданийВзаиморасчетовСПоставщиками = Новый Массив;

#КонецОбласти

#КонецЕсли