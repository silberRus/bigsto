#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограмныйИнтерфейс

// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.НазначениеПланаОбмена = "РИБСФильтром";
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Истина;
	
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки				= Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанных					= Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанныхБазыКорреспондента = Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	ОписаниеВарианта.ПутьКФайлуКомплектаПравилНаПользовательскомСайте = "https://users.v8.1c.ru/distribution/project/Trade110";
	ОписаниеВарианта.ПутьКФайлуКомплектаПравилВКаталогеШаблонов = "\1c\trade";
	
	ОписаниеВарианта.Вставить("ЗаголовокКомандыДляСозданияНовогоОбменаДанными", НСтр("ru = 'РИБ с фильтрами'"));
	ОписаниеВарианта.Вставить("ЗаголовокПомощникаСозданияОбмена",               НСтр("ru = 'Настройка распределенной информационной базы с отборами'"));
	ОписаниеВарианта.Вставить("ЗаголовокУзлаПланаОбмена",                       НСтр("ru = 'Узел РИБ с фильтрами'"));
	
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника 				= "Настройки обмена для УТ (С отборами)";
	ОписаниеВарианта.ИмяФормыСозданияНачальногоОбраза			= "ОбщаяФорма.СозданиеНачальногоОбразаСФайлами";
	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными	= ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");;
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена		= ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
	ОписаниеВарианта.КраткаяИнформацияПоОбмену					= КраткаяИнформацияПоОбмену();
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену				= "ПланОбмена.СОтборами.Форма.ПодробнаяИнформация";
	ОписаниеВарианта.Отборы										= НастройкаОтборовНаУзле(ИдентификаторНастройки);
	ОписаниеВарианта.ОбщиеДанныеУзлов							= ОбщиеДанныеУзлов();
	
КонецПроцедуры



// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена, перечисленных через запятую,
// которые являются общими для пары обменивающихся конфигураций.
//
Функция ОбщиеДанныеУзлов()
	
	Возврат "ИспользоватьОтборПоОрганизациям, ИспользоватьОтборПоВидамЦен, ВыгружатьИнформативныеОстатки, Подразделения, Организации, ВидыЦен, ИнформативныеОстаткиПоСкладам";
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену()
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет настроить новый узел распределенной информационной базы 
		|с отборами по подразделению и организации.'");

	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Код");
	Результат.Добавить("НомерПринятого");
	Результат.Добавить("НомерОтправленного");
	
	Возврат Результат;
	
КонецФункции

#Область ПроцедурыИФункцииБСП

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ИдентификаторНастройки = "")
	
	СтруктураТабличнойЧастиПодразделения = Новый Структура;
	СтруктураТабличнойЧастиОрганизации   = Новый Структура;
	СтруктураТабличнойЧастиВидыЦен       = Новый Структура;
	СтруктураТабличнойЧастиСклады        = Новый Структура;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтборПоВидамЦен",     Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("ВыгружатьИнформативныеОстатки",   0);
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
		
		НастройкиЦентальногоУзлаРИБ = ПланыОбмена.СОтборами.ЭтотУзел();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, НастройкиЦентальногоУзлаРИБ);
		
		СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", НастройкиЦентальногоУзлаРИБ.Подразделения.ВыгрузитьКолонку("Подразделение"));
		СтруктураТабличнойЧастиОрганизации.Вставить("Организация",     НастройкиЦентальногоУзлаРИБ.Организации.ВыгрузитьКолонку("Организация"));
		СтруктураТабличнойЧастиВидыЦен.Вставить("ВидЦены",             НастройкиЦентальногоУзлаРИБ.ВидыЦен.ВыгрузитьКолонку("ВидЦены"));
		СтруктураТабличнойЧастиСклады.Вставить("Склад",                НастройкиЦентальногоУзлаРИБ.ИнформативныеОстаткиПоСкладам.ВыгрузитьКолонку("Склад"));
		
	Иначе
		
		СтруктураТабличнойЧастиПодразделения.Вставить("Подразделение", Новый Массив);
		СтруктураТабличнойЧастиОрганизации.Вставить("Организация",     Новый Массив);
		СтруктураТабличнойЧастиВидыЦен.Вставить("ВидЦены",             Новый Массив);
		СтруктураТабличнойЧастиСклады.Вставить("Склад",                Новый Массив);
		
	КонецЕсли;
	
	СтруктураНастроек.Вставить("Подразделения",                   СтруктураТабличнойЧастиПодразделения);
	СтруктураНастроек.Вставить("Организации",                     СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("ВидыЦен",                         СтруктураТабличнойЧастиВидыЦен);
	СтруктураНастроек.Вставить("ИнформативныеОстаткиПоСкладам",   СтруктураТабличнойЧастиСклады);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = "";
	
	КоллекцияЗначений = НастройкаОтборовНаУзле.Подразделения.Подразделение;
	Если КоллекцияЗначений.Количество() > 0 Тогда
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + НСтр("ru = 'Подразделения, по которым будут отправлены данные: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	Иначе
		ТекстОписания = ТекстОписания + НСтр("ru = 'Подразделения для фильтрации отправляемых данных не указаны'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные с отбором по организациям: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные по всем организациям'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамЦен Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыЦен.ВидЦены;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные о ценах номенклатуры по видам цен: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять информацию о всех ценах номенклатуры'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгружатьИнформативныеОстатки = 2 Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ИнформативныеОстаткиПоСкладам.Склад;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять информативные остатки по складам: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	ИначеЕсли НастройкаОтборовНаУзле.ВыгружатьИнформативныеОстатки = 1 Тогда
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять информативные остатки по всем складам'");
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не отправлять информативные остатки по складам'");
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецОбласти

#КонецЕсли