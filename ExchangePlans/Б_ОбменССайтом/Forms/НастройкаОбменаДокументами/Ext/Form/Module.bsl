
#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресНастроекОбмена) Тогда
		
		АдресНастроекОбмена = Параметры.АдресНастроекОбмена;
		
		НастройкиОбмена 	= ПолучитьИзВременногоХранилища(АдресНастроекОбмена);
		Объект				= Параметры.Объект;
		
		ВыгружатьВсеДокументы 					= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ВыгружатьВсеДокументы");
		ТочкаАктуальностиВыгрузкиДокументов 	= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ТочкаАктуальностиВыгрузкиДокументов");
		
		ВыгрузкаОтгрузок 						= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ВыгрузкаОтгрузок");
		ВыгрузкаОплат 							= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ВыгрузкаОплат");
		
		НеРедактироватьДокументыПришедшиеССайта	= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "НеРедактироватьДокументыПришедшиеССайта");
		
		ЗагрузкаОплат 							= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ЗагрузкаОплат");
		ЗагрузкаОтгрузок 						= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ЗагрузкаОтгрузок");
		
		УстанавливатьРучнуюСкидкуВДокументе 	= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "УстанавливатьРучнуюСкидкуВДокументе");
		
		КоличествоДокументовВПакете 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "КоличествоДокументовВПакете");
		//мб. есть ключ КоличествоЗаказовВПакете, который был в старых модулях 
		Если НЕ ЗначениеЗаполнено(КоличествоДокументовВПакете) тогда
			КоличествоДокументовВПакете = ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "КоличествоЗаказовВПакете");
		КонецЕсли;
		
		СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
		
			
			
			
		СхемаВыгрузкиТоваров = ПланыОбмена.Б_ОбменССайтом.ПолучитьМакет("СхемаВыгрузкиЗаказов");
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаВыгрузкиТоваров, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанныхЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
		
		НастройкиКомпоновкиДанныхЗаказов 		= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "НастройкиКомпоновкиДанныхЗаказов");
		АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Заказы, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанныхЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
		КомпоновщикНастроекКомпоновкиДанныхЗаказов.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхЗаказов);
		КомпоновщикНастроекКомпоновкиДанныхЗаказов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		//создаем новую компановку, если ее ранее не было
		НастройкиКомпоновкиДанныхОтгрузок 		= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "НастройкиКомпоновкиДанныхОтгрузок");
		АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Отгрузки, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
		
		Если НастройкиКомпоновкиДанныхОтгрузок <> Неопределено тогда
			КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхОтгрузок);
		Иначе
			КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(СтруктураССхемамиК.Отгрузки.НастройкиПоУмолчанию);
		КонецЕсли; 		
		КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		НастройкиКомпоновкиДанныхОплат 		= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "НастройкиКомпоновкиДанныхОплат");
		АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Оплаты, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанныхОплат.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
		
		Если НастройкиКомпоновкиДанныхОплат <> Неопределено тогда
			КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхОплат);
		Иначе
			КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(СтруктураССхемамиК.Оплаты.НастройкиПоУмолчанию);
		КонецЕсли;
		КомпоновщикНастроекКомпоновкиДанныхОплат.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

		/////////////////////////////////////////////////////////
		ГруппаДляНовойНоменклатуры 		= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ГруппаДляНовойНоменклатуры");
		ВидНоменклатурыТовар 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ВидНоменклатурыТовар");
		ВидНоменклатурыУслуга 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ВидНоменклатурыУслуга");
		КонтрагентФизлицо 				= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "КонтрагентФизлицо");
		СоглашениеКонтрагентаФизлицо 	= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "СоглашениеКонтрагентаФизлицо");
		ПричинаОтменыЗаказа 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ПричинаОтменыЗаказа");
		СтатусЗаказаОтменен 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "СтатусЗаказаОтменен");
		
		ЗагружаемыеТипыОплат 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ЗагружаемыеТипыОплат");
		ПроводитьЕслиОплачен 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ПроводитьЕслиОплачен");
		ПроводитьЕслиОтгружен 			= ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "ПроводитьЕслиОтгружен");
		
		СоответствиеПлатежныхСистемИКасс.Загрузить(ПланыОбмена.Б_ОбменССайтом.ПолучитьЗначениеКлючаСтруктурыНастроек(НастройкиОбмена.Заказы, "СоответствиеПлатежныхСистемИКасс"));
		
		СохраненныеНастройкиЗагружаемыхДокументов = ПоместитьВоВременноеХранилище(НастройкиОбмена.Заказы.СохраненныеНастройкиЗагружаемыхДокументов, УникальныйИдентификатор);
		

	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ОтборыОтгрузок.Доступность = ВыгрузкаОтгрузок;   
	Элементы.ОтборыОплаты.Доступность 	= ВыгрузкаОплат; 
	
	Элементы.ПроводитьЕслиОтгружен.Доступность 			= ЗагрузкаОтгрузок;
	Элементы.ПроводитьЕслиОплачен.Доступность 			= ЗагрузкаОплат;
	Элементы.НастроитьТипыЗагружаемыхОплат.Доступность 	= ЗагрузкаОплат;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиЭлементовФормы


&НаКлиенте
Процедура ВыгрузкаОтгрузокПриИзменении(Элемент)
	Элементы.ОтборыОтгрузок.Доступность = ВыгрузкаОтгрузок;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОтгрузокПриИзменении(Элемент)
	Элементы.ПроводитьЕслиОтгружен.Доступность 	= ЗагрузкаОтгрузок;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаОплатПриИзменении(Элемент)
	Элементы.ПроводитьЕслиОплачен.Доступность 	= ЗагрузкаОплат;
	Элементы.НастроитьТипыЗагружаемыхОплат.Доступность 	= ЗагрузкаОплат;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОплатПриИзменении(Элемент)
	Элементы.ОтборыОплаты.Доступность = ВыгрузкаОплат; 
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ПроверитьИЗакрыть(Команда)
	
	Если ЭтаФорма.Модифицированность тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры), "Были именены настройке на форме. Закрыть форму настроек без сохранения?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЭтаФорма.Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть();	
    КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Применить(Команда)
	
	Закрыть(ПрименитьНаСервере());
	
КонецПроцедуры

&НаСервере
Функция ПрименитьНаСервере()
	
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроекОбмена);

	Настройки.Заказы.ВыгрузкаОтгрузок						= ВыгрузкаОтгрузок;	
	Настройки.Заказы.ЗагрузкаОтгрузок 						= ЗагрузкаОтгрузок;
	Настройки.Заказы.ЗагрузкаОплат							= ЗагрузкаОплат;	
	
	Настройки.Заказы.НеРедактироватьДокументыПришедшиеССайта= НеРедактироватьДокументыПришедшиеССайта;	
	Настройки.Заказы.УстанавливатьРучнуюСкидкуВДокументе 	= УстанавливатьРучнуюСкидкуВДокументе;
	
	Настройки.Заказы.НастройкиКомпоновкиДанныхЗаказов		= КомпоновщикНастроекКомпоновкиДанныхЗаказов.ПолучитьНастройки();
	
	Настройки.Заказы.ГруппаДляНовойНоменклатуры 			= ГруппаДляНовойНоменклатуры;
	Настройки.Заказы.ВидНоменклатурыТовар 					= ВидНоменклатурыТовар;
	Настройки.Заказы.ВидНоменклатурыУслуга 					= ВидНоменклатурыУслуга;
	Настройки.Заказы.КонтрагентФизлицо 						= КонтрагентФизлицо;
	Настройки.Заказы.СоглашениеКонтрагентаФизлицо 			= СоглашениеКонтрагентаФизлицо;
	Настройки.Заказы.ПричинаОтменыЗаказа 					= ПричинаОтменыЗаказа;
	Настройки.Заказы.СтатусЗаказаОтменен 					= СтатусЗаказаОтменен;
	
	Настройки.Заказы.СоответствиеПлатежныхСистемИКасс 		= СоответствиеПлатежныхСистемИКасс.Выгрузить();
	
	Если ЭтоАдресВременногоХранилища(СохраненныеНастройкиЗагружаемыхДокументов) Тогда
		Настройки.Заказы.СохраненныеНастройкиЗагружаемыхДокументов	= ПолучитьИзВременногоХранилища(СохраненныеНастройкиЗагружаемыхДокументов);
	КонецЕсли;	
	
	//Проверяем и добавляем новые поля:
	Если Настройки.Заказы.Свойство("ТочкаАктуальностиВыгрузкиДокументов") тогда
		Настройки.Заказы.ТочкаАктуальностиВыгрузкиДокументов = ТочкаАктуальностиВыгрузкиДокументов;
	Иначе
		Настройки.Заказы.Вставить("ТочкаАктуальностиВыгрузкиДокументов", ТочкаАктуальностиВыгрузкиДокументов);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("ПроводитьЕслиОтгружен") тогда
		Настройки.Заказы.ПроводитьЕслиОтгружен = ПроводитьЕслиОтгружен;
	Иначе
		Настройки.Заказы.Вставить("ПроводитьЕслиОтгружен", ПроводитьЕслиОтгружен);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("ПроводитьЕслиОплачен") тогда
		Настройки.Заказы.ПроводитьЕслиОплачен = ПроводитьЕслиОплачен;
	Иначе
		Настройки.Заказы.Вставить("ПроводитьЕслиОплачен", ПроводитьЕслиОплачен);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("ВыгрузкаОплат") тогда
		Настройки.Заказы.ВыгрузкаОплат = ВыгрузкаОплат;
	Иначе
		Настройки.Заказы.Вставить("ВыгрузкаОплат", ВыгрузкаОплат);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("ЗагружаемыеТипыОплат") тогда
		Настройки.Заказы.ЗагружаемыеТипыОплат = ЗагружаемыеТипыОплат;
	Иначе
		Настройки.Заказы.Вставить("ЗагружаемыеТипыОплат", ЗагружаемыеТипыОплат);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("ВыгружатьВсеДокументы") тогда
		Настройки.Заказы.ВыгружатьВсеДокументы = ВыгружатьВсеДокументы;
	Иначе
		Настройки.Заказы.Вставить("ВыгружатьВсеДокументы", ВыгружатьВсеДокументы);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("КоличествоДокументовВПакете") тогда
		Настройки.Заказы.КоличествоДокументовВПакете = КоличествоДокументовВПакете;
	Иначе
		Настройки.Заказы.Вставить("КоличествоДокументовВПакете", КоличествоДокументовВПакете);
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОтгрузок") тогда
		Настройки.Заказы.НастройкиКомпоновкиДанныхОтгрузок = КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки();
	Иначе
		Настройки.Заказы.Вставить("НастройкиКомпоновкиДанныхОтгрузок", КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки());
	КонецЕсли;
	
	Если Настройки.Заказы.Свойство("НастройкиКомпоновкиДанныхОплат") тогда
		Настройки.Заказы.НастройкиКомпоновкиДанныхОплат = КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки();
	Иначе
		Настройки.Заказы.Вставить("НастройкиКомпоновкиДанныхОплат", КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки());
	КонецЕсли;
	
	лАдресНастроекОбмена = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, лАдресНастроекОбмена);
	Возврат ПараметрыФормы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьЗагружаемыеДокументы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипДокумента"			, "СтандартныеДокументы");
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекОбмена) Тогда
		
		ПараметрыФормы.Вставить("СохраненныеНастройкиЗагружаемыхДокументов", СохраненныеНастройкиЗагружаемыхДокументов);

		ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.ФормаНастройкиСоответствийЗагружаемыхДокументов", ПараметрыФормы,,,,, Новый ОписаниеОповещения("НастроитьСоответствияЗагружаемогоДокументаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияЗагружаемогоДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = НеОпределено Тогда
        
        Возврат;
        
    КонецЕсли;

	Если ЭтоАдресВременногоХранилища(Результат) Тогда
		СохраненныеНастройкиЗагружаемыхДокументов = ПолучитьСсылкуНаНовоеВременноеХранилище(Результат);

	КонецЕсли;
    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьСоответствияПлатежныхСистем(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("СоответствияПлатежныхКасс", СоответствиеПлатежныхСистемИКасс);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаСоответствийПлатежныхСистем", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("УстановкаСоответствийПлатежныхСистемЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура УстановкаСоответствийПлатежныхСистемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
		
		СоответствиеПлатежныхСистемИКасс.Очистить();
		
		Для каждого ТекСтрока из ОтветФормы Цикл
			
			НовСтрока = СоответствиеПлатежныхСистемИКасс.Добавить();
			НовСтрока.Касса 			= ТекСтрока.Касса;
			НовСтрока.Терминал 			= ТекСтрока.Терминал;
			НовСтрока.ПлатежнаяСистема 	= ТекСтрока.ПлатежнаяСистема;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
    КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьЗагружаемыхКонтрагентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаЗагрузкиКонтрагентов", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьЗагружаемыхКонтрагентовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);


КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗагружаемыхКонтрагентовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
        Модифицированность = Истина;
	
		ОбновлениеНастроекСервер(ОтветФормы, Ложь);
		
    КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьТипыЗагружаемыхОплат(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпкНастройки", ЗагружаемыеТипыОплат);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаНастроекСписком", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьТипыЗагружаемыхОплатЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьТипыЗагружаемыхОплатЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
		ЗагружаемыеТипыОплат = ОтветФормы;
		Модифицированность = Истина;
		
    КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура НастроитьСоответствияСтатусовЗаказов(Команда)
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаСоответствийСтатусовЗаказов", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновлениеНастроекПослеИзменения", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСлужбДоставкиЗаказов(Команда)
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", "Заказ");
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаСоответствийСлужбДоставки", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновлениеНастроекПослеИзменения", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСлужбДоставкиОтгрузок(Команда)
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", "Отгрузка");
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаСоответствийСлужбДоставки", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновлениеНастроекПослеИзменения", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеНастроекПослеИзменения(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
        Модифицированность = Истина;
	
		ОбновлениеНастроекСервер(ОтветФормы, Ложь);
		
    КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы


&НаСервере
Функция ПолучитьСсылкуНаНовоеВременноеХранилище(СтараяСсылка)
	
	ОбновляемыеДанные = ПолучитьИзВременногоХранилища(СтараяСсылка);
	НоваяСсылка = ПоместитьВоВременноеХранилище(ОбновляемыеДанные, УникальныйИдентификатор);
	
	Возврат НоваяСсылка;
	
КонецФункции

&НаСервере
Процедура ОбновлениеНастроекСервер(ОтветФормы, ОбновлятьТаблицуКаталогов = Ложь)
	
	Настройки = ПолучитьИзВременногоХранилища(ОтветФормы.АдресНастроекОбмена);
	
	АдресНастроекОбмена = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
КонецПроцедуры



#КонецОбласти

