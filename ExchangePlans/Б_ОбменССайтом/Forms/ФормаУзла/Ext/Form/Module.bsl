

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////
//                                                           //
//  ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ								//
//                                                         //
////////////////////////////////////////////////////////////

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = НеОпределено)
	
	Если НЕ ТекущийОбъект = НеОпределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);
		
		Возврат;
	
	КонецЕсли;

	ЗаполнитьТаблицуКаталоговСервер();
	ЗаполнитьОбъектыОбменаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	УзелОбменаЭтаИБ = Объект.Ссылка = ПланыОбмена.Б_ОбменССайтом.УзелОбменаЭтойИБСервер();
	
	Если УзелОбменаЭтаИБ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	Если Объект.Ссылка.пустая() тогда
		Объект.ВыгружатьТолькоИзменения 				= Истина;
		Объект.ДеактивироватьТоварыЕслиПолнаяВыгрузка 	= Истина;
		Объект.ВыгружатьЛогНаСайт 						= Истина;
		
	Иначе
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УзелОбменаЭтаИБ Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
			
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьНаСайт Тогда
		ПереключательНазначениеОбмена = 1;
	КонецЕсли;
	
	ОбновитьОтображениеКнопокРежимовОбмена();
	УстановитьВидимостьСтраницТипаОбмена();
	УстановитьНадписьРасписанияОбмена();   
	ПереключательВыгрузкаИзменений = ?(Объект.ВыгружатьТолькоИзменения, 1, 0);
	
	Если НЕ ПроверитьЗаполненностьДанных() тогда
		Элементы.ГруппаОсновная.ТекущаяСтраница = Элементы.ГруппаНастройкиПараметровОбмена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПланыОбмена.Б_ОбменССайтом.НайтиПоНаименованию(ТекущийОбъект.Наименование,Истина)) И НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) тогда
		
		Сообщить("Уже существует настройка с таким именем. Сохранение невозможно.");	
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
		Если ТекущийОбъект.Код <> "" тогда
			Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
			Если Задание = НеОпределено Тогда
				Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("Б_ЗаданиеОбменССайтом");
				Задание.Использование = Истина;
				Задание.Ключ = Строка(Новый УникальныйИдентификатор);
				Задание.Наименование = ТекущийОбъект.Наименование;
				ТекущийОбъект.ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(ТекущийОбъект.Код);
			Задание.Параметры = ПараметрыЗадания;
			Задание.Расписание = РасписаниеРегламентногоЗадания;
			Задание.Записать();
			
		Иначе
			Сообщить("Код настройки не прописался в регламентном задании. Необходимо переуказать регламентное задание настройку обмена");	
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.НастройкаВерсионностиВыгружаемыхДанных = Новый ХранилищеЗначения(СпкУстановкаВерсий);
	
	ТаблицаКаталоговТЗ = РеквизитФормыВЗначение("ТаблицаКаталогов");
	
	ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
		
		Если НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
		
		СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
		
	КонецЦикла;
	
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	
	ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекОбмена) тогда
		НастройкиОбмена = ПолучитьИзВременногоХранилища(АдресНастроекОбмена);
		
		ТекущийОбъект.СохраненныеНастройки = Новый ХранилищеЗначения(НастройкиОбмена);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВыгружатьНаСайт И НЕ ЗначениеЗаполнено(Объект.АдресСайта) тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Адрес сайта не указан. Сохранить настройку нельзя.";
		Сообщение.Поле = "АдресСайта";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.КлючДанных = Объект.ссылка;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьНаСайт И НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Каталог выгрузки не указан. Сохранить настройку нельзя.";
		Сообщение.Поле = "КаталогВыгрузки";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.КлючДанных = Объект.ссылка;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ отказ тогда
		ПостМодифицированность = Модифицированность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
		
	Если ЭтаФорма.Модифицированность тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры), "Изменения не будут сохранены. Продолжить закрытие?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Закрыть();	
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ПостМодифицированность И Объект.ОбменТоварами тогда
		
		ТекстСообщения = "Настройка была изменена. Если в результате изменения будет выгружены новые товары, рекомендуется сделать выгрузку по кнопке 'Принудительная выгрузка картинок', чтобы все картинки выгрузились";
		сообщить(ТекстСообщения);
		//ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры), ТекстСообщения, РежимДиалогаВопрос.ОК); 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПроверкиСоединения", ЭтаФорма, Параметры), "Настройка обмена изменена и не записана. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Результат = ПолучитьРезультатТестовогоПодключенияКСайтуСервер(Объект.Ссылка);
    
	    ПоказатьПредупреждение(, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПроверкиСоединения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
				
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Результат = ПолучитьРезультатТестовогоПодключенияКСайтуСервер(Объект.Ссылка);
    
	    ПоказатьПредупреждение(, Результат);
		
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатТестовогоПодключенияКСайтуСервер(УзелОбмена)

	ОсновныеПараметры = Новый Структура;
		
	НастройкиУспешноДобавлены = Б_ОбменССайтомСервер.ДобавитьОсновныеНастройкиВПараметры(УзелОбмена, ОсновныеПараметры);
		
	Результат = Б_ОбменССайтомСервер.ПолучитьРезультатТестовогоПодключенияКСайту(ОсновныеПараметры);
	Б_ОбменССайтомСервер.СообщитьПодробно(Результат, ОсновныеПараметры);	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастройкаВерсионностиВыгружаемыхДанных(Команда)
	
	Если СпкУстановкаВерсий.Количество() = 0 тогда
		СпкУстановкаВерсий = ПолучитьНастройкиВерсионности();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпкНастройки", СпкУстановкаВерсий);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.УстановкаНастроекСписком", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастройкаВерсионностиВыгружаемыхДанныхЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиВерсионности()
	
	лОбъект = РеквизитФормыВЗначение("Объект");
	
	лСпкУстановкаВерсий = лОбъект.НастройкаВерсионностиВыгружаемыхДанных.Получить();
	
	Если НЕ ЗначениеЗаполнено(лСпкУстановкаВерсий) тогда
		
		лСпкУстановкаВерсий = ЗаполнитьСпкОбъектовДляВерсий();
		
	КонецЕсли;
	
	Возврат  лСпкУстановкаВерсий;
	
КонецФункции

&НаКлиенте
Процедура НастройкаВерсионностиВыгружаемыхДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
		СпкУстановкаВерсий = ОтветФормы;
		Модифицированность = Истина;
		
    КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПринудительноеОбновлениеДанных(Команда)
	
	Если Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписиНастрйокиПередПринудительнымОбменом", ЭтаФорма, Параметры), "Настройка обмена изменена и не записана. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПринудительномОбмене", ЭтаФорма, Параметры), "Выполнить принудительное полный обмен данными?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписиНастрйокиПередПринудительнымОбменом(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
				
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПринудительномОбмене", ЭтаФорма, Параметры), "Выполнить принудительное полный обмен данными?", РежимДиалогаВопрос.ДаНет);   
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПринудительномОбмене(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗапускОбменаИнтерактивно(Объект.Ссылка, Истина);
		
    КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьВыгрузкуИнфомациоОТоварах(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаКаталогов"						, ТаблицаКаталогов);
	ПараметрыФормы.Вставить("АдресНастроекОбмена"					, АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаВыгрузкиИнформацииОНоменклатуре", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершениеСОбновлниемКаталога", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбменЗавершениеСОбновлниемКаталога(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
        Модифицированность = Истина;
		
		ОбновлениеНастроекСервер(ОтветФормы, Истина);
		
    КонецЕсли;

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьВыгрузкуПользовательскихСправочников(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена", АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаВыгрузкиПользовательскихСправочников", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьВыгрузкуВыгрузкуСкидок(Команда)
	 
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаВыгрузкиСкидок", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьВыгрузкуКартЛояльности(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаВыгрузкиКартЛояльности", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьВыгрузкуКонтрагентов(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаВыгрузкиКонтрагентов", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура НастроитьОбменДокументами(Команда)
	                                 
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекОбмена"	, АдресНастроекОбмена);
	ПараметрыФормы.Вставить("Объект"				, Объект.Ссылка);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.НастройкаОбменаДокументами", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОбменЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

////////////////////////////////////////////////////////////
&НаСервере
Процедура ОбновлениеНастроекСервер(ОтветФормы, ОбновлятьТаблицуКаталогов = Ложь)
	
	Если ЭтоАдресВременногоХранилища(ОтветФормы.АдресНастроекОбмена) тогда
	
		Настройки 	= ПолучитьИзВременногоХранилища(ОтветФормы.АдресНастроекОбмена);
		
		АдресНастроекОбмена = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	КонецЕсли;
	
	Если ОбновлятьТаблицуКаталогов тогда
		
		Для каждого ТекСтрока из ОтветФормы.ТаблицаКаталогов Цикл
			
			Если ЭтоАдресВременногоХранилища(ТекСтрока.АдресНастроекКомпоновки) тогда       
				лПеременная = ПолучитьИзВременногоХранилища(ТекСтрока.АдресНастроекКомпоновки);
			    ТекСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(лПеременная, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
   		ТаблицаКаталогов.Загрузить(ОтветФормы.ТаблицаКаталогов.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОбменЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
        Модифицированность = Истина;
	
		ОбновлениеНастроекСервер(ОтветФормы, Ложь);
		
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(ПолноеИмяФайла + "\webdata\" + Объект.Код);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
	Диалог.Каталог   = Объект.КаталогВыгрузки;
	
	Если Диалог.Выбрать() Тогда
		
		Объект.КаталогВыгрузки = Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.ФайлЗагрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение("explorer.exe /select, " + ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите xml-файл с заказами'");
	Диалог.ПолноеИмяФайла = Объект.ФайлЗагрузки;
	Диалог.Фильтр = НСтр("ru = 'Документ XML'") + " (*.xml)|*.xml";
	
	Если Диалог.Выбрать() Тогда
		
		Объект.ФайлЗагрузки = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог хранения лог файла'");
	Диалог.Каталог   = Объект.КаталогЛога;
	
	Если Диалог.Выбрать() Тогда
		
		Объект.КаталогЛога = Диалог.Каталог;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогаОткрытие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогЛога;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(ПолноеИмяФайла + "\reports");

КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогаПриИзменении(Элемент)
	
	//Если Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь И ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Истина;	
	//ИначеЕсли Элементы.ГруппаРежимОбменаДанных.Видимость = Истина И НЕ ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь;	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПриИзменении(Элемент)
	
	//Если Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь И ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Истина;	
	//ИначеЕсли Элементы.ГруппаРежимОбменаДанных.Видимость = Истина И НЕ ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь;	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресСайтаПриИзменении(Элемент)
	
	//Если Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь И ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Истина;	
	//ИначеЕсли Элементы.ГруппаРежимОбменаДанных.Видимость = Истина И НЕ ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь;	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяПриИзменении(Элемент)
	
	//Если Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь И ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Истина;	
	//ИначеЕсли Элементы.ГруппаРежимОбменаДанных.Видимость = Истина И НЕ ПроверитьЗаполненностьДанных() тогда
	//	Элементы.ГруппаРежимОбменаДанных.Видимость = Ложь;	
	//КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////
//                                                           //
//  ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С ПЕРЕКЛЮЧАТЕЛЯМИ			//
//                                                         //
////////////////////////////////////////////////////////////


&НаКлиенте
Процедура ИнициализироватьПереключатели()
	
	Если НЕ Объект.ВыгружатьНаСайт Тогда
		ПереключательНазначениеОбмена = 1;
	КонецЕсли;
	
	Если Объект.ВыгружатьТолькоИзменения Тогда
		ПереключательВыгрузкаИзменений = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательНазначениеОбмена()
	Объект.ВыгружатьНаСайт = ПереключательНазначениеОбмена = 0;
	УстановитьВидимостьСтраницТипаОбмена();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательВыгрузкаИзменений()
	Объект.ВыгружатьТолькоИзменения = ПереключательВыгрузкаИзменений = 1;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНазначениеОбменаПриИзменении(Элемент)
	ПриИзмененииПереключательНазначениеОбмена()
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВыгрузкаИзмененийПриИзменении(Элемент)
	
	ПриИзмененииПереключательВыгрузкаИзменений();
	УстановитьВидимостьСтраницТипаОбмена();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницТипаОбмена()
	
	ВыгружатьНаСайт = Объект.ВыгружатьНаСайт;
	
	Если ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
		Элементы.ВыгружатьЛогНаСайт.Видимость		 = Истина;
		Элементы.ХранитьФайлыОбменаНаСайте.Видимость = Истина;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
		Элементы.ВыгружатьЛогНаСайт.Видимость		 = Ложь;
		Элементы.ХранитьФайлыОбменаНаСайте.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДеактивироватьТоварыЕслиПолнаяВыгрузка.Видимость = (НЕ Объект.ВыгружатьТолькоИзменения И ВыгрузкаИнформацииОНоменклатуре); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЛогНаСайтПриИзменении(Элемент)
	
	Если Объект.ВыгружатьЛогНаСайт тогда
		ЭтаФорма.Элементы.ХранитьФайлыОбменаНаСайте.Доступность = Истина;	
	Иначе
		ЭтаФорма.Элементы.ХранитьФайлыОбменаНаСайте.Доступность = Ложь;	
		Объект.ХранитьФайлыОбменаНаСайте = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКнопокРежимовОбменаПриИзменении(Элемент)
	ОбновитьОтображениеКнопокРежимовОбмена();
	УстановитьВидимостьСтраницТипаОбмена();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКнопокРежимовОбмена()
	
	Элементы.НастроитьИнфомациоОТоварах.Доступность 					= ВыгрузкаИнформацииОНоменклатуре;
	Элементы.НастроитьВыгрузкуКартЛояльности.Доступность				= ВыгрузкаКартЛояльности;
	Элементы.НастроитьВыгрузкуКонтрагентов.Доступность 					= ВыгрузкаКонтрагентов;
	Элементы.НастроитьВыгрузкуСкидок.Доступность 						= ВыгрузкаСкидок;
	Элементы.НастроитьОбменЗаказов.Доступность 							= ОбменДокументами;
	Элементы.НастроитьВыгрузкуПользовательскихСправочников.Доступность 	= ВыгрузкаПользовательскихСправочников;
	
	Объект.ОбменДокументами		= ОбменДокументами;
	Объект.ОбменТоварами 		= ВыгрузкаИнформацииОНоменклатуре;
	Объект.ОбменПользовательскимиСправочниками = ВыгрузкаПользовательскихСправочников;
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекОбмена) тогда
		
		Настройки 	= ПолучитьИзВременногоХранилища(АдресНастроекОбмена);
		
		Настройки.ИнформацияОНоменклатуре.ВыгрузкаИнформацииОНоменклатуре 			= ВыгрузкаИнформацииОНоменклатуре; 
		Настройки.ПользовательскиеСправочники.ВыгрузкаПользовательскихСправочников 	= ВыгрузкаПользовательскихСправочников; 
		Настройки.КартыЛояльности.ВыгрузкаКартЛояльности 							= ВыгрузкаКартЛояльности; 
		Настройки.Скидки.ВыгрузкаСкидок 											= ВыгрузкаСкидок; 
		Настройки.Контрагенты.ВыгрузкаКонтрагентов 									= ВыгрузкаКонтрагентов; 
		Настройки.Заказы.ОбменДокументами 											= ОбменДокументами; 
		
		АдресНастроекОбмена = ПоместитьВоВременноеХранилище (Настройки, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БаннерНажатие(Элемент)
	ЗапуститьПриложение("http://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=42&CHAPTER_ID=1158");
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСРегламентнымиЗаданиями

////////////////////////////////////////////////////////////////
//                                                           //
//  ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ //
//                                                         //
////////////////////////////////////////////////////////////

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
	
	Если НЕ Задание = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	ПриИзмененииИспользоватьРегламентныеЗадания()
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		ВыполнитьНастройкуРасписанияОбмена();
		УстановитьНадписьРасписанияОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписаниеLongPulling", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписаниеLongPulling(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
КонецПроцедуры


#КонецОбласти


#Область ПроцедурыПоРаботеСТаблицейКаталогов
////////////////////////////////////////////////////////////////
//                                                           //
//  ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С ТАБЛИЦЕЙ КАТАЛОГОВ 		//
//                                                         //
////////////////////////////////////////////////////////////


&НаСервере
Процедура ЗаполнитьТаблицуКаталоговСервер()
	
	СохраненнаяТаблицаКаталогов = РеквизитФормыВЗначение("Объект").СохраненнаяТаблицаКаталогов.Получить();
	
	Если НЕ ТипЗнч(СохраненнаяТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		
		СоздатьКаталогПоУмолчаниюСервер();
		
	Иначе
	
		Для Каждого СтрокаСохраненнойТаблицыКаталогов Из СохраненнаяТаблицаКаталогов Цикл
			
			НоваяСтрока = ТаблицаКаталогов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСохраненнойТаблицыКаталогов);
			
			ХранилищеНастроекКомпоновки = СтрокаСохраненнойТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить();
			
			НоваяСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновки, УникальныйИдентификатор);
			
		КонецЦикла;
		
		Если ТаблицаКаталогов.Количество() = 0 Тогда
			
			СоздатьКаталогПоУмолчаниюСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогПоУмолчаниюСервер()

	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы.Добавить(НеОпределено,"(" + НСтр("ru = 'Все'") + ")");
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры 

#КонецОбласти


#Область УстановкиЗначенийПоУмолчанию

&НаСервере
Процедура ЗаполнитьОбъектыОбменаСервер()	
	
	СохраненнаяСтруктураНастроек = РеквизитФормыВЗначение("Объект").СохраненныеНастройки.Получить();
	
	Если ТипЗнч(СохраненнаяСтруктураНастроек) = Тип("Структура") Тогда

		ВыгрузкаИнформацииОНоменклатуре = СохраненнаяСтруктураНастроек.ИнформацияОНоменклатуре.ВыгрузкаИнформацииОНоменклатуре;
		ВыгрузкаКартЛояльности 			= СохраненнаяСтруктураНастроек.КартыЛояльности.ВыгрузкаКартЛояльности;
		ВыгрузкаКонтрагентов 			= СохраненнаяСтруктураНастроек.Контрагенты.ВыгрузкаКонтрагентов;
		ВыгрузкаПользовательскихСправочников = СохраненнаяСтруктураНастроек.ПользовательскиеСправочники.ВыгрузкаПользовательскихСправочников;
		ВыгрузкаСкидок 					= СохраненнаяСтруктураНастроек.Скидки.ВыгрузкаСкидок;
		ОбменДокументами 				= СохраненнаяСтруктураНастроек.Заказы.ОбменДокументами;
		АдресНастроекОбмена				= ПоместитьВоВременноеХранилище (СохраненнаяСтруктураНастроек, УникальныйИдентификатор);
		
	Иначе
		Объект.АдресСайта = "<Введите адрес сайта>/bitrix/admin/1c_exchange.php";

		ВыгрузкаИнформацииОНоменклатуре = Истина;
		ОбменДокументами = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ИнформацияОНоменклатуре"	, ПолучитьНастройкиИнформацииТоваровПоУмолчанию());
		СтруктураНастроек.Вставить("ПользовательскиеСправочники", ПолучитьНастройкиПользовательскихСправочниковПоУмолчанию());
		СтруктураНастроек.Вставить("КартыЛояльности", ПолучитьНастройкиКартЛояльностиПоУмолчанию());
		СтруктураНастроек.Вставить("Контрагенты"	, ПолучитьНастройкиКонтрагентовПоУмолчанию());
		СтруктураНастроек.Вставить("Скидки"			, ПолучитьНастройкиСкидокПоУмолчанию());
		СтруктураНастроек.Вставить("Заказы"			, ПолучитьНастройкиЗаказовПоУмолчанию());
		
		АдресНастроекОбмена	= ПоместитьВоВременноеХранилище (СтруктураНастроек, УникальныйИдентификатор);
		
		СпкУстановкаВерсий = ЗаполнитьСпкОбъектовДляВерсий();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиИнформацииТоваровПоУмолчанию()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБ = Новый ОписаниеТипов(Массив);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);
	
	МассивСвойств 	= ПланыОбмена.Б_ОбменССайтом.ПолучитьСписокСвойств();

	тзнСвойств = Новый ТаблицаЗначений;
	
	тзнСвойств.Колонки.Добавить("Свойство", ОписаниеТиповС);
	тзнСвойств.Колонки.Добавить("ВлияетНаЦену", ОписаниеТиповБ);
	тзнСвойств.Колонки.Добавить("ВыгружатьВХИ", ОписаниеТиповБ);
	тзнСвойств.Колонки.Добавить("НеВыгружатьВСвойстваПредложений", ОписаниеТиповБ);
	тзнСвойств.Колонки.Добавить("НеВыгружатьВСвойстваТоваров", ОписаниеТиповБ);
	
	Для каждого ТекСвойство из МассивСвойств Цикл
		
		НовоеСвойство = тзнСвойств.Добавить();
		НовоеСвойство.Свойство = ТекСвойство; 	
		НовоеСвойство.ВлияетНаЦену = Ложь; 	
		НовоеСвойство.ВыгружатьВХИ = Ложь; 	
		НовоеСвойство.НеВыгружатьВСвойстваПредложений 	= Ложь; 	
		НовоеСвойство.НеВыгружатьВСвойстваТоваров 		= Ложь; 	
		
	КонецЦикла;
	
	тзнСвойств.Сортировать("Свойство");
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаИнформацииОНоменклатуре", Истина);	
	
	Результат.Вставить("ВыгружатьЗначенияСвойствВПредложения"	, Истина);	
	Результат.Вставить("ВыгружатьХарактеристикиПредложений"		, Ложь);	
	
	Результат.Вставить("ВыгружатьЗначенияСвойствВТовары"		, Истина);	
	Результат.Вставить("ВыгружатьКартинкиИФайлы"				, Истина);	
	Результат.Вставить("ВыгружатьКартинкиИФайлыПредложений"		, Ложь);	
	Результат.Вставить("ВыгружатьКомплектующие"					, Ложь);	
	Результат.Вставить("ВыгружатьНоменклатуруКакПредложение"	, Ложь);	
	Результат.Вставить("ВыгружатьОстатки"						, Истина);	
	Результат.Вставить("ВыгружатьОстаткиПоСкладам"				, Истина);	
	Результат.Вставить("ВыгружатьОстаткиСУчетомРезерва"			, Истина);	
	Результат.Вставить("ВыгружатьПредложения"					, Истина);	
	Результат.Вставить("ВыгружатьПредложенияТолькоСЦеной"		, Ложь);	
	Результат.Вставить("ВыгружатьСвойства"						, Истина);	
	Результат.Вставить("ВыгружатьТовары"						, Истина);	
	Результат.Вставить("ВыгружатьХарактеристикиТолькоСОстатками", Ложь);	
	Результат.Вставить("ВыгружатьЦены"							, Истина);	
	Результат.Вставить("ВыгружатьШтрихкоды"						, Ложь);	
	Результат.Вставить("КоличествоПредложенийВПакете"			, 1000);	
	Результат.Вставить("КоличествоСвойствВПакете"				, 50);	
	Результат.Вставить("КоличествоТоваровВПакете"				, 1000);
	Результат.Вставить("КлассифицироватьПоВидамНоменклатуры"	, Ложь);
	
	Результат.Вставить("ВыгружатьПланируемуюДатуПоступленияПредложения"			, Ложь);	
	Результат.Вставить("ВыгружатьТолькоИспользуемыеСправочныеЗначенияСвойств"	, Истина);	
	Результат.Вставить("НастройкаСвойствТоваровИХарактеристик"					, тзнСвойств);	
	Результат.Вставить("СоответствиеДополнительныхРеквизитовНоменклатуры"		, ПланыОбмена.Б_ОбменССайтом.ЗаполнениеПолейДополнительныхСоответствийНоменклатурыПоУмолчанию());	
	Результат.Вставить("СоответствиеОсновныхРеквизитовНоменклатуры"				, ПланыОбмена.Б_ОбменССайтом.ЗаполнениеПолейОсновныхСоответствийНоменклатурыПоУмолчанию());	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиПользовательскихСправочниковПоУмолчанию()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив);

	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБ = Новый ОписаниеТипов(Массив);
	
	тзнПолейСправочников = Новый ТаблицаЗначений;
	тзнПолейСправочников.Колонки.Добавить("Справочник"			, ОписаниеТиповС);
	тзнПолейСправочников.Колонки.Добавить("Поле"				, ОписаниеТиповС);
	тзнПолейСправочников.Колонки.Добавить("Выгружаемо"			, ОписаниеТиповБ);
	тзнПолейСправочников.Колонки.Добавить("ВыгружатьКакСтрока"	, ОписаниеТиповБ);
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаПользовательскихСправочников", Ложь);	
	Результат.Вставить("ВыгружаемыеПоляСправочников", тзнПолейСправочников);
	Результат.Вставить("КоличествоЭлементовСправочникаВПакете", 1000);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиКартЛояльностиПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаКартЛояльности", Ложь);	
	Результат.Вставить("КоличествоКартЛояльностиВПакете", 100);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхКартЛояльности = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.ДисконтныеКарты, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхКартЛояльности.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхКартЛояльности.ЗагрузитьНастройки(СтруктураССхемамиК.ДисконтныеКарты.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхКартЛояльности", КомпоновщикНастроекКомпоновкиДанныхКартЛояльности.ПолучитьНастройки());	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСкидокПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаСкидок"				, Ложь);	
	Результат.Вставить("ВыгрузкаВидовКартЛояльности", Ложь);	
	Результат.Вставить("КоличествоСкидокВПакете"	, 100);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхСкидок = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Скидки, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхСкидок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхСкидок.ЗагрузитьНастройки(СтруктураССхемамиК.Скидки.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхСкидок", КомпоновщикНастроекКомпоновкиДанныхСкидок.ПолучитьНастройки());	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиКонтрагентовПоУмолчанию()
	
	Результат = Новый Структура;
	
	СпкПорядокИдентификацииЮ = новый СписокЗначений;
	СпкПорядокИдентификацииЮ.Добавить("Внешний идентификатор");
	СпкПорядокИдентификацииЮ.Добавить("Email");
	СпкПорядокИдентификацииЮ.Добавить("ИНН");
	
	СпкПорядокИдентификацииФ = новый СписокЗначений;
	СпкПорядокИдентификацииФ.Добавить("Внешний идентификатор");
	СпкПорядокИдентификацииФ.Добавить("Email");
	СпкПорядокИдентификацииФ.Добавить("Полное наименование");
	
	Результат.Вставить("ПорядокИдентификацииФизЛиц"	, СпкПорядокИдентификацииФ);	
	Результат.Вставить("ПорядокИдентификацииЮрЛиц"	, СпкПорядокИдентификацииЮ);	
	
	Результат.Вставить("ВыгрузкаКонтрагентов"						, Ложь);	
	Результат.Вставить("ГруппаДляНовыхКонтрагентов"					, Справочники.Партнеры.ПустаяСсылка());	
	Результат.Вставить("ИспользоватьФИОДляФизЛиц"					, Ложь);	
	Результат.Вставить("НеРедактироватьКонтрагентовПришедшихССайта"	, Ложь);	
	Результат.Вставить("КоличествоКонтрагентовВПакете"				, 300);	
	
	Результат.Вставить("СоответствиеАдресовЮрЛиц"	, ПланыОбмена.Б_ОбменССайтом.ЗаполнениеПолейСоответствийКонтрагентовПоУмолчанию("ЮрЛицо"));	
	Результат.Вставить("СоответствиеАдресовФизЛиц"	, ПланыОбмена.Б_ОбменССайтом.ЗаполнениеПолейСоответствийКонтрагентовПоУмолчанию("ФизЛицо"));	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Контрагенты, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ЗагрузитьНастройки(СтруктураССхемамиК.Контрагенты.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхКонтрагентов", КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ПолучитьНастройки());	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиЗаказовПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОбменДокументами"		 	, Истина);	
	Результат.Вставить("ВыгружатьВсеДокументы"		, Ложь);	
	Результат.Вставить("ТочкаАктуальностиВыгрузкиДокументов", НачалоМесяца(ТекущаяДата()));	
	
	Результат.Вставить("ВыгрузкаОплат"				, Ложь);
	Результат.Вставить("ВыгрузкаОтгрузок"			, Ложь);	
	Результат.Вставить("ЗагрузкаОплат"				, Ложь);
	Результат.Вставить("ЗагрузкаОтгрузок"			, Ложь);	                                                     	
	Результат.Вставить("ПроводитьЕслиОтгружен"		, Ложь);
	Результат.Вставить("ПроводитьЕслиОплачен"		, Ложь);	
	
	Результат.Вставить("НеРедактироватьДокументыПришедшиеССайта", Ложь);	
	
	Результат.Вставить("УстанавливатьРучнуюСкидкуВДокументе", Ложь);	
	Результат.Вставить("КоличествоДокументовВПакете", 20);	
	
	СтруктураССхемамиК = Б_ОбменССайтомСервер.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхЗаказов = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Заказы, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхЗаказов.ЗагрузитьНастройки(СтруктураССхемамиК.Заказы.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхЗаказов", КомпоновщикНастроекКомпоновкиДанныхЗаказов.ПолучитьНастройки());	
	
	КомпоновщикНастроекКомпоновкиДанныхОплат = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Оплаты, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхОплат.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхОплат.ЗагрузитьНастройки(СтруктураССхемамиК.Оплаты.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхОплат", КомпоновщикНастроекКомпоновкиДанныхОплат.ПолучитьНастройки());	
	
	КомпоновщикНастроекКомпоновкиДанныхОтгрузок = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Отгрузки, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхОтгрузок.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ЗагрузитьНастройки(СтруктураССхемамиК.Отгрузки.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхОтгрузок", КомпоновщикНастроекКомпоновкиДанныхОтгрузок.ПолучитьНастройки());	
	
	
	Результат.Вставить("ГруппаДляНовойНоменклатуры"		, Справочники.Номенклатура.ПустаяСсылка());	
	Результат.Вставить("ВидНоменклатурыТовар"			, ПолучитьВидНоменклатурыПоУмолчанию("Товар"));	
	Результат.Вставить("ВидНоменклатурыУслуга"			, ПолучитьВидНоменклатурыПоУмолчанию("Услуга"));	
	Результат.Вставить("КонтрагентФизлицо"				, Справочники.Контрагенты.ПустаяСсылка());	
	Результат.Вставить("СоглашениеКонтрагентаФизлицо"	, Справочники.СоглашенияСКлиентами.ПустаяСсылка());	
	Результат.Вставить("ПричинаОтменыЗаказа"			, Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка());	
	Результат.Вставить("СтатусЗаказаОтменен"			, "");
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ЭквайринговыеТерминалы"));
	ОписаниеТиповЭТ = Новый ОписаниеТипов(Массив);

	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Кассы"));
	ОписаниеТиповК = Новый ОписаниеТипов(Массив);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СписокЗначений"));
	ОписаниеТиповСпк = Новый ОписаниеТипов(Массив);
	
	СоответствиеПлатежныхСистемИКасс = Новый ТаблицаЗначений;
	СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("ПлатежнаяСистема"		, ОписаниеТиповСпк);
	СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Касса"					, ОписаниеТиповК);
	СоответствиеПлатежныхСистемИКасс.Колонки.Добавить("Терминал"				, ОписаниеТиповЭТ);
	
	Результат.Вставить("СоответствиеПлатежныхСистемИКасс", СоответствиеПлатежныхСистемИКасс);	
	
	Результат.Вставить("СохраненныеНастройкиЗагружаемыхДокументов" 	, ПланыОбмена.Б_ОбменССайтом.ЗаполнениеСоответствийЗагружаемыхДокументовПоУмолчанию());
	
	
	ЗагружаемыеТипыОплат = Новый СписокЗначений;
	ЗагружаемыеТипыОплат.Добавить("Выплата наличных денег"		,, Истина);
	ЗагружаемыеТипыОплат.Добавить("Эквайринговая операция"		,, Истина);
	ЗагружаемыеТипыОплат.Добавить("Выплата безналичных денег"	,, Истина);
	
	Результат.Вставить("ЗагружаемыеТипыОплат"	, ЗагружаемыеТипыОплат);	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВидНоменклатурыПоУмолчанию(НазваниеВидаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВидов = Новый Массив;
	
	Справочники.ВидыНоменклатуры.ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, ?(НазваниеВидаНоменклатуры = "Товар", Перечисления.ТипыНоменклатуры.Товар, Перечисления.ТипыНоменклатуры.Услуга),НазваниеВидаНоменклатуры);
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Если МассивВидов.Количество() > 0 тогда	
		ВидНоменклатуры = МассивВидов[0];	
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
конецФункции

#КонецОбласти


#Область ПроцедурыВыполненияОбмена

////////////////////////////////////////////////////////////////
//                                                           //
//  ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ОБМЕНА								//
//                                                         //
////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСохраненииНастройкиОбменаДанных", ЭтаФорма, Параметры), "Настройка обмена изменена и не записана. Записать?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗапускОбменаИнтерактивно(Объект.Ссылка, Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСохраненииНастройкиОбменаДанных(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
				
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ЗапускОбменаИнтерактивно(Объект.Ссылка, Ложь);
	
    КонецЕсли;

КонецПроцедуры

#Область ПрочиеФункцииИПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ЗапускОбменаИнтерактивно(УзелОбмена, ПринудительнаяПолноеОбновлениеДанныхТовара)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УзелОбмена", УзелОбмена);
	ПараметрыФормы.Вставить("ПринудительнаяПолноеОбновлениеДанныхТовара", ПринудительнаяПолноеОбновлениеДанныхТовара);
	
	ОткрытьФорму("ПланОбмена.Б_ОбменССайтом.Форма.ФормаВыполнениеОбмена", ПараметрыФормы, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполненностьДанных()
	
	ДанныеЗаполнены = Истина;
	
	
	Если ПереключательНазначениеОбмена = 0 тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.АдресСайта) тогда
			ДанныеЗаполнены = Ложь;
		КонецЕсли;	
			
			
		Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователя) тогда
			ДанныеЗаполнены = Ложь;
		КонецЕсли;	
			
	Иначе 	
			
		Если НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) тогда
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогЛога) тогда
		ДанныеЗаполнены = Ложь;
	КонецЕсли;	
	
	Возврат ДанныеЗаполнены;
		
КонецФункции

Функция ЗаполнитьСпкОбъектовДляВерсий()
	
	лСпкУстановкаВерсий = Новый СписокЗначений;
	
	лСпкУстановкаВерсий.Добавить("Свойств");
	лСпкУстановкаВерсий.Добавить("Значений свойств");
	лСпкУстановкаВерсий.Добавить("Складов");
	лСпкУстановкаВерсий.Добавить("Типов цен");
	лСпкУстановкаВерсий.Добавить("Единиц измерений");
	лСпкУстановкаВерсий.Добавить("Групп");
	лСпкУстановкаВерсий.Добавить("Товаров",,Истина);
	лСпкУстановкаВерсий.Добавить("Предложений");
	лСпкУстановкаВерсий.Добавить("Документов");
	лСпкУстановкаВерсий.Добавить("Контрагентов");
	лСпкУстановкаВерсий.Добавить("Скидок");
	лСпкУстановкаВерсий.Добавить("Карт лояльности");
	лСпкУстановкаВерсий.Добавить("Видов карт лояльности");
	
	Возврат лСпкУстановкаВерсий;
	
КонецФункции



#КонецОбласти

#КонецОбласти

