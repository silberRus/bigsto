#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииБсп

// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Истина;
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса			 = Ложь;
	
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки	= Истина;
	Настройки.Алгоритмы.ОписаниеОграниченийПередачиДанных		= Истина;
	Настройки.Алгоритмы.ОписаниеЗначенийПоУмолчанию				= Истина;
	
КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные между конфигурациями ""Управление торговлей"", ред. 11, и ""Розница"", ред. 1.
		|Синхронизация данных выполняется в двустороннем режиме на уровне документов и справочной информации.'"); 
	
	ОписаниеВарианта.ПутьКФайлуКомплектаПравилНаПользовательскомСайте	= "";
	ОписаниеВарианта.ПутьКФайлуКомплектаПравилВКаталогеШаблонов 		= "\1c\Retail";
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника 						= "Настройки для обмена УТ11.1-РТ1.0";
	ОписаниеВарианта.ИспользоватьПомощникСозданияОбменаДанными			= Истина;
	ОписаниеВарианта.ИспользуемыеТранспортыСообщенийОбмена				= ИспользуемыеТранспортыСообщенийОбмена();
	ОписаниеВарианта.КраткаяИнформацияПоОбмену							= КраткаяИнформацияПоОбмену;
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену						= "ПланыОбмена.ОбменУправлениеТорговлей_11_0_РозничнаяТорговля_1_0.Форма.ПодробнаяИнформация";
	ОписаниеВарианта.ЗначенияПоУмолчанию								= ЗначенияПоУмолчаниюНаУзле(ИдентификаторНастройки);
	ОписаниеВарианта.Отборы												= НастройкаОтборовНаУзле(ИдентификаторНастройки);
	
КонецПроцедуры

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ИдентификаторНастройки = "")
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",                НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоВидамЦенНоменклатуры",     Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоЭквайринговымТерминалам",  Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоКассам",                   Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоКонтрагентам",             Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоНоменклатуре",             Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",             Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоСкладам",                  Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоФизическимЛицам",          Ложь);
	
	СтруктураТабличнойЧастиВидыЦенНоменклатуры = Новый Структура("ВидЦенНоменклатуры", Новый Массив);
	СтруктураНастроек.Вставить("ВидыЦенНоменклатуры", СтруктураТабличнойЧастиВидыЦенНоменклатуры);
	
	СтруктураТабличнойЧастиЭквайринговыеТерминалы = Новый Структура("ЭквайринговыйТерминал", Новый Массив);
	СтруктураНастроек.Вставить("ЭквайринговыеТерминалы", СтруктураТабличнойЧастиЭквайринговыеТерминалы);
	
	СтруктураТабличнойЧастиКассы = Новый Структура("Касса", Новый Массив);
	СтруктураНастроек.Вставить("Кассы", СтруктураТабличнойЧастиКассы);
	
	СтруктураТабличнойЧастиКассыМагазинов = Новый Структура("Касса", Новый Массив);
	СтруктураНастроек.Вставить("КассыМагазинов", СтруктураТабличнойЧастиКассыМагазинов);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура("Организация", Новый Массив);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	СтруктураТабличнойЧастиСклады = Новый Структура("Склад", Новый Массив);
	СтруктураНастроек.Вставить("Склады", СтруктураТабличнойЧастиСклады);
	
	СтруктураТабличнойЧастиСклады = Новый Структура("Склад", Новый Массив);
	СтруктураНастроек.Вставить("Склады", СтруктураТабличнойЧастиСклады);
	
	СтруктураТабличнойЧастиСоответствияАналитикиОбмена = Новый Структура("Магазин,ПодразделениеУТ", Новый Массив, Новый Массив);
	СтруктураНастроек.Вставить("СоответствияАналитикиОбмена", СтруктураТабличнойЧастиСоответствияАналитикиОбмена);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ИдентификаторНастройки = "")
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыгружатьСебестоимость", Ложь);
	СтруктураНастроек.Вставить("СтатьяДДС_ОплатаОтПокупателя");
	СтруктураНастроек.Вставить("СтатьяДДС_ВозвратДСПоставщиком");
	СтруктураНастроек.Вставить("СтатьяДДС_ПрочиеРасчетыСКонтрагентамиПоступление");
	СтруктураНастроек.Вставить("СтатьяДДС_ПрочийПриходДенежныхСредств");
	СтруктураНастроек.Вставить("СтатьяДДС_ОплатаПоставщику");
	СтруктураНастроек.Вставить("СтатьяДДС_ВозвратДСПокупателю");
	СтруктураНастроек.Вставить("СтатьяДДС_ПрочиеРасчетыСКонтрагентамиВыдача");
	СтруктураНастроек.Вставить("СтатьяДДС_ПрочийРасходДенежныхСредств");
	СтруктураНастроек.Вставить("СтатьяРасходов_ПоступлениеУслуг");
	
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	// Ограничение по дате документов
	ТекстОписания = ?(ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов),
						 "Документы выгружаются начиная с " + Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДФ=dd.MM.yyyy"),
						 "Документы выгружаются за весь период") + ";";
	
	// Отбор по организации
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по организациям: " 
						+ ОбменДаннымиУТУП.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений) + ";";
						
	КонецЕсли;
	
	// Отбор по кассам
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоКассам Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Кассы.Касса;
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по кассам: " 
						+ ОбменДаннымиУТУП.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений) + ";";
						
	КонецЕсли;
	
	// Отбор по складам
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоСкладам Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Склады.Склад;
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по складам: " 
						+ ОбменДаннымиУТУП.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений) + ";";
						
	КонецЕсли;
	
	// Отбор по эквайринговым терминалам
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоЭквайринговымТерминалам Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ЭквайринговыеТерминалы.ЭквайринговыйТерминал;
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по эквайринговым терминалам: " 
						+ ОбменДаннымиУТУП.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений) + ";";
						
	КонецЕсли;
	
	// Отбор по видам цен номенклатуры
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамЦенНоменклатуры Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыЦенНоменклатуры.ВидЦенНоменклатуры;
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по видам цен номенклатуры: " 
						+ ОбменДаннымиУТУП.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений) + ";";
						
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = "";
	
	ТекстОписания = ТекстОписания + Символы.ПС + "Выгрузка себестоимости: " 
					+ Формат(ЗначенияПоУмолчаниюНаУзле.ВыгружатьСебестоимость, "БЛ=Выключено; БИ=Включено") + ";";
	
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при оплате от покупателя: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ОплатаОтПокупателя),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ОплатаОтПокупателя), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при возврате денежных средств поставщиком: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ВозвратДСПоставщиком),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ВозвратДСПоставщиком), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при прочих расчетах с контрагентами (поступление): "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочиеРасчетыСКонтрагентамиПоступление),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочиеРасчетыСКонтрагентамиПоступление), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при прочем приходе денежных средств: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочийПриходДенежныхСредств),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочийПриходДенежныхСредств), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при оплате поставщику: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ОплатаПоставщику),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ОплатаПоставщику), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при возврате денежных средств покупателю: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ВозвратДСПокупателю),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ВозвратДСПокупателю), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при прочих расчетах с контрагентами (выдача): "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочиеРасчетыСКонтрагентамиВыдача),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочиеРасчетыСКонтрагентамиВыдача), "не указана")
					+ ";" + Символы.ПС;
									  
	ТекстОписания = ТекстОписания 
					+ "Статья ДДС при прочем расходе денежных средств: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочийРасходДенежныхСредств),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяДДС_ПрочийРасходДенежныхСредств), "не указана")
					+ ";" + Символы.ПС;
					
	ТекстОписания = ТекстОписания 
					+ "Статья расходов при поступлении услуг: "
					+ ?(ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяРасходов_ПоступлениеУслуг),
						Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяРасходов_ПоступлениеУслуг), "не указана") + ";";
									  
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
