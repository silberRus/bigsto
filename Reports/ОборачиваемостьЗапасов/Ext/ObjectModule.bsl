
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов -
//           Тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений -
//           Объекты, которые будут предложены пользователю в списке выбора.
//           Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос -
//           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//           Когда Истина, то выбор пользователя будет ограничен значениями,
//           указанными в ЗначенияДляВыбора (его конечным состоянием).
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	Если СвойстваНастройки.ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ИсключаемыеРасходыТоварыНаСкладах") Тогда
		Если ТипЗнч(СвойстваНастройки.ЗначенияДляВыбора) = Тип("СписокЗначений") Тогда
			УдаляемоеЗначениеВыбора = СвойстваНастройки.ЗначенияДляВыбора.НайтиПоЗначению("ПередачаМатериаловВПроизводство");
			Если УдаляемоеЗначениеВыбора <> Неопределено Тогда
				СвойстваНастройки.ЗначенияДляВыбора.Удалить(УдаляемоеЗначениеВыбора);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СвойстваНастройки.Значение) = Тип("СписокЗначений") Тогда
			УдаляемоеЗначение = СвойстваНастройки.Значение.НайтиПоЗначению("ПередачаМатериаловВПроизводство");
			Если УдаляемоеЗначение <> Неопределено Тогда
				СвойстваНастройки.Значение.Удалить(УдаляемоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СвойстваНастройки.ОтмеченныеЗначения) = Тип("СписокЗначений") Тогда
			УдаляемоеОтмеченноеЗначение = СвойстваНастройки.ОтмеченныеЗначения.НайтиПоЗначению("ПередачаМатериаловВПроизводство");
			Если УдаляемоеОтмеченноеЗначение <> Неопределено Тогда
				СвойстваНастройки.ОтмеченныеЗначения.Удалить(УдаляемоеОтмеченноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Проверка обязательного параметра
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		НастройкаВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
		Если НастройкаВидЦены.Использование И Не ЗначениеЗаполнено(НастройкаВидЦены.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено обязательное поле ""Вид цены"".'"), , , , Отказ);
		КонецЕсли;
	Иначе
		ВидЦеныПоУмолчанию = Ценообразование.ВидЦеныПрайсЛист();
		Если ЗначениеЗаполнено(ВидЦеныПоУмолчанию) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидЦены", ВидЦеныПоУмолчанию);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В системе не настроены параметры прайс-листа.'"), , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	НастройкаПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	НастройкаПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");	
	
	Если Не ЗначениеЗаполнено(НастройкаПериод.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено обязательное поле ""Период"".'"), , , , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаПериодичность.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено обязательное поле ""Периодичность"".'"), , , , Отказ);
	КонецЕсли;
	
	// Проверка на корректность заданных пользователем периодов
	Если ЗначениеЗаполнено(НастройкаПериод.Значение) 
		И ЗначениеЗаполнено(НастройкаПериодичность.Значение) Тогда
		Если НЕ НастройкаПериодаЗаданаКорректно(НастройкаПериод.Значение.ДатаНачала,
			НастройкаПериод.Значение.ДатаОкончания,
			НастройкаПериодичность.Значение) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Периодичность расчета должна быть короче периода отчета.'"), , , , Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	// Сформируем отчет
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидЦены", Ценообразование.ВидЦеныПрайсЛист());
	КонецЕсли;
	
	НастройкаПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", НастройкаПериод.Значение.ДатаНачала);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", НастройкаПериод.Значение.ДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализация таблицы отчета.
	СКДВспомогательнойТаблицы = ПолучитьМакет("СхемаКомпоновкиДанныхТаблица");
	ТаблицаОтчета = ТаблицаДанныхОтчета(НастройкиОтчета, СКДВспомогательнойТаблицы);
	
	// Инициализация таблицы отчета за аналогичный период прошлого года.
	НастройкаСравниватьСАналогичнымПериодомПрошлогоГода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СравниватьСАналогичнымПериодомПрошлогоГода");
	СравниватьСАналогичнымПериодомПрошлогоГода = НастройкаСравниватьСАналогичнымПериодомПрошлогоГода.Значение;
	Если СравниватьСАналогичнымПериодомПрошлогоГода Тогда
		НачалоАналогичногоПериода = ДобавитьМесяц(НастройкаПериод.Значение.ДатаНачала, -12);
		ОкончаниеАналогичногоПериода = ДобавитьМесяц(НастройкаПериод.Значение.ДатаОкончания, -12);
		
		НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоАналогичногоПериода);
		НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", ОкончаниеАналогичногоПериода);
		
		// Получим данные по аналогичному периоду прошлого года и загрузим их в таблицу отчета.
		ТаблицаОтчетаПрошлогоГода = ТаблицаДанныхОтчета(НастройкиОтчета, СКДВспомогательнойТаблицы);
		Для Каждого СтрОтчета Из ТаблицаОтчета Цикл
			ОтборДляПоиска = Новый Структура("СтатусТоваров, СкладПартнер, Номенклатура, Характеристика");
			ОтборДляПоиска.Вставить("СтатусТоваров", СтрОтчета.СтатусТоваров);
			ОтборДляПоиска.Вставить("СкладПартнер", СтрОтчета.СкладПартнер);
			ОтборДляПоиска.Вставить("Номенклатура", СтрОтчета.Номенклатура);
			ОтборДляПоиска.Вставить("Характеристика", СтрОтчета.Характеристика);
			
			МассивСтрок = ТаблицаОтчетаПрошлогоГода.НайтиСтроки(ОтборДляПоиска);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				СтрОтчета.СреднийОстатокЗаПериодПрошлыйГод			= МассивСтрок[0].СреднийОстатокЗаПериод;
				СтрОтчета.СреднийОстатокЗаПериодСуммаПрошлыйГод		= МассивСтрок[0].СреднийОстатокЗаПериодСумма;
				СтрОтчета.РасходЗаПериодПрошлыйГод					= МассивСтрок[0].РасходЗаПериод;
				СтрОтчета.РасходЗаПериодСуммаПрошлыйГод 			= МассивСтрок[0].РасходЗаПериодСумма;
				СтрОтчета.ОборачиваемостьПрошлыйГод					= МассивСтрок[0].Оборачиваемость;
				СтрОтчета.ОборачиваемостьСуммаПрошлыйГод			= МассивСтрок[0].ОборачиваемостьСумма;
				СтрОтчета.КоличествоИнтерваловВПериодеПрошлыйГод	= МассивСтрок[0].КоличествоИнтерваловВПериоде;
			КонецЕсли;																  
			
		КонецЦикла;	
		
		АналогичныйПериодПрошлогоГода = Новый СтандартныйПериод;
		АналогичныйПериодПрошлогоГода.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		АналогичныйПериодПрошлогоГода.ДатаНачала = НачалоАналогичногоПериода;
		АналогичныйПериодПрошлогоГода.ДатаОкончания = ОкончаниеАналогичногоПериода;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "АналогичныйПериодПрошлогоГода", АналогичныйПериодПрошлогоГода);
	КонецЕсли;
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьПрошлыйГод",	СравниватьСАналогичнымПериодомПрошлогоГода);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьСуммаПрошлыйГод",		СравниватьСАналогичнымПериодомПрошлогоГода);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаПрошлыйГод",					СравниватьСАналогичнымПериодомПрошлогоГода);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаСуммаПрошлыйГод",				СравниватьСАналогичнымПериодомПрошлогоГода);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьПрошлыйГодПриведенная",		СравниватьСАналогичнымПериодомПрошлогоГода);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаПрошлыйГодПриведенная",					СравниватьСАналогичнымПериодомПрошлогоГода);
	
	// Инициализация таблицы отчета за предыдущий период.
	НастройкаСравниватьСПредыдущимПериодом = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СравниватьСПредыдущимПериодом");
	СравниватьСПредыдущимПериодом = НастройкаСравниватьСПредыдущимПериодом.Значение;
	Если СравниватьСПредыдущимПериодом Тогда
		
		ПредыдущийПериод = ПредыдущийПериод(НастройкаПериод.Значение.ДатаНачала, НастройкаПериод.Значение.ДатаОкончания);
		НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", ПредыдущийПериод.ДатаНачала);
		НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", ПредыдущийПериод.ДатаОкончания);
		
		// Получим данные по предыдущему периоду и загрузим их в таблицу отчета.
		ТаблицаОтчетаПредыдущийПериод = ТаблицаДанныхОтчета(НастройкиОтчета, СКДВспомогательнойТаблицы);
		Для Каждого СтрОтчета Из ТаблицаОтчета Цикл
			ОтборДляПоиска = Новый Структура("СтатусТоваров, СкладПартнер, Номенклатура, Характеристика");
			ОтборДляПоиска.Вставить("СтатусТоваров", СтрОтчета.СтатусТоваров);
			ОтборДляПоиска.Вставить("СкладПартнер", СтрОтчета.СкладПартнер);
			ОтборДляПоиска.Вставить("Номенклатура", СтрОтчета.Номенклатура);
			ОтборДляПоиска.Вставить("Характеристика", СтрОтчета.Характеристика);
			
			МассивСтрок = ТаблицаОтчетаПредыдущийПериод.НайтиСтроки(ОтборДляПоиска);

			Если МассивСтрок.Количество() <> 0 Тогда
				СтрОтчета.СреднийОстатокЗаПериодПредыдущийПериод 	   = МассивСтрок[0].СреднийОстатокЗаПериод;
				СтрОтчета.СреднийОстатокЗаПериодСуммаПредыдущийПериод  = МассивСтрок[0].СреднийОстатокЗаПериодСумма;
				СтрОтчета.РасходЗаПериодПредыдущийПериод 	 		   = МассивСтрок[0].РасходЗаПериод;
				СтрОтчета.РасходЗаПериодСуммаПредыдущийПериод 		   = МассивСтрок[0].РасходЗаПериодСумма;
				СтрОтчета.ОборачиваемостьПредыдущийПериод 	 		   = МассивСтрок[0].Оборачиваемость;
				СтрОтчета.ОборачиваемостьСуммаПредыдущийПериод 		   = МассивСтрок[0].ОборачиваемостьСумма;
				СтрОтчета.КоличествоИнтерваловВПериодеПредыдущийПериод = МассивСтрок[0].КоличествоИнтерваловВПериоде;
			КонецЕсли;																  
			
		КонецЦикла;	
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ПредыдущийПериод", ПредыдущийПериод);
	КонецЕсли;
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьПредыдущийПериод",				СравниватьСПредыдущимПериодом);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьСуммаПредыдущийПериод",			СравниватьСПредыдущимПериодом);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаПредыдущийПериод",						СравниватьСПредыдущимПериодом);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаСуммаПредыдущийПериод",				СравниватьСПредыдущимПериодом);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ОборачиваемостьПредыдущийПериодПриведенная",	СравниватьСПредыдущимПериодом);
	УстановитьСнятьИспользованиеУВыбранногоПоля(НастройкиОтчета.Выбор.Элементы, "ДинамикаПредыдущийПериодПриведенная",			СравниватьСПредыдущимПериодом);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкаВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
	Валюта = ?(ЗначениеЗаполнено(НастройкаВидЦены.Значение), Строка(НастройкаВидЦены.Значение.ВалютаЦены), "");
	ДобавитьВалютуВЗаголовокВыбранныхПолей(НастройкиОтчета.Выбор.Элементы, Валюта);
	ДобавитьВалютуВЗаголовокВыбранныхПолейГруппировки(НастройкиОтчета.Структура, Валюта);
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаОтчета", ТаблицаОтчета);
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Проверим, что хотя бы одна группировка отчета включена
	Если МакетКомпоновки.НаборыДанных.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru= 'Отчет не сформирован. Включите хотя бы одну группировку в ""Элементы оформления и группировки"".'") ;
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДанныхОтчета

// Подготавливает основную таблицу данных для вывода отчета.
//
// Параметры:
//  Настройки  		   - <НастройкиКомпоновкиДанных> - Настройки, по которым инициализируется схема компоновки таблицы отчета.
//
// Возвращаемое значение:
//   <ТаблицаЗначений> - Таблица с данными.
//
Функция ТаблицаДанныхОтчета(Настройки, СхемаКомпоновки)
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	
	НастройкаПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	Периодичность = НастройкаПериодичность.Значение;
	
	НастройкаСтатусТоваров = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СтатусТоваров");
	СтатусТоваров = НастройкаСтатусТоваров.Значение;
	
	// Изменяем текст запроса - устанавливаем необходимую периодичность.	
	НаборДанныхЗапрос = СхемаКомпоновки.НаборыДанных.НаборДанныхЗапрос;
	НаборДанныхЗапрос.Запрос = СтрЗаменить(НаборДанныхЗапрос.Запрос, "Запись", Строка(Периодичность));
	
	НастройкиСКДТаблица = СхемаКомпоновки.НастройкиПоУмолчанию;
	УстановитьНастройкиСКД(НастройкиСКДТаблица, Настройки);
	
	// Устанавливаем параметры.
	ТекущиеПараметры = НастройкиСКДТаблица.ПараметрыДанных;
	ТекущиеПараметры.УстановитьЗначениеПараметра("ВсеТовары", 			 СтатусТоваров = 0);
	ТекущиеПараметры.УстановитьЗначениеПараметра("ТоварыНаСкладах", 	 СтатусТоваров = 1);
	ТекущиеПараметры.УстановитьЗначениеПараметра("ТоварыУКомиссионеров", СтатусТоваров = 2);
	
	// Параметры НачалоПериода и КонецПериода присутствуют всегда - в них содержится период формирования 
	// вспомогательных таблиц с данными.
	ТекущиеПараметры.УстановитьЗначениеПараметра("ДатаНач", ДополнительныеСвойства.НачалоПериода);
	ТекущиеПараметры.УстановитьЗначениеПараметра("ДатаКон", ДополнительныеСвойства.КонецПериода);
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиСКДТаблица,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//Создадим и инициализируем процессор вывода результата.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	// В таблице значений может не оказаться характеристик (по функциональной опции) - добавим колонку.
	Если ТаблицаРезультат.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаРезультат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаРезультат.ЗаполнитьЗначения(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "Характеристика");
		УстановитьСнятьИспользованиеУВыбранногоПоля(Настройки.Выбор.Элементы,, Ложь);
		УстановитьСнятьИспользованиеУГруппировки(Настройки.Структура,, Ложь);
	КонецЕсли;
	// В таблице значений может не оказаться партнера (по функциональной опции) - добавим колонку.
	Если ТаблицаРезультат.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаРезультат.Колонки.Добавить("Партнер");
		ТаблицаРезультат.ЗаполнитьЗначения(Null, "Партнер");
	КонецЕсли;
	// В таблице значений может не оказаться ABC/XYZ(по функциональной опции) - добавим колонки.
	Если ТаблицаРезультат.Колонки.Найти("ABC") = Неопределено Тогда
		ТаблицаРезультат.Колонки.Добавить("ABC");
		ТаблицаРезультат.ЗаполнитьЗначения(Перечисления.ABCКлассификация.ПустаяСсылка(), "ABC");
	КонецЕсли;
	Если ТаблицаРезультат.Колонки.Найти("XYZ") = Неопределено Тогда
		ТаблицаРезультат.Колонки.Добавить("XYZ");
		ТаблицаРезультат.ЗаполнитьЗначения(Перечисления.XYZКлассификация.ПустаяСсылка(), "XYZ");
	КонецЕсли;
	
	ТаблицаДанных = ТаблицаПоказателейОборачиваемости(Настройки, ТаблицаРезультат);
	
	Возврат ТаблицаДанных;
КонецФункции

// Рассчитывает необходимые показатели отчета по таблице.
//
// Параметры:
//  РазвернутаяТаблица - <ТаблицаЗначений> - Таблица, по которой рассчитываются показатели.
//
// Возвращаемое значение:
//   <ТаблицаЗначений> - Таблица с рассчитанными данными.
//
Функция ТаблицаПоказателейОборачиваемости(Настройки, РазвернутаяТаблица)
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	
	// Создаем таблицу данных со структурой колонок идентичной структуре колонок развернутой таблицы.
	ТаблицаДанных = РазвернутаяТаблица.Скопировать();
	ТаблицаДанных.Очистить();
	
	// Добавим необходимые колонки.
	КолонкиТаблицы = ТаблицаДанных.Колонки;
	СтрокаКолонки = "НормативнаяОборачиваемость, 
	|СреднийОстатокЗаПериод, 					СреднийОстатокЗаПериодСумма, 					РасходЗаПериод,					РасходЗаПериодСумма, 
	|СреднийОстатокЗаПериодПрошлыйГод, 		СреднийОстатокЗаПериодСуммаПрошлыйГод, 			РасходЗаПериодПрошлыйГод, 		РасходЗаПериодСуммаПрошлыйГод,
	|СреднийОстатокЗаПериодПредыдущийПериод,	СреднийОстатокЗаПериодСуммаПредыдущийПериод,	РасходЗаПериодПредыдущийПериод,	РасходЗаПериодСуммаПредыдущийПериод,
	|
	|Оборачиваемость, 				ОборачиваемостьСумма,					КоличествоИнтерваловВПериоде,
	|ОборачиваемостьПрошлыйГод,		ОборачиваемостьСуммаПрошлыйГод,			КоличествоИнтерваловВПериодеПрошлыйГод,
	|ОборачиваемостьПредыдущийПериод,	ОборачиваемостьСуммаПредыдущийПериод,	КоличествоИнтерваловВПериодеПредыдущийПериод,
	|
	|ДинамикаПрошлыйГод,				ДинамикаСуммаПрошлыйГод,
	|ДинамикаПредыдущийПериод,		ДинамикаСуммаПредыдущийПериод,
	|
	|КоэффициентОборачиваемости,		КоэффициентОборачиваемостиСумма,
	|ОтклонениеОборачиваемости,		ОтклонениеОборачиваемостиСумма,
	|СреднийРасход,					СреднийРасходСумма, 
	|УровеньЗапасов,					УровеньЗапасовСумма, 
	|Резерв,							РезервСумма, 
	|
	|МетодОбеспеченияПотребностей, Валюта, КонечныйОстатокСумма";

	СтруктураКолонок = Новый Структура(СтрокаКолонки);
	Для Каждого ДобавляемаяКолонка Из СтруктураКолонок Цикл
		Если КолонкиТаблицы.Найти(ДобавляемаяКолонка.Ключ) = Неопределено Тогда
			КолонкиТаблицы.Добавить(ДобавляемаяКолонка.Ключ);
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаНоменклатуры = РазвернутаяТаблица.Скопировать();
	СтрокаСвернуть = "СкладПартнер, Номенклатура, Характеристика, СтатусТоваров, ABC, XYZ";
	ТаблицаНоменклатуры.Свернуть(СтрокаСвернуть);
	
	ОтборНоменклатуры = ТаблицаНоменклатуры.Скопировать();
	ОтборНоменклатуры.Свернуть("Номенклатура, Характеристика");
	НаборНоменклатуры  = ОтборНоменклатуры.ВыгрузитьКолонку("Номенклатура"); 
	НаборХарактеристик = ОтборНоменклатуры.ВыгрузитьКолонку("Характеристика"); 
	
	НаборСкладов = Новый Массив;
	НаборСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	НаборПартнеров = Новый Массив;
	НаборПартнеров.Добавить(Справочники.Партнеры.ПустаяСсылка());
	ОтборСкладПартнер = ТаблицаНоменклатуры.Скопировать();
	ОтборСкладПартнер.Свернуть("СкладПартнер");
	Для Каждого СтрокаОтбор Из ОтборСкладПартнер Цикл
		Если ТипЗнч(СтрокаОтбор.СкладПартнер) = Тип("СправочникСсылка.Склады") Тогда
			НаборСкладов.Добавить(СтрокаОтбор.СкладПартнер);
		ИначеЕсли ТипЗнч(СтрокаОтбор.СкладПартнер) = Тип("СправочникСсылка.Партнеры") Тогда
			НаборПартнеров.Добавить(СтрокаОтбор.СкладПартнер);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаЦенНоменклатуры			   = ТаблицаЦенНоменклатуры(Настройки, НаборНоменклатуры, НаборХарактеристик);
	ТаблицаРасходаТоварыНаСкладах 	   = ТаблицаРасходаЗаПериодТоварыНаСкладах(Настройки, ТаблицаЦенНоменклатуры, НаборСкладов, НаборНоменклатуры, НаборХарактеристик);
	ТаблицаРасходаТоварыУКомиссионеров = ТаблицаРасходаЗаПериодТоварыУКомиссионеров(Настройки, ТаблицаЦенНоменклатуры, НаборПартнеров, НаборНоменклатуры, НаборХарактеристик);
	ТаблицаНормативнойОборачиваемости  = ТаблицаНормативнойОборачиваемостиТоварыНаСкладах(НаборСкладов, ОтборНоменклатуры);
	
	ПеременныеРасчета = Новый Структура("
		|Номенклатура, 
		|Характеристика, 
		|ТаблицаЦен,
		|КонтрольныхТочек, 
		|СуммарныйОстатокПоКоличеству, 
		|СуммарныйОстатокПоСумме, 
		|КонечныйОстаток, 
		|ТочкаОтсчета, 
		|ИсключатьДниОтсутствияТовара"); 
	
	НастройкаИсключатьДниОтсутствияТовара = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ИсключатьДниОтсутствияТовара");
	
	ПеременныеРасчета.ИсключатьДниОтсутствияТовара = НастройкаИсключатьДниОтсутствияТовара.Значение;
	
	ТаблицаЦенНоменклатуры.Индексы.Добавить("Номенклатура, Характеристика");
	ПеременныеРасчета.ТаблицаЦен = ТаблицаЦенНоменклатуры;
	
	НастройкаЕдиницаОборачиваемости = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницаОборачиваемости");
	ЕдиницаОборачиваемости = НастройкаЕдиницаОборачиваемости.Значение;
	
	НастройкаВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
	ВидЦены = НастройкаВидЦены.Значение;
		
	Для Каждого СтрНоменклатура Из ТаблицаНоменклатуры Цикл
		ТекСкладПартнер   = СтрНоменклатура.СкладПартнер;
		ТекНоменклатура   = СтрНоменклатура.Номенклатура;
		ТекХарактеристика = СтрНоменклатура.Характеристика;
		ТекСтатусТоваров  = СтрНоменклатура.СтатусТоваров;
		ТекКлассABC		  = СтрНоменклатура.ABC;
		ТекКлассXYZ		  = СтрНоменклатура.XYZ;
		
		ПеременныеРасчета.Номенклатура = ТекНоменклатура; 
		ПеременныеРасчета.Характеристика = ТекХарактеристика; 
				
		ПеременныеРасчета.КонтрольныхТочек = -1; 
		ПеременныеРасчета.СуммарныйОстатокПоКоличеству = 0; 
		ПеременныеРасчета.СуммарныйОстатокПоСумме = 0; 
		ПеременныеРасчета.КонечныйОстаток = 0;
		
		ПеременныеРасчета.ТочкаОтсчета	= ДополнительныеСвойства.НачалоПериода;
		НачальнаяТочкаОтсчета 			= ДополнительныеСвойства.НачалоПериода;
		КонецПериода 					= НачалоДня(ДополнительныеСвойства.КонецПериода);
		
		ОтборДляПоиска = Новый Структура("СкладПартнер, Номенклатура, Характеристика, СтатусТоваров, ABC, XYZ");
		ОтборДляПоиска.Вставить("СкладПартнер", ТекСкладПартнер);
		ОтборДляПоиска.Вставить("Номенклатура", ТекНоменклатура);
		ОтборДляПоиска.Вставить("Характеристика", ТекХарактеристика);
		ОтборДляПоиска.Вставить("СтатусТоваров", ТекСтатусТоваров);
		ОтборДляПоиска.Вставить("ABC", ТекКлассABC);
		ОтборДляПоиска.Вставить("XYZ", ТекКлассXYZ);
		
		ТаблицаДанныхПоНоменклатуре = РазвернутаяТаблица.Скопировать(ОтборДляПоиска);
		ТаблицаДанныхПоНоменклатуре.Сортировать("Период Возр");
		Для Каждого СтрДанныхПоНоменклатуре Из ТаблицаДанныхПоНоменклатуре Цикл
			Если НЕ ЗначениеЗаполнено(СтрДанныхПоНоменклатуре.Период) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПеременныеРасчета.КонтрольныхТочек = -1 Тогда
				// Остаток на начало периода первой контрольной точки.
				ОстатокПервогоПериодаПоКоличеству = СтрДанныхПоНоменклатуре.КонечныйОстаток;
				ОстатокПервогоПериодаПоСумме = ОстатокПервогоПериодаПоКоличеству 
					* ЦенаНоменклатуры(ПеременныеРасчета.Номенклатура, ПеременныеРасчета.Характеристика, ПеременныеРасчета.ТаблицаЦен);
				
				ПеременныеРасчета.ТочкаОтсчета = ?(ПеременныеРасчета.ТочкаОтсчета = Дата(1, 1, 1), 
					СтрДанныхПоНоменклатуре.Период, ПеременныеРасчета.ТочкаОтсчета);
				НачальнаяТочкаОтсчета = ПеременныеРасчета.ТочкаОтсчета;
				ПеременныеРасчета.КонтрольныхТочек = ПеременныеРасчета.КонтрольныхТочек + 1;
			КонецЕсли;
			
			Пока ПеременныеРасчета.ТочкаОтсчета < СтрДанныхПоНоменклатуре.Период Цикл
				// Пока контроные точки расположены раньше, чем дата изменения остатка - рассчитываем средний остаток за период.
				РассчитатьСуммарныйОстатокПоКонтрольнымТочкам(ПеременныеРасчета);
			КонецЦикла;
			
			ПеременныеРасчета.КонечныйОстаток = СтрДанныхПоНоменклатуре.КонечныйОстаток;
			
			РассчитатьСуммарныйОстатокПоКонтрольнымТочкам(ПеременныеРасчета);
			
		КонецЦикла;	
		
		Если ЗначениеЗаполнено(КонецПериода) И ПеременныеРасчета.ТочкаОтсчета < КонецПериода Тогда
			// Это случай когда контрольные точки расположены между датой последнего изменения остатка и датой конца периода формирования отчета.
			Пока ПеременныеРасчета.ТочкаОтсчета <= КонецПериода Цикл
				РассчитатьСуммарныйОстатокПоКонтрольнымТочкам(ПеременныеРасчета);
			КонецЦикла;
		КонецЕсли;
		
		// В случае, если остаток на конец периода равен нулю и стоит флаг ИсключатьДниОтсутствияТовара, последняя контрольная точка не будет
		// учтена в расчете - исправим это.
		Если ПеременныеРасчета.КонечныйОстаток = 0 И ПеременныеРасчета.ИсключатьДниОтсутствияТовара Тогда
			ПеременныеРасчета.КонтрольныхТочек = ПеременныеРасчета.КонтрольныхТочек + 1;
		КонецЕсли;	
		
		КонечныйОстатокСумма = Окр(ПеременныеРасчета.КонечныйОстаток 
			* ЦенаНоменклатуры(ПеременныеРасчета.Номенклатура, ПеременныеРасчета.Характеристика, ПеременныеРасчета.ТаблицаЦен), 2);
		
		// Остаток на последнюю контрольную точку должен делиться на 2, а в цикле при суммировании учтен весь остаток, поэтому вычтем половину
		// последнего остатка из суммы среднего остатка за период.
		ПеременныеРасчета.СуммарныйОстатокПоКоличеству = ПеременныеРасчета.СуммарныйОстатокПоКоличеству - ПеременныеРасчета.КонечныйОстаток / 2		- ОстатокПервогоПериодаПоКоличеству / 2;
		ПеременныеРасчета.СуммарныйОстатокПоСумме		 = ПеременныеРасчета.СуммарныйОстатокПоСумме		- КонечныйОстатокСумма / 2	- ОстатокПервогоПериодаПоСумме / 2;
		
		КоличествоКонтрольныхТочек   = ПеременныеРасчета.КонтрольныхТочек - 1;
		
		СреднийОстатокЗаПериод = ?(КоличествоКонтрольныхТочек = 0, 0, ПеременныеРасчета.СуммарныйОстатокПоКоличеству / КоличествоКонтрольныхТочек);
		СреднийОстатокЗаПериод = Окр(СреднийОстатокЗаПериод, 3);
		СреднийОстатокЗаПериодСумма = ?(КоличествоКонтрольныхТочек = 0, 0, ПеременныеРасчета.СуммарныйОстатокПоСумме / КоличествоКонтрольныхТочек);
		СреднийОстатокЗаПериодСумма = Окр(СреднийОстатокЗаПериодСумма, 2);
		
		СтруктураРасхода = Новый Структура("Расход, РасходСумма", 0, 0);
		Если ТекСтатусТоваров = "ТоварыНаСкладах" Тогда
			
			СтруктураРасхода.Вставить("КоличествоПериодов", 0);
			СтруктураПоиска = Новый Структура("Склад, Номенклатура, Характеристика", 
				ТекСкладПартнер, ПеременныеРасчета.Номенклатура, ПеременныеРасчета.Характеристика);
			СтрокиТаблицы = ТаблицаРасходаТоварыНаСкладах.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				СтруктураРасхода.Расход 			= СтруктураРасхода.Расход 			  + СтрокаТаблицы.Расход;
				СтруктураРасхода.РасходСумма		= СтруктураРасхода.РасходСумма 		  + СтрокаТаблицы.РасходСумма;
				СтруктураРасхода.КоличествоПериодов = СтруктураРасхода.КоличествоПериодов + СтрокаТаблицы.КоличествоПериодов;
			КонецЦикла;	
			
		ИначеЕсли ТекСтатусТоваров = "ТоварыУКомиссионеров" Тогда
			СтруктураПоиска = Новый Структура("Партнер, Номенклатура, Характеристика", 
				ТекСкладПартнер, ПеременныеРасчета.Номенклатура, ПеременныеРасчета.Характеристика);
			СтрокиТаблицы = ТаблицаРасходаТоварыУКомиссионеров.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				СтруктураРасхода.Расход 	 = СтруктураРасхода.Расход 		+ СтрокаТаблицы.Расход;
				СтруктураРасхода.РасходСумма = СтруктураРасхода.РасходСумма + СтрокаТаблицы.РасходСумма;
			КонецЦикла;	
			
		КонецЕсли;
		РасходЗаПериод 		= Окр(СтруктураРасхода.Расход, 		3);
		РасходЗаПериодСумма = Окр(СтруктураРасхода.РасходСумма, 2);
		
		КоэффициентОборачиваемости = ?(СреднийОстатокЗаПериод = 0, 0, РасходЗаПериод / СреднийОстатокЗаПериод);
		КоэффициентОборачиваемости = Окр(КоэффициентОборачиваемости, 3);
		КоэффициентОборачиваемостиСумма = ?(СреднийОстатокЗаПериодСумма = 0, 0, РасходЗаПериодСумма / СреднийОстатокЗаПериодСумма);
		КоэффициентОборачиваемостиСумма = Окр(КоэффициентОборачиваемостиСумма, 3);
		
		КонечнаяТочкаОтсчета = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, ПеременныеРасчета.ТочкаОтсчета);
		Если НЕ ЗначениеЗаполнено(НачальнаяТочкаОтсчета) ИЛИ НЕ ЗначениеЗаполнено(КонечнаяТочкаОтсчета) Тогда
			КоличествоИнтерваловВПериоде = 0;
		Иначе
			Если СтруктураРасхода.Свойство("КоличествоПериодов") Тогда
				КоличествоИнтерваловВПериоде = СтруктураРасхода.КоличествоПериодов; // количество интервалов посчитано раньше - используем это значение
			Иначе	
				КоличествоСекундВПериоде = КонечнаяТочкаОтсчета - НачальнаяТочкаОтсчета;
				
				Если ЕдиницаОборачиваемости = "День" Тогда
					КоличествоИнтерваловВПериоде = КоличествоСекундВПериоде / (60 * 60 * 24) + 1;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		Оборачиваемость = ?(РасходЗаПериод = 0, 0, КоличествоИнтерваловВПериоде * СреднийОстатокЗаПериод / РасходЗаПериод);
		Оборачиваемость = Окр(Оборачиваемость, 3);
		ОборачиваемостьСумма = ?(РасходЗаПериодСумма = 0, 0, КоличествоИнтерваловВПериоде * СреднийОстатокЗаПериодСумма / РасходЗаПериодСумма);
		ОборачиваемостьСумма = Окр(ОборачиваемостьСумма, 3);
		
		СреднийРасход = ?(КоличествоИнтерваловВПериоде = 0, 0, РасходЗаПериод / КоличествоИнтерваловВПериоде);
		СреднийРасход = Окр(СреднийРасход, 3);
		СреднийРасходСумма = ?(КоличествоИнтерваловВПериоде = 0, 0, РасходЗаПериодСумма / КоличествоИнтерваловВПериоде);
		СреднийРасходСумма = Окр(СреднийРасходСумма, 2);
		
		УровеньЗапасов = ?(СреднийРасход = 0, 0, ПеременныеРасчета.КонечныйОстаток / СреднийРасход);
		УровеньЗапасов = Окр(УровеньЗапасов, 3);
		УровеньЗапасовСумма = ?(СреднийРасходСумма = 0, 0, КонечныйОстатокСумма / СреднийРасходСумма);
		УровеньЗапасовСумма = Окр(УровеньЗапасовСумма, 3);
		
		МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ;
		
		НормативнаяОборачиваемость = 0; 
		Резерв = 0; РезервСумма = 0;
		Если ТекСтатусТоваров = "ТоварыНаСкладах" Тогда
			СтрокиТаблицы = ТаблицаНормативнойОборачиваемости.НайтиСтроки(Новый Структура("Склад, Номенклатура, Характеристика", ТекСкладПартнер, ТекНоменклатура, ТекХарактеристика));
			Если СтрокиТаблицы.Количество() <> 0 Тогда
				ТоварныеОграничения = СтрокиТаблицы[0];
				
				МетодОбеспеченияПотребностей = ТоварныеОграничения.МетодОбеспеченияПотребностей;
				
				Если МетодОбеспеченияПотребностей = Перечисления.МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда
					Если ТоварныеОграничения.НормаПотребления = 0 Тогда
						НормативнаяОборачиваемость = 0;
					Иначе
						НормативнаяОборачиваемость = (ТоварныеОграничения.МаксимальноеКоличествоЗапаса + ТоварныеОграничения.СтраховоеКоличествоЗапаса)/(2*ТоварныеОграничения.НормаПотребления);
					КонецЕсли;
				Иначе
					Если СреднийРасход = 0 Тогда
						НормативнаяОборачиваемость = 0;
					Иначе
						НормативнаяОборачиваемость = (ТоварныеОграничения.МаксимальноеКоличествоЗапаса + ТоварныеОграничения.СтраховоеКоличествоЗапаса)/(2*СреднийРасход);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Резерв = (Оборачиваемость - НормативнаяОборачиваемость) * СреднийРасход;
			Резерв = Окр(Резерв, 3);
			Резерв = ?(Резерв < 0, 0, Резерв);
			РезервСумма = (ОборачиваемостьСумма - НормативнаяОборачиваемость) * СреднийРасходСумма;
			РезервСумма = Окр(РезервСумма, 2);
			РезервСумма = ?(РезервСумма < 0, 0, РезервСумма);
			
		КонецЕсли;	
		
		Если НормативнаяОборачиваемость <> 0 Тогда
			ОтклонениеОборачиваемости = (Оборачиваемость - НормативнаяОборачиваемость) / НормативнаяОборачиваемость * 100;
			ОтклонениеОборачиваемостиСумма = (ОборачиваемостьСумма - НормативнаяОборачиваемость) / НормативнаяОборачиваемость * 100;
			// 100% отклонения в отчет не выводим.
			ОтклонениеОборачиваемости = ?(ОтклонениеОборачиваемости = 100 ИЛИ ОтклонениеОборачиваемости = -100, 0, ОтклонениеОборачиваемости);
			ОтклонениеОборачиваемостиСумма = ?(ОтклонениеОборачиваемостиСумма = 100 ИЛИ ОтклонениеОборачиваемостиСумма = -100, 0, ОтклонениеОборачиваемостиСумма);
		Иначе
			ОтклонениеОборачиваемости = 0;
			ОтклонениеОборачиваемостиСумма = 0;
		КонецЕсли;	
		
		// Добавляем итоговую строку в таблицу данных отчета.
		НоваяСтрокаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, СтрДанныхПоНоменклатуре);
		
		НоваяСтрокаДанных.КонечныйОстатокСумма	 	  	  = КонечныйОстатокСумма;
		НоваяСтрокаДанных.СреднийОстатокЗаПериод 	  	  = СреднийОстатокЗаПериод;
		НоваяСтрокаДанных.СреднийОстатокЗаПериодСумма 	  = СреднийОстатокЗаПериодСумма;
		НоваяСтрокаДанных.РасходЗаПериод 	  		  	  = РасходЗаПериод;
		НоваяСтрокаДанных.РасходЗаПериодСумма 		 	  = РасходЗаПериодСумма;
		НоваяСтрокаДанных.КоэффициентОборачиваемости 	  = КоэффициентОборачиваемости;
		НоваяСтрокаДанных.КоэффициентОборачиваемостиСумма = КоэффициентОборачиваемостиСумма;
		НоваяСтрокаДанных.Оборачиваемость 	  			  = Оборачиваемость;
		НоваяСтрокаДанных.ОборачиваемостьСумма 			  = ОборачиваемостьСумма;
		НоваяСтрокаДанных.ОтклонениеОборачиваемости		  = ОтклонениеОборачиваемости;
		НоваяСтрокаДанных.ОтклонениеОборачиваемостиСумма  = ОтклонениеОборачиваемостиСумма;
		НоваяСтрокаДанных.КоличествоИнтерваловВПериоде	  = КоличествоИнтерваловВПериоде;
		НоваяСтрокаДанных.СреднийРасход 	  			  = СреднийРасход;
		НоваяСтрокаДанных.СреднийРасходСумма 			  = СреднийРасходСумма;
		НоваяСтрокаДанных.УровеньЗапасов 	  			  = УровеньЗапасов;
		НоваяСтрокаДанных.УровеньЗапасовСумма 			  = УровеньЗапасовСумма;
		НоваяСтрокаДанных.НормативнаяОборачиваемость	  = НормативнаяОборачиваемость;
		НоваяСтрокаДанных.Резерв 	  			  		  = Резерв;
		НоваяСтрокаДанных.РезервСумма	 	 			  = РезервСумма;
		
		НоваяСтрокаДанных.МетодОбеспеченияПотребностей	  = МетодОбеспеченияПотребностей;
		
		НоваяСтрокаДанных.Валюта						  = ?(ЗначениеЗаполнено(ВидЦены), ВидЦены.ВалютаЦены, Справочники.Валюты.ПустаяСсылка());
		
		НоваяСтрокаДанных.ОборачиваемостьПрошлыйГод		  			   = 0;
		НоваяСтрокаДанных.ОборачиваемостьСуммаПрошлыйГод		  	   = 0;
		НоваяСтрокаДанных.СреднийОстатокЗаПериодПрошлыйГод 			   = 0;
		НоваяСтрокаДанных.СреднийОстатокЗаПериодСуммаПрошлыйГод 	   = 0;
		НоваяСтрокаДанных.РасходЗаПериодПрошлыйГод 	 			 	   = 0;
		НоваяСтрокаДанных.РасходЗаПериодСуммаПрошлыйГод 		 	   = 0;
		НоваяСтрокаДанных.КоличествоИнтерваловВПериодеПрошлыйГод 	   = 0;
		НоваяСтрокаДанных.ОборачиваемостьПредыдущийПериод		 	   = 0;
		НоваяСтрокаДанных.ОборачиваемостьСуммаПредыдущийПериод		   = 0;
		НоваяСтрокаДанных.СреднийОстатокЗаПериодПредыдущийПериод 	   = 0;
		НоваяСтрокаДанных.СреднийОстатокЗаПериодСуммаПредыдущийПериод  = 0;
		НоваяСтрокаДанных.РасходЗаПериодПредыдущийПериод 	 		   = 0;
		НоваяСтрокаДанных.РасходЗаПериодСуммаПредыдущийПериод 		   = 0;
		НоваяСтрокаДанных.КоличествоИнтерваловВПериодеПредыдущийПериод = 0;
	КонецЦикла;	
	
	Возврат ТаблицаДанных;
КонецФункции

// Получает таблицу данных расхода за период по товарам на складах.
//
// Параметры:
//  ТаблицаЦен	   - <ТаблицаЗначений> - Таблица, из которой выбирается цена номенклатуры.
//  Склад  		   - <Массив> 		   - Массив складов, по которым производится расчет расхода.
//  Номенклатура   - <Массив> 		   - Массив номенклатуры, по которой производится расчет расхода.
//  Характеристика - <Массив> 		   - Массив характеристик номенклатуры, по которой производится расчет расхода.
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - Таблица, в которой содержатся значения расхода по количеству и сумме, количество периодов.
//
Функция ТаблицаРасходаЗаПериодТоварыНаСкладах(Настройки, ТаблицаЦен, Склад, Номенклатура, Характеристика)
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	НачалоПериода = ДополнительныеСвойства.НачалоПериода;
	КонецПериода = ДополнительныеСвойства.КонецПериода;

	ЭтоУправлениеТорговлей = Константы.УправлениеТорговлей.Получить();
	
	НастройкаИсключаемыеРасходыТоварыНаСкладах = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ИсключаемыеРасходыТоварыНаСкладах");
	Если НастройкаИсключаемыеРасходыТоварыНаСкладах.Значение <> Неопределено Тогда
		Если ТипЗнч(НастройкаИсключаемыеРасходыТоварыНаСкладах.Значение) = Тип("Строка") Тогда
			МассивИсключаемыхДокументов = Новый Массив;
			МассивИсключаемыхДокументов.Добавить(НастройкаИсключаемыеРасходыТоварыНаСкладах.Значение);
		Иначе
			МассивИсключаемыхДокументов = НастройкаИсключаемыеРасходыТоварыНаСкладах.Значение.ВыгрузитьЗначения();
		КонецЕсли;
		
		Если ЭтоУправлениеТорговлей Тогда 
			УдаляемоеЗначение = МассивИсключаемыхДокументов.Найти("ПередачаМатериаловВПроизводство");
			Если УдаляемоеЗначение <> Неопределено Тогда
				МассивИсключаемыхДокументов.Удалить(УдаляемоеЗначение);
			КонецЕсли;
		КонецЕсли;
		
		ЕстьИсключаемыеРасходыТоварыНаСкладах = МассивИсключаемыхДокументов.Количество() <> 0;
	Иначе
		ЕстьИсключаемыеРасходыТоварыНаСкладах = Ложь;
	КонецЕсли;
	
	НастройкаВычитаемыеПриходыТоварыНаСкладах = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВычитаемыеПриходыТоварыНаСкладах");
	Если НастройкаВычитаемыеПриходыТоварыНаСкладах.Значение <> Неопределено Тогда
		Если ТипЗнч(НастройкаВычитаемыеПриходыТоварыНаСкладах.Значение) = Тип("Строка") Тогда
			МассивВычитаемыхДокументов = Новый Массив;
			МассивВычитаемыхДокументов.Добавить(НастройкаВычитаемыеПриходыТоварыНаСкладах.Значение);
		Иначе 
			МассивВычитаемыхДокументов = НастройкаВычитаемыеПриходыТоварыНаСкладах.Значение.ВыгрузитьЗначения();
		КонецЕсли;
		ЕстьВычитаемыеПриходыТоварыНаСкладах = МассивВычитаемыхДокументов.Количество() <> 0;
	Иначе
		ЕстьВычитаемыеПриходыТоварыНаСкладах = Ложь;
	КонецЕсли;
	
	ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасходЗаПериодТоварыНаСкладах();
	Запрос.УстановитьПараметр("ДатаНач", 							   НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", 							   КонецПериода);
	Запрос.УстановитьПараметр("ЕстьИсключаемыеРасходыТоварыНаСкладах", ЕстьИсключаемыеРасходыТоварыНаСкладах);
	Запрос.УстановитьПараметр("ЕстьВычитаемыеПриходыТоварыНаСкладах",  ЕстьВычитаемыеПриходыТоварыНаСкладах);
	Запрос.УстановитьПараметр("ОсновнойКалендарьПредприятия",  ОсновнойКалендарьПредприятия);
	
	НастройкаВключатьРеализациюНаКомиссиюВРасходТоварыНаСкладах = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВключатьРеализациюНаКомиссиюВРасходТоварыНаСкладах");
	Запрос.УстановитьПараметр("ВключатьРеализациюНаКомиссию", 		   НастройкаВключатьРеализациюНаКомиссиюВРасходТоварыНаСкладах.Значение);
	
	// Если есть исключаемые или вычитаемые документы - отразим их в тексте запроса.
	СтрокаПоискаРаспоряжение = "&УсловиеПоискаВычитаемогоРаспоряженияРасхода";
	СтрокаЗаменыРаспоряжение = "ЛОЖЬ";
	СтрокаПоискаРегистратор	 = "&УсловиеПоискаВычитаемогоРегистратораРасхода";
	СтрокаЗаменыРегистратор	 = "НЕ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику";
	Если ЕстьИсключаемыеРасходыТоварыНаСкладах Тогда
		СтрокаЗаменыРаспоряжение = "";
		СтрокаЗаменыРегистратор	 = "";
		Для Каждого ДокументИмя Из МассивИсключаемыхДокументов Цикл
			Если ДокументИмя = "ВнутреннееПотреблениеТоваров" 
				ИЛИ ДокументИмя = "ВозвратТоваровПоставщику" 
				ИЛИ ДокументИмя = "ПеремещениеТоваров"
				ИЛИ ДокументИмя = "РеализацияТоваровУслуг" 
				ИЛИ ДокументИмя = "СборкаТоваров" Тогда
				// Для реквизита Распоряжение ТЧ Товары документа РасходныйОрдерНаТовары проверяем только на его типы значения!
				СтрокаЗаменыРаспоряжение = ?(СтрокаЗаменыРаспоряжение = "ИСТИНА", "", СтрокаЗаменыРаспоряжение);
				СтрокаЗаменыРаспоряжение = СтрокаЗаменыРаспоряжение + ?(СтрокаЗаменыРаспоряжение = "", "", " И ") + "НЕ ДокументОтгрузки ССЫЛКА Документ." + ДокументИмя;
			Иначе
				СтрокаЗаменыРаспоряжение = ?(СтрокаЗаменыРаспоряжение = "", "ИСТИНА", СтрокаЗаменыРаспоряжение);
			КонецЕсли;	
			
			СтрокаЗаменыРегистратор = СтрокаЗаменыРегистратор + ?(СтрокаЗаменыРегистратор = "", "", " И ") + "НЕ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ." + ДокументИмя;
		КонецЦикла;	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаПоискаРаспоряжение, СтрокаЗаменыРаспоряжение);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаПоискаРегистратор,  СтрокаЗаменыРегистратор);
	
	СтрокаПоискаРегистратор	= "&УсловиеПоискаВычитаемыхПриходов";
	СтрокаЗаменыРегистратор	= "ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента";
	Если ЕстьВычитаемыеПриходыТоварыНаСкладах Тогда
		СтрокаЗаменыРегистратор	= "";
		Для Каждого ДокументИмя Из МассивВычитаемыхДокументов Цикл
			СтрокаЗаменыРегистратор = СтрокаЗаменыРегистратор + ?(СтрокаЗаменыРегистратор = "", "", " ИЛИ ") + "ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ." + ДокументИмя;
		КонецЦикла;	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаПоискаРегистратор,  СтрокаЗаменыРегистратор);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрТаблицы Из ТаблицаРезультат Цикл
		СтрТаблицы.РасходСумма = СтрТаблицы.Расход * ЦенаНоменклатуры(СтрТаблицы.Номенклатура, СтрТаблицы.Характеристика, ТаблицаЦен);
		СтрТаблицы.Календарь   = ?(ЗначениеЗаполнено(СтрТаблицы.Календарь), СтрТаблицы.Календарь, ОсновнойКалендарьПредприятия);
	КонецЦикла;	
	
	ТаблицаНоменклатуры = ТаблицаРезультат.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Склад, Календарь, Номенклатура, Характеристика", "Расход, РасходСумма");
	ТаблицаНоменклатуры.Колонки.Добавить("КоличествоПериодов");
	
	ВыходныеДниКалендарей = Новый Соответствие;
	
	ТаблицаРезультат.Индексы.Добавить("Склад, Номенклатура, Характеристика, НачалоПериода");
	
	Для Каждого СтрНоменклатура Из ТаблицаНоменклатуры Цикл
		ТекущаяТочкаОтсчета   = НачалоДня(НачалоПериода);
		КонечнаяТочкаОтсчета  = НачалоДня(КонецПериода);
		КоличествоПериодов	  = 0;
		Пока ТекущаяТочкаОтсчета <= КонечнаяТочкаОтсчета Цикл
			Если Классификация.ЭтоВыходнойДень(ТекущаяТочкаОтсчета, СтрНоменклатура.Календарь, ВыходныеДниКалендарей) Тогда				
				РасходЗаВыходнойДень = 0;
				
				ОтборДляПоиска = Новый Структура("Склад, Номенклатура, Характеристика, НачалоПериода");
				ОтборДляПоиска.Вставить("Склад", СтрНоменклатура.Склад);
				ОтборДляПоиска.Вставить("Номенклатура", СтрНоменклатура.Номенклатура);
				ОтборДляПоиска.Вставить("Характеристика", СтрНоменклатура.Характеристика);
				ОтборДляПоиска.Вставить("НачалоПериода", ТекущаяТочкаОтсчета);
				
				СтрокиРасходаЗаВыходнойДень = ТаблицаРезультат.НайтиСтроки(ОтборДляПоиска);
				Для Каждого СтрокаРасхода Из СтрокиРасходаЗаВыходнойДень Цикл
					РасходЗаВыходнойДень = РасходЗаВыходнойДень + СтрокаРасхода.Расход;
				КонецЦикла;	
				
				Если РасходЗаВыходнойДень > 0 Тогда
					// В выходной день был расход
					КоличествоПериодов  = КоличествоПериодов + 1; 
				КонецЕсли;;
				
			Иначе
				// Рабочий день учитываем независимо от того, был ли расход в этот день
				КоличествоПериодов  = КоличествоПериодов + 1; 
			КонецЕсли;
			
			ТекущаяТочкаОтсчета = ТекущаяТочкаОтсчета + 60 * 60 * 24;
		КонецЦикла;	
		СтрНоменклатура.КоличествоПериодов = КоличествоПериодов;
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
КонецФункции

// Получает таблицу данных расхода за период по товарам у комиссионеров.
//
// Параметры:
//  Настройки      - НастройкиКомпоновкиДанных - настройки отчета
//  ТаблицаЦен	   - ТаблицаЗначений - Таблица, из которой выбирается цена номенклатуры.
//  Партнер		   - Массив		   - Массив партнеров, по которым производится расчет расхода.
//  Номенклатура   - Массив 		   - Массив номенклатуры, по которой производится расчет расхода.
//  Характеристика - Массив 		   - Массив характеристик номенклатуры, по которой производится расчет расхода.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица, в которой содержатся значения расхода по количеству и сумме.
//
Функция ТаблицаРасходаЗаПериодТоварыУКомиссионеров(Настройки, ТаблицаЦен, Партнер, Номенклатура, Характеристика)
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	НачалоПериода = ДополнительныеСвойства.НачалоПериода;
	КонецПериода = ДополнительныеСвойства.КонецПериода;
	
	НастройкаИсключаемыеРасходыТоварыУКомиссионера = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ИсключаемыеРасходыТоварыУКомиссионера");
	Если НастройкаИсключаемыеРасходыТоварыУКомиссионера.Значение <> Неопределено Тогда
		Если ТипЗнч(НастройкаИсключаемыеРасходыТоварыУКомиссионера.Значение) = Тип("Строка") Тогда
			МассивИсключаемыхДокументов = Новый Массив;
			МассивИсключаемыхДокументов.Добавить(НастройкаИсключаемыеРасходыТоварыУКомиссионера.Значение);
		Иначе
			МассивИсключаемыхДокументов = НастройкаИсключаемыеРасходыТоварыУКомиссионера.Значение.ВыгрузитьЗначения();
		КонецЕсли;
		ЕстьИсключаемыеРасходыТоварыУКомиссионера = МассивИсключаемыхДокументов.Количество() <> 0;
	Иначе
		ЕстьИсключаемыеРасходыТоварыУКомиссионера = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасходЗаПериодТоварыУКомиссионеров();
	Запрос.УстановитьПараметр("ДатаНач", 							   	   НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", 							   	   КонецПериода);
	Запрос.УстановитьПараметр("ЕстьИсключаемыеРасходыТоварыУКомиссионера", ЕстьИсключаемыеРасходыТоварыУКомиссионера);
	Запрос.УстановитьПараметр("Партнер", 								   Партнер);
	Запрос.УстановитьПараметр("Номенклатура",  		 				       Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 					   	   Характеристика);
	
	// Если есть исключаемые документы - отразим их в тексте запроса.
	СтрокаПоискаРегистратор	 = "&УсловиеПоискаВычитаемыхРасходовУКомиссионера";
	СтрокаЗаменыРегистратор	 = "НЕ ТоварыПереданныеНаКомиссиюОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента";
	Если ЕстьИсключаемыеРасходыТоварыУКомиссионера Тогда
		СтрокаЗаменыРегистратор	 = "";
		Для Каждого ДокументИмя Из МассивИсключаемыхДокументов Цикл
			СтрокаЗаменыРегистратор = СтрокаЗаменыРегистратор + ?(СтрокаЗаменыРегистратор = "", "", " И ") + "НЕ ТоварыПереданныеНаКомиссиюОбороты.Регистратор ССЫЛКА Документ." + ДокументИмя;
		КонецЦикла;	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, СтрокаПоискаРегистратор,  СтрокаЗаменыРегистратор);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрТаблицы Из ТаблицаРезультат Цикл
		СтрТаблицы.РасходСумма = СтрТаблицы.Расход * ЦенаНоменклатуры(СтрТаблицы.Номенклатура, СтрТаблицы.Характеристика, ТаблицаЦен);
	КонецЦикла;	
	
	ТаблицаНоменклатуры = ТаблицаРезультат.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Партнер, Номенклатура, Характеристика", "Расход, РасходСумма");
	
	Возврат ТаблицаНоменклатуры;
КонецФункции

// Получает таблицу данных нормативной оборачиваемости товара по складу.
//
// Параметры:
//  Склад             - <Массив> - Массив складов, по которым выполняется запрос.
//  ОтборНоменклатуры - <Таблица значений> - Таблица номенклатуры и характеристик, по которой выполняется запрос.
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - Таблица, содержащая нормативную оборачиваемость товара.
//
Функция ТаблицаНормативнойОборачиваемостиТоварыНаСкладах(Склад, ОтборНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаНормативнойОборачиваемостиПоСкладам();
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОтборНоменклатуры", ОтборНоменклатуры);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	МенеджерВт = ОбеспечениеСервер.СформироватьВтПараметровОбеспеченияТоваров(Запрос.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВт;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Склад          КАК Склад,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	
		|	Т.МаксимальноеКоличествоЗапаса  КАК МаксимальноеКоличествоЗапаса,
		|	Т.СтраховоеКоличествоЗапаса     КАК СтраховоеКоличествоЗапаса,
		|	Т.НормаПотребления              КАК НормаПотребления,
		|	Т.МетодОбеспеченияПотребностей  КАК МетодОбеспеченияПотребностей
		|ИЗ
		|	ВтПараметрыОбеспеченияТоваров КАК Т
		|ГДЕ
		|	Т.МетодОбеспеченияПотребностей <> ЗНАЧЕНИЕ(Перечисление.МетодыОбеспеченияПотребностей.ЗаказПодЗаказ)";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Получает текст запроса для подсчета расхода за период по товарам на складах.
//
// Возвращаемое значение:
//   <Строка> - Текст запроса.
//
Функция ТекстЗапросаРасходЗаПериодТоварыНаСкладах()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахРегистраторРасход.Склад КАК Склад,
	|	ТоварыНаСкладахРегистраторРасход.Номенклатура,
	|	ТоварыНаСкладахРегистраторРасход.Характеристика,
	|	СУММА(ТоварыНаСкладахРегистраторРасход.Расход) КАК Расход,
	|	ТоварыНаСкладахРегистраторРасход.Регистратор КАК Регистратор,
	|	ТоварыНаСкладахРегистраторРасход.Период КАК Период
	|ПОМЕСТИТЬ ТоварыНаСкладахРегистраторРасход
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОбороты.Склад КАК Склад,
	|		ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОбороты.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОбороты.ВНаличииРасход КАК Расход,
	|		ТоварыНаСкладахОбороты.Регистратор КАК Регистратор,
	|		ТоварыНаСкладахОбороты.ПериодСекунда КАК Период
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Авто, ) КАК ТоварыНаСкладахОбороты
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА НЕ &ЕстьИсключаемыеРасходыТоварыНаСкладах
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ &УсловиеПоискаВычитаемогоРегистратораРасхода
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &ВключатьРеализациюНаКомиссию
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|							ТОГДА ВЫРАЗИТЬ(ТоварыНаСкладахОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсключаемыеОбороты.Склад,
	|		ИсключаемыеОбороты.Номенклатура,
	|		ИсключаемыеОбороты.Характеристика,
	|		-ИсключаемыеОбороты.КОтгрузкеРасход,
	|		ИсключаемыеОбороты.Регистратор,
	|		ИсключаемыеОбороты.ПериодСекунда
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Обороты(&ДатаНач, &ДатаКон, Авто, &УсловиеПоискаВычитаемогоРаспоряженияРасхода) КАК ИсключаемыеОбороты
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА &ВключатьРеализациюНаКомиссию
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ИсключаемыеОбороты.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|							ТОГДА ВЫРАЗИТЬ(ИсключаемыеОбороты.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ) КАК ТоварыНаСкладахРегистраторРасход
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахРегистраторРасход.Склад,
	|	ТоварыНаСкладахРегистраторРасход.Номенклатура,
	|	ТоварыНаСкладахРегистраторРасход.Характеристика,
	|	ТоварыНаСкладахРегистраторРасход.Регистратор,
	|	ТоварыНаСкладахРегистраторРасход.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОбороты.Склад КАК Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	-1 * СУММА(ЕСТЬNULL(ТоварыНаСкладахОбороты.ВНаличииПриход, 0)) КАК Расход,
	|	ТоварыНаСкладахОбороты.Регистратор,
	|	ТоварыНаСкладахОбороты.ПериодСекунда КАК Период
	|ПОМЕСТИТЬ ТоварыНаСкладахРегистраторПриход
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(&ДатаНач, &ДатаКон, Авто, ) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ЕстьВычитаемыеПриходыТоварыНаСкладах
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ &УсловиеПоискаВычитаемыхПриходов
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ТОГДА ВЫРАЗИТЬ(ТоварыНаСкладахОбороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Склад,
	|	ТоварыНаСкладахОбороты.Номенклатура,
	|	ТоварыНаСкладахОбороты.Характеристика,
	|	ТоварыНаСкладахОбороты.Регистратор,
	|	ТоварыНаСкладахОбороты.ПериодСекунда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Склад,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА &ОсновнойКалендарьПредприятия
	|		ИНАЧЕ ВложенныйЗапрос.Склад.Календарь
	|	КОНЕЦ КАК Календарь,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	СУММА(ВложенныйЗапрос.Расход) КАК Расход,
	|	СУММА(0) КАК РасходСумма,
	|	ВложенныйЗапрос.Период,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК НачалоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахРегистраторРасход.Склад КАК Склад,
	|		ТоварыНаСкладахРегистраторРасход.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахРегистраторРасход.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахРегистраторРасход.Расход КАК Расход,
	|		ТоварыНаСкладахРегистраторРасход.Период КАК Период
	|	ИЗ
	|		ТоварыНаСкладахРегистраторРасход КАК ТоварыНаСкладахРегистраторРасход
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладахРегистраторПриход.Склад,
	|		ТоварыНаСкладахРегистраторПриход.Номенклатура,
	|		ТоварыНаСкладахРегистраторПриход.Характеристика,
	|		ТоварыНаСкладахРегистраторПриход.Расход,
	|		ТоварыНаСкладахРегистраторПриход.Период
	|	ИЗ
	|		ТоварыНаСкладахРегистраторПриход КАК ТоварыНаСкладахРегистраторПриход) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Склад,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Склад.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА &ОсновнойКалендарьПредприятия
	|		ИНАЧЕ ВложенныйЗапрос.Склад.Календарь
	|	КОНЕЦ,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Период,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ)";
	
	Возврат ТекстЗапроса;
КонецФункции	

// Получает текст запроса для подсчета расхода за период по товарам у комиссионеров.
//
// Возвращаемое значение:
//   <Строка> - Текст запроса.
//
Функция ТекстЗапросаРасходЗаПериодТоварыУКомиссионеров()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(АналитикаНоменклатуры.Склад КАК Справочник.Партнеры) КАК Партнер,
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	СУММА(ЕСТЬNULL(ТоварыПереданныеНаКомиссиюОбороты.КоличествоРасход, 0)) КАК Расход,
	|	ТоварыПереданныеНаКомиссиюОбороты.Регистратор,
	|	ТоварыПереданныеНаКомиссиюОбороты.Период
	|ПОМЕСТИТЬ ТоварыУКомиссионераРегистраторРасход
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданныеНаКомиссию.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Запись,
	|				ВЫРАЗИТЬ(АналитикаУчетаНоменклатуры.Склад КАК Справочник.Партнеры) В (&Партнер)
	|					И АналитикаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
	|					И АналитикаУчетаНоменклатуры.Характеристика В (&Характеристика)) КАК ТоварыПереданныеНаКомиссиюОбороты
	|		ПО ТоварыПереданныеНаКомиссиюОбороты.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ЕстьИсключаемыеРасходыТоварыУКомиссионера
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ &УсловиеПоискаВычитаемыхРасходовУКомиссионера
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(АналитикаНоменклатуры.Склад КАК Справочник.Партнеры),
	|	АналитикаНоменклатуры.Номенклатура,
	|	АналитикаНоменклатуры.Характеристика,
	|	ТоварыПереданныеНаКомиссиюОбороты.Регистратор,
	|	ТоварыПереданныеНаКомиссиюОбороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Партнер,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	СУММА(ВложенныйЗапрос.Расход) КАК Расход,
	|	СУММА(0) КАК РасходСумма,
	|	ВложенныйЗапрос.Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыУКомиссионераРегистраторРасход.Партнер КАК Партнер,
	|		ТоварыУКомиссионераРегистраторРасход.Номенклатура КАК Номенклатура,
	|		ТоварыУКомиссионераРегистраторРасход.Характеристика КАК Характеристика,
	|		ТоварыУКомиссионераРегистраторРасход.Расход КАК Расход,
	|		ТоварыУКомиссионераРегистраторРасход.Период КАК Период
	|	ИЗ
	|		ТоварыУКомиссионераРегистраторРасход КАК ТоварыУКомиссионераРегистраторРасход) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Партнер,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Период";
	
	Возврат ТекстЗапроса;
КонецФункции	

// Получает текст запроса нормативной оборачиваемости товаров по складам.
//
// Возвращаемое значение:
//   <Строка> - Текст запроса.
//
Функция ТекстЗапросаНормативнойОборачиваемостиПоСкладам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтОтборНоменклатуры
		|ИЗ
		|	&ОтборНоменклатуры КАК Таблица
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Склад,
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОтборНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Таблица.Ссылка В(&Склад)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтОтборНоменклатуры";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает таблицу цен номенклатуры по виду цен отчета.
//
// Параметры:
//  Настройки      - НастройкиКомпоновкиДанных - настройки отчета
//  Номенклатура   - Массив - Массив номенклатуры для определения цен.
//  Характеристика - Массив - Массив характеристик номенклатуры для определения цен.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица, содержащая цены номенклатуры.
//
Функция ТаблицаЦенНоменклатуры(Настройки, Номенклатура, Характеристика)
	ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
	НачалоПериода = ДополнительныеСвойства.НачалоПериода;
	КонецПериода = ДополнительныеСвойства.КонецПериода;
	
	ТаблицаЦен = Новый ТаблицаЗначений;
	НастройкаВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
	ВидЦены = НастройкаВидЦены.Значение;
	Если НЕ ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат ТаблицаЦен;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТаблицаЦенНоменклатуры();
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("ВидЦены", 		ВидЦены);
	Запрос.УстановитьПараметр("Номенклатура",	Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",	Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
КонецФункции

// Получает текст запроса для получения таблицы цен номенклатуры.
//
// Возвращаемое значение:
//   <Строка> - Текст запроса.
//
Функция ТекстЗапросаТаблицаЦенНоменклатуры()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.ВидЦены,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Характеристика,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&КонецПериода,
	|			ВидЦены = &ВидЦены
	|				И Номенклатура В (&Номенклатура)
	|				И Характеристика В (&Характеристика)) КАК ЦеныНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.Период УБЫВ";
	
	Возврат ТекстЗапроса;
КонецФункции	

// Получает цену номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура> 			   - Номенклатура, цену которой необходимо определить.
//  Характеристика - <СправочникСсылка.ХарактеристикиНоменклатуры> - Характеристика номенклатуры, цену которой необходимо определить.
//  ТаблицаЦен	   - <ТаблицаЗначений>							   - Таблица, из которой выбирается цена.
//
// Возвращаемое значение:
//   <Число> 	   - Полученная цена номенклатуры.
//
Функция ЦенаНоменклатуры(Номенклатура, Характеристика, ТаблицаЦен)
	Цена = 0;
	Если ТаблицаЦен.Количество() = 0 Тогда
		Возврат Цена;
	КонецЕсли;	
	
	Номенклатура   = ?(Номенклатура = Неопределено,   Справочники.Номенклатура.ПустаяСсылка(),				 Номенклатура);
	Характеристика = ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика);
	
	МассивЦен = ТаблицаЦен.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
	Если МассивЦен.Количество() > 0 Тогда
		Цена = МассивЦен[0].Цена;
	КонецЕсли;
	
	Возврат Цена;
КонецФункции

#КонецОбласти

#Область НастройкиОтчета

// Устанавливает настройки (отбор и параметры) СКД Таблица на основании основной СКД.
//
// Параметры:
//  ПриемникНастройки  - <НастройкиКомпоновкиДанных> - Куда загружаются настройки.
//  ИсточникНастройки  - <НастройкиКомпоновкиДанных> - Откуда загружаются настройки.
//
Процедура УстановитьНастройкиСКД(ПриемникНастройки, ИсточникНастройки)
	Если ИсточникНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Копируем отбор
	СтруктураДоступныхПолейОтбора = Новый Структура;
	СтруктураДоступныхПолейОтбора.Вставить("Склад");
	СтруктураДоступныхПолейОтбора.Вставить("Партнер");
	СтруктураДоступныхПолейОтбора.Вставить("Номенклатура");
	СтруктураДоступныхПолейОтбора.Вставить("Характеристика");
	СтруктураДоступныхПолейОтбора.Вставить("ABC");
	СтруктураДоступныхПолейОтбора.Вставить("XYZ");
	
	ОтборИсточник = ИсточникНастройки.Отбор.Элементы;
	ОтборПриемник = ПриемникНастройки.Отбор.Элементы;
	ОтборПриемник.Очистить();
	ОбойтиЭлементыОтбора(СтруктураДоступныхПолейОтбора, ОтборИсточник, ОтборПриемник);
	
	// Устанавливаем параметры
	ПараметрыПриемника = ПриемникНастройки.ПараметрыДанных;
	ЭлементыПараметрыИсточника = ИсточникНастройки.ПараметрыДанных.Элементы;
	
	// Сбрасываем значения основных параметров
	ПараметрыПриемника.УстановитьЗначениеПараметра("ТипПараметраКлассификации", Перечисления.ТипыПараметровКлассификации.ПустаяСсылка());
	
	// Сбрасываем значения параметров расшифровки
	ПараметрыПриемника.УстановитьЗначениеПараметра("Номенклатура",   			Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыПриемника.УстановитьЗначениеПараметра("Характеристика", 			Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыПриемника.УстановитьЗначениеПараметра("СкладПартнер",   			Неопределено);
	Для Каждого ПараметрИсточника Из ЭлементыПараметрыИсточника Цикл
		СтрокаПараметр = Строка(ПараметрИсточника.Параметр);
		Если ПараметрИсточника.Использование Тогда
			ЗначениеПараметра = ПараметрИсточника.Значение;
			Если СтрокаПараметр = "Период" И ТипЗнч(ЗначениеПараметра) = Тип("СтандартныйПериод") Тогда
				// Период в основной СКД задается через тип СтандартныйПериод
				ПараметрыПриемника.УстановитьЗначениеПараметра("ДатаНач", ЗначениеПараметра.ДатаНачала);
				ПараметрыПриемника.УстановитьЗначениеПараметра("ДатаКон", ЗначениеПараметра.ДатаОкончания);
			Иначе
				ИскомыйПараметр = Новый ПараметрКомпоновкиДанных(СтрокаПараметр);
				Если ПараметрыПриемника.НайтиЗначениеПараметра(ИскомыйПараметр) <> Неопределено Тогда
					ПараметрыПриемника.УстановитьЗначениеПараметра(ИскомыйПараметр, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоказателейПоТаблицеДанных

// Рассчитывает суммарный остаток по контрольным точкам и сопутствующие параметры.
//
// Параметры:
//  ПеременныеРасчета - Структура
//    СуммарныйОстатокПоКоличеству - <Число> 										 - Нарастающий суммарный остаток по количеству по контрольным точкам.
//    СуммарныйОстатокПоСумме		 - <Число> 										 - Нарастающий суммарный остаток по сумме по контрольным точкам.
//    КонечныйОстаток 			 - <Число> 										 - Остаток на дату контрольной точки.
//    КонтрольныхТочек 			 - <Число> 										 - Нарастающее количество контрольных точек.
//    ТочкаОтсчета 				 - <Дата>  										 - Текущая дата контрольная точка.
//    Номенклатура   				 - <СправочникСсылка.Номенклатура> 			     - Номенклатура, по которой производится расчет суммарного остатка.
//    Характеристика 				 - <СправочникСсылка.ХарактеристикиНоменклатуры> - Характеристика номенклатуры, по которой производится расчет суммарного остатка.
//    ТаблицаЦен	  				 - <ТаблицаЗначений>							 - Таблица, из которой выбирается цена номенклатуры.
//
Процедура РассчитатьСуммарныйОстатокПоКонтрольнымТочкам(ПеременныеРасчета)
	ПеременныеРасчета.СуммарныйОстатокПоКоличеству = ПеременныеРасчета.СуммарныйОстатокПоКоличеству + ПеременныеРасчета.КонечныйОстаток;
	
	ПеременныеРасчета.СуммарныйОстатокПоСумме 	 = ПеременныеРасчета.СуммарныйОстатокПоСумме
		+ ПеременныеРасчета.КонечныйОстаток 
		* ЦенаНоменклатуры(ПеременныеРасчета.Номенклатура, ПеременныеРасчета.Характеристика, ПеременныеРасчета.ТаблицаЦен);
		
	ПрибавитьКонтрольнуюТочку(ПеременныеРасчета.КонечныйОстаток, ПеременныеРасчета.КонтрольныхТочек, ПеременныеРасчета.ИсключатьДниОтсутствияТовара);
	
	ПрибавитьПериод(ПеременныеРасчета.ТочкаОтсчета);
КонецПроцедуры

// Добавляет период к дате с выбранной периодичностью.
//
// Параметры:
//  ТочкаОтсчета - <Дата> - Дата, к которой необходимо добавить период.
//
Процедура ПрибавитьПериод(ТочкаОтсчета)
	НастройкаПериодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Периодичность");
	Периодичность = НастройкаПериодичность.Значение;
	Сутки = 60 * 60 * 24;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 12);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТочкаОтсчета = ДобавитьМесяц(ТочкаОтсчета, 1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ТочкаОтсчета = ТочкаОтсчета + Сутки * 10;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТочкаОтсчета = ТочкаОтсчета + Сутки * 7;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ТочкаОтсчета = ТочкаОтсчета + Сутки;
	КонецЕсли;
КонецПроцедуры

// Добавляет контрольную точку.
//
// Параметры:
//  КонечныйОстаток  - <Число> - Остаток на дату контрольной точки.
//  КонтрольныхТочек - <Число> - Нарастающее количество контрольных точек.
//
Процедура ПрибавитьКонтрольнуюТочку(КонечныйОстаток, КонтрольныхТочек, ИсключатьДниОтсутствияТовара)
	КонтрольныхТочек = КонтрольныхТочек + 1;
	Если КонечныйОстаток = 0 И ИсключатьДниОтсутствияТовара Тогда
		// Исключаем контрольную точку с нулевым остатком
		КонтрольныхТочек = КонтрольныхТочек - 1; 
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРасшифровки

// Выполняет чтение элементов отбора источника (основная СКД) и загрузку их в элементы отбора приемника (СКД таблица).
//
// Параметры:
//  СтруктураДоступныхПолейОтбораПриемника - <Структура> 					 		    - Структура, содержащая имена доступных полей отбора СКД приемника.
//  ЭлементыОтбораИсточник 		  		   - <КоллекцияЭлементовОтбораКомпоновкиДанных> - Элементы отбора источника.
//  ЭлементыОтбораПриемник  	  		   - <КоллекцияЭлементовОтбораКомпоновкиДанных> - Элементы отбора приемника.
//
Процедура ОбойтиЭлементыОтбора(СтруктураДоступныхПолейОтбораПриемника, ЭлементыОтбораИсточник, ЭлементыОтбораПриемник)
	Для Каждого ЭлементОтбораИсточник Из ЭлементыОтбораИсточник Цикл
		Если ЭлементОтбораИсточник.Использование Тогда
			Если ТипЗнч(ЭлементОтбораИсточник) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				// Проверим, доступно ли поле в отборе приемника. Поле верхнего родителя (через точку) тоже необходимо проверить.
				ЛевоеЗначениеСтрока = Строка(ЭлементОтбораИсточник.ЛевоеЗначение);
				ПозицияТочки = СтрНайти(ЛевоеЗначениеСтрока, ".");
				Если ПозицияТочки <> 0 Тогда
					// Верхний родитель
					ЛевоеЗначениеСтрока = Лев(ЛевоеЗначениеСтрока, ПозицияТочки - 1);
				КонецЕсли;	
				Если НЕ СтруктураДоступныхПолейОтбораПриемника.Свойство(ЛевоеЗначениеСтрока) Тогда
					// В доступных элементах отбора приемника нет подходящего поля
					Продолжить; 
				КонецЕсли;	
				
				НовыйЭлементОтбораПриемник = ЭлементыОтбораПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеКомпоновки = Новый ПолеКомпоновкиДанных(Строка(ЭлементОтбораИсточник.ЛевоеЗначение));
				НовыйЭлементОтбораПриемник.ЛевоеЗначение  = ПолеКомпоновки;
				НовыйЭлементОтбораПриемник.ВидСравнения   = ЭлементОтбораИсточник.ВидСравнения;
				НовыйЭлементОтбораПриемник.ПравоеЗначение = ЭлементОтбораИсточник.ПравоеЗначение;
				НовыйЭлементОтбораПриемник.Применение  	  = ЭлементОтбораИсточник.Применение;
				НовыйЭлементОтбораПриемник.Использование  = ЭлементОтбораИсточник.Использование;
			ИначеЕсли ТипЗнч(ЭлементОтбораИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				НовыйЭлементОтбораПриемник = ЭлементыОтбораПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				НовыйЭлементОтбораПриемник.ТипГруппы  	 = ЭлементОтбораИсточник.ТипГруппы;
				ОбойтиЭлементыОтбора(СтруктураДоступныхПолейОтбораПриемника, ЭлементОтбораИсточник.Элементы, НовыйЭлементОтбораПриемник.Элементы);
				НовыйЭлементОтбораПриемник.Применение  	 = ЭлементОтбораИсточник.Применение;
				НовыйЭлементОтбораПриемник.Использование = ЭлементОтбораИсточник.Использование;
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает/снимает признак использования у выбранного поля СКД.
//
// Параметры:
//  ЭлементыВыбора  - <КоллекцияВыбранныхПолейКомпоновкиДанных> - Выбранные поля.
//  ИмяПоля  		- <Строка> 									- Имя анализируемого поля.
//  Использование   - <Булево>									- Устанавливаемый признак использования.
//
Процедура УстановитьСнятьИспользованиеУВыбранногоПоля(ЭлементыВыбора, ИмяПоля = "Характеристика", Использование = Истина)
	Для Каждого ЭлементВыбора Из ЭлементыВыбора Цикл
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Если ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			
			Если ЭлементВыбора.Поле = ПолеКомпоновки Тогда
				ЭлементВыбора.Использование = Использование;
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			УстановитьСнятьИспользованиеУВыбранногоПоля(ЭлементВыбора.Элементы, ИмяПоля, Использование);
			
		Иначе
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// Устанавливает/снимает признак использования у выбранной группировки СКД.
//
// Параметры:
//  Структура  	   - <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных> - Элементы структуры.
//  ИмяГруппировки - <Строка> 											   - Имя анализируемой группировки.
//  Использование  - <Булево>											   - Устанавливаемый признак использования.
//
Процедура УстановитьСнятьИспользованиеУГруппировки(Структура, ИмяГруппировки = "Характеристика", Использование = Истина)
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяГруппировки);
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
				Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") И
					ПолеГруппировки.Поле = ПолеКомпоновки Тогда
					ПолеГруппировки.Использование = Использование;
				КонецЕсли;	
				
			КонецЦикла;	
			
			УстановитьСнятьИспользованиеУВыбранногоПоля(ЭлементСтруктуры.Выбор.Элементы, ИмяГруппировки, Использование);
			УстановитьСнятьИспользованиеУГруппировки(ЭлементСтруктуры.Структура, ИмяГруппировки, Использование);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Добавляет валюту в заголовок выбранных полей.
//
// Параметры:
//  ЭлементыВыбора  - <КоллекцияВыбранныхПолейКомпоновкиДанных> - Выбранные поля.
//  Валюта  		- <Строка> 									- Добавляемая в заголовок валюта.
//  ИмяПоля  		- <Строка> 									- Имя анализируемого поля.
//
Процедура ДобавитьВалютуВЗаголовокВыбранныхПолей(ЭлементыВыбора, Валюта, ИмяПоля = "Сумма")
	Если Валюта = "" Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ЭлементВыбора Из ЭлементыВыбора Цикл
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Если ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если СтрНайти(Строка(ЭлементВыбора.Поле), ИмяПоля) <> 0 И ЭлементВыбора.Заголовок = ИмяПоля Тогда
				ЭлементВыбора.Заголовок = ЭлементВыбора.Заголовок + " (" + Валюта + ")";
			КонецЕсли;	
		ИначеЕсли ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ДобавитьВалютуВЗаголовокВыбранныхПолей(ЭлементВыбора.Элементы, Валюта, ИмяПоля);
		Иначе
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

// Добавляет валюту в заголовок выбранных полей группировки.
//
// Параметры:
//  Структура  	   - <КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных> - Элементы структуры.
//  Валюта  	   - <Строка> 											   - Добавляемая в заголовок валюта.
//  ИмяПоля  	   - <Строка> 											   - Имя анализируемого поля.
//
Процедура ДобавитьВалютуВЗаголовокВыбранныхПолейГруппировки(Структура, Валюта, ИмяПоля = "Сумма")
	Если Валюта = "" Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ДобавитьВалютуВЗаголовокВыбранныхПолей(ЭлементСтруктуры.Выбор.Элементы, Валюта, ИмяПоля);
			ДобавитьВалютуВЗаголовокВыбранныхПолейГруппировки(ЭлементСтруктуры.Структура, Валюта, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Определяет предыдущий период по текущему периоду.
//
// Параметры:
//  ДатаНачала 	 - <Дата> - Дата начала текущего периода.
//  ДатаКонца  	 - <Дата> - Дата окончания текущего периода.
//
// Возвращаемое значение:
//   <Структура> - Структура (ключи НачалоПериода, КонецПериода) содержащая предыдущий период.
//
Функция ПредыдущийПериод(Знач ДатаНачала, Знач ДатаКонца)
	ПредыдущийПериод = Новый СтандартныйПериод;
	ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала) И КонецДня(ДатаКонца) = КонецМесяца(ДатаКонца) Тогда
		// Случай, когда период установлен кратным месяцу. Посчитаем количество лет и месяцев.
		КоличествоЛет 	  = Год(ДатаКонца) - Год(ДатаНачала);
		КоличествоМесяцев = Месяц(ДатаКонца) - Месяц(ДатаНачала) + 1;
		
		ВычестьМесяцев = -(КоличествоМесяцев + КоличествоЛет * 12);
		
		ПредыдущийПериод.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ДатаНачала, ВычестьМесяцев));
		ПредыдущийПериод.ДатаОкончания  = КонецМесяца(ДобавитьМесяц(ДатаКонца,   ВычестьМесяцев));
	Иначе
		// Общий случай, когда период установлен кратным одному дню.
		РазностьДатСекунд = ДатаКонца - ДатаНачала;
		ПредыдущийПериод.ДатаНачала = ДатаНачала - РазностьДатСекунд - 1;
		ПредыдущийПериод.ДатаОкончания  = ДатаКонца  - РазностьДатСекунд - 1;
	КонецЕсли;	
	
	Возврат ПредыдущийПериод;
КонецФункции

Функция НастройкаПериодаЗаданаКорректно(ДатаНачала, ДатаОкончания, Периодичность)
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	ДнейВНеделе = 7;
	ДнейВДекаде = 10;
	ДнейВМесяце = 31;
	ДнейВКвартале = 92;
	ДнейВПолугодии = 184;
	ДнейВГоду = 366;
	
	ЧислоДнейВПериоде = (ДатаОкончания + 1 - ДатаНачала) / (СекундВМинуте * МинутВЧасе * ЧасовВДне);
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВГоду;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВПолугодии;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВКвартале;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВМесяце;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВДекаде;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат ЧислоДнейВПериоде >= ДнейВНеделе;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат ЧислоДнейВПериоде >= 1;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ВспомогательныеПараметрыОтчета()
	ВспомогательныеПараметры = Новый Массив;
	
	// Добавить вспомогательные параметры отчета 
	ВспомогательныеПараметры.Добавить("СравниватьСПредыдущимПериодом");
	ВспомогательныеПараметры.Добавить("СравниватьСАналогичнымПериодомПрошлогоГода");
	ВспомогательныеПараметры.Добавить("ИсключаемыеРасходыТоварыНаСкладах");
	ВспомогательныеПараметры.Добавить("ВключатьРеализациюНаКомиссиюВРасходТоварыНаСкладах");
	ВспомогательныеПараметры.Добавить("ИсключаемыеРасходыТоварыУКомиссионера");
	ВспомогательныеПараметры.Добавить("ВычитаемыеПриходыТоварыНаСкладах");
	ВспомогательныеПараметры.Добавить("ВыводитьГрафикОборачиваемостиВОтносительныхЗначениях");
	ВспомогательныеПараметры.Добавить("ЧислоЛетДляСравненияНаГрафике");
	ВспомогательныеПараметры.Добавить("ЧислоПериодовДляСравненияНаГрафике");
	
	Возврат ВспомогательныеПараметры;
КонецФункции

#КонецОбласти

#КонецЕсли
