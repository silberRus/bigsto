&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",             Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",              Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ТипДанных",                 Отчет.ТипДанных);
	ПараметрыОтчета.Вставить("ИмяОбъекта",                Отчет.ИмяОбъекта);
	ПараметрыОтчета.Вставить("ИмяТаблицы",                Отчет.ИмяТаблицы);
	ПараметрыОтчета.Вставить("Группировка",               Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок",         ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал",            ВыводитьПодвал);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",         ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления",           МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",     ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",       БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("Организация",               Неопределено);
	ПараметрыОтчета.Вставить("Заголовок",                 Заголовок);
		
	Возврат ПараметрыОтчета;
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Отчет.ИмяТаблицы) Тогда
		ШаблонЗаголовка = НСтр("ru = 'Отчет по доставке: %1 ""%2"" - таблица ""%3""%4'");
	Иначе
		ШаблонЗаголовка = НСтр("ru = 'Отчет по доставке: %1 ""%2""%4'");
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		ПолучитьПредставлениеЗначения(Элементы.ТипДанных.СписокВыбора, Отчет.ТипДанных),
		ПолучитьПредставлениеЗначения(Элементы.ИмяОбъекта.СписокВыбора, Отчет.ИмяОбъекта),
		ПолучитьПредставлениеЗначения(Элементы.ИмяТаблицы.СписокВыбора, Отчет.ИмяТаблицы),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));
		
	Форма.Заголовок =  ТекстЗаголовка;

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗначения(Список, Значение)
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		Возврат Строка(Значение);
	Иначе
		Возврат ЭлементСписка.Представление;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	//ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ИБФайловая = Истина;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервераСформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
					
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура УстановитьПоУмолчаниюТипДанных()
	
	Если ПустаяСтрока(Отчет.ТипДанных) Тогда
		Отчет.ТипДанных = "РегистрыНакопления";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюОбъект()
	
	Если ПустаяСтрока(Отчет.ИмяОбъекта)
		И Элементы.ИмяОбъекта.СписокВыбора.Количество() > 0 Тогда
		Отчет.ИмяОбъекта = Элементы.ИмяОбъекта.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПоУмолчаниюТаблицу()
	
	СписокВыбораТаблиц = Элементы.ИмяТаблицы.СписокВыбора;
	Если СписокВыбораТаблиц.Количество() > 1 Тогда
		Отчет.ИмяТаблицы = СписокВыбораТаблиц[1].Значение;
		Элементы.ИмяТаблицы.Видимость = Истина;
	Иначе
		Элементы.ИмяТаблицы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЭлементовФормы()
	ОбновитьСписокВыбораТипДанных();
	УстановитьПоУмолчаниюТипДанных();
	ОбновитьСписокВыбораОбъектов();
	УстановитьПоУмолчаниюОбъект();
	ОбновитьСписокВыбораТаблиц();
	УстановитьПоУмолчаниюТаблицу();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораТипДанных()
	
    Элементы.ТипДанных.СписокВыбора.Очистить();
	Элементы.ТипДанных.СписокВыбора.Добавить("Документы", "Документ", , БиблиотекаКартинок.Документ);
	Элементы.ТипДанных.СписокВыбора.Добавить("Справочники", "Справочник", , БиблиотекаКартинок.Справочник);
	Элементы.ТипДанных.СписокВыбора.Добавить("РегистрыНакопления", "Регистр накопления", , БиблиотекаКартинок.РегистрНакопления);
	Элементы.ТипДанных.СписокВыбора.Добавить("РегистрыСведений", "Регистр сведений", , БиблиотекаКартинок.РегистрСведений);
	Элементы.ТипДанных.СписокВыбора.Добавить("РегистрыБухгалтерии", "Регистр бухгалтерии", , БиблиотекаКартинок.РегистрБухгалтерии);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораОбъектов()
	
	Элементы.ИмяОбъекта.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Отчет.ТипДанных) Тогда
		Возврат;
	КонецЕсли;
	СписокОбъектов = Новый СписокЗначений;
	Для каждого Объект Из Метаданные[Отчет.ТипДанных] Цикл
		Элементы.ИмяОбъекта.СписокВыбора.Добавить(Объект.Имя, Объект.Синоним);
	КонецЦикла;
	Элементы.ИмяОбъекта.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораТаблиц()
	Элементы.ИмяТаблицы.СписокВыбора.Очистить();
	Если НЕ ЗначениеЗаполнено(Отчет.ТипДанных) 
		ИЛИ НЕ ЗначениеЗаполнено(Отчет.ИмяОбъекта) Тогда
		Возврат;
	КонецЕсли;
	СписокВыбораТаблиц = Элементы.ИмяТаблицы.СписокВыбора;
	СписокВыбораТаблиц.Добавить("", "");
	Если Отчет.ТипДанных = "Документы" ИЛИ Отчет.ТипДанных = "Справочники" Тогда
		Для каждого ТабличнаяЧасть Из Метаданные[Отчет.ТипДанных][Отчет.ИмяОбъекта].ТабличныеЧасти Цикл
			СписокВыбораТаблиц.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		КонецЦикла;
	ИначеЕсли Отчет.ТипДанных = "РегистрыНакопления" Тогда
		Если Метаданные[Отчет.ТипДанных][Отчет.ИмяОбъекта].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			СписокВыбораТаблиц.Добавить("ОстаткиИОбороты", "Остатки и обороты");
		Иначе
			СписокВыбораТаблиц.Добавить("Обороты", "Обороты");
		КонецЕсли;
	ИначеЕсли Отчет.ТипДанных = "РегистрыСведений" Тогда 
		Если Метаданные[Отчет.ТипДанных][Отчет.ИмяОбъекта].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Иначе
			СписокВыбораТаблиц.Добавить("СрезПоследних", "Срез последних");
			СписокВыбораТаблиц.Добавить("СрезПервых",    "Срез первых");
		КонецЕсли;
	ИначеЕсли Отчет.ТипДанных = "РегистрыБухгалтерии" Тогда
		СписокВыбораТаблиц.Добавить("ОстаткиИОбороты",   "Остатки и обороты");
		СписокВыбораТаблиц.Добавить("Остатки",           "Остатки");
		СписокВыбораТаблиц.Добавить("Обороты",           "Обороты");
		СписокВыбораТаблиц.Добавить("ОборотыДтКт",       "Обороты Дт/Кт");
		СписокВыбораТаблиц.Добавить("ДвиженияССубконто", "Движения с субконто");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсточникПриИзмененииНаСервере(ИмяИсточника)
	Если ИмяИсточника = "ТипДанных" Тогда
		ОбновитьСписокВыбораОбъектов();
		УстановитьПоУмолчаниюОбъект();
	КонецЕсли;
	Если ИмяИсточника = "ТипДанных" ИЛИ ИмяИсточника = "ИмяОбъекта" Тогда
		ОбновитьСписокВыбораТаблиц();
		УстановитьПоУмолчаниюТаблицу();
	КонецЕсли;
	ИнициализироватьОтчет(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтчет(ОчиститьНастройки = Ложь)
	
	Если ПустаяСтрока(Отчет.ТипДанных) ИЛИ ПустаяСтрока(Отчет.ИмяОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОчиститьНастройки Тогда
		Отчет.Группировка.Очистить();
	КонецЕсли;
	
	СКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	СКД.ПоляИтога.Очистить();

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	СКД.НаборыДанных[0].Запрос = СформироватьЗапросПоМетаданным(ПараметрыОтчета);
	ДобавитьПоляНабораДанных(ПараметрыОтчета, СКД);
	
 	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);	
 
 	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Отчет.КомпоновщикНастроек.Восстановить(); 
    Отчет.КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Если ОчиститьНастройки Тогда
		Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		ЗаполнитьСтруктуруПоУмолчанию(ПараметрыОтчета, Отчет.КомпоновщикНастроек);
		ДобавитьПоказатели(ПараметрыОтчета, Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек, "Title", Метаданные[Отчет.ТипДанных][Отчет.ИмяОбъекта].Синоним);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек, "FilterOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(
		Отчет.КомпоновщикНастроек, "DataParametersOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВыборПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Выбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Выбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Выбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ЭлементВыбора = ТекущаяСтрока.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементВыбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Иначе
				ЭлементВыбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементВыбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;
		ЭлементВыбора.Поле =  Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(ЭлементВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломИзменения(Форма, Элемент, Отказ)
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "ВыборПоле") > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Выбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Выбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		   		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;	
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Выбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройки()
    Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервераПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ИнициализацияЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ВариантМодифицирован                    = Ложь;
	ПользовательскиеНастройкиМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	// Сохраним настройки выбранных полей
	Отчет.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "Выбор";
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Отчет.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "Выбор";
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	Отчет.КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки = "";
	
	ОбновитьСписокВыбораОбъектов();
	ОбновитьСписокВыбораТаблиц();
    СписокВыбораТаблиц = Элементы.ИмяТаблицы.СписокВыбора;
	Элементы.ИмяТаблицы.Видимость = СписокВыбораТаблиц.Количество() > 1;
		
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
		
	ИнициализироватьОтчет();
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяОбъектаПриИзменении(Элемент)
	
	Отчет.ИмяТаблицы = "";
	
	ИсточникПриИзмененииНаСервере("ИмяОбъекта");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТаблицыПриИзменении(Элемент)
	
	ИнициализироватьОтчет(Истина);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДанныхПриИзменении(Элемент)
	
	Отчет.ИмяОбъекта = "";
	Отчет.ИмяТаблицы = "";
	ИсточникПриИзмененииНаСервере("ТипДанных");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиентОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

// Показатели

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ВыборПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиВыборПередНачаломИзменения(Элемент, Отказ)
	
	ВыборПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

// Оформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиентСортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиентСортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОТБОРЫ

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиентОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиентОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ГРУППИРОВКА

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиентГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиентГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьПериод(Команда)
			
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьНастройки", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
		
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры


//Перетащил из Бух 3.0 +
&НаСервере
Процедура БухгалтерскиеОтчетыВызовСервераПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//Отчет     = Форма.Отчет;  
	//Параметры = Форма.Параметры;
	Если Параметры.Свойство("РежимРасшифровки") Тогда 
		Отчет.РежимРасшифровки = Параметры.РежимРасшифровки;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидРасшифровки") Тогда 
		// 1 - из временного хранилища, 2 - из параметров формы
		Если Параметры.ВидРасшифровки = 1 Тогда
			ДанныеОбъекта = ПолучитьИзВременногоХранилища(Параметры.АдресНастроек);
			ПользовательскиеНастройки = ДанныеОбъекта.НастройкиРасшифровки[Параметры.ИДРасшифровки];
		ИначеЕсли Параметры.ВидРасшифровки = 2 Тогда
			ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
		КонецЕсли;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") 
			И ЗначениеЗаполнено(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта)Тогда
			Форма.УстановитьТекущийВариант(ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта);
		КонецЕсли;
		
		// Установка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Загрузка пользовательских настроек в компоновщик настроек отчета
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
		// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
		Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		
		// Загрузка основных настроек
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		// Очистка пользовательских настроек
		Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка значений реквизитов отчета и формы
		Для Каждого ЭлементСтруктуры Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Если Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
				// Табличные части отчета могут быть переданны в виде массива структур
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда 
					Для Каждого СтрокаСведений Из ЭлементСтруктуры.Значение Цикл
						НоваяСтрока = Отчет[ЭлементСтруктуры.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
					КонецЦикла;
				Иначе
					Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
				КонецЕсли;
			ИначеЕсли ЕстьРеквизитФормы(Форма, ЭлементСтруктуры.Ключ) Тогда
				Форма[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
			Параметры.КлючВарианта = ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьРеквизитФормы(Форма, "ОписанияТиповВидовСубконто") Тогда
		Форма.ОписанияТиповВидовСубконто = Новый Структура;
		Форма.ОписанияТиповВидовСубконто.Вставить("Номенклатура"                  , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Склад"                         , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Контрагент"                    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента"            , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("Партия"                        , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения);
		Форма.ОписанияТиповВидовСубконто.Вставить("ДокументРасчетовСКонтрагентами", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
	КонецЕсли;
	
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Если Не ЗначениеЗаполнено(Форма.СхемаКомпоновкиДанных) Тогда
		Форма.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	Форма.ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Форма.ДанныеРасшифровки, Форма.УникальныйИдентификатор);
	
	//МенеджерОтчета = Отчеты[БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма)];    // на ошибке
	//Если ЕстьРеквизитФормы(Форма, "НаборПоказателей") Тогда		                                                       
	//	Форма.НаборПоказателей = Новый ФиксированныйМассив(МенеджерОтчета.ПолучитьНаборПоказателей());
	//КонецЕсли;
	
	ПараметрМакетОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления");
	СписокМакетовОформления = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьСписокМакетовОформления();
	Для Каждого ЭлементСписка Из СписокМакетовОформления Цикл
		Если ЕстьЭлементФормы(Форма, "МакетОформления") Тогда
			Форма.Элементы.МакетОформления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрМакетОформления.Использование И Не ПустаяСтрока(ПараметрМакетОформления.Значение) Тогда
		Если ЕстьРеквизитФормы(Форма, "МакетОформления") Тогда
			Форма.МакетОформления = ПараметрМакетОформления.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ПанельНастроек") Тогда
		БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
			Форма.Элементы.ПанельНастроек, Форма.Элементы.ГруппаПанельНастроек.Видимость);
	КонецЕсли;
		
	Если Отчет.РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
		Если Параметры.Свойство("ЗаполняемыеНастройки") Тогда
			Попытка
				Форма.ЗаполнитьНастройкамиПоУмолчанию(Параметры.ЗаполняемыеНастройки);
			Исключение
				// Запись в журнал регистрации не требуется
			КонецПопытки;
		КонецЕсли;
		Форма.СформироватьОтчетНаСервере();
	Иначе
		УстановитьНастройкиПоУмолчанию(Форма);
	КонецЕсли;
	
	Если ЕстьЭлементФормы(Форма, "ВидПериода") Тогда
		ВыборПериодаКлиентСервеЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
			Форма.Элементы.ВидПериода.СписокВыбора, Форма.ВидПериода);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "СоответствиеОрганизаций")
		И ЕстьЭлементФормы(Форма, "ПолеОрганизация") Тогда
		ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Форма.Элементы.ПолеОрганизация, Форма.СоответствиеОрганизаций);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "ИспользуетсяНесколькоОрганизаций") Тогда
		Форма.ИспользуетсяНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	РегистрыУчетаВызовСервераПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Заполняет переданный в параметрах список выбора 
// 
// Параметры: 
// МинимальныйПериод   - Перечисление.ДоступныеПериодыОтчета - минимальный вид периода, 
//                       начиная с которого необходимо включать остальные виды периода по возрастанию.
// СписокВыбора        - СписокЗначений - в списке возвращаются заполненный список выбора
// ЗначениеПоУмолчанию - Перечисление.ДоступныеПериодыОтчета - в параметре возвращает вид периода по умолчанию.
//
Процедура ВыборПериодаКлиентСервеЗаполнитьСписокВыбораВидПериода(Знач МинимальныйПериод, СписокВыбора, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(СписокВыбора) <> Тип("СписокЗначений") тогда
		Возврат;
	КонецЕсли;
	
	СписокДоступныхПериодов = ПолучитьСписокДоступныхПериодов();
	
	ЭлементСписка = СписокДоступныхПериодов.НайтиПоЗначению(МинимальныйПериод);
	Если ЭлементСписка <> Неопределено Тогда
		ИндексЭлемента = СписокДоступныхПериодов.Индекс(ЭлементСписка);
		Для Сч = ИндексЭлемента По СписокДоступныхПериодов.Количество() - 1 Цикл
			Период = СписокДоступныхПериодов.Получить(Сч);
			СписокВыбора.Добавить(Период.Значение, Период.Представление);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
			ЗначениеПоУмолчанию = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
		КонецЕсли;
	Иначе
		Возврат; 
	КонецЕсли;
	
КонецПроцедуры

// Общий обработчик события "ПриСозданииНаСервере" форм отчетов,
// являющихся регистрами учета.
//
Процедура РегистрыУчетаВызовСервераПриСозданииНаСервере(Форма) Экспорт
	
	Если ЕстьРеквизитФормы(Форма, "ВидРегистра") Тогда
		
		Отчет = Форма.РеквизитФормыВЗначение("Отчет");
		
		ПолноеИмяОтчета = Отчет.Метаданные().ПолноеИмя();
		
		КлючВарианта = Неопределено;
		Форма.Параметры.Свойство("КлючВарианта", КлючВарианта);

		Если КлючВарианта = Неопределено И Отчет.СхемаКомпоновкиДанных <> Неопределено Тогда
			
			КлючВарианта = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя;
			
		КонецЕсли;	
		
		Форма.ВидРегистра = Справочники.ВидыРегистровУчета.ПолучитьВидРегистраБухгалтерскогоУчетаДляОтчета(ПолноеИмяОтчета, КлючВарианта);
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(Форма, "ИспользуетсяЭП") Тогда
		Форма.ИспользуетсяЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	КонецЕсли;
	
	// Уведомим о появлении нового функционала.
	Если ЕстьРеквизитФормы(Форма, "НастройкиПредупреждений") Тогда
		Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("СохранениеРегистровБУСЭЦПСтандартныеОтчеты");
	КонецЕсли;
	
	
КонецПроцедуры
 
Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) 
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
//	Отчет = ФормаОтчета.Отчет;
	
	Если Отчет.Свойство("НачалоПериода") Тогда
		Отчет.НачалоПериода = НачалоМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	Если Отчет.Свойство("КонецПериода") Тогда
		Отчет.КонецПериода  = КонецМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	Если Отчет.Свойство("Организация") Тогда
		Отчет.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если Отчет.Свойство("Подразделение") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.Подразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	ИначеЕсли Отчет.Свойство("ПодразделениеОрганизации") Тогда
		Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			Отчет.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательБУ") Тогда
		Отчет.ПоказательБУ = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("СальдоНаНачалоДт") Тогда
		Отчет.СальдоНаНачалоДт   = Истина;
		Отчет.СальдоНаНачалоКт   = Истина;
		Отчет.СальдоНаКонецДт    = Истина;
		Отчет.СальдоНаКонецКт    = Истина;
		Отчет.ОборотыЗаПериодДт  = Истина;
		Отчет.ОборотыЗаПериодКт  = Истина;
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = "Выводить наименование счета";
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = "До 7 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = "От 8 до 15 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = "От 16 до 30 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = "От 31 до 60 дней";
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = "От 61 до 90 дней";
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокДоступныхПериодов()
	
	СписокДоступныхПериодов = Новый СписокЗначений;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		Если НРег(Поле) <> "подразделение" ИЛИ БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			НоваяСтрока = Группировка.Добавить();
			
			НоваяСтрока.Использование  = Структура.Использование;
			НоваяСтрока.Поле           = Поле;
			НоваяСтрока.Представление  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
			Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
				НоваяСтрока.ТипГруппировки = 1;
			ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
				НоваяСтрока.ТипГруппировки = 2;
			Иначе
				НоваяСтрока.ТипГруппировки = 0;
			КонецЕсли;
		КонецЕсли;
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка)
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И Найти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура БухгалтерскиеОтчетыВызовСервераСформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ВыводитьПолностью = Истина;
	
	Отказ = Ложь;
	ДанныеРасшифровкиОбъект = Неопределено;
	ПараметрыИсполненияОтчета = Неопределено;
	
	//МенеджерОтчета = Отчеты[ПараметрыОтчета.ИдентификаторОтчета];
	
	Попытка
		ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета();
	Исключение
		// Запись в журнал регистрации не требуется
	КонецПопытки;
	
	ИспользоватьВнешниеНаборыДанных            = Ложь;
	ИспользоватьПриВыводеЗаголовка             = Ложь;
	ИспользоватьПриВыводеПодвала               = Ложь;
	ИспользоватьПередКомпоновкойМакета         = Ложь;
	ИспользоватьПослеКомпоновкиМакета          = Ложь;
	ИспользоватьПередВыводомЭлементаРезультата = Ложь;
	ИспользоватьПослеВыводаРезультата          = Ложь;
	ИспользоватьДанныеРасшифровки              = Истина;
	ИспользоватьПривилегированныйРежим         = Истина;
	
	Если ПараметрыИсполненияОтчета <> Неопределено Тогда
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьВнешниеНаборыДанных") Тогда
			ИспользоватьВнешниеНаборыДанных = ПараметрыИсполненияОтчета.ИспользоватьВнешниеНаборыДанных;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеЗаголовка") Тогда
			ИспользоватьПриВыводеЗаголовка = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеЗаголовка;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПриВыводеПодвала") Тогда
			ИспользоватьПриВыводеПодвала = ПараметрыИсполненияОтчета.ИспользоватьПриВыводеПодвала;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередКомпоновкойМакета") Тогда
			ИспользоватьПередКомпоновкойМакета = ПараметрыИсполненияОтчета.ИспользоватьПередКомпоновкойМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеКомпоновкиМакета") Тогда
			ИспользоватьПослеКомпоновкиМакета = ПараметрыИсполненияОтчета.ИспользоватьПослеКомпоновкиМакета;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПередВыводомЭлементаРезультата") Тогда
			ИспользоватьПередВыводомЭлементаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПередВыводомЭлементаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
			ИспользоватьПослеВыводаРезультата = ПараметрыИсполненияОтчета.ИспользоватьПослеВыводаРезультата;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьДанныеРасшифровки") Тогда
			ИспользоватьДанныеРасшифровки = ПараметрыИсполненияОтчета.ИспользоватьДанныеРасшифровки;
		КонецЕсли;
		Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьПривилегированныйРежим") Тогда
			ИспользоватьПривилегированныйРежим = ПараметрыИсполненияОтчета.ИспользоватьПривилегированныйРежим;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтчета.СхемаКомпоновкиДанных) = Тип("Строка") Тогда
		Если ЭтоАдресВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных) Тогда
			СхемаКомпоновкиДанных_ = ПолучитьИзВременногоХранилища(ПараметрыОтчета.СхемаКомпоновкиДанных);
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных_ = ПараметрыОтчета.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных_));
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодвал    = Истина;
	
	ВыводитьЕдиницуИзмерения = Ложь;
	
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЗаголовок") Тогда
		ВыводитьЗаголовок = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьПодвал") Тогда
		ВыводитьПодвал = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал;
	КонецЕсли;
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВыводитьЕдиницуИзмерения") Тогда
		ВыводитьЕдиницуИзмерения = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЕдиницуИзмерения;
	КонецЕсли;

	Результат = Новый ТабличныйДокумент;
	
	Если ВыводитьЗаголовок Тогда
		Если ИспользоватьПриВыводеЗаголовка Тогда
			//ПриВыводеЗаголовка(ПараметрыОтчета, Результат);
		Иначе
			ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыводитьПолностью Тогда
		Если ИспользоватьПередКомпоновкойМакета Тогда
			ПередКомпоновкойМакета(ПараметрыОтчета, СхемаКомпоновкиДанных_, КомпоновщикНастроек);
		КонецЕсли;
		КомпоновщикНастроек.Восстановить();
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
		
		УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета);
		
		//Сгенерируем макет компоновки данных при помощи компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Попытка
			
			//В качестве схемы компоновки будет выступать схема самого отчета
			//В качестве настроек отчета - текущие настройки отчета
			//Данные расшифровки будем помещать в ДанныеРасшифровки
			Если ИспользоватьДанныеРасшифровки Тогда 
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных_, НастройкиДляКомпоновкиМакета, ДанныеРасшифровкиОбъект);
			Иначе
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных_, НастройкиДляКомпоновкиМакета);
			КонецЕсли;
			
			//Вызываем событие отчета
			//Если ИспользоватьПослеКомпоновкиМакета Тогда
			//	ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки);
			//КонецЕсли;
			
			Если ИспользоватьВнешниеНаборыДанных Тогда
				ВнешниеНаборыДанных = Неопределено;//ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки);  
			КонецЕсли;
		
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			Если ВнешниеНаборыДанных = Неопределено Тогда
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровкиОбъект, Истина);
			Иначе
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиОбъект, Истина);
			КонецЕсли;	
			
			ДанныеДляРасшифровки = Новый Структура("Объект, ДанныеРасшифровки", ПараметрыОтчета, ДанныеРасшифровкиОбъект); 
			ДанныеРасшифровки_ = ПоместитьВоВременноеХранилище(ДанныеДляРасшифровки, ПараметрыОтчета.ДанныеРасшифровки);
			
			//Создадим и инициализируем процессор вывода результата
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(Результат);
			
			// Перед началом вывода установим привилегированный режим
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Истина);
			КонецЕсли;
		
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			Если ИспользоватьПередВыводомЭлементаРезультата Тогда
				//Основной цикл вывода отчета
				Пока Истина Цикл
					
					//ОбработкаПрерыванияПользователя();
					//Получим следующий элемент результата компоновки
					ЭлементРезультата = ПроцессорКомпоновки.Следующий();
					
					Если ЭлементРезультата = Неопределено Тогда
						//Следующий элемент не получен - заканчиваем цикл вывода
						Прервать;
					Иначе
						
						Отказ = Ложь;
						
						//ПередВыводомЭлементаРезультата(ПараметрыОтчета, МакетКомпоновки, ДанныеРасшифровкиОбъект, ЭлементРезультата, Отказ); 
						
						Если Не Отказ Тогда
							//Элемент получен - выведем его при помощи процессора вывода
							ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				
				//Завершение вывода отчета
				ПроцессорВывода.ЗакончитьВывод();
			Иначе
				ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			КонецЕсли;
			
			// Отключаем привилегированный режим если он использовался
			Если ИспользоватьПривилегированныйРежим Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			// Запись в журнал регистрации не требуется
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru = 'Отчет не сформирован!'") + Символы.ПС + ИнформацияОбОшибке.Описание;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ВыводитьПодвал Тогда
			Если ИспользоватьПриВыводеПодвала Тогда 
				//ПриВыводеПодвала(ПараметрыОтчета, Результат); 
			Иначе
				ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПослеВыводаРезультата Тогда
			ПослеВыводаРезультата(ПараметрыОтчета, Результат);
		Иначе
			ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат,ДанныеРасшифровки", Результат, ДанныеРасшифровки_), АдресХранилища);
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
	УправлениеКолонтитулами.УстановитьКолонтитулы(
		Результат, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, Пользователи.ТекущийПользователь());

	КонецПроцедуры
	
Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = "ОтчетОбъект." + ПараметрыОтчета.ИдентификаторОтчета;	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Отчеты[ПараметрыОтчета.ИдентификаторОтчета].Реквизиты["Показатель" + ИмяПоказателя].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	Если ПараметрыОтчета.Свойство("Подразделение") И ЗначениеЗаполнено(ПараметрыОтчета.Подразделение) Тогда
		ТекстПодразделение = НСтр("ru = 'Подразделение Равно'") + " """ + ПараметрыОтчета.Подразделение + """";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение + " " + НСтр("ru = 'И'") + " " + ТекстОтбор;
	ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
		ТекстОтбор = ТекстПодразделение;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных) Экспорт
	
	МакетОформления	= Неопределено;
	
	Если ПараметрыОтчета.Свойство("МакетОформления", МакетОформления) Тогда
		Если НЕ ЗначениеЗаполнено(МакетОформления) ИЛИ МакетОформления = "МакетОформленияОтчетовЗеленый" Тогда
			МакетОформления = "ОформлениеОтчетовЗеленый";
		ИначеЕсли МакетОформления = "МакетОформленияОтчетовЧерноБелый" Тогда
			МакетОформления = "ОформлениеОтчетовЧерноБелый";
		КонецЕсли;
	Иначе
		МакетОформления = "ОформлениеОтчетовЗеленый";
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);	
	
КонецПроцедуры

Процедура ВывестиПодвалОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	
	// Ответственное лицо
	Если ПараметрыОтчета.Свойство("ОтветственноеЛицо")
		И ЗначениеЗаполнено(ПараметрыОтчета.ОтветственноеЛицо) Тогда
		
		//ОбластьПодписи.Параметры.Заполнить(ПолучитьДанныеОтветственногоЛица(ПараметрыОтчета));//нафиг не нужно		
	КонецЕсли;

	Результат.Вывести(ОбластьПодписи);
			
КонецПроцедуры

Процедура БухгалтерскиеОтчетыВызовСервераОбработкаРезультатаОтчета(ИдентификаторОтчета, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	//Удалим строки с высотой равной 1
	Индекс = Результат.ВысотаТаблицы;
	Пока Индекс > 0 Цикл
		ИндексСтроки = "R" + Формат(Индекс, "ЧГ=0");
		Если Результат.Область(ИндексСтроки).ВысотаСтроки = 1 Тогда
			Результат.УдалитьОбласть(Результат.Область(ИндексСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ПолеСлева   = 5;
	Результат.ПолеСправа  = 5;
	
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИдентификаторОтчета;
		
	//УправлениеКолонтитулами.УстановитьКолонтитулы(
	//	Результат, Метаданные.Отчеты[ИдентификаторОтчета].Синоним, Пользователи.ТекущийПользователь()); 

КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"          , "Группировка");
	ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"  , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.Группировка.Добавить();
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
		НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
		
		Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ГруппировкаПредставление Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Группировка");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Группировка"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ГруппировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
		Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
			НоваяСтрока = Элемент.ТекущиеДанные;
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Поле          = ПараметрыВыбранногоПоля.Поле;
			НоваяСтрока.Представление = ПараметрыВыбранногоПоля.Заголовок;
			
			Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Форма.Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
	
	КонецПроцедуры
	
&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Отбор");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = Неопределено;
		Иначе
			ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		КонецЕсли;

		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		Если Строка(ПараметрыВыбранногоПоля.Поле) = "Организация"
			И Форма.Отчет.Свойство("Организация") Тогда
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Организация;
		ИначеЕсли Строка(ПараметрыВыбранногоПоля.Поле) = "Подразделение"
			И Форма.Отчет.Свойство("Подразделение") Тогда 
			ЭлементОтбора.ПравоеЗначение = Форма.Отчет.Подразделение;
		КонецЕсли;
		ЭлементОтбора.ВидСравнения = ПараметрыВыбранногоПоля.ВидСравнения;
		
		Элемент.ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если (Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 И ТипЗнч(Элемент.ТекущиеДанные.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных")) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"                , "Отбор");
		ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Отбор"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"        , Элемент.ТекущиеДанные.ЛевоеЗначение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтборыПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
			
		Отказ = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		Если Найти(Элемент.ТекущийЭлемент.Имя, "ОтборыЛевоеЗначение") > 0 Тогда 
			ТекущаяСтрока.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентСортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Режим"                , "Порядок");
	ПараметрыФормы.Вставить("ИсключенныеПоля"      , Форма.ПолучитьЗапрещенныеПоля("Порядок"));
	ПараметрыФормы.Вставить("ТекущаяСтрока"        , Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	  	
	ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломДобавленияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		НоваяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяСтрока.Использование     = Истина;
		НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
		НоваяСтрока.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентСортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Если Найти(Элемент.ТекущийЭлемент.Имя, "СортировкаПоле") = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", Форма.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("Режим"          , "Порядок");
		ПараметрыФормы.Вставить("ИсключенныеПоля", Форма.ПолучитьЗапрещенныеПоля("Порядок"));
		ПараметрыФормы.Вставить("ТекущаяСтрока"  , Элемент.ТекущиеДанные.Поле);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СортировкаПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Отчет.МегаЛогист_ОтчетПоДоставке.Форма.ФормаВыбораДоступногоПоля", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзмененияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма =   ДополнительныеПараметры.Форма;
	Элемент = ДополнительныеПараметры.Элемент;
	
	ПараметрыВыбранногоПоля = РезультатЗакрытия;
	
	Если ТипЗнч(ПараметрыВыбранногоПоля) = Тип("Структура") Тогда
		РедактируемаяСтрока = Форма.Отчет.КомпоновщикНастроек.Настройки.Порядок.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		
		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.Поле          = Новый ПолеКомпоновкиДанных(ПараметрыВыбранногоПоля.Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерскиеОтчетыКлиентОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ФормаОтчета);
	
	ПараметрыРасшифровки = БухгалтерскиеОтчетыВызовСервераПолучитьПараметрыРасшифровкиОтчета(ФормаОтчета.ДанныеРасшифровки, ИдентификаторОбъекта, Расшифровка);
	
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Ложь, Истина);
	Если ПараметрыРасшифровки.ОткрытьОбъект Тогда
		ПоказатьЗначение( , ПараметрыРасшифровки.Значение);
	ИначеЕсли ПараметрыРасшифровки.Свойство("ОткрытьФорму") И ПараметрыРасшифровки.ОткрытьФорму Тогда
		ОткрытьФорму(ПараметрыРасшифровки.Форма, ПараметрыРасшифровки.ПараметрыФормы);		
	Иначе
		СписокПунктовМеню = ПараметрыРасшифровки.СписокПунктовМеню;
		Если СписокПунктовМеню.Количество() = 1 Тогда
			ИДРасшифровки = СписокПунктовМеню[0].Значение;
			ИмяФормы = ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки);
			ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
			                                 1, ФормаОтчета.ДанныеРасшифровки, Истина, ИДРасшифровки, ЗаполняемыеНастройки);
			ОткрытьФорму(ИмяФормы, ПараметрыФормы,, Истина);
		ИначеЕсли СписокПунктовМеню.Количество() > 0 Тогда
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
			ДополнительныеПараметры.Вставить("ФормаОтчета", ФормаОтчета);
			Оповещение = Новый ОписаниеОповещения("ВыбратьИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, СписокПунктовМеню, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяФормыПоИДРасшифровки(ИДРасшифровки)
	
	ИмяОбъекта = ИДРасшифровки;
	ШаблонИмениФормы = "Отчет.%ИмяОбъекта%.Форма.ФормаОтчета";
	
	Если ИДРасшифровки = "ОборотыСчетаПоДням" 
		Или ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ИмяОбъекта = "ОборотыСчета";
	КонецЕсли;
	
	Возврат СтрЗаменить(ШаблонИмениФормы, "%ИмяОбъекта%", ИмяОбъекта);
	
КонецФункции

Функция БухгалтерскиеОтчетыВызовСервераПолучитьПараметрыРасшифровкиОтчета(Адрес, ИдентификаторОбъекта, Расшифровка) Экспорт
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыИсполненияОтчета = ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ИспользоватьРасширенныеПараметрыРасшифровки") 
		И ПараметрыИсполненияОтчета.ИспользоватьРасширенныеПараметрыРасшифровки Тогда
		ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки);
		
		Возврат ПараметрыРасшифровки;
	КонецЕсли;
	
	
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда 
		ОтчетОбъект       = ДанныеОбъекта;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	Иначе 		
		ОтчетОбъект       = ДанныеОбъекта.Объект;
		ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	КонецЕсли;
		
	Если ИдентификаторОбъекта = "АнализСубконто"
		ИЛИ ИдентификаторОбъекта = "АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
		ИЛИ ИдентификаторОбъекта = "ОборотыСчета"
		ИЛИ ИдентификаторОбъекта = "СводныеПроводки" 
		ИЛИ ИдентификаторОбъекта = "ГлавнаяКнига"
		ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		Счет            = Неопределено;
		ПервыйЭлемент   = Неопределено;
		
		Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
			Если ТипЗнч(Расшифровка) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение"       , Расшифровка);
			Иначе 
				МассивПолей = Расшифровка;
				
				ЕстьПоказатель = Истина;
				ПервыйЭлемент = Истина;
				Для Каждого ЭлементСписка Из Расшифровка Цикл
					Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
						Если ЭлементСоответствия.Ключ = "КорСчет" Тогда
							ЕстьКорЗначение = Истина;
						КонецЕсли;
						Если ЭлементСоответствия.Ключ = "Счет" Тогда
							Счет = ЭлементСоответствия.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
			
			МассивПолей = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
			
			Для Каждого Элемент Из МассивПолей Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
					Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
						ПервыйЭлемент = Элемент;
					КонецЕсли;
					Если Элемент.Поле = "Показатель" Тогда
						ЕстьПоказатель = Истина;
					КонецЕсли;
					Если Найти(Элемент.Поле, "Кор") = 1 Тогда
						ЕстьКорЗначение = Истина;
					КонецЕсли;
					Если Элемент.Поле = "Счет" Тогда
						Счет = Элемент.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		формироватьОборотыСчета          = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = НСтр("ru = 'ОСВ по счету %Счет%'");
		ПредставлениеДляКарточкиСчета         = НСтр("ru = 'Карточка счета %Счет%'");
		ПредставлениеДляАнализаСчета          = НСтр("ru = 'Анализ счета %Счет%'");
		ПредставлениеДляОборотыСчета          = НСтр("ru = 'Обороты счета %Счет%'");
		ПредставлениеДляОборотыСчетаПоМесяцам = НСтр("ru = 'Обороты счета %Счет% по месяцам'");
		ПредставлениеДляОборотыСчетаПоДням    = НСтр("ru = 'Обороты счета %Счет% по дням'");
		ПредставлениеДляКарточкиСубконто      = НСтр("ru = 'Карточка субконто'");
		ПредставлениеДляОтчетаПоПроводкам     = НСтр("ru = 'Отчет по проводкам'");
		ПредставлениеОткрытьОбъект 			  = НСтр("ru = 'Открыть ""%Значение%""'");
		
		ПредставлениеДляОСВПоСчету            = СтрЗаменить(ПредставлениеДляОСВПоСчету           , "%Счет%", Счет);
		ПредставлениеДляКарточкиСчета         = СтрЗаменить(ПредставлениеДляКарточкиСчета        , "%Счет%", Счет);
		ПредставлениеДляАнализаСчета          = СтрЗаменить(ПредставлениеДляАнализаСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчета          = СтрЗаменить(ПредставлениеДляОборотыСчета         , "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоМесяцам = СтрЗаменить(ПредставлениеДляОборотыСчетаПоМесяцам, "%Счет%", Счет);
		ПредставлениеДляОборотыСчетаПоДням    = СтрЗаменить(ПредставлениеДляОборотыСчетаПоДням   , "%Счет%", Счет);
		
		Если ЕстьПоказатель Тогда
			УстановитьВсеПоказатели = Ложь;
		Иначе
			УстановитьВсеПоказатели = Истина;
		КонецЕсли;
		СписокПунктовМеню = Новый СписокЗначений;
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
					Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
					СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
				КонецЕсли;
				СписокПунктовМеню.Добавить("ОборотноСальдоваяВедомостьПоСчету", ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить("КарточкаСчета"                    , ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить("АнализСчета"                      , ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоМесяцам"            , ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить("ОборотыСчетаПоДням"               , ПредставлениеДляОборотыСчетаПоДням);
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							СписокПунктовМеню.Добавить("КарточкаСчета");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСубконто");	
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						Иначе
							СписокПунктовМеню.Добавить("КарточкаСчета");		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						СписокПунктовМеню.Добавить("КарточкаСчета");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "СводныеПроводки" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
					ИначеЕсли ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
						СписокПунктовМеню.Добавить("ОборотыСчета", ПредставлениеДляОборотыСчета);
						Если ЕстьКорЗначение Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;						
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "СводныеПроводки"
						ИЛИ ИдентификаторОбъекта = "ШахматнаяВедомость" Тогда
						СписокПунктовМеню.Добавить("ОтчетПоПроводкам");
						УстановитьВсеПоказатели = Истина;
					Иначе 
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не БухгалтерскиеОтчетыКлиентСервер.ПростойТип(ПервыйЭлемент.Значение) Тогда
							Представление = СтрЗаменить(ПредставлениеОткрытьОбъект, "%Значение%", ПервыйЭлемент.Значение);
							СписокПунктовМеню.Добавить(ПервыйЭлемент.Значение, Представление);
						КонецЕсли;
						Если ИдентификаторОбъекта = "АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСубконто", ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить("КарточкаСчета", ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить("ОтчетПоПроводкам", ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение"       , ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;   
	Если СписокПунктовМеню <> Неопределено Тогда
		Для Каждого ПунктМеню Из СписокПунктовМеню Цикл
			Если ТипЗнч(ПунктМеню.Значение) = Тип("Строка") Тогда
				НастройкиРасшифровки.Вставить(ПунктМеню.Значение, ПолучитьНастройкиДляРасшифровки(ПунктМеню.Значение, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели));
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
		Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
		
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	КонецЕсли;

	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим отбор, установленный в отчете
	Для каждого ЭлементОтбора Из ТекущийОтчет.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьНастройкиДляРасшифровки(ИДРасшифровки, ИдентификаторОбъекта, МассивПолей, ОтчетОбъект, УстановитьВсеПоказатели)
	
	ЕстьПоказатель  = Ложь;
	ЕстьКорЗначение = Ложь;
	ЕстьСчет        = Истина;
	ПервыйЭлемент   = Неопределено;
	Счет            = Неопределено;
	КорСчет         = Неопределено;
	Период          = Неопределено;
	БухТипРесурса   = Неопределено;
	Периодичность   = Неопределено;
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		УстановитьВсеПоказатели = Ложь;
		Показатель = "БУ";
		Для Каждого ЭлементСписка Из МассивПолей Цикл
			Для Каждого ЭлементСоответствия Из ЭлементСписка.Значение Цикл
				Если ЭлементСоответствия.Ключ = "Счет" Тогда
					Счет = ЭлементСоответствия.Значение;
					ЕстьСчет = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "КорСчет" Тогда
					КорСчет = ЭлементСоответствия.Значение;
					ЕстьКорЗначение = Истина;
				ИначеЕсли ЭлементСоответствия.Ключ = "Отбор" Тогда
					Для Каждого ЭлементОтбора Из ЭлементСоответствия.Значение Цикл
						Если ЭлементОтбора.Ключ = "Период" Тогда
							Период = ЭлементОтбора.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ДобавитьОтборПоВидСубконто    = Истина;
	ДобавитьОтборПоВидКорСубконто = Истина;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Передедим параметры заголовка и подвала
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьЕдиницуИзмерения", Ложь);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал", Ложь);
	ЗаполнитьЗначенияСвойств(ДополнительныеСвойства, ОтчетОбъект);
	
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ИДРасшифровки = "КарточкаСубконто" Тогда
		ДополнительныеСвойства.Вставить("СписокВидовСубконто", ОтчетОбъект.СписокВидовСубконто.Скопировать());
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоДням" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 6);
	ИначеЕсли ИДРасшифровки = "ОборотыСчетаПоМесяцам" Тогда
		ДополнительныеСвойства.Вставить("Периодичность", 9);
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	
	Если ИДРасшифровки = "КарточкаСубконто"
		Или ИДРасшифровки = "ОтчетПоПроводкам" Тогда
		ЕстьСчет = Ложь;
	Иначе
		ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ГлавнаяКнига" Тогда
		ДополнительныеСвойства.Вставить("Организация", ОтчетОбъект.Организация);
		Если ИДРасшифровки = "ОборотыСчета" Тогда
			ДополнительныеСвойства.Вставить("Счет", Счет);
			Если ЕстьКорЗначение Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
			КонецЕсли;
		ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетДт", Счет, ВидСравненияКомпоновкиДанных.ВИерархии);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "СчетКт", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	Иначе 
		СписокПолейОтборов = Новый Массив;
		Для каждого Отбор из МассивПолей Цикл
			Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
				
				ЗначениеОтбора 	= Отбор.Значение;
				
				Если ЗначениеОтбора = NULL тогда
					Продолжить;
				КонецЕсли;

				ПолеОтбора 		= Отбор.Поле;
				Если Отбор.Поле = "БухТипРесурса" Тогда  // БухТипРесурса не обрабатываем и не переносим в расшифровывающий отчет
					
					Продолжить;
					
				ИначеЕсли ПолеОтбора = "Счет" И (ИдентификаторОбъекта = "АнализСчета" Или ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ЗначениеСчет = ?(Счет.Уровень() > ОтчетОбъект.Счет.Уровень(), Счет, ОтчетОбъект.Счет); 
					ДополнительныеСвойства.Вставить("Счет", ЗначениеСчет);
					Если ЕстьСчет И ЗначениеЗаполнено(БухТипРесурса) ИЛИ Не ЕстьСчет Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				ИначеЕсли Отбор.Поле = "Счет" И ЕстьСчет Тогда	// Счет задан в дополнителльных свойствах, в отбор его добавлять не нужно
					
					Продолжить;
	
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					
					// Субконто нужно преобразовать в СубконтоДт или СубконтоКт
					ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто", "Субконто" + БухТипРесурса);
					
					// Отбором может быть не только само субконто но и его реквизиты
					// Определим ВидСравнения
					Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
						//Для строки подходит только Содержит 
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
					Иначе
						// Для иерархии берем ВИерархии, в остальных случаях Равно
						ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
					КонецЕсли;
					
					// Устанавливаетм отбор
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
					
				ИначеЕсли ПолеОтбора = "Подразделение" И (ИдентификаторОбъекта = "АнализСчета" ИЛИ ИдентификаторОбъекта = "ОборотыСчета") Тогда
					ПолеПодразделение = "Подразделение" + БухТипРесурса;
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеПодразделение, ЗначениеОтбора, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));						
				ИначеЕсли (ПолеОтбора = "Счет" Или ПолеОтбора = "КорСчет") И Не ЕстьСчет Тогда
					Если ПолеОтбора = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);	
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);		
					КонецЕсли;
				ИначеЕсли Найти(ПолеОтбора, "Субконто") = 1 Тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							// Порядок субконто в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							// Определим текущий номер субконто							
							ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
							
							// Если у счета есть нужное субконто то добавим отбор
							СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у счета
								ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
								
								// Отбором может быть не только само субконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Добавляем отбор
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							КонецЕсли;
							
						Иначе
							
							// Если счет не задан то устанавливаем отбор по субконто как есть и дополнительно устанавливаем отбор по виду субконто
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по Субконто или его реквизиту
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер субконто							
							ИндексСубконто = Число(Сред(ПолеОтбора, 9));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидСубконто" + ИндексСубконто;
							
							// Устанавливаем отбор по виду субконто
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							
						КонецЕсли;
						ДобавитьОтборПоВидСубконто = Ложь;
						
					ИначеЕсли ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						
						// Порядок субконто в отчете и у счета может быть разным
						// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
						// Определим текущий номер субконто							
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						
						// Если у счета есть нужное субконто то добавим отбор
						СтрокаСубконтоСчета = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если СтрокаСубконтоСчета <> Неопределено Тогда
							
							// Определим номер этого субконто у счета
							ИндексСубконтоОтчет = СтрокаСубконтоСчета.НомерСтроки;
							
							// Составим новое имя поля
							ПолеСубконто = СтрЗаменить(ПолеОтбора, "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет);
							
							// Отбором может быть не только само субконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Добавляем отбор
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеСубконто, ЗначениеОтбора, ВидСравненияОтбора);
							
						КонецЕсли;
						
					Иначе
						ВидСравненияОтбора = Неопределено;
						ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
						// Если это строка то нужно поставить условие "Содержит"
						Если ТипЗначенияОтбора = Тип("Строка") Тогда  
						 	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							
						// Если это группа справочника то нужно поставить условие "ВГруппе"
						ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначенияОтбора) И ОбъектЯвляетсяГруппой(ЗначениеОтбора) Тогда
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;	
						КонецЕсли;
						// Устанавливаем отбор
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
					СписокПолейОтборов.Добавить(ПолеОтбора);
				ИначеЕсли Найти(ПолеОтбора, "КорСубконто") = 1 тогда
					Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
						Если КорСчет <> Неопределено Тогда
							// Порядок КорСубконто, как и субконто, в отчете и у счета может быть разным
							// Расшифровывающий отчет использует порядок счета, поэтому имя поля отбора для него будет другим
							
							// Определим текущий номер КорСубконто							
							ИндексКорСубконто = Сред(ПолеОтбора, 12, 1); 
							
							ПозицияКорСубконто = Найти(ПолеОтбора, "КорСубконто");
							
							// Если у КорСчета есть нужное субконто то добавим отбор
							СтрокаСубконтоКорСчета = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто");
							Если СтрокаСубконтоКорСчета <> Неопределено Тогда
								
								// Определим номер этого субконто у КорСчета
								ИндексСубконтоКорСчета = СтрокаСубконтоКорСчета.НомерСтроки;
								
								// Составим новое имя поля
								ПолеКорСубконто = СтрЗаменить(ПолеОтбора, "КорСубконто" + ИндексКорСубконто, "КорСубконто" + ИндексСубконтоКорСчета);
								
								// Отбором может быть не только само КорСубконто но и его реквизиты
								// Определим ВидСравнения
								Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
									//Для строки подходит только Содержит 
									ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
								Иначе
									// Для иерархии берем ВИерархии, в остальных случаях Равно
									ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
								КонецЕсли;
								
								// Устанавливаем отбор
								БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеКорСубконто, ЗначениеОтбора, ВидСравненияОтбора);	
							КонецЕсли;
							
						Иначе
							
							// Если КорСчет не задан то устанавливаем отбор по КорСубконто как есть и дополнительно устанавливаем отбор по виду КорСубконто
							
							// Отбором может быть не только само КорСубконто но и его реквизиты
							// Определим ВидСравнения
							Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
								//Для строки подходит только Содержит 
								ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
							Иначе
								// Для иерархии берем ВИерархии, в остальных случаях Равно
								ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
							КонецЕсли;
							
							// Устанавливаем отбор по КорСубконто или его реквизиту
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
							
							// Определим текущий номер КорСубконто							
							ИндексКорСубконто = Число(Сред(ПолеОтбора, 12));
							
							// Составим имя поля отбора по виду субконто
							ПолеВидСубконто = "ВидКорСубконто" + ИндексКорСубконто;
							
							// Устанавливаем отбор по виду субконто
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеВидСубконто, ОтчетОбъект.СписокВидовСубконто[ИндексКорСубконто - 1].Значение);
							
						КонецЕсли;
						
						ДобавитьОтборПоВидКорСубконто = Ложь;
						
					ИначеЕсли ИДРасшифровки = "ОтчетПоПроводкам" Тогда
						
						// Определим ВидСравнения
						Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
							//Для строки подходит только Содержит 
							ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит;
						Иначе
							// Для иерархии берем ВИерархии, в остальных случаях Равно
							ВидСравненияОтбора = ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
						КонецЕсли;
						
						// Добавляем отбор
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияОтбора);
					КонецЕсли;
				ИначеЕсли ПолеОтбора = "Подразделение" тогда
					
					Если ЗначениеЗаполнено(ЗначениеОтбора) И БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
						ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
					КонецЕсли;
					
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
					
				ИначеЕсли ПолеОтбора = "Организация" Тогда
					ДополнительныеСвойства.Вставить("Организация", ЗначениеОтбора);
				ИначеЕсли ПолеОтбора = "Показатель" Тогда 
					Показатель = ЗначениеОтбора;
				ИначеЕсли ПолеОтбора = "Период" Или ПолеОтбора = "Регистратор" Тогда 
				Иначе
					Если Отбор.Иерархия Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВИерархии);
					Иначе
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
					Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
						Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
							ДополнительныеСвойства.Вставить("Организация"                      , ЭлементОтбора.ПравоеЗначение);
							ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
				КонецЕсли;
			ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				
				ПолеОтбора 		= Отбор.ЛевоеЗначение;
				ЗначениеОтбора 	= Отбор.ПравоеЗначение;
				
				Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
					Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "АнализСубконто" И ИДРасшифровки = "КарточкаСчета" Тогда
						ИндексСубконто = Сред(ПолеОтбора, 9, 1); 
						ПозицияСубконто = Найти(ПолеОтбора, "Субконто");
						НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
						Если НайденнаяСтрока <> Неопределено Тогда
							ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, СтрЗаменить(Строка(ПолеОтбора), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), ЗначениеОтбора, Отбор.ВидСравнения);
						КонецЕсли;
					ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , ЗначениеОтбора);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Подразделение") 
						И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
						И БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
						ДополнительныеСвойства.Вставить("Подразделение", ЗначениеОтбора);
					ИначеЕсли ПолеОтбора = Новый ПолеКомпоновкиДанных("Счет")
						И (ИДРасшифровки = "КарточкаСубконто" 
							ИЛИ ИДРасшифровки = "АнализСубконто" 
							ИЛИ ИДРасшифровки = "ОборотыМеждуСубконто") Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
					
					// Транслируем отбор в расшифрующий отчет, только при определенных условиях
					Если Отбор.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный  		// Это не недоступный отбор
						И ПолеОтбора <> "Организация"                                                                   // Это не отбор по организации
						И ((ИдентификаторОбъекта = "АнализСубконто"                                                    // Это не отбор по реквизитам счета или счету в Анализе, Карточке или оборотах между субконто
								ИЛИ ИдентификаторОбъекта = "ОборотыМеждуСубконто"
								ИЛИ ИдентификаторОбъекта = "КарточкаСубконто")  
							И Найти(ПолеОтбора, "Счет") = Неопределено) 
						Тогда
							БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ПолеОтбора, ЗначениеОтбора, Отбор.ВидСравнения);
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИдентификаторОбъекта = "ОборотыМеждуСубконто" Тогда
			Если ДобавитьОтборПоВидСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьОтборПоВидКорСубконто Тогда
				Индекс = 1;
				Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
					Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
						БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Период <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", Период);
		ДополнительныеСвойства.Вставить("КонецПериода" , БухгалтерскиеОтчетыКлиентСервер.КонецПериода(Период, ?(Периодичность = Неопределено, ОтчетОбъект.Периодичность, Периодичность)));
	Иначе
		ДополнительныеСвойства.Вставить("НачалоПериода", ОтчетОбъект.НачалоПериода);
		ДополнительныеСвойства.Вставить("КонецПериода" , ОтчетОбъект.КонецПериода);
	КонецЕсли;
	
	// Настройка показателей
	Если УстановитьВсеПоказатели Тогда
		Для Каждого ИмяПоказателя Из ОтчетОбъект.НаборПоказателей Цикл
			ДополнительныеСвойства.Вставить("Показатель" + ИмяПоказателя , ОтчетОбъект["Показатель" + ИмяПоказателя]);
		КонецЦикла;
		Если ОтчетОбъект.НаборПоказателей.Найти("Количество") = Неопределено Тогда
			Если ЕстьСчет И ЗначениеЗаполнено(Счет) И Счет.Количественный Тогда
				ДополнительныеСвойства.Вставить("ПоказательКоличество", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Показатель = "Контроль" Тогда
			ДополнительныеСвойства.Вставить("ПоказательБУ", ОтчетОбъект.ПоказательБУ);
			ДополнительныеСвойства.Вставить("ПоказательНУ", ОтчетОбъект.ПоказательНУ);
			ДополнительныеСвойства.Вставить("ПоказательПР", ОтчетОбъект.ПоказательПР);
			ДополнительныеСвойства.Вставить("ПоказательВР", ОтчетОбъект.ПоказательВР);
		Иначе
			ДополнительныеСвойства.Вставить("Показатель" + Показатель , Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	КонецЕсли;
		
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, Неопределено, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если Объект <> Неопределено Тогда 
		
		Результат = ОбщегоНазначения.ОбъектЯвляетсяГруппой(Объект);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			
			Возврат Результат;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 Или ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

//Перетащил из Бух 3.0 -

//из модуля менеджера +
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьРасширенныеПараметрыРасшифровки,
							|ИспользоватьПривилегированныйРежим",
							Истина, Ложь, Истина, Истина, Истина, Ложь);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат ПараметрыОтчета.Заголовок;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "Уменьшенный автоотступ" Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = "Уменьшенный автоотступ";
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КоличествоГруппировок = 0;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
		
	КонецЦикла;
	ЕстьВыбранныеПоля = Ложь;
	ПроверитьВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор.Элементы,ЕстьВыбранныеПоля,Схема);
	Если ЕстьВыбранныеПоля Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

		ПолеГруппировкиДетально = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировкиДетально.Использование  = Истина;
		ПолеГруппировкиДетально.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	КонецЕсли;		
	ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор.Элементы, Структура.Выбор);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(МакетКомпоновки) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервераОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПоУмолчанию(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	

	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Если ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Наименование", "Наименование");
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Ссылка.Наименование", "Наименование");
		КонецЕсли;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" Тогда
		ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Ссылка", "Ссылка");
	ИначеЕсли ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Количество() > 0 
		И Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения.Количество() > 0 Тогда
		Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
			Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
				ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Регистратор", "Регистратор");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				ЭлементСтруктуры.ПоляГруппировки.Элементы.Удалить(ПолеГруппировки);
				// Группировки по забалансовым
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя, Измерение.Синоним);
					КонецЕсли
				КонецЦикла;
				// ИзмеренияДт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя + "Дт", Измерение.Синоним + " Дт");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СубконтоДт" + К, "СубконтоДт" + К);
				КонецЦикла;
				// ИзмеренияКт
				Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
					Если НЕ Измерение.Балансовый Тогда
						ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, Измерение.Имя + "Кт", Измерение.Синоним + " Кт");
					КонецЕсли
				КонецЦикла;
				Для К = 1 По 3 Цикл
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СубконтоКт" + К, "СубконтоКт" + К);
				КонецЦикла;
			Иначе
				Если ЭлементСтруктуры.ПоляГруппировки.ДоступныеПоляПолейГруппировок.Элементы.Найти("Счет")<> Неопределено Тогда
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "Счет", "Счет");
				Иначе
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СчетДт", "СчетДт");
					ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, "СчетКт", "СчетКт");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДобавитьПолеГруппировки(ПараметрыОтчета.Группировка, 
				Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения[0].Имя,
				Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения[0].Синоним);
		КонецЕсли
	КонецЕсли;
	ЭлементПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры

Процедура ДобавитьПоказатели(ПараметрыОтчета, КомпоновщикНастроек) Экспорт
	
	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
		ВыбранныеПоляНачальныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляНачальныйОстаток.Заголовок = "Нач. остаток";
		ВыбранныеПоляНачальныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
			ВыбранныеПоляПриход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляПриход.Заголовок = "Приход";
			ВыбранныеПоляПриход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ВыбранныеПоляРасход = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляРасход.Заголовок = "Расход";
			ВыбранныеПоляРасход.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
			ВыбранныеПоляОбороты = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляОбороты.Заголовок = "Обороты";
			ВыбранныеПоляОбороты.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		КонецЕсли;
		ВыбранныеПоляКонечныйОстаток = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляКонечныйОстаток.Заголовок = "Кон. остаток";
		ВыбранныеПоляКонечныйОстаток.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляПриход, Ресурс.Имя + "Приход", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляРасход, Ресурс.Имя + "Расход", Ресурс.Синоним);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним);
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя);
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Оборот", Ресурс.Синоним + " оборот");
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " ост. Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " нач. ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляНачальныйОстаток, Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " нач. ост. Кт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляОбороты, Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " кон. ост. Дт");
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоляКонечныйОстаток, Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " кон. ост. Кт");
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт");
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				Если Ресурс.Балансовый Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя, Ресурс.Синоним);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт");
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти[ПараметрыОтчета.ИмяТаблицы];
		КонецЕсли;
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор;
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ВыбранныеПоля, Реквизит.Имя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляНабораДанных(ПараметрыОтчета, СхемаКомпоновкиДанных) Экспорт
		
	Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" 
		ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыСведений" 
		ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		
		// Добавляем измерения
		Для каждого Измерение Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Измерения Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Измерение.Имя, Измерение.Синоним);
		КонецЦикла;
		
		// Добавляем реквизиты
		Если ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
			Для каждого Реквизит Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Реквизиты Цикл
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем поля периода
		Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
			ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" 
			ИЛИ ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" И ПараметрыОтчета.ИмяТаблицы = ""	Тогда
			ДобавитьПоляПериодаВНаборДанных(СхемаКомпоновкиДанных.НаборыДанных[0]);
		КонецЕсли;
		
		// Добавляем ресурсы
		Для каждого Ресурс Из Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].Ресурсы Цикл
			Если ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" ТОгда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
					
					Если НЕ Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборот", Ресурс.Синоним + " кор. оборот", Ресурс.Имя + "КорОборот");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборот");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотДт", Ресурс.Синоним + " кор. оборот Дт", Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотДт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КорОборотКт", Ресурс.Синоним + " кор. оборот Кт", Ресурс.Имя + "КорОборотКт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КорОборотКт");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОборотыДтКт" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ДвиженияССубконто" Тогда
				
				Если Ресурс.Балансовый Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт", Ресурс.Имя + "Дт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт", Ресурс.Имя + "Кт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстаток", Ресурс.Синоним + " нач. остаток", Ресурс.Имя + "НачальныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстаток");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокДт", Ресурс.Синоним + " нач. остаток Дт", Ресурс.Имя + "НачальныйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйОстатокКт", Ресурс.Синоним + " нач. остаток Кт", Ресурс.Имя + "НачальныйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйОстатокКт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокДт", Ресурс.Синоним + " нач. развернутый остаток Дт", Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "НачальныйРазвернутыйОстатокКт", Ресурс.Синоним + " нач. развернутый остаток Кт", Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "НачальныйРазвернутыйОстатокКт");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Оборот", Ресурс.Синоним + " оборот", Ресурс.Имя + "Оборот");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Оборот");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Приход", Ресурс.Синоним + " приход", Ресурс.Имя + "Приход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Приход");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Расход", Ресурс.Синоним + " расход", Ресурс.Имя + "Расход");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Расход");
				ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотДт", Ресурс.Синоним + " оборот Дт", Ресурс.Имя + "ОборотДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОборотКт", Ресурс.Синоним + " оборот Кт", Ресурс.Имя + "ОборотКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОборотКт");
				КонецЕсли;
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстаток", Ресурс.Синоним + " кон. остаток", Ресурс.Имя + "КонечныйОстаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстаток");
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокДт", Ресурс.Синоним + " кон. остаток Дт", Ресурс.Имя + "КонечныйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйОстатокКт", Ресурс.Синоним + " кон. остаток Кт", Ресурс.Имя + "КонечныйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйОстатокКт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокДт", Ресурс.Синоним + " кон. развернутый остаток Дт", Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокДт");
					
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "КонечныйРазвернутыйОстатокКт", Ресурс.Синоним + " кон. развернутый остаток Кт", Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "КонечныйРазвернутыйОстатокКт");
				КонецЕсли;
				
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "Остатки" Тогда
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Остаток", Ресурс.Синоним + " остаток", Ресурс.Имя + "Остаток");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Остаток");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокДт", Ресурс.Синоним + " остаток Дт", Ресурс.Имя + "ОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "ОстатокКт", Ресурс.Синоним + " остаток Кт", Ресурс.Имя + "ОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "ОстатокКт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокДт", Ресурс.Синоним + " развернутый остаток Дт", Ресурс.Имя + "РазвернутыйОстатокДт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокДт");
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "РазвернутыйОстатокКт", Ресурс.Синоним + " развернутый остаток Кт", Ресурс.Имя + "РазвернутыйОстатокКт");
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "РазвернутыйОстатокКт");
				
			ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
				
				ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
				Если Ресурс.Тип.СодержитТип(Тип("Число")) Тогда
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя, Ресурс.Имя);
				КонецЕсли;
			ИначеЕсли ПараметрыОтчета.ИмяТаблицы = "" Тогда
				
				Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
					Если Ресурс.Балансовый Тогда
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
					Иначе
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Дт", Ресурс.Синоним + " Дт", Ресурс.Имя + "Дт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Дт");
						ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя + "Кт", Ресурс.Синоним + " Кт", Ресурс.Имя + "Кт");
						ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя + "Кт");
					КонецЕсли;
				Иначе
					ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Ресурс.Имя, Ресурс.Синоним);
					ДобавитьПолеИтога(СхемаКомпоновкиДанных, Ресурс.Имя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" 
		ИЛИ ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		
		Если ПараметрыОтчета.ИмяТаблицы = "" Тогда
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
		Иначе
			ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы);
			Если ОбъектМетаданных = Неопределено Тогда 
				ОбъектМетаданных = Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта];
			КонецЕсли;
		КонецЕсли;
		
		// Добавляем реквизиты
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			ДобавитьПолеНабораДанных(СхемаКомпоновкиДанных.НаборыДанных[0], Реквизит.Имя, Реквизит.Синоним);
			Если Реквизит.Тип.СодержитТип(Тип("Число")) Тогда
				ДобавитьПолеИтога(СхемаКомпоновкиДанных, Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоМетаданным(ПараметрыОтчета) Экспорт
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Символы.ПС;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыСведений" Тогда
		ИмяТипаДанных = "РегистрСведений";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыНакопления" Тогда
		ИмяТипаДанных = "РегистрНакопления";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Справочники" Тогда
		ИмяТипаДанных = "Справочник";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "Документы" Тогда
		ИмяТипаДанных = "Документ";
	ИначеЕсли ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		ИмяТипаДанных = "РегистрБухгалтерии";
	КонецЕсли;

	ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-2);
	ТекстЗапроса = ТекстЗапроса +
	"* ИЗ " + ИмяТипаДанных + "." + ПараметрыОтчета.ИмяОбъекта;
	
	ЭтоТабличнаяЧастьИсточника = Ложь;
	
	Если НЕ ПустаяСтрока(ПараметрыОтчета.ИмяТаблицы) Тогда
		
		Если ИмяТипаДанных = "Справочник" ИЛИ ИмяТипаДанных = "Документ" Тогда 
			// Если это табличная часть объекта то нужно проверить е наличие
			Если  Метаданные[ПараметрыОтчета.ТипДанных][ПараметрыОтчета.ИмяОбъекта].ТабличныеЧасти.Найти(ПараметрыОтчета.ИмяТаблицы) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
				ЭтоТабличнаяЧастьИсточника = Истина;
			КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + "." + ПараметрыОтчета.ИмяТаблицы;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОтчета.ИмяТаблицы = "ОстаткиИОбороты" 
		ИЛИ ПараметрыОтчета.ИмяТаблицы = "Обороты" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,{&КонецПериода} ,Авто)";
	КонецЕсли;
	
	Если ПараметрыОтчета.ИмяТаблицы = "СрезПервых" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&НачалоПериода} ,)";
	КонецЕсли;
	
    Если ПараметрыОтчета.ИмяТаблицы = "СрезПоследних" Тогда
		ТекстЗапроса = ТекстЗапроса + "({&КонецПериода} ,)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + " КАК ИсточникДанных";

	Если ПараметрыОтчета.ТипДанных = "Документы" Тогда
		Если ЭтоТабличнаяЧастьИсточника Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Ссылка.Дата >= &НачалоПериода),(ИсточникДанных.Ссылка.Дата <= &КонецПериода)}";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ
				|	(ИсточникДанных.Дата >= &НачалоПериода),(ИсточникДанных.Дата <= &КонецПериода)}";
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" 
		И ПараметрыОтчета.ИмяТаблицы = "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|{ГДЕ
			|	(ИсточникДанных.Период >= &НачалоПериода),(ИсточникДанных.Период <= &КонецПериода)}";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ДанныеОбъекта       = ПолучитьИзВременногоХранилища(Адрес);
	ДанныеРасшифровки_   = ДанныеОбъекта.ДанныеРасшифровки;
	ЗначениеРасшифровки = ДанныеРасшифровки_.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Если ЗначениеРасшифровки = NULL Тогда
		ПараметрыРасшифровки = Неопределено;
	Иначе
		ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
		ПараметрыРасшифровки.Вставить("Значение",        ЗначениеРасшифровки);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ДобавитьПолеГруппировки(Группировка, Наименование, Синоним)
	
	Если Группировка.Найти(Наименование, "Поле") = Неопределено Тогда
		ГруппировкаСтр      = Группировка.Добавить();
		ГруппировкаСтр.Поле = Наименование;
		ГруппировкаСтр.Использование = Истина;
		ГруппировкаСтр.Представление = Синоним;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет выбранное поле в набор выбранных полей
Процедура ДобавитьВыбранноеПоле(Элементы, ЭлементСтруктуры) 
	ВыбранныеПоля = ЭлементСтруктуры;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.Использование Тогда
			Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
			
			Если Группа Тогда
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;

			Иначе
				ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Элемент.Поле;
			КонецЕсли;	
			
			Если Элемент.Заголовок <> Неопределено Тогда
				ВыбранноеПоле.Заголовок = Элемент.Заголовок;
			КонецЕсли;
			Если Группа Тогда
				ДобавитьВыбранноеПоле(Элемент.Элементы, ВыбранноеПоле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура проверяет, есть ли выбранные поля 
Процедура ПроверитьВыбранныеПоля(Элементы,ВыбранныеПоляЕсть,Схема = Неопределено) 
	Для Каждого Элемент Из Элементы Цикл
		Если Схема = Неопределено Тогда
			Если Элемент.Использование Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.Использование Тогда
				Группа = ТипЗнч(Элемент)=Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
				Если НЕ Группа И Схема.ПоляИтога.Найти(Строка(Элемент.Поле))=Неопределено Тогда
					ВыбранныеПоляЕсть = Истина; 
				КонецЕсли;
				Если Группа Тогда
					ПроверитьВыбранныеПоля(Элемент.Элементы, ВыбранныеПоляЕсть,Схема);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных)
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   "Период секунда");
	СписокПериодов.Добавить("ПериодМинута",    "Период минута");
	СписокПериодов.Добавить("ПериодЧас",       "Период час");
	СписокПериодов.Добавить("ПериодДень",      "Период день");
	СписокПериодов.Добавить("ПериодНеделя",    "Период неделя");
	СписокПериодов.Добавить("ПериодДекада",    "Период декада");
	СписокПериодов.Добавить("ПериодМесяц",     "Период месяц");
	СписокПериодов.Добавить("ПериодКвартал",   "Период квартал");
	СписокПериодов.Добавить("ПериодПолугодие", "Период полугодие");
	СписокПериодов.Добавить("ПериодГод",       "Период год");
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено)
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	Возврат ПолеИтога;
	
КонецФункции

#КонецЕсли

//из модуля менеджера -