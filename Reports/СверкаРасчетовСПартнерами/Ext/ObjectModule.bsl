#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	ДанныеОрганизации = Новый ТаблицаЗначений;
	
	ДанныеОрганизации.Колонки.Добавить("СверкаВзаиморасчетов");
	ДанныеОрганизации.Колонки.Добавить("РасчетныйДокумент");
	ДанныеОрганизации.Колонки.Добавить("ВалютаВзаиморасчетов");
	ДанныеОрганизации.Колонки.Добавить("ДанныеОрганизацииСуммаДолгПартнера");
	ДанныеОрганизации.Колонки.Добавить("ДанныеОрганизацииСуммаНашДолг");
	ДанныеОрганизации.Колонки.Добавить("СуммаДолгПартнера");
	ДанныеОрганизации.Колонки.Добавить("СуммаНашДолг");

	Период = Неопределено;
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
		МассивДокументов = КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение;
		Сверка=Неопределено;
		Если ТипЗнч(МассивДокументов) = Тип("ДокументСсылка.СверкаВзаиморасчетов") И ЗначениеЗаполнено(МассивДокументов) Тогда
			Сверка = МассивДокументов;
		ИначеЕсли ТипЗнч(МассивДокументов) = Тип("СписокЗначений") И МассивДокументов.Количество() = 1 Тогда
			Сверка = МассивДокументов[0].Значение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Сверка) Тогда
			Периоды = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сверка, "НачалоПериода, КонецПериода");
			Период = Новый СтандартныйПериод();
			Период.ДатаНачала = Периоды.НачалоПериода;
			Период.ДатаОкончания = Периоды.КонецПериода;
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "Период", Период);
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Период", Период);
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СверкиВзаиморасчетов = СверкиВзаиморасчетовОтчета();
	
	УстановитьПривилегированныйРежим(Истина);

	ДанныеДокумента = Документы.СверкаВзаиморасчетов.ВыборкаДанныхДокумента(СверкиВзаиморасчетов);
	
	Пока ДанныеДокумента.Следующий() Цикл
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
		ТаблицаОстатковРасчетов = Документы.СверкаВзаиморасчетов.ОстаткиРасчетов(ДанныеДокумента);
		
		Если ТаблицаОстатковРасчетов <> Неопределено Тогда
			Для Каждого СтрокаЗадолженности Из ТаблицаОстатковРасчетов Цикл
				
				СтрокаДанныеОрганизации = ДанныеОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанныеОрганизации, СтрокаЗадолженности);
				
				СтрокаДанныеОрганизации.СверкаВзаиморасчетов = ДанныеДокумента.ДокументСсылка;
				СтрокаДанныеОрганизации.ДанныеОрганизацииСуммаДолгПартнера = СтрокаЗадолженности.СуммаДолгПартнера;
				СтрокаДанныеОрганизации.ДанныеОрганизацииСуммаНашДолг = СтрокаЗадолженности.СуммаНашДолг;

				Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
					СтрокаДанныеОрганизации.РасчетныйДокумент = Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокумента(
						СтрокаЗадолженности.РасчетныйДокумент,
						СтрокаЗадолженности.НомерРасчетногоДокумента,
						СтрокаЗадолженности.ДатаРасчетногоДокумента,
						СтруктураПредставленийУчастников,
						СтрокаЗадолженности.ЭтоВходящийНомер,
						(СтрокаЗадолженности.СуммаДолгПартнера > 0));
				Иначе
					СтрокаДанныеОрганизации.РасчетныйДокумент = "";
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЦикла;
	
	ДокументРезультат.Очистить();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СхемаВыводаРезультата = Отчеты.СверкаРасчетовСПартнерами.ПолучитьМакет("ВыводРезультата");
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		НастройкиСхемы = СхемаВыводаРезультата.ВариантыНастроек.СверкаВзаиморасчетовБазовая.Настройки;
	Иначе
		НастройкиСхемы = СхемаВыводаРезультата.ВариантыНастроек.СверкаВзаиморасчетов.Настройки;
	КонецЕсли;
	
	#Область ПереносНастроекМакетаМеждуСхемами
		НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
		МакетОформления = НастройкиКомпоновщика.ПараметрыВывода.Элементы.Найти("МакетОформления").Значение;
		ИзменяемыйМакетОформления = НастройкиСхемы.ПараметрыВывода.Элементы.Найти("МакетОформления");
		ИзменяемыйМакетОформления.Значение = МакетОформления;
		ИзменяемыйМакетОформления.Использование = Истина;
	#КонецОбласти 
	
	ЗначениеПараметра = НастройкиСхемы.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СверкиВзаиморасчетов"));
	ЗначениеПараметра.Значение = СверкиВзаиморасчетов;

	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаВыводаРезультата, 
		НастройкиСхемы,
		ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		Новый Структура("ДанныеОрганизации", ДанныеОрганизации),
		ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ВспомогательныеПараметры = Новый Массив;
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметры);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СверкиВзаиморасчетовОтчета()
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСверокВзаиморасчетов = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаСверокВзаиморасчетов.ВыгрузитьКолонку("СверкаВзаиморасчетов");
	
КонецФункции

#КонецОбласти

#КонецЕсли
