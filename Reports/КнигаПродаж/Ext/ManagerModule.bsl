#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура СформироватьОтчет(Знач СтруктураПараметров, АдресХранилища) Экспорт
	
	ПодготовитьОтчет(СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров, АдресХранилища);
	
КонецПроцедуры

Процедура ПодготовитьОтчет(СтруктураПараметров) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.КонтрагентДляОтбора)
		ИЛИ СтруктураПараметров.ВыводитьПродавцовПоАвансам
		ИЛИ СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтандартнаяФорма = Ложь;
	Иначе
		СтандартнаяФорма = УчетНДСПереопределяемый.ПериодОтчетаСоответствуетНалоговому(
			СтруктураПараметров.Организация, СтруктураПараметров.НачалоПериода, СтруктураПараметров.КонецПериода);
	КонецЕсли;

	СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", СтандартнаяФорма);
		
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		СписокОрганизацийОтбора = СтруктураПараметров.СписокОрганизаций;
	ИначеЕсли НЕ СтруктураПараметров.ВключатьОбособленныеПодразделения Тогда
		СписокОрганизацийОтбора = Новый СписокЗначений;
		СписокОрганизацийОтбора.Добавить(СтруктураПараметров.Организация);
	Иначе
		СписокОрганизацийОтбора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(
			СтруктураПараметров.Организация);
	КонецЕсли;
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого ОрганизацияСписка Из СписокОрганизацийОтбора Цикл
		Если СписокДоступныхОрганизаций.Найти(ОрганизацияСписка.Значение) <> Неопределено Тогда 
			СписокОрганизаций.Добавить(ОрганизацияСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", Ложь);
	СтруктураПараметров.Вставить("СчетчикСегментов", 0);

	Если НЕ СтруктураПараметров.Свойство("ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС") Тогда
		СтруктураПараметров.Вставить("ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС",
			УчетНДС.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС());
	КонецЕсли;
	
	ИнициализироватьТаблицыДанныхНДС(СтруктураПараметров);
	
	СтруктураПараметров.Вставить("ОткрыватьПомощникИзМакета");
	СтруктураПараметров.ОткрыватьПомощникИзМакета = 
		УчетНДСПереопределяемый.ОткрыватьПомощникИзМакета(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода)
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И НЕ СтруктураПараметров.ЗаполнениеДокумента ;
	
	СписокСообщений = Новый СписокЗначений();
	
	Если НЕ (СтруктураПараметров.ВыводитьТолькоДопЛисты И СтруктураПараметров.ФормироватьДополнительныеЛисты) Тогда
		
		СтруктураПараметров.Вставить("ВерсияПостановленияНДС1137", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода));
			
		Результат = Неопределено;
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		Если ПроверкаКонтрагентов.ФормироватьОтчетСтандартнымСпособом(СтруктураПараметров, Результат) Тогда
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
			Результат = ЗаписиКнигиПродаж(СтруктураПараметров);
			// СтандартныеПодсистемы.РаботаСКонтрагентами
			ПроверкаКонтрагентов.ЗапомнитьДанныеОтчета(СтруктураПараметров, Результат);
			// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		КонецЕсли;
		
		СформироватьОсновнойРаздел(СтруктураПараметров, Результат);
		
	КонецЕсли;
		
	// Проверка наличия дополнительных листов за текущий период
	СтруктураПараметров = ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров);
	
	Если СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета были внесены изменения в предшествующие налоговые периоды. 
				|Дополнительные листы по корректируемым налоговым периодам, в которые внесены изменения, можно построить в текущем отчете. 
				|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за корректируемый период"".'"));
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в последующих налоговых периодах. 
				|Построение дополнительных листов за текущий налоговый период не требуется.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Или Не СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		Если СтруктураПараметров.ТекущийПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета есть изменения, внесенные в последующих налоговых периодах. 
				|Дополнительные листы по текущему налоговому периоду можно построить в текущем отчете.
				|Для этого необходимо взвести флажок ""Формировать дополнительные листы"" и выбрать значение ""за текущий период"".'"));
		КонецЕсли;
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты И Не СтруктураПараметров.КорректируемыйПериод Тогда
			СписокСообщений.Добавить(НСтр("ru = 'В указанном периоде отчета не вносились изменения в предыдущие налоговые периоды. 
				|Построение дополнительных листов за корректируемый налоговый период не требуется.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда
		
		СтруктураПараметров.ЗаписьДополнительногоЛиста = Истина;
		
		Если СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации Тогда
			ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
		Иначе
			ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ВерсияПостановленияНДС1137", 
			УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета));
			
		// Получение записей дополнительных листов
		Результат = ЗаписиКнигиПродаж(СтруктураПараметров);
		
		СформироватьДополнительныеЛисты(СтруктураПараметров, Результат);
		
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ВыводитьТолькоНекорректныхКонтрагентов")
		ИЛИ НЕ СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		СтруктураПараметров.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СписокСообщений", СписокСообщений);
	
КонецПроцедуры

#Область ПолучениеЗаписей

// Используется в электронном доп. листе книги продаж
Функция ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров) Экспорт
	
	// Создаем общий запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.ВсегоПродаж), 0) КАК ВсегоПродаж,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС18), 0) КАК СуммаБезНДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС18), 0) КАК НДС18,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаБезНДС10), 0) КАК СуммаБезНДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС10), 0) КАК НДС10,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.НДС0), 0) КАК НДС0,
	|	ЕСТЬNULL(СУММА(ЗаписиКнигиПродаж.СуммаСовсемБезНДС), 0) КАК СуммаСовсемБезНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ВсегоПродаж,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС18,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС10,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДС0,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаСовсемБезНДС
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Период,
	|				Организация В (&Организация)
	|					И &ДополнительноеУсловие
	|					И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|					И НЕ НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродажОбороты.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|				&НачалоПериода,
	|				&МоментФормированияДопЛиста,
	|				Период,
	|				Организация В (&Организация)
	|					И &ДополнительноеУсловие
	|					И (ЗаписьДополнительногоЛиста
	|						И КорректируемыйПериод >= &НачалоПериода
	|						И КорректируемыйПериод <= &КонецПериода)) КАК НДСЗаписиКнигиПродажОбороты) КАК ЗаписиКнигиПродаж";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НалоговыйПериод);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("МоментФормированияДопЛиста", 
		Новый Граница(НачалоДня(СтруктураПараметров.ДатаФормированияДопЛиста),ВидГраницы.Исключая));
		
	ДатаПроверкиПараметровУчета = КонецДня(СтруктураПараметров.КонецНалоговогоПериода);
		
	ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета);
	СтруктураПараметров.Вставить("ПрименяетсяОсвобождениеОтУплатыНДС",
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	СтруктураПараметров.Вставить("ПлательщикНДС",
		УчетнаяПолитика.ПлательщикНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	
	МассивСтавокНДС = Перечисления.СтавкиНДС.СтавкиПоОперациямОтражаемымВКнигеПродаж(ВерсияПостановленияНДС1137);
	Запрос.УстановитьПараметр("МассивСтавокНДС", МассивСтавокНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгентПокупатель",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров());
		
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
	
	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданныеНалоговыйАгент);
	// Для итогов авансы можно учитывать вместе с выделенными суммовыми разницами - методика отражения в книге одинаковая.
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ДополнительноеУсловие", 
		ДополнительноеУсловиеЗапроса(СтруктураПараметров, Ложь));
	
	ИтогЗаПериод = Запрос.Выполнить();
	
	Если НЕ ИтогЗаПериод.Пустой() Тогда
		
		Возврат ИтогЗаПериод.Выгрузить()[0];
		
	Иначе
		
		ИтогЗаПериод = Новый Структура;
		ИтогЗаПериод.Вставить("ВсегоПродаж", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС10", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаБезНДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС18", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("НДС0", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ИтогЗаПериод.Вставить("СуммаСовсемБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
		Возврат ИтогЗаПериод;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОсновнойРаздел(СтруктураПараметров, Результат);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПродаж";
	ТабличныйДокумент.ЧерноБелаяПечать = Истина;
	
	Если СтруктураПараметров.ОткрыватьПомощникИзМакета Тогда
		ТабличныйДокумент.Вывести(УчетНДСПереопределяемый.ПолучитьМакетОткрытияПомощника(
			СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
	КонецЕсли;
	
	ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(СтруктураПараметров.КонецПериода);
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 = 4 Тогда
		Макет = ПолучитьОбщийМакет("КнигаПродаж981");
	ИначеЕсли ВерсияПостановленияНДС1137 = 3 Тогда
		Если СтруктураПараметров.ЗаполнениеДекларации
		   И СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" Тогда
			Макет = ПолучитьОбщийМакет("КнигаПродаж1137_2017");
		Иначе
			Макет = ПолучитьОбщийМакет("КнигаПродаж735");
		КонецЕсли;
	Иначе
		Макет = ПолучитьОбщийМакет("КнигаПродаж1137");
	КонецЕсли;

	НазваниеРаздела = Нстр("ru='Основной раздел'");

	СтруктураСекций = Новый Структура();
	ОбластьСтрокиДляПовтора = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	
	СекцияВсего = Макет.ПолучитьОбласть("Всего");
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		СтруктураСекций.Вставить("ШапкаРаздел9", Макет.ПолучитьОбласть("ШапкаРаздел9"));
		СтруктураСекций.Вставить("ДекларацияИтоги", Макет.ПолучитьОбласть("ДекларацияИтоги"));
		
		ОбластьСтрокиДляПовтора.Область("НомераГрафКнига").Видимость = Ложь;
		СтруктураСекций.Вставить("СтрокиДляПовтора", ОбластьСтрокиДляПовтора);
		
	Иначе
		
		Если ОбластьСтрокиДляПовтора.Области.Найти("НомераГрафДекларация") <> Неопределено Тогда 
			ОбластьСтрокиДляПовтора.Область("НомераГрафДекларация").Видимость = Ложь;
		КонецЕсли;
		СтруктураСекций.Вставить("СтрокиДляПовтора", ОбластьСтрокиДляПовтора);
		
		Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
			Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
			ТабличныйДокумент.Вывести(Секция);
		КонецЕсли;

		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
		НазваниеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ИННОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН", Ложь);
		КППОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "КПП", Ложь);
		
		Секция = Макет.ПолучитьОбласть("Шапка");
		Если Секция.Области.Найти("НомераГрафДекларация") <> Неопределено Тогда 
			Секция.Область("НомераГрафДекларация").Видимость = Ложь;
		КонецЕсли;
		Секция.Параметры.УстановленныйОтбор = "";
		Секция.Параметры.НачалоПериода = Формат(СтруктураПараметров.НачалоПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.КонецПериода  = Формат(СтруктураПараметров.КонецПериода, "ДФ=dd.MM.yyyy");
		Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		Секция.Параметры.ИННКППОрганизации   = ИННОрганизации 
			+ ?(НЕ ЗначениеЗаполнено(КППОрганизации), "", ("/" + КППОрганизации));
		
		Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
			
			Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
				НадписьОтбор = НСтр("ru='Отбор: Контрагент в группе %1'");
			Иначе
				НадписьОтбор = НСтр("ru='Отбор: Контрагент = %1'");
			КонецЕсли;
			Секция.Параметры.УстановленныйОтбор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НадписьОтбор, СтруктураПараметров.КонтрагентДляОтбора);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Секция);
		
	КонецЕсли;
	
	Если Результат.Пустой() Тогда
		
		СтруктураПараметров.СчетчикСегментов = СтруктураПараметров.СчетчикСегментов + 1;
	
		ТабличныйДокумент.Вывести(СекцияВсего);
		
		Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
			И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
			ВывестиПодвал(СтруктураПараметров, ТабличныйДокумент, Макет);
		КонецЕсли;
		
		УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
		ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, НазваниеРаздела, СтруктураПараметров.СчетчикСегментов, ТабличныйДокумент);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураСекций.Вставить("СекцияСтрока", Макет.ПолучитьОбласть("Строка"));
		
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
		СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
	КонецЕсли;
	
	СтрокаИтогПоОрганизации = УчетНДС.НоваяСтрокаИтоговКнигиПродаж();
	
	ПреобразоватьЗаписиКнигиПродаж(
		СтруктураПараметров,
		Результат,
		ТабличныйДокумент,
		СтрокаИтогПоОрганизации,
		СтруктураСекций,
		?(СтруктураПараметров.Свойство("ТабличнаяЧасть"),СтруктураПараметров.ТабличнаяЧасть, Неопределено));
	
	Если НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
		СекцияВсего.Параметры.Заполнить(СтрокаИтогПоОрганизации);
		ТабличныйДокумент.Вывести(СекцияВсего);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
	КонецЕсли;

	Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
		И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
		ВывестиПодвал(СтруктураПараметров, ТабличныйДокумент, Макет);
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		ИмяРаздела = "Раздел9";
		
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0 Тогда
			
			ПерваяСтрокаСегмента = СтруктураПараметров.Счетчик - СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
				
		КонецЕсли;
		
		ИтогиРаздел9 = Новый Структура("СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		ИтогиРаздел9.СтПродБезНДС18 = СтрокаИтогПоОрганизации.СуммаБезНДС18;
		ИтогиРаздел9.СтПродБезНДС10 = СтрокаИтогПоОрганизации.СуммаБезНДС10;
		ИтогиРаздел9.СтПродБезНДС0  = СтрокаИтогПоОрганизации.НДС0;
		ИтогиРаздел9.СумНДСВсКПр18  = СтрокаИтогПоОрганизации.НДС18;
		ИтогиРаздел9.СумНДСВсКПр10  = СтрокаИтогПоОрганизации.НДС10;
		ИтогиРаздел9.СтПродОсвВсКПр = СтрокаИтогПоОрганизации.СуммаСовсемБезНДС;
		
	
	ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ФорматПоПостановлению735 Тогда
		
		ОбщиеСведения = Новый Структура("СтТовРубКоп18,СтТовРубКоп10,СтТовРубКоп0,СумНДСРубКоп18,СумНДСРубКоп10,СтПродОсвНДСРубКоп");
		ОбщиеСведения.СтТовРубКоп18			= СтрокаИтогПоОрганизации.СуммаБезНДС18;
		ОбщиеСведения.СтТовРубКоп10			= СтрокаИтогПоОрганизации.СуммаБезНДС10;
		ОбщиеСведения.СтТовРубКоп0			= СтрокаИтогПоОрганизации.НДС0;
		ОбщиеСведения.СумНДСРубКоп18		= СтрокаИтогПоОрганизации.НДС18;
		ОбщиеСведения.СумНДСРубКоп10		= СтрокаИтогПоОрганизации.НДС10;
		ОбщиеСведения.СтПродОсвНДСРубКоп	= СтрокаИтогПоОрганизации.СуммаСовсемБезНДС;
		
		СтруктураПараметров.ОбщиеСведения = ОбщиеСведения;
	
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаполнениеДокумента Тогда
	
		УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
		
		ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, НазваниеРаздела, СтруктураПараметров.СчетчикСегментов, ТабличныйДокумент);

	ИначеЕсли НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
	
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0 Тогда
			// Добавляем последний раздел
		
			Если СтруктураПараметров.СчетчикСегментов < 2 Тогда
				ЗаголовокЛиста = НазваниеРаздела;
			Иначе
				ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СтруктураПараметров.СчетчикСегментов);
			КонецЕсли;
		
			ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, ЗаголовокЛиста, СтруктураПараметров.СчетчикСегментов, ТабличныйДокумент);
		
		ИначеЕсли СтруктураПараметров.Счетчик <> 0 Тогда
			// Число строк последнего раздела совпало с предельным.	Сам раздел был добавлен в УчетНДС.ПреобразоватьЗаписиКнигиПродаж().
			// Заменим табличный документ в этом разделе отчета на табличный документ с итогами и подвалом.
			РазделыОтчета		= ПроверкаКонтрагентов.РазделыОтчета(СтруктураПараметров);
			Если РазделыОтчета.Количество() > 0 Тогда
				РазделОтчета  		= РазделыОтчета[РазделыОтчета.Количество()-1];
				ТабличныйДокумент 	= РазделОтчета.ХранилищеОтчета.Получить();

				ТабличныйДокумент.Вывести(СекцияВсего);
				Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
					ВывестиПодвал(СтруктураПараметров, ТабличныйДокумент, Макет);
				КонецЕсли;

				РазделОтчета.ХранилищеОтчета = Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДополнительныеЛисты(СтруктураПараметров, Результат)
	
	Перем ТабличныйДокумент;
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НомерОтображаемогоПериода = 0;
	
	ИтогПоПериодам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СчетчикСтрокДопЛиста", 0);
	СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", 0);
	
	ИтогиРаздел91 = Новый Структура(
		"ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
		|СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
		
	ПараметрыПолученияИтогов = Новый Структура;
	ПараметрыПолученияИтогов.Вставить("НалоговыйПериод",            НачалоКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("КонецНалоговогоПериода",     КонецКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("ДатаФормированияДопЛиста",   НачалоКвартала(СтруктураПараметров.НачалоПериода));
	ПараметрыПолученияИтогов.Вставить("СписокОрганизаций",          СтруктураПараметров.СписокОрганизаций);
	ПараметрыПолученияИтогов.Вставить("Организация",                СтруктураПараметров.Организация);
	ПараметрыПолученияИтогов.Вставить("ЗаписьДополнительногоЛиста", Ложь);
	
	ИтогПоКнигеПродаж = ПолучитьИтогиЗаПериодКнигаПродаж(ПараметрыПолученияИтогов);
	
	ИтогиРаздел91.ИтСтПродКПр18  = ИтогПоКнигеПродаж.СуммаБезНДС18;
	ИтогиРаздел91.ИтСтПродКПр10  = ИтогПоКнигеПродаж.СуммаБезНДС10;
	ИтогиРаздел91.ИтСтПродКПр0   = ИтогПоКнигеПродаж.НДС0;
	ИтогиРаздел91.СумНДСИтКПр18  = ИтогПоКнигеПродаж.НДС18;
	ИтогиРаздел91.СумНДСИтКПр10  = ИтогПоКнигеПродаж.НДС10;
	ИтогиРаздел91.ИтСтПродОсвКПр = ИтогПоКнигеПродаж.СуммаСовсемБезНДС;
	
	ДанныеОтчета = Новый Массив;
	
	Пока ИтогПоПериодам.Следующий() Цикл
		
		НомерЛиста = 0;
		
		НомерОтображаемогоПериода = НомерОтображаемогоПериода + 1;
		НалоговыйПериод = ПредставлениеПериода(
			ИтогПоПериодам.НалоговыйПериод, КонецДня(ИтогПоПериодам.КонецНалоговогоПериода), "ФП = Истина");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		Если СтруктураПараметров.ОткрыватьПомощникИзМакета Тогда
			ТабличныйДокумент.Вывести(УчетНДСПереопределяемый.ПолучитьМакетОткрытияПомощника(
				СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода));
		КонецЕсли;

		СтруктураПараметров.Вставить("СчетчикСегментовНалоговогоПериода", 1);
		
		ИтогПоПериодамКорректировки = ИтогПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ИтогПоПериодамКорректировки.Следующий() Цикл;
			
			СтруктураСекций = Новый Структура();
			
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(
				ИтогПоПериодамКорректировки.КонецНалоговогоПериода);
			Если ВерсияПостановленияНДС1137 = 1 Тогда
				Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж1137");
				СтруктураПараметров.ЗаполнениеДекларации = Ложь;
			ИначеЕсли ВерсияПостановленияНДС1137 = 2 Тогда
				Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж952");
				СтруктураПараметров.ЗаполнениеДекларации = Ложь;
			ИначеЕсли ВерсияПостановленияНДС1137 = 3 Тогда 
				Если СтруктураПараметров.ЗаполнениеДекларации
				   И СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" Тогда
					Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж1137_2017");
				Иначе
					Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж735");
				КонецЕсли;
			ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
				Макет = ПолучитьОбщийМакет("ДополнительныйЛистКнигиПродаж981");
			КонецЕсли;

			ОбластьСтрокиПовтора = Макет.ПолучитьОбласть("СтрокиДляПовтора");
			
			Если ВерсияПостановленияНДС1137 >= 3 Тогда
				Если СтруктураПараметров.ЗаполнениеДекларации Тогда
					СтруктураСекций.Вставить("ШапкаРаздел91", Макет.ПолучитьОбласть("ШапкаРаздел91"));
					СтруктураСекций.Вставить("ДекларацияИтоги", Макет.ПолучитьОбласть("ДекларацияИтоги"));
					ОбластьСтрокиПовтора.Область("НомераГрафКнига").Видимость = Ложь;
				Иначе
					ОбластьСтрокиПовтора.Область("НомераГрафДекларация").Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;

			СтруктураСекций.Вставить("СекцияСтрока", 		Макет.ПолучитьОбласть("Строка"));
			СтруктураСекций.Вставить("СтрокиДляПовтора", 	ОбластьСтрокиПовтора);
			
			Секция = Макет.ПолучитьОбласть("Строка");
			СтрокаИтого = Макет.ПолучитьОбласть("Итого");
			СтрокаВсего = Макет.ПолучитьОбласть("Всего");
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СекцияКонтрагент = Макет.ПолучитьОбласть("Контрагент");
				СекцияВсегоКонтрагент = Макет.ПолучитьОбласть("ВсегоКонтрагент");
			КонецЕсли;
			
			// Формирование шапки доп. листа
			ОкончаниеПредыдущегоРаздела = ТабличныйДокумент.ВысотаТаблицы;
			НомерЛиста = НомерЛиста + 1;
			
			СтруктураПараметров.Вставить("НалоговыйПериод",
				?(СтруктураПараметров.ЗаполнениеДекларации, 
				СтруктураПараметров.НачалоНалоговогоПериода, ИтогПоПериодамКорректировки.НалоговыйПериод));
			СтруктураПараметров.Вставить("КонецНалоговогоПериода", 
				КонецКвартала(ИтогПоПериодамКорректировки.КонецНалоговогоПериода));
			СтруктураПараметров.Вставить("ДатаОформления", ИтогПоПериодамКорректировки.ДатаОформления);
			
			Если НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				УчетНДС.ВывестиШапкуДопЛиста(ТабличныйДокумент, Макет, СтруктураПараметров, НомерЛиста);
			КонецЕсли;

			СтруктураПараметров.ДатаФормированияДопЛиста = ИтогПоПериодамКорректировки.ДатаОформления;
			
			ИтогЗаПериод = ПолучитьИтогиЗаПериодКнигаПродаж(СтруктураПараметров);
			
			Если НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				СтрокаИтого.Параметры.Заполнить(ИтогЗаПериод);
				ТабличныйДокумент.Вывести(СтрокаИтого);
			Иначе
				ВывестиШапкуРаздела91Декларации(ТабличныйДокумент, Макет, СтруктураПараметров, НомерЛиста, ИтогЗаПериод);
			КонецЕсли;

			Если СтруктураПараметров.ЗаполнениеДокумента
				И СтруктураПараметров.ФорматПоПостановлению735 Тогда
				
				ОбщиеСведения = Новый Структура("НомерДопЛКнПрод,Период,ОтчетГод,ДатаДопЛКнПрод,Итого,Всего");
				
				ОбщиеСведения.НомерДопЛКнПрод = НомерЛиста;
				ОбщиеСведения.Период          = СтруктураПараметров.ПериодПоСКНП;
				ОбщиеСведения.ОтчетГод        = Строка(Формат(Год(ИтогПоПериодамКорректировки.НалоговыйПериод),"ЧГ=0"));
				ОбщиеСведения.ДатаДопЛКнПрод  = Строка(Формат(ИтогПоПериодамКорректировки.ДатаОформления, "ДЛФ=Д"));
				
				Итого = Новый Структура(
					"СтТовРубКоп18,СтТовРубКоп10,СтТовРубКоп0,СумНДСРубКоп18,СумНДСРубКоп10,СтПродОсвНДСРубКоп");
				Итого.СтТовРубКоп18			= ИтогЗаПериод.СуммаБезНДС18;
				Итого.СтТовРубКоп10			= ИтогЗаПериод.СуммаБезНДС10;
				Итого.СтТовРубКоп0			= ИтогЗаПериод.НДС0;
				Итого.СумНДСРубКоп18		= ИтогЗаПериод.НДС18;
				Итого.СумНДСРубКоп10		= ИтогЗаПериод.НДС10;
				Итого.СтПродОсвНДСРубКоп	= ИтогЗаПериод.СуммаСовсемБезНДС;
				
				ОбщиеСведения.Итого = Итого;
				
			КонецЕсли;
			
			Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
				СтруктураСекций.Вставить("СекцияКонтрагент", Макет.ПолучитьОбласть("Контрагент"));
				СтруктураСекций.Вставить("СекцияВсегоКонтрагент", Макет.ПолучитьОбласть("ВсегоКонтрагент"));
			КонецЕсли;
			
			ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
				СтруктураПараметров,
				ИтогПоПериодамКорректировки,
				?(СтруктураПараметров.Свойство("РеквизитыДокумента"),СтруктураПараметров.РеквизитыДокумента, ИтогЗаПериод),
				ТабличныйДокумент,
				СтруктураСекций,
				?(СтруктураПараметров.Свойство("ТабличнаяЧасть"),СтруктураПараметров.ТабличнаяЧасть, Неопределено));
			
			Если НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				СтрокаВсего.Параметры.Заполнить(ИтогЗаПериод);
				ТабличныйДокумент.Вывести(СтрокаВсего);
			КонецЕсли;
			
			Если СтруктураПараметров.ЗаполнениеДокумента
				И СтруктураПараметров.ФорматПоПостановлению735 Тогда
				
				Всего = Новый Структура(
					"СтТовРубКоп18,СтТовРубКоп10,СтТовРубКоп0,СумНДСРубКоп18,СумНДСРубКоп10,СтПродОсвНДСРубКоп");
				Всего.СтТовРубКоп18			= ИтогЗаПериод.СуммаБезНДС18;
				Всего.СтТовРубКоп10			= ИтогЗаПериод.СуммаБезНДС10;
				Всего.СтТовРубКоп0			= ИтогЗаПериод.НДС0;
				Всего.СумНДСРубКоп18		= ИтогЗаПериод.НДС18;
				Всего.СумНДСРубКоп10		= ИтогЗаПериод.НДС10;
				Всего.СтПродОсвНДСРубКоп	= ИтогЗаПериод.СуммаСовсемБезНДС;
				
				ОбщиеСведения.Всего = Всего;
				
				СтруктураДанных = Новый Структура("ОбщиеСведения,Записи",
					ОбщиеСведения, СтруктураПараметров.Записи.Скопировать());
				СтруктураПараметров.Записи.Очистить();
				ДанныеОтчета.Добавить(СтруктураДанных);
				
			КонецЕсли;
			
			Если СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме
				И НЕ СтруктураПараметров.ЗаполнениеДекларации Тогда
				ВывестиПодвал(СтруктураПараметров, ТабличныйДокумент, Макет);
			КонецЕсли;
			
		КонецЦикла; // ИтогПоПериодамКорректировки.Следующий()
		
		// Записываем доп. листы в таблицу разделов отчета.
		НазваниеРаздела = СтрШаблон(НСтр("ru = 'Доп.листы за %1'"), НалоговыйПериод);
		Если СтруктураПараметров.СчетчикСегментовНалоговогоПериода > 1 Тогда
			НазваниеРаздела = УчетНДС.СформироватьЗаголовокЛиста(
				НазваниеРаздела, СтруктураПараметров.СчетчикСегментовНалоговогоПериода);
		КонецЕсли;
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЭтоДопЛист", Истина);
		
		ПроверкаКонтрагентов.ДобавитьРазделОтчета(
			СтруктураПараметров, 
			НазваниеРаздела, 
			СтруктураПараметров.СчетчикСегментов, 
			ТабличныйДокумент,
			ДополнительныеПараметры);

		СтруктураПараметров.СчетчикСегментов = СтруктураПараметров.СчетчикСегментов + 1;
		
	КонецЦикла; // ИтогПоПериодам.Следующий()

	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		ИмяРаздела = "Раздел9_Прил1";
		
		// Запишем последний сегмент
	
		Если СтруктураПараметров.СчетчикСтрокТекущегоСегмента <> 0 Тогда
			
			// Записать сегменты
			ПерваяСтрокаСегмента = СтруктураПараметров.СчетчикСтрокДопЛиста 
				- СтруктураПараметров.СчетчикСтрокТекущегоСегмента + 1;
			
			Если ПерваяСтрокаСегмента = 1 Тогда 
				ТабличныйДокумент.Область("СуммаБезНДС18Приложение").Значение     = ИтогЗаПериод.СуммаБезНДС18;
				ТабличныйДокумент.Область("СуммаБезНДС10Приложение").Значение     = ИтогЗаПериод.СуммаБезНДС10;
				ТабличныйДокумент.Область("НДС0Приложение").Значение              = ИтогЗаПериод.НДС0;
				ТабличныйДокумент.Область("НДС18Приложение").Значение             = ИтогЗаПериод.НДС18;
				ТабличныйДокумент.Область("НДС10Приложение").Значение             = ИтогЗаПериод.НДС10;
				ТабличныйДокумент.Область("СуммаСовсемБезНДСПриложение").Значение = ИтогЗаПериод.СуммаСовсемБезНДС;
			Иначе
				ЗаписатьИтогиВПервыйСегментРаздела91(СтруктураПараметров, ИтогЗаПериод);
			КонецЕсли;
			
				
		ИначеЕсли СтруктураПараметров.СчетчикСтрокТекущегоСегмента = 0
			И СтруктураПараметров.СчетчикСтрокДопЛиста <> 0 Тогда
			
			// Количество строк в сегменте совпало с предельным,
			// необходимо добавить строку итогов в записанный ранее сегмент табличного документа.
			
			ЗаписатьИтогиВПервыйСегментРаздела91(СтруктураПараметров, ИтогЗаПериод);
			
		КонецЕсли;
		
		ИтогиРаздел91.СтПродВсП1Р9_18 = ИтогЗаПериод.СуммаБезНДС18;
		ИтогиРаздел91.СтПродВсП1Р9_10 = ИтогЗаПериод.СуммаБезНДС10;
		ИтогиРаздел91.СтПродВсП1Р9_0  = ИтогЗаПериод.НДС0;
		ИтогиРаздел91.СумНДСВсП1Р9_18 = ИтогЗаПериод.НДС18;
		ИтогиРаздел91.СумНДСВсП1Р9_10 = ИтогЗаПериод.НДС10;
		ИтогиРаздел91.СтПродОсвП1Р9Вс = ИтогЗаПериод.СуммаСовсемБезНДС;
		
		
	ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ФорматПоПостановлению735 Тогда
		СтруктураПараметров.ДанныеОтчета = ДанныеОтчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИтогиВПервыйСегментРаздела91(СтруктураПараметров, ИтогЗаПериод)
	
	ВидДополнительногоФайла = "ТабличныйДокументРаздел9_Прил1.1";
	ИмяРаздела = "Раздел9_Прил1";


КонецПроцедуры

Процедура ВывестиШапкуРаздела91Декларации(ТабличныйДокумент, Макет, СтруктураПараметров, НомерДополнительногоЛиста, ИтогоЗаПериод)
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	Если НомерДополнительногоЛиста = 1 Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаРаздел91");
		ТабличныйДокумент.Вывести(Секция);
		ДекларацияИтоги = Макет.ПолучитьОбласть("ДекларацияИтоги");
		ДекларацияИтоги.Параметры.Заполнить(ИтогоЗаПериод);
		ТабличныйДокумент.Вывести(ДекларацияИтоги);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("ШапкаРаздел91НомерЛиста");
	Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	Секция.Параметры.ДатаСоставления = Формат(СтруктураПараметров.ДатаОформления, "ДФ=dd.MM.yyyy");
	ТабличныйДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	Секция.Область("НомераГрафКнига").Видимость = Ложь;
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

Процедура ВывестиПодвал(СтруктураПараметров, ТабличныйДокумент, Макет)
	
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(СтруктураПараметров.Организация) Тогда
		ИмяРук = ОтветственныеЛица.РуководительПредставление;
		ИмяОрг = "";
		Свидетельство = "";
	Иначе
		ИмяРук = "";
		ИмяОрг = ОтветственныеЛица.РуководительПредставление;
		СведенияОЮрФизЛице = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
			СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);
		Свидетельство = СведенияОЮрФизЛице.Свидетельство;
	КонецЕсли;

	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук        = ИмяРук;
	Секция.Параметры.ИмяОрг        = ИмяОрг;
	Секция.Параметры.Свидетельство = Свидетельство;

	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

Процедура ИнициализироватьТаблицыДанныхНДС(СтруктураПараметров)

	Если СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ФорматПоПостановлению735 Тогда
		
		Записи = Новый ТаблицаЗначений;
		
		Записи.Колонки.Добавить("НомПП", 				ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
		Записи.Колонки.Добавить("НомерСчФ", 			ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Записи.Колонки.Добавить("ДатаСчФ", 				ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Записи.Колонки.Добавить("НомИспрСчФ", 			ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
		Записи.Колонки.Добавить("ДатаИспрСчФ", 			ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Записи.Колонки.Добавить("НомерКСчФ", 			ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Записи.Колонки.Добавить("ДатаКСчФ", 			ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Записи.Колонки.Добавить("НомИспрКСчФ", 			ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
		Записи.Колонки.Добавить("ДатаИспрКСчФ",			ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Записи.Колонки.Добавить("НаимПок", 				ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Записи.Колонки.Добавить("ИННЮЛ", 				ОбщегоНазначения.ОписаниеТипаСтрока(10));
		Записи.Колонки.Добавить("КПП", 					ОбщегоНазначения.ОписаниеТипаСтрока(9));
		Записи.Колонки.Добавить("ИННФЛ", 				ОбщегоНазначения.ОписаниеТипаСтрока(12));
		Записи.Колонки.Добавить("КодОКВ", 				ОбщегоНазначения.ОписаниеТипаСтрока(3));
		Записи.Колонки.Добавить("СтТовУчНалВсего", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СтТовУчНалРубКоп", 	ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СтТовРубКоп18", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СтТовРубКоп10", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СтТовРубКоп0", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СумНДСРубКоп18", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СумНДСРубКоп10", 		ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Записи.Колонки.Добавить("СтПродОсвНДСРубКоп", 	ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		
		Записи.Колонки.Добавить("КодВидОпер",	Новый ОписаниеТипов("Массив"));
		Записи.Колонки.Добавить("СвПосредн");
		Записи.Колонки.Добавить("СвДокПдтвОпл", Новый ОписаниеТипов("Массив"));
		
		Если СтруктураПараметров.ФормироватьДополнительныеЛисты Тогда 
			ОбщиеСведения = Новый Структура("НомерДопЛКнПрод,Период,ОтчетГод,ДатаДопЛКнПрод,Итого,Всего");
			СтруктураПараметров.Вставить("ДанныеОтчета");
		Иначе
			ОбщиеСведения = Новый Структура("СтТовРубКоп18,СтТовРубКоп10,СтТовРубКоп0,СумНДСРубКоп18,СумНДСРубКоп10,СтПродОсвНДСРубКоп");
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Записи", 			Записи);
		СтруктураПараметров.Вставить("ОбщиеСведения", 	ОбщиеСведения);
		
	Иначе
		
		Раздел9 = Новый ТаблицаЗначений;
		
		Раздел9.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
		
		Раздел9.Колонки.Добавить("НомСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		Раздел9.Колонки.Добавить("ДатаСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
		Раздел9.Колонки.Добавить("НомИспрСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
		Раздел9.Колонки.Добавить("ДатаИспрСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
		Раздел9.Колонки.Добавить("НомКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		Раздел9.Колонки.Добавить("ДатаКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
		Раздел9.Колонки.Добавить("НомИспрКСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
		Раздел9.Колонки.Добавить("ДатаИспрКСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
		Раздел9.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
		
		Если СтруктураПараметров.ЗаполнениеДекларации
		   И СтруктураПараметров.ПравилаЗаполнения = "2017Кв1" Тогда
			Раздел9.Колонки.Добавить("РегНомТД", Новый ОписаниеТипов("Массив"));
		КонецЕсли;
		
		Раздел9.Колонки.Добавить("СтоимПродСФВ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СтоимПродСФ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		
		Раздел9.Колонки.Добавить("СтоимПродСФ18", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СтоимПродСФ10", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СтоимПродСФ0", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СумНДССФ18", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СумНДССФ10", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		Раздел9.Колонки.Добавить("СтоимПродОсв", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
		
		Раздел9.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
		Раздел9.Колонки.Добавить("ДокПдтвОпл", Новый ОписаниеТипов("Массив"));
		
		Раздел9.Колонки.Добавить("СвПокуп", Новый ОписаниеТипов("Массив"));
		Раздел9.Колонки.Добавить("СвПос"); // Тип не задается
		
		Раздел9.Колонки.Добавить("ДополнительныеСведения");
		
		Раздел91 = Раздел9.СкопироватьКолонки();
		
		СтруктураПараметров.Вставить("ТаблицаРаздел9", Раздел9);
		СтруктураПараметров.Вставить("ТаблицаРаздел91", Раздел91);
		СтруктураПараметров.Вставить("ТабличныйДокументРаздел91");
		
		ИтогиРаздел9 = Новый Структура("СтПродБезНДС18,СтПродБезНДС10,СтПродБезНДС0,СумНДСВсКПр18,СумНДСВсКПр10,СтПродОсвВсКПр");
		ИтогиРаздел91 = Новый Структура(
		"ИтСтПродКПр18,ИтСтПродКПр10,ИтСтПродКПр0,СумНДСИтКПр18,СумНДСИтКПр10,ИтСтПродОсвКПр,
		|СтПродВсП1Р9_18,СтПродВсП1Р9_10,СтПродВсП1Р9_0,СумНДСВсП1Р9_18,СумНДСВсП1Р9_10,СтПродОсвП1Р9Вс");
		
		СтруктураПараметров.Вставить("ИтогиРаздел9", ИтогиРаздел9);
		СтруктураПараметров.Вставить("ИтогиРаздел91", ИтогиРаздел91);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПреобразоватьЗаписиКнигиПродаж(
	СтруктураПараметров,
	НаборЗаписей,
	ТабличныйДокумент,
	СтрокаИтогПоОрганизации,
	СтруктураСекций,
	ТаблицаДокумента)
	
	ДополнительнаяИнформация = ПолучитьДополнительнуюИнформациюПоСчетуФактуре(СтруктураПараметров);
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;

	ИтогПоОрганизации = НаборЗаписей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // Общий итог по организации
	ИтогПоОрганизации.Следующий();

	Если СтруктураПараметров.ГруппироватьПоКонтрагентам Тогда
		СекцияКонтрагент = СтруктураСекций.СекцияКонтрагент;
		СекцияВсегоКонтрагент = СтруктураСекций.СекцияВсегоКонтрагент;
	КонецЕсли;

	Счетчик = 0; // Счетчик строк книги продаж
	СчетчикСтрокТекущегоСегмента = 0; // Используется для сегментирования разделов декларации по НДС
	СчетчикСегментов = 1; // Число сформированных сегментов книги

	НазваниеРаздела = Нстр("ru='Основной раздел'");

	// Запоминаем итоговые суммы по организации.
	ЗаполнитьЗначенияСвойств(СтрокаИтогПоОрганизации, ИтогПоОрганизации);

	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
		СтруктураСекций.ДекларацияИтоги.Параметры.Заполнить(СтрокаИтогПоОрганизации);
		ТабличныйДокумент.Вывести(СтруктураСекций.ДекларацияИтоги);
		ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И Не СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		СтрокаИтогПоКонтрагенту = УчетНДС.НоваяСтрокаИтоговКнигиПродаж();
		
		ИтогПоКонтрагенту = ИтогПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ИтогПоКонтрагенту.Следующий() Цикл 
			
			// Запоминаем итоговые суммы по контрагенту.
			ЗаполнитьЗначенияСвойств(СтрокаИтогПоКонтрагенту, ИтогПоКонтрагенту);
		
			Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
				ТабличныйДокумент.Вывести(СекцияКонтрагент);
				ТабличныйДокумент.НачатьГруппуСтрок();
			КонецЕсли;
		
			НалоговыеПериоды = ИтогПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока НалоговыеПериоды.Следующий() Цикл
				
				ИтогПоСчетФактураДокумент = НалоговыеПериоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ИтогПоСчетФактураДокумент.Следующий() Цикл

					ИтогПоДоговорАванса = ИтогПоСчетФактураДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ИтогПоДоговорАванса.Следующий() Цикл
						
						ЗаписьКниги = ИтогПоДоговорАванса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
						Пока ЗаписьКниги.Следующий() Цикл
							
							Если ЗаписьКниги.НачислениеПоОказаниюУслуг
								ИЛИ (ЗаписьКниги.СводныйКорректировочный
									И СтруктураПараметров.ВерсияПостановленияНДС1137 < 4) Тогда
								
								ЗаписьКнигиДетальная = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
							
								Пока ЗаписьКнигиДетальная.Следующий() Цикл

									// Счетчики ведем всегда в целом по всем строкам набора,
									// чтобы если какие-то контрагенты будут отфильтрованы, то номера у строк сохранялись те же,
									// какие были бы в полном отчете.
									Счетчик = Счетчик + 1;
									СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
								
									Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
										ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик,,ДополнительнаяИнформация);
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										УчетНДС.ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента, , СчетчикСегментов);
									Иначе
										УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоКонтрагенту, ЗаписьКнигиДетальная, СтруктураПараметров);
										УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
									КонецЕсли;
								КонецЦикла; // ЗаписьКнигиДетальная.Следующий()
								
							ИначеЕсли ЗаписьКниги.СводныйКомиссионный
								И СтруктураПараметров.ВерсияПостановленияНДС1137 < 4 Тогда
								
								Счетчик = Счетчик + 1;
								СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
								ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги, СтруктураПараметров, ПараметрыСтроки, Счетчик);
								ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								
							Иначе

								// Счетчики ведем всегда в целом по всем строкам набора,
								// чтобы если какие-то контрагенты будут отфильтрованы, то номера у строк сохранялись те же,
								// какие были бы в полном отчете.
								Счетчик = Счетчик + 1;
								СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
							
								ЗаписьКнигиДетальная = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
								ЗаписьКнигиДетальная.Следующий();
							
								Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги, , ЗаписьКнигиДетальная) Тогда
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик, ЗаписьКнигиДетальная, ДополнительнаяИнформация);
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									УчетНДС.ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента, ЗаписьКнигиДетальная, СчетчикСегментов);
								Иначе
									УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоКонтрагенту, ЗаписьКниги, СтруктураПараметров);
									УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла; // ЗаписьКниги.Следующий()
					
					КонецЦикла; // ИтогПоДоговорАванса.Следующий()
				
				КонецЦикла; // ИтогПоСчетФактураДокумент.Следующий()
			
			КонецЦикла; // НалоговыеПериоды.Следующий()
					
			Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ИтогПоКонтрагенту, Истина) Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
				СекцияВсегоКонтрагент.Параметры.Заполнить(СтрокаИтогПоКонтрагенту);
				ТабличныйДокумент.Вывести(СекцияВсегоКонтрагент);
			КонецЕсли;

			// Группировку по контрагенту не разрываем на разные сегменты,
			// поэтому количество записей в сегменте может быть чуть больше, чем предельное количество.
			Если СчетчикСтрокТекущегоСегмента >= СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
			
				ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов);
				ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, ЗаголовокЛиста, СчетчикСегментов, ТабличныйДокумент);
			
				// Очистим табличный документ и таблицу
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
				
				// Обнулим счетчик текущего сегмента
				СчетчикСтрокТекущегоСегмента = 0;
				СчетчикСегментов = СчетчикСегментов + 1;
				
			КонецЕсли;
		
		КонецЦикла; // ИтогПоКонтрагенту.Следующий()
		
	Иначе
		
		ТекстРозничнаяПродажа = НСтр("ru = 'Розничная продажа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
		НалоговыеПериоды = ИтогПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока НалоговыеПериоды.Следующий() Цикл
		
			ИтогПоСчетФактураДокумент = НалоговыеПериоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Пока ИтогПоСчетФактураДокумент.Следующий() Цикл
				
				ИтогПоДоговорАванса = ИтогПоСчетФактураДокумент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ИтогПоДоговорАванса.Следующий() Цикл
				
					ЗаписьКниги = ИтогПоДоговорАванса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Пока ЗаписьКниги.Следующий() Цикл
						
						ЗаписьКнигиДетальная = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
						Если НЕ ЗаписьКниги.СводнаяСправка
							И ((ЗаписьКниги.Покупатель = ТекстРозничнаяПродажа
								И ЗаписьКнигиДетальная.Количество() > 1)
							ИЛИ ЗаписьКниги.НалоговыйАгентПокупательТоваров
							ИЛИ ЗаписьКниги.НачислениеПоОказаниюУслуг
							ИЛИ (ЗаписьКниги.СводныйКорректировочный 
								И СтруктураПараметров.ВерсияПостановленияНДС1137 < 4)) Тогда
								
								Пока ЗаписьКнигиДетальная.Следующий() Цикл

								// Счетчики ведем всегда в целом по всем строкам набора,
								// чтобы если какие-то контрагенты будут отфильтрованы, то номера у строк сохранялись те же,
								// какие были бы в полном отчете.
								Счетчик = Счетчик + 1;
								СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
								
								Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ЗаписьКнигиДетальная) Тогда
									Если СтруктураПараметров.ЗаполнениеДокумента
										И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда 
										ПараметрыСтроки = ТаблицаДокумента.Добавить();
									КонецЕсли;
									
									ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКнигиДетальная, Счетчик,,ДополнительнаяИнформация);
									
									Если СтруктураПараметров.ЗаполнениеДокумента 
										И СтруктураПараметров.ФорматПоПостановлению735 Тогда
										ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									ИначеЕсли НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
										СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(Счетчик, "ЧГ=");
										ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
										УчетНДС.ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКнигиДетальная, ОбластьТабличногоДокумента, , СчетчикСегментов);
									КонецЕсли;
								Иначе
									УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоОрганизации, ЗаписьКнигиДетальная, СтруктураПараметров);
								КонецЕсли;
								
								Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
									И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
									
									// Запишем сегмент
									ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
									
									УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
									
									Если СтруктураПараметров.ЗаполнениеДекларации Тогда
										

										СтруктураПараметров.ТаблицаРаздел9.Очистить();

									Иначе

										ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов);
										ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, ЗаголовокЛиста, СчетчикСегментов, ТабличныйДокумент);
									
									КонецЕсли;
										
									
									// Очистим табличный документ и таблицу
									ТабличныйДокумент.Очистить();
									Если СтруктураПараметров.ЗаполнениеДекларации Тогда
										ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
									КонецЕсли;
									ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
									
									// Обнулим счетчик текущего сегмента
									СчетчикСтрокТекущегоСегмента = 0;
									СчетчикСегментов = СчетчикСегментов + 1;
									
								КонецЕсли;
								
							КонецЦикла; // ЗаписьКнигиДетальная.Следующий()
							
						ИначеЕсли ЗаписьКниги.СводныйКомиссионный
							И СтруктураПараметров.ВерсияПостановленияНДС1137 < 4 Тогда
							
							Если СтруктураПараметров.ЗаполнениеДокумента
								И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда 
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1; 
							ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписьКниги, СтруктураПараметров, ПараметрыСтроки, Счетчик);
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента
								ИЛИ (СтруктураПараметров.ЗаполнениеДокумента
								И СтруктураПараметров.ФорматПоПостановлению735) Тогда
								СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(Счетчик, "ЧГ=");
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
								И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
								
								// Запишем сегмент
								ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
								
								УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
								
								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
								
										
									СтруктураПараметров.ТаблицаРаздел9.Очистить();
									
								Иначе

									ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов);
									ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, ЗаголовокЛиста, СчетчикСегментов, ТабличныйДокумент);
								
								КонецЕсли;
									
								
								// Очистим табличный документ и таблицу
								ТабличныйДокумент.Очистить();
								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
								КонецЕсли;
								ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
								
								// Обнулим счетчик текущего сегмента
								СчетчикСтрокТекущегоСегмента = 0;
								СчетчикСегментов = СчетчикСегментов + 1;
								
							КонецЕсли;
							
						Иначе
							
							// Счетчики ведем всегда в целом по всем строкам набора,
							// чтобы если какие-то контрагенты будут отфильтрованы, то номера у строк сохранялись те же,
							// какие были бы в полном отчете.
							Счетчик = Счетчик + 1;
							СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
						
							ЗаписьКнигиДетальная.Следующий();
						
							Если УчетНДС.ВыводитьСтроку(СтруктураПараметров, ЗаписьКниги, , ЗаписьКнигиДетальная) Тогда
								
								Если СтруктураПараметров.ЗаполнениеДокумента
									И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда 
									ПараметрыСтроки = ТаблицаДокумента.Добавить();
								КонецЕсли;
								
								ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик, ЗаписьКнигиДетальная, ДополнительнаяИнформация);
								
								Если СтруктураПараметров.ЗаполнениеДокумента 
									И СтруктураПараметров.ФорматПоПостановлению735 Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
								ИначеЕсли НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
									СтруктураСекций.СекцияСтрока.Область(1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(Счетчик, "ЧГ=");
									ОбластьТабличногоДокумента = ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
									УчетНДС.ДобавитьКонтрагентаНаПроверку(СтруктураПараметров, ЗаписьКниги, ОбластьТабличногоДокумента, ЗаписьКнигиДетальная, СчетчикСегментов);
								КонецЕсли;
							Иначе
								УчетНДС.УменьшитьСуммуИтога(СтрокаИтогПоОрганизации, ЗаписьКниги, СтруктураПараметров);
							КонецЕсли;
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
								И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
								
								// Запишем сегмент
								ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
								
								УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);

								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
									
										
									СтруктураПараметров.ТаблицаРаздел9.Очистить();

								Иначе
								
									ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментов);
									ПроверкаКонтрагентов.ДобавитьРазделОтчета(СтруктураПараметров, ЗаголовокЛиста, СчетчикСегментов, ТабличныйДокумент);
								
								КонецЕсли;
										
								
								// Очистим табличный документ и таблицу
								ТабличныйДокумент.Очистить();
								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел9);
								КонецЕсли;
								ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
								
								// Обнулим счетчик текущего сегмента
								СчетчикСтрокТекущегоСегмента = 0;
								СчетчикСегментов = СчетчикСегментов + 1;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла; // ЗаписьКниги.Следующий()
				
				КонецЦикла; // ИтогПоДоговорАванса.Следующий()
			
			КонецЦикла; // ИтогПоСчетФактураДокумент.Следующий()
		
		КонецЦикла; // НалоговыеПериоды.Следующий()
		
	КонецЕсли;
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
		СтруктураПараметров.Вставить("СчетчикСтрокТекущегоСегмента", СчетчикСтрокТекущегоСегмента);
		СтруктураПараметров.Вставить("Счетчик", Счетчик);
		СтруктураПараметров.Вставить("СчетчикСегментов", СчетчикСегментов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьЗаписиДополнительногоЛистаКнигиПродаж(
	СтруктураПараметров,
	ИтогПоПериодамКорректировки,
	ИтогЗаПериод,
	ТабличныйДокумент,
	СтруктураСекций,
	ТаблицаДокумента)
	
	ДополнительнаяИнформация = ПолучитьДополнительнуюИнформациюПоСчетуФактуре(СтруктураПараметров);
	
	Если НЕ СтруктураПараметров.Свойство("ЗаполнениеДекларации") Тогда
		СтруктураПараметров.Вставить("ЗаполнениеДекларации", Ложь);
	ИначеЕсли СтруктураПараметров.ЗаполнениеДекларации И СтруктураПараметров.КонецПериода < '20150101' Тогда
		СтруктураПараметров.ЗаполнениеДекларации = Ложь;
	КонецЕсли;
	
	ПараметрыСтроки = СтруктураСекций.СекцияСтрока.Параметры;
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
		Счетчик = СтруктураПараметров.СчетчикСтрокДопЛиста;
		СчетчикСтрокТекущегоСегмента = СтруктураПараметров.СчетчикСтрокТекущегоСегмента;
	Иначе
		Счетчик = 0;
		СчетчикСтрокТекущегоСегмента = 0;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("СчетчикСегментов") Тогда
		СчетчикСегментов = СтруктураПараметров.СчетчикСегментов + 1;
	Иначе
		СчетчикСегментов = 1;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("СчетчикСегментовНалоговогоПериода") Тогда
		СчетчикСегментовНалоговогоПериода = СтруктураПараметров.СчетчикСегментовНалоговогоПериода;
	Иначе
		СчетчикСегментовНалоговогоПериода = 1;
	КонецЕсли;

	НалоговыйПериод = ПредставлениеПериода(
		СтруктураПараметров.НалоговыйПериод, КонецДня(СтруктураПараметров.КонецНалоговогоПериода), "ФП = Истина");
	НазваниеРаздела = СтрШаблон(НСтр("ru = 'Доп.листы за %1'"), НалоговыйПериод);
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента
		И НЕ СтруктураПараметров.ЗаполнениеДекларации
		И СтруктураПараметров.ГруппироватьПоКонтрагентам 
		И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		
		ИтогПоКонтрагенту = ИтогПоПериодамКорректировки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ИтогПоКонтрагенту.Следующий() Цикл
			СтруктураСекций.СекцияКонтрагент.Параметры.Контрагент = ИтогПоКонтрагенту.Покупатель;
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияКонтрагент);
			ТабличныйДокумент.НачатьГруппуСтрок();
			
			ЗаписьПоСФ = ИтогПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ЗаписьПоСФ.Следующий() Цикл
				РазделениеПоДоговоруДляАвансов = ЗаписьПоСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока РазделениеПоДоговоруДляАвансов.Следующий() Цикл
					ЗаписьКниги = РазделениеПоДоговоруДляАвансов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ЗаписьКниги.Следующий() Цикл
						
						ДетальнаяЗапись = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
						ДетальнаяЗапись.Следующий();
					
						Счетчик = Счетчик + 1;
						СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;

						ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик, ДетальнаяЗапись, ДополнительнаяИнформация);
						
						ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЦикла; // ЗаписьКниги.Следующий()
				КонецЦикла; // РазделениеПоДоговоруДляАвансов.Следующий()
			КонецЦикла; // ЗаписьПоСФ.Следующий()
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			СтруктураСекций.СекцияВсегоКонтрагент.Параметры.Заполнить(ИтогПоКонтрагенту);
			ТабличныйДокумент.Вывести(СтруктураСекций.СекцияВсегоКонтрагент);

			// Группировку по контрагенту не разрываем на разные сегменты,
			// поэтому количество записей в сегменте может быть чуть больше, чем предельное количество.
			Если СчетчикСтрокТекущегоСегмента >= СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
				
				УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
			
				// В заголовке в качестве номера порции выводим порцию в пределах налогового периода.
				ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментовНалоговогоПериода);
				// В общую таблицу передаем в качестве номера раздела глобальный счетчик сегментов (с учетом основных разделов книги).
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ЭтоДопЛист", Истина);
				ПроверкаКонтрагентов.ДобавитьРазделОтчета(
					СтруктураПараметров, 
					ЗаголовокЛиста, 
					СчетчикСегментов, 
					ТабличныйДокумент, 
					ДополнительныеПараметры);
			
				// Очистим табличный документ и таблицу
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
				
				// Обнулим счетчик текущего сегмента
				СчетчикСтрокТекущегоСегмента = 0;
				СчетчикСегментов = СчетчикСегментов + 1;
				СчетчикСегментовНалоговогоПериода = СчетчикСегментовНалоговогоПериода + 1;
				
			КонецЕсли;
			
		КонецЦикла; // ИтогПоКонтрагенту.Следующий()
		
	Иначе
		
		ЗаписьПоСФ = ИтогПоПериодамКорректировки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ЗаписьПоСФ.Следующий() Цикл
			РазделениеПоДоговоруДляАвансов = ЗаписьПоСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока РазделениеПоДоговоруДляАвансов.Следующий() Цикл
				ЗаписьКниги = РазделениеПоДоговоруДляАвансов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ЗаписьКниги.Следующий() Цикл
					
					ДетальнаяЗапись = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					Если ЗаписьКниги.НалоговыйАгентПокупательТоваров Тогда
						
						Пока ДетальнаяЗапись.Следующий() Цикл
							
							Если СтруктураПараметров.ЗаполнениеДокумента 
								И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
								ПараметрыСтроки = ТаблицаДокумента.Добавить();
							КонецЕсли;
							
							Счетчик = Счетчик + 1;
							СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
							
							ЗаполнитьСтрокуКнигиПродаж(
								СтруктураПараметров, ПараметрыСтроки, ДетальнаяЗапись, Счетчик,, ДополнительнаяИнформация);
							
							Если СтруктураПараметров.ЗаполнениеДокумента 
							   И СтруктураПараметров.ФорматПоПостановлению735
							   ИЛИ НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
								СтруктураСекций.СекцияСтрока.Область(
									1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(Счетчик, "ЧГ=");
								ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
							КонецЕсли;
							
							Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
								И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
								
								// Запишем сегмент
								ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
								
								УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
								
								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
									
									
								Иначе

									// В заголовке в качестве номера порции выводим порцию в пределах налогового периода.
									ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментовНалоговогоПериода);
									// В общую таблицу передаем в качестве номера раздела глобальный счетчик сегментов (с учетом основных разделов книги).
									ДополнительныеПараметры = Новый Структура();
									ДополнительныеПараметры.Вставить("ЭтоДопЛист", Истина);
									ПроверкаКонтрагентов.ДобавитьРазделОтчета(
										СтруктураПараметров, 
										ЗаголовокЛиста, 
										СчетчикСегментов, 
										ТабличныйДокумент, 
										ДополнительныеПараметры);
								
								КонецЕсли;
								
								// Очистим табличный документ и таблицу
								ТабличныйДокумент.Очистить();
								Если СтруктураПараметров.ЗаполнениеДекларации Тогда
									ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел91);
								КонецЕсли;
								ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
								
								// Обнулим счетчик текущего сегмента
								СчетчикСтрокТекущегоСегмента = 0;
								СчетчикСегментов = СчетчикСегментов + 1;
								СчетчикСегментовНалоговогоПериода = СчетчикСегментовНалоговогоПериода + 1;
								
							КонецЕсли;
						
							ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ДетальнаяЗапись.ВсегоПродаж;
							ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ДетальнаяЗапись.СуммаБезНДС10;
							ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ДетальнаяЗапись.НДС10;
							ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ДетальнаяЗапись.СуммаБезНДС18;
							ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ДетальнаяЗапись.НДС18;
							ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ДетальнаяЗапись.НДС0;
							ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ДетальнаяЗапись.СуммаСовсемБезНДС;
							
						КонецЦикла;
						
					Иначе
						
						Если СтруктураПараметров.ЗаполнениеДокумента 
							И НЕ СтруктураПараметров.ФорматПоПостановлению735 Тогда
							ПараметрыСтроки = ТаблицаДокумента.Добавить();
						КонецЕсли;
						
						ДетальнаяЗапись.Следующий();
						
						Счетчик = Счетчик + 1;
						СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента + 1;
						
						ЗаполнитьСтрокуКнигиПродаж(
							СтруктураПараметров, ПараметрыСтроки, ЗаписьКниги, Счетчик, ДетальнаяЗапись, ДополнительнаяИнформация);
						
						Если СтруктураПараметров.ЗаполнениеДокумента 
							И СтруктураПараметров.ФорматПоПостановлению735
							ИЛИ НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
							СтруктураСекций.СекцияСтрока.Область(
								1, , СтруктураСекций.СекцияСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(Счетчик, "ЧГ=");
							ТабличныйДокумент.Вывести(СтруктураСекций.СекцияСтрока);
						КонецЕсли;
						
						Если НЕ СтруктураПараметров.ЗаполнениеДокумента 
							И СчетчикСтрокТекущегоСегмента = СтруктураПараметров.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
							
							// Запишем сегмент
							ПерваяСтрокаСегмента = Счетчик - СчетчикСтрокТекущегоСегмента + 1;
							
							УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
							
							Если СтруктураПараметров.ЗаполнениеДекларации Тогда
								
									
							Иначе

								// В заголовке в качестве номера порции выводим порцию в пределах налогового периода.
								ЗаголовокЛиста = УчетНДС.СформироватьЗаголовокЛиста(НазваниеРаздела, СчетчикСегментовНалоговогоПериода);
								// В общую таблицу передаем в качестве номера раздела глобальный счетчик сегментов (с учетом основных разделов книги).
								ДополнительныеПараметры = Новый Структура();
								ДополнительныеПараметры.Вставить("ЭтоДопЛист", Истина);
								ПроверкаКонтрагентов.ДобавитьРазделОтчета(
									СтруктураПараметров, 
									ЗаголовокЛиста, 
									СчетчикСегментов, 
									ТабличныйДокумент, 
									ДополнительныеПараметры);
							
							КонецЕсли;
							
							// Очистим табличный документ и таблицу
							ТабличныйДокумент.Очистить();
							Если СтруктураПараметров.ЗаполнениеДекларации Тогда
								ТабличныйДокумент.Вывести(СтруктураСекций.ШапкаРаздел91);
							КонецЕсли;
							ТабличныйДокумент.Вывести(СтруктураСекций.СтрокиДляПовтора);
							
							// Обнулим счетчик текущего сегмента
							СчетчикСтрокТекущегоСегмента = 0;
							СчетчикСегментов = СчетчикСегментов + 1;
							СчетчикСегментовНалоговогоПериода = СчетчикСегментовНалоговогоПериода + 1;
							
						КонецЕсли;
					
						ИтогЗаПериод.ВсегоПродаж = ИтогЗаПериод.ВсегоПродаж + ЗаписьКниги.ВсегоПродаж;
						ИтогЗаПериод.СуммаБезНДС10 = ИтогЗаПериод.СуммаБезНДС10 + ЗаписьКниги.СуммаБезНДС10;
						ИтогЗаПериод.НДС10 = ИтогЗаПериод.НДС10 + ЗаписьКниги.НДС10;
						ИтогЗаПериод.СуммаБезНДС18 = ИтогЗаПериод.СуммаБезНДС18 + ЗаписьКниги.СуммаБезНДС18;
						ИтогЗаПериод.НДС18 = ИтогЗаПериод.НДС18 + ЗаписьКниги.НДС18;
						ИтогЗаПериод.НДС0 = ИтогЗаПериод.НДС0 + ЗаписьКниги.НДС0;
						ИтогЗаПериод.СуммаСовсемБезНДС = ИтогЗаПериод.СуммаСовсемБезНДС + ЗаписьКниги.СуммаСовсемБезНДС;
						
					КонецЕсли;
				
				КонецЦикла;
			КонецЦикла; // РазделениеПоДоговоруДляАвансов.Следующий()
		КонецЦикла; // ЗаписьПоСФ.Следующий()
	КонецЕсли;
	
	УправлениеКолонтитулами.УстановитьКолонтитулы(ТабличныйДокумент);
	
	Если НЕ СтруктураПараметров.ЗаполнениеДокумента Тогда
		СтруктураПараметров.СчетчикСтрокДопЛиста = Счетчик;
		СтруктураПараметров.СчетчикСтрокТекущегоСегмента = СчетчикСтрокТекущегоСегмента;
		СтруктураПараметров.СчетчикСегментов = СчетчикСегментов;
		СтруктураПараметров.СчетчикСегментовНалоговогоПериода = СчетчикСегментовНалоговогоПериода;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродаж(СтруктураПараметров, Секция, ЗаписьКниги, НомерСтроки, ДетальнаяЗапись = Неопределено, ДополнительнаяИнформация)
	
	Если ДетальнаяЗапись <> Неопределено Тогда
		ПараметрыЗаполнения = ДетальнаяЗапись;
	Иначе
		ПараметрыЗаполнения = ЗаписьКниги;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Секция, ПараметрыЗаполнения);
	
	// Универсальная структура для заполнения книги по разным версиям постановления.
	СоставСтроки = Новый Структура;

	// В соответствии с письмом ФНС России от 16.01.2018 N СД-4-3/480@ операции по реализации 
	// товаров п.8 ст.161 НК РФ отражаются с прочерками "-" в графах 13б, 17.
	Если ПараметрыЗаполнения.Событие = Перечисления.СобытияПоНДСПродажи.НалогИсчисляетПокупатель Тогда 
		ПараметрВсегоПродаж = "-";
		ПараметрНДС18       = "-";
	Иначе
		ПараметрВсегоПродаж = ЗаписьКниги.ВсегоПродаж;
		ПараметрНДС18       = ЗаписьКниги.НДС18;
	КонецЕсли;
	СоставСтроки.Вставить("ВсегоПродаж",       ПараметрВсегоПродаж);
	СоставСтроки.Вставить("СуммаБезНДС18",     ЗаписьКниги.СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",             ПараметрНДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",     ЗаписьКниги.СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",             ЗаписьКниги.НДС10);
	СоставСтроки.Вставить("НДС0",              ЗаписьКниги.НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС", ЗаписьКниги.СуммаСовсемБезНДС);
	
	Если ЗначениеЗаполнено(ЗаписьКниги.СчетФактураДокумент) Тогда
		СоставСтроки.Вставить("СчетФактура", ЗаписьКниги.СчетФактураДокумент);
	ИначеЕсли ДетальнаяЗапись <> Неопределено Тогда
		СоставСтроки.Вставить("СчетФактура", ДетальнаяЗапись.СчетФактура);
	КонецЕсли;
	
	ПредставлениеСФ = УчетНДС.ОпределитьДатуИНомерСФ(ПараметрыЗаполнения);
	
	СоставСтроки.Вставить("ДатаНомер",                   ПредставлениеСФ.ДатаНомер);
	СоставСтроки.Вставить("НомерДата",                   ПредставлениеСФ.НомерДата);
	СоставСтроки.Вставить("НомерОтДата",                 ПредставлениеСФ.НомерОтДата);
	
	СоставСтроки.Вставить("НомерДатаИсправления",        ПредставлениеСФ.НомерДатаИсправленный);
	СоставСтроки.Вставить("НомерОтДатаИсправленный",     ПредставлениеСФ.НомерОтДатаИсправленный);
	
	СоставСтроки.Вставить("НомерДатаКорректировки",      ПредставлениеСФ.НомерДатаКорректировочный);
	СоставСтроки.Вставить("НомерОтДатаКорректировочный", ПредставлениеСФ.НомерОтДатаКорректировочный);
	
	СоставСтроки.Вставить("НомерДатаИсправленияКорректировки",
		ПредставлениеСФ.НомерДатаИсправленныйКорректировочный);
	СоставСтроки.Вставить("НомерОтДатаИсправленныйКорректировочный",
		ПредставлениеСФ.НомерОтДатаИсправленныйКорректировочный);
	
	СоставСтроки.Вставить("Ном",         НомерСтроки);
	СоставСтроки.Вставить("КодОперации", ПараметрыЗаполнения.КодВидаОперации);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Покупатель) Тогда
		Если ПараметрыЗаполнения.СводныйКомиссионный Тогда
			Секция.Покупатель = "";
			Секция.Графа8 = "";
		Иначе
			СоставСтроки.Вставить("Покупатель",    ПараметрыЗаполнения.Покупатель);
			СоставСтроки.Вставить("ПокупательИНН", ПараметрыЗаполнения.ПокупательИНН);
			СоставСтроки.Вставить("ПокупательКПП", ПараметрыЗаполнения.ПокупательКПП);
			СоставСтроки.Вставить("Графа8", Строка(ПараметрыЗаполнения.ПокупательИНН) 
				+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПокупательКПП), "/" + Строка(ПараметрыЗаполнения.ПокупательКПП), ""));
		КонецЕсли;
		СоставСтроки.Вставить("Посредник", ПараметрыЗаполнения.Посредник);
		СоставСтроки.Вставить("ПосредникИНН_КПП", "" + Строка(ПараметрыЗаполнения.ПосредникИНН) 
			+ ?(ЗначениеЗаполнено(ПараметрыЗаполнения.ПосредникКПП), "/" + Строка(ПараметрыЗаполнения.ПосредникКПП), ""));
	КонецЕсли;
	
	СоставСтроки.Вставить("Валюта", 
		?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта),
		"" + ПараметрыЗаполнения.Валюта + ", " + ПараметрыЗаполнения.ВалютаКод,  ""));
	СоставСтроки.Вставить("ВсегоПродажВВалюте", 
		?(ЗначениеЗаполнено(ПараметрыЗаполнения.Валюта), ПараметрыЗаполнения.ВсегоПродажВВалюте, ""));
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	
	ТекстОплаты = "";
	СписокДатОплат = Новый СписокЗначений();
	ТекстОплатыСНомером = "";
	ТекстНомерОтДатаОплаты = "";
	СписокНомеровИДатОплат = Новый СписокЗначений();
	
	СчетаФактуры = Новый Массив();
	
	Если ДетальнаяЗапись = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ЗаписьКниги.ДатаОплаты) Тогда
			Если СписокДатОплат.НайтиПоЗначению(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
				ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
					+ Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy");
				СписокДатОплат.Добавить(Формат(ЗаписьКниги.ДатаОплаты, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаписьКниги.НомерДокументаОплаты) Тогда
			
			НомерДатаОплаты = СтрШаблон(НСтр("ru='%1;%2'"), 
				ЗаписьКниги.НомерДокументаОплаты, Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
			НомерОтДатаОплаты = СтрШаблон(НСтр("ru='%1 от %2'"), 
				ЗаписьКниги.НомерДокументаОплаты, Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
				
			Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
				
				ТекстОплатыСНомером = ТекстОплатыСНомером 
					+ ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
				ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты 
					+ ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
				СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
				
				Если СтруктураПараметров.ЗаполнениеДекларации Тогда
					СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
					СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
				Иначе
					СтруктураДокПдтвОпл = Новый Структура("НомерДокПдтвОпл,ДатаДокПдтвОпл");
					СтруктураДокПдтвОпл.НомерДокПдтвОпл = ЗаписьКниги.НомерДокументаОплаты;
				КонецЕсли;
				СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКниги.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
				МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
			КонецЕсли;
		КонецЕсли;
		
		СчетаФактуры.Добавить(ЗаписьКниги.СчетФактура);
		
	Иначе
		
		// Получаем новую выборку для обхода, ДетальнуюЗапись не используем, она всегда спозиционирована на первую строку.
		СтрокаЗаписи = ЗаписьКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);
	
		Пока СтрокаЗаписи.Следующий() Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.ДатаОплаты) Тогда
				Если СписокДатОплат.НайтиПоЗначению(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy")) = Неопределено Тогда
					ТекстОплаты = ТекстОплаты + ?(НЕ ЗначениеЗаполнено(ТекстОплаты), "", "," + Символы.ПС) 
						+ Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy");
					СписокДатОплат.Добавить(Формат(СтрокаЗаписи.ДатаОплаты, "ДФ=dd.MM.yyyy"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЗаписи.НомерДокументаОплаты) Тогда
				
				НомерДатаОплаты = СтрШаблон(НСтр("ru='%1;%2'"), 
					СтрокаЗаписи.НомерДокументаОплаты, Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
				НомерОтДатаОплаты = СтрШаблон(НСтр("ru='%1 от %2'"), 
					СтрокаЗаписи.НомерДокументаОплаты, Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
					
				Если СписокНомеровИДатОплат.НайтиПоЗначению(НомерДатаОплаты) = Неопределено Тогда
					
					ТекстОплатыСНомером = ТекстОплатыСНомером 
						+ ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
					ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты 
						+ ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
					СписокНомеровИДатОплат.Добавить(НомерДатаОплаты);
					
					Если СтруктураПараметров.ЗаполнениеДекларации Тогда
						СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
						СтруктураДокПдтвОпл.НомДокПдтвОпл = СтрокаЗаписи.НомерДокументаОплаты;
					Иначе
						СтруктураДокПдтвОпл = Новый Структура("НомерДокПдтвОпл,ДатаДокПдтвОпл");
						СтруктураДокПдтвОпл.НомерДокПдтвОпл = СтрокаЗаписи.НомерДокументаОплаты;
					КонецЕсли;
					СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(СтрокаЗаписи.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
					МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);

				КонецЕсли;
			КонецЕсли;
			
			СчетаФактуры.Добавить(СтрокаЗаписи.СчетФактура);
			
		КонецЦикла; // СтрокаЗаписи.Следующий()
		
	КонецЕсли;
	
	СоставСтроки.Вставить("НомерДатаОплаты",   ТекстОплатыСНомером);
	СоставСтроки.Вставить("НомерОтДатаОплаты", ТекстНомерОтДатаОплаты);
	СоставСтроки.Вставить("ДатаОплаты",        ТекстОплаты);
	
	// ТНВЭД
	СчетаФактуры = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаФактуры);
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			СтрокаДополнительнойИнформации = ДополнительнаяИнформация.Найти(СчетФактура, "Ссылка"); 
		Иначе
			СтрокаДополнительнойИнформации = Неопределено;
		КонецЕсли;
		Если СтрокаДополнительнойИнформации <> Неопределено Тогда
			СоставСтроки.Вставить("КодВидаТовара", СтрокаДополнительнойИнформации.ТНВЭД);
		Иначе
			СоставСтроки.Вставить("КодВидаТовара", "");
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);
	
	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		ДополнительныеСведения = Новый Структура("Контрагент,ПредставлениеКонтрагента,Документ,ПредставлениеДокумента");
		
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",   ПредставлениеСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод",  ПредставлениеСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",   ПредставлениеСФ.НомерИсправленный);
		СоставСтроки.Вставить("ДатаИспрСчФ",  ПредставлениеСФ.ДатаИсправленный);
		
		СоставСтроки.Вставить("НомКСчФПрод",  ПредставлениеСФ.НомерКорректировочный);
		СоставСтроки.Вставить("ДатаКСчФПрод", ПредставлениеСФ.ДатаКорректировочный);
		
		СоставСтроки.Вставить("НомИспрКСчФ",  ПредставлениеСФ.НомерИсправленныйКорректировочный);
		СоставСтроки.Вставить("ДатаИспрКСчФ", ПредставлениеСФ.ДатаИсправленныйКорректировочный);
		
		СоставСтроки.Вставить("ОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		
		// Сведения о покупателе
		
		МассивСвПок = Новый Массив();
		
		Если СоставСтроки.Свойство("ПокупательИНН")
			И НЕ ПустаяСтрока(СоставСтроки.ПокупательИНН) Тогда
			СтруктураРеквизитовКонтрагента = УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПокупательИНН, ПараметрыЗаполнения.ПокупательКПП);
			СтруктураРеквизитовКонтрагента.Вставить("Контрагент", ПараметрыЗаполнения.Контрагент);
			СтруктураРеквизитовКонтрагента.Вставить("КонтрагентНаименование", ПараметрыЗаполнения.Покупатель);
			МассивСвПок.Добавить(СтруктураРеквизитовКонтрагента);
		КонецЕсли;
		
		ДополнительныеСведения.Контрагент = ПараметрыЗаполнения.Контрагент;
		ДополнительныеСведения.ПредставлениеКонтрагента = ПараметрыЗаполнения.Покупатель;
		
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		// Сведения о посреднике
		
		Если СоставСтроки.Свойство("Посредник")
			И НЕ ПустаяСтрока(ПараметрыЗаполнения.ПосредникИНН) Тогда
			
			СтруктураРеквизитовПосредника = УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПосредникИНН, ПараметрыЗаполнения.ПосредникКПП);
			СтруктураРеквизитовПосредника.Вставить("Контрагент", ПараметрыЗаполнения.ПосредникСсылка);
			СтруктураРеквизитовПосредника.Вставить("КонтрагентНаименование", СоставСтроки.Посредник);

			СоставСтроки.Вставить("СвПос", СтруктураРеквизитовПосредника);
			
		КонецЕсли;
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ПараметрыЗаполнения.ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ЗаписьКниги.ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", ЗаписьКниги.СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", ЗаписьКниги.СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  ЗаписьКниги.НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    ЗаписьКниги.НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    ЗаписьКниги.НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  ЗаписьКниги.СуммаСовсемБезНДС);
		
		Если ЗначениеЗаполнено(ПредставлениеСФ.НомерКорректировочный) Тогда
			ДополнительныеСведения.ПредставлениеДокумента = СтрШаблон(
				НСтр("ru='Корректировочный счет-фактура № %1 от %2 на сумму %3 %4'"), 
				ПредставлениеСФ.НомерКорректировочный, 
				ПредставлениеСФ.ДатаКорректировочный, 
				Формат(ЗаписьКниги.ВсегоПродаж, "ЧДЦ=2; ЧН="),
				ПараметрыЗаполнения.ВалютаНаименование);
		Иначе
			ДополнительныеСведения.ПредставлениеДокумента = СтрШаблон(
				НСтр("ru='%1 на сумму %2 %3'"),
				ПредставлениеСФ.Представление,
				Формат(ЗаписьКниги.ВсегоПродаж, "ЧДЦ=2; ЧН="),
				ПараметрыЗаполнения.ВалютаНаименование);
		КонецЕсли;
		
		ДополнительныеСведения.Документ = СоставСтроки.СчетФактура;
		СоставСтроки.Вставить("ДополнительныеСведения", ДополнительныеСведения);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента
		И СтруктураПараметров.ФорматПоПостановлению735 Тогда
		
		СоставСтроки.Вставить("НомПП",        НомерСтроки);
		СоставСтроки.Вставить("НомерСчФ",     ПредставлениеСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФ",      ПредставлениеСФ.Дата);
		СоставСтроки.Вставить("НомИспрСчФ",   ПредставлениеСФ.НомерИсправленный);
		СоставСтроки.Вставить("ДатаИспрСчФ",  ПредставлениеСФ.ДатаИсправленный);
		СоставСтроки.Вставить("НомерКСчФ",    ПредставлениеСФ.НомерКорректировочный);
		СоставСтроки.Вставить("ДатаКСчФ",     ПредставлениеСФ.ДатаКорректировочный);
		СоставСтроки.Вставить("НомИспрКСчФ",  ПредставлениеСФ.НомерИсправленныйКорректировочный);
		СоставСтроки.Вставить("ДатаИспрКСчФ", ПредставлениеСФ.ДатаИсправленныйКорректировочный);

		СоставСтроки.Вставить("КодОКВ", Строка(ПараметрыЗаполнения.ВалютаКод));
		
		// Сведения о покупателе
		
		СтруктураРеквизитовКонтрагента = Новый Структура;
		
		Если СоставСтроки.Свойство("ПокупательИНН")
			И НЕ ПустаяСтрока(СоставСтроки.ПокупательИНН) Тогда
			
			СтруктураРеквизитовКонтрагента = УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПокупательИНН, ПараметрыЗаполнения.ПокупательКПП);
			
			Если СтруктураРеквизитовКонтрагента.Свойство("ИННФЛ") Тогда
				СоставСтроки.Вставить("ИННФЛ", СтруктураРеквизитовКонтрагента.ИННФЛ);
			Иначе
				СоставСтроки.Вставить("ИННЮЛ", СтруктураРеквизитовКонтрагента.ИННЮЛ);
				СоставСтроки.Вставить("КПП", СтруктураРеквизитовКонтрагента.КПП);
			КонецЕсли;
		КонецЕсли;
		
		СоставСтроки.Вставить("НаимПок", ПараметрыЗаполнения.Покупатель);
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыЗаполнения.КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		// Сведения о посреднике
		
		Если СоставСтроки.Свойство("Посредник")
			И НЕ ПустаяСтрока(ПараметрыЗаполнения.ПосредникИНН) Тогда
			СоставСтроки.Вставить("СвПосредн", 
				УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ПараметрыЗаполнения.ПосредникИНН, ПараметрыЗаполнения.ПосредникКПП, СоставСтроки.Посредник));
		КонецЕсли;
		
		СоставСтроки.Вставить("СтТовУчНалВсего",    ПараметрыЗаполнения.ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтТовУчНалРубКоп",   ЗаписьКниги.ВсегоПродаж);
		СоставСтроки.Вставить("СтТовРубКоп18",      ЗаписьКниги.СуммаБезНДС18);
		СоставСтроки.Вставить("СтТовРубКоп10",      ЗаписьКниги.СуммаБезНДС10);
		СоставСтроки.Вставить("СтТовРубКоп0",       ЗаписьКниги.НДС0);
		СоставСтроки.Вставить("СумНДСРубКоп18",     ЗаписьКниги.НДС18);
		СоставСтроки.Вставить("СумНДСРубКоп10",     ЗаписьКниги.НДС10);
		СоставСтроки.Вставить("СтПродОсвНДСРубКоп", ЗаписьКниги.СуммаСовсемБезНДС);
		
		СоставСтроки.Вставить("СвДокПдтвОпл", МассивДокПдтвОпл);
		
		СтрокаРаздела = СтруктураПараметров.Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуКнигиПродажСводныйКомиссионный(ЗаписиКниги, СтруктураПараметров, Секция, НомерСтроки)
	
	ЗаписьКнигиДетальная = ЗаписиКниги.Выбрать(ОбходРезультатаЗапроса.Прямой);

	КоличествоЗаписей  = ЗаписьКнигиДетальная.Количество();
	ТекущаяЗапись      = 0;
	ВсегоПродаж        = 0;
	ВсегоПродажВВалюте = 0;
	СуммаБезНДС18      = 0;
	НДС18              = 0;
	СуммаБезНДС10      = 0;
	НДС10              = 0;
	НДС0               = 0;
	СуммаСовсемБезНДС  = 0;
	Покупатель         = "";
	Графа8             = "";
	ВалютаКод		   = "";
	КодВидаОперации	   = "";
	
	ТекстОплатыСНомером = "";
	ТекстНомерОтДатаОплаты = "";
	
	МассивДокПдтвОпл = Новый Массив(); // Массив документов оплаты НДС для декларации с 1 кв 2015 года
	МассивСвПок = Новый Массив();      // Сведения о покупателе
	ДополнительныеСведения = Новый Структура("Контрагент,ПредставлениеКонтрагента,Документ,ПредставлениеДокумента");
	
	Пока ЗаписьКнигиДетальная.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Секция, ЗаписьКнигиДетальная);
		
		ТекущаяЗапись = ТекущаяЗапись + 1;
		
		Если ЗначениеЗаполнено(ЗаписьКнигиДетальная.НомерДокументаОплаты) Тогда
			
			НомерДатаОплаты = СтрШаблон(НСтр("ru='%1;%2'"), 
				ЗаписьКнигиДетальная.НомерДокументаОплаты, Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
			НомерОтДатаОплаты = СтрШаблон(НСтр("ru='%1 от %2'"), 
				ЗаписьКнигиДетальная.НомерДокументаОплаты, Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy"));
				
			ТекстОплатыСНомером = ТекстОплатыСНомером 
					+ ?(НЕ ЗначениеЗаполнено(ТекстОплатыСНомером), "", "," + Символы.ПС) + НомерДатаОплаты;
			ТекстНомерОтДатаОплаты = ТекстНомерОтДатаОплаты 
					+ ?(НЕ ЗначениеЗаполнено(ТекстНомерОтДатаОплаты), "", ";" + Символы.ПС) + НомерОтДатаОплаты;
				
			СтруктураДокПдтвОпл = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл");
			СтруктураДокПдтвОпл.НомДокПдтвОпл = ЗаписьКнигиДетальная.НомерДокументаОплаты;
			СтруктураДокПдтвОпл.ДатаДокПдтвОпл = Формат(ЗаписьКнигиДетальная.ДатаДокументаОплаты, "ДФ=dd.MM.yyyy");
			МассивДокПдтвОпл.Добавить(СтруктураДокПдтвОпл);
				
		Иначе
			
			ВсегоПродаж         = ВсегоПродаж + ЗаписьКнигиДетальная.ВсегоПродаж;
			ВсегоПродажВВалюте  = ВсегоПродажВВалюте 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта), ЗаписьКнигиДетальная.ВсегоПродажВВалюте, 0);
				
			СуммаБезНДС18       = СуммаБезНДС18 + ЗаписьКнигиДетальная.СуммаБезНДС18;
			НДС18               = НДС18 + ЗаписьКнигиДетальная.НДС18;
			СуммаБезНДС10       = СуммаБезНДС10 + ЗаписьКнигиДетальная.СуммаБезНДС10;
			НДС10               = НДС10 + ЗаписьКнигиДетальная.НДС10;
			НДС0                = НДС0 + ЗаписьКнигиДетальная.НДС0;
			СуммаСовсемБезНДС   = СуммаСовсемБезНДС + ЗаписьКнигиДетальная.СуммаСовсемБезНДС;
			
			Покупатель = Покупатель + ?(Покупатель = "", "", ";" + Символы.ПС) + ЗаписьКнигиДетальная.Покупатель;
				
			Графа8 = Графа8 + ?(Графа8 = "", "", ";" + Символы.ПС) 
				+ ЗаписьКнигиДетальная.ПокупательИНН 
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПокупательКПП), "/" + ЗаписьКнигиДетальная.ПокупательКПП, "");
			
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПокупательИНН) Тогда
				
				СтруктураРеквизитовКонтрагента = УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПокупательИНН, ЗаписьКнигиДетальная.ПокупательКПП);
				СтруктураРеквизитовКонтрагента.Вставить("Контрагент", ЗаписьКнигиДетальная.Контрагент);
				СтруктураРеквизитовКонтрагента.Вставить("КонтрагентНаименование", ЗаписьКнигиДетальная.Покупатель);
				МассивСвПок.Добавить(СтруктураРеквизитовКонтрагента);
				
			КонецЕсли;

		КонецЕсли;
		
		Если ТекущаяЗапись = КоличествоЗаписей Тогда
			
			СоставСтроки = Новый Структура;
			
			ПредставлениеСФ = УчетНДС.ОпределитьДатуИНомерСФ(ЗаписьКнигиДетальная);
	
			СоставСтроки.Вставить("ДатаНомер",                   ПредставлениеСФ.ДатаНомер);
			СоставСтроки.Вставить("НомерДата",                   ПредставлениеСФ.НомерДата);
			СоставСтроки.Вставить("НомерОтДата",                 ПредставлениеСФ.НомерОтДата);
			
			СоставСтроки.Вставить("НомерДатаИсправления",        ПредставлениеСФ.НомерДатаИсправленный);
			СоставСтроки.Вставить("НомерОтДатаИсправленный",     ПредставлениеСФ.НомерОтДатаИсправленный);
			
			СоставСтроки.Вставить("НомерДатаКорректировки",      ПредставлениеСФ.НомерДатаКорректировочный);
			СоставСтроки.Вставить("НомерОтДатаКорректировочный", ПредставлениеСФ.НомерОтДатаКорректировочный);
			
			СоставСтроки.Вставить("НомерДатаИсправленияКорректировки",
				ПредставлениеСФ.НомерДатаИсправленныйКорректировочный);
			СоставСтроки.Вставить("НомерОтДатаИсправленныйКорректировочный",
				ПредставлениеСФ.НомерОтДатаИсправленныйКорректировочный);
				
			СоставСтроки.Вставить("Ном",           НомерСтроки);
			СоставСтроки.Вставить("КодОперации",   ЗаписьКнигиДетальная.КодВидаОперации);
			СоставСтроки.Вставить("Покупатель",    Покупатель);
			СоставСтроки.Вставить("ПокупательИНН", ЗаписьКнигиДетальная.ПокупательИНН);
			СоставСтроки.Вставить("ПокупательКПП", ЗаписьКнигиДетальная.ПокупательКПП);
			СоставСтроки.Вставить("Графа8",        Графа8);
			
			ДополнительныеСведения.Документ = ЗаписьКнигиДетальная.СчетФактура;
			
			// Сведения о посреднике
			
			СоставСтроки.Вставить("Посредник",     ЗаписьКнигиДетальная.Посредник);
			СоставСтроки.Вставить("ПосредникИНН_КПП","" + ЗаписьКнигиДетальная.ПосредникИНН
				+ ?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.ПосредникКПП), "/" + ЗаписьКнигиДетальная.ПосредникКПП, ""));
				
			Если НЕ ПустаяСтрока(ЗаписьКнигиДетальная.ПосредникИНН) Тогда
				
				СтруктуруРеквизитовПосредника = УчетНДС.ПолучитьСтруктуруРеквизитовКонтрагента(ЗаписьКнигиДетальная.ПосредникИНН, ЗаписьКнигиДетальная.ПосредникКПП);
				СтруктуруРеквизитовПосредника.Вставить("Контрагент", ЗаписьКнигиДетальная.ПосредникСсылка);
				СтруктуруРеквизитовПосредника.Вставить("КонтрагентНаименование", ЗаписьКнигиДетальная.Посредник);
				СоставСтроки.Вставить("СвПос", СтруктуруРеквизитовПосредника);
				
			КонецЕсли;
	
			СоставСтроки.Вставить("Валюта",
				?(ЗначениеЗаполнено(ЗаписьКнигиДетальная.Валюта),
				"" + ЗаписьКнигиДетальная.Валюта + ", " + ЗаписьКнигиДетальная.ВалютаКод,  ""));
				
			СоставСтроки.Вставить("ВсегоПродажВВалюте",  ВсегоПродажВВалюте);
			
		КонецЕсли;

		ВалютаКод = ЗаписьКнигиДетальная.ВалютаКод;
		КодВидаОперации = ЗаписьКнигиДетальная.КодВидаОперации;
		ВалютаНаименование = ЗаписьКнигиДетальная.ВалютаНаименование;
		
	КонецЦикла;
	
	СоставСтроки.Вставить("ВсегоПродаж",        ВсегоПродаж);
	СоставСтроки.Вставить("ВсегоПродажВВалюте", ВсегоПродажВВалюте);
	СоставСтроки.Вставить("СуммаБезНДС18",      СуммаБезНДС18);
	СоставСтроки.Вставить("НДС18",              НДС18);
	СоставСтроки.Вставить("СуммаБезНДС10",      СуммаБезНДС10);
	СоставСтроки.Вставить("НДС10",              НДС10);
	СоставСтроки.Вставить("НДС0",               НДС0);
	СоставСтроки.Вставить("СуммаСовсемБезНДС",  СуммаСовсемБезНДС);
	СоставСтроки.Вставить("Контрагент",         Покупатель);
	СоставСтроки.Вставить("НомерДатаОплаты",    ТекстОплатыСНомером);
	СоставСтроки.Вставить("НомерОтДатаОплаты",  ТекстНомерОтДатаОплаты);
	
	ЗаполнитьЗначенияСвойств(Секция, СоставСтроки);

	Если СтруктураПараметров.ЗаполнениеДекларации Тогда
		
		ДополнительныеСведения.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДополнительныеСведения.ПредставлениеКонтрагента = НСтр("ru='Сводные счета-фактуры'");
		ДополнительныеСведения.ПредставлениеДокумента = СтрШаблон(
			НСтр("ru='%1 на сумму %2 %3'"),
			ПредставлениеСФ.Представление,
			Формат(ВсегоПродаж, "ЧДЦ=2; ЧН="),
			ВалютаНаименование);
		СоставСтроки.Вставить("ДополнительныеСведения", ДополнительныеСведения);
			
		СоставСтроки.Вставить("НомерПор", НомерСтроки);
		
		СоставСтроки.Вставить("НомСчФПрод",   ПредставлениеСФ.Номер);
		СоставСтроки.Вставить("ДатаСчФПрод",  ПредставлениеСФ.Дата);
		
		СоставСтроки.Вставить("НомИспрСчФ",   ПредставлениеСФ.НомерИсправленный);
		СоставСтроки.Вставить("ДатаИспрСчФ",  ПредставлениеСФ.ДатаИсправленный);
		
		СоставСтроки.Вставить("НомКСчФПрод",  ПредставлениеСФ.НомерКорректировочный);
		СоставСтроки.Вставить("ДатаКСчФПрод", ПредставлениеСФ.ДатаКорректировочный);
		
		СоставСтроки.Вставить("НомИспрКСчФ",  ПредставлениеСФ.НомерИсправленныйКорректировочный);
		СоставСтроки.Вставить("ДатаИспрКСчФ", ПредставлениеСФ.ДатаИсправленныйКорректировочный);
		
		СоставСтроки.Вставить("ОКВ", Строка(ВалютаКод));
		
		МассивКодВидОпер = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодВидаОперации, ";");
		СоставСтроки.Вставить("КодВидОпер", МассивКодВидОпер);
		
		СоставСтроки.Вставить("ДокПдтвОпл", МассивДокПдтвОпл);
		СоставСтроки.Вставить("СвПокуп", МассивСвПок);
		
		СоставСтроки.Вставить("СтоимПродСФВ",  ВсегоПродажВВалюте);
		СоставСтроки.Вставить("СтоимПродСФ",   ВсегоПродаж);
		СоставСтроки.Вставить("СтоимПродСФ18", СуммаБезНДС18);
		СоставСтроки.Вставить("СтоимПродСФ10", СуммаБезНДС10);
		СоставСтроки.Вставить("СтоимПродСФ0",  НДС0);
		СоставСтроки.Вставить("СумНДССФ18",    НДС18);
		СоставСтроки.Вставить("СумНДССФ10",    НДС10);
		СоставСтроки.Вставить("СтоимПродОсв",  СуммаСовсемБезНДС);
		
		Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел91.Добавить();
		Иначе
			СтрокаРаздела = СтруктураПараметров.ТаблицаРаздел9.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаРаздела, СоставСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров)
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоКонтрагенту", 
		НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме И СтруктураПараметров.ОтбиратьПоКонтрагенту);
	Запрос.УстановитьПараметр("КонтрагентДляОтбора", СтруктураПараметров.КонтрагентДляОтбора);
	Запрос.УстановитьПараметр("ВыводитьПродавцовПоАвансам", СтруктураПараметров.ВыводитьПродавцовПоАвансам);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("НаименованиеВалютыРубль", НСтр("ru='руб.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	ДатаПроверкиПараметровУчета = '00010101';
	ЗаполнениеДокументовОтчетности = СтруктураПараметров.ЗаполнениеДокумента ИЛИ СтруктураПараметров.ЗаполнениеДекларации;
	
	Если ЗаполнениеДокументовОтчетности И СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		Запрос.УстановитьПараметр("НачалоНалоговогоПериода", СтруктураПараметров.НачалоНалоговогоПериода); 
		Запрос.УстановитьПараметр("КонецНалоговогоПериода", КонецДня(СтруктураПараметров.КонецНалоговогоПериода));
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецНалоговогоПериода;
	Иначе
		ДатаПроверкиПараметровУчета = СтруктураПараметров.КонецПериода;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПрименяетсяОсвобождениеОтУплатыНДС", 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	СтруктураПараметров.Вставить("ПлательщикНДС",
		УчетнаяПолитика.ПлательщикНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	
	ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета);
	МассивСтавокНДС = Перечисления.СтавкиНДС.СтавкиПоОперациямОтражаемымВКнигеПродаж(ВерсияПостановленияНДС1137);
	
	Запрос.УстановитьПараметр("ПравилаПостановления735", СтруктураПараметров.ВерсияПостановленияНДС1137 >= 3);
	
	// Начиная с отчетности за 4 квартал 2017 года (в соответствии с постановлением Правительства от 19.08.2017 №981)
	// при отражении начисления НДС по единому корректировочному счету-фактуре при уменьшении количества и/или стоимости 
	// приобретенных ранее товаров в книге продаж в качестве покупателя указывается продавец по счету-фактуре.
	Запрос.УстановитьПараметр("ПравилаПостановления981", СтруктураПараметров.ВерсияПостановленияНДС1137 >= 4);
	Запрос.УстановитьПараметр("МассивСтавокНДС",         МассивСтавокНДС);
	
	СтавкиНДС18 = Новый Массив();
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18);
	СтавкиНДС18.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	
	СтавкиНДС10 = Новый Массив();
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС10.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	
	СтавкаНДС0 = Перечисления.СтавкиНДС.НДС0;
	СтавкаБезНДС = Перечисления.СтавкиНДС.БезНДС;
		
	Запрос.УстановитьПараметр("СтавкиНДС18",  СтавкиНДС18);
	Запрос.УстановитьПараметр("СтавкиНДС10",  СтавкиНДС10);
	Запрос.УстановитьПараметр("СтавкаНДС0",   СтавкаНДС0);
	Запрос.УстановитьПараметр("СтавкаБезНДС", СтавкаБезНДС);
	
	ВидыЦенностей_СобственныеСФ = Новый Массив;
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.ВнутреннееПотребление);
	ВидыЦенностей_СобственныеСФ.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностей_СобственныеСФ,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент(Ложь));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВидыЦенностей_СобственныеСФ,
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров());
	Запрос.УстановитьПараметр("ВидыЦенностей_СобственныеСФ", ВидыЦенностей_СобственныеСФ);
	
	ВидыЦенностей_Аванс = Новый Массив;
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	ВидыЦенностей_Аванс.Добавить(Перечисления.ВидыЦенностей.АвансыВыданныеНалоговыйАгент);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_Аванс", ВидыЦенностей_Аванс);
	
	ВидыЦенностей_СуммоваяРазница = Новый Массив;
	ВидыЦенностей_СуммоваяРазница.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностей_СуммоваяРазница", ВидыЦенностей_СуммоваяРазница);
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент", 
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
	
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгентПокупатель",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров());
		
	МассивДокументовИсправлений = Новый Массив;
	МассивДокументовИсправлений.Добавить(Неопределено);
	ТипыДокументовИсправлений = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.Измерения.ИсправленныйСчетФактура.Тип;
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ТипыДокументовИсправлений.СодержитТип(Тип("ДокументСсылка." + МетаданныеДокумента.Имя)) Тогда
			МассивДокументовИсправлений.Добавить(Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеДокументыИсправления", МассивДокументовИсправлений);
	
	Запрос.УстановитьПараметр("ТекстРозничнаяПродажа",
		НСтр("ru = 'Розничная продажа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

	Запрос.УстановитьПараметр("ТипыДокументовРучныхОперацийНДС", УчетНДСПереопределяемый.ТипыДокументовРучныхОперацийНДС());

КонецПроцедуры

Функция ДополнительноеУсловиеЗапроса(СтруктураПараметров, ЗаписьДополнительногоЛиста = Ложь, ИмяТаблицы = "")
	
	Если СтруктураПараметров.ПрименяетсяОсвобождениеОтУплатыНДС Тогда
		// В книге продаж только реализации "без НДС" кроме налогового агента
		// или начисления в качестве налогового агента по облагаемой ставке (симметрическая разность).
		// Начисления по ставке 18% и 10% в разделе 12.
		СтрокаУсловия = 
		"([ИмяТаблицы]СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) И НЕ [ИмяТаблицы]ВидЦенности В (&ВидыЦенностей_НалоговыйАгент, &ВидыЦенностей_НалоговыйАгентПокупатель)
		|ИЛИ [ИмяТаблицы]СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) И [ИмяТаблицы]ВидЦенности В (&ВидыЦенностей_НалоговыйАгент, &ВидыЦенностей_НалоговыйАгентПокупатель))";
	ИначеЕсли НЕ СтруктураПараметров.ПлательщикНДС Тогда
		// Только начисления в качестве налогового агента.
		// Начисления по ставке 18% и 10% в разделе 12.
		СтрокаУсловия = "[ИмяТаблицы]ВидЦенности В (&ВидыЦенностей_НалоговыйАгент, &ВидыЦенностей_НалоговыйАгентПокупатель) И [ИмяТаблицы]СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)";
	Иначе
		// Только начисления по ставкам 18% и 10%, включая начисления в качестве налоговог агента.
		// Операции без НДС отражаются только до даты действия постановления 735.
		СтрокаУсловия = "[ИмяТаблицы]СтавкаНДС В (&МассивСтавокНДС)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "[ИмяТаблицы]", ИмяТаблицы + ".");
	Иначе
		СтрокаУсловия = СтрЗаменить(СтрокаУсловия, "[ИмяТаблицы]", "");
	КонецЕсли;
	
	Если ЗаписьДополнительногоЛиста Тогда
		ШаблонУсловия = "(%1 ИЛИ НДСЗаписиКнигиПродаж.КорректируемыйПериод <= ДАТАВРЕМЯ(2014, 10, 1))";
		СтрокаУсловия = СтрШаблон(ШаблонУсловия, СтрокаУсловия);
	КонецЕсли;
	
	Возврат СтрокаУсловия;
	
КонецФункции

#Область ПолучениеЗаписей

Функция ЗаписиКнигиПродаж(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПараметрыЗапросаКнигиПродаж(Запрос, СтруктураПараметров);

	ТекстЗапроса = ТекстЗапросаЗаписиРегистраНДСПродажи(СтруктураПараметров);
	
	Если СтруктураПараметров.ВерсияПостановленияНДС1137 >= 4 Тогда
		ТекстЗапроса = ТекстЗапроса + УчетНДСПереопределяемый.ТекстЗапросаРеквизитыСчетовФактурПостановление981КнигаПродаж();
	Иначе
		ТекстЗапроса = ТекстЗапроса + УчетНДСПереопределяемый.ТекстЗапросаРеквизитыСчетовФактурПостановление735КнигаПродаж();
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса + ТекстЗапросаПодготовленныеЗаписиКнигиПродаж(СтруктураПараметров);
	
	Запрос.Выполнить();
	
	УчетНДСПереопределяемый.РегистрационныеСведенияНаДаты(Запрос.МенеджерВременныхТаблиц);
	
	Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		Запрос.Текст = ТекстЗапросаДополнительныйЛистКнигиПродаж(СтруктураПараметров);
	Иначе
		Запрос.Текст = ТекстЗапросаКнигаПродаж(СтруктураПараметров);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить();
	
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Возврат Выборка;
	
КонецФункции

Функция ТекстЗапросаЗаписиРегистраНДСПродажи(СтруктураПараметров)

	ТекстыЗапросов = Новый Массив;

	// Определим документы корректировки.
	ТекстОрганизацияЯвляетсяПокупателем = УчетНДСПереопределяемый.ТекстЗапросаСчетаФактурыВыданныеГдеОрганизацияЯвляетсяПокупателем();

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОрганизацияЯвляетсяПокупателем.СчетФактура,
	|	ТаблицаОрганизацияЯвляетсяПокупателем.Организация,
	|	ТаблицаОрганизацияЯвляетсяПокупателем.ГоловнаяОрганизация,
	|	ТаблицаОрганизацияЯвляетсяПокупателем.ЭтоКорректировкаПоступления
	|
	|ПОМЕСТИТЬ ВТ_ТаблицаОрганизацияЯвляетсяПокупателем
	|ИЗ
	|	(" + ТекстОрганизацияЯвляетсяПокупателем + ") КАК ТаблицаОрганизацияЯвляетсяПокупателем
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ГоловнаяОрганизация
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	// Определим счетам-фактуры, которые являются исправлением в книге покупок.
	ТекстСчетаФактурыИсправленияКнигиПродаж = УчетНДСПереопределяемый.ТекстЗапросаСчетаФактурыИсправленияКнигиПродаж();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСчетаФактурыИсправления.СчетФактура,
	|	ТаблицаСчетаФактурыИсправления.Организация,
	|	ТаблицаСчетаФактурыИсправления.ГоловнаяОрганизация,
	|	ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаПоступления,	
	|	ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаРеализации
	|
	|ПОМЕСТИТЬ ВТ_ТаблицаСчетаФактурыИсправления
	|ИЗ
	|	(" + ТекстСчетаФактурыИсправленияКнигиПродаж + ") КАК ТаблицаСчетаФактурыИсправления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ГоловнаяОрганизация
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|				ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период
	|		КОНЕЦ, КВАРТАЛ) КАК НалоговыйПериод,
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|				ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период
	|		КОНЕЦ, КВАРТАЛ) КАК КонецНалоговогоПериода,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
	|				ИЛИ ЕСТЬNULL(ВТ_ТаблицаОрганизацияЯвляетсяПокупателем.ЭтоКорректировкаПоступления, ЛОЖЬ)
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_НалоговыйАгентПокупатель)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НалоговыйАгентПокупательТоваров,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК КонтрагентПоСчетуФактуре,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ КАК ДатаСобытия,
	|	СУММА(НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС) КАК ВсегоПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС18)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС18,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезНДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС В (&СтавкиНДС10)
	|				ТОГДА НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС10,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаНДС0
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС0,
	|	СУММА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.СтавкаНДС = &СтавкаБезНДС
	|				ТОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСовсемБезНДС,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаСуммовуюРазницу,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				И НЕ ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПродаж.СчетФактура) В (&ТипыДокументовРучныхОперацийНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС_Аванс,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорАванса,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК СчетФактураДата,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|				И (ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаРеализации, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаПоступления, ЛОЖЬ)
	|					ИЛИ НЕ (ВТ_ТаблицаСчетаФактурыИсправления.СчетФактура ЕСТЬ NULL))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации КАК КодВидаОперации
	|ПОМЕСТИТЬ ЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовСчетФактура
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументовСчетФактура.Документ
	|			И НДСЗаписиКнигиПродаж.Организация = ДанныеПервичныхДокументовСчетФактура.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОрганизацияЯвляетсяПокупателем
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = ВТ_ТаблицаОрганизацияЯвляетсяПокупателем.СчетФактура
	|			И НДСЗаписиКнигиПродаж.Организация = ВТ_ТаблицаОрганизацияЯвляетсяПокупателем.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСчетаФактурыИсправления
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = ВТ_ТаблицаСчетаФактурыИсправления.СчетФактура
	|			И НДСЗаписиКнигиПродаж.Организация = ВТ_ТаблицаСчетаФактурыИсправления.Организация
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НДСЗаписиКнигиПродаж.Организация В(&Организация)
	|	И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.Активность
	|	И &ДополнительноеУсловие
	|	И &ОтборПоКонтрагенту
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродаж.Период,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|				ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период
	|		КОНЕЦ, КВАРТАЛ),
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|				ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|			ИНАЧЕ НДСЗаписиКнигиПродаж.Период
	|		КОНЕЦ, КВАРТАЛ),
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДанныеПервичныхДокументовСчетФактура.ДатаРегистратора
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДатаСобытия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СуммоваяРазница)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_Аванс)
	|				И НЕ ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПродаж.СчетФактура) В (&ТипыДокументовРучныхОперацийНДС)
	|			ТОГДА НДСЗаписиКнигиПродаж.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура В (&ПустыеДокументыИсправления)
	|			ТОГДА НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_СобственныеСФ)
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НЕ &ВыводитьПродавцовПоАвансам
	|				ИЛИ НДСЗаписиКнигиПродаж.ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)
	|					И НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
	|				ИЛИ ЕСТЬNULL(ВТ_ТаблицаОрганизацияЯвляетсяПокупателем.ЭтоКорректировкаПоступления, ЛОЖЬ)
	|			ТОГДА НДСЗаписиКнигиПродаж.Организация
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.Покупатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ВидЦенности В (&ВидыЦенностей_НалоговыйАгентПокупатель)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.СуммаБезНДС + НДСЗаписиКнигиПродаж.НДС < 0
	|				И (ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаРеализации, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(ВТ_ТаблицаСчетаФактурыИсправления.ЭтоКорректировкаПоступления, ЛОЖЬ)
	|					ИЛИ НЕ (ВТ_ТаблицаСчетаФактурыИсправления.СчетФактура ЕСТЬ NULL))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НДСЗаписиКнигиПродаж.ДоговорКонтрагента
	|	КОНЕЦ,
	|	НДСЗаписиКнигиПродаж.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)) <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчастникЕАЭС
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ЗаписиКнигиПродаж.Контрагент = Контрагенты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ДополнительноеУсловие", 
		ДополнительноеУсловиеЗапроса(
			СтруктураПараметров,
			СтруктураПараметров.ЗаписьДополнительногоЛиста,
			"НДСЗаписиКнигиПродаж"));
	
	Если НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме 
	   И СтруктураПараметров.ОтбиратьПоКонтрагенту Тогда
	   
		ТекстЗапросаДляОтбора =
		"(НДСЗаписиКнигиПродаж.Покупатель = &КонтрагентДляОтбора
		|			ИЛИ НДСЗаписиКнигиПродаж.Покупатель.ОбособленноеПодразделение
		|				И НДСЗаписиКнигиПродаж.Покупатель.ГоловнойКонтрагент = &КонтрагентДляОтбора)";
		
		Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(СтруктураПараметров.КонтрагентДляОтбора) Тогда
			ТекстЗапросаДляОтбора = СтрЗаменить(ТекстЗапросаДляОтбора,
				" = &КонтрагентДляОтбора", " В ИЕРАРХИИ(&КонтрагентДляОтбора)");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоКонтрагенту", ТекстЗапросаДляОтбора);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоКонтрагенту", "");
	КонецЕсли;
	
	Если СтруктураПараметров.ЗаписьДополнительногоЛиста Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
			"И НЕ НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста",
			"И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста");
		
		Если СтруктураПараметров.ЗаполнениеДокумента И НЕ СтруктураПараметров.ФорматПоПостановлению735
		 ИЛИ СтруктураПараметров.ЗаполнениеДекларации  Тогда
								
			// Учитывается как корректируемый период, так и дата оформления дополнительного листа.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста", 
				"И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста 
				|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоНалоговогоПериода 
				|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецНалоговогоПериода");

		ИначеЕсли СтруктураПараметров.ЗаполнениеДокумента И СтруктураПараметров.ФорматПоПостановлению735
			  ИЛИ СтруктураПараметров.ДополнительныеЛистыЗаТекущийПериод Тогда

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"Период МЕЖДУ &НачалоПериода И &КонецПериода", 
				"Период >= &НачалоПериода");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
				"И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста", 
				"И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
				|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод >= &НачалоПериода 
				|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод <= &КонецПериода");

		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ТекстыЗапросов.Добавить("");
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

Функция ТекстЗапросаПодготовленныеЗаписиКнигиПродаж(СтруктураПараметров)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаписиКнигиПродаж.Организация КАК Организация,
	|	ЗаписиКнигиПродаж.НалоговыйПериод КАК НалоговыйПериод,
	|	ЗаписиКнигиПродаж.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ЗаписиКнигиПродаж.НаАванс КАК НаАванс,
	|	ЗаписиКнигиПродаж.НаСуммовуюРазницу КАК НаСуммовуюРазницу,
	|	ЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.СчетФактураДата, ДЕНЬ) КАК СчетФактураДата,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.СчетФактураДокумент
	|		ИНАЧЕ ЗаписиКнигиПродаж.СчетФактура
	|	КОНЕЦ КАК СчетФактураДокумент,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСчетаФактуры, // Определение номера счета-фактуры перенесено в УчетНДСПереопределяемый.ОпределитьДатуИНомерСчетаФактурыДляПечати()
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактурыСортировка
	|		КОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры ЕСТЬ НЕ NULL 
	|			ТОГДА ТаблицаСчетаФактурыДокументы.НомерСчетаФактуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерСчетаФактурыСортировка,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка ЕСТЬ NULL
	|					ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактурыСортировка
	|				ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			КОНЕЦ, ДЕНЬ), НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактурыСортировка,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры ЕСТЬ NULL
	|				ТОГДА ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|			ИНАЧЕ ТаблицаСчетаФактурыДокументы.ДатаСчетаФактуры
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДатаСчетаФактуры,
	|	ЗаписиКнигиПродаж.СтавкаНДС_Аванс КАК СтавкаНДС_Аванс,
	|	ЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетаФактурыДокументы.СводныйКорректировочный = ИСТИНА
	|				И &ПравилаПостановления981
	|			ТОГДА ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре
	|		ИНАЧЕ ЗаписиКнигиПродаж.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ЭтоРозничнаяПродажа, ЛОЖЬ)
	|					И ЗаписиКнигиПродаж.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РозничнаяПродажа,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Контрагент ССЫЛКА Справочник.Организации
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КППКонтрагента, """")
	|	КОНЕЦ КАК КППКонтрагента,
	|	ЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НалогИсчисляетПокупатель)
	|			ТОГДА 0
	|		КОГДА ЗаписиКнигиПродаж.НалоговыйПериод < ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА ЗаписиКнигиПродаж.ВсегоПродаж
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|					КОГДА ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста
	|						ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|					ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОНЕЦ
	|		ИНАЧЕ ЗаписиКнигиПродаж.ВсегоПродаж
	|	КОНЕЦ КАК ВсегоПродаж,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НалогИсчисляетПокупатель)
	|			ТОГДА ЗаписиКнигиПродаж.СуммаБезНДС18
	|		КОГДА (ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу)
	|				И НЕ ЗаписиКнигиПродаж.НалоговыйАгентПокупательТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС18
	|	КОНЕЦ КАК СуммаБезНДС18,
	|	ЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ВЫБОР
	|		КОГДА (ЗаписиКнигиПродаж.НаАванс
	|				ИЛИ ЗаписиКнигиПродаж.НаСуммовуюРазницу)
	|				И НЕ ЗаписиКнигиПродаж.НалоговыйАгентПокупательТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ЗаписиКнигиПродаж.СуммаБезНДС10
	|	КОНЕЦ КАК СуммаБезНДС10,
	|	ЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	НАЧАЛОПЕРИОДА(ЗаписиКнигиПродаж.Период, ДЕНЬ) КАК ДатаОформления,
	|	ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	ЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправления КАК НомерИсправления,
	|	ТаблицаСчетаФактурыДокументы.ДатаКорректировки КАК ДатаКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерКорректировки КАК НомерКорректировки,
	|	ТаблицаСчетаФактурыДокументы.ДатаИсправленияКорректировки КАК ДатаИсправленияКорректировки,
	|	ТаблицаСчетаФактурыДокументы.НомерИсправленияКорректировки КАК НомерИсправленияКорректировки,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ОбрабатыватьНомерДокумента, ЛОЖЬ) КАК ОбрабатыватьНомерДокумента,
	|	ЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.КодВидаОперации <> """"
	|			ТОГДА ЗаписиКнигиПродаж.КодВидаОперации
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.КодВидаОперации, ""01"")
	|	КОНЕЦ КАК КодВидаОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) <> &ВалютаРегУчета
	|			ТОГДА ТаблицаСчетаФактурыДокументы.ВалютаНаименованиеКраткое
	|		ИНАЧЕ &НаименованиеВалютыРубль
	|	КОНЕЦ КАК ВалютаНаименование,
	|	ВЫБОР
	|		КОГДА ЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НалогИсчисляетПокупатель)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.Валюта, &ВалютаРегУчета) = &ВалютаРегУчета
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаписиКнигиПродаж.ВсегоПродаж < 0
	|					ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, -ЗаписиКнигиПродаж.ВсегоПродаж)
	|				КОГДА ЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста
	|					ТОГДА -ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|				ИНАЧЕ ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.ВсегоПродажВВалюте, ЗаписиКнигиПродаж.ВсегоПродаж)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВсегоПродажВВалюте,
	|	ЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ТаблицаСчетаФактурыДокументы.ПосредникСсылка КАК ПосредникСсылка,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКомиссионный, ЛОЖЬ) КАК СводныйКомиссионный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводныйКорректировочный, ЛОЖЬ) КАК СводныйКорректировочный,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.НачислениеПоОказаниюУслуг, ЛОЖЬ) КАК НачислениеПоОказаниюУслуг,
	|	ЕСТЬNULL(ТаблицаСчетаФактурыДокументы.СводнаяСправка, ЛОЖЬ) КАК СводнаяСправка,
	|	ЗаписиКнигиПродаж.НалоговыйАгентПокупательТоваров КАК НалоговыйАгентПокупательТоваров
	|ПОМЕСТИТЬ ПодготовленныеЗаписиКнигиПродаж
	|ИЗ
	|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаФактурыДокументы КАК ТаблицаСчетаФактурыДокументы
	|		ПО ЗаписиКнигиПродаж.СчетФактура = ТаблицаСчетаФактурыДокументы.СчетФактура
	|			И ЗаписиКнигиПродаж.ДоговорАванса = ТаблицаСчетаФактурыДокументы.ДоговорАванса
	|			И ЗаписиКнигиПродаж.СтавкаНДС_Аванс = ТаблицаСчетаФактурыДокументы.СтавкаНДСАванса
	|			И ЗаписиКнигиПродаж.КонтрагентПоСчетуФактуре = ТаблицаСчетаФактурыДокументы.КонтрагентПоСчетуФактуре
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСчетаФактурыДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаписиКнигиПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.Контрагент КАК Ссылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка КАК ДатаСведений
	|ПОМЕСТИТЬ СсылкиНаДаты
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаКнигаПродаж(СтруктураПараметров)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.Организация,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.НаАванс,
	|	ПодготовленныеЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактурыСортировка КАК НомерСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка КАК ДатаСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПродаж.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СведенияОПокупателях.ИНН, """") КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента = """"
	|			ТОГДА ЕСТЬNULL(СведенияОПокупателях.КПП, """")
	|		ИНАЧЕ ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОПокупателях.Наименование, """")
	|	КОНЕЦ КАК Покупатель,
	|	ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДокументОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.Событие,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.Исправление КАК Исправление,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПродаж.КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПродаж.Валюта,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаНаименование,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродажВВалюте,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ЕСТЬNULL(СведенияОПосредниках.Наименование, """") КАК Посредник,
	|	ЕСТЬNULL(СведенияОПосредниках.ИНН, """") КАК ПосредникИНН,
	|	ЕСТЬNULL(СведенияОПосредниках.КПП, """") КАК ПосредникКПП,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКомиссионный КАК СводныйКомиссионный,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПродаж.НачислениеПоОказаниюУслуг КАК НачислениеПоОказаниюУслуг,
	|	ПодготовленныеЗаписиКнигиПродаж.СводнаяСправка КАК СводнаяСправка,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйАгентПокупательТоваров КАК НалоговыйАгентПокупательТоваров
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПокупателях
	|		ПО ПодготовленныеЗаписиКнигиПродаж.Контрагент = СведенияОПокупателях.Ссылка
	|			И ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка = СведенияОПокупателях.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредниках
	|		ПО ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка = СведенияОПосредниках.Ссылка
	|			И ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка = СведенияОПосредниках.ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактурыСортировка,
	|	ПодготовленныеЗаписиКнигиПродаж.Исправление
	|ИТОГИ
	|	МИНИМУМ(НомерСчетаФактурыСортировка),
	|	МИНИМУМ(ДатаСчетаФактурыСортировка),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|		ИНАЧЕ СУММА(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НачислениеПоОказаниюУслуг),
	|	МАКСИМУМ(СводнаяСправка),
	|	МАКСИМУМ(НалоговыйАгентПокупательТоваров)
	|ПО
	|	ОБЩИЕ,
	|	НалоговыйПериод,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	Исправление";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПО
			|	ОБЩИЕ,",
			"ПО
			|	ОБЩИЕ, Контрагент, ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"УПОРЯДОЧИТЬ ПО",
			"УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДополнительныйЛистКнигиПродаж(СтруктураПараметров)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПодготовленныеЗаписиКнигиПродаж.Организация,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод КАК НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.КонецНалоговогоПериода КАК КонецНалоговогоПериода,
	|	ПодготовленныеЗаписиКнигиПродаж.НаАванс,
	|	ПодготовленныеЗаписиКнигиПродаж.НаСуммовуюРазницу,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата КАК СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДокумент КАК СчетФактураДокумент,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактуры,
	|	ПодготовленныеЗаписиКнигиПродаж.СтавкаНДС_Аванс,
	|	ПодготовленныеЗаписиКнигиПродаж.ДоговорАванса КАК ДоговорАванса,
	|	ПодготовленныеЗаписиКнигиПродаж.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СведенияОПокупателях.ИНН, """") КАК ПокупательИНН,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента = """"
	|			ТОГДА ЕСТЬNULL(СведенияОПокупателях.КПП, """")
	|		ИНАЧЕ ПодготовленныеЗаписиКнигиПродаж.КППКонтрагента
	|	КОНЕЦ КАК ПокупательКПП,
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа
	|			ТОГДА &ТекстРозничнаяПродажа
	|		ИНАЧЕ ЕСТЬNULL(СведенияОПокупателях.Наименование, """")
	|	КОНЕЦ КАК Покупатель,
	|	ПодготовленныеЗаписиКнигиПродаж.РозничнаяПродажа,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДокументОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.Событие,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж КАК ВсегоПродаж,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС18 КАК СуммаБезНДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС18 КАК НДС18,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаБезНДС10 КАК СуммаБезНДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС10 КАК НДС10,
	|	ПодготовленныеЗаписиКнигиПродаж.НДС0 КАК НДС0,
	|	ПодготовленныеЗаписиКнигиПродаж.СуммаСовсемБезНДС КАК СуммаСовсемБезНДС,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОформления КАК ДатаОформления,
	|	ПодготовленныеЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста КАК СторнирующаяЗаписьДопЛиста,
	|	ПодготовленныеЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправления,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерИсправленияКорректировки,
	|	ПодготовленныеЗаписиКнигиПродаж.ОбрабатыватьНомерДокумента,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаСобытия,
	|	ПодготовленныеЗаписиКнигиПродаж.КодВидаОперации,
	|	ПодготовленныеЗаписиКнигиПродаж.Валюта,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаНаименование,
	|	ПодготовленныеЗаписиКнигиПродаж.ВалютаКод,
	|	ПодготовленныеЗаписиКнигиПродаж.ВсегоПродажВВалюте,
	|	ПодготовленныеЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка,
	|	ЕСТЬNULL(СведенияОПосредниках.Наименование, """") КАК Посредник,
	|	ЕСТЬNULL(СведенияОПосредниках.ИНН, """") КАК ПосредникИНН,
	|	ЕСТЬNULL(СведенияОПосредниках.КПП, """") КАК ПосредникКПП,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКомиссионный КАК СводныйКомиссионный,
	|	ПодготовленныеЗаписиКнигиПродаж.СводныйКорректировочный КАК СводныйКорректировочный,
	|	ПодготовленныеЗаписиКнигиПродаж.НачислениеПоОказаниюУслуг КАК НачислениеПоОказаниюУслуг,
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйАгентПокупательТоваров КАК НалоговыйАгентПокупательТоваров
	|ИЗ
	|	ПодготовленныеЗаписиКнигиПродаж КАК ПодготовленныеЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПокупателях
	|		ПО ПодготовленныеЗаписиКнигиПродаж.Контрагент = СведенияОПокупателях.Ссылка
	|			И ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка = СведенияОПокупателях.ДатаСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОСсылкахНаДаты КАК СведенияОПосредниках
	|		ПО ПодготовленныеЗаписиКнигиПродаж.ПосредникСсылка = СведенияОПосредниках.Ссылка
	|			И ПодготовленныеЗаписиКнигиПродаж.ДатаСчетаФактурыСортировка = СведенияОПосредниках.ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОформления,
	|	ПодготовленныеЗаписиКнигиПродаж.СчетФактураДата,
	|	ПодготовленныеЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста УБЫВ,
	|	ПодготовленныеЗаписиКнигиПродаж.ДатаОплаты
	|ИТОГИ
	|	МАКСИМУМ(КонецНалоговогоПериода),
	|	МИНИМУМ(СчетФактураДата),
	|	МАКСИМУМ(Покупатель),
	|	МАКСИМУМ(ДатаОплаты),
	|	ВЫБОР
	|		КОГДА ПодготовленныеЗаписиКнигиПродаж.НалоговыйПериод >= ДАТАВРЕМЯ(2014, 10, 1)
	|			ТОГДА МАКСИМУМ(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|		ИНАЧЕ СУММА(ПодготовленныеЗаписиКнигиПродаж.ВсегоПродаж)
	|	КОНЕЦ КАК ВсегоПродаж,
	|	СУММА(СуммаБезНДС18),
	|	СУММА(НДС18),
	|	СУММА(СуммаБезНДС10),
	|	СУММА(НДС10),
	|	СУММА(НДС0),
	|	СУММА(СуммаСовсемБезНДС),
	|	МАКСИМУМ(НомерДокументаОплаты),
	|	МАКСИМУМ(ДатаДокументаОплаты),
	|	МАКСИМУМ(СводныйКомиссионный),
	|	МАКСИМУМ(СводныйКорректировочный),
	|	МАКСИМУМ(НачислениеПоОказаниюУслуг),
	|	МАКСИМУМ(НалоговыйАгентПокупательТоваров)
	|ПО
	|	НалоговыйПериод,
	|	ДатаОформления,
	|	СчетФактураДокумент,
	|	ДоговорАванса,
	|	СторнирующаяЗаписьДопЛиста";
	
	Если СтруктураПараметров.ГруппироватьПоКонтрагентам И НЕ СтруктураПараметров.СформироватьОтчетПоСтандартнойФорме Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПО
			|	НалоговыйПериод,
			|	ДатаОформления,",
			"ПО
			|	НалоговыйПериод,
			|	ДатаОформления, Контрагент, ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"УПОРЯДОЧИТЬ ПО",
			"УПОРЯДОЧИТЬ ПО Покупатель, ");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьДополнительнуюИнформациюПоСчетуФактуре(СтруктураПараметров)
	
	ДополнительнаяИнформация = Новый ТаблицаЗначений;
	ДополнительнаяИнформация.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ДополнительнаяИнформация.Колонки.Добавить("ТНВЭД",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДополнительнаяИнформация.Индексы.Добавить("Ссылка");
	
	Если СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.Свойство("ВыводитьТолькоНекорректныхКонтрагентов")
		И СтруктураПараметров.ДанныеДляПроверкиКонтрагентов.ВыводитьТолькоНекорректныхКонтрагентов Тогда
		Возврат ДополнительнаяИнформация;
	КонецЕсли;
	
	// Дополнение по ТН ВЭД. Получим ТН ВЭД из документам по реализациям под 0%.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	Запрос.Текст = УчетНДСПереопределяемый.ТекстЗапросаИнформацияПоТНВЭД();
	СтрокаСФ     = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока СтрокаСФ.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСФ.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДопИнформации = ДополнительнаяИнформация.Найти(СтрокаСФ.СчетФактура, "Ссылка");
		Если СтрокаДопИнформации = Неопределено Тогда
			СтрокаДопИнформации        = ДополнительнаяИнформация.Добавить();
			СтрокаДопИнформации.Ссылка = СтрокаСФ.СчетФактура;
		КонецЕсли;
		
		СтрокаДетальныеЗаписи = СтрокаСФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока СтрокаДетальныеЗаписи.Следующий() Цикл 
			Если ЗначениеЗаполнено(СтрокаДетальныеЗаписи.КодТНВЭД)
				И Найти(СтрокаДопИнформации.ТНВЭД, СокрЛП(СтрокаДетальныеЗаписи.КодТНВЭД)) = 0 Тогда // Исключаем дубли ТНВЭД
				СтрокаДопИнформации.ТНВЭД = СтрокаДопИнформации.ТНВЭД 
				+ ?(ПустаяСтрока(СтрокаДопИнформации.ТНВЭД ), "", ";") + СокрЛП(СтрокаДетальныеЗаписи.КодТНВЭД);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

Функция ПроверитьНаличиеДопЛистовКнигиПродаж(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ТекущийПериод", Ложь);
	СтруктураПараметров.Вставить("КорректируемыйПериод", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК Порядок,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДопЛисты,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Организация В (&Организация)
	|				И &ДополнительноеУсловие
	|				И ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот), 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	&НачалоПериода,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			,
	|			День,
	|			Организация В (&Организация)
	|				И &ДополнительноеУсловие
	|				И ЗаписьДополнительногоЛиста
	|				И КорректируемыйПериод >= &НачалоПериода
	|				И КорректируемыйПериод <= &КонецПериода) КАК НДСЗаписиКнигиПродажОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСЗаписиКнигиПродажОбороты.СчетФактура,
	|	НДСЗаписиКнигиПродажОбороты.Покупатель,
	|	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	|	НДСЗаписиКнигиПродажОбороты.ИсправленныйСчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(СтруктураПараметров.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   СтруктураПараметров.СписокОрганизаций);
	
	ДатаПроверкиПараметровУчета = КонецДня(СтруктураПараметров.КонецПериода);
	ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаПроверкиПараметровУчета);
	
	СтруктураПараметров.Вставить("ПрименяетсяОсвобождениеОтУплатыНДС", 
		УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	СтруктураПараметров.Вставить("ПлательщикНДС",
		УчетнаяПолитика.ПлательщикНДС(СтруктураПараметров.Организация, ДатаПроверкиПараметровУчета));
	
	МассивСтавокНДС = Перечисления.СтавкиНДС.СтавкиПоОперациямОтражаемымВКнигеПродаж(ВерсияПостановленияНДС1137);
	
	Запрос.УстановитьПараметр("МассивСтавокНДС", МассивСтавокНДС);
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгент",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгент());
		
	Запрос.УстановитьПараметр("ВидыЦенностей_НалоговыйАгентПокупатель",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиНалоговыйАгентРеализацияТоваров());
		
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, 
		"&ДополнительноеУсловие", 
		ДополнительноеУсловиеЗапроса(СтруктураПараметров));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Результат = Результат.Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.Порядок = 1 И СтрокаРезультата.ЕстьДопЛисты Тогда 
			СтруктураПараметров.КорректируемыйПериод = Истина;
		ИначеЕсли СтрокаРезультата.ЕстьДопЛисты Тогда
			СтруктураПараметров.ТекущийПериод = Истина;
		КонецЕсли;
		Если СтруктураПараметров.КорректируемыйПериод И СтруктураПараметров.ТекущийПериод Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
