#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	НастройкиОтчета = ЭтаФорма.НастройкиОтчета;
	
	Схема = ПолучитьИзВременногоХранилища(ЭтаФорма.НастройкиОтчета.АдресСхемы);
	Поля = Схема.НаборыДанных.КонтрольОформленияДокументов.Поля;
	ПолеСклад = Поля.Найти("Склад");
	Если ПолеСклад <> Неопределено Тогда
		ПараметрыРедактирования = ПолеСклад.ПараметрыРедактирования.Элементы;
	КонецЕсли;
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	Если КлючСхемы <> "ОграничениеВыбораОрдерныхСкладов" Тогда
		КлючСхемы = "ОграничениеВыбораОрдерныхСкладов";
		
		ПолеНабораДанныхСклад = СхемаКомпоновкиДанных.НаборыДанных.КонтрольОформленияДокументов.Поля.Найти("Склад");
		Если ТипЗнч(ПолеНабораДанныхСклад) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(ПолеНабораДанныхСклад, "Ссылка", ОрдерныеСклады());
		КонецЕсли;
	КонецЕсли;
	
	// Локализация списка значений
	ДоступныеЗначения = ДоступныеЗначенияПоляВидОперации();
	
	ВидОперации = СхемаКомпоновкиДанных.НаборыДанных.КонтрольОформленияДокументов.Поля.Найти("ВидОперации");
	ВидОперации.УстановитьДоступныеЗначения(ДоступныеЗначения);
	
	ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	СхемаКомпоновкиДанных.НаборыДанных.КонтрольОформленияДокументов.Запрос = ТекстЗапросаКонтрольОформленияДокументовТовародвижений();
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	// Удалим отборы по пустым полям из запроса по излишкам / недостачам
	ИсходныйЗапросМакета = МакетКомпоновки.НаборыДанных.КонтрольОформленияДокументов.Запрос;
	МакетКомпоновки.НаборыДанных.КонтрольОформленияДокументов.Запрос = 
		ТекстЗапросаОформлениеИзлишковНедостачБезОтоборов(ИсходныйЗапросМакета);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	ПараметрПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодГраница", Новый Граница(КонецДня(ПараметрПериода.Значение), ВидГраницы.Включая));
	
	ВидыОперацийИСинонимы = ВидыОперацийИСинонимы();
	
	// Строковые литералы
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары", НСтр("ru='Завершите оформление расходных ордеров на товары'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеВозвратТоваровОтКлиента", НСтр("ru='Оформите возврат товаров от клиента'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПриходныеОрдераНаТовары", НСтр("ru='Оформите приходные ордера на товары'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПриобретениеТоваровИУслуг", НСтр("ru='Оформите приобретение товаров и услуг'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПоступлениеТоваров", НСтр("ru='Оформите поступление товаров'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПеремещениеТоваровВСтатусеПринято", НСтр("ru='Оформите перемещение товаров в статусе ""Принято""'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеДокументСборкиВСтатусеСобраноРазобрано", НСтр("ru='Оформите документ сборки в статусе ""Собрано (разобрано)""'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеДокументРазборкиВСтатусеСобраноРазобрано", НСтр("ru='Оформите документ разборки в статусе ""Собрано (разобрано)""'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПрочееОприходованиеТоваров", НСтр("ru='Оформите прочее оприходование товаров'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияИзлишков", НСтр("ru='Оформите складские акты для отражения излишков'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияНедостач", НСтр("ru='Оформите складские акты для отражения недостач'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПередачуМатериаловВПроизводствоВСтатусеПринято", НСтр("ru='Оформите передачу материалов в производство в статусе ""Принято""'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеВозвратМатериаловИзПроизводства", НСтр("ru='Оформите возврат материалов из производства'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеВыпускПродукции", НСтр("ru='Оформите выпуск продукции'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеВозвратСырьяОтПереработчика", НСтр("ru='Оформите возврат сырья от переработчика'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПоступлениеОтПереработчика", НСтр("ru='Оформите поступление от переработчика'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПоступлениеСырьяОтДавальца", НСтр("ru='Оформите поступление сырья от давальца'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПоступлениеСырьяОтДавальца", НСтр("ru='Оформите поступление сырья от давальца'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеРасходныеОрдераНаТовары", НСтр("ru='Оформите расходные ордера на товары'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеОтгрузкиТоваровСХранения", НСтр("ru='Оформите отгрузки товаров с хранения'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаРекомендацияОформитеПриемкиТоваровНаХранение", НСтр("ru='Оформите приемки товаров на хранения'"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаТипОтклоненияОформлениеФинансовыхДокументов", НСтр("ru='Оформление финансовых документов'"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаТипОтклоненияОформлениеСкладскихДокументов", НСтр("ru='Оформление складских документов'"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииОтгрузкаКлиентам", ВидыОперацийИСинонимы["ОтгрузкаКлиентам"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВозвратыТоваровОтКлиентов", ВидыОперацийИСинонимы["ВозвратыТоваровОтКлиентов"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПриемкаОтПоставщиков", ВидыОперацийИСинонимы["ПриемкаОтПоставщиков"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВозвратыТоваровПоставщикам", ВидыОперацийИСинонимы["ВозвратыТоваровПоставщикам"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВнутреннееПотреблениеТоваров", ВидыОперацийИСинонимы["ВнутреннееПотреблениеТоваров"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПеремещениеТоваров", ВидыОперацийИСинонимы["ПеремещениеТоваров"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииСборкаРазборкаТоваров", ВидыОперацийИСинонимы["СборкаРазборкаТоваров"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПрочееОприходованиеТоваров", ВидыОперацийИСинонимы["ПрочееОприходованиеТоваров"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПередачаМатериаловВПроизводство", ВидыОперацийИСинонимы["ПередачаМатериаловВПроизводство"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВозвратыМатериаловИзПроизводства", ВидыОперацийИСинонимы["ВозвратыМатериаловИзПроизводства"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПриемкаГотовойПродукции", ВидыОперацийИСинонимы["ПриемкаГотовойПродукции"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПереработкаСырьяДавальца", ВидыОперацийИСинонимы["ПереработкаСырьяДавальца"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВозвратыСырьяДавальцам", ВидыОперацийИСинонимы["ВозвратыСырьяДавальцам"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПередачиПродукцииДавальцам", ВидыОперацийИСинонимы["ПередачиПродукцииДавальцам"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПереработкаСырьяУПереработчика", ВидыОперацийИСинонимы["ПереработкаСырьяУПереработчика"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииВозвратыСырьяОтПереработчиков", ВидыОперацийИСинонимы["ВозвратыСырьяОтПереработчиков"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПоступленияПродукцииОтПереработчиков", ВидыОперацийИСинонимы["ПоступленияПродукцииОтПереработчиков"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииОформлениеИзлишковИНедостач", ВидыОперацийИСинонимы["ОформлениеИзлишковИНедостач"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииОтгрузкаПринятыхТоваровСХранения", ВидыОперацийИСинонимы["ОтгрузкаПринятыхТоваровСХранения"]);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаВидОперацииПриемкаТоваровНаХранение", ВидыОперацийИСинонимы["ПриемкаТоваровНаХранение"]);
	
	// Адаптируем локализацию для отборов
	Поля = СхемаКомпоновкиДанных.НаборыДанных.КонтрольОформленияДокументов.Поля;
	
	ПолеРекомендация = Поля.Найти("Рекомендация");
	ЛокализоватьДоступныеЗначенияПоля(ПолеРекомендация);
	
	ПолеТипОтклонения = Поля.Найти("ТипОтклонения");
	ЛокализоватьДоступныеЗначенияПоля(ПолеТипОтклонения);
	
	ПолеВидОперации = Поля.Найти("ВидОперации");
	ЛокализоватьДоступныеЗначенияПоля(ПолеВидОперации);
КонецПроцедуры

Процедура ЛокализоватьДоступныеЗначенияПоля(Поле)
	ДоступныеЗначения = Поле.ПолучитьДоступныеЗначения();
	
	Для Каждого ДоступноеЗначение Из ДоступныеЗначения Цикл
		
		ПараметрПоИмениДоступногоЗначения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ДоступноеЗначение.Значение);
		
		Если Не ПараметрПоИмениДоступногоЗначения = Неопределено Тогда
			
			ДоступноеЗначение.Значение = ПараметрПоИмениДоступногоЗначения.Значение;
			ДоступноеЗначение.Представление = ПараметрПоИмениДоступногоЗначения.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Поле.УстановитьДоступныеЗначения(ДоступныеЗначения);
КонецПроцедуры

Функция ТекстЗапросаПродажи()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииОтгрузкаКлиентам КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	0 КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (ТИП(Документ.ЗаказКлиента), 
	|			ТИП(Документ.РеализацияТоваровУслуг), 
	|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)) 
	|		{(ДокументОтгрузки).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|{ГДЕ
	|	(&СтрокаВидОперацииОтгрузкаКлиентам) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВозвратыТоваровОтКлиентов()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииВозвратыТоваровОтКлиентов КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|		ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|	КОНЕЦ КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаРекомендацияОформитеВозвратТоваровОтКлиента
	|		ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	ТоварыКОформлениюПоступления.Склад КАК Склад,
	|	ТоварыКОформлениюПоступления.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика КАК Характеристика,
	|	ТоварыКОформлениюПоступления.Серия КАК Серия,
	|	ТоварыКОформлениюПоступления.Назначение КАК Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументПоступления) В (ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), 
	|			ТИП(Документ.ВозвратТоваровОтКлиента)) 
	|		{(ДокументПоступления).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОформлениюПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОформлениюПоступления.ДокументПоступления = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|{ГДЕ
	|	(&СтрокаВидОперацииВозвратыТоваровОтКлиентов) КАК ВидОперации,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|			ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|		КОНЕЦ) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаРекомендацияОформитеВозвратТоваровОтКлиента
	|			ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА 0
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаЗакупки()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииПриемкаОтПоставщиков КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|		ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|	КОНЕЦ КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА ТоварыКОформлениюПоступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|						ТОГДА &СтрокаРекомендацияОформитеПриобретениеТоваровИУслуг
	|					ИНАЧЕ &СтрокаРекомендацияОформитеПоступлениеТоваров
	|				КОНЕЦ
	|		ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	ТоварыКОформлениюПоступления.Склад КАК Склад,
	|	ТоварыКОформлениюПоступления.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика КАК Характеристика,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|		&ПериодГраница, 
	|		ДокументПоступления В (
	|			ВЫБРАТЬ
	|				РаспоряженияНаПоступление.Ссылка
	|			ИЗ
	|				РаспоряженияНаПоступлениеПоЗакупке КАК РаспоряженияНаПоступление)
	|		{(ДокументПоступления).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОформлениюПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОформлениюПоступления.ДокументПоступления = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|{ГДЕ
	|	(&СтрокаВидОперацииПриемкаОтПоставщиков) КАК ВидОперации,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|			ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|		КОНЕЦ) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ТоварыКОформлениюПоступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|							ТОГДА &СтрокаРекомендацияОформитеПриобретениеТоваровИУслуг
	|						ИНАЧЕ &СтрокаРекомендацияОформитеПоступлениеТоваров
	|					КОНЕЦ
	|			ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА 0
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВременныхТаблицЗакупки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументПоступления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РаспоряженияНаПоступлениеПоЗакупке
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК ДокументПоступления
	|ГДЕ
	|	НЕ ДокументПоступления.ПометкаУдаления
	|	И ДокументПоступления.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступления.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументПоступления
	|ГДЕ
	|	НЕ ДокументПоступления.ПометкаУдаления
	|	И ДокументПоступления.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПоступления.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПоступления
	|ГДЕ
	|	НЕ ДокументПоступления.ПометкаУдаления
	|	И ДокументПоступления.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратыТоваровПоставщикам()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииВозвратыТоваровПоставщикам КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	0 КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (ТИП(Документ.ВозвратТоваровПоставщику)) 
	|		{(ДокументОтгрузки).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|{ГДЕ
	|	(&СтрокаВидОперацииВозвратыТоваровПоставщикам) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВнутреннееПотребление()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииВнутреннееПотреблениеТоваров КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	0 КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (ТИП(Документ.ЗаказНаВнутреннееПотребление), 
	|			ТИП(Документ.ВнутреннееПотреблениеТоваров)
	|		) 
	|		{(ДокументОтгрузки).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|{ГДЕ
	|	(&СтрокаВидОперацииВнутреннееПотреблениеТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПеремещениеТоваров()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииПеремещениеТоваров КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	0 КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (ТИП(Документ.ЗаказНаПеремещение), 
	|			ТИП(Документ.ПеремещениеТоваров)) 
	|		{(ДокументОтгрузки).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|{ГДЕ
	|	(&СтрокаВидОперацииПеремещениеТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтрокаВидОперацииПеремещениеТоваров,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|		ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаРекомендацияОформитеПеремещениеТоваровВСтатусеПринято
	|		ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)),
	|	ТоварыКОформлениюПоступления.ДокументПоступления,
	|	ТоварыКОформлениюПоступления.Склад,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументПоступления) В (ТИП(Документ.ЗаказНаПеремещение), 
	|			ТИП(Документ.ПеремещениеТоваров)) 
	|		{(ДокументПоступления).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОформлениюПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОформлениюПоступления.ДокументПоступления = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|{ГДЕ
	|	(&СтрокаВидОперацииПеремещениеТоваров) КАК ВидОперации,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|			ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|		КОНЕЦ) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаРекомендацияОформитеПеремещениеТоваровВСтатусеПринято
	|			ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА 0
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НезавершеннаяФинансоваяОперация}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтрокаВидОперацииПеремещениеТоваров,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов,
	|	&СтрокаРекомендацияОформитеПеремещениеТоваровВСтатусеПринято,
	|	ПеремещениеТоваров.Количество,
	|	ПеремещениеТоваров.Количество,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка.ЗаказНаПеремещение.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Ссылка.ЗаказНаПеремещение.Дата
	|		ИНАЧЕ ПеремещениеТоваров.Ссылка.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ПеремещениеТоваров.Ссылка.ЗаказНаПеремещение.Ссылка ЕСТЬ NULL 
	|			ТОГДА ПеремещениеТоваров.Ссылка.ЗаказНаПеремещение
	|		ИНАЧЕ ПеремещениеТоваров.Ссылка
	|	КОНЕЦ,
	|	ПеремещениеТоваров.Ссылка.СкладПолучатель,
	|	ПеремещениеТоваров.Номенклатура,
	|	ПеремещениеТоваров.Характеристика,
	|	ПеремещениеТоваров.Серия,
	|	ПеремещениеТоваров.Назначение
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка.Проведен
	|	И ПеремещениеТоваров.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|	И ПеремещениеТоваров.Ссылка.Дата <= &Период
	|{ГДЕ
	|	(&СтрокаВидОперацииПеремещениеТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(&СтрокаРекомендацияОформитеПеремещениеТоваровВСтатусеПринято) КАК Рекомендация,
	|	ПеремещениеТоваров.Количество КАК НезавершеннаяСкладскаяОперация,
	|	ПеремещениеТоваров.Количество КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаСборкаРазборка()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииСборкаРазборкаТоваров КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеСкладскихДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|			ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	0 КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (ТИП(Документ.ЗаказНаСборку), 
	|			ТИП(Документ.СборкаТоваров)) 
	|		{(ДокументОтгрузки).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|ГДЕ
	|	ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|{ГДЕ
	|	(&СтрокаВидОперацииСборкаРазборкаТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеСкладскихДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА &СтрокаРекомендацияЗавершитеОформлениеРасходныхОрдеровНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.КОформлениюОстаток <> 0
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузкеОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтрокаВидОперацииСборкаРазборкаТоваров,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|		ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(РеквизитыРаспоряжения.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|						ТОГДА &СтрокаРекомендацияОформитеДокументРазборкиВСтатусеСобраноРазобрано
	|					КОГДА ЕСТЬNULL(РеквизитыРаспоряжения.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|						ТОГДА &СтрокаРекомендацияОформитеДокументСборкиВСтатусеСобраноРазобрано
	|				КОНЕЦ
	|		ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)),
	|	ТоварыКОформлениюПоступления.ДокументПоступления,
	|	ТоварыКОформлениюПоступления.Склад,
	|	ТоварыКОформлениюПоступления.Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументПоступления) В (ТИП(Документ.ЗаказНаСборку), 
	|			ТИП(Документ.СборкаТоваров)) 
	|		{(ДокументПоступления).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОформлениюПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОформлениюПоступления.ДокументПоступления = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|{ГДЕ
	|	(&СтрокаВидОперацииСборкаРазборкаТоваров) КАК ВидОперации,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|			ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|		КОНЕЦ) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(РеквизитыРаспоряжения.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|							ТОГДА &СтрокаРекомендацияОформитеДокументРазборкиВСтатусеСобраноРазобрано
	|						КОГДА ЕСТЬNULL(РеквизитыРаспоряжения.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|							ТОГДА &СтрокаРекомендацияОформитеДокументСборкиВСтатусеСобраноРазобрано
	|					КОНЕЦ
	|			ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА 0
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НезавершеннаяФинансоваяОперация}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтрокаВидОперацииСборкаРазборкаТоваров,
	|	&СтрокаТипОтклоненияОформлениеФинансовыхДокументов,
	|	&СтрокаРекомендацияОформитеДокументРазборкиВСтатусеСобраноРазобрано,
	|	0,
	|	СборкаРазборкаТоваров.Количество,
	|	ВЫБОР
	|		КОГДА НЕ СборкаРазборкаТоваров.Ссылка.ЗаказНаСборку.Ссылка ЕСТЬ NULL 
	|			ТОГДА СборкаРазборкаТоваров.Ссылка.ЗаказНаСборку.Дата
	|		ИНАЧЕ СборкаРазборкаТоваров.Ссылка.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СборкаРазборкаТоваров.Ссылка.ЗаказНаСборку.Ссылка ЕСТЬ NULL 
	|			ТОГДА СборкаРазборкаТоваров.Ссылка.ЗаказНаСборку
	|		ИНАЧЕ СборкаРазборкаТоваров.Ссылка
	|	КОНЕЦ,
	|	СборкаРазборкаТоваров.Ссылка.Склад,
	|	СборкаРазборкаТоваров.Номенклатура,
	|	СборкаРазборкаТоваров.Характеристика,
	|	СборкаРазборкаТоваров.Серия,
	|	СборкаРазборкаТоваров.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаРазборкаТоваров
	|ГДЕ
	|	СборкаРазборкаТоваров.Ссылка.Проведен
	|	И СборкаРазборкаТоваров.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|	И СборкаРазборкаТоваров.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.СобраноРазобрано)
	|	И СборкаРазборкаТоваров.Ссылка.Дата <= &Период
	|{ГДЕ
	|	(&СтрокаВидОперацииСборкаРазборкаТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеФинансовыхДокументов) КАК ТипОтклонения,
	|	(&СтрокаРекомендацияОформитеДокументРазборкиВСтатусеСобраноРазобрано) КАК Рекомендация,
	|	СборкаРазборкаТоваров.Количество КАК НезавершеннаяСкладскаяОперация,
	|	СборкаРазборкаТоваров.Количество КАК НезавершеннаяФинансоваяОперация}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&СтрокаВидОперацииСборкаРазборкаТоваров,
	|	&СтрокаТипОтклоненияОформлениеФинансовыхДокументов,
	|	&СтрокаРекомендацияОформитеДокументСборкиВСтатусеСобраноРазобрано,
	|	0,
	|	СборкаРазборкаТоваров.Количество,
	|	ВЫБОР
	|		КОГДА НЕ СборкаРазборкаТоваров.ЗаказНаСборку.Ссылка ЕСТЬ NULL 
	|			ТОГДА СборкаРазборкаТоваров.ЗаказНаСборку.Дата
	|		ИНАЧЕ СборкаРазборкаТоваров.Ссылка.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ СборкаРазборкаТоваров.ЗаказНаСборку.Ссылка ЕСТЬ NULL 
	|			ТОГДА СборкаРазборкаТоваров.ЗаказНаСборку
	|		ИНАЧЕ СборкаРазборкаТоваров.Ссылка
	|	КОНЕЦ,
	|	СборкаРазборкаТоваров.Склад,
	|	СборкаРазборкаТоваров.Номенклатура,
	|	СборкаРазборкаТоваров.Характеристика,
	|	СборкаРазборкаТоваров.Серия,
	|	СборкаРазборкаТоваров.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаРазборкаТоваров
	|ГДЕ
	|	СборкаРазборкаТоваров.Проведен
	|	И СборкаРазборкаТоваров.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|	И СборкаРазборкаТоваров.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.СобраноРазобрано)
	|	И СборкаРазборкаТоваров.Дата <= &Период
	|{ГДЕ
	|	(&СтрокаВидОперацииСборкаРазборкаТоваров) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеФинансовыхДокументов) КАК ТипОтклонения,
	|	(&СтрокаРекомендацияОформитеДокументСборкиВСтатусеСобраноРазобрано) КАК Рекомендация,
	|	СборкаРазборкаТоваров.Количество КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаПрочиеОприходования()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииСборкаРазборкаТоваров КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|		ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|	КОНЕЦ КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА &СтрокаРекомендацияОформитеПрочееОприходованиеТоваров
	|		ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|	КОНЕЦ КАК Рекомендация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|	КОНЕЦ КАК НезавершеннаяСкладскаяОперация,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|			ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НезавершеннаяФинансоваяОперация,
	|	ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1,1,1)) КАК ДатаОперации,
	|	ТоварыКОформлениюПоступления.ДокументПоступления КАК Распоряжение,
	|	ТоварыКОформлениюПоступления.Склад КАК Склад,
	|	ТоварыКОформлениюПоступления.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлениюПоступления.Характеристика КАК Характеристика,
	|	ТоварыКОформлениюПоступления.Серия,
	|	ТоварыКОформлениюПоступления.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|		&ПериодГраница, 
	|		ТИПЗНАЧЕНИЯ(ДокументПоступления) В (ТИП(Документ.ПрочееОприходованиеТоваров)) 
	|		{(ДокументПоступления).* КАК Распоряжение, (Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК ТоварыКОформлениюПоступления
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО ТоварыКОформлениюПоступления.ДокументПоступления = РеквизитыРаспоряжения.Ссылка
	|			И НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись
	|{ГДЕ
	|	(&СтрокаВидОперацииСборкаРазборкаТоваров) КАК ВидОперации,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаТипОтклоненияОформлениеФинансовыхДокументов
	|			ИНАЧЕ &СтрокаТипОтклоненияОформлениеСкладскихДокументов
	|		КОНЕЦ) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА &СтрокаРекомендацияОформитеПрочееОприходованиеТоваров
	|			ИНАЧЕ &СтрокаРекомендацияОформитеПриходныеОрдераНаТовары
	|		КОНЕЦ) КАК Рекомендация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА 0
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|		КОНЕЦ) КАК НезавершеннаяСкладскаяОперация,
	|	(ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток > 0
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерамОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаОформлениеИзлишковНедостач()
	// Строковые литералы локализуются в настройках СКД отчета
	// Наборы данных - Поля - Доступные значения
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&СтрокаВидОперацииОформлениеИзлишковИНедостач КАК ВидОперации,
	|	&СтрокаТипОтклоненияОформлениеФинансовыхДокументов КАК ТипОтклонения,
	|	ВЫБОР
	|		КОГДА НедоофомленныеИзлишкиИНедостачи.КОформлениюАктовОстаток > 0
	|			ТОГДА &СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияИзлишков
	|		ИНАЧЕ &СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияНедостач
	|	КОНЕЦ КАК Рекомендация,
	|	0 КАК НезавершеннаяСкладскаяОперация,
	|	НедоофомленныеИзлишкиИНедостачи.КОформлениюАктовОстаток КАК НезавершеннаяФинансоваяОперация,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОперации,
	|	Неопределено КАК Распоряжение,
	|	НедоофомленныеИзлишкиИНедостачи.Склад КАК Склад,
	|	НедоофомленныеИзлишкиИНедостачи.Номенклатура КАК Номенклатура,
	|	НедоофомленныеИзлишкиИНедостачи.Характеристика КАК Характеристика,
	|	НедоофомленныеИзлишкиИНедостачи.Серия,
	|	НедоофомленныеИзлишкиИНедостачи.Назначение
	|{ВЫБРАТЬ
	|	Склад.*,
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Серия.*,
	|	Назначение.*}
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
	|		&ПериодГраница, 
	|		{(Склад).*, (Номенклатура).*, (Характеристика).*, (Серия).*, (Назначение).*}
	|	) КАК НедоофомленныеИзлишкиИНедостачи
	|{ГДЕ
	|	(&СтрокаВидОперацииОформлениеИзлишковИНедостач) КАК ВидОперации,
	|	(&СтрокаТипОтклоненияОформлениеФинансовыхДокументов) КАК ТипОтклонения,
	|	(ВЫБОР
	|			КОГДА НедоофомленныеИзлишкиИНедостачи.КОформлениюАктовОстаток > 0
	|				ТОГДА &СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияИзлишков
	|			ИНАЧЕ &СтрокаРекомендацияОформитеСкладскиеАктыДляОтраженияНедостач
	|		КОНЕЦ) КАК Рекомендация,
	|	НедоофомленныеИзлишкиИНедостачи.КОформлениюАктовОстаток КАК НезавершеннаяФинансоваяОперация}";
	
	Возврат ТекстЗапроса;
КонецФункции



Функция ТекстЗапросаКонтрольОформленияДокументовТовародвижений()
	КоличествоПодключенныхЗапросов = 0;
	ТекстЗапроса = "";
	
	Доступные = ДоступныеВидыОперацийИЗапросы();
	ТекстыЗапроса = Новый Структура; 
	Для Каждого Доступный Из Доступные Цикл 
		ТекстыЗапроса.Вставить(Доступный.ИмяТекстаЗапроса, Истина);
	КонецЦикла;
	
	// Проверим права чтения документов
	ПравоЧтениеЗаказКлиента						= ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента);
	ПравоЧтениеРеализацияТоваровУслуг			= ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг);
	ПравоЧтениеЗаявкаНаВозвратТоваровОтКлиента	= ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ПравоЧтениеВозвратТоваровОтКлиента			= ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента);
	
	ПравоЧтениеЗаказПоставщику					= ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику);
	ПравоЧтениеПриобретениеТоваровУслуг			= ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	ПравоЧтениеСоглашенияСПоставщиками			= ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСПоставщиками);
	ПравоЧтениеВозвратТоваровПоставщику			= ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	ПравоЧтениеЗаказНаВнутреннееПотребление		= ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоЧтениеВнутреннееПотреблениеТоваров		= ПравоДоступа("Чтение", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	
	ПравоЧтениеЗаказНаПеремещение				= ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПеремещение);
	ПравоЧтениеПеремещениеТоваров				= ПравоДоступа("Чтение", Метаданные.Документы.ПеремещениеТоваров);
	
	ПравоЧтениеЗаказНаСборку					= ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаСборку);
	ПравоЧтениеСборкаТоваров					= ПравоДоступа("Чтение", Метаданные.Документы.СборкаТоваров);
	
	ПравоЧтениеПрочееОприходованиеТоваров		= ПравоДоступа("Чтение", Метаданные.Документы.ПрочееОприходованиеТоваров);
	
	
	// Проверим права чтения регистров
	ПравоЧтениеТоварыКОтгрузке					= ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОтгрузке);
	ПравоЧтениеТоварыКОформлениюПоступления		= ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	ПравоЧтениеТоварыКОформлениюИзлишковНедостач= ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач);
	
	// Продажи
	Если ПравоЧтениеТоварыКОтгрузке
		И ПравоЧтениеЗаказКлиента
		И ПравоЧтениеРеализацияТоваровУслуг 
		И ПравоЧтениеЗаявкаНаВозвратТоваровОтКлиента
		И ТекстыЗапроса.Свойство("ТекстЗапросаПродажи") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаПродажи(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	Если ПравоЧтениеТоварыКОформлениюПоступления
		И ПравоЧтениеЗаявкаНаВозвратТоваровОтКлиента
		И ПравоЧтениеВозвратТоваровОтКлиента
		И ТекстыЗапроса.Свойство("ТекстЗапросаВозвратыТоваровОтКлиентов") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаВозвратыТоваровОтКлиентов(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Закупки
	Если ПравоЧтениеТоварыКОформлениюПоступления
		И ПравоЧтениеЗаказПоставщику
		И ПравоЧтениеПриобретениеТоваровУслуг 
		И ПравоЧтениеСоглашенияСПоставщиками
		И ТекстыЗапроса.Свойство("ТекстЗапросаЗакупки") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаЗакупки(), КоличествоПодключенныхЗапросов,
			ТекстЗапросаВременныхТаблицЗакупки());
	КонецЕсли;
	Если ПравоЧтениеТоварыКОтгрузке
		И ПравоЧтениеВозвратТоваровПоставщику
		И ТекстыЗапроса.Свойство("ТекстЗапросаВозвратыТоваровПоставщикам") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаВозвратыТоваровПоставщикам(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Внутреннее потребление
	Если ПравоЧтениеТоварыКОтгрузке
		И ПравоЧтениеЗаказНаВнутреннееПотребление
		И ПравоЧтениеВнутреннееПотреблениеТоваров
		И ТекстыЗапроса.Свойство("ТекстЗапросаВнутреннееПотребление") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаВнутреннееПотребление(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Перемещение товаров
	Если ПравоЧтениеТоварыКОтгрузке
		И ПравоЧтениеТоварыКОформлениюПоступления
		И ПравоЧтениеЗаказНаПеремещение
		И ПравоЧтениеПеремещениеТоваров
		И ТекстыЗапроса.Свойство("ТекстЗапросаПеремещениеТоваров") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаПеремещениеТоваров(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Сборка (разборка)
	Если ПравоЧтениеТоварыКОтгрузке
		И ПравоЧтениеТоварыКОформлениюПоступления
		И ПравоЧтениеЗаказНаСборку
		И ПравоЧтениеСборкаТоваров
		И ТекстыЗапроса.Свойство("ТекстЗапросаСборкаРазборка") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаСборкаРазборка(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Прочее оприходование
	Если ПравоЧтениеТоварыКОформлениюПоступления
		И ПравоЧтениеПрочееОприходованиеТоваров
		И ТекстыЗапроса.Свойство("ТекстЗапросаПрочиеОприходования") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаПрочиеОприходования(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	// Оформление излишков и недостач
	Если ПравоЧтениеТоварыКОформлениюИзлишковНедостач
		И ТекстыЗапроса.Свойство("ТекстЗапросаОформлениеИзлишковНедостач") Тогда
		ПодключитьЗапрос(ТекстЗапроса, ТекстЗапросаОформлениеИзлишковНедостач(), КоличествоПодключенныхЗапросов);
	КонецЕсли;
	
	
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ПодключитьЗапрос(ДинамическийТекстЗапроса, ПодключаемыйЗапрос, КоличествоПодключенныхЗапросов,
		ТекстЗапросаВременнойТаблицы = Неопределено)
	
	РазделительТекстовЗапроса = Символы.ПС + ";" + Символы.ПС;
	ТекстЗапросаВременнойТаблицы = ?(ЗначениеЗаполнено(ТекстЗапросаВременнойТаблицы),
									ТекстЗапросаВременнойТаблицы + РазделительТекстовЗапроса,
									"");
	
	Если КоличествоПодключенныхЗапросов = 0 Тогда
		ДинамическийТекстЗапроса = ДинамическийТекстЗапроса + ТекстЗапросаВременнойТаблицы + ПодключаемыйЗапрос;
	Иначе
		ДинамическийТекстЗапроса = ДинамическийТекстЗапроса + Символы.ПС + Символы.ПС 
			+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
		СтрокаПолейКомпоновки = "{ВЫБРАТЬ
			|	Склад.*,
			|	Номенклатура.*,
			|	Характеристика.*,
			|	Серия.*,
			|	Назначение.*}";
		
		ПодключаемыйЗапросПодготовка = СтрЗаменить(ПодключаемыйЗапрос, "РАЗРЕШЕННЫЕ", "");
		ПодключаемыйЗапросПодготовка = СтрЗаменить(ПодключаемыйЗапросПодготовка, СтрокаПолейКомпоновки, "");
		
		ДинамическийТекстЗапроса = ТекстЗапросаВременнойТаблицы + ДинамическийТекстЗапроса + ПодключаемыйЗапросПодготовка;
	КонецЕсли;
	
	КоличествоПодключенныхЗапросов = КоличествоПодключенныхЗапросов + 1;
	
КонецПроцедуры

Функция ТекстЗапросаОформлениеИзлишковНедостачБезОтоборов(ТекстЗапроса)
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ИндексОператора = Неопределено;
	Для Каждого ОператорСхемыЗапроса Из СхемаЗапроса.ПакетЗапросов[0].Операторы Цикл
		Если Строка(ОператорСхемыЗапроса.ВыбираемыеПоля[0]) = "&СтрокаВидОперацииОформлениеИзлишковИНедостач" Тогда
			ИндексОператора = СхемаЗапроса.ПакетЗапросов[0].Операторы.Индекс(ОператорСхемыЗапроса);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндексОператора <> Неопределено Тогда
		ОтборыОператора = СхемаЗапроса.ПакетЗапросов[0].Операторы[ИндексОператора].Отбор;
		ИндексыУдаляемыхОператоров = Новый Массив;
		
		Для Каждого ОтборОператора Из ОтборыОператора Цикл 
			ОтборОператораСтрока = Строка(ОтборОператора);
			Если СтрНайти(ОтборОператораСтрока, "ДАТАВРЕМЯ(1, 1, 1)") > 0 
				Или СтрНайти(ОтборОператораСтрока, "NULL") > 0 Тогда
				ИндексыУдаляемыхОператоров.Добавить(ОтборыОператора.Индекс(ОтборОператора));
			КонецЕсли;
		КонецЦикла;
		
		КорректировкаИндекса = 0;
		Для Каждого ИндексУдаляемогоОператора Из ИндексыУдаляемыхОператоров Цикл 
			ОтборыОператора.Удалить(ИндексУдаляемогоОператора + КорректировкаИндекса);
			КорректировкаИндекса = КорректировкаИндекса - 1; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
КонецФункции

Функция ДоступныеВидыОперацийИЗапросы()
	
	Доступные = Новый ТаблицаЗначений;
	Доступные.Колонки.Добавить("ВидОперации", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Доступные.Колонки.Добавить("ВидОперацииСиноним", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Доступные.Колонки.Добавить("ИмяТекстаЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	ВидыОперацийИСинонимы = ВидыОперацийИСинонимы();
	
	// Не отключаются комбинацией функциональных опций
	ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ОтгрузкаКлиентам", "ТекстЗапросаПродажи");
	ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ВозвратыТоваровОтКлиентов", "ТекстЗапросаВозвратыТоваровОтКлиентов");
	ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ПриемкаОтПоставщиков", "ТекстЗапросаЗакупки");
	ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ВозвратыТоваровПоставщикам", "ТекстЗапросаВозвратыТоваровПоставщикам");
	ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ОформлениеИзлишковИНедостач", "ТекстЗапросаОформлениеИзлишковНедостач");
	
	// Отключаются комбинацией функциональных опций
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
		ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ВнутреннееПотреблениеТоваров", "ТекстЗапросаВнутреннееПотребление");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеТоваров") Тогда
		ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ПеремещениеТоваров", "ТекстЗапросаПеремещениеТоваров");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСборкуРазборку") Тогда
		ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "СборкаРазборкаТоваров", "ТекстЗапросаСборкаРазборка");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочееОприходованиеТоваров") Тогда
		ДобавитьВидОперацииИЗапрос(Доступные, ВидыОперацийИСинонимы, "ПрочееОприходованиеТоваров", "ТекстЗапросаПрочиеОприходования");
	КонецЕсли;
	
	
	Возврат Доступные;
	
КонецФункции

Функция ДоступныеЗначенияПоляВидОперации()
	
	ДоступныеВидыОперацийИЗапросы = ДоступныеВидыОперацийИЗапросы();
	ДоступныеЗначения = Новый СписокЗначений;
	
	ДоступныеЗначения.ЗагрузитьЗначения(ДоступныеВидыОперацийИЗапросы.ВыгрузитьКолонку("ВидОперацииСиноним"));
	Для Каждого ДоступноеЗначение Из ДоступныеЗначения Цикл 
		ДоступноеЗначение.Представление = ДоступноеЗначение.Значение;
	КонецЦикла;
	
	Возврат ДоступныеЗначения;
КонецФункции

Процедура ДобавитьВидОперацииИЗапрос(Таблица, ВидыОперацийИСинонимы, ВидОперации, ИмяТекстаЗапроса)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ВидОперации = ВидОперации;
	НоваяСтрока.ВидОперацииСиноним = ВидыОперацийИСинонимы[ВидОперации];
	НоваяСтрока.ИмяТекстаЗапроса = ИмяТекстаЗапроса;
	
КонецПроцедуры

Функция ВидыОперацийИСинонимы()
	
	ВидыОперацийИСинонимы = Новый Соответствие;
	
	ВидыОперацийИСинонимы.Вставить("ОтгрузкаКлиентам", НСтр("ru='Отгрузка клиентам'"));
	ВидыОперацийИСинонимы.Вставить("ВозвратыТоваровОтКлиентов", НСтр("ru='Возвраты товаров от клиентов'"));
	ВидыОперацийИСинонимы.Вставить("ПриемкаОтПоставщиков", НСтр("ru='Приемка от поставщиков'"));
	ВидыОперацийИСинонимы.Вставить("ВозвратыТоваровПоставщикам", НСтр("ru='Возвраты товаров поставщикам'"));
	ВидыОперацийИСинонимы.Вставить("ОформлениеИзлишковИНедостач", НСтр("ru='Оформление излишков и недостач'"));
	ВидыОперацийИСинонимы.Вставить("ВнутреннееПотреблениеТоваров", НСтр("ru='Внутреннее потребление товаров'"));
	ВидыОперацийИСинонимы.Вставить("ПеремещениеТоваров", НСтр("ru='Перемещение товаров'"));
	ВидыОперацийИСинонимы.Вставить("СборкаРазборкаТоваров", НСтр("ru='Сборка (разборка) товаров'"));
	ВидыОперацийИСинонимы.Вставить("ПрочееОприходованиеТоваров", НСтр("ru='Прочее оприходование товаров'"));
	ВидыОперацийИСинонимы.Вставить("ПередачаМатериаловВПроизводство", НСтр("ru='Передача материалов в производство'"));
	ВидыОперацийИСинонимы.Вставить("ВозвратыМатериаловИзПроизводства", НСтр("ru='Возвраты материалов из производства'"));
	ВидыОперацийИСинонимы.Вставить("ПриемкаГотовойПродукции", НСтр("ru='Приемка готовой продукции'"));
	ВидыОперацийИСинонимы.Вставить("ПереработкаСырьяУПереработчика", НСтр("ru='Переработка сырья у переработчика'"));
	ВидыОперацийИСинонимы.Вставить("ВозвратыСырьяОтПереработчиков", НСтр("ru='Возвраты сырья от переработчиков'"));
	ВидыОперацийИСинонимы.Вставить("ПоступленияПродукцииОтПереработчиков", НСтр("ru='Поступления продукции от переработчиков'"));
	ВидыОперацийИСинонимы.Вставить("ПереработкаСырьяДавальца", НСтр("ru='Переработка сырья давальца'"));
	ВидыОперацийИСинонимы.Вставить("ВозвратыСырьяДавальцам", НСтр("ru='Возвраты сырья давальцам'"));
	ВидыОперацийИСинонимы.Вставить("ПередачиПродукцииДавальцам", НСтр("ru='Передачи продукции давальцам'"));
	ВидыОперацийИСинонимы.Вставить("ОтгрузкаПринятыхТоваровСХранения", НСтр("ru='Отгрузка принятых товаров с хранения'"));
	ВидыОперацийИСинонимы.Вставить("ПриемкаТоваровНаХранение", НСтр("ru='Приемка товаров на хранение'"));
	
	Возврат ВидыОперацийИСинонимы;
	
КонецФункции

Функция ОрдерныеСклады()
	СписокОрдерныхСкладов = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|			ИЛИ Склады.ИспользоватьОрдернуюСхемуПриПоступлении)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склады.Наименование");
	
	СписокОрдерныхСкладов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
	
	Возврат СписокОрдерныхСкладов;
КонецФункции

#КонецОбласти

#КонецЕсли
