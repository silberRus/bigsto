#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Числитель");
	Результат.Добавить("Знаменатель");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("Родитель");
	Результат.Добавить("КоличествоУпаковок");
	Результат.Добавить("ТипУпаковки");
	Результат.Добавить("ТипИзмеряемойВеличины");
	Возврат Результат;
КонецФункции

// Ищет упаковку идентичную переданной упаковке, если не находит - создает упаковку для переданной номенклатуры
//
// Параметры:
//  НоменклатураИсходногоКачества	 - СправочникСслыка.Номенклатура - номенклатура, среди упаковок производится поиск
//  Номенклатура					 - СправочникСсылка.Номенклатура - владелец новой упаковки
//  УпаковкаВДокументе				 - СправочникСсылка.Упаковки	 - упаковка качественного товара, по которой ищется идентичная упаковка
//  	некачественного товара
// 
// Возвращаемое значение:
//  СправочникСсылка.УпаковкиЕдиницыИзмерения - ссылка на удентичную упаковку
//
Функция ИндентичнаяУпаковка(НоменклатураИсходногоКачества, Номенклатура, УпаковкаВДокументе) Экспорт
	
	Если ЗначениеЗаполнено(УпаковкаВДокументе) Тогда
		ЗапросПоУпаковке = Новый Запрос;
		ЗапросПоУпаковке.УстановитьПараметр("Ссылка", УпаковкаВДокументе);
		ЗапросПоУпаковке.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросПоУпаковке.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УпаковкаНекачественногоТовара.Ссылка КАК УпаковкаНекачественногоТовара
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаКачественногоТовара
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкаНекачественногоТовара
		|		ПО &ТекстЗапросаКоэффициентУпаковки1 = &ТекстЗапросаКоэффициентУпаковки2
		|			И УпаковкаКачественногоТовара.ЕдиницаИзмерения = УпаковкаНекачественногоТовара.ЕдиницаИзмерения
		|			И УпаковкаКачественногоТовара.СкладскаяГруппа = УпаковкаНекачественногоТовара.СкладскаяГруппа
		|ГДЕ
		|	УпаковкаКачественногоТовара.Ссылка = &Ссылка
		|	И УпаковкаНекачественногоТовара.Владелец = ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|				ТОГДА &Номенклатура
		|			ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкаНекачественногоТовара.Наименование,
		|	УпаковкаНекачественногоТовара.Ссылка";
		
		ЗапросПоУпаковке.Текст = СтрЗаменить(ЗапросПоУпаковке.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаКачественногоТовара", Неопределено));
			
		ЗапросПоУпаковке.Текст = СтрЗаменить(ЗапросПоУпаковке.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкаНекачественногоТовара", Неопределено));
			
		ВыборкаПоУпаковке = ЗапросПоУпаковке.Выполнить().Выбрать();
		Если ВыборкаПоУпаковке.Следующий() Тогда
			НайденнаяУпаковка = ВыборкаПоУпаковке.УпаковкаНекачественногоТовара;
		Иначе
			НайденнаяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяУпаковка)
			//если у некачественной номенклатуры не индивидуальные упаковки, то создавать их автоматически мы не будем
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"НаборУпаковок") <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			
			Возврат НайденнаяУпаковка;
		КонецЕсли;
	Иначе
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;	
	
	ЗапросПоУпаковкам = Новый Запрос;
	ЗапросПоУпаковкам.Текст =
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
	|	УпаковкиЕдиницыИзмерения.Безразмерная КАК Безразмерная,
	|	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
	|	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление КАК ЛинейныеРазмерыПредставление,
	|	УпаковкиЕдиницыИзмерения.СкладскаяГруппа КАК СкладскаяГруппа,
	|	УпаковкиЕдиницыИзмерения.Типоразмер КАК Типоразмер,
	|	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
	|	УпаковкиЕдиницыИзмерения.Представление КАК Представление,
	|	УпаковкиЕдиницыИзмерения.Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель,
	|	УпаковкиЕдиницыИзмерения.Вес,
	|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Объем,
	|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаВДокументе";
			
	ЗапросПоУпаковкам.УстановитьПараметр("УпаковкаВДокументе", УпаковкаВДокументе);
	ВыборкаПоУпаковкам = ЗапросПоУпаковкам.Выполнить().Выбрать();
	
	ВыборкаПоУпаковкам.Следующий();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяУпаковка, ВыборкаПоУпаковкам);
	
	//Упаковка может быть только индивидульной
	НоваяУпаковка.Владелец = Номенклатура;
	НоваяУпаковка.Записать();
	
	Возврат НоваяУпаковка.Ссылка;
КонецФункции

// Заполняет список выбора упаковок по параметрам выбора, предварительно список очищается.
//  Пример вызова из обработчиков форм:
//  Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьСписокВыбора(Элементы.Упаковка.СписокВыбора,
//  Новый Структура("Номенклатура, ДобавлятьПустуюУпаковку", Объект.Номенклатура, Истина));
//
// Параметры:
//  СписокВыбора	 - СписокЗначений - список для заполнения
//  ПараметрыВыбора	 - Структура - параметры выбора
//
Процедура ЗаполнитьСписокВыбора(СписокВыбора, ПараметрыВыбора) Экспорт
	СписокВыбора.Очистить();
	Для Каждого ЭлементВыбора Из Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбора) Цикл
		СписокВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление, ЭлементВыбора.Пометка, ЭлементВыбора.Картинка);
	КонецЦикла;
КонецПроцедуры

// Отображает единицу измерения номенклатуры как подсказку ввода в поле упаковки.
//
// Параметры:
//	Номенклатура      - СправочникСсылка.Номенклатура - ссылка номенклатуры,
//	ПолеВводаУпаковки - ПолеФормы - поле формы, содержащее информацию об упаковке / единице измерения номенклатуры.
//
Процедура ОтобразитьИнформациюОЕдиницеХранения(Номенклатура, ПолеВводаУпаковки) Экспорт
	
	ПолеВводаУпаковки.ПодсказкаВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
КонецПроцедуры

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)" или "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура" или "ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"
// 
// Возвращаемое значение:
//   - 
//
Функция ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИсточникНоменклатуры)  Тогда 
		
		ТекстЗапроса = 
		"ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТовары.Упаковка.Числитель,1) / ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) КАК Число(15,7))
		|	ИНАЧЕ NULL
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|				И ТаблицаТовары.Номенклатура.ВесИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|				И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|				И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|				И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|				И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
		|		КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
		|			И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины
		|			И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		ТОГДА
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель)
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|				И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|			ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|			ТОГДА 1
		|		ИНАЧЕ NULL
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки для формы выбора
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)" или "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура" или "ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"
// 
// Возвращаемое значение:
//  Строка - строка текста запроса
//
Функция ТекстЗапросаКоэффициентаУпаковкиДляВыбора(ИсточникУпаковки, ИсточникНоменклатуры = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИсточникНоменклатуры)  Тогда 
		
		ТекстЗапроса = 
		"ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаТовары.Упаковка.Числитель,1) / ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) КАК Число(15,7))
		|	ИНАЧЕ NULL
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|		И ТаблицаТовары.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|		ТОГДА 
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель)
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|		И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|		ТОГДА
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель)
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|		И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|		ТОГДА
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель)
		
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|		И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|		ТОГДА
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель)
		|	КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
		|		И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		ТОГДА
		|			(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ 
		|			(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель)
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		ТОГДА ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		ТОГДА 1
		|	ИНАЧЕ NULL
		|КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса доступности коэффициента упаковки для формы выбора
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)" или "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура" или "ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)"
// 
// Возвращаемое значение:
//  Строка - строка текста запроса
//
Функция ТекстЗапросаДоступностьКоэффициентаДляВыбораУпаковки(ИсточникУпаковки, ИсточникНоменклатуры = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ИсточникНоменклатуры)  Тогда 
		
		ТекстЗапроса = 
		"ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель,1) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|		И ТаблицаТовары.Номенклатура.ВесИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|		ТОГДА (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|			И (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|		И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|		ТОГДА (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|			И (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|		И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|		ТОГДА (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|			И (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|		И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|		ТОГДА (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|			И (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|	КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
		|         ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
		|		И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель, 0) <> 0
		|		И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель, 0) <> 0
		|		ТОГДА (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|			И (ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель)
		|			/ (ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Знаменатель)
		|			МЕЖДУ 0.0000001 И 99999999
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|		ТОГДА ИСТИНА
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ИСТИНА
		|КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - Строка	 - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - Строка	 - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки
//  	должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//  	Например, "ТаблицаТовары.Номенклатура"
//  ВесУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет вес в кг, иначе - в константе - единице измерения веса . 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет вес либо в единице константы, либо в кг (см. параметр ВесУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ВесУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда 
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Вес, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель,1)) / &КоличествоКгВЕдиницеИзмеренияВеса) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель) * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Вес * ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Упаковка.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ВесИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель * (ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоКгВЕдиницеИзмеренияВеса КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ВесУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
			ВызватьИсключение НСтр("ru = 'Не задано значение константы ""Единица измерения веса"". Обратитесь к администратору.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияВеса, "Числитель, Знаменатель");
		КоличествоКгВЕдиницеИзмеренияВеса = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;		
	Иначе
		КоличествоКгВЕдиницеИзмеренияВеса = 1; 		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоКгВЕдиницеИзмеренияВеса", Формат(КоличествоКгВЕдиницеИзмеренияВеса, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
//  ВесУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет объем в м3, иначе - в константе - единице измерения объема. 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет объем либо в единице константы, либо в м3 (см. параметр ОбъемУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ОбъемУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Объем, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель,1)) / &КоличествоКубометровВЕдиницеИзмеренияОбъема) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель) * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Объем * ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Упаковка.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ОбъемИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель * (ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоКубометровВЕдиницеИзмеренияОбъема КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ОбъемУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияОбъема) Тогда
			ВызватьИсключение НСтр("ru = 'Не задано значение константы ""Единица измерения объема"". Обратитесь к администратору.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияОбъема, "Числитель, Знаменатель");
		КоличествоКубометровВЕдиницеИзмеренияОбъема = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;	 
	Иначе
		КоличествоКубометровВЕдиницеИзмеренияОбъема = 1;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоКубометровВЕдиницеИзмеренияОбъема", Формат(КоличествоКубометровВЕдиницеИзмеренияОбъема, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
//  ПлощадьУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет площадь в м2, иначе - в константе - единице измерения площади. 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет площадь либо в единице константы, либо в м2 (см. параметр ПлощадьУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаПлощадьУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ПлощадьУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Площадь, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ПлощадьЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ПлощадьЕдиницаИзмерения.Знаменатель,1)) / &КоличествоМ2ВЕдиницеИзмеренияПлощади) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель) * (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель) * (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель) * (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель * (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоМ2ВЕдиницеИзмеренияПлощади КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ПлощадьУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияПлощади = Константы.ЕдиницаИзмеренияПлощади.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияПлощади) Тогда
			ВызватьИсключение НСтр("ru = 'Не задано значение константы ""Единица измерения площади"". Обратитесь к администратору.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияПлощади, "Числитель, Знаменатель");
		КоличествоМ2ВЕдиницеИзмеренияПлощади = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;	 
	Иначе
		КоличествоМ2ВЕдиницеИзмеренияПлощади = 1;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоМ2ВЕдиницеИзмеренияПлощади", Формат(КоличествоМ2ВЕдиницеИзмеренияПлощади, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса коэффициента упаковки
//
// Параметры:
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкаЕдиницаИзмерения)"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
//  ДлинаУпаковкиВЕдиницеКонстанты	 - 	Булево	- если ЛОЖЬ, то текст запроса вернет объем в м, иначе - в константе - единице измерения длины. 
// 
// Возвращаемое значение:
//  Строка - строка текста запроса, которая вернет длину либо в единице константы, либо в м (см. параметр ДлинаУпаковкиВЕдиницеКонстанты)
//
Функция ТекстЗапросаДлинаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, ДлинаУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Если ИсточникНоменклатуры = Неопределено Тогда
		
		ТекстЗапроса = "ВЫРАЗИТЬ((ЕСТЬNULL(ТаблицаТовары.Упаковка.Длина, 0) * (ЕСТЬNULL(ТаблицаТовары.Упаковка.ДлинаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(ТаблицаТовары.Упаковка.ДлинаЕдиницаИзмерения.Знаменатель,1)) / &КоличествоМетровВЕдиницеИзмеренияДлины) КАК Число(15,7))";		
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
		|					И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
		|					И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ВесЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ВесЧислитель / ТаблицаТовары.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель) * (ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
		|					И ТаблицаТовары.Номенклатура.ПлощадьИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ОбъемЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ОбъемЧислитель / ТаблицаТовары.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель) * (ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
		|					И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Упаковка.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЧислитель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ТаблицаТовары.Упаковка.Числитель / ТаблицаТовары.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ПлощадьЧислитель / ТаблицаТовары.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) * (ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель) * (ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			КОГДА (ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
		|					ИЛИ ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(ТаблицаТовары.Упаковка.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|					И ТаблицаТовары.Номенклатура.ДлинаИспользовать
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЗнаменатель, 0) <> 0
		|					И ЕСТЬNULL(ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
		|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура.ДлинаЧислитель / ТаблицаТовары.Номенклатура.ДлинаЗнаменатель * (ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ТаблицаТовары.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель) КАК ЧИСЛО(15, 7))
		|			ИНАЧЕ 0
		|		КОНЕЦ / (ВЫРАЗИТЬ(&КоличествоМетровВЕдиницеИзмеренияДлины КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))";
		
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	Если ДлинаУпаковкиВЕдиницеКонстанты Тогда
		ЕдиницаИзмеренияДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияДлины) Тогда
			ВызватьИсключение НСтр("ru = 'Не задано значение константы ""Единица измерения Длины"". Обратитесь к администратору.'");
		КонецЕсли;
		СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияДлины, "Числитель, Знаменатель");
		КоличествоМетровВЕдиницеИзмеренияДлины = СтруктураРезультат.Числитель / СтруктураРезультат.Знаменатель;	 
	Иначе
		КоличествоМетровВЕдиницеИзмеренияДлины = 1;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоМетровВЕдиницеИзмеренияДлины", Формат(КоличествоМетровВЕдиницеИзмеренияДлины, "ЧРД=.; ЧГ=0"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Возврат ТекстЗапроса;	 
	
КонецФункции

// Функция - Текст запроса значение реквизита единицы измерения
//
// Параметры:
//	ИмяРеквизита		 -	Строка - Имя реквизата единицы измерения, значение которого необходимо получить.
//							Для получения ссылки на единицу измерения следует передать значение "Ссылка".
//  ИсточникУпаковки	 - 	Строка - Таблица с упаковкой. Например, "ТаблицаТовары.Упаковка"
//  ИсточникНоменклатуры - 	Строка - Таблица с номенклатурой. Если этот параметр не заполнен, то ИсточникУпаковки 
//							должен гарантированно ссылаться на упаковку / единицу измерения типа "Упаковка".
//							Например, "ТаблицаТовары.Номенклатура"
// 
// Возвращаемое значение:
//  Строка - текст для подстановки в запрос.
//
Функция ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(ИмяРеквизита, ИсточникУпаковки, ИсточникНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсточникНоменклатуры) Тогда
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА NULL
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА ТаблицаТовары.Упаковка.ЕдиницаИзмерения#ИмяРеквизита
		|	ИНАЧЕ ТаблицаТовары.Упаковка#ИмяРеквизита
		|КОНЕЦ";
		
	Иначе		
		
		ТекстЗапроса = 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(ТаблицаТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения#ИмяРеквизита
		|	КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|		ТОГДА ТаблицаТовары.Упаковка.ЕдиницаИзмерения#ИмяРеквизита
		|	ИНАЧЕ ТаблицаТовары.Упаковка#ИмяРеквизита
		|КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Номенклатура", ИсточникНоменклатуры);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.Упаковка", 	ИсточникУпаковки);
	
	Если ИмяРеквизита = "Ссылка" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", "");
	Иначе
		
		Реквизиты = РеквизитыЕдиницыИзмерения();
		Если Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРеквизита", "." + ИмяРеквизита);
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректное значение параметра [1] метода Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция - Значения веса объема коэффициента прочих реквизитов упаковки
//
// Параметры:
//  Упаковка							 - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка, реквизиты которой нужно получить
//  Номенклатура						 - СправочникСсылка.Номенклатура			 - обязательно для указания, если упаковка НЕ типа "Упаковка"
//  ПрочиеРеквизиты						 - Строка									 - названия других реквизитов через запятую. Не допускается вложенное обращение (например, "Родитель.Наименование" - нельзя).
//  ВесОбъемУпаковкиВЕдиницеКонстанты	 - Булево 									 - если ЛОЖЬ, то текст запроса вернет объем в м3 и вес в кг, иначе - в константе - единице измерения веса / объема.
// 
// Возвращаемое значение:
//  Структура - структура со значениями коэффициента, веса в константе - единице измерения веса, объема в константе - единице измерения объема и прочих реквизитов упаковки
//
Функция КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка, Номенклатура, ПрочиеРеквизиты = "", ВесОбъемУпаковкиВЕдиницеКонстанты = Истина) Экспорт 
	
	Результат = Новый Структура("Вес, Объем, Коэффициент" + ?(ЗначениеЗаполнено(ПрочиеРеквизиты), "," + ПрочиеРеквизиты, ""), 0, 0, 0);
	СтрокаПрочихРеквизитов = "";
	
	Результат.Вставить("НужноОкруглятьКоличество", Ложь);
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Результат.Коэффициент = 1;
			Возврат Результат;
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Коэффициент,
			|	Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура";
			ИсточникНоменклатуры = "Номенклатура";
			ИсточникУпаковки = "Номенклатура.ЕдиницаИзмерения"
		КонецЕсли;
	Иначе
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрочиеРеквизиты, ",",,Истина);
		
		Если Реквизиты.Найти("ТипИзмеряемойВеличины") = Неопределено Тогда
			Реквизиты.Добавить("ТипИзмеряемойВеличины");
		КонецЕсли;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + "Упаковка." + Реквизит + " КАК " + Реквизит;
			Если Реквизиты.Найти(Реквизит) <> Реквизиты.ВГраница() Тогда
				СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + ",";
			КонецЕсли;
			СтрокаПрочихРеквизитов = СтрокаПрочихРеквизитов + Символы.ПС + Символы.Таб;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ПрочиеРеквизиты,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
			|ГДЕ
			|	Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения";
			
			ИсточникНоменклатуры = Неопределено;
			ИсточникУпаковки = "Упаковка";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличиныДляПроверки,
			|	&ПрочиеРеквизиты,
			|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
			|	&ТекстЗапросаВесУпаковки КАК Вес,
			|	&ТекстЗапросаОбъемУпаковки КАК Объем
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО (Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения)
			|			И (Номенклатура.Ссылка = &Номенклатура)";
			
			ИсточникНоменклатуры = "Номенклатура";
			ИсточникУпаковки = "Упаковка";
		КонецЕсли;
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки,
																										ИсточникНоменклатуры));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаВесУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки,
																							ИсточникНоменклатуры, 
																							ВесОбъемУпаковкиВЕдиницеКонстанты));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаОбъемУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки,
																								ИсточникНоменклатуры, 
																								ВесОбъемУпаковкиВЕдиницеКонстанты));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеРеквизиты", 		СтрокаПрочихРеквизитов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		НужноОкруглять = ЗначениеЗаполнено(Номенклатура) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения.ТипИзмеряемойВеличины") = Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук
			И (Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Вес																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Длина																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Объем																									
			Или Выборка.ТипИзмеряемойВеличиныДляПроверки = Перечисления.ТипыИзмеряемыхВеличин.Площадь);																									
		Результат.НужноОкруглятьКоличество = НужноОкруглять;
	КонецЕсли;
	

	Возврат Результат;
	
КонецФункции

// Функция - Коэффициент упаковки
//
// Параметры:
//  Упаковка	 - 	СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка, коэффициент которой нужно получить
//  Номенклатура - 	СправочникСсылка.Номенклатура - обязательно для указания, если упаковка НЕ типа "Упаковка"
// 
// Возвращаемое значение:
//  Число - коэффициент упаковки
//
Функция КоэффициентУпаковки(Упаковка, Номенклатура) Экспорт 
	
	Если Не ЗначениеЗаполнено(Упаковка) Тогда
		Возврат 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
		|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
		|ГДЕ
		|	Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения";
		
		ИсточникНоменклатуры = Неопределено;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Коэффициент,
		|	Упаковка.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (Номенклатура.Ссылка = &Номенклатура)
		|			И (Упаковка.Ссылка = &УпаковкаЕдиницаИзмерения)";
		ИсточникНоменклатуры =  "Номенклатура";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Упаковка",ИсточникНоменклатуры));

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", Упаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка
			И Номенклатура = Неопределено Тогда
			ТекстИсключения = НСтр("ru = 'Для расчета коэффициента упаковки нужно передать номенклатуру.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Коэффициент = Выборка.Коэффициент;
		
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

// Возвращает коэффициенты нескольких упаковок
//
// Параметры:
//  ДанныеУпаковок	 - Массив - элементы массива должны содержать свойства Номенклатура и Упаковка
// 
// Возвращаемое значение:
//   - Соответствие - ключ ссылка на номенклатуру, значение соответствие упаковка и ее коэффициент
//
Функция КоэффициентыУпаковок(ДанныеУпаковок) Экспорт

	Если ДанныеУпаковок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеУпаковокТаблица = Новый ТаблицаЗначений;
	ДанныеУпаковокТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеУпаковокТаблица.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ДанныеУпаковокТаблица, ДанныеУпаковок);
	
	ТекстЗапроса =
	"ВЫБРАТЬ 
	|	ДанныеУпаковок.Номенклатура,
	|	ДанныеУпаковок.Упаковка
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	&ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеУпаковок.Номенклатура,
	|	ДанныеУпаковок.Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки КАК Коэффициент
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаКоэффициентУпаковки",
								ТекстЗапросаКоэффициентаУпаковки("ДанныеУпаковок.Упаковка", "ДанныеУпаковок.Номенклатура"));
								
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеУпаковок", ДанныеУпаковокТаблица);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоэффициентыУпаковок = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		КоэффициентыУпаковокНоменклатуры = КоэффициентыУпаковок.Получить(Выборка.Номенклатура);
		Если КоэффициентыУпаковокНоменклатуры = Неопределено Тогда
			КоэффициентыУпаковокНоменклатуры = Новый Соответствие;
		КонецЕсли;
		КоэффициентыУпаковокНоменклатуры.Вставить(Выборка.Упаковка, Выборка.Коэффициент);
		
		КоэффициентыУпаковок.Вставить(Выборка.Номенклатура, КоэффициентыУпаковокНоменклатуры);
	
	КонецЦикла;

	Возврат КоэффициентыУпаковок;
	
КонецФункции

// Функция - Это мерная упковка
//
// Параметры:
//  ЕдиницаИзмерения -  СправочникСсылка.УпаковкиЕдиницыИзмерения
//  ВозвращаемыйПараметрТипИзмеряемойВеличины - Строка - возвращаемый параметр, тип измеряемой величины
// 
// Возвращаемое значение:
//  Булево - признак того, является ли Упаковка - мерной 
//
Функция ЭтоМернаяЕдиница(ЕдиницаИзмерения, ВозвращаемыйПараметрТипИзмеряемойВеличины = "") Экспорт 
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ТипЕдиницыЗначение = Неопределено;
	Иначе
		ТипЕдиницыЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "ТипИзмеряемойВеличины");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЕдиницыЗначение) Тогда
		ВозвращаемыйПараметрТипИзмеряемойВеличины = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипЕдиницыЗначение);
	Иначе
		ВозвращаемыйПараметрТипИзмеряемойВеличины = "";
	КонецЕсли;
	
	Если ВозвращаемыйПараметрТипИзмеряемойВеличины = "Вес"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Объем"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Площадь"
		Или ВозвращаемыйПараметрТипИзмеряемойВеличины = "Длина" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает перечень кодов единиц измерения и по этим кодам ищет единицы в справочнике.
//  Если их нет, то создает элементы справочника в соответствии с классификатором ОКЕИ.
//
// Параметры:
//  СтрокаКодов		 - Строка		 - Строка с кодами единиц измерения через запятую,
//  РежимОбновления	 - Булево, Истина	 - признак записи объекта через метод ОбновлениеИнформационнойБазы.ЗаписатьОбъект().
// 
// Возвращаемое значение:
//  Соответствие - соответствие:
//  *Ключ - Код единицы измерения по ОКЕИ
//  *Значение - ссылка на единицу измерения или Неопределено, если такого кода нет в ОКЕИ
//
Функция ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СтрокаКодов, РежимОбновления = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	Дерево = ПолучитьДанныеКлассификатора();
	
	МассивКодов = СтрРазделить(СтрокаКодов, ",", Ложь);
	
	Для Каждого Код Из МассивКодов Цикл
		
		СуществующийЭлемент = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(Код);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			СтуруктураПоиска = Новый Структура("КодЧисловой", Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтуруктураПоиска, Истина);
			
			Если СтрокаДерева.Количество() > 0 Тогда
				СвойстваЕдИзмерения = СтрокаДерева[0];
				
				СправочникОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное;
				Иначе
					Наименование = СвойстваЕдИзмерения.Наименование;
				КонецЕсли;
				
				СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
				СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
				СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СвойстваЕдИзмерения.Наименование,Символы.ПС,"/");
				СправочникОбъект.Код                     = СвойстваЕдИзмерения.КодЧисловой;
				СправочникОбъект.Числитель               = СвойстваЕдИзмерения.Числитель;
				СправочникОбъект.Знаменатель             = СвойстваЕдИзмерения.Знаменатель;
				СправочникОбъект.Владелец				 = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.ТипИзмеряемойВеличины) Тогда
					СправочникОбъект.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[СвойстваЕдИзмерения.ТипИзмеряемойВеличины];
				КонецЕсли;
				Если РежимОбновления Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				Иначе
					СправочникОбъект.Записать();
				КонецЕсли;
				
				Соответствие.Вставить(Код, СправочникОбъект.Ссылка);
			Иначе
				Соответствие.Вставить(Код, Неопределено);
			КонецЕсли;
		Иначе
			Соответствие.Вставить(Код, СуществующийЭлемент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Устанавливает значения реквизитов по умолчанию в зависимости от типа упаковки / ед. измерения и других параметров.
//
// Параметры:
//  Упаковка - ДанныеФормыСтруктура, СправочникОбъект.УпаковкиЕдиницыИзмерения - упаковка / единица измерения, в которой нужно настроить значения реквизитов в зависимости от типа и прочих параметров.
//
Процедура ОтработатьЛогикуСвязиРеквизитов(Упаковка) Экспорт
	
	Если Упаковка.ТипИзмеряемойВеличины <> Перечисления.ТипыИзмеряемыхВеличин.Упаковка Тогда
		Упаковка.Безразмерная  = Ложь;
		Упаковка.Высота  = 0;
		Упаковка.Ширина  = 0;
		Упаковка.Глубина = 0;
		Упаковка.Объем   = 0;
		Упаковка.ЛинейныеРазмерыПредставление = "";
		Упаковка.ВесЕдиницаИзмерения = Неопределено;
		Упаковка.ВысотаЕдиницаИзмерения = Неопределено;
		Упаковка.ГлубинаЕдиницаИзмерения = Неопределено;
		Упаковка.ЕдиницаИзмерения = Неопределено;
		Упаковка.ОбъемЕдиницаИзмерения = Неопределено;
		Упаковка.СкладскаяГруппа = Неопределено;
		Упаковка.СкладскаяГруппа = Неопределено;
		Упаковка.Типоразмер = Неопределено;
		Упаковка.ШиринаЕдиницаИзмерения = Неопределено;
		Упаковка.КоличествоУпаковок = 0;
		Упаковка.ПоставляетсяВМногооборотнойТаре = Ложь;
		Упаковка.НоменклатураМногооборотнаяТара = Неопределено;
		Упаковка.ХарактеристикаМногооборотнаяТара = Неопределено;
		Упаковка.МинимальноеКоличествоУпаковокМногооборотнойТары = 0;
		Упаковка.ТипУпаковки = Неопределено;
	Иначе	
		Упаковка.Код = "";
		Упаковка.НаименованиеПолное = "";
		Упаковка.МеждународноеСокращение = "";
		
		Если Упаковка.Безразмерная Тогда
			Упаковка.Высота  = 0;
			Упаковка.Ширина  = 0;
			Упаковка.Глубина = 0;
			Упаковка.Объем   = 0;
			
			Упаковка.ЛинейныеРазмерыПредставление = НСтр("ru='Безразмерная'");
		Иначе
			Упаковка.ЛинейныеРазмерыПредставление = Строка(Упаковка.Высота) + " X " + Строка(Упаковка.Ширина) + " X " + Строка(Упаковка.Глубина);
		КонецЕсли;
		
		Если Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Составная Тогда
			Если ЗначениеЗаполнено(Упаковка.Родитель) Тогда 
				Результат   = Справочники.УпаковкиЕдиницыИзмерения.КоэффициентВесОбъемПрочиеРеквизитыУпаковки(Упаковка.Родитель,
					Неопределено,
					"Числитель, ТипУпаковки");
				Упаковка.Числитель   = Результат.Числитель * Упаковка.КоличествоУпаковок;
				Упаковка.Знаменатель = 1;
			КонецЕсли;
		ИначеЕсли Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
			Упаковка.Родитель           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Упаковка.КоличествоУпаковок = 0;
			Упаковка.Числитель          = 1;
			
			Упаковка.ПоставляетсяВМногооборотнойТаре   = Ложь;
			Упаковка.НоменклатураМногооборотнаяТара    = Неопределено;
			Упаковка.ХарактеристикаМногооборотнаяТара  = Неопределено;
		ИначеЕсли Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная Тогда
			Упаковка.Родитель           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Упаковка.КоличествоУпаковок = 0;
			Упаковка.Знаменатель        = 1;
		ИначеЕсли Упаковка.ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто Тогда
			Упаковка.Родитель           = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			Упаковка.Числитель 			= 1;
			Упаковка.Знаменатель        = Упаковка.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив мерных типов единиц измеряемых величин
// 
// Возвращаемое значение:
//  Массив - массив типов
//
Функция МерныеТипыЕдиницИзмерений() Экспорт
	
	МерныеТипы = Новый Массив;
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Вес);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Длина);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Объем);
	МерныеТипы.Добавить(Перечисления.ТипыИзмеряемыхВеличин.Площадь);
	
	Возврат МерныеТипы;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.УпаковкиЕдиницыИзмеренияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	НоменклатураВызовСервера.УпаковкиЕдиницыИзмеренияОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция СформироватьНаименование(ТипУпаковки, ЕдиницаИзмерения, Числитель, Знаменатель, ЕдиницаИзмеренияВладельца) Экспорт
	
	Если ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Конечная 
		И Числитель / Знаменатель = 1 Тогда
		Возврат СокрЛП(ЕдиницаИзмерения);
	ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.Разупаковка Тогда
		Возврат СокрЛП(СокрЛП(ЕдиницаИзмерения) + " (" + Формат(Числитель, "ЧРД=.") + "/" + Формат(Знаменатель, "ЧРД=.") + " " + СокрЛП(ЕдиницаИзмеренияВладельца) + ")");
	ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковокНоменклатуры.ТоварноеМесто Тогда
		Возврат "";		
	ИначеЕсли Числитель <> 0 И Знаменатель <> 0 Тогда 
		Возврат СокрЛП(СокрЛП(ЕдиницаИзмерения) + " (" + Формат(Числитель / Знаменатель,"ЧРД=.") + " " + СокрЛП(ЕдиницаИзмеренияВладельца) + ")");
	Иначе 
		Возврат "";
	КонецЕсли;

КонецФункции

Процедура СкопироватьИерархиюУпаковок(СтарыйВладелец, НовыйВладелец) Экспорт
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Наименование,
	|	УпаковкиЕдиницыИзмерения.Безразмерная,
	|	УпаковкиЕдиницыИзмерения.Вес,
	|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Высота,
	|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Глубина,
	|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
	|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление,
	|	УпаковкиЕдиницыИзмерения.Объем,
	|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.СкладскаяГруппа,
	|	УпаковкиЕдиницыИзмерения.Типоразмер,
	|	УпаковкиЕдиницыИзмерения.Ширина,
	|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Представление,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок,
	|	УпаковкиЕдиницыИзмерения.ТипУпаковки КАК ТипУпаковки,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК СсылкаДляКонтроля,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК СсылкаДляЛистовДерева,
	|	УпаковкиЕдиницыИзмерения.ПоставляетсяВМногооборотнойТаре,
	|	УпаковкиЕдиницыИзмерения.НоменклатураМногооборотнаяТара,
	|	УпаковкиЕдиницыИзмерения.ХарактеристикаМногооборотнаяТара,
	|	УпаковкиЕдиницыИзмерения.МинимальноеКоличествоУпаковокМногооборотнойТары,
	|	УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины,
	|	УпаковкиЕдиницыИзмерения.НаименованиеПолное,
	|	УпаковкиЕдиницыИзмерения.МеждународноеСокращение
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|ИТОГИ ПО
	|	СсылкаДляКонтроля ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", СтарыйВладелец);
	
	ДеревоУпаковок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрДрв из ДеревоУпаковок.Строки Цикл
		
		Если СтрДрв.Наименование <> Null Тогда
			
			УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(УпаковкаОбъект,СтрДрв);
			
			УпаковкаОбъект.Владелец = НовыйВладелец;
			УпаковкаОбъект.Записать();
			
			СтрДрв.СсылкаДляЛистовДерева = УпаковкаОбъект.Ссылка;	
						
		КонецЕсли;
		
		ЗаписатьИерархиюУпаковок(СтрДрв.Строки, НовыйВладелец);

	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаписатьИерархиюУпаковок(СтрокиТекущегоУровня, ВладелецУпаковок)
	Для Каждого СтрДрв из СтрокиТекущегоУровня Цикл
		
		Если СтрДрв.СсылкаДляКонтроля = СтрДрв.Родитель.СсылкаДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		УпаковкаОбъект = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(УпаковкаОбъект,СтрДрв);
		
		УпаковкаОбъект.Владелец = ВладелецУпаковок;
		
		Если СтрДрв.Родитель <> Неопределено Тогда
			УпаковкаОбъект.Родитель = СтрДрв.Родитель.СсылкаДляЛистовДерева;
		КонецЕсли;	
			
		УпаковкаОбъект.Записать();
		
		СтрДрв.СсылкаДляЛистовДерева = УпаковкаОбъект.Ссылка;
		
		ЗаписатьИерархиюУпаковок(СтрДрв.Строки, ВладелецУпаковок);
	КонецЦикла;	
КонецПроцедуры

Функция БазовыеЕдиницыИзмерения() Экспорт
	
	ЕдиницыИзмерения = Новый Структура;
	ЕдиницаИзмеренияДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
	ЕдиницыИзмерения.Вставить("ВысотаЕдиницаИзмерения",  ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ШиринаЕдиницаИзмерения",  ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ГлубинаЕдиницаИзмерения", ЕдиницаИзмеренияДлины);
	ЕдиницыИзмерения.Вставить("ОбъемЕдиницаИзмерения",   Константы.ЕдиницаИзмеренияОбъема.Получить());
	ЕдиницыИзмерения.Вставить("ВесЕдиницаИзмерения",   Константы.ЕдиницаИзмеренияВеса.Получить());
	Возврат ЕдиницыИзмерения;
	
КонецФункции

Функция РеквизитыЕдиницыИзмерения()
	
	Результат = Новый Массив;
	
	Результат.Добавить("Код");
	Результат.Добавить("Наименование");
	Результат.Добавить("НаименованиеПолное");
	Результат.Добавить("МеждународноеСокращение");
	Результат.Добавить("ТипИзмеряемойВеличины");
	Результат.Добавить("Знаменатель");
	Результат.Добавить("Числитель");
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТаблицуВариантовПереупаковкиНаСервере(Владелец) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Источник,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК Упаковка,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.КоличествоУпаковок = 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		ИНАЧЕ УпаковкиЕдиницыИзмерения.КоличествоУпаковок
	|	КОНЕЦ КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК МаксимальнаяУпаковкаВВетви
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	|	И Не УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	ТаблицаУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаВариантовПереупаковки = ТаблицаУпаковок.СкопироватьКолонки();
	ТекущаяИерархия = ТаблицаУпаковок.СкопироватьКолонки();
	
	ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ТекущаяИерархия, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	//Переупаковка в пустую упаковку используется только для мерных единиц хранения
	ТипИзмеряемойВеличиныВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец,"ЕдиницаИзмерения.ТипИзмеряемойВеличины");
	
	Если Не (ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Вес
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Объем
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Площадь
		Или ТипИзмеряемойВеличиныВладельца = Перечисления.ТипыИзмеряемыхВеличин.Длина) Тогда
		
		Отбор = Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		УдаляемыеСтроки = ТаблицаВариантовПереупаковки.НайтиСтроки(Отбор);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ТаблицаВариантовПереупаковки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВариантовПереупаковки;
	
КонецФункции

Процедура ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ТекущаяИерархия, Упаковка)
	
	Отбор = Новый Структура("Упаковка", Упаковка);
	Строки = ТаблицаУпаковок.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Если Не ЗначениеЗаполнено(Упаковка) Тогда
			Возврат;
		КонецЕсли;
		
		//Конечный элемент в дереве, можно заполнять максимальную упаковку в ветви
		Для Каждого СтрокаИерархии Из ТекущаяИерархия Цикл
			НоваяСтрока = ТаблицаВариантовПереупаковки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИерархии);
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = Упаковка;
		КонецЦикла;
		
		НоваяСтрока = ТаблицаВариантовПереупаковки.Добавить();
		НоваяСтрока.Упаковка = Упаковка;
		НоваяСтрока.МаксимальнаяУпаковкаВВетви = Упаковка;
		НоваяСтрока.Количество = 1;
	Иначе
		Для Каждого Строка Из Строки Цикл
			
			ИерархияУпаковок = ТекущаяИерархия.Скопировать();
			
			Отбор = Новый Структура("Источник", Строка.Упаковка);
			СтрокиПереупаковки = ТекущаяИерархия.НайтиСтроки(Отбор);
			//Переупаковка из упаковки источника в меньшие упаковки
			Для Каждого СтрокаПереупаковки Из СтрокиПереупаковки Цикл
				НоваяСтрока = ИерархияУпаковок.Добавить();
				НоваяСтрока.Упаковка = СтрокаПереупаковки.Упаковка;
				НоваяСтрока.Источник = Строка.Источник;
				НоваяСтрока.Количество = СтрокаПереупаковки.Количество * Строка.Количество;
			КонецЦикла;
			
			//Переупаковка из упаковки истоника в текущую упаковку
			НоваяСтрока = ИерархияУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			//Переупаковка из упаковок больше источника
			ЗаполнитьВариантыПереупаковки(ТаблицаУпаковок, ТаблицаВариантовПереупаковки, ИерархияУпаковок, Строка.Источник);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Функция возвращает дерево значений с данными ОКЕИ.
//
Функция ПолучитьДанныеКлассификатора() Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	ТекстМакета = Текст.ПолучитьТекст();
		
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстМакета);
	
КонецФункции

#Область ОбновлениеИнформационнойБазы_УТ_11_3

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПересчета.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаПересчета.Числитель КАК Числитель,
	|	ТаблицаПересчета.Знаменатель КАК Знаменатель,
	|	ТаблицаПересчета.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
	|ПОМЕСТИТЬ ТаблицаПересчета
	|ИЗ
	|	&ТаблицаПересчета КАК ТаблицаПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПересчета КАК ТаблицаПересчета
	|		ПО (ТаблицаПересчета.КодЕдиницыИзмерения = УпаковкиЕдиницыИзмерения.Код)
	|			И (ТаблицаПересчета.Числитель <> УпаковкиЕдиницыИзмерения.Числитель
	|				ИЛИ ТаблицаПересчета.Знаменатель <> УпаковкиЕдиницыИзмерения.Знаменатель
	|				ИЛИ ТаблицаПересчета.ТипИзмеряемойВеличины <> УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины)
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)";
	
	Запрос.УстановитьПараметр("ТаблицаПересчета", ТаблицаПравилПересчета()); 
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПравилаПересчета = ТаблицаПравилПересчета();
	
	ПолноеИмяОбъекта = "Справочник.УпаковкиЕдиницыИзмерения";
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	ВыборкаПоЭлементам = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока ВыборкаПоЭлементам.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка",ВыборкаПоЭлементам.Ссылка);
			
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать элемент: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоЭлементам.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				ВыборкаПоЭлементам.Ссылка,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Попытка
			
			СправочникОбъект = ВыборкаПоЭлементам.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СправочникОбъект);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ПравилоПересчета = ПравилаПересчета.Найти(СправочникОбъект.Код, "КодЕдиницыИзмерения");
			
			Если ПравилоПересчета = Неопределено
				Или (ПравилоПересчета.Числитель = СправочникОбъект.Числитель
				И ПравилоПересчета.Знаменатель = СправочникОбъект.Знаменатель
				И ПравилоПересчета.ТипИзмеряемойВеличины = СправочникОбъект.ТипИзмеряемойВеличины) Тогда
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СправочникОбъект);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СправочникОбъект.Числитель = ПравилоПересчета.Числитель; 
			СправочникОбъект.Знаменатель = ПравилоПересчета.Знаменатель; 
			СправочникОбъект.ТипИзмеряемойВеличины = ПравилоПересчета.ТипИзмеряемойВеличины; 
		
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать элемент: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоЭлементам.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеОбъекта,
				ВыборкаПоЭлементам.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ТаблицаПравилПересчета()
	ДеревоЕдиниц = ПолучитьДанныеКлассификатора();
	
	ПравилаПересчета = Новый ТаблицаЗначений;
	ПравилаПересчета.Колонки.Добавить("КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(4,ДопустимаяДлина.Фиксированная)));
	ПравилаПересчета.Колонки.Добавить("Числитель", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный)));
	ПравилаПересчета.Колонки.Добавить("Знаменатель", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный)));
	ПравилаПересчета.Колонки.Добавить("ТипИзмеряемойВеличины", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзмеряемыхВеличин"));
	
	Для Каждого СтрокаДерева из ДеревоЕдиниц.Строки Цикл
		
		ТаблицаПравилПересчетаРекурссивно(СтрокаДерева, ПравилаПересчета);	
		
	КонецЦикла;
	
	ПравилаПересчета.Индексы.Добавить("КодЕдиницыИзмерения");
	
	Возврат ПравилаПересчета; 
КонецФункции

Процедура ТаблицаПравилПересчетаРекурссивно(ТекущаяСтрока, ПравилаПересчета)
	
	Если ТекущаяСтрока.Строки.Количество() = 0
		И Не ПустаяСтрока(ТекущаяСтрока.ТипИзмеряемойВеличины)
		И ТекущаяСтрока.Числитель <> 0
		И ТекущаяСтрока.Знаменатель <> 0 Тогда
		
		НоваяСтрока = ПравилаПересчета.Добавить();
		НоваяСтрока.КодЕдиницыИзмерения = ТекущаяСтрока.КодЧисловой;
		НоваяСтрока.Числитель = ТекущаяСтрока.Числитель;
		НоваяСтрока.Знаменатель = ТекущаяСтрока.Знаменатель;
		НоваяСтрока.ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин[ТекущаяСтрока.ТипИзмеряемойВеличины];
		
	КонецЕсли;
	
	Для каждого СтрокаСледующегоУровна из ТекущаяСтрока.Строки Цикл
		
		ТаблицаПравилПересчетаРекурссивно(СтрокаСледующегоУровна, ПравилаПересчета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьКодыТНВЭДДляСозданияЕдиницОКЕИ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Код КАК Код,
	|	Т.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
	|ПОМЕСТИТЬ ТаблицаКлассификатора
	|ИЗ
	|	&ТаблицаКлассификатора КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК ОбъектыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКлассификатора КАК ТаблицаКлассификатора
	|		ПО ОбъектыДляОбработки.Код = ТаблицаКлассификатора.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Единицы
	|		ПО (ТаблицаКлассификатора.ЕдиницаИзмеренияКод = Единицы.Код)
	|			И (Единицы.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения))
	|ГДЕ
	|	Единицы.Ссылка ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ТаблицаКлассификатора", Справочники.КлассификаторТНВЭД.ТаблицаКлассификатора(0));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СоздатьЕдиницыПоОКЕИДляУказанияВКлассификатореТНВЭД(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.КлассификаторТНВЭД";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Код КАК Код,
	|	Т.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
	|ПОМЕСТИТЬ ТаблицаКлассификатора
	|ИЗ
	|	&ТаблицаКлассификатора КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКлассификатора.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКлассификатора КАК ТаблицаКлассификатора
	|		ПО ОбъектыДляОбработки.Ссылка.Код = ТаблицаКлассификатора.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаКлассификатора", Справочники.КлассификаторТНВЭД.ТаблицаКлассификатора(0));
	Результат = Запрос.ВыполнитьПакет();
	
	МассивКодовОКЕИ = Результат[1].Выгрузить().ВыгрузитьКолонку("ЕдиницаИзмеренияКод");
	СтрокаКодовОКЕИ = СтрСоединить(МассивКодовОКЕИ,",");
	
	НачатьТранзакцию();
	
	Попытка
		СоответствиеКодовОКЕИ = ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СтрокаКодовОКЕИ, Истина);
		Для Каждого Элемент Из СоответствиеКодовОКЕИ Цикл
			Если Элемент.Значение = Неопределено Тогда
				СправочникОбъект = СоздатьЭлемент();
				СправочникОбъект.Код 			= Элемент.Код;
				СправочникОбъект.Наименование 	= СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru = 'ОКЕИ: %1'"),Элемент.Код);
				СправочникОбъект.Владелец		= Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Результат[2].Выгрузить().ВыгрузитьКолонку("Ссылка"),,Параметры.Очередь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		ВызватьИсключение;
	КонецПопытки;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
