
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ТипСклада") Тогда
		ТипаСкладаПриИзмененииСервер();
	КонецЕсли;

	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Ссылка, Справочники.СкладскиеПомещения.ПустаяСсылка()));
	
	ИспользоватьНесколькоВидовЦен = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
		
	УстановитьВидимостьПоФО();
	НастроитьЭлементыФормыПоПравамДоступа();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КонтролироватьОбеспечение = Истина;
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	// silber {
	ЗагрузитьЗоныДоставки();
	ЗагрузитьРегионы();
	Элементы.РегионРегион.СписокВыбора.ЗагрузитьЗначения(АТ_Кэш.ПолучитьМассивРегионов());
	// } silber
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПриЧтенииСОграниченнымиПравами(ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Объект.ЦеховаяКладовая Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Цех");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ПередЗаписьюСОграниченнымиПравами(ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад",Объект.Ссылка));
	УстановитьДоступностьПолей();
	
	Если Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ОповещатьОбОтключенныхУпаковках = Истина;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	ОбновитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Склады",ПараметрыЗаписи,Объект.Ссылка);
	
	НеобходимоОбновлятьИнтерфейс = Ложь;
	
	Для Каждого СтрСтруктуры из КешРеквизитов Цикл
		Если Объект[СтрСтруктуры.Ключ] <> СтрСтруктуры.Значение Тогда
			НеобходимоОбновлятьИнтерфейс = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс();
		
		КешРеквизитовСтуктура = Новый Структура;
		КешРеквизитовСтуктура.Вставить("ИспользоватьСкладскиеПомещения",Объект.ИспользоватьСкладскиеПомещения);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",Объект.ИспользоватьОрдернуюСхемуПриОтгрузке);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении",Объект.ИспользоватьОрдернуюСхемуПриПоступлении);
		КешРеквизитовСтуктура.Вставить("НастройкаАдресногоХранения",Объект.НастройкаАдресногоХранения);
		КешРеквизитовСтуктура.Вставить("ИспользованиеРабочихУчастков",Объект.ИспользованиеРабочихУчастков);
		
		КешРеквизитов = Новый ФиксированнаяСтруктура(КешРеквизитовСтуктура);
		
	КонецЕсли;
	
	Если ОповещатьОбОтключенныхУпаковках Тогда
		ТекстСообщения = НСтр("ru='В настройках учета отключено использование упаковок номенклатуры. Оприходовать товар на склад
		|с хранением остатков в разрезе ячеек без указания упаковок невозможно.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Склады_ЗаполненоПомещениеВСправочникахИРегистрах" Тогда
		Элементы.ЗаполнениеПомещенияВСправочниках.Видимость = Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьНастроекКонтроляОбеспечения" И Параметр = Объект.Ссылка Тогда
		ОбновитьКоличествоИсключений();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Склады.Форма.ЗаполнениеУсловийОтветственногоХранения" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		УстановитьЗаголовокЭлементовОтветственногоХранения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОрдернуюСхемуПриПоступленииПриИзменении(Элемент)
	
	ИспользоватьОрдернуюСхемуПриПоступленииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОрдернуюСхемуПриОтгрузкеПриИзменении(Элемент)
	
	ИспользоватьОрдернуюСхемуПриОтгрузкеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостачПриИзменении(Элемент)
	
	ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостачПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСкладскиеПомещенияПриИзменении(Элемент)
	
	ИспользоватьСкладскиеПомещенияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресногоХраненияОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресногоХраненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НастройкиАдресногоХранения.НеИспользовать"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НастройкиАдресногоХранения.ЯчейкиСправочно"));
	Если Объект.ИспользоватьОрдернуюСхемуПриОтгрузке
		И Объект.ИспользоватьОрдернуюСхемуПриПоступлении
		И Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		И Объект.ТипСклада <> ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.НастройкиАдресногоХранения.ЯчейкиОстатки"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеРабочихУчастковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ИспользованиеСкладскихРабочихУчастков.НеИспользовать"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ИспользованиеСкладскихРабочихУчастков.Использовать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеРабочихУчастковОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТипСкладаПриИзменении(Элемент)
	
	ТипаСкладаПриИзмененииСервер();
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаАдресногоХраненияПриИзменении(Элемент)
	
	НастройкаАдресногоХраненияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОбеспечениеПриИзменении(Элемент)
	ОбновитьКоличествоИсключений();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ГруппаДляРазмещения
		И Не ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУказанияЗаданияНаПеревозкуПриИзменении(Элемент)
	Если ПорядокУказанияЗаданияНаПеревозку = "СобиратьТоварыВПорядкеДоставки" Тогда
		Объект.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = Истина; 
	Иначе
		Объект.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку = Ложь; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦеховаяКладоваяПриИзменении(Элемент)
	ЦеховаяКладоваяПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ЦеховаяКладоваяПриИзмененииСервер()
	
	Если Объект.ЦеховаяКладовая
		И ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "ПроизводственноеПодразделение") Тогда
			Цех = Объект.Подразделение;
		Иначе
			Объект.Подразделение = Неопределено;
		КонецЕсли;
	Иначе
		Цех = Неопределено;
	КонецЕсли;
	
	СкладыКлиентСервер.СогласоватьЗначенияПризнаков(Объект);
	УстановитьДоступностьПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦехПриИзменении(Элемент)
	
	Объект.Подразделение = Цех;
	
КонецПроцедуры

#Область ПроцедурыПодсистемыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

	Если Не Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("Справочник.Склады.Форма.РазблокированиеРеквизитов",,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
        УстановитьДоступностьПолей();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодпитки(Команда)
	ПараметрыФормы = Новый Структура("Ключ",КлючЗаписиНастроекПодпитки());
	ОткрытьФорму("РегистрСведений.НастройкиАдресныхСкладов.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпособовОбеспеченияПотребностей(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Склады.Форма.ФормаЭлемента.Команда.НастройкаСпособовОбеспеченияПотребностей");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для настройки параметров обеспечения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаСпособовОбеспеченияПотребностейЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	НастройкаСпособовОбеспеченияПотребностейФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпособовОбеспеченияПотребностейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
	
	НастройкаСпособовОбеспеченияПотребностейФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпособовОбеспеченияПотребностейФрагмент()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Отбор = Новый Структура("Склад", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, Источник", Отбор, "Склад");
	
	ОткрытьФорму("Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоддержанияЗапасов(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для настройки параметров обеспечения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаПоддержанияЗапасовЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	НастройкаПоддержанияЗапасовФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоддержанияЗапасовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
	
	НастройкаПоддержанияЗапасовФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоддержанияЗапасовФрагмент()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Отбор = Новый Структура("Склад", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, Источник", Отбор, "Склад");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПомещенияВСправочниках(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Чтобы приступить к заполнению реквизита ""Помещение"" в справочниках, необходимо сохранить изменения. Продолжить?'");
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить и продолжить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не продолжать'"));

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнениеПомещенияВСправочникахЗавершение", ЭтотОбъект), ТекстВопроса,Режим);
        Возврат;
	КонецЕсли;
	
	ЗаполнениеПомещенияВСправочникахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПомещенияВСправочникахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    Записать();
    
    ЗаполнениеПомещенияВСправочникахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПомещенияВСправочникахФрагмент()
    
    ПараметрыОбработки = Новый Структура;
    ПараметрыОбработки.Вставить("Склад", Объект.Ссылка);
    ОткрытьФорму("Справочник.Склады.Форма.ЗаполнениеПомещенияВСправочниках",ПараметрыОбработки, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИсключенияКонтроляНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к исключениям контроля обеспечения доступен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ИсключенияКонтроляНажатиеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
		
	КонецЕсли;
	
	ИсключенияКонтроляНажатиеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияКонтроляНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
    ИсключенияКонтроляНажатиеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ИсключенияКонтроляНажатиеФрагмент()
    
    ПараметрыФормы = Новый Структура("Склад, Контролировать", Объект.Ссылка, КонтролироватьОбеспечение);
    ОткрытьФорму("РегистрСведений.НастройкаКонтроляОбеспечения.Форма.ИсключенияПоСкладу", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтветственноеХранение(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УсловияХраненияТоваров", Объект.УсловияХраненияТоваров);
	ПараметрыФормы.Вставить("ОсобыеОтметки", Объект.ОсобыеОтметки);
	ПараметрыФормы.Вставить("СкладОтветственногоХранения", Объект.СкладОтветственногоХранения);
	ПараметрыФормы.Вставить("ВидПоклажедержателя", Объект.ВидПоклажедержателя);
	ПараметрыФормы.Вставить("Поклажедержатель", Объект.Поклажедержатель);
	ПараметрыФормы.Вставить("СрокОтветственногоХранения", Объект.СрокОтветственногоХранения);
	ПараметрыФормы.Вставить("ОтветственноеХранениеДоВостребования", Объект.ОтветственноеХранениеДоВостребования);
	
	ОткрытьФорму("Справочник.Склады.Форма.ЗаполнениеУсловийОтветственногоХранения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ТипаСкладаПриИзмененииСервер()
	
	Если Не ИспользоватьНесколькоВидовЦен Тогда
		Если Объект.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин") Тогда
			Объект.РозничныйВидЦены = Ценообразование.ВидЦеныПрайсЛист();
		КонецЕсли;
	КонецЕсли;
	СкладыКлиентСервер.СогласоватьЗначенияПризнаков(Объект);
	УстановитьДоступностьПолей();
	
КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КешРеквизитовСтуктура = Новый Структура;
		КешРеквизитовСтуктура.Вставить("ИспользоватьСкладскиеПомещения",Объект.ИспользоватьСкладскиеПомещения);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",Объект.ИспользоватьОрдернуюСхемуПриОтгрузке);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении",Объект.ИспользоватьОрдернуюСхемуПриПоступлении);
		КешРеквизитовСтуктура.Вставить("НастройкаАдресногоХранения",Объект.НастройкаАдресногоХранения);
		КешРеквизитовСтуктура.Вставить("ИспользованиеРабочихУчастков",Объект.ИспользованиеРабочихУчастков);
	Иначе
		КешРеквизитовСтуктура = Новый Структура;
		КешРеквизитовСтуктура.Вставить("ИспользоватьСкладскиеПомещения",Ложь);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке",Ложь);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Ложь);
		КешРеквизитовСтуктура.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении",Ложь);
		КешРеквизитовСтуктура.Вставить("НастройкаАдресногоХранения",Перечисления.НастройкиАдресногоХранения.НеИспользовать);
		КешРеквизитовСтуктура.Вставить("ИспользованиеРабочихУчастков",Перечисления.ИспользованиеСкладскихРабочихУчастков.НеИспользовать);
	КонецЕсли;
	
	Если Объект.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку Тогда
		ПорядокУказанияЗаданияНаПеревозку = "СобиратьТоварыВПорядкеДоставки";
	Иначе
		ПорядокУказанияЗаданияНаПеревозку = "ПорядокОтбораТоваровНеЗависитОтПорядкаДоставки";
	КонецЕсли;
		
	КешРеквизитов = Новый ФиксированнаяСтруктура(КешРеквизитовСтуктура);
	
	ОбновитьИнформациюОФорматеМагазина();
	
	Если Объект.ЦеховаяКладовая Тогда
		Цех = Объект.Подразделение;
	КонецЕсли;
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Элементы.ЗаполнениеПомещенияВСправочниках.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.СкладскиеЯчейки)
		И Объект.ИспользоватьСкладскиеПомещения
		И (Справочники.Склады.ИменаОбъектовСПустымПомещением(Объект.Ссылка).Количество() <> 0);
	УстановитьДоступностьПолей();
	ОбновитьКоличествоИсключений();
	УстановитьЗаголовокЭлементовОтветственногоХранения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	Элементы.ДатаНачалаОрдернойСхемыПриПоступлении.Доступность = Объект.ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.ДатаНачалаОрдернойСхемыПриОтгрузке.Доступность = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Элементы.ИспользоватьСтатусыПриходныхОрдеров.Доступность = Объект.ИспользоватьОрдернуюСхемуПриПоступлении;
	Элементы.ИспользоватьСтатусыРасходныхОрдеров.Доступность = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке
		И НЕ Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки
		И НЕ Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения
		И НЕ Объект.ИспользоватьСерииНоменклатуры
		И НЕ Константы.РежимФормированияРасходныхОрдеров.Получить() = Перечисления.РежимыФормированияРасходныхОрдеров.Автоматически;
	
	Элементы.ГруппаДоставка.Доступность = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.ГруппаДоставка.ТолькоПросмотр = Элементы.ИспользоватьОрдернуюСхемуПриОтгрузке.ТолькоПросмотр;
	
	Элементы.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач.Доступность = 
		Не НоменклатураСервер.ЕстьВидНоменклатурыТребующийОбязательностиОрдернойСхемыПоИзлишкамНедостачам();
	Элементы.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач.Доступность = 
		Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
	
	Элементы.ИспользоватьСтатусыПересчетовТоваров.Доступность = 
		Не Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
	Элементы.ИспользоватьСтатусыПересчетовТоваров.ТолькоПросмотр = 
		Не Элементы.ИспользоватьСтатусыПересчетовТоваров.Доступность;
	
	Элементы.ИспользоватьСкладскиеПомещения.Доступность = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке
		И Объект.ИспользоватьОрдернуюСхемуПриПоступлении
		И Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
	Элементы.ДатаНачалаИспользованияСкладскихПомещений.Доступность = Объект.ИспользоватьСкладскиеПомещения;
	
	Элементы.НастройкаАдресногоХранения.ТолькоПросмотр = Объект.ИспользоватьСкладскиеПомещения
		Или Элементы.ИспользоватьОрдернуюСхемуПриОтгрузке.ТолькоПросмотр;
	
	Если Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки Тогда
		Элементы.СтраницыНастройкиПодпитки.ТекущаяСтраница = Элементы.СтраницаНастройкиПодпиткиГиперссылка;
		Элементы.СтраницыДатаНачалаАдресногоХраненияОстатков.ТекущаяСтраница = 
			Элементы.СтраницаДатаНачалаАдресногоХраненияОстатковДата;
	Иначе
		Элементы.СтраницыНастройкиПодпитки.ТекущаяСтраница = Элементы.СтраницаНастройкиПодпиткиПустая;
		Элементы.СтраницыДатаНачалаАдресногоХраненияОстатков.ТекущаяСтраница = 
			Элементы.СтраницаДатаНачалаАдресногоХраненияОстатковПустая;
	КонецЕсли;
		
	Элементы.ИспользованиеРабочихУчастков.ТолькоПросмотр = 
		Не Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки
		И Не Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиСправочно;
	
	Элементы.ДекорацияЯчейки.Видимость = (Объект.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	
	Элементы.Цех.Доступность               = Объект.ЦеховаяКладовая;
	Элементы.Цех.АвтоОтметкаНезаполненного = Объект.ЦеховаяКладовая;
	
	Элементы.Подразделение.Доступность               = Не Объект.ЦеховаяКладовая;
	Элементы.Подразделение.АвтоОтметкаНезаполненного = Ложь;
	
	Элементы.ИспользоватьОрдернуюСхемуПриПоступлении.Доступность = Не Объект.ЦеховаяКладовая;
	Элементы.ИспользоватьОрдернуюСхемуПриОтгрузке.Доступность    = Не Объект.ЦеховаяКладовая;
	
	УстановитьДоступностьРозничногоВидаЦенИФормата();
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьЗначенияИУстановитьДоступность()
	
	СкладыКлиентСервер.СогласоватьЗначенияПризнаков(Объект);
	УстановитьДоступностьПолей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРозничногоВидаЦенИФормата()
	
	ЭтоРозничныйСклад = (Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
	
	ДоступенРозничныйВидЦен = ЭтоРозничныйСклад;
	
	Элементы.КонтролироватьАссортимент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи") 
													И ЭтоРозничныйСклад;
	ЕстьНастройкиАссортимента = ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов")
								ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") 
								И ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи")
								И ЭтоРозничныйСклад;
	Элементы.ГруппаАссортимент.Видимость = ЕстьНастройкиАссортимента;
	
	Элементы.УстановитьНовыйФормат.Видимость = ЕстьНастройкиАссортимента И 
		ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ИсторияИзмененияФорматовМагазинов);
	Элементы.ОткрытьИсториюИзмененияФорматов.Видимость = ЕстьНастройкиАссортимента 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИсторияИзмененияФорматовМагазинов);
	
	Если ЭтоРозничныйСклад Тогда
	
		Элементы.ФорматМагазина.Заголовок = НСтр("ru = 'Формат магазина'");
	
	Иначе
	
		Элементы.ФорматМагазина.Заголовок = НСтр("ru = 'Формат склада'");
	
	КонецЕсли; 
	
	Если КонтролироватьАссортимент Тогда
		ДоступенРозничныйВидЦен = Ложь;
	КонецЕсли;
	
	Элементы.РозничныйВидЦены.Доступность = ДоступенРозничныйВидЦен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоФО()
	
	Элементы.ГруппаТипСклада.Видимость                              = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	Элементы.ДекорацияРозничныйВидЦены.Видимость                    = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	Элементы.РозничныйВидЦены.Видимость                             = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	Элементы.ГруппаАссортимент.Видимость                            = ПолучитьФункциональнуюОпцию("ИспользоватьФорматыМагазинов")
																		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") 
																		И ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи")
																		И Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	Элементы.КонтролироватьАссортимент.Видимость                    = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи")
																		И Объект.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
	Элементы.ОрдернаяСхема.Видимость 								= ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	Элементы.ГруппаДоставка.Видимость                               = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	
	Элементы.Родитель.Видимость                                     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенноеОбеспечениеПотребностей");
	Элементы.НастройкаПоддержанияЗапасов.Видимость                  = ИспользоватьРасширенноеОбеспечениеПотребностей;
	Элементы.НастройкаСпособовОбеспеченияПотребностей.Видимость     = ИспользоватьРасширенноеОбеспечениеПотребностей;
	
	Элементы.ВидыЦенОтступ.ОтображатьЗаголовок                      = Элементы.ГруппаТипСклада.Видимость;
	Элементы.КонтрольОтступ.ОтображатьЗаголовок                     = Элементы.ГруппаТипСклада.Видимость
	                                                                  Или Элементы.ВидыЦенОтступ.Видимость;
																	  
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Элементы.ГруппаЦеховаяКладовая.Видимость = Ложь;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		Элементы.ГруппаСтраницыВидыЦен.ТекущаяСтраница = Элементы.ГруппаСтраницыВидыЦен.ПодчиненныеЭлементы.ГруппаИспользоватьНесколькоВидовЦен;
	Иначе
		Элементы.ГруппаСтраницыВидыЦен.ТекущаяСтраница = Элементы.ГруппаСтраницыВидыЦен.ПодчиненныеЭлементы.ГруппаИспользоватьОдинВидЦены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПоПравамДоступа()

	// Элементы группы "Контроль остатков и обеспечение".
	ЧтениеНастройкаКонтроляОбеспечения = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения);
	ИзменениеНастройкаКонтроляОбеспечения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения);
	Элементы.КонтролироватьОбеспечение.Видимость = ЧтениеНастройкаКонтроляОбеспечения;
	Элементы.КонтролироватьОбеспечение.Доступность = ИзменениеНастройкаКонтроляОбеспечения;
	Элементы.ИсключенияКонтроля.Видимость = ЧтениеНастройкаКонтроляОбеспечения;

	// Элементы могли быть отключены по ФО.

	Если Элементы.НастройкаПоддержанияЗапасов.Видимость Тогда
		
		ПросмотрНастройкаПоддержанияЗапасов = ПравоДоступа("Просмотр", Метаданные.Обработки.НастройкаПоддержанияЗапасов);
		Элементы.НастройкаПоддержанияЗапасов.Видимость = ПросмотрНастройкаПоддержанияЗапасов;
		
	КонецЕсли;
	
	Если Элементы.НастройкаСпособовОбеспеченияПотребностей.Видимость Тогда
		
		ПросмотрНастройкаСпособовОбеспеченияПотребностей = ПравоДоступа("Просмотр",
			Метаданные.Обработки.НастройкаСпособовОбеспеченияПотребностей);
		Элементы.НастройкаСпособовОбеспеченияПотребностей.Видимость = ПросмотрНастройкаСпособовОбеспеченияПотребностей;
		
	КонецЕсли;

	ПравоРедактированияСклада = ПравоДоступа("Изменение", Метаданные.Справочники.Склады);
	
	Элементы.ПорядокУказанияЗаданияНаПеревозку1.Доступность = ПравоРедактированияСклада;
	Элементы.ПорядокУказанияЗаданияНаПеревозку2.Доступность = ПравоРедактированияСклада;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСОграниченнымиПравами(ТекущийОбъект)

	// Реквизиты группы "Контроль остатков и обеспечение".

	НастройкаКонтроляОбеспечения = Неопределено;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения) Тогда
		НастройкаКонтроляОбеспечения = РегистрыСведений.НастройкаКонтроляОбеспечения.НастройкаСклада(Объект.Ссылка);
	КонецЕсли;

	Если ЗначениеЗаполнено(НастройкаКонтроляОбеспечения) Тогда
		КонтролироватьОбеспечение = НастройкаКонтроляОбеспечения;
	Иначе
		КонтролироватьОбеспечение = ТекущийОбъект.КонтролироватьОбеспечение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСОграниченнымиПравами(ТекущийОбъект)

	// Сохранение данных в реквизитах.
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения) Тогда
		ТекущийОбъект.КонтролироватьОбеспечение = КонтролироватьОбеспечение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КлючЗаписиНастроекПодпитки()
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Склад", Объект.Ссылка);
	СтруктураИзмерений.Вставить("Помещение", Справочники.СкладскиеПомещения.ПустаяСсылка());
	
	Возврат РегистрыСведений.НастройкиАдресныхСкладов.СоздатьКлючЗаписи(СтруктураИзмерений);
КонецФункции

&НаСервере
Процедура ИспользоватьОрдернуюСхемуПриПоступленииПриИзмененииСервер()
	
	СогласоватьЗначенияИУстановитьДоступность();
	Если НЕ Объект.ИспользоватьОрдернуюСхемуПриПоступлении
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);
	Запрос.Текст = Справочники.Склады.ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриПоступлении();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
		Объект.ДатаНачалаОрдернойСхемыПриПоступлении = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	Иначе
		Элементы.ДатаНачалаОрдернойСхемыПриПоступлении.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОрдернуюСхемуПриОтгрузкеПриИзмененииСервер()
	
	СогласоватьЗначенияИУстановитьДоступность();
	Объект.КонтролироватьОперативныеОстатки    = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке;
	Объект.ИспользоватьСтатусыРасходныхОрдеров = Объект.ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Если НЕ Объект.ИспользоватьОрдернуюСхемуПриОтгрузке
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);
	Запрос.Текст = Справочники.Склады.ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриОтгрузке();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
		Объект.ДатаНачалаОрдернойСхемыПриОтгрузке = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	Иначе
		Элементы.ДатаНачалаОрдернойСхемыПриОтгрузке.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостачПриИзмененииСервер()
	
	СогласоватьЗначенияИУстановитьДоступность();
	Если НЕ Объект.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);
	Запрос.Текст = Справочники.Склады.ТекстЗапросаПоДокументамЗависящимОтОрдернойСхемыПриОтраженииИзлишковНедостач();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
		Объект.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	Иначе
		Элементы.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСкладскиеПомещенияПриИзмененииСервер()
	
	СогласоватьЗначенияИУстановитьДоступность();
	
	Элементы.ЗаполнениеПомещенияВСправочниках.Видимость = ПравоДоступа("Изменение", Метаданные.Справочники.СкладскиеЯчейки)
		И Объект.ИспользоватьСкладскиеПомещения
		И (Справочники.Склады.ИменаОбъектовСПустымПомещением(Объект.Ссылка).Количество() <> 0);
	
	Если НЕ Объект.ИспользоватьСкладскиеПомещения
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);
	Запрос.Текст = Справочники.Склады.ТекстЗапросаПоДокументамЗависящимОтИспользованияСкладскихПомещений();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
		Объект.ДатаНачалаИспользованияСкладскихПомещений = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	Иначе
		Элементы.ДатаНачалаИспользованияСкладскихПомещений.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаАдресногоХраненияПриИзмененииСервер()
	
	СогласоватьЗначенияИУстановитьДоступность();
	
	Если НЕ (Объект.НастройкаАдресногоХранения = Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);
	Запрос.Текст = Справочники.Склады.ТекстЗапросаПоДокументамЗависящимОтИспользованияАдресногоХранения();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		РекомендуемаяДата = Выборка.Дата + 60 * 60 * 24;
		Объект.ДатаНачалаАдресногоХраненияОстатков = Макс(ТекущаяДатаСеанса(), РекомендуемаяДата);
	Иначе
		Элементы.ДатаНачалаАдресногоХраненияОстатков.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоИсключений()
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкаКонтроляОбеспечения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкаКонтроляОбеспечения.Номенклатура) КАК КоличествоИсключений
		|ИЗ
		|	РегистрСведений.НастройкаКонтроляОбеспечения КАК НастройкаКонтроляОбеспечения
		|ГДЕ
		|	НастройкаКонтроляОбеспечения.Склад = &Склад
		|	И НастройкаКонтроляОбеспечения.Контролировать = &Контролировать
		|	И НастройкаКонтроляОбеспечения.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("Контролировать",  НЕ КонтролироватьОбеспечение);
	Запрос.УстановитьПараметр("Склад", Объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	КоличествоИсключений = 0;
	Если Выборка.Следующий() Тогда
		КоличествоИсключений = Выборка.КоличествоИсключений;
	КонецЕсли;
	
	ЗаголовокКоличествоИсключений = НСтр("ru='Исключения (%КоличествоИсключений%)'");
	ЗаголовокКоличествоИсключений = СтрЗаменить(ЗаголовокКоличествоИсключений, "%КоличествоИсключений%", КоличествоИсключений);
	
	Элементы.ИсключенияКонтроля.Заголовок = ЗаголовокКоличествоИсключений;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОткрытьИсториюИзмененияФорматов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
	
		ТекстВопроса = НСтр("ru = 'Для открытия истории изменения настроек магазина, необходимо записать элемент. Записать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("ОткрытьИсториюИзмененияФорматовЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		Возврат;
	
	КонецЕсли;
	
	ОткрытьИсториюИзмененияФорматовОткрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйНастройки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
	
		ТекстВопроса = НСтр("ru = 'Для установки настроек магазина, необходимо записать элемент. Записать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("УстановитьНовыйФорматЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		Возврат;
	
	КонецЕсли; 
	
	УстановитьНовыйФорматОткрытьФорму();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйФорматЗавершение(Результат, ДоплнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
			УстановитьНовыйФорматОткрытьФорму();
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюИзмененияФорматовЗавершение(Результат, ДоплнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
			ОткрытьИсториюИзмененияФорматовОткрытьФорму();
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйФорматОткрытьФорму()

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Склад", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ФорматМагазина", ФорматМагазина);
	ЗначенияЗаполнения.Вставить("КонтролироватьАссортимент", КонтролироватьАссортимент);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Оповещение = Новый ОписаниеОповещения("ФормаИсторияИзмененияФорматовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ИсторияИзмененияФорматовМагазинов.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюИзмененияФорматовОткрытьФорму()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Объект.Ссылка);
	
	Оповещение = Новый ОписаниеОповещения("ФормаИсторияИзмененияФорматовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ИсторияИзмененияФорматовМагазинов.Форма.ФормаРедактирования", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаИсторияИзмененияФорматовЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	ОбновитьИнформациюОФорматеМагазина();

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОФорматеМагазина()

	НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиАссортимента);
	Если НЕ ЗначениеЗаполнено(ФорматМагазина) Тогда
		ФорматМагазина = НСтр("ru = '<не установлен>'");
		Элементы.ФорматМагазина.Гиперссылка = Ложь;
	Иначе
		Элементы.ФорматМагазина.Гиперссылка = Истина;
	КонецЕсли; 
	
	УстановитьДоступностьРозничногоВидаЦенИФормата();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЭлементовОтветственногоХранения(Форма)
	
	СкладОтветственногоХранения = Форма.Объект.СкладОтветственногоХранения;
	
	Форма.Элементы.НастроитьОтветственноеХранение.Заголовок = ?(СкладОтветственногоХранения, 
		НСтр("ru='Товары находятся на ответственном хранении'"),
		НСтр("ru='Настроить ответственное хранение'"));
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма)

	Форма.АвтоЗаголовок = Ложь;
		
	Если Форма.Объект.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыСкладов.РозничныйМагазин") Тогда
		ПредставлениеЗаголовка = НСтр("ru = 'Магазин'");
	Иначе
		ПредставлениеЗаголовка = НСтр("ru = 'Склад'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Форма.Заголовок = ПредставлениеЗаголовка + " (" + НСтр("ru='создание'") + ")";
	Иначе
		Форма.Заголовок = Форма.Объект.Наименование + " (" + ПредставлениеЗаголовка + ")";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// silber {

&НаСервере
Процедура ЗагрузитьЗоныДоставки()
	
	Запрос = Новый Запрос("ВЫБРАТЬ Зона ИЗ РегистрСведений.АТ_ЗапрещенныеЗоныДоставки ГДЕ Склад = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ЗапрещенныеЗоныДоставки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Зона"));
	
КонецПроцедуры
&НаСервере
Процедура СохранитьЗоныДоставки(Ссылка)
	
	Набор = РегистрыСведений.АТ_ЗапрещенныеЗоныДоставки.СоздатьНаборЗаписей();
	Набор.Отбор.Склад.Установить(Объект.Ссылка);
	Набор.Заполнить(Новый Структура("Склад, Зоны", 
								Ссылка, 
								ЗапрещенныеЗоныДоставки.ВыгрузитьЗначения()));
	Набор.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьЗоныДоставки(ТекущийОбъект.Ссылка);
	СохранитьРегионы(ТекущийОбъект.Ссылка);
	
КонецПроцедуры


Процедура ЗагрузитьРегионы()
	
	Запрос = Новый Запрос("ВЫБРАТЬ УдалитьРегион ИЗ РегистрСведений.АТ_ДоступныеСклады ГДЕ Склад = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Регион.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
Процедура СохранитьРегионы(Ссылка)
	
	Таб = Регион.Выгрузить();
	Таб.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таб.ЗаполнитьЗначения(Объект.Ссылка, "Склад");
	
	Набор = РегистрыСведений.АТ_ДоступныеСклады.СоздатьНаборЗаписей();
	Набор.Отбор.Склад.Установить(Объект.Ссылка);
	Набор.Загрузить(Таб);
	Набор.Записать();
	
КонецПроцедуры

// } silber
