
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ОтказОткрытияФормы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	УстановитьУсловноеОформление();
	
	ЕстьПравоРедактирования = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИспользоватьПроизводство     = Справочники.ВидыНоменклатуры.ИспользоватьПроизводство();
		ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
		
		ЭтаФорма.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		Элементы.ГруппаНаименованиеДляПечатиКолонки.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
	Иначе
		
		ПриЧтенииСозданииНаСервере();
		
		ТолькоОбщие = Ложь;
		
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
		
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовНоменклатуры, 
				Параметры.ЗначениеКопирования.НаборСвойств, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовХарактеристик, 
				Параметры.ЗначениеКопирования.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовСерий, 
				Параметры.ЗначениеКопирования.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийНоменклатуры, 
				Параметры.ЗначениеКопирования.НаборСвойств, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
				"Сведения",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийХарактеристик, 
				Параметры.ЗначениеКопирования.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийСерий, 
				Параметры.ЗначениеКопирования.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
			//Заполнить дополнительные реквизиты для контроля.
			КоллекцияРеквизитовДляКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(Объект, "Номенклатура");
			НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
			
			Для Каждого ДополнительныеРеквизиты Из Параметры.ЗначениеКопирования.НаборСвойств.ДополнительныеРеквизиты Цикл
				
				ДобавляемоеСвойство = ДополнительныеРеквизиты.Свойство;
				ТипЗначения = ДобавляемоеСвойство.ТипЗначения;
				НоваяСтрока = КоллекцияРеквизитовДляКонтроля.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ДобавляемоеСвойство;
				НоваяСтрока.ПредставлениеРеквизита = Строка(ДобавляемоеСвойство);
				НоваяСтрока.Свойство = ДобавляемоеСвойство;
				НоваяСтрока.ЭтоДопРеквизит = Истина;
				НоваяСтрока.ОбязателенДляЗаполнения = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				НоваяСтрока.ОтображатьПриСоздании = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				
				УсловияДоступности = УсловияДоступности();
				УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = (НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы.Найти(ТипЗначения) <> Неопределено);
				УсловияДоступности.ТипРеквизитаБулево = (ТипЗначения =  Новый ОписаниеТипов("Булево"));
				УсловияДоступности.ЗаполнятьОбязательно = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				
				УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(НоваяСтрока, УсловияДоступности);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаРеквизитовДляОткрытияФормыНастройкаСоставаРеквизитовСерии =
		Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаСоставаРеквизитовСерии("ОткрытиеФормыРедактирования");
		
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ОтказОткрытияФормы = Истина;
		Возврат;
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование" Тогда
		Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати = Истина;
	Иначе
		Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыНоменклатуры");
	Прочитать();
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "ХарактеристикиНоменклатуры");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "СерииНоменклатуры");
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "ХарактеристикиНоменклатуры");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборРеквизитовВТаблицуОтбора" Тогда
		
		// При подборе элемента в таблицу реквизитов отбора номенклатуры или характеристик.
		Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
		
		Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораНоменклатуры;
			
		ИначеЕсли ТекущийТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораХарактеристик;
			
		КонецЕсли;
		
		Для каждого ПараметрыСтроки Из Параметр.МассивДобавляемых Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ПараметрыСтроки);
			
			РеквизитНеНайден = (ТЧРеквизитовОтбора.НайтиСтроки(Отбор).Количество() = 0);
			
			Если РеквизитНеНайден Тогда
				
				НоваяСтрока = ТЧРеквизитовОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений"
	 ИЛИ ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения" Тогда
		
		// При записи набора доп.реквизитов (сведений), например: 
		// открыли форму редактирования общих доп.реквизитов (сведений) и записали его.
		ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ВидыНоменклатуры" Тогда
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьСлужебныеРеквизиты();
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстСообщенияНеЗаполненаПолитика = НСтр("ru = 'Не заполнена колонка ""Политика учета серий"" для склада ""%1"" списка ""Политики учета серий"".'");
	ТекстСообщенияНеЗаполненСклад = НСтр("ru = 'Не заполнена колонка ""Склад"" в списке ""Политики учета серий"".'");
	
	ОшибкиЗаполнения = Неопределено;
	Для ИндексСтроки = 0 По Объект.ПолитикиУчетаСерий.Количество() - 1 Цикл
		
		Строка = Объект.ПолитикиУчетаСерий[ИндексСтроки];
		
		Если Не Строка.СоответствуетПолитикеПоУмолчанию
			И Не ЗначениеЗаполнено(Строка.Склад) Тогда
			ТекстСообщения = ТекстСообщенияНеЗаполненСклад;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиЗаполнения,
				"Объект.ПолитикиУчетаСерий[%1].Склад",
				ТекстСообщения,
				,
				,
				,
				ИндексСтроки);
		ИначеЕсли Не Строка.СоответствуетПолитикеПоУмолчанию
			И Не ЗначениеЗаполнено(Строка.ПолитикаУчетаСерий) Тогда
			ТекстСообщения = СтрШаблон(ТекстСообщенияНеЗаполненаПолитика, Строка.Склад);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиЗаполнения,
				"Объект.ПолитикиУчетаСерий[%1].ПолитикаУчетаСерий",
				ТекстСообщения,
				,
				,
				,
				ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиЗаполнения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипНоменклатурыСтрокойОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьТипНоменклатуры" Тогда
		ОписанияОповещения = Новый ОписаниеОповещения("ТипНоменклатурыПриИзмененииКлиент", ЭтотОбъект);
		ОткрытьФорму("Перечисление.ТипыНоменклатуры.Форма.ВыборТипаНоменклатуры",
					Новый Структура("ТипНоменклатуры,ОсобенностьУчета", Объект.ТипНоменклатуры, Объект.ОсобенностьУчета),
					ЭтотОбъект,
					,
					,
					,
					ОписанияОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиПриИзменении(Элемент)
	
	ИспользоватьХарактеристикиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеХарактеристикПриИзменении(Элемент)
	
	Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры") Тогда
		ВыбратьВидВладелец("Характеристик");
	Иначе
		Объект.ВладелецХарактеристик = Неопределено;
		НастроитьФорму();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТоварныхКатегорийПриИзменении(Элемент)
	Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры = 
		НастройкаТоварныхКатегорий = "ОбщиеСДругимВидомНоменклатуры";
	
	Если Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
		ВыбратьВидВладелец("ТоварныхКатегорий");
	Иначе
		Объект.ВладелецТоварныхКатегорий = Неопределено;
		НастроитьФорму();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииПриИзменении(Элемент)
	
	ИспользоватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
		ИспользованиеУпаковок = "";
	Иначе
		Объект.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Объект.НоменклатураМногооборотнаяТара   = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
		ИспользованиеУпаковок = "ОбщийНабор";
	КонецЕсли;
	
	ИспользоватьУпаковкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставляетсяВМногооборотнойТареПриИзменении(Элемент)
	
	Если Не Объект.ПоставляетсяВМногооборотнойТаре Тогда
		Объект.НоменклатураМногооборотнаяТара   = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураМногооборотнаяТараПриИзменении(Элемент)
	
	Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыДляКонтроляИОтбора()
	
	Если Не (ТекущийТипВладельцаНабораЭлементов = "Номенклатура" 
		Или ТекущийТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры"
		Или ТекущийТипВладельцаНабораЭлементов = "СерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	// Если редактируется состав набора общих дополнительных сведений,
	// то изменять состав реквизитов для контроля и отбора не нужно.
	Если ТекущийТипЭлемента = "ДопСведение" Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ВидыНоменклатуры.ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, ТекущийТипВладельцаНабораЭлементов);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере()
	
	Если НЕ Модифицированность Тогда
		Прочитать();
	Иначе
		ИзменитьРеквизитыДляКонтроляИОтбора();
		ЗаполнитьСпискиДопРеквизитовСведений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОказанияУслугПриИзменении(Элемент)
	ВариантОказанияУслугПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантОказанияУслугПриИзмененииНаСервере()
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "Номенклатура");
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "ХарактеристикиНоменклатуры");
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекСерийПриИзменении(Элемент)
	Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры 
		= ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
	Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
		ВыбратьВидВладелец("Серий");
		Объект.ПолитикиУчетаСерий.Очистить();
	Иначе
		Объект.ВладелецСерий = Неопределено;
		НастроитьФорму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВладелецХарактеристикОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Характеристик", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Серий", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецТоварныхКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "ТоварныхКатегорий", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНастройкаСерийПоСкладам1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Ограничения" Тогда
		ТекстСообщения = НСтр("ru = 'Есть склады, для которых не включено использование ордерной схемы при отражении излишков, недостач и порчи. Поэтому единой политикой учета серий может быть только политика со справочным указанием серий, которая не требует указания серий при отражении излишков.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокПриИзменении(Элемент)
	Если ИспользованиеУпаковок = "ИндивидуальныйНабор" Тогда
		Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	Иначе
		Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаИспользованияСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьНастройкуИспользованияСерий" Тогда
			
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзменении", ЭтотОбъект);
		
		ТекущиеРеквизиты = Новый Структура(ИменаРеквизитовДляОткрытияФормыНастройкаСоставаРеквизитовСерии);
		
		ЗаполнитьЗначенияСвойств(ТекущиеРеквизиты, Объект);
		
		ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.НастройкаСоставаРеквизитовСерии",
					ТекущиеРеквизиты,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикаУчетаСерийПриИзменении(Элемент)
	
	Если Не ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий Тогда
		УстановитьПолитикуУчетаСерийПоУмолчанию();
	КонецЕсли;
	
	ДействиеПриИзмененииПолитикУчетаСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьИндивидуальныеНастройкиПолитикиУчетаСерийПриИзменении(Элемент)
	
	Если Объект.ПолитикиУчетаСерий.Количество() > 0
		И ЕстьПолитикиУчетаСерийНеПоУмолчанию
		И Не ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий Тогда
		
		ВТЧУказываютсяСкладыИПодразделения = ИспользоватьНесколькоСкладов И ИспользоватьПроизводство;
	
		Если ВТЧУказываютсяСкладыИПодразделения Тогда 
			ТекстВопроса = Нстр("ru = 'Для всех складов и производственных подразделений будет установлена общая политика учета серий.'");
		ИначеЕсли ИспользоватьНесколькоСкладов Тогда
			ТекстВопроса = Нстр("ru = 'Для всех складов будет установлена общая политика учета серий.'");
		Иначе
			ТекстВопроса = Нстр("ru = 'Для всех производственных подразделений будет установлена общая политика учета серий.'");
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЕстьИндивидуальныеНастройкиПолитикиУчетаСерийПриИзмененииЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НастроитьФорму();
	ОбновитьПредупреждениеПоСкладуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСУПокупателяПриИзменении(Элемент)
	
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолитикиУчетаСерий

&НаКлиенте
Процедура ПолитикиУчетаСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПолитикиУчетаСерийСклад" 
		И (Элементы.ПолитикиУчетаСерий.ТолькоПросмотр ИЛИ ТолькоПросмотр) Тогда
			
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Склад);
		
	ИначеЕсли Поле.Имя = "ПолитикиУчетаСерийПолитикаУчетаСерий" 
		И (Элементы.ПолитикиУчетаСерий.ТолькоПросмотр ИЛИ ТолькоПросмотр) Тогда
			
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ПолитикаУчетаСерий);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПриАктивизацииСтроки(Элемент)
	Если Элементы.ПолитикиУчетаСерий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ПолитикиУчетаСерий.ТекущиеДанные.Склад) Тогда 
		ПодключитьОбработчикОжидания("ОбновитьПредупреждениеПоСкладуКлиент", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ТекущиеДанные.ЭтоПолитикаДляСклада = Не ЗначениеЗаполнено(ТекущиеДанные.Склад)
											 Или ТипЗнч(ТекущиеДанные.Склад) = Тип("СправочникСсылка.Склады");
		
		ПослеДобавленияНовогоСкладаПодразделенияВПолитикиУчетаСерий(ТекущиеДанные.Склад, ТекущиеДанные.ПолитикаУчетаСерий);
	КонецЕсли;
	ОбновитьПредупреждениеПоСкладуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПолитикиУчетаСерийПередУдалениемНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолитикиУчетаСерийПередУдалениемНаСервере()
	
	ИдентификаторыВыделенныхСтрок = Элементы.ПолитикиУчетаСерий.ВыделенныеСтроки;
	
	Если ИдентификаторыВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		Строка = Объект.ПолитикиУчетаСерий.НайтиПоИдентификатору(ИдСтроки);
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Склад", Строка.Склад);
			
			НайденныеСтроки = Объект.ПолитикиУчетаСерий.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				// Удалить строку если есть несколько строк по текущему складу
				Объект.ПолитикиУчетаСерий.Удалить(Строка);
			Иначе
				// Скрыть строку если это единственная строка по складу
				Строка.ПолитикаУчетаСерий = Объект.ПолитикаУчетаСерий;
			КонецЕсли;
		Иначе
			Объект.ПолитикиУчетаСерий.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ДействиеПриИзмененииПолитикУчетаСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПолитикаУчетаСерийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
		ПослеДобавленияНовогоСкладаПодразделенияВПолитикиУчетаСерий(ТекущиеДанные.Склад, ТекущиеДанные.ПолитикаУчетаСерий)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УдалитьПустыеСтрокиПолитикУчетаСерий();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовНоменклатуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений("ДопРеквизит", "Номенклатура", Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовХарактеристик

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"ХарактеристикиНоменклатуры", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовСерий

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"СерииНоменклатуры", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "СерииНоменклатуры");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопСведенийНоменклатуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Номенклатура", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "Номенклатура");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицадДопСведенийХарактеристик

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"ХарактеристикиНоменклатуры", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопСведенийСерий

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"СерииНоменклатуры", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыДляКонтроляНоменклатуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДопРеквизит И Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииФлагаУникален("Номенклатура", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаУникален(ВладелецРеквизитов, ИдентификаторСтрокиТаблицы); 
	Справочники.ВидыНоменклатуры.ПриИзмененииФлагаУникален(Объект, "Номенклатура", ИдентификаторСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = Не ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииФлагаОбязателенДляЗаполнения("Номенклатура", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыДляКонтроляХарактеристик

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииФлагаУникален("ХарактеристикиНоменклатуры", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = Не ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыБыстрогоОтбораНоменклатуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Модифицированность Тогда
		ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатуры()
	Иначе
		ИзмененитьПанельБыстрогоОтбораНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыБыстрогоОтбораХарактеристик

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.НаборСвойствХарактеристик) Тогда
		ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристики() 
	Иначе
		ИзмененитьПанельБыстрогоОтбораХарактеристики();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитов(Команда)
	
	ОчиститьСообщения();
	ВключитьПроверкуЗаполненияДляРеквизитовНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияНоменклатуры(Команда)
	ИзменениеВРедактореШаблона("РабочегоНаименованияНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияСерии(Команда)
	
	ИзменениеВРедактореШаблона("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиНоменклатуры(Команда)
	
	ИзменениеВРедактореШаблона("НаименованияДляПечатиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияХарактеристики(Команда)
	
	ИзменениеВРедактореШаблона("РабочегоНаименованияХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиХарактеристики(Команда)
	
	ИзменениеВРедактореШаблона("НаименованияДляПечатиХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкладВПолитикиУчетаСерий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСкладВПолитикиУчетаСерийЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, Элементы.ПолитикиУчетаСерийСклад,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделениеВПолитикиУчетаСерий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПодразделениеВПолитикиУчетаСерийЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ПараметрыОтбора = Новый Структура("ПроизводственноеПодразделение", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.ПолитикиУчетаСерийСклад,,,,ОписаниеОповещения);
	
КонецПроцедуры

#Область КомандыДопРеквизитовИСведений

&НаКлиенте
Процедура СоздатьНовыйРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "ХарактеристикиНоменклатуры", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "ХарактеристикиНоменклатуры", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "СерииНоменклатуры", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "СерииНоменклатуры", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "ХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "ХарактеристикиНоменклатуры", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "ХарактеристикиНоменклатуры", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "СерииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "СерииНоменклатуры", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "СерииНоменклатуры", "ПоОбразцу");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляРедактированияТаблицДопРеквизитовСведений

&НаКлиенте
Функция КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	СтруктураКоманд = Новый Структура;
	СтруктураКоманд.Вставить("Удалить");
	СтруктураКоманд.Вставить("ПереместитьВверх");
	СтруктураКоманд.Вставить("ПереместитьВниз");
	
	СтруктураКоманд.Вставить("КонтекстноеМенюУдалить");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВверх");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВниз");
	
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	СтруктураКоманд.Удалить                         = ИмяТаблицыДопРеквизитовСведений + "Удалить";
	СтруктураКоманд.ПереместитьВверх                = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВверх";
	СтруктураКоманд.ПереместитьВниз                 = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВниз";
	
	СтруктураКоманд.КонтекстноеМенюУдалить          = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюУдалить";
	СтруктураКоманд.КонтекстноеМенюПереместитьВверх = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВверх";
	СтруктураКоманд.КонтекстноеМенюПереместитьВниз  = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВниз";
	
	Возврат СтруктураКоманд;
	
КонецФункции

&НаКлиенте
Функция ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат Элементы.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат Элементы.ТаблицаДопСведенийСерий;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаДопРеквизитов(Форма, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат Форма.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат Форма.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат Форма.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат Форма.ТаблицаДопСведенийСерий;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопРеквизитовНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат "ТаблицаДопРеквизитовХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат "ТаблицаДопРеквизитовСерий";
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопСведенийНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			Возврат "ТаблицаДопСведенийХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			Возврат "ТаблицаДопСведенийСерий";
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат Объект.НаборСвойств;
	ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
		Возврат Объект.НаборСвойствХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
		Возврат Объект.НаборСвойствСерий;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДопРеквизитСведение(ТипЭлемента, ТипВладельцаНабораЭлементов, Вид = "")
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Добавление дополнительных свойств возможно только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьДопРеквизитСведениеЗавершение", ЭтотОбъект, Новый Структура("Вид, ТипВладельцаНабораЭлементов, ТипЭлемента", Вид, ТипВладельцаНабораЭлементов, ТипЭлемента)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеФрагмент(Знач Вид, Знач ТипВладельцаНабораЭлементов, Знач ТипЭлемента)
    
    Перем НаборДопРеквизитовСведений, ПараметрыФормы;
    
    ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
    ТекущийТипЭлемента = ТипЭлемента;
    
    НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
    Если НЕ ЗначениеЗаполнено(НаборДопРеквизитовСведений) Тогда
        Возврат;
	КонецЕсли;
	
	ВерсияДанныхТекущегоНабора = ПолучитьВерсиюДанныхНабора(НаборДопРеквизитовСведений);
	
	ПараметрыФормы = Новый Структура;
	
	Если Вид = "Общее" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие");
		ИначеЕсли ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие");
		ИначеЕсли ТипВладельцаНабораЭлементов = "СерииНоменклатуры" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие");
		Иначе
			НаборДопРеквизитовСведений = Неопределено;
		КонецЕсли;
	ИначеЕсли Вид = "ПоОбразцу" Тогда
		Если ТипЭлемента = "ДопРеквизит" Тогда 
			ПараметрыФормы.Вставить("ВыборВладельцаДополнительныхЗначений", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборОбщегоСвойства", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НаборСвойств", НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ТипЭлемента <> "ДопРеквизит");
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
					ПараметрыФормы,
					ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов),
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Вид = ДополнительныеПараметры.Вид;
    ТипВладельцаНабораЭлементов = ДополнительныеПараметры.ТипВладельцаНабораЭлементов;
    ТипЭлемента = ДополнительныеПараметры.ТипЭлемента;
       
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНаборыДополнительныхСведений = (ТипЭлемента <> "ДопРеквизит");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВладелецДополнительныхЗначений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоДополнительноеСведение",      ЭтоНаборыДополнительныхСведений);
		ПараметрыФормы.Вставить("ТекущийНаборСвойств",            НаборДопРеквизитовСведений);
		ПараметрыФормы.Вставить("ВладелецДополнительныхЗначений", ВыбранноеЗначение.ВладелецДополнительныхЗначений);
		
		ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
			ПараметрыФормы, ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов));
			
	ИначеЕсли ВыбранноеЗначение.Свойство("ОбщееСвойство") Тогда		
		
		ЗаписатьОбщееСвойствоНаСервере(ВыбранноеЗначение, НаборДопРеквизитовСведений, ЭтоНаборыДополнительныхСведений);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	КомандыРедактирования = КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// Если активная строка - строка общего доп. реквизита (сведения), то сделать недоступными кнопки добавления, удаления, перемещения.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.Удалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВниз, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюУдалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВниз,
		"Доступность",
		Не ТекущиеДанные.ОбщееСвойство);
	
	// Если активная строка - первая или последняя в списке, то сделать недоступными кнопки сдвига вверх или вниз.
	Если Не ТекущиеДанные.ОбщееСвойство Тогда
		
		ИндексСтроки = ТаблицаДопРеквизитов.Индекс(ТекущиеДанные);
		
		Если ИндексСтроки = 0 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВверх, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки = ТаблицаДопРеквизитов.Количество() - 1 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВниз, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВниз, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки <> 0 Тогда
			
			ПредыдущаяСтрока = ТаблицаДопРеквизитов[ИндексСтроки - 1];
			
			Если ПредыдущаяСтрока.ОбщееСвойство Тогда
				
				// Если предыдущая строка является строкой общего реквизита, то сделать недоступной кнопку сдвига вверх.
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.ПереместитьВверх, 
					"Доступность", 
					Ложь);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
					"Доступность", 
					Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборСвойствДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(ТекущийОбъект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ТЧДополнительныеРеквизитыСведения.Очистить();
	
	Для каждого ЭлементСтр Из ТаблицаДопРеквизитов Цикл
		Если Не ЭлементСтр.ОбщееСвойство Тогда
			НовСтр = ТЧДополнительныеРеквизитыСведения.Добавить();
			НовСтр.Свойство = ЭлементСтр.Свойство;
			НовСтр.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСтр.Свойство, "ПометкаУдаления");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектНаборСвойств.Записать();
	Исключение
		
		// Установить признак отказа записи.
		Отказ = Истина;
		
		// Добавить запись в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Дополнительные %1 %2. Не удалось обновить состав дополнительных %3 набора.'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизиты", "сведения");
		ТипОбъекта  = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры", "характеристик", "серий"));
		ТипСостава  = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИмяСобытия, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		КомментарийЖурнала  = НСтр("ru = 'При обновлении табличной части дополнительных реквизитов набора свойств ""%1"" произошла ошибка: ""%2""'");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КомментарийЖурнала  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийЖурнала, 
			НаборСвойствДопРеквизитовСведений, 
			ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			НаборСвойствДопРеквизитовСведений, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Вызвать исключение.
		ВыражениеИсключения = НСтр("ru = 'При записи дополнительных %1 %2 произошла ошибка (см. журнал регистрации).'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		ТипОбъекта = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры", "характеристик", "серий"));
		
		ВыражениеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВыражениеИсключения, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		ВызватьИсключение(ВыражениеИсключения);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов, Свойство)
	
	ТекущийТипЭлемента = ТипЭлемента;
	ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
	
	ПараметрыФормы = Новый Структура("Ключ", Свойство);
	
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Форма.ФормаЭлемента", 
		ПараметрыФормы, 
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Процедура вызывается при начале выбора шаблона наименования номенклатуры или характеристик.
// Проверяет модифицированность элемента и открывается форму редактирования шаблона.
//
// Параметры:
//	ШаблонНаименования (Строка) - шаблон наименования,
//	ЭлементШаблонаНаименования (ПолеФормы) - элемент шаблона,
//	ИмяШаблона (Строка) - имя шаблона наименования,
//	ФлагЗапрета (Строка) - имя флага запрета.
//
&НаКлиенте
Процедура ИзменениеВРедактореШаблона(ЗначащаяЧастьИмениШаблона)
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("ЗначащаяЧастьИмениШаблона", ЗначащаяЧастьИмениШаблона);
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение шаблона наименования с помощью редактора формул 
		                          |возможно только после записи элемента, записать элемент?'");
		

		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеВРедактореШаблонаВопросОЗаписиЗавершение", ЭтотОбъект, ПараметрыВопроса),
			ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru = 'Редактирование шаблона'"));
			
		Возврат;	
	КонецЕсли;
	
	ИзменениеВРедактореШаблонаВопросФрагмент(ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаВопросФрагмент(ДополнительныеПараметры)
	
	НаборСвойств = Новый Структура("НаборСвойствНоменклатуры, НаборСвойствХарактеристик, Набор", Ложь, Ложь, Неопределено);
	
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	
	Если СтрНайти(ИмяШаблона, "Номенклатуры") > 0 Тогда
		
		НаборСвойств.НаборСвойствНоменклатуры = Истина;
		НаборСвойств.Набор = Объект.НаборСвойств;
		
	ИначеЕсли СтрНайти(ИмяШаблона, "Характеристик") > 0 Тогда
		
		НаборСвойств.НаборСвойствХарактеристик = Истина;
		НаборСвойств.Набор = Объект.НаборСвойствХарактеристик;
		
	Иначе
		
		НаборСвойств.Набор = Объект.НаборСвойствСерий;
		
	КонецЕсли;
	
	ПараметрыРедактированияШаблона = Новый Структура("Формула, ОперандыЗаголовок, Операторы, СтроковаяФормула, НаборСвойств");
	
	ПараметрыРедактированияШаблона.Формула           = Объект[ИмяШаблона];
	ПараметрыРедактированияШаблона.ОперандыЗаголовок = НСтр("ru = 'Доступные реквизиты'");
	ПараметрыРедактированияШаблона.Операторы         = АдресХранилищаДереваОператоров;
	ПараметрыРедактированияШаблона.СтроковаяФормула  = Истина;
	ПараметрыРедактированияШаблона.НаборСвойств      = НаборСвойств;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеВРедактореШаблонаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.КонструкторФормул",
		ПараметрыРедактированияШаблона,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаВопросОЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзменениеВРедактореШаблонаВопросФрагмент(ДополнительныеПараметры);
								
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Шаблон = Результат;
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	                   
	Если Шаблон <> Неопределено 
		И Объект[ИмяШаблона] <> Шаблон Тогда
		Модифицированность = Истина;
		Объект[ИмяШаблона] = Шаблон;
		
		Если СтрНайти(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
			ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
			Объект["ЗапретРедактирования"+ ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона] = ЗначениеЗаполнено(Объект[ИмяШаблона]);
		КонецЕсли;
		
		НастроитьПоШаблонуНаименования(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Разделители'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Пробел'"), " + "" "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'"),      " " + НСтр("ru='И'")      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Или'"),    " " + НСтр("ru='Или'")    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Не'"),     " " + НСтр("ru='Не'")     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'"),   " " + НСтр("ru='ЛОЖЬ'")   + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Числовые функции'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),    НСтр("ru='Макс(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),     НСтр("ru='Мин(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'"),  НСтр("ru='Окр(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"), НСтр("ru='Цел()'"),   1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Строковые функции'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Строка'"), НСтр("ru='Строка()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ВРег'"), НСтр("ru='ВРег()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Лев'"), НСтр("ru='Лев()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НРег'"), НСтр("ru='НРег()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Прав'"), НСтр("ru='Прав()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрЛ'"), НСтр("ru='СокрЛ()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрЛП'"), НСтр("ru='СокрЛП()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрП'"), НСтр("ru='СокрП()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ТРег'"), НСтр("ru='ТРег()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СтрЗаменить'"), НСтр("ru='СтрЗаменить(,,)'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СтрДлина'"), НСтр("ru='СтрДлина()'"));
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Прочие функции'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"), "?(,,)", 3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Предопределенное значение'"), НСтр("ru='ПредопределенноеЗначение()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение заполнено'"), НСтр("ru='ЗначениеЗаполнено()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Формат'"), НСтр("ru='Формат(,)'"));
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаОбязателенДляЗаполнения(ВладелецРеквизита, ИдентификаторСтрокиТаблицы)
	
	КоллекцияРеквизитовДляКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(Объект, ВладелецРеквизита);
	
	ТекущиеДанные = КоллекцияРеквизитовДляКонтроля.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
											   
	ТекущиеДанные.ДоступностьОтображатьПриСоздании =  Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
											   																						ТекущиеДанные,
											   																						ВладелецРеквизита);
	
КонецПроцедуры

// Процедура заполняет нужную таблицу дополнительных реквизитов (сведений).
//
// Параметры:
//	Таблица (ДанныеФормыКоллекция) - Таблица доп.реквизитов (сведений).
//	
//	НаборСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора доп.реквизитов (сведений).
//	
//	НаборОбщихСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора общих доп.реквизитов (сведений).
//	
//	ТипДанных (Строка) - Тип данных которые будут заполняться. 
//	Принимает значения: "Реквизиты", "Сведения".
//	
//	ТолькоОбщиеСвойства (Булево) - Если параметр, установлен в Истина, то предварительно очищается не вся таблица,
//	а только список общих доп.реквизитов (сведений). Это сделано для того чтобы избежать 
//	потери введенных данных о не общих доп.реквизитах (сведениях) в форму.
//	Значение по умолчанию: Ложь
//	
&НаСервере
Процедура ЗаполнитьСписокСвойствДопРеквизитовТаблицы(Таблица, НаборСвойствДопРеквизитов, НаборОбщихСвойствДопРеквизитов, 
	ТипДанных, ТолькоОбщиеСвойства = Ложь)
	
	// Если нужно перезаполнить свойства, то проверить, что передана ссылка на набор свойств.
	Если Не ТолькоОбщиеСвойства Тогда
		Если Не ЗначениеЗаполнено(НаборСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// Если нужно перезаполнить только ОБЩИЕ свойства, то проверить, что передана ссылка на набор ОБЩИХ свойств.
		Если Не ЗначениеЗаполнено(НаборОбщихСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоОбщиеСвойства Тогда
		
		// Удалить из таблицы только строки общих свойств.
		ВГраница = Таблица.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			СтрокаТаблицы = Таблица[ВГраница - ОбрИндекс];
			
			Если СтрокаТаблицы.ОбщееСвойство Тогда
				Таблица.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Таблица.Очистить();
		
	КонецЕсли;
	
	Если ТипДанных = "Реквизиты" Тогда
		ИмяТЧ = "ДополнительныеРеквизиты";
	ИначеЕсли ТипДанных = "Сведения" Тогда
		ИмяТЧ = "ДополнительныеСведения";
	КонецЕсли;
	
	// Получить список дополнительных реквизитов из набора свойств, и дополнительных реквизитов из набора общих свойств.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НаборОбщихСвойств", НаборОбщихСвойствДопРеквизитов);
	
	Если ТолькоОбщиеСвойства Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство КАК Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ИСТИНА КАК ОбщееСвойство,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки,
		|	ВЫБОР КОГДА ОбщиеДопРеквизитыСведения.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	Иначе
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойствДопРеквизитов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДопРеквизитыСведения.Свойство КАК Свойство,
		|	ДопРеквизитыСведения.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ЛОЖЬ КАК ОбщееСвойство,
		|	ДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки,
		|	ВЫБОР КОГДА ДопРеквизитыСведения.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ДопРеквизитыСведения
		|ГДЕ
		|	ДопРеквизитыСведения.Ссылка = &НаборСвойств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Заголовок,
		|	ИСТИНА,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки,
		|	ВЫБОР КОГДА ОбщиеДопРеквизитыСведения.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитовСведений = РезультатЗапроса.Выгрузить();
	
	Если ТолькоОбщиеСвойства Тогда
		
		ТаблицаДопРеквизитовСведений.Сортировать("НомерСтрокиДляСортировки Возр");
		
		ТаблицаВсехДопРеквизитовСведений = Таблица.Выгрузить();
		ТаблицаВсехДопРеквизитовСведений.Очистить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДопРеквизитовСведений, ТаблицаВсехДопРеквизитовСведений);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ТаблицаВсехДопРеквизитовСведений);
		
		Таблица.Загрузить(ТаблицаВсехДопРеквизитовСведений);
		
	Иначе
		
		ТаблицаДопРеквизитовСведений.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		Таблица.Загрузить(ТаблицаДопРеквизитовСведений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиДопРеквизитовСведений()
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораСерий()
	
	Если Не (Объект.ИспользоватьСерии И ЗначениеЗаполнено(Объект.НаборСвойствСерий)) Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ВидыНоменклатуры.ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, "СерииНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Для Каждого ДанныеСтроки Из Объект.ПолитикиУчетаСерий Цикл
		ДанныеСтроки.ЭтоПолитикаДляСклада = Не ЗначениеЗаполнено(ДанныеСтроки.Склад)
											Или (ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады"));
		ДанныеСтроки.СоответствуетПолитикеПоУмолчанию = (ДанныеСтроки.ПолитикаУчетаСерий = Объект.ПолитикаУчетаСерий);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитаДляКонтроля, УсловияДоступности)
	
	СтрокаРеквизитаДляКонтроля.ДоступностьОбязателенДляЗаполнения = (Не УсловияДоступности.ТипРеквизитаБулево
																		И Не УсловияДоступности.ЗаполнятьОбязательно);
	
	Если УсловияДоступности.ТолькоОбязателенДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРеквизитаДляКонтроля.ДоступностьУникален = (Не УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип);
	СтрокаРеквизитаДляКонтроля.ДоступностьОтображатьПриСоздании = (Не СтрокаРеквизитаДляКонтроля.ОбязателенДляЗаполнения
																		И Не УсловияДоступности.ЗаполнятьОбязательно);
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьУчетДрагоценныхМатериалов()
	ИспользоватьУчетДрагоценныхМатериалов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	
	Возврат ИспользоватьУчетДрагоценныхМатериалов;
КонецФункции

&НаСервере
Процедура НастроитьФорму()

	#Область ЗначенияФО
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		
		Для каждого ДанныеСтроки Из Объект.ПолитикиУчетаСерий Цикл
			Если ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады") Тогда
				Склад = ДанныеСтроки.Склад;
				ПолитикаУчетаСерий = ДанныеСтроки.ПолитикаУчетаСерий;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьМногооборотнуюТару               = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьНесколькоОрганизаций             = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад));
	ИспользоватьПродажуАгентскихУслуг            = ПолучитьФункциональнуюОпцию("ИспользоватьПродажуАгентскихУслуг");
	ИспользоватьУчетДрагоценныхМатериалов        = ИспользоватьУчетДрагоценныхМатериалов();
	ИспользоватьТоварныеКатегории                = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории"); 
	
	ИспользоватьСкладскиеГруппыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура);
	ИспользоватьХарактеристикиНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьСерииНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры    = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	КонтролироватьУникальность          = ПолучитьФункциональнуюОпцию("КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов");
	ИспользоватьОрдерныеСклады          = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	ИспользоватьСертификатыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	
	ИспользоватьСезонныеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьСезонныеКоэффициенты");
	ИспользоватьЦенновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьКлассификаторыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры");
	ИспользоватьСтарыеКлассификаторы = ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД");
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию(
		"ИспользоватьОбособленноеОбеспечениеЗаказов");
	ИспользоватьРасширенноеОбеспечениеПотребностей = ПолучитьФункциональнуюОпцию(
		"ИспользоватьРасширенноеОбеспечениеПотребностей");
	
	#КонецОбласти

	#Область ТипНоменклатуры
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	МассивТекстов = Новый Массив;
	
	#Область ПредставлениеИПодсказкаТипа
	
	Если ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.ТипНоменклатуры),
																Новый Шрифт(,,Истина)));
	Иначе
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<не указан>'"),
																Новый Шрифт(,,Истина),
																ЦветаСтиля.ЦветОсобогоТекста));
	КонецЕсли;																
									
	Если Объект.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета
		И ЗначениеЗаполнено(Объект.ОсобенностьУчета) Тогда
		МассивТекстов.Добавить(": ");
		МассивТекстов.Добавить(Строка(Объект.ОсобенностьУчета));
	КонецЕсли;
	
	Если Элементы.ТипНоменклатуры.Доступность Тогда
		МассивТекстов.Добавить(" (");
		Если ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,,"ИзменитьТипНоменклатуры"));
		Иначе
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'указать'"),,,,"ИзменитьТипНоменклатуры"));
		КонецЕсли;																
		МассивТекстов.Добавить(")");
	КонецЕсли;
	
	ТипНоменклатурыСтрокой = Новый ФорматированнаяСтрока(МассивТекстов);
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(Перечисления.ТипыНоменклатуры.ПодсказкаПоТипуНоменклатуры(Объект.ТипНоменклатуры));
	МассивТекстов.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодсказкаПоОсобенностиУчетаНоменклатуры(Объект.ОсобенностьУчета));
	
	Элементы.ТипНоменклатуры.Подсказка = СтрСоединить(МассивТекстов, Символы.ПС);
	#КонецОбласти
	
	ИспользоватьОбщиеХарактеристики = (Объект.ИспользованиеХарактеристик
										= ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	
	ИспользоватьХарактеристикиИзДругогоВида = (Объект.ИспользованиеХарактеристик
										= ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры"));
										
	#КонецОбласти
	
	#Область НесколькоВидов
	НесколькоВидовНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	
	Элементы.СтраницаНастройкиПанелиБыстрогоОтбора.Видимость 	= НесколькоВидовНоменклатуры;
	Элементы.Родитель.Видимость 								= НесколькоВидовНоменклатуры;
	Элементы.Описание.Видимость 								= НесколькоВидовНоменклатуры;
	Элементы.ТипНоменклатуры.Видимость 							= НесколькоВидовНоменклатуры;
	Элементы.ПодменюПерейти.Видимость							= НесколькоВидовНоменклатуры;
	
	#КонецОбласти
	
	#Область ТТН
	Элементы.ИспользоватьИндивидуальноеНаименование.Видимость = ЭтоТовар
											Или ЭтоМногооборотнаяТара;
	Элементы.ОбщееНаименованиеДляПечати.Видимость = ЭтоТовар
											Или ЭтоМногооборотнаяТара;
	Элементы.НаименованиеДляПечати.Видимость = ЭтоТовар
											Или ЭтоМногооборотнаяТара;
	Элементы.ГруппаНаименованиеДляПечатиКолонкиЗаголовок.Видимость = ЭтоТовар
											Или ЭтоМногооборотнаяТара;
	#КонецОбласти
	
	#Область ОказаниеИОоформлениеУслуг
	Элементы.ВариантОказанияУслуг.Видимость     = ЭтоУслуга И ИспользоватьПродажуАгентскихУслуг;
	Элементы.ВариантОформленияПродажи.Видимость = (ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") И ЭтоТовар)
													Или ЭтоУслуга
													Или ЭтоРабота;
													
	СписокВыбораВариантовОформления = Элементы.ВариантОформленияПродажи.СписокВыбора;
	СписокВыбораВариантовОформления.Очистить();
	
	СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	Если ЭтоУслуга Или ЭтоРабота Тогда
		СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав")
		И Не ЭтоМногооборотнаяТара Тогда
		СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ЭлементСписка = Элементы.ВариантОказанияУслуг.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВариантОказанияУслуг.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
												
	#Область Набор
	Элементы.ВариантРасчетаЦеныНабора.Видимость = ЭтоНабор;
	Элементы.ВариантПредставленияНабораВПечатныхФормах.Видимость = ЭтоНабор;
	Элементы.ГруппаФинансовогоУчета.Видимость = Не ЭтоНабор;
	#КонецОбласти
	
	#Область Товар
	Элементы.ВестиУчетПоГТД.Видимость = ЭтоТовар;
	Элементы.ВестиУчетСертификатовНоменклатуры.Видимость = ЭтоТовар
															И ИспользоватьСертификатыНоменклатуры;
	
	Элементы.ОблагаетсяНДСУПокупателя.Видимость = (ПолучитьФункциональнуюОпцию("ПокупкаТоваровОблагаемыхНДСУПокупателя")
												ИЛИ ПолучитьФункциональнуюОпцию("ПродажаТоваровОблагаемыхНДСУПокупателя"))
												И ЭтоТовар;
												
	Элементы.ПодакцизныйТовар.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению")
											И ЭтоТовар;
	
	ВидимостьКодаРаздела7ДекларацииНДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС")
										И Не Объект.ОблагаетсяНДСУПокупателя
										И (ЭтоТовар
											Или ЭтоУслуга
											Или ЭтоРабота)
										И (Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС);
	Элементы.КодРаздел7ДекларацииНДС.Видимость = ВидимостьКодаРаздела7ДекларацииНДС;
	
	ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг = ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг");

	#КонецОбласти
	
	#Область Работа
	Элементы.СпособОбеспеченияПотребностей.Видимость = ЭтоРабота;
	#КонецОбласти
	
	#Область Тара
	
	ДоступностьТары = ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) 
		И Не Объект.ИспользоватьУпаковки
		И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	Элементы.ПоставляетсяВМногооборотнойТаре.Видимость = ИспользоватьМногооборотнуюТару
														И ЭтоТовар;

	Элементы.ПоставляетсяВМногооборотнойТаре.Доступность = Элементы.ПоставляетсяВМногооборотнойТаре.Видимость
															И ДоступностьТары;
	
	Элементы.НоменклатураМногооборотнаяТара.Видимость = Элементы.ПоставляетсяВМногооборотнойТаре.Доступность
														И Объект.ПоставляетсяВМногооборотнойТаре;
														
	Элементы.ХарактеристикаМногооборотнаяТара.Видимость = Элементы.НоменклатураМногооборотнаяТара.Видимость
															И ИспользоватьХарактеристикиНоменклатуры;
	
	ЕстьХарактеристикиТары = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	Элементы.ХарактеристикаМногооборотнаяТара.Доступность =	ЕстьХарактеристикиТары;
	
	Элементы.ТараОтступ.Видимость = Элементы.ПоставляетсяВМногооборотнойТаре.Видимость
									И Объект.ПоставляетсяВМногооборотнойТаре;
															
	#КонецОбласти
	
	#Область ТоварИлиТара
	Элементы.СхемаОбеспечения.Видимость = ЭтоТовар или ЭтоТовар;
	#КонецОбласти
	
	#Область ТоварИлиРабота
	Элементы.ОбособленнаяЗакупкаПродажа.Видимость = ЭтоТовар Или ЭтоРабота;
	#КонецОбласти

	#Область Алгоголь
	Элементы.ИмпортнаяАлкогольнаяПродукция.Видимость = Объект.АлкогольнаяПродукция;
	Элементы.ВидАлкогольнойПродукции.Видимость = Объект.АлкогольнаяПродукция;
	Элементы.Крепость.Видимость = Объект.АлкогольнаяПродукция;
	Элементы.ДекорацияПроцентыКрепости.Видимость = Объект.АлкогольнаяПродукция;
	#КонецОбласти
	
	#Область ТоварныеКатегории
	Элементы.ДекорацияТоварныеКатегории.Видимость = ИспользоватьТоварныеКатегории;
	Элементы.НастройкаТоварныхКатегорий.Видимость = ИспользоватьТоварныеКатегории;
	Элементы.ВладелецТоварныхКатегорий.Видимость = ИспользоватьТоварныеКатегории;
	СформироватьНадписьПоВидуВладельцу("ТоварныхКатегорий");
	#КонецОбласти
	
	#Область Характеристики
	Элементы.ИспользоватьХарактеристики.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.ИспользованиеХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	
	Элементы.РеквизитыБыстрогоОтбораХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопРеквизитовХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопСведенийХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопСведенийХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ГруппаРеквизитыДляКонтроляХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ГруппаШаблоныНаименованийХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	
	Элементы.ВладелецХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	
	Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры
													И Объект.ИспользоватьХарактеристики
													И Не ИспользоватьХарактеристикиИзДругогоВида;
	СформироватьНадписьПоВидуВладельцу("Характеристик");
	#КонецОбласти
	
	#Область Серии
	РазрешеноИспользоватьСерии = (ЭтоТовар Или ЭтоМногооборотнаяТара) И ИспользоватьСерииНоменклатуры;
	
	Элементы.ИспользоватьСерии.Видимость = РазрешеноИспользоватьСерии;
	Элементы.ИспользоватьСерии.Доступность = Не (Объект.ПродукцияМаркируемаяДляГИСМ
													Или Объект.КиЗГИСМ);
	Элементы.ВариантЗаданияНастроекСерий.Видимость = РазрешеноИспользоватьСерии;
	Элементы.ВариантЗаданияНастроекСерий.Доступность = Объект.ИспользоватьСерии;
	
	Элементы.НадписьНастройкаИспользованияСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ВладелецСерий.Видимость = (ЭтоТовар Или ЭтоМногооборотнаяТара) И ИспользоватьСерииНоменклатуры;
	
	ВидимостьПолитикиУчетаСерийСкладыПодразделения = Объект.ИспользоватьСерии
													И РазрешеноИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И (ИспользоватьНесколькоСкладов
														Или ИспользоватьПроизводство);
	ВидимостьПолитикиУчетаСерийОдинСклад           = Объект.ИспользоватьСерии
													И РазрешеноИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И Не (ИспользоватьНесколькоСкладов
															Или ИспользоватьПроизводство);
	
	Элементы.НадписьПолитикаУчетаСерий2.Видимость          = ВидимостьПолитикиУчетаСерийСкладыПодразделения;
	Элементы.ПолитикаУчетаСерий2.Видимость                 = ВидимостьПолитикиУчетаСерийСкладыПодразделения;
	Элементы.ПолитикаУчетаСерий2.АвтоОтметкаНезаполненного = ВидимостьПолитикиУчетаСерийСкладыПодразделения;
	Элементы.ПодсказкаНастройкаСерийПоСкладам.Видимость    = ВидимостьПолитикиУчетаСерийСкладыПодразделения
															И ИспользоватьОрдерныеСклады
															И ЕстьСкладыБезОрдернойСхемы;
	
	Элементы.ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий.Видимость = ВидимостьПолитикиУчетаСерийСкладыПодразделения;
	
	Элементы.ГруппаНадписьПолитикаУчетаСерий.Видимость    = ВидимостьПолитикиУчетаСерийОдинСклад;
	Элементы.ПолитикаУчетаСерий.АвтоОтметкаНезаполненного = ВидимостьПолитикиУчетаСерийОдинСклад;
	
	Элементы.ГруппаНадписьДляЭкземпляровТолькоСправочноеУказание.Видимость = 
			Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
			И Не Объект.ПродукцияМаркируемаяДляГИСМ
			И Объект.ИспользоватьСерии
			И РазрешеноИспользоватьСерии
			И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	
	Если ИспользоватьНеотфактурованныеПоставки И ИспользоватьТоварыВПутиОтПоставщиков Тогда
		Элементы.ГруппаНадписьДляЭкземпляровТолькоСправочноеУказание.ТекущаяСтраница = Элементы.НадписьДляЭкземпляровТоварыВПутиИНеотфактуровка;
	ИначеЕсли ИспользоватьНеотфактурованныеПоставки Тогда
		Элементы.ГруппаНадписьДляЭкземпляровТолькоСправочноеУказание.ТекущаяСтраница = Элементы.НадписьДляЭкземпляровНеотфактуровка;
	ИначеЕсли ИспользоватьТоварыВПутиОтПоставщиков Тогда
		Элементы.ГруппаНадписьДляЭкземпляровТолькоСправочноеУказание.ТекущаяСтраница = Элементы.НадписьДляЭкземпляровТоварыВПути;
	Иначе
		Элементы.ГруппаНадписьДляЭкземпляровТолькоСправочноеУказание.ТекущаяСтраница = Элементы.НадписьДляЭкземпляров;
	КонецЕсли;
	
	Элементы.НадписьДляПродукцииМаркируемойДляГИСМ.Видимость = 
			Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
			И Объект.ПродукцияМаркируемаяДляГИСМ
			И Объект.ИспользоватьСерии
			И РазрешеноИспользоватьСерии
			И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
			
	Элементы.НадписьИспользованиеПолитикиУчетаСерийПриВыключенномСрокеГодности.Видимость = 
			НЕ Объект.ИспользоватьСрокГодностиСерии
			И Объект.ИспользоватьСерии
			И РазрешеноИспользоватьСерии
			И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.НадписьПодсказкаПолитикиУчетаСерийОдинСклад.Видимость = РазрешеноИспользоватьСерии
																	И Объект.ИспользоватьСерии
																	И Не ИспользоватьНесколькоСкладов
																	И Не ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
																	И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ПолитикиУчетаСерий.Видимость = РазрешеноИспользоватьСерии
											И Объект.ИспользоватьСерии
											И (ИспользоватьНесколькоСкладов
												Или ИспользоватьПроизводство)
											И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
											И ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий;
	
	ВТЧУказываютсяСкладыИПодразделения =  ИспользоватьНесколькоСкладов И ИспользоватьПроизводство;
	
	Элементы.ПолитикиУчетаСерийДобавитьСкладВПолитикиУчетаСерий.Видимость = ВТЧУказываютсяСкладыИПодразделения;
	Элементы.ПолитикиУчетаСерийДобавитьПодразделениеВПолитикиУчетаСерий.Видимость = ВТЧУказываютсяСкладыИПодразделения;
	
	Элементы.ПолитикиУчетаСерийДобавить.Видимость = Не ВТЧУказываютсяСкладыИПодразделения;
	
	Если ВТЧУказываютсяСкладыИПодразделения Тогда
		ПолитикиУчетаСерийСкладЗаголовок       = НСтр("ru = 'Склад или подразделение'");
		ПолитикиУчетаСерийСкладПодсказка       = НСтр("ru = 'Склад или подразделение, в котором ведется учет по сериям'");
		ОтборСтрокТЧПолитикаУчетаСерий         = Новый ФиксированнаяСтруктура("СоответствуетПолитикеПоУмолчанию", Ложь);
		ПолитикиУчетаСерийСкладОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады,СправочникСсылка.СтруктураПредприятия");
		ПолитикаУчетаСерийПодсказка
			= НСтр("ru = 'Будет использована как общая политика для всех складов и производственных подразделений; будет устанавливаться по умолчанию для новых складов и производственных подразделений.'");
	ИначеЕсли ИспользоватьНесколькоСкладов Тогда
		ПолитикиУчетаСерийСкладЗаголовок       = НСтр("ru = 'Склад'");
		ПолитикиУчетаСерийСкладПодсказка       = НСтр("ru = 'Склад, в котором ведется учет по сериям'");
		ПолитикиУчетаСерийСкладОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		ОтборСтрокТЧПолитикаУчетаСерий         = Новый ФиксированнаяСтруктура("СоответствуетПолитикеПоУмолчанию, ЭтоПолитикаДляСклада", Ложь, Истина);
		ПолитикаУчетаСерийПодсказка
			= НСтр("ru = 'Будет использована как общая политика для всех складов; будет устанавливаться по умолчанию для новых складов.'");
	Иначе
		ПолитикиУчетаСерийСкладЗаголовок       = НСтр("ru = 'Подразделение'");
		ПолитикиУчетаСерийСкладПодсказка       = НСтр("ru = 'Подразделение, в котором ведется учет по сериям'");
		ПолитикиУчетаСерийСкладОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		ОтборСтрокТЧПолитикаУчетаСерий         = Новый ФиксированнаяСтруктура("СоответствуетПолитикеПоУмолчанию, ЭтоПолитикаДляСклада", Ложь, Ложь);
		ПолитикаУчетаСерийПодсказка
			= НСтр("ru = 'Будет использована как общая политика для всех производственных подразделений; будет устанавливаться по умолчанию для новых производственных подразделений.'");
	КонецЕсли;
	Элементы.ПолитикиУчетаСерийСклад.Заголовок       = ПолитикиУчетаСерийСкладЗаголовок;
	Элементы.ПолитикиУчетаСерийСклад.Подсказка       = ПолитикиУчетаСерийСкладПодсказка;
	Элементы.ПолитикиУчетаСерийСклад.ОграничениеТипа = ПолитикиУчетаСерийСкладОграничениеТипа;
	Элементы.ПолитикиУчетаСерий.ОтборСтрок           = ОтборСтрокТЧПолитикаУчетаСерий;
	Элементы.НадписьПолитикаУчетаСерий2.Подсказка    = ПолитикаУчетаСерийПодсказка;
	
	Элементы.ГруппаРеквизитыДляКонтроляСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ГруппаШаблоныНаименованийСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ТаблицаДопРеквизитовСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ТаблицаДопСведенийСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ШаблонЭтикеткиСерии.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии;
	
	Элементы.ПоказатьРеквизитыДляКонтроляСерий.Видимость = РазрешеноИспользоватьСерии
													И Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры.Видимость = (РазрешеноИспользоватьСерии
																		И Объект.ИспользоватьСерии
																		И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	Или (ИспользоватьХарактеристикиНоменклатуры
																			И Объект.ИспользоватьХарактеристики
																			И Не ИспользоватьХарактеристикиИзДругогоВида);
																		
	СформироватьНадписьПоВидуВладельцу("Серий");
	
	#Область НадписьНастройкаИспользованияСерий
	
	Если Элементы.НадписьНастройкаИспользованияСерий.Видимость Тогда
		
		МассивТекстов = Новый Массив;
		
		МассивТекстов.Добавить(НСтр("ru = 'Серия идентифицирует'"));
		МассивТекстов.Добавить(": ");
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.НастройкаИспользованияСерий),
								Новый Шрифт(,,Истина)));
		
		МассивТекстов.Добавить(" (");
		
		МассивОписанияРеквизитов = Новый Массив;
		
		Если Объект.ИспользоватьНомерСерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Номер'"));
		КонецЕсли;
		
		Если Объект.ИспользоватьСрокГодностиСерии Тогда
			
			Если Объект.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
				МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Срок годности с точностью до дней'"));
			Иначе
				МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Срок годности с точностью до часов'"));
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ИспользоватьRFIDМеткиСерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'RFID-метка'"));
		ИначеЕсли Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'без RFID-метки'"));
		КонецЕсли;
		
		Если Объект.ИспользоватьНомерКИЗГИСМСерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'КиЗ'"));
		КонецЕсли;
			
		Если Объект.ИспользоватьДатуПроизводстваСерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Дата производства'"));
		КонецЕсли;
		
		Если Объект.ИспользоватьПроизводителяЕГАИССерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Производитель (ЕГАИС)'"));
		КонецЕсли;
		
		Если Объект.ИспользоватьСправку2ЕГАИССерии Тогда
			МассивОписанияРеквизитов.Добавить(НСтр("ru = 'Справка 2 (ЕГАИС)'"));
		КонецЕсли;
		
		МассивТекстов.Добавить(СтрСоединить(МассивОписанияРеквизитов, ", "));
		МассивТекстов.Добавить(") ");
		
		Если Объект.АвтоматическиГенерироватьСерии Тогда
			МассивТекстов.Добавить(НСтр("ru = 'Возможна автогенерация'"));
			МассивТекстов.Добавить(" ");
		КонецЕсли;
		
		Если Не Элементы.ИспользоватьСерии.ТолькоПросмотр Тогда
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),
																,
																,
																,
																"ИзменитьНастройкуИспользованияСерий"));
		КонецЕсли;													
		
		Элементы.НадписьНастройкаИспользованияСерий.Заголовок = Новый ФорматированнаяСтрока(МассивТекстов);
		
	КонецЕсли;

	#КонецОбласти
	
	#КонецОбласти
	
	#Область Упаковки
	ИндивидуальныйНаборУпаковок = Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		
	Элементы.ИспользоватьУпаковки.Видимость = ИспользоватьУпаковкиНоменклатуры
		И ЭтоТовар;
	Элементы.НаборУпаковок.Видимость = Объект.ИспользоватьУпаковки
		И Не ИндивидуальныйНаборУпаковок;
	Элементы.НаборУпаковокОтступ.Видимость = Элементы.ИспользоватьУпаковки.Видимость
		И Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковок1.Видимость = Элементы.ИспользоватьУпаковки.Видимость
		И Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковок2.Видимость = Элементы.ИспользоватьУпаковки.Видимость
		И Объект.ИспользоватьУпаковки;
	#КонецОбласти
	
	#Область Обеспечение
	Элементы.ОбособленнаяЗакупкаПродажа.Видимость    = ИспользоватьОбособленноеОбеспечениеЗаказов
														И (ЭтоТовар
															Или ЭтоРабота);
	Элементы.СпособОбеспеченияПотребностей.Видимость = ИспользоватьРасширенноеОбеспечениеПотребностей
														И ЭтоРабота;
	Элементы.СхемаОбеспечения.Видимость              = ИспользоватьРасширенноеОбеспечениеПотребностей
														И (ЭтоТовар
															Или ЭтоМногооборотнаяТара);
	Элементы.ГруппаЗаголовокОбеспечение.Видимость    = Элементы.ОбособленнаяЗакупкаПродажа.Видимость
														Или Элементы.СпособОбеспеченияПотребностей.Видимость
														Или Элементы.СхемаОбеспечения.Видимость;
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	Элементы.ГруппаЗаголовокПланированиеМаркетинг.Видимость = ИспользоватьСезонныеГруппы;
	#КонецОбласти
	
	#Область Цены
	Элементы.ГруппаЗаголовокЦены.Видимость = ИспользоватьЦенновыеГруппы;
	#КонецОбласти
	
	#Область ЕдиницаИзмерения
	Если ЭтоУслуга
	 Или ЭтоРабота
	 Или ЭтоНабор Тогда
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Ед. измерения'");
		ЗаголовоеГруппыЕдиницаИзмерения = НСтр("ru = 'Единицы измерения'");
	Иначе
		ЗаголовокЕдиницыИзмерения = НСтр("ru = 'Ед. хранения'");
		ЗаголовоеГруппыЕдиницаИзмерения = НСтр("ru = 'Единицы измерения и условия хранения'");
	КонецЕсли;
	Элементы.ЕдиницаИзмерения.Заголовок                       = ЗаголовокЕдиницыИзмерения;
	Элементы.ГруппаЕдиницыИзмеренияИУсловияХранения.Заголовок = ЗаголовоеГруппыЕдиницаИзмерения; 
	
	Элементы.ЕдиницаДляОтчетов.Видимость = Не ЭтоНабор И ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов");
	
	ЕдиницаИзмеренияДоступна = 
		Не (ИспользоватьУпаковкиНоменклатуры
			И Объект.ИспользоватьУпаковки
			И Не ИндивидуальныйНаборУпаковок)
		Или Не ЗначениеЗаполнено(Объект.НаборУпаковок);
		
	Элементы.ЕдиницаИзмерения.Доступность = ЕдиницаИзмеренияДоступна;

	Элементы.КоэффициентЕдиницыДляОтчетов.Видимость = Элементы.ЕдиницаДляОтчетов.Видимость
													И ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов)
													И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения;
													
	Элементы.ЕдиницаДляОтчетовЕдиницаИзмеренияНадпись.Видимость = Элементы.КоэффициентЕдиницыДляОтчетов.Видимость;
	
	#КонецОбласти
	
	#Область СкладскаяГруппа
	Элементы.СкладскаяГруппа.Видимость = (ЭтоТовар
											Или ЭтоМногооборотнаяТара)
										И ИспользоватьСкладскиеГруппыНоменклатуры;
	#КонецОбласти
	
	#Область ШаблоныНаименованийИНастройкаРеквизитовНоменклатуры
	Элементы.ГруппаНастройкиСозданияПереключатели.Видимость =  (Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида);
	
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляНоменклатуры;
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры, ЦветТекстаФормы);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
	
	Элементы.ГруппаШаблоныНаименованийНоменклатуры.Поведение = ?((Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида),
																				ПоведениеОбычнойГруппы.Свертываемая,
																				ПоведениеОбычнойГруппы.Обычное);	
																				
	Элементы.ГруппаШаблоныНаименованийНоменклатуры.ОтображатьЗаголовок = (Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида);
	
	НастроитьПоШаблонуНаименования("РабочегоНаименованияНоменклатуры"); 
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиНоменклатуры"); 
	НастроитьПоШаблонуНаименования("РабочегоНаименованияХарактеристики"); 
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиХарактеристики"); 
	НастроитьПоШаблонуНаименования("РабочегоНаименованияСерии"); 
	
	Элементы.РедактироватьШаблонНаименованияДляПечатиНоменклатуры.Доступность   = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонНаименованияДляПечатиХарактеристики.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияНоменклатуры.Доступность    = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияХарактеристики.Доступность  = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияСерии.Доступность           = Не ЭтаФорма.ТолькоПросмотр;
		
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование" Тогда
		Элементы.НаименованиеДляПечати.Доступность = Истина;
	Иначе
		Элементы.НаименованиеДляПечати.Доступность = Ложь;
	КонецЕсли;
	#КонецОбласти

	#Область ОбщероссийскиеКлассификаторы
	Элементы.ГруппаЗаголовокКлассификаторы.Видимость = ИспользоватьКлассификаторыНоменклатуры;
	
	Элементы.КодТНВЭД.Видимость = (ЭтоТовар
									Или ЭтоМногооборотнаяТара
									Или ЭтоНабор)
									И Не Объект.КиЗГИСМ
									И ИспользоватьКлассификаторыНоменклатуры;
									
	Элементы.НаименованиеТНВЭД.Видимость = Элементы.КодТНВЭД.Видимость;
	
	Элементы.КодОКП.Видимость = (ЭтоТовар
									Или ЭтоМногооборотнаяТара
									Или ЭтоНабор)
									И Не Объект.КиЗГИСМ
									И ИспользоватьСтарыеКлассификаторы;
									
	Элементы.НаименованиеОКП.Видимость = Элементы.КодОКП.Видимость;
	
	Элементы.КодОКПД2.Видимость = (ЭтоТовар
									Или ЭтоМногооборотнаяТара
									Или ЭтоНабор)
									И Не Объект.КиЗГИСМ
									И ИспользоватьКлассификаторыНоменклатуры;
									
	Элементы.НаименованиеОКПД2.Видимость = Элементы.КодОКПД2.Видимость;
	
	Элементы.КодОКВЭД.Видимость = Не Объект.КиЗГИСМ
								 И ИспользоватьСтарыеКлассификаторы;
	Элементы.НаименованиеОКВЭД.Видимость = Элементы.КодОКВЭД.Видимость;
	
	Элементы.КодОКВЭД2.Видимость = Не Объект.КиЗГИСМ
								 И ИспользоватьКлассификаторыНоменклатуры;
	Элементы.НаименованиеОКВЭД2.Видимость = Элементы.КодОКВЭД2.Видимость;
	#КонецОбласти
	
	#Область ДопРеквизитыИДопСведения
	Элементы.СтраницаДопРеквизиты.Видимость = ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.СтраницаДопСведения.Видимость = ИспользоватьДополнительныеРеквизитыИСведения;

	НесколькоВидовДопРеквизитовСведений =
		ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеЗначения")
	 	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеРеквизитыИСведения");
	ЕстьПравоДобавленияРеквизитов = ПравоДоступа("Добавление", Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
	
	Элементы.НоменклатураСоздатьНовыйРеквизит.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураГруппаСоздатьРеквизиты.Видимость 	= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиСоздатьНовыйРеквизит.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиГруппаСоздатьРеквизиты.Видимость = НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииСоздатьНовыйРеквизит.Видимость 			= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииГруппаСоздатьРеквизиты.Видимость 			= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураСоздатьНовоеСведение.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураГруппаСоздатьСведения.Видимость 	= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиСоздатьНовоеСведение.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиГруппаСоздатьСведения.Видимость  = НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииСоздатьНовоеСведение.Видимость 			= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииГруппаСоздатьСведения.Видимость 			= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	#КонецОбласти
	
#Область КонтролироватьУникальность

	Элементы.РеквизитыДляКонтроляНоменклатурыДляРазмераЯчейки3.Видимость = КонтролироватьУникальность;
	Элементы.РеквизитыДляКонтроляХарактеристикДляРазмераЯчейки3.Видимость = КонтролироватьУникальность;

#КонецОбласти

	Для Каждого ПодчиненнаяГруппа Из Элементы.ГруппаКолонкиЛево.ПодчиненныеЭлементы Цикл
		
		ЕстьВидимыеЭлементы = Ложь;
		ЕстьВидимыеЭлементы(ПодчиненнаяГруппа, ЕстьВидимыеЭлементы);
		
		Если Не ЕстьВидимыеЭлементы Тогда
			ИмяГруппы = СтрЗаменить(ПодчиненнаяГруппа.Имя,"Группа","ГруппаЗаголовок");
			Элементы[ИмяГруппы].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПодчиненнаяГруппа Из Элементы.ГруппаКолонкиПраво.ПодчиненныеЭлементы Цикл
		
		ЕстьВидимыеЭлементы = Ложь;
		ЕстьВидимыеЭлементы(ПодчиненнаяГруппа, ЕстьВидимыеЭлементы);
		
		Если Не ЕстьВидимыеЭлементы Тогда
			ИмяГруппы = СтрЗаменить(ПодчиненнаяГруппа.Имя,"Группа","ГруппаЗаголовок");
			Элементы[ИмяГруппы].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоШаблонуНаименования(ЗначащаяЧастьИмениШаблона)
	Если Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]) Тогда
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок  = Объект["Шаблон" + ЗначащаяЧастьИмениШаблона];
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы; 
	Иначе	
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок = НСтр("ru = '<шаблон не задан>'");
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет; 
	КонецЕсли;
	
	Если СтрНайти(ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
		Элементы["ЗапретРедактирования" + ЗначащаяЧастьИмениШаблона].Доступность = 
						Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьПроизводство     = Справочники.ВидыНоменклатуры.ИспользоватьПроизводство();
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ЕстьСкладыБезОрдернойСхемы   = СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач();
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// Сбросить флаг редактирования общих дополнительных реквизитов (сведений).
	РедактируютсяОбщиеРеквизитыСведения = Ложь;
	
	ОбщееНаименованиеДляПечати = Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить();
	ОбщееНаименованиеДляПечати = ?(ЗначениеЗаполнено(ОбщееНаименованиеДляПечати), ОбщееНаименованиеДляПечати, Нстр("ru = '<не указано>'"));
	
	Если Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати Тогда
		ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование";
	Иначе
		ИспользоватьИндивидуальноеНаименование = "ИспользоватьНаименованиеИзКонстанты";
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	ПостроитьДеревоОператоров();
	
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "Номенклатура");
	Справочники.ВидыНоменклатуры.ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, "Номенклатура");
	
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "ХарактеристикиНоменклатуры");
	Справочники.ВидыНоменклатуры.ЗаполнитьДопРеквизитыДляКонтроляИОтбора(Объект, "ХарактеристикиНоменклатуры");
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораСерий();
	
	ЗаполнитьСпискиДопРеквизитовСведений();
	
	Если Объект.ИспользоватьСерии Тогда
		Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
		Иначе
			ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекСерий = "";
	КонецЕсли;
	
	Если Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
		НастройкаТоварныхКатегорий = "ОбщиеСДругимВидомНоменклатуры";
	Иначе
		НастройкаТоварныхКатегорий = "НастроеныДляЭтогоВидаНоменклатуры";
	КонецЕсли;
	
	Если Объект.ИспользоватьУпаковки Тогда
		Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		Иначе
			ИспользованиеУпаковок = "ОбщийНабор";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("ТоварныхКатегорий");
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Характеристик");
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Серий");
	
	ЕстьПолитикиУчетаСерийНеПоУмолчанию = ЕстьПолитикиУчетаСерийНеПоУмолчанию();
	ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий = ЕстьПолитикиУчетаСерийНеПоУмолчанию;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзмененииКлиент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ТипНоменклатуры  = Результат.ТипНоменклатуры;
	Объект.ОсобенностьУчета = Результат.ОсобенностьУчета;
	ТипНоменклатурыПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТипНоменклатурыПриИзмененииСервер()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоРабота = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	ОсобенностиУчета = Новый Массив;
	ОсобенностиУчета.Добавить("АлкогольнаяПродукция");
	ОсобенностиУчета.Добавить("СодержитДрагоценныеМатериалы");
	ОсобенностиУчета.Добавить("ПродукцияМаркируемаяДляГИСМ");
	ОсобенностиУчета.Добавить("КиЗГИСМ");
	
	Для Каждого Особенность из ОсобенностиУчета Цикл
		
		Объект[Особенность] = (Объект.ОсобенностьУчета 
								= ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры." + Особенность));
	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
		И (Объект.АлкогольнаяПродукция
		Или Объект.ПродукцияМаркируемаяДляГИСМ 
		Или Объект.КиЗГИСМ) Тогда
		
		Объект.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
		
	КонецЕсли;
	
	Если ЭтоТовар
		Или ЭтоМногооборотнаяТара Тогда
		
		
		Объект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	
	ИначеЕсли ЭтоУслуга Тогда
		Объект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПродавцом;
	КонецЕсли;
	
	УстановитьНастройкуИспользованияСерий();
	
	Если Не ЭтоТовар 
		И Не ЭтоРабота Тогда
		Объект.ОбособленнаяЗакупкаПродажа = Ложь;
	КонецЕсли;
	
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца("Характеристик");
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца("Серий");
	ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца("ТоварныхКатегорий");
		
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "Номенклатура");
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер()
	
	Если Объект.КоэффициентЕдиницыДляОтчетов = 1 Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
		Или Не (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар) 
		Или Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения) Тогда
		Объект.ПоставляетсяВМногооборотнойТаре = Ложь;
		Объект.НоменклатураМногооборотнаяТара = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуИспользованияСерий()
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	Если Не (ЭтоТовар
		Или ЭтоМногооборотнаяТара) Тогда
		Объект.ИспользоватьСерии = Ложь;
		ВариантЗаданияНастроекСерий = "";
		Объект.ПолитикиУчетаСерий.Очистить();
		Объект.ПолитикаУчетаСерий = Справочники.ПолитикиУчетаСерий.ПустаяСсылка();
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка();
		
		Объект.ИспользоватьНомерКИЗГИСМСерии = Ложь;
		Объект.ИспользоватьКоличествоСерии   = Ложь;
		Объект.ИспользоватьСрокГодностиСерии = Ложь;
		Объект.ТочностьУказанияСрокаГодностиСерии = Неопределено;
		Объект.АвтоматическиГенерироватьСерии      = Ложь;
		Объект.ИспользоватьДатуПроизводстваСерии   = Ложь;
		Объект.ИспользоватьПроизводителяЕГАИССерии = Ложь;
		Объект.ИспользоватьСправку2ЕГАИССерии      = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ПродукцияМаркируемаяДляГИСМ
		Или Объект.КиЗГИСМ Тогда
		
		Объект.ИспользоватьСерии = Истина;
		Объект.НастройкаИспользованияСерий   = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
		Объект.ИспользоватьНомерКИЗГИСМСерии = Истина;
		Объект.ИспользоватьRFIDМеткиСерии    = Истина;
		
		Если Объект.КиЗГИСМ Тогда
			Объект.ИспользоватьНомерСерии = Ложь;
			Объект.ИспользоватьСрокГодностиСерии = Ложь;
			Объект.ТочностьУказанияСрокаГодностиСерии = Неопределено;
		Иначе
			Объект.ИспользоватьНомерСерии = Истина;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ОсобенностьУчета = &ОсобенностьУчета
		|	И НЕ ВидыНоменклатуры.ПометкаУдаления
		|	И НЕ ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры";
		
		Запрос.УстановитьПараметр("ОсобенностьУчета", Объект.ОсобенностьУчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Объект.ВладелецСерий = Выборка.Ссылка;
			Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Истина;
			ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
			ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем("Серий");
		Иначе
			
			Объект.ВладелецСерий = Неопределено;
			Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
			ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
			
		КонецЕсли;
		
	ИначеЕсли Объект.ИспользоватьСерии Тогда
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
		Объект.ИспользоватьНомерСерии        = Истина;
		Объект.ИспользоватьНомерКИЗГИСМСерии = Ложь;
		Объект.ИспользоватьКоличествоСерии   = Ложь;
	Иначе
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Объект.АлкогольнаяПродукция Тогда
		Объект.АвтоматическиГенерироватьСерии      = Ложь;
		Объект.ИспользоватьДатуПроизводстваСерии   = Ложь;
		Объект.ИспользоватьПроизводителяЕГАИССерии = Ложь;
		Объект.ИспользоватьСправку2ЕГАИССерии      = Ложь;
	Иначе
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров;
	КонецЕсли;
	
	УдалитьНеКорректныеПолитики();

КонецПроцедуры

&НаСервере
Процедура УдалитьНеКорректныеПолитики()
	
	МассивДопустимыхТиповПолитик = НоменклатураСервер.ДопустимыеТипыПолитикУчетаСерий(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий,
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад
	|ПОМЕСТИТЬ ТаблицаПолитик
	|ИЗ
	|	&ТаблицаПолитик КАК ВидыНоменклатурыПолитикиУчетаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолитик.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПолитик.ПолитикаУчетаСерий,
	|	ТаблицаПолитик.Склад
	|ИЗ
	|	ТаблицаПолитик КАК ТаблицаПолитик
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаПолитик.ПолитикаУчетаСерий КАК Справочник.ПолитикиУчетаСерий).ТипПолитики В (&ТипыПолитик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТипыПолитик", МассивДопустимыхТиповПолитик);
	Запрос.УстановитьПараметр("ТаблицаПолитик", Объект.ПолитикиУчетаСерий.Выгрузить());
	
	Объект.ПолитикиУчетаСерий.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.РазблокированиеРеквизитов",,,,,, 
		Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		НастроитьФорму();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНаСервере()
	
	Если ПустаяСтрока(Объект.ШаблонНаименованияДляПечатиНоменклатуры)
		И ПустаяСтрока(Объект.ШаблонРабочегоНаименованияНоменклатуры)
		И Объект.РеквизитыБыстрогоОтбораНоменклатуры.Количество() = 0
		И Не Объект.КиЗГИСМ Тогда
		ТекстПредупреждения = НСтр("ru = 'Настройки проверки заполнения реквизитов номенклатуры не изменены: не заданы ни шаблоны наименований номенклатуры, ни реквизиты, отображаемые в панели быстрого отбора.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	Иначе
		ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере();
	КонецЕсли;
	
	Если Объект.ИспользоватьХарактеристики Тогда
		Если ПустаяСтрока(Объект.ШаблонНаименованияДляПечатиХарактеристики)
			И ПустаяСтрока(Объект.ШаблонРабочегоНаименованияХарактеристики)
			И Объект.РеквизитыБыстрогоОтбораХарактеристик.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки проверки заполнения реквизитов характеристик не изменены: не заданы ни шаблоны наименований характеристик, ни реквизиты, отображаемые в панели быстрого отбора.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);;
		Иначе
			ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьСерии Тогда
		Если ПустаяСтрока(Объект.ШаблонРабочегоНаименованияСерии) Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки проверки заполнения серий не изменены: не задан шаблон наименования серий.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);;
		Иначе
			ВключитьПроверкуЗаполненияДляРеквизитовСерийНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(ШаблонНаименования)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименования) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Справочники.Номенклатура.ВсеДополнительныеРеквизиты(Объект.Ссылка, "Номенклатура");
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименования);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.Тип;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		СтрокаТЧ.ОтображатьПриСоздании = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонРабочегоНаименованияНоменклатуры);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонНаименованияДляПечатиНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовСерийНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновСерийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(ШаблонНаименованияХарактеристики)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименованияХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Справочники.Номенклатура.ВсеДополнительныеРеквизиты(Объект.Ссылка, "ХарактеристикиНоменклатуры");
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименованияХарактеристики);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(СтрокаТЧ.ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.Тип;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		СтрокаТЧ.ОтображатьПриСоздании = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаСерийНаСервере(ШаблонНаименованияСерии)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименованияСерии) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = Справочники.Номенклатура.ВсеДополнительныеРеквизиты(Объект.Ссылка, "СерииНоменклатуры");
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименованияСерии);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляСерий Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(СтрокаТЧ.ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.Тип;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонРабочегоНаименованияХарактеристики);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонНаименованияДляПечатиХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновСерийНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаСерийНаСервере(Объект.ШаблонРабочегоНаименованияСерии);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяДляОтбора = (Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор).Количество() <> 0);
		
		Если РеквизитИспользуетсяДляОтбора Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
			СтрокаТЧ.ОтображатьПриСоздании = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		Если Объект.РеквизитыБыстрогоОтбораХарактеристик.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
			СтрокаТЧ.ОтображатьПриСоздании = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УсловияДоступности()
	
	УсловияДоступности = Новый Структура;
	УсловияДоступности.Вставить("ЭтоНеиспользуемыйДляКонтроляТип");
	УсловияДоступности.Вставить("ТипРеквизитаБулево");
	УсловияДоступности.Вставить("ЗаполнятьОбязательно");
	УсловияДоступности.Вставить("ТолькоОбязателенДляЗаполнения", Ложь);
	
	Возврат УсловияДоступности;
	
КонецФункции

&НаСервере
Процедура ИспользоватьХарактеристикиПриИзмененииНаСервере()
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	
	Если Не Объект.ИспользоватьХарактеристики Тогда
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать");
		
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "";
		Объект.ШаблонРабочегоНаименованияХарактеристики  = "";
		
		Объект.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Ложь;
		Объект.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		Объект.ВладелецХарактеристик = Неопределено;
	Иначе
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры");
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "[Наименование]";
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
		КонецЕсли;
	КонецЕсли;
	
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "ХарактеристикиНоменклатуры");
	Справочники.ВидыНоменклатуры.ЗаполнитьРеквизитыДляКонтроля(Объект, "Номенклатура");
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСерииПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ИспользоватьСерии Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьСерии Тогда
		ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
	Иначе
		ВариантЗаданияНастроекСерий = "";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
		Объект.ВладелецСерий = Неопределено;
	КонецЕсли;
	
	УстановитьНастройкуИспользованияСерий();
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьУпаковкиПриИзмененииНаСервере()

	Если Объект.ИспользоватьУпаковки Тогда
		Объект.ПоставляетсяВМногооборотнойТаре = Ложь;
		Объект.НоменклатураМногооборотнаяТара = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура НаборУпаковокПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НаборУпаковок)
		И Объект.НаборУпаковок <> ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
		Объект.ЕдиницаИзмерения = Объект.НаборУпаковок.ЕдиницаИзмерения;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НаборУпаковок.ЕдиницаДляОтчетов) Тогда
		Объект.ЕдиницаДляОтчетов = Объект.НаборУпаковок.ЕдиницаДляОтчетов;
		Объект.КоэффициентЕдиницыДляОтчетов = Объект.НаборУпаковок.КоэффициентЕдиницыДляОтчетов;
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальноеНаименованиеПриИзменении(Элемент)
	
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьНаименованиеИзКонстанты" Тогда
		Объект.НаименованиеДляПечати = "";
	КонецЕсли;
		
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатуры()
	
	ТекстВопроса = НСтр("ru = 'Редактирование состава панели быстрого отбора
		|возможно только после записи элемента, записать элемент?'");
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатурыЗавершение", ЭтотОбъект),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru = 'Редактирование панели быстрого отбора'"));
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзмененитьПанельБыстрогоОтбораНоменклатуры();
				
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьПанельБыстрогоОтбораНоменклатуры()
	
	Прочитать();
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "Номенклатура";
	
	АдресВХранилище = ПоместитьВХранилищеРеквизитыБыстрогоОтбора();
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", СтруктураПараметров,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры		

&НаСервере
Функция ПоместитьВХранилищеРеквизитыБыстрогоОтбора()
	
	КоллекцияРеквизитовОтбора      = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовОтбора(Объект, ТекущийТипВладельцаНабораЭлементов);
	КоллекцияРеквизитовДляКонтроля = Справочники.ВидыНоменклатуры.КоллекцияРеквизитовДляКонтроля(Объект, ТекущийТипВладельцаНабораЭлементов);
	
	ТаблицаРеквизитовОтбора = Новый ТаблицаЗначений;
	ТаблицаРеквизитовОтбора.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитовОтбора.Колонки.Добавить("ПредставлениеРеквизита", Новый ОписаниеТипов("Строка"));
	ТаблицаРеквизитовОтбора.Колонки.Добавить("ЭтоДопРеквизит", Новый ОписаниеТипов("Булево"));
	ТаблицаРеквизитовОтбора.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаРеквизитовОтбора.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Реквизит Из КоллекцияРеквизитовДляКонтроля Цикл
		
		Если Реквизит.ДоступностьУникален Тогда
			НоваяСтрока = ТаблицаРеквизитовОтбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизит);
			НоваяСтрока.Используется = КоллекцияРеквизитовОтбора.НайтиСтроки(Новый Структура("ИмяРеквизита",Реквизит.ИмяРеквизита)).Количество() > 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизитовОтбора.Сортировать("ПредставлениеРеквизита");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРеквизитовОтбора, ЭтаФорма.УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристики()
	
	ТекстВопроса = НСтр("ru = 'Редактирование состава панели быстрого отбора
		|возможно только после записи элемента, записать элемент?'");
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристикиЗавершение", ЭтотОбъект),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru = 'Редактирование панели быстрого отбора'"));
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристикиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзмененитьПанельБыстрогоОтбораХарактеристики();
					
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьПанельБыстрогоОтбораХарактеристики()
	Прочитать();
	
	КоличествоДоступных = ТаблицаДопРеквизитовХарактеристик.Количество();
	
	Если КоличествоДоступных = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно отредактировать состав панели быстрого отбора характеристик.
		|Не указаны дополнительные реквизиты характеристик.
		|Перед редактированием состава панели быстрого отбора нужно настроить состав 
		|дополнительных реквизитов характеристик.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "ХарактеристикиНоменклатуры";
	
	АдресВХранилище = ПоместитьВХранилищеРеквизитыБыстрогоОтбора();
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", СтруктураПараметров,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры		

&НаКлиенте
Процедура ДобавитьСкладВПолитикиУчетаСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.Склады") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПолитика = Объект.ПолитикиУчетаСерий.Добавить();
	СтрокаПолитика.Склад = РезультатЗакрытия;
	СтрокаПолитика.ЭтоПолитикаДляСклада = Истина;
	
	ИдентификаторСтроки = СтрокаПолитика.ПолучитьИдентификатор();
	
	ПослеДобавленияНовогоСкладаПодразделенияВПолитикиУчетаСерий(СтрокаПолитика.Склад, СтрокаПолитика.ПолитикаУчетаСерий);
	
	Элементы.ПолитикиУчетаСерий.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделениеВПолитикиУчетаСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПолитика = Объект.ПолитикиУчетаСерий.Добавить();
	СтрокаПолитика.Склад = РезультатЗакрытия;
	СтрокаПолитика.ЭтоПолитикаДляСклада = Ложь;
	
	ИдентификаторСтроки = СтрокаПолитика.ПолучитьИдентификатор();
	
	ПослеДобавленияНовогоСкладаПодразделенияВПолитикиУчетаСерий(СтрокаПолитика.Склад, СтрокаПолитика.ПолитикаУчетаСерий);
	
	Элементы.ПолитикиУчетаСерий.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеПоСкладуКлиент()
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Склад)
		Или ТипЗнч(ТекущиеДанные.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Элементы.НадписьПодсказкаПолитикиУчетаСерий.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьПодсказкаПолитикиУчетаСерий.Видимость = Не ЕстьОрдернаяСхема(ТекущиеДанные.Склад);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОрдернаяСхема(Склад)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады") Тогда
		Возврат Истина;
 	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовНоменклатуры.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовХарактеристик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовХарактеристик.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСерий.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийНоменклатуры.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийХарактеристик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийХарактеристик.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийСерий.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолитикиУчетаСерийПолитикаУчетаСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПолитикиУчетаСерий.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите склад>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыУникален.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьУникален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыОтображатьПриСоздании.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьОтображатьПриСоздании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикУникален.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьУникален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляСерийОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляСерий.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикОтображатьПриСоздании.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьОтображатьПриСоздании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляНоменклатуры(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляНоменклатуры;
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры, ЦветТекстаФормы);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляХарактеристик(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляХарактеристик;
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры);
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик, ЦветТекстаФормы);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляСерий(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляСерий;
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий, ЦветТекстаФормы);	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьСтандартноеОформлениеГиперссылки(Кнопка)
	
	Кнопка.Шрифт = Новый Шрифт;
	Кнопка.ЦветТекста = Новый Цвет;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьОформлениеНажатойГиперссылки(Кнопка, ЦветТекста)
	
	Кнопка.Шрифт = Новый Шрифт(,,Истина);
	Кнопка.ЦветТекста = ЦветТекста;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи)
    
    ПараметрыФормыВыбора = Новый Структура;
    ПараметрыФормыВыбора.Вставить("ТекущийВид", Объект.Ссылка);
    ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОтборФормыВыбора = Новый Структура;
	
	ТипыНоменклатуры = СовместимыеТипыНоменклатуры(Объект.ТипНоменклатуры, ЗначащаяЧастьИмениНадписи);
	Если ТипыНоменклатуры.Количество() > 0 Тогда
		ОтборФормыВыбора.Вставить("ТипНоменклатуры", Новый ФиксированныйМассив(ТипыНоменклатуры));
	КонецЕсли;
	
	ОсобенностиУчета = СовместимыеОсобенностиУчета(Объект.ОсобенностьУчета, ЗначащаяЧастьИмениНадписи);
	Если ОсобенностиУчета.Количество() > 0 Тогда
		ОтборФормыВыбора.Вставить("ОсобенностьУчета", Новый ФиксированныйМассив(ОсобенностиУчета));
	КонецЕсли;
	
	
	Если ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
	    ОтборФормыВыбора.Вставить("ИспользованиеХарактеристик",
	    	ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
		Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") 
			И ИспользоватьПродажуАгентскихУслуг Тогда
			ОтборФормыВыбора.Вставить("ВариантОказанияУслуг", Объект.ВариантОказанияУслуг);
		КонецЕсли;
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ОтборФормыВыбора.Вставить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры", Ложь);
		ОтборФормыВыбора.Вставить("ИспользоватьСерии", Истина);
		ОтборФормыВыбора.Вставить("ПродукцияМаркируемаяДляГИСМ", Объект.ПродукцияМаркируемаяДляГИСМ);
		ОтборФормыВыбора.Вставить("КиЗГИСМ", Объект.КиЗГИСМ);
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		ОтборФормыВыбора.Вставить("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры", Ложь);
	КонецЕсли;		
    
    ПараметрыФормыВыбора.Вставить("Отбор", ОтборФормыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
	
    ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВидВладелецЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    
    ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаВыбора",
   				ПараметрыФормыВыбора,
			    ЭтотОбъект,
			    ,
			    ,
			    ,
			    ОписаниеОповещения,
			    РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидВладелецЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		НастроитьФорму();
	Иначе
		Объект["Владелец" + ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи] = Результат;
		ВыбратьВидВладецСервер(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВидВладецСервер(ЗначащаяЧастьИмениНадписи)
	
	ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи);
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовНоменклатурыСТемЖеВладельцем(ЗначащаяЧастьИмениНадписи)
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
	ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
		
	Если (Не Особенности.ЭтотВидСамЯвляетсяВладельцем 
		И Не ЗначениеЗаполнено(ВидВладелец))
		Или Не Особенности.НуженТекстВНадписи Тогда
		СписокВидов.Очистить();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	&РеквизитВладелец = &ВидВладелец
	|	И &ВидВладелец <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	И ВидыНоменклатуры.Ссылка <> &Ссылка
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелец", "ВидыНоменклатуры.Владелец" + ЗначащаяЧастьИмениНадписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
		Запрос.УстановитьПараметр("ВидВладелец", Объект.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("ВидВладелец", ВидВладелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокВидов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Функция ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи)
	Особенности = Новый Структура("ЭтотВидСамЯвляетсяВладельцем,НуженТекстВНадписи,МожноРедактироватьВладельца");
	
	Особенности.ЭтотВидСамЯвляетсяВладельцем = Ложь;
	Особенности.НуженТекстВНадписи           = Ложь;
	Особенности.МожноРедактироватьВладельца  = Ложь;
	
	Если ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		Если Не Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
		Особенности.МожноРедактироватьВладельца = Не Элементы.НастройкаТоварныхКатегорий.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		Если Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьСерии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ИспользоватьСерии.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
		Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;	
		
		Особенности.НуженТекстВНадписи =  Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
											Или  Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ИспользованиеХарактеристик.ТолькоПросмотр;
		
	КонецЕсли;
	
	Возврат Особенности;
КонецФункции

&НаСервере
Процедура СформироватьНадписьПоВидуВладельцу(ЗначащаяЧастьИмениНадписи);
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	МассивСтрок = Новый Массив;
	Если Особенности.НуженТекстВНадписи Тогда
		
		СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи];
		ПредставлениеКоличестваВидов = "";
		
		Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
			
			Если ЗначащаяЧастьИмениНадписи <> "Серий" Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Список'"),,,,"ОткрытьСписок"+ЗначащаяЧастьИмениНадписи));
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru = 'используется еще в'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru = 'виде,видах,видах'"));
				КонецЕсли;
			Иначе
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru = 'и еще'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru = 'вида,видов,видов'"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
			
			Если Не ЗначениеЗаполнено(ВидВладелец) Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = '<вид не выбран>'"),Новый Шрифт(,,Истина),ЦветаСтиля.ЦветОсобогоТекста));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Выбрать'"),,,,"ИзменитьВладельца"+ЗначащаяЧастьИмениНадписи));
			Иначе	
				
				ПредставлениеВида = ОбщегоНазначенияУТКлиентСервер.ПредставлениеСтрокиСДлинойНеБолее(Строка(ВидВладелец), 40);
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВида,,,,"ОткрытьВладельца"+ЗначащаяЧастьИмениНадписи));
				
				Если Особенности.МожноРедактироватьВладельца Тогда
					МассивСтрок.Добавить(" (");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'изменить'"),,,,"ИзменитьВладельца"+ЗначащаяЧастьИмениНадписи));
					МассивСтрок.Добавить(")");
				КонецЕсли;	
				
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru = 'и еще с'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru = 'видом,видами,видами'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеКоличестваВидов) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличестваВидов,
													,
													,
													,
													"ОткрытьСписокВидовСТемЖеВладельцем"+ЗначащаяЧастьИмениНадписи));
		КонецЕсли;
	КонецЕсли;
	Элементы["Владелец" + ЗначащаяЧастьИмениНадписи].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаПриведенная = СтрЗаменить(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, "");
	
	Если НавигационнаяСсылкаПриведенная = "ОткрытьВладельца" Тогда
		ПоказатьЗначение(,Объект["Владелец" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ИзменитьВладельца" Тогда
		ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписокВидовСТемЖеВладельцем" Тогда
		ПоказатьЗначение(,ЭтотОбъект["ВидыНоменклатурыСТемЖеВладельцем" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписок" Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Переход к списку возможен только после записи данных.'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать'"));
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьСписокЗавершение", ЭтотОбъект, ДополнительныеПараметрыВопроса),
							ТекстВопроса,
							КнопкиВопроса);
			Возврат;
			
		КонецЕсли;
		
		ОткрытьСписокФрагмент(ЗначащаяЧастьИмениНадписи);
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестная навигационная ссылка.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
   ОткрытьСписокФрагмент(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФрагмент(ЗначащаяЧастьИмениНадписи)
    
	Если ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		ПараметрыОткрытия = Новый Структура;
	    ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	    ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	    
	    ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаСписка",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
				
	    ПараметрыОткрытия = Новый Структура;
	    ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	    ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	    
	    ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаСписка",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбщееСвойствоНаСервере(ВыбранноеЗначение, НаборДопРеквизитовСведений, ЭтоНаборыДополнительныхСведений)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", НаборДопРеквизитовСведений);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ЗаблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
			
			ТекущийНаборОбъект = НаборДопРеквизитовСведений.ПолучитьОбъект();
			Если ТекущийНаборОбъект.ВерсияДанных <> ВерсияДанныхТекущегоНабора Тогда
				Если ЭтоНаборыДополнительныхСведений Тогда
					ВызватьИсключение
					НСтр("ru = 'Действие не выполнено, так как состав дополнительных сведений
					|был изменен другим пользователем.
					|Новый состав дополнительных сведений прочитан.
					|
					|Повторите действие, если требуется.'");
				Иначе
					ВызватьИсключение
					НСтр("ru = 'Действие не выполнено, так как состав дополнительных реквизитов
					|был изменен другим пользователем.
					|Новый состав дополнительных реквизитов прочитан.
					|
					|Повторите действие, если требуется.'");
				КонецЕсли;
			КонецЕсли;
			
			ТабличнаяЧасть = ТекущийНаборОбъект[?(ЭтоНаборыДополнительныхСведений,
				"ДополнительныеСведения", "ДополнительныеРеквизиты")];
			
			НайденнаяСтрока = ТабличнаяЧасть.Найти(ВыбранноеЗначение.ОбщееСвойство, "Свойство");
			
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Свойство = ВыбранноеЗначение.ОбщееСвойство;
				ТекущийНаборОбъект.Записать();
				
			ИначеЕсли НайденнаяСтрока.ПометкаУдаления Тогда
				НайденнаяСтрока.ПометкаУдаления = Ложь;
				ТекущийНаборОбъект.Записать();
			КонецЕсли;
			
			Модифицированность = Истина;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	Исключение
		РазблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
		ВызватьИсключение;
	КонецПопытки;
	
	ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВерсиюДанныхНабора(Набор)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Набор, "ВерсияДанных");
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СовместимыеТипыНоменклатуры(ТекущийТипНоменклатуры, ЗначащаяЧастьИмениНадписи)
	
	ТипыНоменклатуры = Новый Массив;
	
	Если ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
		Если ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		Иначе
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
		КонецЕсли;	
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		Если ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		Иначе
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СовместимыеОсобенностиУчета(ТекущаяОсобенностьУчета, ЗначащаяЧастьИмениНадписи)
	
	ОсобенностиУчета = Новый Массив;
	
	Если ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
		Если ТекущаяОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ") Тогда
			ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ"));
		КонецЕсли;	
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		Если ТекущаяОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ") Тогда
			ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ"));
		ИначеЕсли ТекущаяОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ") Тогда	
			ОсобенностиУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсобенностиУчета;
КонецФункции

&НаСервере
Процедура ПроверитьПоТипуИОсобенностиНоменклатуруОчиститьВладельца(ЗначащаяЧастьИмени)
	
	Если Не ЗначениеЗаполнено(Объект["Владелец" + ЗначащаяЧастьИмени]) Тогда
		Возврат;
	КонецЕсли;
		
	РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект["Владелец" + ЗначащаяЧастьИмени], "ТипНоменклатуры,ОсобенностьУчета");
	
	СовместимыеТипыНоменклатуры = СовместимыеТипыНоменклатуры(Объект.ТипНоменклатуры, ЗначащаяЧастьИмени);
	
	Если СовместимыеТипыНоменклатуры.Количество() > 0 
		И СовместимыеТипыНоменклатуры.Найти(РеквизитыВладельца.ТипНоменклатуры) = Неопределено Тогда
		Объект["Владелец" + ЗначащаяЧастьИмени] = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	СовместимыеОсобенностиУчета = СовместимыеОсобенностиУчета(Объект.ОсобенностьУчета, ЗначащаяЧастьИмени);
	
	Если СовместимыеОсобенностиУчета.Количество() > 0 
		И СовместимыеОсобенностиУчета.Найти(РеквизитыВладельца.ОсобенностьУчета) = Неопределено Тогда
		Объект["Владелец" + ЗначащаяЧастьИмени] = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзменении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
		И Результат.НастройкаИспользованияСерий <> Объект.НастройкаИспользованияСерий
		И Объект.ПолитикиУчетаСерий.Количество() > 0 Тогда
		
		Если Объект.ПродукцияМаркируемаяДляГИСМ Тогда
			ТекстВопроса = НСтр("ru = 'Для продукции, маркируемой для ГИСМ может быть назначена только политика учета серий с соответствующим типом.
			|Политики с другими типами будут очищены. Продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для серий, которые используются для учета экземляров товаров, на складах могут быть назначены
			|только политики учета серий с типом ""%СправочноеУказаниеСерий%"". Политики с другими типами будут очищены. Продолжить?'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СправочноеУказаниеСерий%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий"));
		КонецЕсли;
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзмененииЗавершение", ЭтотОбъект, Результат), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	ИначеЕсли Не Результат.ИспользоватьСрокГодностиСерии
		И Объект.ПолитикиУчетаСерий.Количество()> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройка работы с сериями не предусматривает указания в сериях срока годности.
		|Из списка настроек учета серий будут удалены строки, в которых указаны политики учета серий 
		|с типами политики ""%СерииПоFEFO%"" и ""%СрокиГодностиПоПоступлению%"". Продолжить?'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СерииПоFEFO%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.УправлениеПоFEFOОстаткамиСерий"));
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СрокиГодностиПоПоступлению%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзмененииЗавершение", ЭтотОбъект, Результат), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	НастройкаИспользованияСерийПриИзмененииФрагмент(Результат, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
		НастройкаИспользованияСерийПриИзмененииФрагмент(ДополнительныеПараметры, Истина);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастройкаИспользованияСерийПриИзмененииФрагмент(Результат, УдалятьПолитики)
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат, Справочники.ВидыНоменклатуры.ИменаРеквизитовДляФормыНастройкаСоставаРеквизитовСерии("СохранениеРезультатов")); 
	
	Если УдалятьПолитики Тогда											
		УдалитьНеКорректныеПолитики();
	КонецЕсли;
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	
	ИмяСвертываемойГруппы = Элемент.Имя;
	
	ИмяСвертываемойГруппы = СтрЗаменить(ИмяСвертываемойГруппы, "ДекорацияОткрыть", "");
	ИмяСвертываемойГруппы = СтрЗаменить(ИмяСвертываемойГруппы, "ДекорацияЗакрыть", "");
	
	ИзменитьСостояниеСвернутостиГруппы(ИмяСвертываемойГруппы);
	ПодключитьОбработчикОжидания("УстановитьАктивностьСворачиваемойГруппы", 0.0001, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеСвернутостиГруппы(ИмяГруппы)
	
	Элементы["Группа" + ИмяГруппы].Видимость = ?(Элементы["Группа" + ИмяГруппы].Видимость, Ложь, Истина);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Ложь,
		Истина);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Ложь,
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЕстьВидимыеЭлементы(Группа, ЕстьВидимыеЭлементы)
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ЕстьВидимыеЭлементы(Элемент, ЕстьВидимыеЭлементы);
		Иначе
			ЕстьВидимыеЭлементы = ЕстьВидимыеЭлементы Или Элемент.Видимость;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьСворачиваемойГруппы()
	
	Если Элементы["ДекорацияОткрыть" + ИмяСвертываемойГруппы].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяСвертываемойГруппы];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяСвертываемойГруппы];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПолитикиУчетаСерийНеПоУмолчанию()
	
	ВозвращаемоеЗначение = Ложь;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("СоответствуетПолитикеПоУмолчанию", Истина);
	
	СтрокиПоУмолчанию = Объект.ПолитикиУчетаСерий.НайтиСтроки(ПараметрыОтбора);
	
	Если Объект.ПолитикиУчетаСерий.Количество() <> СтрокиПоУмолчанию.Количество() Тогда
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ЕстьИндивидуальныеНастройкиПолитикиУчетаСерийПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЕстьИндивидуальныеНастройкиПолитикиУчетаСерий = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПолитикуУчетаСерийПоУмолчанию();
	ДействиеПриИзмененииПолитикУчетаСерий();
	ОбновитьПредупреждениеПоСкладуКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ДействиеПриИзмененииПолитикУчетаСерий()
	
	ЗаполнитьСлужебныеРеквизиты();
	НастроитьФорму();
	
КонецПроцедуры

// Удаляет дубли строк, а так же скрытые строки если введена переопределяющая строка
//
// Параметры:
//  Склад				 - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия - склад или подразделение новой строки
//  ПолитикаУчетаСерий	 - СправочникСсылка.ПолитикиУчетаСерий - политика учета серий новой строки
//
&НаСервере
Процедура ПослеДобавленияНовогоСкладаПодразделенияВПолитикиУчетаСерий(Склад, ПолитикаУчетаСерий)
	
	СтрокиКУдалению = Новый Массив();
	СтрокиССовпадающимиПолитиками = Новый Массив();
	
	// Поиск всех имеющихся строк по текущему складу
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Склад", Склад);
	
	НайденныеСтроки = Объект.ПолитикиУчетаСерий.НайтиСтроки(СтруктураОтбора);
	
	ИндексовНайденныхСтрок = НайденныеСтроки.Количество() - 1;
	Для Индекс = 0 По ИндексовНайденныхСтрок Цикл
		Строка = НайденныеСтроки[Индекс];
		
		Если Строка.ПолитикаУчетаСерий = Объект.ПолитикаУчетаСерий Тогда
			// Удаление скрытых строк.
			СтрокиКУдалению.Добавить(Строка);
		ИначеЕсли Строка.ПолитикаУчетаСерий = ПолитикаУчетаСерий Тогда
			// Заполнение дублей строк для последующего удаления лишних
			СтрокиССовпадающимиПолитиками.Добавить(Строка);
		Иначе
			// Строки где политика отличается от умолчания остаются - пользователь
			// должен явным образом выбрать какую строку нужно оставить.
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Объект.ПолитикиУчетаСерий.Удалить(Строка);
		
		СтрокаВМассивеСовпадающихПолитик = СтрокиССовпадающимиПолитиками.Найти(Строка);
		Если СтрокаВМассивеСовпадающихПолитик <> Неопределено Тогда
			СтрокиССовпадающимиПолитиками.Удалить(СтрокаВМассивеСовпадающихПолитик);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиССовпадающимиПолитиками.Количество() > 1 Тогда
		Для Индекс = 1 По СтрокиССовпадающимиПолитиками.Количество() - 1 Цикл
			Строка = СтрокиССовпадающимиПолитиками[Индекс];
			Объект.ПолитикиУчетаСерий.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	ДействиеПриИзмененииПолитикУчетаСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПолитикуУчетаСерийПоУмолчанию()
	
	Для Каждого Строка Из Объект.ПолитикиУчетаСерий Цикл
		Строка.ПолитикаУчетаСерий = Объект.ПолитикаУчетаСерий;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиПолитикУчетаСерий()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Склад", Неопределено);
	ПараметрыОтбора.Вставить("ПолитикаУчетаСерий", Справочники.ПолитикиУчетаСерий.ПустаяСсылка());
	СтрокиКУдалению = Объект.ПолитикиУчетаСерий.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ЭлементКУдалению Из СтрокиКУдалению Цикл
		Объект.ПолитикиУчетаСерий.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
