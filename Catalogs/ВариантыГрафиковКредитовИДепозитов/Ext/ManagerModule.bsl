#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет наличие текущего графика платежей по договору кредита, депозита, займа.
//
// Параметры;
//  Договор - СправочникСсылка.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//  ТипГрафика - Строка - Возможные значения "Транши","Оплаты","Начисления".
//
Функция ЕстьГрафик(Договор, ТипГрафика = "Оплаты") Экспорт
	
	ВариантГрафика = ТекущийВариантГрафика(Договор);
	Если ВариантГрафика.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("ВариантГрафика", ВариантГрафика);
	Если ТипГрафика = "Транши" Тогда
		ЗаписиРегистра = РегистрыСведений.ГрафикТраншейКредитовИДепозитов.СрезПервых(,Отбор);
	ИначеЕсли ТипГрафика = "Оплаты" Тогда
		ЗаписиРегистра = РегистрыСведений.ГрафикОплатКредитовИДепозитов.СрезПоследних(,Отбор);
	ИначеЕсли ТипГрафика = "Начисления" Тогда
		ЗаписиРегистра = РегистрыСведений.ГрафикНачисленийКредитовИДепозитов.СрезПоследних(,Отбор);
	КонецЕсли;
	
	Возврат ЗаписиРегистра.Количество() > 0;
	
КонецФункции

// Получает итоговые суммы текущего графика платежей по договору кредита, депозита, займа.
//
// Параметры;
//  Договор - СправочникСсылка.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//
// Возвращаемое значение:
//  Структура - Ключ имя итога, Значение - итогова сумма графика
//
Функция ИтогиГрафика(Договор) Экспорт
	
	ИтогиГрафика = Новый Структура("ДатаПервогоТранша,ДатаПоследнегоПлатежа,СуммаТраншей,СуммаОплаты,СуммаПроцентов,СуммаКомиссии,НачисленияПроцентов,НачисленияКомиссии");
	
	ВариантГрафика = ТекущийВариантГрафика(Договор);
	Если ВариантГрафика.Пустая() Тогда
		Возврат ИтогиГрафика;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикТраншейСрезПервых.ВариантГрафика,
	|	ГрафикТраншейСрезПервых.Период КАК ДатаПервогоТранша
	|ИЗ
	|	РегистрСведений.ГрафикТраншейКредитовИДепозитов.СрезПервых КАК ГрафикТраншейСрезПервых
	|ГДЕ
	|	ГрафикТраншейСрезПервых.ВариантГрафика = &ВариантГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплатСрезПоследних.ВариантГрафика,
	|	ГрафикОплатСрезПоследних.Период КАК ДатаПоследнегоПлатежа
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов.СрезПоследних КАК ГрафикОплатСрезПоследних
	|ГДЕ
	|	ГрафикОплатСрезПоследних.ВариантГрафика = &ВариантГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикТраншейКредитовИДепозитов.ВариантГрафика,
	|	СУММА(ГрафикТраншейКредитовИДепозитов.Сумма) КАК СуммаТраншей
	|ИЗ
	|	РегистрСведений.ГрафикТраншейКредитовИДепозитов КАК ГрафикТраншейКредитовИДепозитов
	|ГДЕ
	|	ГрафикТраншейКредитовИДепозитов.ВариантГрафика = &ВариантГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикТраншейКредитовИДепозитов.ВариантГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплатКредитовИДепозитов.ВариантГрафика,
	|	СУММА(ГрафикОплатКредитовИДепозитов.Сумма) КАК СуммаОплаты,
	|	СУММА(ГрафикОплатКредитовИДепозитов.Проценты) КАК СуммаПроцентов,
	|	СУММА(ГрафикОплатКредитовИДепозитов.Комиссия) КАК СуммаКомиссии
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплатКредитовИДепозитов
	|ГДЕ
	|	ГрафикОплатКредитовИДепозитов.ВариантГрафика = &ВариантГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикОплатКредитовИДепозитов.ВариантГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачисленийКредитовИДепозитов.ВариантГрафика,
	|	СУММА(ГрафикНачисленийКредитовИДепозитов.Проценты) КАК НачисленияПроцентов,
	|	СУММА(ГрафикНачисленийКредитовИДепозитов.Комиссия) КАК НачисленияКомиссии
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК ГрафикНачисленийКредитовИДепозитов
	|ГДЕ
	|	ГрафикНачисленийКредитовИДепозитов.ВариантГрафика = &ВариантГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикНачисленийКредитовИДепозитов.ВариантГрафика";
	
	Запрос.УстановитьПараметр("ВариантГрафика", ВариантГрафика);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Для Каждого Результат Из МассивРезультатов Цикл
		
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ИтогиГрафика,Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтогиГрафика;
	
КонецФункции

// Обновляет в объекте договора итоговые суммы платежей и сроки.
//
// Параметры;
//  Договор - СправочникОбъект.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//
Процедура ОбновитьДанныеГрафиков(Договор) Экспорт
	
	ЗаполнитьЗначенияСвойств(Договор, ИтогиГрафика(Договор.Ссылка));
	ПересчитатьСроки(Договор);
	
КонецПроцедуры

// Обновляет сроки договора кредита, депозита, займа по графику платежей.
//
// Параметры;
//  Договор - СправочникОбъект.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//  ИмяРеквизита - СправочникОбъект.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//
Процедура ПересчитатьСроки(Договор, ИмяРеквизита = "ДатаПоследнегоПлатежа") Экспорт
	
	Если (ИмяРеквизита = "ДатаПервогоТранша" ИЛИ ИмяРеквизита = "ДатаПоследнегоПлатежа")
		И ЗначениеЗаполнено(Договор.ДатаПервогоТранша) 
		И ЗначениеЗаполнено(Договор.ДатаПоследнегоПлатежа) Тогда
		
		Договор.СрокМес = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.Месяц);
		Договор.СрокДней = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.День);
		
	ИначеЕсли ИмяРеквизита = "СрокМес" И ЗначениеЗаполнено(Договор.ДатаПервогоТранша) Тогда
		
		Договор.ДатаПоследнегоПлатежа = ДобавитьМесяц(Договор.ДатаПервогоТранша,Договор.СрокМес);
		Договор.СрокДней = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.День);
		
	ИначеЕсли ИмяРеквизита = "СрокДней"  И ЗначениеЗаполнено(Договор.ДатаПервогоТранша) Тогда
		
		Договор.ДатаПоследнегоПлатежа = Договор.ДатаПервогоТранша + Договор.СрокДней * 60*60*24;
		Договор.СрокМес = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.Месяц);
		
	ИначеЕсли ИмяРеквизита = "СрокМес" И ЗначениеЗаполнено(Договор.ДатаПоследнегоПлатежа) Тогда
		
		Договор.ДатаПервогоТранша = ДобавитьМесяц(Договор.ДатаПоследнегоПлатежа, -Договор.СрокМес);
		Договор.СрокДней = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.День);
		
	ИначеЕсли ИмяРеквизита = "СрокДней"  И ЗначениеЗаполнено(Договор.ДатаПоследнегоПлатежа) Тогда
		
		Договор.ДатаПервогоТранша = Договор.ДатаПоследнегоПлатежа - Договор.СрокДней * 60*60*24;
		Договор.СрокМес = ОбщегоНазначенияУТ.РазностьДат(Договор.ДатаПервогоТранша,Договор.ДатаПоследнегоПлатежа, Перечисления.Периодичность.Месяц);
		
	Иначе
		
		Договор.СрокМес = 0;
		Договор.СрокДней = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Для договора кредита, депозита, займа получает текущий график платежей.
//
// Параметры;
//  Договор - СправочникОбъект.ДоговорыКредитовИДепозитов - договор кредита, депозита, займа.
//
Функция ТекущийВариантГрафика(Договор) Экспорт
	
	Результат = ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(Договор) = Тип("СправочникСсылка.ВариантыГрафиковКредитовИДепозитов") Тогда
		 Возврат Договор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыГрафиковКредитовИДепозитов.Ссылка
	|ИЗ
	|	Справочник.ВариантыГрафиковКредитовИДепозитов КАК ВариантыГрафиковКредитовИДепозитов
	|ГДЕ
	|	ВариантыГрафиковКредитовИДепозитов.Владелец = &Владелец
	|	И НЕ ВариантыГрафиковКредитовИДепозитов.ПометкаУдаления
	|	И ВариантыГрафиковКредитовИДепозитов.Используется";
	
	Запрос.УстановитьПараметр("Владелец",Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКредитовИДепозитов) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор  = "ГрафикОплатНачисленийКредитовИДепозитов";
		КомандаПечати.Представление  = НСтр("ru = 'Печать'");
		КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьВариантаГрафикаОплатыДоговоровКредитовИДепозитов";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Порядок        = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПланФактныйАнализДоговора(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСравнениеПроизвольныхГрафиков(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

