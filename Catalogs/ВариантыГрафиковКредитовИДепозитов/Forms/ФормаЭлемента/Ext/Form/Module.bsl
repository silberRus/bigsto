
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	СсылкаКопирования = Параметры.ЗначениеКопирования;
	Если НЕ СсылкаКопирования.Пустая() Тогда
		
		ПрочитатьНаборСервер("ГрафикТраншей", СсылкаКопирования);
		ПрочитатьНаборСервер("ГрафикОплат", СсылкаКопирования);
		ПрочитатьНаборСервер("ГрафикНачислений", СсылкаКопирования);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Утвержден = ЭтоПервый();
		Объект.Используется = Объект.Утвержден;
		ДоговорПриИзмененииСервер();
		
	КонецЕсли;
	
	Элементы.Используется.ТолькоПросмотр = Объект.Используется;
	Элементы.Утвержден.ТолькоПросмотр = Объект.Утвержден;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьСвязанныеДанные();
	ДоговорПриИзмененииСервер();
	УстановитьДоступностьПоДоговору();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.АвторИзменения = ПользователиКлиентСервер.ТекущийПользователь();
	ТекущийОбъект.ДатаИзменения = ТекущаяДатаСеанса();
	
	Справочники.ВариантыГрафиковКредитовИДепозитов.ПересчитатьСроки(ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНаборСервер("ГрафикТраншей");
	ЗаписатьНаборСервер("ГрафикОплат");
	ЗаписатьНаборСервер("ГрафикНачислений");
	ДанныеГрафика = ОбновитьСвязанныеДанные();
	ОбновитьФлагиАктуальныхГрафиков();
	ПараметрыЗаписи.Вставить("ДанныеГрафика", ДанныеГрафика);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененыСвязанныеДанныеПоКредитуДепозиту", ПараметрыЗаписи, ЭтаФорма);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаГрафикаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УказаннаяСумма = Элемент.ТекущиеДанные.Проценты + Элемент.ТекущиеДанные.Комиссия;
	Если Элемент.Имя = "Оплаты" Тогда
		УказаннаяСумма = УказаннаяСумма + Элемент.ТекущиеДанные.Сумма;
	КонецЕсли;
	Если УказаннаяСумма = 0 И (НЕ НоваяСтрока ИЛИ НЕ ОтменаРедактирования)  Тогда
		Текст  = НСтр("ru='В строке должна быть указана хотя бы одна из сумм!'");
		Если НЕ НоваяСтрока И ОтменаРедактирования Тогда
			Текст  = НСтр("ru='Строки с нулевыми суммами не могут хранится в базе данных!
			|Удалите всю строку целиком.'");
		КонецЕсли;
		ПоказатьПредупреждение(,Текст);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// ТРАНШИ
&НаКлиенте
Процедура ТраншиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаТраншей = ГрафикТраншей.Итог("Сумма");
	ОбновитьДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТраншиПослеУдаления(Элемент)
	
	Объект.СуммаТраншей = ГрафикТраншей.Итог("Сумма");
	ОбновитьДаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПослеУдаления(Элемент)
	
	ОбновитьИтогиОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтогиОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ОбновитьИтогиНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтогиНачислений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьГрафик(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВариантГрафика(Команда)
	
	ЗаписатьГрафик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрафик(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьГрафикПослеВопроса", ЭтотОбъект, Новый Структура("Команда", Команда)), 
		НСтр("ru='Перед загрузкой необходимо записать объект.
			|Записать и продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьГрафикФрагмент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрафикПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	ЗагрузитьГрафикФрагмент(ДополнительныеПараметры.Команда);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрафикФрагмент(Знач Команда)

	ТипГрафика = СтрЗаменить(Команда.Имя,"ЗагрузитьГрафик_","");
	ПараметрыФормы = Новый Структура("ВариантГрафика, ТипГрафика", Объект.Ссылка, ТипГрафика);
	ОткрытьФорму("Справочник.ВариантыГрафиковКредитовИДепозитов.Форма.ФормаЗагрузки", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗагрузитьГрафикЗавершение", ЭтотОбъект, Новый Структура("ТипГрафика", ТипГрафика)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрафикЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = "ОК" Тогда
		ТипГрафика = ДополнительныеПараметры.ТипГрафика;
		ОбновитьСвязанныеДанные(ТипГрафика);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ОбновитьДаты()
	
	// Обновим дату первого транша
	Если ГрафикТраншей.Количество() > 0 Тогда
		ГрафикТраншей.Сортировать("Период");
		Объект.ДатаПервогоТранша = ГрафикТраншей[0].Период;
	Иначе
		Объект.ДатаПервогоТранша = Неопределено;
	КонецЕсли;
	
	// Обновим дату последнего платежа
	Если ГрафикОплат.Количество() > 0 Тогда
		ГрафикОплат.Сортировать("Период");
		Объект.ДатаПоследнегоПлатежа = ГрафикОплат[ГрафикОплат.Количество()-1].Период;
	Иначе
		Объект.ДатаПоследнегоПлатежа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиНачислений()
	
	НачисленияПроцентов = ГрафикНачислений.Итог("Проценты");
	НачисленияКомиссии = ГрафикНачислений.Итог("Комиссия");
	ГрафикНачислений.Сортировать("Период");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиОплат()
	
	СуммаОплаты = ГрафикОплат.Итог("Сумма");
	Объект.СуммаПроцентов = ГрафикОплат.Итог("Проценты");
	Объект.СуммаКомиссии = ГрафикОплат.Итог("Комиссия");
	ОбновитьДаты();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец,"ВалютаВзаиморасчетов,ХарактерДоговора");
	ВалютаДоговора = РеквизитыДоговора.ВалютаВзаиморасчетов;
	ХарактерДоговора = РеквизитыДоговора.ХарактерДоговора;
	
	ПрописатьВалюту(ВалютаДоговора);
	УстановитьДоступностьПоДоговору();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоДоговору()
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец,"Статус,ТипКомиссии");
	ДоговорЗакрыт = Реквизиты.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
	Элементы.НадписьДоговорЗакрыт.Видимость = ДоговорЗакрыт;
	
	ДоступностьЭлементов = Реквизиты.Статус <> Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
	ЕстьКомиссия = Реквизиты.ТипКомиссии <> Перечисления.ТипыКомиссииКредитовИДепозитов.Нет;
	Элементы.ОплатыКомиссия.Видимость = ЕстьКомиссия;
	Элементы.СуммаКомиссии.Видимость = ЕстьКомиссия;
	Элементы.НачисленияКомиссия.Видимость = ЕстьКомиссия;
	Элементы.НачисленияИтогКомиссии.Видимость = ЕстьКомиссия;
	
	// Элементы управления шапки
	МассивДействует = Новый Массив();
	МассивДействует.Добавить("ФормаЗаписать");
	МассивДействует.Добавить("ФормаЗаписатьИЗакрыть");
	МассивДействует.Добавить("Флаги");
	МассивДействует.Добавить("ОписаниеДоговора");
	МассивДействует.Добавить("НаименованиеКод");
	МассивДействует.Добавить("ТраншиКоманднаяПанель");
	МассивДействует.Добавить("ОплатыКоманднаяПанель");
	МассивДействует.Добавить("НачисленияКоманднаяПанель");
	МассивДействует.Добавить("Комментарий");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивДействует, "Доступность", ДоступностьЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаборСервер(ТипГрафика)
	
	ИмяНабора = "";
	Набор = НаборГрафика(ТипГрафика, ИмяНабора);
	Набор.Заполнить(Новый Структура("ВариантГрафика",Объект.Ссылка));
	Набор.Записать();
	ЗначениеВРеквизитФормы(Набор,ИмяНабора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяНабораГрафика(ТипГрафика)
	
	Если ТипГрафика = "Транши" Тогда
		ИмяНабора = "ГрафикТраншей";
	ИначеЕсли ТипГрафика = "Оплаты" Тогда
		ИмяНабора = "ГрафикОплат";
	ИначеЕсли ТипГрафика = "Начисления" Тогда
		ИмяНабора = "ГрафикНачислений";
	Иначе
		ИмяНабора = ТипГрафика;
	КонецЕсли;
	
	Возврат ИмяНабора;
	
КонецФункции

&НаСервере
Функция НаборГрафика(ТипГрафика, ИмяНабора = "", СсылкаОбъекта = Неопределено)
	
	Если СсылкаОбъекта = Неопределено Тогда
		СсылкаОбъекта = Объект.Ссылка;
	КонецЕсли;
	
	ИмяНабора = ИмяНабораГрафика(ТипГрафика);
	Набор = РеквизитФормыВЗначение(ИмяНабора, Тип("РегистрСведенийНаборЗаписей."+ИмяНабора+"КредитовИДепозитов"));
	Набор.Отбор.ВариантГрафика.Установить(СсылкаОбъекта);
	
	Возврат Набор;
	
КонецФункции

&НаСервере
Процедура ПрописатьВалюту(Валюта)
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат;
	КонецЕсли;
	
	// Подпишем итоговые группы
	ШаблонТекста = НСтр("ru='Всего траншей (%1)'");
	Элементы.ГруппаТранши.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	ШаблонТекста = НСтр("ru='Всего оплата (%1)'");
	Элементы.ГруппаОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	ШаблонТекста = НСтр("ru='Всего начисления (%1)'");
	Элементы.ГруппаНачисления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	// Подпишем колонки таблицы "Транши"
	ШаблонТекста = НСтр("ru='Сумма (%1)'");
	Элементы.ТраншиСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	// Подпишем колонки таблицы "Оплаты"
	ШаблонТекста = НСтр("ru='Сумма основного долга (%1)'");
	Элементы.ОплатыСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	ШаблонТекста = НСтр("ru='Сумма процентов (%1)'");
	Элементы.ОплатыПроценты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	ШаблонТекста = НСтр("ru='Сумма комиссии (%1)'");
	Элементы.ОплатыКомиссия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	// Подпишем колонки таблицы "Начисления"
	ШаблонТекста = НСтр("ru='Сумма процентов (%1)'");
	Элементы.НачисленияПроценты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
	ШаблонТекста = НСтр("ru='Сумма комиссии (%1)'");
	Элементы.НачисленияКомиссия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Валюта);
	
КонецПроцедуры

&НаСервере
Функция СоответствуетЛимитуДоговора()
	
	Результат = Истина;
	
	Набор = НаборГрафика("Транши");
	СуммаТраншей = Набор.Итог("Сумма");
	СуммаЛимита = Объект.Владелец.СуммаЛимита;
	Если СуммаЛимита > 0 Тогда
		Результат = СуммаТраншей <= СуммаЛимита;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СуммыГрафиковСходятся()
	
	СуммыДолгаРавны = Объект.СуммаТраншей = СуммаОплаты;
	ПроцентыРавны   = Объект.СуммаПроцентов = НачисленияПроцентов;
	КомиссияРавна   = Объект.СуммаКомиссии = НачисленияКомиссии;

	// Проверим суммы основного долга
	Если НЕ СуммыДолгаРавны Тогда
		Текст  = НСтр("ru='Различаются итоговые суммы основного долга на закладке ""Транши"" и ""Оплаты""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	// Проверим суммы процентов
	Если НЕ ПроцентыРавны Тогда
		Текст  = НСтр("ru='Различаются итоговые суммы процентов на закладке ""Оплаты"" и ""Начисления""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	// Проверим суммы комиссии
	Если ЕстьКомиссия И НЕ КомиссияРавна Тогда
		Текст  = НСтр("ru='Различаются итоговые суммы комиссии на закладке ""Оплаты"" и ""Начисления""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	Возврат СуммыДолгаРавны И ПроцентыРавны И (КомиссияРавна ИЛИ НЕ ЕстьКомиссия);
	
КонецФункции

&НаСервере
Процедура ПрочитатьНаборСервер(ТипГрафика, СсылкаОбъекта = Неопределено)
	
	ИмяНабора = "";
	Набор = НаборГрафика(ТипГрафика, ИмяНабора, СсылкаОбъекта);
	Набор.Прочитать();
	ЗначениеВРеквизитФормы(Набор, ИмяНабора);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСвязанныеДанные(ТипГрафика = Неопределено)
	
	ДанныеГрафика = Справочники.ВариантыГрафиковКредитовИДепозитов.ИтогиГрафика(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Обновим данные графиков
		Если ТипГрафика = Неопределено Тогда
			ПрочитатьНаборСервер("ГрафикТраншей");
			ПрочитатьНаборСервер("ГрафикОплат");
			ПрочитатьНаборСервер("ГрафикНачислений");
		Иначе
			ПрочитатьНаборСервер(ТипГрафика);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект,ДанныеГрафика,"ДатаПервогоТранша,ДатаПоследнегоПлатежа,СуммаТраншей,СуммаПроцентов,СуммаКомиссии");
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеГрафика,"СуммаОплаты,НачисленияПроцентов,НачисленияКомиссии");
		Справочники.ВариантыГрафиковКредитовИДепозитов.ПересчитатьСроки(Объект);
		ДанныеГрафика.Вставить("СрокДней",Объект.СрокДней);
		ДанныеГрафика.Вставить("СрокМес",Объект.СрокМес);
		
	КонецЕсли;// ссылка существует
	
	Возврат ДанныеГрафика;
	
КонецФункции

&НаСервере
Функция ЭтоПервый()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыГрафиковКредитовИДепозитов.Ссылка
	|ИЗ
	|	Справочник.ВариантыГрафиковКредитовИДепозитов КАК ВариантыГрафиковКредитовИДепозитов
	|ГДЕ
	|	НЕ ВариантыГрафиковКредитовИДепозитов.ПометкаУдаления
	|	И ВариантыГрафиковКредитовИДепозитов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ОбновитьФлагиАктуальныхГрафиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыГрафиковКредитовИДепозитов.Ссылка
	|ИЗ
	|	Справочник.ВариантыГрафиковКредитовИДепозитов КАК ВариантыГрафиковКредитовИДепозитов
	|ГДЕ
	|	ВариантыГрафиковКредитовИДепозитов.Владелец = &Владелец
	|	И ВариантыГрафиковКредитовИДепозитов.Ссылка <> &Ссылка
	|	И (ВариантыГрафиковКредитовИДепозитов.Утвержден
	|			ИЛИ ВариантыГрафиковКредитовИДепозитов.Используется)";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Утвержден", Объект.Утвержден);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектГрафика = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект.Утвержден Тогда
			ОбъектГрафика.Утвержден = Ложь;
		КонецЕсли;
		
		Если Объект.Используется Тогда
			ОбъектГрафика.Используется = Ложь;
		КонецЕсли;
		
		ОбъектГрафика.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьГрафик(ЗакрыватьПослеЗаписи = Ложь)
	
	// Обновим итоги
	Объект.СуммаТраншей = ГрафикТраншей.Итог("Сумма");
	ОбновитьИтогиОплат();
	ОбновитьИтогиНачислений();
	
	Если НЕ СоответствуетЛимитуДоговора() Тогда
		
		Текст = НСтр("ru='Сумма траншей превосходит заданный лимит по договору!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
		
	КонецЕсли;// есть ограничение по лимиту
		
	Если НЕ СуммыГрафиковСходятся() Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаНаВопросИгнорировать", ЭтотОбъект, ЗакрыватьПослеЗаписи),
						НСтр("ru='В текущем варианте графика различаются итоговые суммы.
							|Игнорировать?'"),
						РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;// суммы итоговые суммы графика не сходятся
	
	ВыполнитьЗаписьОбъекта(ЗакрыватьПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросИгнорировать(Ответ, ЗакрыватьПослеЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаписьОбъекта(ЗакрыватьПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьОбъекта(ЗакрыватьПослеЗаписи = Ложь)
	
	Записать();
	Если ЗакрыватьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
