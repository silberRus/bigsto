
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Документ) Тогда
		Документ = Параметры.Документ;
	Иначе
		ВызватьИсключение НСтр("ru = 'Протокол обмена может быть открыт только в контексте документа.'");
	КонецЕсли;
	
	Действия = Новый Структура;
	Действия.Вставить("Передать",    Новый Массив);
	Действия.Вставить("Подтвердить", Новый Массив);
	Действия.Вставить("Отменить",    Новый Массив);
	
	Действия.Передать.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"));
	Действия.Передать.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки"));
	Действия.Передать.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения"));
	
	Действия.Подтвердить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях"));
	Действия.Подтвердить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение"));
	Действия.Подтвердить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктПодтверждения"));
	Действия.Подтвердить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктРасхождений"));
	Действия.Подтвердить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения"));
	
	Действия.Отменить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях"));
	Действия.Отменить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной"));
	Действия.Отменить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения"));
	Действия.Отменить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"));
	Действия.Отменить.Добавить(ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных"));
	
	ЗаполнитьДеревоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И (Параметр.Ссылка = Документ Или Параметр.Основание = Документ) Тогда
		
		ЗаполнитьДеревоФайлов();
		РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		ЗаполнитьДеревоФайлов();
		РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			"Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаЗапросОтвет",
			ПараметрыФормы,
			ЭтотОбъект,,
			ВариантОткрытияОкна.ОтдельноеОкно,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПоказатьЗначение(,ДанныеСтроки.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьДеревоФайлов();
	
	РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщенияXML(Команда)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			"Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаЗапросОтвет",
			ПараметрыФормы,
			ЭтотОбъект,,
			ВариантОткрытияОкна.ОтдельноеОкно,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Передать(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Передать.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДальнейшееДействие = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		ТекущиеДанные.Документ,
		ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Отменить.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДальнейшееДействие = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		ТекущиеДанные.Документ,
		ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура Подтвердить(Команда)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Действия.Подтвердить.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДальнейшееДействие = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
		ТекущиеДанные.Документ,
		ДальнейшееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатус(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СсылкаНаДокумент = Документ;
	Иначе
		СсылкаНаДокумент = ТекущиеДанные.Документ;
	КонецЕсли;
	
	ИнтеграцияЕГАИСВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(СсылкаНаДокумент);
	
	Оповестить("ВыполненОбменЕГАИС");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ДеревоЗачеркнутый
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЗачеркнутый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
#КонецОбласти

#Область ДеревоСерый

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеСерый";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
#КонецОбласти

#Область ДеревоЖирный

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеЖирный";

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти

#Область ДеревоОтказ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоФайловПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоФайлов.УсловноеОформление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "УсловноеОформлениеОшибка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи);
	
#КонецОбласти
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ДеревоФайлов.Дата", Элементы.ДеревоФайловДата.Имя);
	
	// Представление даты "<не передано>"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоФайловДата");
	
	ПредставлениеЭлемента = НСтр("ru = 'Представление даты ""<не передано>""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоФайлов" + "." + "Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = '00010101';
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не передано>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОперации(СтрокаПоследовательности, ДокументСсылка, ВыборкаПоФайлам = Неопределено)
	
	Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовЕГАИС.Исходящий Тогда
		
		Если ВыборкаПоФайлам = Неопределено Тогда
			Возврат ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(СтрокаПоследовательности.Операция, Неопределено, Неопределено);
		Иначе
			Возврат ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(СтрокаПоследовательности.Операция, Неопределено, ВыборкаПоФайлам.Версия);
		КонецЕсли;
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовЕГАИС.Входящий Тогда
		
		Возврат ИнтеграцияЕГАИС.ОписаниеОперацииПолученияДанных(СтрокаПоследовательности.Операция);
		
	Иначе
		
		Возврат Строка(СтрокаПоследовательности.Операция);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТаблицаДокументы(Документ = Неопределено)
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка",              Метаданные.Справочники.ЕГАИСПрисоединенныеФайлы.Реквизиты.Документ.Тип);
	ТаблицаДокументы.Колонки.Добавить("Статус",              Метаданные.РегистрыСведений.СтатусыДокументовЕГАИС.Ресурсы.Статус.Тип);
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие1", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие2", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие3", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС"));
	
	Если Документ <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Документ            КАК Ссылка,
		|	Таблица.Статус              КАК Статус,
		|	Таблица.ДальнейшееДействие1 КАК ДальнейшееДействие1,
		|	Таблица.ДальнейшееДействие2 КАК ДальнейшееДействие2,
		|	Таблица.ДальнейшееДействие3 КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &ДокументСсылка
		|");
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаАктПостановкиНаБалансЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления = ИнтеграцияЕГАИС.ПредставлениеДокумента(МетаданныеДокумента);
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГИСМ;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаАктСписанияЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.АктСписанияЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления = ИнтеграцияЕГАИС.ПредставлениеДокумента(МетаданныеДокумента);
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГИСМ;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаВозвратИзРегистра2ЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаПередачаВРегистр2ЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаТТНВходящаяЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаТТНИсходящаяЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
		Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ТТНИсходящаяЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления = ИнтеграцияЕГАИС.ПредставлениеДокумента(МетаданныеДокумента);
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГИСМ;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаЧекЕГАИС(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ЧекЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления = ИнтеграцияЕГАИС.ПредставлениеДокумента(МетаданныеДокумента);
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГИСМ;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаЧекЕГАИСВозврат(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ТаблицаДокументы, ОтображатьСИерархией = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
	|ИЗ
	|	&ТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ           КАК Документ,
	|	ЕГАИСПрисоединенныеФайлы.Ссылка             КАК Ссылка,
	|	ЕГАИСПрисоединенныеФайлы.ТипСообщения       КАК ТипСообщения,
	|	ЕГАИСПрисоединенныеФайлы.Операция           КАК Операция,
	|	ЕГАИСПрисоединенныеФайлы.СообщениеОснование КАК СообщениеОснование,
	|	ЕГАИСПрисоединенныеФайлы.СтатусОбработки    КАК СтатусОбработки,
	|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания       КАК ДатаСоздания,
	|	ЕГАИСПрисоединенныеФайлы.Версия             КАК Версия
	|ПОМЕСТИТЬ втСообщения
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ПО ЕГАИСПрисоединенныеФайлы.Документ = ВременнаяТаблицаДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Сообщения
	|ИЗ
	|	втСообщения КАК Сообщения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСообщения КАК ОтветНаПередачуДанных
	|		ПО Сообщения.Ссылка = ОтветНаПередачуДанных.СообщениеОснование
	|		И (Сообщения.Операция = ОтветНаПередачуДанных.Операция)
	|		И (ОтветНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Входящий))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК ОчередьПередачиДанныхЕГАИС
	|		ПО ОчередьПередачиДанныхЕГАИС.Сообщение = Сообщения.Ссылка
	|ГДЕ
	|	(Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|	И (ВЫБОР // В очереди
	|		КОГДА ОчередьПередачиДанныхЕГАИС.Сообщение ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ
	|	ИЛИ ВЫБОР // Передано в УТМ
	|		КОГДА ОтветНаПередачуДанных.Ссылка ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ)
	|	ИЛИ
	|	Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Входящий))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сообщения.Документ     КАК Документ,
	|	Сообщения.Ссылка       КАК Ссылка,
	|	Сообщения.ДатаСоздания КАК ДатаСоздания,
	|	Сообщения.Операция     КАК Операция
	|ПОМЕСТИТЬ ИсходящиеСообщения
	|ИЗ
	|	Сообщения КАК Сообщения
	|ГДЕ
	|	Сообщения.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПередачаДанных.Документ КАК Документ,
	|
	|	ПередачаДанных.Ссылка                                          КАК Запрос,
	|	ПередачаДанных.ДатаСоздания                                    КАК ЗапросДатаСоздания,
	|
	|	ЕСТЬNULL(ОтветНаПередачуДанных.Ссылка, &ПустаяСсылка)          КАК КвитанцияУТМ,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.ДатаСоздания, ДатаВремя(1,1,1)) КАК КвитанцияУТМДатаСоздания,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.СтатусОбработки, Неопределено)  КАК КвитанцияУТМСостояниеОбработки,
	|
	|	ЕСТЬNULL(КвитанцияПолученЕГАИС.Ссылка, &ПустаяСсылка)          КАК КвитанцияПолученЕГАИС,
	|	ЕСТЬNULL(КвитанцияПолученЕГАИС.ДатаСоздания, &ПустаяСсылка)    КАК КвитанцияПолученЕГАИСДатаСоздания,
	|	ЕСТЬNULL(КвитанцияПолученЕГАИС.СтатусОбработки, Неопределено)  КАК КвитанцияПолученЕГАИССостояниеОбработки,
	|
	|	ЕСТЬNULL(КвитанцияПроведенЕГАИС.Ссылка, &ПустаяСсылка)         КАК КвитанцияПроведенЕГАИС,
	|	ЕСТЬNULL(КвитанцияПроведенЕГАИС.ДатаСоздания, &ПустаяСсылка)   КАК КвитанцияПроведенЕГАИСДатаСоздания,
	|	ЕСТЬNULL(КвитанцияПроведенЕГАИС.СтатусОбработки, Неопределено) КАК КвитанцияПроведенЕГАИССостояниеОбработки
	|ИЗ
	|	ИсходящиеСообщения КАК ПередачаДанных
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК ОтветНаПередачуДанных
	|		ПО ПередачаДанных.Ссылка = ОтветНаПередачуДанных.СообщениеОснование
	|		И (ПередачаДанных.Операция = ОтветНаПередачуДанных.Операция)
	|		И (ОтветНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Входящий))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК КвитанцияПолученЕГАИС
	|		ПО ПередачаДанных.Ссылка = КвитанцияПолученЕГАИС.СообщениеОснование
	|		И (КвитанцияПолученЕГАИС.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Входящий))
	|		И (КвитанцияПолученЕГАИС.Операция В(&КвитанцияПолученЕГАИС))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК КвитанцияПроведенЕГАИС
	|		ПО ПередачаДанных.Ссылка = КвитанцияПроведенЕГАИС.СообщениеОснование
	|		И (КвитанцияПроведенЕГАИС.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Входящий))
	|		И (КвитанцияПроведенЕГАИС.Операция В(&КвитанцияПроведенЕГАИС))
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ПередачаДанных.ДатаСоздания ВОЗР,
	|	ЕСТЬNULL(ОтветНаПередачуДанных.ДатаСоздания,   ДатаВремя(1,1,1)) УБЫВ,
	|	ЕСТЬNULL(КвитанцияПолученЕГАИС.ДатаСоздания,   &ПустаяСсылка)    УБЫВ,
	|	ЕСТЬNULL(КвитанцияПроведенЕГАИС.ДатаСоздания,  &ПустаяСсылка)    УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка                КАК Документ,
	|	ЕСТЬNULL(Запрос.Ссылка,       &ПустаяСсылка)    КАК Ссылка,
	|	ЕСТЬNULL(Запрос.Операция,     Неопределено)     КАК Операция,
	|	ЕСТЬNULL(Запрос.ДатаСоздания, ДатаВремя(1,1,1)) КАК ДатаСоздания,
	|	ЕСТЬNULL(Запрос.Версия,       1)                КАК Версия
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК Запрос
	|		ПО Запрос.Документ = ВременнаяТаблицаДокументы.Ссылка
	|		И (Запрос.СообщениеОснование = &ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Запрос.ДатаСоздания
	|ИТОГИ
	|	МАКСИМУМ(ЕСТЬNULL(Запрос.ДатаСоздания, ДатаВремя(1,1,1))) КАК ДатаСоздания
	|ПО
	|	ВременнаяТаблицаДокументы.Ссылка
	|");
	
	Запрос.УстановитьПараметр("ТаблицаДокументы", ТаблицаДокументы);
	Запрос.УстановитьПараметр("ПустаяСсылка",     Справочники.ЕГАИСПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("КвитанцияПроведенЕГАИС", Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС);
	Запрос.УстановитьПараметр("КвитанцияПолученЕГАИС",  Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[Результат.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеКвитанций     = Результат[Результат.Количество() - 2].Выгрузить();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ПолноеИмя = ВыборкаПоДокументам.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ПоследовательностьОпераций = МенеджерОбъекта.ПоследовательностьОпераций(ВыборкаПоДокументам.Документ);
		
		Если ОтображатьСИерархией Тогда
			СтрокаПервогоУровня = ДеревоФайлов.ПолучитьЭлементы().Добавить();
			СтрокаПервогоУровня.Документ       = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.Представление  = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.ИндексКартинки = 5;
		Иначе
			СтрокаПервогоУровня = ДеревоФайлов;
		КонецЕсли;
		
		Операция          = Неопределено;
		ЕстьОшибка        = Ложь;
		ТребуетсяОжидание = Ложь;
		
		ВыборкаПоФайлам = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Операция = ВыборкаПоФайлам.Операция;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				// Если по документу еще не создано файлов
				Операция = ПоследовательностьОпераций[0].Операция;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Операция", Операция);
			НайденныеСтроки = ПоследовательностьОпераций.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаПоследовательности = Неопределено;
			Иначе
				СтрокаПоследовательности = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			КонецЕсли;
			
			СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
			СтрокаВторогоУровня.Документ       = ВыборкаПоФайлам.Документ;
			СтрокаВторогоУровня.Файл           = ВыборкаПоФайлам.Ссылка;
			СтрокаВторогоУровня.Операция       = Операция;
			СтрокаВторогоУровня.Дата           = ВыборкаПоФайлам.ДатаСоздания;
			СтрокаВторогоУровня.Представление  = ПредставлениеОперации(СтрокаПоследовательности, ВыборкаПоФайлам.Документ, ВыборкаПоФайлам);
			СтрокаВторогоУровня.ИндексКартинки = ИндексКартинки(СтрокаПоследовательности);
			
			Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовЕГАИС.Исходящий Тогда
				
				ДанныеКвитанцийСообщения = ДанныеКвитанций.Найти(ВыборкаПоФайлам.Ссылка, "Запрос");
				ВозвращаемоеЗначение = ОбработатьПередачуДанных(
					ДанныеКвитанцийСообщения,
					СтрокаВторогоУровня,
					СтрокаПоследовательности);
				
				ЕстьОшибка        = ВозвращаемоеЗначение.Ошибка;
				ТребуетсяОжидание = ВозвращаемоеЗначение.Ожидание;
				
			Иначе
				
				ЕстьОшибка        = Ложь;
				ТребуетсяОжидание = Ложь;
				
			КонецЕсли;
			
			Если Не ТребуетсяОжидание Тогда
				Для Каждого ДальнейшееДействие Из СтрокаПоследовательности.ДальнейшиеДействия Цикл
					СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(ДальнейшееДействие);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			СтрокаПоследовательности = ИнтеграцияЕГАИС.ПредыдущаяОперация(ПоследовательностьОпераций, СтрокаПоследовательности);
		КонецЕсли;
		
		Если СтрокаПоследовательности <> Неопределено Тогда
			
			Индекс = ПоследовательностьОпераций.Индекс(СтрокаПоследовательности);
			
			Для Итератор = Индекс + 1 По ПоследовательностьОпераций.Количество() - 1 Цикл
				
				СтрокаСледующаяОперация = ПоследовательностьОпераций.Получить(Итератор);
				Если СтрокаСледующаяОперация.Индекс = 0
					Или СтрокаПоследовательности.Индекс = СтрокаСледующаяОперация.Индекс Тогда
					
					СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
					СтрокаВторогоУровня.Документ           = ВыборкаПоДокументам.Документ;
					СтрокаВторогоУровня.Операция           = СтрокаСледующаяОперация.Операция;
					СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
					СтрокаВторогоУровня.Представление      = ПредставлениеОперации(СтрокаСледующаяОперация, СтрокаВторогоУровня.Документ, Неопределено);
					СтрокаВторогоУровня.ИндексКартинки     = ИндексКартинки(СтрокаСледующаяОперация, Истина);
					
					Для Каждого ДальнейшееДействие Из СтрокаСледующаяОперация.ДальнейшиеДействия Цикл
						СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(ДальнейшееДействие);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПередачуДанных(СтрокаТЧ, СтрокаВторогоУровня, Последовательность)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Ошибка",   Ложь);
	ВозвращаемоеЗначение.Вставить("Ожидание", Ложь);
	
	Если СтрокаТЧ <> Неопределено И ЗначениеЗаполнено(СтрокаТЧ.КвитанцияУТМ) Тогда
		
		Если ЗначениеЗаполнено(СтрокаТЧ.КвитанцияУТМ)
			И СтрокаТЧ.КвитанцияУТМСостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			
			ВозвращаемоеЗначение.Ошибка = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.КвитанцияПолученЕГАИС)
			И СтрокаТЧ.КвитанцияПолученЕГАИССостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			
			ВозвращаемоеЗначение.Ошибка = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.КвитанцияПроведенЕГАИС)
			И СтрокаТЧ.КвитанцияПроведенЕГАИССостояниеОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			
			ВозвращаемоеЗначение.Ошибка = Истина;
			
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.Ошибка Тогда
			
			СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеОшибка";
			СтрокаВторогоУровня.ИндексКартинки = 4; // Ошибка
			
		Иначе
			
			Если    (Не ЗначениеЗаполнено(СтрокаТЧ.КвитанцияУТМ) И Последовательность.КвитанцияУТМ)
				Или (Не ЗначениеЗаполнено(СтрокаТЧ.КвитанцияПолученЕГАИС) И Последовательность.КвитанцияПолученЕГАИС)
				Или (Не ЗначениеЗаполнено(СтрокаТЧ.КвитанцияПроведенЕГАИС) И Последовательность.КвитанцияПроведенЕГАИС) Тогда
				
				СтрокаВторогоУровня.ИндексКартинки = 3; // Ожидание
				ВозвращаемоеЗначение.Ожидание = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ <> Неопределено И ЗначениеЗаполнено(СтрокаТЧ.Запрос) Тогда
		
		СтрокаВторогоУровня.ИндексКартинки = 3;
		
	Иначе
		
		СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
		СтрокаВторогоУровня.ИндексКартинки = 7;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ИндексКартинки(СтрокаПоследовательности, Серый = Ложь)
	
	ИндексКартинки = 0;
	
	Смещение = 0;
	Если Серый Тогда
		Смещение = 6;
	КонецЕсли;
	
	Если СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовЕГАИС.Исходящий Тогда
		ИндексКартинки = 1 + Смещение;
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовЕГАИС.Входящий Тогда
		ИндексКартинки = 2 + Смещение;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоФайлов()
	
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	Строки = Новый Массив;
	Строки.Добавить(НСтр("ru = 'Основание:'"));
	Строки.Добавить(" ");
	Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Документ),,,,ПолучитьНавигационнуюСсылку(Документ)));
	ТекстДокумент = Новый ФорматированнаяСтрока(Строки);
	
	ТипДокумента = ТипЗнч(Документ);
	ЭтоДокументОснование = Ложь;
	
	Если Метаданные.Документы.АктПостановкиНаБалансЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаАктПостановкиНаБалансЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
		
	Если Метаданные.Документы.АктСписанияЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаАктСписанияЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;

	Если Метаданные.Документы.ВозвратИзРегистра2ЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаВозвратИзРегистра2ЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ПередачаВРегистр2ЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаПередачаВРегистр2ЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ТТНВходящаяЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаТТНВходящаяЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ТТНИсходящаяЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаТТНИсходящаяЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ЧекЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ЧекЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаЧекЕГАИС(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ЧекЕГАИСВозврат.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ЗаполнитьПоОснованиюДокументаЧекЕГАИСВозврат(Документ);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Не ЭтоДокументОснование
		Или Метаданные.Справочники.ЕГАИСПрисоединенныеФайлы.Реквизиты.Документ.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		Строки = Новый Массив;
		Строки.Добавить(НСтр("ru = 'Документ:'"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Документ),,,,ПолучитьНавигационнуюСсылку(Документ)));
		ТекстДокумент = Новый ФорматированнаяСтрока(Строки);
		
		ЗаполнитьПоДокументу(ТаблицаДокументы(Документ));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФайловПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандыПередать = Новый Массив;
	КомандыПередать.Добавить(Элементы.ДеревоФайловДействиеПередать);
	КомандыПередать.Добавить(Элементы.ДеревоФайловКонтекстноеМенюДействиеПередать);
	Для Каждого Элемент Из КомандыПередать Цикл
		Элемент.Доступность = Ложь;
	КонецЦикла;
	
	КомандыПодтвердить = Новый Массив;
	КомандыПодтвердить.Добавить(Элементы.ДеревоФайловДействиеПодтвердить);
	КомандыПодтвердить.Добавить(Элементы.ДеревоФайловКонтекстноеМенюДействиеПодтвердить);
	Для Каждого Элемент Из КомандыПодтвердить Цикл
		Элемент.Доступность = Ложь;
	КонецЦикла;
	
	КомандыОтменить = Новый Массив;
	КомандыОтменить.Добавить(Элементы.ДеревоФайловДействиеОтменить);
	КомандыОтменить.Добавить(Элементы.ДеревоФайловКонтекстноеМенюДействиеОтменить);
	Для Каждого Элемент Из КомандыОтменить Цикл
		Элемент.Доступность = Ложь;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		
		Если Действия.Передать.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			Для Каждого Элемент Из КомандыПередать Цикл
				Элемент.Доступность = Истина;
			КонецЦикла;
		ИначеЕсли Действия.Подтвердить.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			Для Каждого Элемент Из КомандыПодтвердить Цикл
				Элемент.Доступность = Истина;
			КонецЦикла;
		ИначеЕсли Действия.Отменить.Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			Для Каждого Элемент Из КомандыОтменить Цикл
				Элемент.Доступность = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Объект = Новый Структура;
	Объект.Вставить("Объект", Новый Структура("Ссылка", Документ));
	Объект.Вставить("Модифицированность", Ложь);
	Объект.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Объект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
