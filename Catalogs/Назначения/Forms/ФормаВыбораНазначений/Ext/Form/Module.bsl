
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.ИмяОбработки = "" Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.Источник);
	Иначе
		МенеджерОбъекта = Обработки[Параметры.ИмяОбработки];
	КонецЕсли;
	
	МакетФормыНазначений = МенеджерОбъекта.МакетФормыВыбораНазначений();
	
	ОчиститьМакетОтНеиспользумыхПараметров();
	
	ПараметрыДинамическогоСписка = Справочники.Назначения.СформироватьПараметрыЗапросаПоМакетуФормыНазначений(МакетФормыНазначений, Параметры);
	
	ЗагрузитьСписокДоступныхКолонок();
	ЗагрузитьСписокДоступныхОтборов();
	
	// Определение текущей закладки из нескольких возможных
	
	УстановитьТекстИПараметрыЗапросаДинамическогоСписка();
	
	СоздатьКолонкиСписка();
	СоздатьФлагиОтбора();
	
	НастроитьФорму();

	МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, СтандартнаяОбработка, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Назначения.Форма.ФормаВыбораНазначений.ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Строка = Элементы.Список.ТекущиеДанные;
	ВозвращаемоеЗначение = ?(Строка <> Неопределено, Строка.Назначение, Неопределено);
	ОповеститьОВыборе(ВозвращаемоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Строка = Элементы.Список.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		ОповеститьОВыборе(Строка.Назначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КолонкиСпискаПометкаПриИзменении(Элемент)
	
	ИмяКлючевойОперации = СтрШаблон("Справочник.Назначения.Форма.ФормаВыбораНазначений.ПометкаПриИзменении.%1", Элемент.Имя);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	КолонкиСпискаПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьСписокДоступныхКолонок()

	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		ВключатьВИтоговыйЗапрос = Справочники.Назначения.ПроверитьУсловиеИспользования(ОписаниеКолонок.Префикс,
																						ОписаниеКолонок.УсловиеИспользования,
																						ПараметрыДинамическогоСписка);
		
		ВключатьВИтоговыйЗапрос = ВключатьВИтоговыйЗапрос И Не ОписаниеКолонок.Отказ;
		
		Для Каждого Колонка Из ОписаниеКолонок.Колонки Цикл
			
			Представление = Колонка.Представление;
			Если СтрНайти(Представление, "%") <> 0 Тогда
				НачалоПодстроки = СтрНайти(Представление, "%");
				КонецПодстроки =  СтрНайти(Представление, "%", НаправлениеПоиска.СКонца);
				ПолнаяПодстрока = Сред(Представление, НачалоПодстроки, КонецПодстроки - НачалоПодстроки + 1);
				Подстрока = СтрЗаменить(ПолнаяПодстрока, "%", "");
				
				Если ПараметрыДинамическогоСписка.Свойство(Подстрока) 
					И ЗначениеЗаполнено(ПараметрыДинамическогоСписка[Подстрока]) Тогда
					Представление = СтрЗаменить(Представление, ПолнаяПодстрока, ПараметрыДинамическогоСписка[Подстрока]);
				Иначе
					// Если представление колонки формируется с помощью значения параметра, а этот параметр не задан,
					// тогда не показываем колонку (считаем что пришли не все необходимые данные).
					ВключатьВИтоговыйЗапрос = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = КолонкиСписка.Добавить();
			НоваяСтрока.ИмяКолонки                    = Колонка.Значение;
			НоваяСтрока.Префикс                       = ОписаниеКолонок.Префикс;
			НоваяСтрока.Представление                 = Представление;
			НоваяСтрока.РазрешеноИспользованиеКолонки = Колонка.Пометка И ВключатьВИтоговыйЗапрос;
			
			КолонкаПоУмолчанию = ОписаниеКолонок.КолонкиПоУмолчанию.Найти(Колонка.Значение) <> Неопределено;
			
			НоваяСтрока.УстановитьОтбор = КолонкаПоУмолчанию И НоваяСтрока.РазрешеноИспользованиеКолонки;
			НоваяСтрока.ПользовательскаяВидимость = ОписаниеКолонок.КолонкиНеотключаемые.Найти(Колонка.Значение) = Неопределено;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокДоступныхОтборов()
	
	Для Каждого ШаблонНазначения Из МакетФормыНазначений.ШаблоныНазначений Цикл
		
		ВключатьВИтоговыйЗапрос = Справочники.Назначения.ПроверитьУсловиеИспользования("",
			ШаблонНазначения.УсловиеИспользования,
			ПараметрыДинамическогоСписка,
			ШаблонНазначения.ПутьКПолюНазначение);
		
		Если Не ВключатьВИтоговыйЗапрос Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПолеОтбора Из ШаблонНазначения Цикл
			
			Если ЗначениеЗаполнено(ПолеОтбора.Значение)
				И ПолеОтбора.Ключ <> "УсловиеИспользования"
				И ПолеОтбора.Ключ <> "ВидимыеОтборыНаФорме"
				И ПолеОтбора.Ключ <> "ТипыНазначений"
				И ПолеОтбора.Ключ <> "ПутьКПолюНазначение" Тогда
				
				Если ПолеОтбора.Ключ = "НаправлениеДеятельности"
					И (СтрНайти(ПолеОтбора.Значение, "Объект.") <> 0
						// В документе "Поступление сырья от давальца" есть только реквизит формы, но нет реквизита объекта "Направление деятельности".
						Или ПолеОтбора.Значение = "НаправлениеДеятельностиПоступленияОтДавальца") Тогда
					
					Если НЕ ПараметрыДинамическогоСписка.Свойство("НаправлениеДеятельности") 
						ИЛИ НЕ НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(ПараметрыДинамическогоСписка.НаправлениеДеятельности) Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				НовыйОтбор = ОтборыСписка.Добавить();
				НовыйОтбор.ИмяПоля		= ПолеОтбора.Ключ;
				НовыйОтбор.ПутьКДанным	= ПолеОтбора.Значение;
				НовыйОтбор.Пометка		= Истина;
				
				Если ШаблонНазначения.ВидимыеОтборыНаФорме.Свойство(ПолеОтбора.Ключ) Тогда
					НовыйОтбор.ВидимостьНаФорме = Истина;
					НовыйОтбор.Представление = СтрШаблон(ШаблонНазначения.ВидимыеОтборыНаФорме[ПолеОтбора.Ключ],
						ПараметрыДинамическогоСписка[ПолеОтбора.Ключ]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкиСписка()
	
	Для ТекущийИндекс = 0 По КолонкиСписка.Количество() - 1 Цикл
		
		Колонка = КолонкиСписка[ТекущийИндекс];
		
		Если Колонка.РазрешеноИспользованиеКолонки Тогда
			
			ИмяКолонки = Колонка.Префикс + "_" + Колонка.ИмяКолонки;
			
			НоваяКолонкаСписка             = Элементы.Добавить("Список" + ИмяКолонки, Тип("ПолеФормы"), Элементы.Список);
			НоваяКолонкаСписка.Вид         = ВидПоляФормы.ПолеНадписи;
			НоваяКолонкаСписка.Заголовок   = Колонка.Представление;
			НоваяКолонкаСписка.Формат      = "ЧДЦ=3";
			НоваяКолонкаСписка.ПутьКДанным = "Список." + ИмяКолонки;
			
			НоваяКолонкаСписка.АвтоМаксимальнаяШирина = Ложь;
			НоваяКолонкаСписка.МаксимальнаяШирина     = 14;
			
			Если Колонка.ПользовательскаяВидимость Тогда
				
				НовыйФлаг             = Элементы.Добавить("Флаг" + ИмяКолонки, Тип("ПолеФормы"), Элементы.ГруппаУправлениеКолонками);
				НовыйФлаг.Вид         = ВидПоляФормы.ПолеФлажка;
				НовыйФлаг.Заголовок   = Колонка.Представление;
				НовыйФлаг.ПутьКДанным = "КолонкиСписка[" + ТекущийИндекс + "].УстановитьОтбор";
				НовыйФлаг.УстановитьДействие("ПриИзменении", "Подключаемый_КолонкиСпискаПометкаПриИзменении");
				НовыйФлаг.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьФлагиОтбора()
	
	Для Каждого Отбор Из ОтборыСписка Цикл
		
		Если Отбор.ВидимостьНаФорме Тогда
			
			НовыйФлаг             = Элементы.Добавить("Флаг_" + Отбор.ИмяПоля, Тип("ПолеФормы"), Элементы.ГруппаУправлениеКолонками);
			НовыйФлаг.Вид         = ВидПоляФормы.ПолеФлажка;
			НовыйФлаг.Заголовок   = Отбор.Представление;
			НовыйФлаг.ПутьКДанным = "ОтборыСписка[" + ОтборыСписка.Индекс(Отбор) + "].Пометка";
			НовыйФлаг.УстановитьДействие("ПриИзменении", "Подключаемый_КолонкиСпискаПометкаПриИзменении");
			НовыйФлаг.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстИПараметрыЗапросаДинамическогоСписка()
	
	ТекстОбъединитьВсе = Справочники.Назначения.ТекстОбъединитьВсе();
	
	// Формирование списка колонок выбираемых запросами
	ПоляУсловийИмеющие = Новый Массив();
	Для Каждого Колонка Из КолонкиСписка Цикл
		Если Колонка.УстановитьОтбор Тогда
			
			ИмяКолонки = Колонка.Префикс + "_" + Колонка.ИмяКолонки;
			Условие = "СУММА(ТаблицаВыборки." + ИмяКолонки + ") <> 0 ";
			ПоляУсловийИмеющие.Добавить(Условие);
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстИмеющие = "ИМЕЮЩИЕ " + СтрСоединить(ПоляУсловийИмеющие, "И " + Символы.ПС);
	ТекстЗапросаИмеющие = ?(ПоляУсловийИмеющие.Количество() > 0, ТекстИмеющие, "");
	
	УсловияНазначения = Новый Массив();
	Для Каждого Отбор Из ОтборыСписка Цикл
		Если Отбор.Пометка Тогда
			
			Если СтрНайти(Отбор.ПутьКДанным, "Объект.") <> 0 Тогда
				Условие = "ТаблицаВыборки.Назначение." + Отбор.ИмяПоля + " = " + "&" + Отбор.ИмяПоля
			Иначе
				Условие = "ТаблицаВыборки.Назначение." + Отбор.ИмяПоля + " = (" + Отбор.ПутьКДанным + ")";
			КонецЕсли;
			УсловияНазначения.Добавить(Условие);
			
		КонецЕсли;
	КонецЦикла;
	
	УсловияНазначения.Добавить("ТаблицаВыборки.Назначение.ТипНазначения В (&ТипыНазначений)");
	Справочники.Назначения.ДобавитьУсловиеИсключенияПартнера(УсловияНазначения, "ТаблицаВыборки.Назначение");
	ТекстЗапросаГде = ?(УсловияНазначения.Количество() > 0,
		"И " + СтрСоединить(УсловияНазначения, Символы.ПС + "	И "),
		"");
	
	ТекстыЗапросов = Новый Массив();
	
	// Формирование списка запросов - источников данных
	// В финальный текст включаются только те запросы, поля из которых используются
	// Для секции ВЫБОРКА досчитываются поля, присутствующие в других запросах
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		ТекстЗапросаПредшествующиеПоля = "";
		ТекстЗапросаПоследующиеПоля = "";
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Префикс", ОписаниеКолонок.Префикс);
		ПараметрыОтбора.Вставить("УстановитьОтбор", Истина);
		
		НайденныеКолонки = КолонкиСписка.НайтиСтроки(ПараметрыОтбора);
		
		// Имеет смысл исполнять запрос, если из него выбирается хотя бы одно поле
		
		ВключатьВИтоговыйЗапрос = Ложь;
		Если КолонкиСписка.Количество() > 0
			И НайденныеКолонки.Количество() > 0 Тогда
			
			ВключатьВИтоговыйЗапрос = Справочники.Назначения.ПроверитьУсловиеИспользования(ОписаниеКолонок.Префикс,
																							ОписаниеКолонок.УсловиеИспользования,
																							ПараметрыДинамическогоСписка);
			
		КонецЕсли;
			
		Если ВключатьВИтоговыйЗапрос Тогда
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Префикс", ОписаниеКолонок.Префикс);
			
			НайденныеКолонки = КолонкиСписка.НайтиСтроки(ПараметрыОтбора);
			
			МинимальныйИндексКолонки = Неопределено;
			МаксимальныйИндексКолонки = 0;
			Для Каждого Колонка Из НайденныеКолонки Цикл
				Индекс = КолонкиСписка.Индекс(Колонка);
				МинимальныйИндексКолонки  = ?(МинимальныйИндексКолонки = Неопределено, Индекс, Мин(МинимальныйИндексКолонки, Индекс));
				МаксимальныйИндексКолонки = Макс(МаксимальныйИндексКолонки, Индекс);
			КонецЦикла;
			
			// Подсчет полей, присутствущих в других запросах
			Для Индекс = 0 По МинимальныйИндексКолонки - 1 Цикл
				Колонка = КолонкиСписка[Индекс];
				ИмяКолонки = Колонка.Префикс + "_" + Колонка.ИмяКолонки;
				ТекстЗапросаПредшествующиеПоля = 
					ТекстЗапросаПредшествующиеПоля
					+ Символы.ПС + "	0 КАК " + ИмяКолонки + ", ";
			КонецЦикла;
			Для Индекс = МаксимальныйИндексКолонки + 1 По КолонкиСписка.Количество() - 1 Цикл
				Колонка = КолонкиСписка[Индекс];
				ИмяКолонки = Колонка.Префикс + "_" + Колонка.ИмяКолонки;
				ТекстЗапросаПоследующиеПоля = 
					ТекстЗапросаПоследующиеПоля
					+ "," + Символы.ПС + "	0 КАК " + ИмяКолонки;
			КонецЦикла;
		
			ТекстЗапроса = ОписаниеКолонок.ТекстЗапроса;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ПоляВыбораПредшествующие", ТекстЗапросаПредшествующиеПоля);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ПоляВыбораПоследующие",    ТекстЗапросаПоследующиеПоля);
			
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		
		БазовыйТекстЗапроса = 
		"ВЫБРАТЬ
		|	Назначения.Ссылка КАК Назначение
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|ГДЕ
		|	&ПодстановкаУдалениеТекущегоЗаказа
		|		И НЕ Назначения.ПометкаУдаления";
		
		Если Параметры.Свойство("Источник") Тогда
			ПодстановкаУдалениеТекущегоЗаказа = "НЕ Назначения.Заказ = &Источник";
		Иначе
			ПодстановкаУдалениеТекущегоЗаказа = "ИСТИНА";
		КонецЕсли;
		БазовыйТекстЗапроса = СтрЗаменить(БазовыйТекстЗапроса, "&ПодстановкаУдалениеТекущегоЗаказа", ПодстановкаУдалениеТекущегоЗаказа);
		
		ТекстыЗапросов.Добавить(БазовыйТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапросаИсточникиДанных = СтрСоединить(ТекстыЗапросов, ТекстОбъединитьВсе);
	
	ТекстЗапросаШаблон = 
	"ВЫБРАТЬ
	|	ТаблицаВыборки.Назначение КАК Назначение
	|	//&КолонкиЗапроса
	|ИЗ
	|	(
	|	//&ЗапросыИсточникиДанных
	|	) КАК ТаблицаВыборки
	|ГДЕ
	|	&ПодстановкаУдалениеТекущегоЗаказа
	|		И НЕ ТаблицаВыборки.Назначение.ПометкаУдаления
	|	//&Условия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыборки.Назначение
	|
	|//&Имеющие
	|
	|Упорядочить ПО
	|	Назначение";
	
	Если Параметры.Свойство("Источник") Тогда
		ПодстановкаУдалениеТекущегоЗаказа = "НЕ ТаблицаВыборки.Назначение.Заказ = &Источник";
	Иначе
		ПодстановкаУдалениеТекущегоЗаказа = "ИСТИНА";
	КонецЕсли;
	ТекстЗапросаШаблон = СтрЗаменить(ТекстЗапросаШаблон, "&ПодстановкаУдалениеТекущегоЗаказа", ПодстановкаУдалениеТекущегоЗаказа);
	
	ТекстЗапросаКолонкиЗапроса = "";
	Для Каждого Колонка Из КолонкиСписка Цикл
		
		ИмяКолонки = Колонка.Префикс + "_" + Колонка.ИмяКолонки;
		
		Если Колонка.УстановитьОтбор Тогда
			ТекстЗапросаКолонкиЗапроса = 
				ТекстЗапросаКолонкиЗапроса
				+ "," + Символы.ПС + "	СУММА(ТаблицаВыборки." + ИмяКолонки + ") КАК " + ИмяКолонки;
		Иначе
			ТекстЗапросаКолонкиЗапроса = 
				ТекстЗапросаКолонкиЗапроса
				+ "," + Символы.ПС + "	0" + " КАК " + ИмяКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапросаШаблон, "//&КолонкиЗапроса",         ТекстЗапросаКолонкиЗапроса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,       "//&ЗапросыИсточникиДанных", ТекстЗапросаИсточникиДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,       "//&Имеющие",                ТекстЗапросаИмеющие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,       "//&Условия",                ТекстЗапросаГде);
	
	Список.ТекстЗапроса = ТекстЗапроса;
	
	Если Параметры.Свойство("Источник") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Источник", Параметры.Источник);
	КонецЕсли;
	
	// Установка значений параметров запроса.
	
	Для Каждого ОписаниеКолонок Из МакетФормыНазначений.ОписанияКолонок Цикл
		
		Для Каждого ПутьКДанным Из ОписаниеКолонок.ПутиКДанным Цикл
			ИмяПараметра = ОписаниеКолонок.Префикс + "_" + ПутьКДанным.Ключ;
			Значение = ПараметрыДинамическогоСписка[ИмяПараметра];
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ПолеОтбора Из ОтборыСписка Цикл
		
		Если ЗначениеЗаполнено(ПолеОтбора.ПутьКДанным)
			И СтрНайти(ПолеОтбора.ПутьКДанным, "Объект.") <> 0 Тогда
			
			ПараметрыУсловияИспользования = Справочники.Назначения.ТекстИПараметрыЗапросаУсловияИспользования("", ПолеОтбора.ПутьКДанным);
			Для Каждого ПараметрЗапроса Из ПараметрыУсловияИспользования.ПараметрыЗапроса Цикл
				ЗначениеПараметра = ПараметрыДинамическогоСписка[ПараметрЗапроса];
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, ПараметрЗапроса, ЗначениеПараметра);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипыНазначений",
		ПараметрыДинамическогоСписка.ТипыНазначений);
	
	Если Параметры.Источник <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Регистратор", Параметры.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	ТекущиеОтборы = Новый Структура("Номенклатура, Характеристика, Партнер, Договор, НаправлениеДеятельности, ДокументРеализации");
	
	ОтборыНаФорме = ОтборыСписка.Выгрузить(Новый Структура("ВидимостьНаФорме", Истина), "ИмяПоля");
	
	// Получение значений параметров, используемых как отборы.
	// В дальнейшем используется для отображения пользователю текущих отборов.
	Для Каждого КлючЗначение Из ПараметрыДинамическогоСписка Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТекущиеОтборы.Номенклатура = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			ТекущиеОтборы.Характеристика = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.Партнеры")
			И ОтборыНаФорме.Найти("Партнер") = Неопределено Тогда
			ТекущиеОтборы.Партнер = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
			И ОтборыНаФорме.Найти("Договор") = Неопределено Тогда
			ТекущиеОтборы.Договор = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("СправочникСсылка.НаправленияДеятельности")
			И ОтборыНаФорме.Найти("НаправлениеДеятельности") = Неопределено Тогда
			ТекущиеОтборы.НаправлениеДеятельности = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ТекущиеОтборы.ДокументРеализации = КлючЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Формирование заголовка
	Если ЗначениеЗаполнено(МакетФормыНазначений.Заголовок) Тогда
		Заголовок = МакетФормыНазначений.Заголовок;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеОтборы.Номенклатура) Тогда
		Заголовок = НСтр("ru = 'Выбор назначения'");
		
		Номенклатура   = СтрЗаменить(НСтр("ru = 'Номенклатура: %1'"),   "%1", ТекущиеОтборы.Номенклатура);
		Характеристика = ?(ЗначениеЗаполнено(ТекущиеОтборы.Характеристика),
								СтрЗаменить(НСтр("ru = 'Характеристика: %1'"), "%1", ТекущиеОтборы.Характеристика),
								"");
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеОтборы.Номенклатура, "ЕдиницаИзмерения");
		ЕдиницаИзмерения = СтрЗаменить(НСтр("ru = 'Ед. изм: %1'"), "%1", ЕдиницаИзмерения);
		ТекстВыборка = Номенклатура
			+ ?(ЗначениеЗаполнено(ТекущиеОтборы.Характеристика), ", " + Характеристика, "")
			+ ", " + ЕдиницаИзмерения;
		
		Заголовок = Заголовок + " (" + ТекстВыборка + ")";
	Иначе
		Заголовок = НСтр("ru = 'Выбор назначения'");
	КонецЕсли;
	
	// Формирование информационной строки по направлению деятельности
	УстановитьНадписьОтобраныНазначения(ТекущиеОтборы);
	
	// Управление видимостью колонок в зависимости от взвода флажков отборов
	Для Каждого Колонка Из КолонкиСписка Цикл
		
		Если Колонка.РазрешеноИспользованиеКолонки Тогда
			КолонкаСписка = Элементы["Список" + Колонка.Префикс + "_" + Колонка.ИмяКолонки];
			КолонкаСписка.Видимость = Колонка.УстановитьОтбор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьОтобраныНазначения(ТекущиеОтборы)
	
	ЗаголовокНадписи = "";
	Если ЗначениеЗаполнено(ТекущиеОтборы.НаправлениеДеятельности) И ЗначениеЗаполнено(ТекущиеОтборы.Договор) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'Назначения направления деятельности %1 по договору %2'");
		ЗаголовокНадписи = СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.НаправлениеДеятельности, ТекущиеОтборы.Договор);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеОтборы.НаправлениеДеятельности) И ЗначениеЗаполнено(ТекущиеОтборы.Партнер) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'Назначения направления деятельности %1 давальца %2'");
		ЗаголовокНадписи = СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.НаправлениеДеятельности, ТекущиеОтборы.Партнер);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеОтборы.НаправлениеДеятельности) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'Назначения направления деятельности %1'");
		ЗаголовокНадписи = СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.НаправлениеДеятельности);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеОтборы.Договор) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'Назначения по договору %1'");
		ЗаголовокНадписи = СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.Договор);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеОтборы.Партнер) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'Назначения давальца %1'");
		ЗаголовокНадписи = СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.Партнер);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеОтборы.ДокументРеализации) Тогда
		
		СтрокаПодстановки = НСтр("ru = 'по данным документа %1'");
		ЗаголовокНадписи = ?(ПустаяСтрока(ЗаголовокНадписи), НСтр("ru = 'Назначения'"), ЗаголовокНадписи)
			+ " " + СтрШаблон(СтрокаПодстановки, ТекущиеОтборы.ДокументРеализации);
		
	КонецЕсли;
	
	Элементы.НадписьОтобраныНазначения.Видимость = Не ПустаяСтрока(ЗаголовокНадписи);
	Элементы.НадписьОтобраныНазначения.Заголовок = ЗаголовокНадписи;

КонецПроцедуры

&НаСервере
Процедура КолонкиСпискаПометкаПриИзмененииНаСервере()
	
	УстановитьТекстИПараметрыЗапросаДинамическогоСписка();
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМакетОтНеиспользумыхПараметров()
	
	КоличествоИндексов = МакетФормыНазначений.ОписанияКолонок.Количество() - 1;
	
	Для Индекс = 0 По КоличествоИндексов Цикл
		
		ТекущийИндекс = КоличествоИндексов - Индекс;
		ОписаниеКолонок = МакетФормыНазначений.ОписанияКолонок[ТекущийИндекс];
		Если ОписаниеКолонок.ПутьКПолюНазначение <> Параметры.ПутьКПолюНазначение Тогда
			МакетФормыНазначений.ОписанияКолонок.Удалить(ТекущийИндекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Назначения.Форма.ФормаВыбораНазначений.Обновление");
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти
