
#Область ОписаниеПеременных

&НаКлиенте
Перем ВнутренниеДанные, СвойстваПароля, ПараметрыОбработчикаОжидания, ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоНастройкиЭДО = ПравоДоступа("Изменение", Метаданные.Справочники.ПрофилиНастроекЭДО);
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФорму();
	КонецЕсли;
	
	// Управление уведомлениями о событиях 1С-ЭДО.
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		УведомлятьОСобытиях = ОбменСКонтрагентамиСлужебный.УведомленияПодключены(Объект.ИдентификаторОрганизации);
		УстановитьНастройкуУведомлений();
	КонецЕсли;
	
	ЭтоПрямойОбмен = ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
	Элементы.СписокСертификатовДобавитьСертификат.Доступность = ПравоДоступа(
		"Изменение", Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования);
	
	Если Не ЕстьПравоНастройкиЭДО Тогда
		Элементы.СписокСертификатовДобавитьСертификат.Доступность = Ложь;
		Элементы.ТекстПриглашений.Доступность = Ложь;
		Элементы.НачальнаяДатаЗапросаДанныхУОператора.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если КонтролироватьСодержимоеНастроекЭД Тогда
		ТекущийОбъект.ИзменитьДанныеВСвязанныхНастройкахЭДО(ТекущийОбъект, Отказ)
	КонецЕсли;
	
	Если ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = FTPКаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = КаталогВходящихДокументов;
	ИначеЕсли ТекущийОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ТекущийОбъект.РесурсВходящихДокументов  = ЭлектроннаяПочтаОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПометитьНеДействующиеСертификатыВСписке();
	Оповестить("ОбновитьСостояниеЭД");
	
	Если КонтролироватьСодержимоеНастроекЭД Тогда
		Оповестить("ОбновитьИсходящиеЭД",Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПометкаУдаления И Не ПропускатьПроверкуНастроекЭДО И ОтсутствуютПодчиненныеНастройкиЭДО() Тогда
		ТекстВопроса = НСтр("ru = 'Подключить контрагента к обмену электронными документами?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Контрагенты");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка." + ИмяСправочникаКонтрагенты) Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Контрагент",         ВыбранноеЗначение);
		ЗначенияЗаполнения.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);

	Иначе
	
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = Истина Тогда
				Сертификат = ВнутренниеДанные["ВыбранныйСертификат"];
				СвойстваПароля = Новый Структура("Значение", ВнутренниеДанные["ВыбранныйСертификатПароль"]);
				ВнутренниеДанные.Удалить("ВыбранныйСертификат");
				ВнутренниеДанные.Удалить("ВыбранныйСертификатПароль");
			Иначе
				Сертификат = ВыбранноеЗначение;
			КонецЕсли;
			ТипВыбранногоЗначения = ТипЗнч(Сертификат);
			Если ТипВыбранногоЗначения = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
				ОповещениеПослеПроверки = Новый ОписаниеОповещения("ЗарегистрироватьДобавитьСертификат", ЭтотОбъект);
				ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
			КонецЕсли;
			СвойстваПароля = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		
		ДанныеИзменены = Ложь;
		
		// ДобавляемыйСертификат инициализируется в ОбработкаВыбора(...)
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДанныеИзменены = Истина;
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
	КонецЕсли;
	
	Если ИмяСобытия = "ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД" Тогда
		
		ДанныеИзменены = Ложь;
		
		// ДобавляемыйСертификат инициализируется в ОбработкаВыбора(...)
		Если ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
			ДанныеИзменены = Истина;
			ДобавитьСертификатПодписиВСписок(ДобавляемыйСертификат);
			Элементы.СертификатыПодписейОрганизации.Обновить();
			ДобавляемыйСертификат = Неопределено;
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = ДанныеИзменены;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверки") Тогда
		// Выполняем серверный вызов, так как нужно проверить валидность маршрута и в случае ошибок спросить у пользователя,
		// записывать ли его.
		ЕстьОшибкиЗаполнения = Ложь;
		Если Не НастройкаВалидирована(ЕстьОшибкиЗаполнения) Тогда
			Отказ = Истина;
			
			Если Не ЕстьОшибкиЗаполнения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПолученОтвет", ЭтотОбъект, ПараметрыЗаписи);
				ТекстВопроса = НСтр("ru = 'Обнаружены возможные ошибки в настройках маршрутов. Продолжить запись?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Настройка некорректна'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Объект.ИдентификаторОрганизации = СокрЛП(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если НЕ ВебКлиент Тогда
	КаталогОбмена(КаталогВходящихДокументов);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	// Если соглашение содержит более одного сертификата, то считается,
	// что все сертификаты были зарегистрированы у оператора ЭДО ранее и
	// обращение в личный кабинет выполняется по текущему или по первому сертификату.
	
	Если Объект.СертификатыПодписейОрганизации.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для входа в личный кабинет должен быть зарегистрирован хотя бы один сертификат'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинет", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить действие можно только в записанном профиле настроек ЭДО.
			|Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриглашенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьРедактированиеТекстаПриглашения", ЭтотОбъект);
	ЗаголовокФормы = НСтр("ru = 'Шаблон текста для приглашений контрагентов'");
	
	ПоказатьВводСтроки(Оповещение, Элементы.ТекстПриглашений.ТекстРедактирования,ЗаголовокФормы, 255, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
								|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("СтарыйИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеИдентификатораОрганизацииЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
								|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИспользоватьУКД", Не Объект.ИспользоватьУКД);
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеИсходящиеДокументыЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ИзменитьФлагУПДУКД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
								|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИспользоватьУПД", Не Объект.ИспользоватьУПД);
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеИсходящиеДокументыЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ИзменитьФлагУПДУКД();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТестПрофиляНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестПрофиляНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущий профиль настроек ЭДО внесены изменения. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек'"));
	Иначе
		ТестПрофиляНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД") Тогда
		
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы("ПодписаниеЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Операция добавления сертификата в профиль настроек ЭДО займет несколько минут.
							|Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСертификатПродолжение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатПродолжение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуВыбораСертификатаЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомлений(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Профиль", Объект.Ссылка);
	ДополнительныеПараметры.Вставить("Идентификатор", Объект.ИдентификаторОрганизации);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаУведомленийПродолжить", ЭтотОбъект, ДополнительныеПараметры);
	
	ПредставлениеОперации = НСтр("ru = 'Настройка уведомлений о событиях ЭДО'");
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьМаркерПрофиляЭДО(ОписаниеОповещения, ДополнительныеПараметры, ПредставлениеОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрофильНастроекЭДО", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыПодписиОрганизации

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Сертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Не КонтролироватьСодержимоеНастроекЭД И Не Элемент.ТекущийЭлемент.ТолькоПросмотр Тогда
		ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
									|Продолжить?'");
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИдентификаторСтроки", Элемент.ТекущиеДанные.ПолучитьИдентификатор());
		ПараметрыОповещения.Вставить("ВерсияФормата",       Элемент.ТекущиеДанные.ВерсияФормата);
		ПараметрыОповещения.Вставить("ИспользоватьЭП",      Элемент.ТекущиеДанные.ИспользоватьЭП);
		ПараметрыОповещения.Вставить("ИсходящийДокумент",   Элемент.ТекущиеДанные.ИсходящийДокумент);
		ПараметрыОповещения.Вставить("Формировать",         Элемент.ТекущиеДанные.Формировать);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовСпискаВидыЭДЗавершить", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" И НЕ Элемент.ТекущиеДанные.ИспользоватьЭП Тогда
			ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только с использованием электронной подписи.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Элемент.ТекущиеДанные.ИсходящийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИспользоватьЭП = Элемент.ТекущиеДанные.Формировать;
		Если Не Элемент.ТекущиеДанные.Формировать Тогда 
			Элемент.ТекущиеДанные.ТребуетсяОтветнаяПодпись = Элемент.ТекущиеДанные.Формировать;
		КонецЕсли;
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура"))
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		
		ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
		Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец"))
		И Объект.ИспользоватьУПД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе счет-фактуры(универсального передаточного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель")
		И Объект.ИспользоватьУКД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе корректировочного счет-фактуры(универсального корректировочного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУПД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура")
		И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУКД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(Элемент.ТекущийЭлемент.Имя) = ВРег("ИсходящиеДокументыДокументУчета") Тогда
		Если Не Элемент.ТекущиеДанные.ИспользоватьЭП Тогда
			Элемент.ТекущиеДанные.ТребуетсяОтветнаяПодпись = Ложь;
		КонецЕсли;
		
		ОбновитьФлагиРегламентаПоСтроке(Элемент.ТекущиеДанные, ЭтоПрямойОбмен, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не КонтролироватьСодержимоеНастроекЭД Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИсходящийДокумент = Элементы.ИсходящиеДокументы.ТекущиеДанные.ИсходящийДокумент;
		СписокДоступныхВерсий = ОбменСКонтрагентамиСлужебныйКлиент.ДоступныеВерсииФорматаПоПараметрамЭД(ИсходящийДокумент,
			Объект.СпособОбменаЭД, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		ТекущийЭлементСписка = СписокДоступныхВерсий.НайтиПоЗначению(ТекСтрока.ВерсияФормата);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсходящиеДокументыВерсияФорматаНачалоВыбораЗавершить",
			ЭтотОбъект,ТекСтрока);
		ЭтаФорма.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВерсий, Элемент, ТекущийЭлементСписка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбораЗавершить(ВыбранныйЭлемент, ТекущиеДанные) Экспорт 
	
	// Изменение представления регламента ЭДО при изменении формата документа Акт об оказании услуг.
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		ТекущиеДанные.ВерсияФормата = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиентСервер.ПриИзмененииФорматаВСтрокеНастроек(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЕстьПравоНастройкиЭДО И Поле.Имя = "ИсходящиеДокументыДополнительныеНастройки" Тогда
	
		Если Не КонтролироватьСодержимоеНастроекЭД Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'Изменения ""Профиля настроек ЭДО"" будут применены для связанных ""Настроек ЭДО"" с отключенным расширенным режимом.
										|Продолжить?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеДополнительныхНастроекЗавершить", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			
			РазрешитьРедактированиеДополнительныхНастроекЗавершить(КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция РезультатПроверкиПередДобавлениемСертификата(Организация, Сертификат)

	Результат = Новый Структура;
	
	// Проверяем равенство ИНН и КПП в сертификате и организации.
	СвойстваСубъекта = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СвойстваСубъектаСертификата(Сертификат);
	СвойстваСубъекта.Вставить("ИНН", 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъекта.ИНН, 12, "0"));
	
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитИНН + ", " + РеквизитКПП);
	СвойстваОрганизации.Вставить(РеквизитИНН, 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваОрганизации[РеквизитИНН], 12, "0"));
	
	Результат.Вставить("ИННОтличается", СвойстваСубъекта.Свойство("ИНН") И СвойстваСубъекта.ИНН <> СвойстваОрганизации[РеквизитИНН]);
	Результат.Вставить("КППОтличается", СвойстваСубъекта.Свойство("КПП") И СвойстваСубъекта.КПП <> СвойстваОрганизации[РеквизитКПП]);
	
	// Проверяем для облачных сертификатов, что их можно использовать.
	Результат.Вставить("СертификатЗапрещенКакОблачный", Ложь);
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ИспользованиеСертификатовОблачногоСервисаВозможно()
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСертификатОблачногоСервиса(Сертификат) Тогда
			
			Результат.Вставить("СертификатЗапрещенКакОблачный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	// Сначала нужно проверить, что выбранный сертификат уже не содержится в списке
	МассивСтрок = Объект.СертификатыПодписейОрганизации.НайтиСтроки(Новый Структура("Сертификат", Сертификат));
	Если МассивСтрок.Количество() > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в профиле настроек ЭДО.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = РезультатПроверкиПередДобавлениемСертификата(Объект.Организация, Сертификат);
	
	// Облачные сертификаты могут быть запрещены.
	Если РезультатыПроверки.СертификатЗапрещенКакОблачный Тогда
		ТекстСообщения = НСтр("ru = 'Выбранный сертификат связан с недопустимым средством ""облачной"" электронной подписи.
			|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
			|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
			|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.
			|Выберите сертификат, связанный с другим средством электронной подписи.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// Для обмена через операторов предупреждаем пользователя, если реквизиты организации ИБ
	// не совпадают с таковыми в сертификате. 
	Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
		ИЛИ Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		Если РезультатыПроверки.ИННОтличается ИЛИ РезультатыПроверки.КППОтличается Тогда
			ДополнительныеПараметры = Новый Структура("ОписаниеОповещения, Сертификат", ОповещениеПослеПроверки, Сертификат);
			ПослеПодтвержденияДобавленияСертификата = Новый ОписаниеОповещения("ПослеПодтвержденияДобавленияСертификата",
				ЭтотОбъект, ДополнительныеПараметры);
				
			Вопросы = Новый Массив;
			
			Если РезультатыПроверки.ИННОтличается И РезультатыПроверки.КППОтличается Тогда
				ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН/КПП по данным выбранного сертификата не совпадают с ИНН/КПП организации.'");
			ИначеЕсли РезультатыПроверки.ИННОтличается Тогда
				ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН по данным выбранного сертификата не совпадает с ИНН организации.'");
			Иначе
				ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'КПП по данным выбранного сертификата не совпадает с КПП организации.'");
			КонецЕсли;
			
			Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
			Вопросы.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
			
			ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
			ПоказатьВопрос(ПослеПодтвержденияДобавленияСертификата, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
		КонецЕсли;
	Иначе
		ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияДобавленияСертификата(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеПередДобавлениемСертификата(ДополнительныеПараметры.Сертификат,
			ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки, Сертификат); 

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДобавитьСертификат(Сертификат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОбменСКонтрагентамиСлужебныйКлиент.ИспользуетсяИнтернетПоддержкаПользователей()
		И Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		ДобавляемыйСертификат = Сертификат;
		ЗарегистрироватьСертификатТакском();
		// Добавление сертификата срабатывает в обработчике оповещения
	ИначеЕсли Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		ДобавляемыйСертификат = Сертификат;
		ЗарегистрироватьСертификат1СЭДО();
		// Добавление сертификата срабатывает в обработчике оповещения
	Иначе
		ДобавитьСертификатПодписиВСписок(Сертификат);
		Элементы.СертификатыПодписейОрганизации.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестОтпечатковСертификатов()
	
	Если ИспользуютсяЭлектронныеПодписи(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСертификаты", ЭтотОбъект);
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуютсяЭлектронныеПодписи(ПрофильНастроек)
	
	ВключенаФО = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Если НЕ ВключенаФО Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК Поле1
	               |ИЗ
	               |	Справочник.ПрофилиНастроекЭДО.ИсходящиеДокументы КАК ПрофилиНастроекЭДОИсходящиеДокументы
	               |ГДЕ
	               |	ПрофилиНастроекЭДОИсходящиеДокументы.Ссылка = &Ссылка
	               |	И ПрофилиНастроекЭДОИсходящиеДокументы.Формировать
	               |	И ПрофилиНастроекЭДОИсходящиеДокументы.ИспользоватьЭП";
	Запрос.УстановитьПараметр("Ссылка", ПрофильНастроек);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
		FTPКаталогВходящихДокументов = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
		КаталогВходящихДокументов    = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
		ЭлектроннаяПочтаОрганизации  = Объект.РесурсВходящихДокументов;
	ИначеЕсли Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		ИЛИ Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификацииНаСайте = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПометитьНеДействующиеСертификатыВСписке();
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Функция ОтсутствуютПодчиненныеНастройкиЭДО()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|ГДЕ
	|	СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД = &СпособОбменаЭД
	|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СпособОбменаЭД", Объект.СпособОбменаЭД);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов(ОбновитьРегламентЭДО = Ложь)
	
	Элементы.ГруппаОбменЧерезОператораИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
		И Подключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском();
	Элементы.ГруппаУПДУКД.Видимость = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.ТекстПриглашений.Видимость = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	
	Элементы.ГруппаПрямойОбменЧерезЭлектроннуюПочтуИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту");
	Элементы.ГруппаПрямойОбменЧерезКаталогИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог");
	Элементы.ГруппаПрямойОбменЧерезFTPИнформация.Видимость = Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP");
	
	Элементы.НачальнаяДатаЗапросаДанныхУОператора.Видимость = Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД);
	Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Доступность = ЗначениеЗаполнено(Объект.ИдентификаторОрганизации)
		И Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском");

	// Настройка по использованию ЭП
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Элементы.ГруппаСертификатыПодписейОрганизации.Видимость = ИспользоватьЭП;
	Элементы.СтраницыПрофиляНастроекЭДО.ОтображениеСтраниц = ?(ИспользоватьЭП, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);

	ВидимостьУведомления = (Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Элементы.ГруппаУведомления.Видимость = ВидимостьУведомления;
	
	Если ОбновитьРегламентЭДО Тогда
		ЗаполнитьПредставлениеНастроек(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакском()
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(ДобавляемыйСертификат) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Сертификат"),
											Объект.Ссылка,
											"СертификатыПодписейОрганизации",
											,
											Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация",
											,
											Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомОповещение", ЭтотОбъект, Контекст);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(ДобавляемыйСертификат, ЭтаФорма,
		Ложь, Истина, Истина, ОбработкаОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомОповещение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
	
		Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(ДобавляемыйСертификат,
			Объект.ИдентификаторОрганизации,
			Объект.Организация,
			Новый ОписаниеОповещения("ЗарегистрироватьСертификатТакскомЗавершение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатТакскомЗавершение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		Оповестить("ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДО()
	
	// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
											Объект.Ссылка,
											"Организация");
		Возврат;
	КонецЕсли;
	ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета();
	
	// Подготовка данных и открытие формы для ввода адреса.
	ВыбратьАдрес(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрационногоПакета()
	
	ДанныеОрганизации = Новый Структура;
	ЭлектронноеВзаимодействиеПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(Объект.Организация, ДанныеОрганизации);
	
	Если ДанныеОрганизации.Свойство("КодИМНС") Тогда
		Объект.КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Индекс") Тогда
		Объект.Индекс = ДанныеОрганизации.Индекс;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Регион") Тогда
		Объект.Регион = ДанныеОрганизации.Регион;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("КодРегиона") Тогда
		Объект.КодРегиона = ДанныеОрганизации.КодРегиона;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Район") Тогда
		Объект.Район = ДанныеОрганизации.Район;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Город") Тогда
		Объект.Город = ДанныеОрганизации.Город;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("НаселенныйПункт") Тогда
		Объект.НаселенныйПункт = ДанныеОрганизации.НаселенныйПункт;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Улица") Тогда
		Объект.Улица = ДанныеОрганизации.Улица;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Дом") Тогда
		Объект.Дом = ДанныеОрганизации.Дом;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Корпус") Тогда
		Объект.Корпус = ДанныеОрганизации.Корпус;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Квартира") Тогда
		Объект.Квартира = ДанныеОрганизации.Квартира;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОПродолжить(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОПослеТестаНастроек", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(ДобавляемыйСертификат, ЭтаФорма,
		Ложь, Истина, Истина, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОПослеТестаНастроек(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения = Истина Тогда
		ДанныеПакета = ДанныеДляРегистрационногоПакета1СЭДОНаСервере();
		Оповещение   = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект);
		ОбменСКонтрагентамиСлужебныйКлиент.СформироватьИОтправитьРегистрационныйПакет1СЭДО(Оповещение, ДанныеПакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, УникальныйИдентификаторЗаявки1СЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляРегистрационногоПакета1СЭДОНаСервере()
	
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	
	ПолучитьАктуальныеДанныеОператораЭДО();
	ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО);
	
	ДанныеПакета = Новый Структура;
	ДанныеПакета.Вставить("РеквизитыПакета", РеквизитыПакета);
	ДанныеПакета.Вставить("ДвоичныеДанныеДляОператораЭДО", ДвоичныеДанныеДляОператораЭДО);
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ДанныеПакета.Вставить("ОператорЭДОСертификат", ОператорЭДОСертификат);
	ДанныеПакета.Вставить("ДобавляемыйСертификат", ДобавляемыйСертификат);
	
	Возврат ДанныеПакета;
	
КонецФункции

&НаСервере
Процедура ПолучитьАктуальныеДанныеОператораЭДО()
	
	ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		
		ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
			Если УзелОператорыЭДО <> Неопределено Тогда
				Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
					
					УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
					Если ВРег(УзелОператорЭДОИд.Значение) = ВРег(Лев(Объект.ИдентификаторОрганизации, 3)) Тогда
						
						УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
						Объект.ОператорЭДО = УзелОператорЭДОНаимОрг.Значение;
						
						УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
						Объект.ОператорЭДОИд = УзелОператорЭДОИд.Значение;
						
						УзелОператорЭДОИНН = УзелОператорЭДО.Строки.Найти("ИННЮЛ", "Имя");
						Объект.ОператорЭДОИНН = УзелОператорЭДОИНН.Значение;
						
						УзелОператорЭДОКПП = УзелОператорЭДО.Строки.Найти("КПП", "Имя");
						Объект.ОператорЭДОКПП = УзелОператорЭДОКПП.Значение;
						
						УзелОператорЭДООГРН = УзелОператорЭДО.Строки.Найти("ОГРН", "Имя");
						Если УзелОператорЭДООГРН <> Неопределено Тогда
							Объект.ОператорЭДООГРН = УзелОператорЭДООГРН.Значение;
						КонецЕсли;
						
						УзелОператорЭДОСертификат = УзелОператорЭДО.Строки.Найти("Сертификат", "Имя");
						Если УзелОператорЭДОСертификат <> Неопределено Тогда
							ОператорЭДОСертификат = УзелОператорЭДОСертификат.Значение;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	// Подготовим данные для соглашения с оператором ЭДО
	ИмяВременногоФайлаСоглашениеЭДО = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьФайл(ИмяВременногоФайлаСоглашениеЭДО, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
	СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаСоглашениеЭДО);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаСоглашениеЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО)
	
	УникальныйИдентификаторЗаявки1СЭДО = ОбменСКонтрагентамиСлужебный.НовыйUUID();
	
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации + ", " + ИмяРеквизитаОГРНОрганизации);

	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
	РеквизитыПакета.Вставить("КППОрганизации",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
	РеквизитыПакета.Вставить("ИдентификаторОрганизации",  Объект.ИдентификаторОрганизации);
	РеквизитыПакета.Вставить("ОператорЭДО",     Объект.ОператорЭДО);
	РеквизитыПакета.Вставить("ОператорЭДОИд",   Объект.ОператорЭДОИд);
	РеквизитыПакета.Вставить("Сертификат", Новый Массив);
	РеквизитыПакета.Вставить("ЭлектроннаяПочта", Объект.ЭлектроннаяПочтаДляУведомлений);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("РегистрационнаяИнформация");

	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// Служебные данные
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсПрог", "1С:Предприятие 8");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсФорм", "5.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КНД",      "1115109");
	
	// Данные по налоговому органу
	Если Не ЗначениеЗаполнено(Объект.КодНалоговогоОргана) И ЗначениеЗаполнено(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]) Тогда
		Объект.КодНалоговогоОргана = Лев(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации], 4);
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КодНО", Объект.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.НаимОрг",   Объект.ОператорЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИдОперЭДО", Объект.ОператорЭДОИд);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИННЮЛ",     Объект.ОператорЭДОИНН);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.КПП",       Объект.ОператорЭДОКПП);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ОГРН",      Объект.ОператорЭДООГРН);
	
	// Данные по абоненту
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "2");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ИдУчастЭДО", Объект.ИдентификаторОрганизации);
		
	Если Не ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Объект.Организация) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.КПП",     СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     Объект.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  Объект.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      Объект.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      Объект.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      Объект.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        Объект.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     Объект.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      Объект.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ИННФЛ",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ОГРНИП", СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     Объект.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  Объект.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      Объект.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      Объект.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", Объект.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      Объект.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        Объект.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     Объект.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      Объект.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ДобавляемыйСертификат.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ДобавляемыйСертификат.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ДобавляемыйСертификат.Отчество);
		
	КонецЕсли;
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	// Добавим текущие сертификаты
	Для каждого СтрокаТаблицы Из Объект.СертификатыПодписейОрганизации Цикл
		ПараметрыТекущегоСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СтрокаТаблицы.Сертификат);
		
		НоваяСтрока = СертификатыПользователя.Добавить();
		НоваяСтрока.ДатаКонСертиф = ПараметрыТекущегоСертификата.ДействителенДо;
		
		Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыТекущегоСертификата.Отпечаток))," ",""));
		НоваяСтрока.ОтпСертиф = Отпечаток;
		
		// Подготовим пользовательский сертификат
		ДвоичныеДанныеСертификата = ПараметрыТекущегоСертификата.ДвоичныеДанныеСертификата;
		
		СертификатТекст = Base64Строка(ДвоичныеДанныеСертификата);
		НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + Символы.ПС
								+ СертификатТекст + Символы.ПС
								+ "-----END CERTIFICATE-----";
		
		РеквизитыПакета.Сертификат.Добавить(СертификатТекст);
		
		НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Фамилия, " ");
		НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Имя, " ");
		НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Отчество, " ");
		
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		НоваяСтрока.ДатаНачСертиф = Сертификат.ДатаНачала;
	КонецЦикла;
	
	НоваяСтрока = СертификатыПользователя.Добавить();
	
	ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
	НоваяСтрока.ДатаКонСертиф = ДобавляемыйСертификат.ДействителенДо;
	
	Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ДобавляемыйСертификат.Отпечаток))," ",""));
	НоваяСтрока.ОтпСертиф = Отпечаток;
	
	СертификатТекст = Base64Строка(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + Символы.ПС
							+ СертификатТекст + Символы.ПС
							+ "-----END CERTIFICATE-----";
	РеквизитыПакета.Сертификат.Добавить(СертификатТекст);

	НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
	НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
	НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя, "УчастЭДО.СертифДолжн");
	
	// Данные по подписанту
	ДолжностьПоСертификату = 0;
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.Должность",    ДолжностьПоСертификату);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ОбменСКонтрагентамиВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
КонецПроцедуры

// Открывает форму выбора адреса в модальном режиме и возвращает
// реквизиты адреса в виде структуры с соответствующими полями.
//
// Параметры:
//  ТолькоДляПросмотра (Булево): Истина - открыть форму выбора адреса только для просмотра.
//
// Возвращаемое значение:
//  Структура с полями - реквизитами адреса или Неопределено, если на форме адреса при закрытии не была нажата кнопка "ОК".
//
&НаКлиенте
Процедура ВыбратьАдрес(ТолькоДляПросмотра = Ложь)
	
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", ТолькоДляПросмотра);
	
	Если ТолькоДляПросмотра Тогда
		ОповещениеОЗакрытии = Неопределено;
	Иначе
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриВыбореАдреса", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Индекс"             , Объект.Индекс);
	ПараметрыФормы.Вставить("Регион"             , Объект.Регион);
	ПараметрыФормы.Вставить("Район"              , Объект.Район);
	ПараметрыФормы.Вставить("Город"              , Объект.Город);
	ПараметрыФормы.Вставить("НасПункт"           , Объект.НаселенныйПункт);
	ПараметрыФормы.Вставить("Улица"              , Объект.Улица);
	ПараметрыФормы.Вставить("Дом"                , Объект.Дом);
	ПараметрыФормы.Вставить("Корпус"             , Объект.Корпус);
	ПараметрыФормы.Вставить("Квартира"           , Объект.Квартира);
	ПараметрыФормы.Вставить("КодРегиона"         , Объект.КодРегиона);
	ПараметрыФормы.Вставить("КодНалоговогоОргана", Объект.КодНалоговогоОргана);
	
	ОткрытьФорму("ОбщаяФорма.АдресУчастникаОбменаЭД",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореАдреса(ПараметрыАдреса, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если адрес изменен, то применение изменений
	Объект.Индекс              = ПараметрыАдреса.Индекс;
	Объект.Регион              = ПараметрыАдреса.Регион;
	Объект.Район               = ПараметрыАдреса.Район;
	Объект.Город               = ПараметрыАдреса.Город;
	Объект.НаселенныйПункт     = ПараметрыАдреса.НаселенныйПункт;
	Объект.Улица               = ПараметрыАдреса.Улица;
	Объект.Дом                 = ПараметрыАдреса.Дом;
	Объект.Корпус              = ПараметрыАдреса.Корпус;
	Объект.Квартира            = ПараметрыАдреса.Квартира;
	Объект.КодРегиона          = ПараметрыАдреса.КодРегиона;
	Объект.КодНалоговогоОргана = ПараметрыАдреса.КодНалоговогоОргана;
	
	ОповещениеПродолжитьДобавлениеСертификата = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОПродолжить", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(ОповещениеПродолжитьДобавлениеСертификата);
	
КонецПроцедуры

// Методы работы с сервисом 1СЭДО

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()

	Попытка
		Если ФормаДлительнойОперации.Открыта() Тогда
			ОписаниеОшибки = "";
			МассивИдентификаторов = ОбменССерверомПолучитьОтветЭДО(УникальныйИдентификаторЗаявки1СЭДО, ОписаниеОшибки);
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			ИначеЕсли ЗначениеЗаполнено(МассивИдентификаторов) Тогда
				Оповестить("ОповещениеОбУспешномИзмененииДанныхУчастникаОбменаЭД");
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбменССерверомПолучитьОтветЭДО(ИдентификаторЗапросаНаРегистрацию, ОписаниеОшибки)
	
	МассивИдентификаторов = Новый Массив;
	
	ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗапросаНаРегистрацию, ОписаниеОшибки);
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		ПолучитьИдентификаторАбонента(ДанныеФайла, МассивИдентификаторов);
	КонецЕсли;
	
	Возврат МассивИдентификаторов;

КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьИдентификаторАбонента(ДанныеФайла, МассивИдентификаторов)
	
	Если Не ПустаяСтрока(ДанныеФайла) Тогда
		ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
			Если УзелАбоненты <> Неопределено Тогда
				Для каждого УзелАбонент Из УзелАбоненты.Строки Цикл
					УзелИдентификаторАбонента = УзелАбонент.Строки.Найти("Identifier", "Имя");
					Если УзелИдентификаторАбонента <> Неопределено Тогда
						МассивИдентификаторов.Добавить(УзелИдентификаторАбонента.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатПодписиВСписок(СертификатЭП)
	
	Строка = Объект.СертификатыПодписейОрганизации.Добавить();
	Строка.Сертификат = СертификатЭП;
	Модифицированность = Истина;
	ПометитьНеДействующиеСертификатыВСписке();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНеДействующиеСертификатыВСписке()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|				И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
	|				И СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо >= &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Действует
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В(&СписокСертификатов)";
	
	Запрос.УстановитьПараметр("СписокСертификатов", Объект.СертификатыПодписейОрганизации.Выгрузить().ВыгрузитьКолонку("Сертификат"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.СертификатыПодписейОрганизации Цикл
		СтрокиРезультата = ТаблицаРезультата.НайтиСтроки(Новый Структура("Ссылка", Строка.Сертификат));
		Если СтрокиРезультата.Количество() = 1 Тогда
			Строка.Действует = СтрокиРезультата[0].Действует;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбмена(ПутьККаталогу)
	
#Если НЕ ВебКлиент Тогда
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите сетевой каталог для обмена'");
	ДиалогКаталога.Каталог   = ПутьККаталогу;
	Если ДиалогКаталога.Выбрать() Тогда
		Модифицированность = Не ПутьККаталогу = ДиалогКаталога.Каталог;
		ПутьККаталогу = ДиалогКаталога.Каталог;
		ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(ПутьККаталогу);
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСертификатаЭП()
	
	Если Объект.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru='Для выполнения действия необходимо снять пометку удаления.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
		// Обработчик библиотеки ИПП
		
		Если ПустаяСтрока(Объект.ИдентификаторОрганизации)
			И Объект.СертификатыПодписейОрганизации.Количество() > 0 Тогда
			// Эта операция запрещена. Так как в соглашении уже имеется хотя бы один
			// сертификат, но еще не получен идентификатор.
			ТекстПредупреждения = НСтр("ru = 'Перед добавлением новых сертификатов в профиль настроек ЭДО
											|необходимо получить идентификатор участника обмена ЭД'");
			ПоказатьПредупреждение(, ТекстПредупреждения, 30);
			Возврат;
			
			// Иначе
			// Остались случаи, когда добавляется первый сертификат
			// и когда добавляемый сертификат нужно зарегистрировать в 1С-Такском
			// оба этих случая отрабатываются в обработчике события формы ОбработкаВыбора.
			
		КонецЕсли;
		
		// Конец обработчика библиотеки ИПП
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийПродолжить(РасшифрованныйМаркер, ДополнительныеПараметры) Экспорт
	
	Если РасшифрованныйМаркер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУведомления = СвойстваПодписок(РасшифрованныйМаркер);
	
	Если НастройкиУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУведомления.Вставить("ИдентификаторОрганизации", ДополнительныеПараметры.Идентификатор);
	НастройкиУведомления.Вставить("ПрофильНастроек", ДополнительныеПараметры.Профиль);
	
	ОповещениеФормы = Новый ОписаниеОповещения("НастройкаУведомленийЗакрытие", ЭтотОбъект);
	ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.НастройкаУведомленийЭДО", НастройкиУведомления, ЭтотОбъект,,,,
			ОповещениеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция СвойстваПодписок(РасшифрованныйМаркер)
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	АдресРесурса = "GetSubscriptions/?query=" + Объект.ИдентификаторОрганизации;
	ВидОперации = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");

	Если ЭтоАдресВременногоХранилища(РасшифрованныйМаркер) Тогда
		Маркер = ПолучитьИзВременногоХранилища(РасшифрованныйМаркер);
	Иначе
		Маркер = РасшифрованныйМаркер;
	КонецЕсли;
	
	
	Настройка = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(Маркер, СпособОбмена, АдресРесурса, ВидОперации);
	
	Если Настройка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПодписок = ПустыеРеквизитыПодписки();
	
	СвойстваПодписок.ВключитьПодписку = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.Total.Status);
	СвойстваПодписок.ЭлектроннаяПочта = Настройка.Mail;
	СвойстваПодписок.Приглашения = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.NewInvitations.Status);
	СвойстваПодписок.Ответы = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.NewInvitationResults.Status);
	СвойстваПодписок.НовыеЭД = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.NewMessages.Status);
	СвойстваПодписок.СтарыеЭД = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.UnfinishedMessages.Status);
	СвойстваПодписок.Сертификаты = ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.CertExpiration.Status);
	
	Возврат СвойстваПодписок;
	
КонецФункции

&НаКлиенте
Процедура НастройкаУведомленийЗакрытие(ПараметрыОповещения, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеПочты = Ложь;
	Если Не ПараметрыОповещения.УведомлятьОСобытиях = УведомлятьОСобытиях 
		Или Не ПараметрыОповещения.АдресУведомлений = Объект.ЭлектроннаяПочтаДляУведомлений Тогда
		
		УведомлятьОСобытиях = ПараметрыОповещения.УведомлятьОСобытиях;
		Объект.ЭлектроннаяПочтаДляУведомлений = ПараметрыОповещения.АдресУведомлений;
		
		ОбновитьОтображениеПочты = Истина;
		
	КонецЕсли;
	
	Если ОбновитьОтображениеПочты Тогда
		
		УстановитьНастройкуУведомлений();
		ЭтотОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПустыеРеквизитыПодписки()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВключитьПодписку", Неопределено);
	Реквизиты.Вставить("ЭлектроннаяПочта", Неопределено);
	Реквизиты.Вставить("Приглашения", Неопределено);
	Реквизиты.Вставить("Ответы", Неопределено);
	Реквизиты.Вставить("НовыеЭД", Неопределено);
	Реквизиты.Вставить("СтарыеЭД", Неопределено);
	Реквизиты.Вставить("Сертификаты", Неопределено);
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуУведомлений()
	
	Если УведомлятьОСобытиях Тогда
		ЗаголовокШаблон = НСтр("ru ='Email для уведомлений: %1'");
	Иначе
		ЗаголовокШаблон = НСтр("ru ='Уведомления не подключены'");
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляУведомлений) Тогда
		АдресУведомлений = Объект.ЭлектроннаяПочтаДляУведомлений;
	ИначеЕсли УведомлятьОСобытиях Тогда
		АдресУведомлений = НСтр("ru = '<не указан>'");
	КонецЕсли;
	
	ЗаголовокПочты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, АдресУведомлений);
	
	Элементы.НастройкаУведомлений.Заголовок = ЗаголовокПочты;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегламентаЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат);
	
	Модифицированность = Макс(Модифицированность, Результат.Модифицированность); 
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеНастроек(Объект)
	
	Для Каждого ТекСтрока Из Объект.ИсходящиеДокументы Цикл
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатыПодписейОрганизации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СертификатыПодписейОрганизации.Действует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КонтролироватьСодержимоеНастроекЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	ОбменСКонтрагентамиСлужебный.УстановитьУсловноеОформлениеФорматов(ЭтотОбъект);
    	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Если ЕстьПравоНастройкиЭДО Тогда
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	Иначе
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	КонецЕсли;

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Тест настроек профиля ЭДО

&НаКлиенте
Процедура ТестПрофиляНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
			
			ПроверитьУчетнуюЗаписьЭлектроннойПочты(Объект.РесурсВходящихДокументов);
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = Объект.РесурсВходящихДокументов;
			
			// Блок проверки доступа к каталогам.
			ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к общему каталогу для обмена ЭД.
			|%1'");
			Попытка
				Если ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(
					ПутьКРодительскомуКаталогуПрофильНастроекЭДО) Тогда
					
					РезультатТеста = НСтр("ru = 'Пройден успешно.'");
				Иначе
					РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ПолучитьСообщениеОбОшибке("107");
				КонецЕсли;
			Исключение
				ШаблонРезультата = НСтр("ru = '%1
				|%2'");
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ПолучитьСообщениеОбОшибке("107");
				РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
			
			// Блок проверки доступа к каталогам.
			ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к серверу FTP для обмена ЭД.
			|%1'");
			Попытка
				ПараметрыСоединения = Новый Структура;
				ПараметрыСоединения.Вставить("FTPКаталогВходящихДокументов", FTPКаталогВходящихДокументов);
				ПараметрыСоединения.Вставить("АдресСервераFTP", Объект.АдресСервера);
				ПараметрыСоединения.Вставить("ПортFTP", Объект.Порт);
				ПараметрыСоединения.Вставить("ПользовательFTP", Объект.Логин);
				ПараметрыСоединения.Вставить("ПарольFTP", Объект.Пароль);
				ПараметрыСоединения.Вставить("ПассивноеСоединениеFTP", Объект.ПассивноеСоединение);
				Если ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаFTP(ПараметрыСоединения) Тогда
					РезультатТеста = НСтр("ru = 'Пройден успешно.'");
				Иначе
					РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ПолучитьСообщениеОбОшибке("107");
				КонецЕсли;
			Исключение
				ШаблонРезультата = НСтр("ru = '%1
				|%2'");
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ПолучитьСообщениеОбОшибке("107");
				РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ТестОтпечатковСертификатов();
		
	Иначе
		// Блок проверки связи с оператором.
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование связи с сервисом ЭДО. Подождите...'"));
		
		Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект);
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчетнуюЗаписьЭлектроннойПочты(УчетнаяЗапись)
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась с ошибками:
					   |%1'"), СообщениеОбОшибке ));
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась успешно. %1'"),
			ДополнительноеСообщение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение)
	
	 РаботаСПочтовымиСообщениями.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(УчетнаяЗапись, СообщениеОбОшибке, ДополнительноеСообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСертификаты(Отпечатки, Параметры = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Получаем доступные сертификаты без учета пользователя, поскольку тест профиля и его администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, Объект.Ссылка, Ложь);
	
	Сертификат = Неопределено;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ТекСертификат = КлючЗначение.Ключ;
		Если Сертификат = Неопределено Тогда
			// Если в соответствии нет сертификатов с сохраненным паролем, то для теста возьмем первый из списка сертификат.
			Сертификат = ТекСертификат;
		КонецЕсли;
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			Сертификат = ТекСертификат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(Сертификат, ЭтаФорма, Ложь, Ложь, Ложь);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Параметры = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	// Получаем доступные сертификаты без учета пользователя, поскольку тест профиля и его администрирование может
	// выполнять администратор системы, а не пользователь, подписывающий документы.
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Объект.Ссылка, Ложь);
	
	МассивСертификатов = Новый Массив;
	ЕстьСвойство = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		СвойствоСертификата = Неопределено;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			И КлючЗначение.Значение.Свойство("ПарольПолучен", ЕстьСвойство) И ЕстьСвойство = Истина
			И КлючЗначение.Значение.Свойство("ПарольПользователя", СвойствоСертификата) Тогда
			ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(КлючЗначение.Ключ, СвойствоСертификата);
		КонецЕсли;
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступных сертификатов. Тест не выполнен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеДанных = Новый Структура;
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация,
		Объект.Наименование);
	ОписаниеДанных.Вставить("Операция",            Операция);

	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	
	ОписаниеДанных.Вставить("БезПодтверждения",    ЕстьСвойство И МассивСертификатов.Количество() = 1);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(Знач РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("СертификатПодписи", РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	Контекст.Вставить("РезультатВыполнения", РезультатВыполнения);
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст)
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        Контекст.СертификатПодписи);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           Объект.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ИнтернетПоддержкаПользователейПодключена);
		
	Если Не ИнтернетПоддержкаПользователейПодключена
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификатаАутентификация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Контекст.РезультатВыполнения;

	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, РезультатВыполнения.ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификатаАутентификация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПолучениеМаркераДляВыбранногоСертификатаПродолжить(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			Если Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			    СверитьУчетныеДанныеСОператором(РезультатВыполнения.РасшифрованныеДанные);
			Иначе
				ПриУспешнойПроверкеПрофиля();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверитьУчетныеДанныеСОператором(РасшифрованныйМаркер)

	УчетныеДанныеОператора = УчетныеДанныеАбонентаТакском(РасшифрованныйМаркер);
	Если УчетныеДанныеОператора <> Неопределено Тогда
		Если УчетныеДанныеОператора.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации Тогда
			ПриУспешнойПроверкеПрофиля();
		Иначе 
			ШаблонСообщения = НСтр("ru = 'Идентификатор организации ""%1"", привязанный к учетной записи, отличается от указанного.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, УчетныеДанныеОператора.ИдентификаторОрганизации);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "ИдентификаторОрганизации", "Объект");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетныеДанныеАбонентаТакском(ДанныеМаркера)
	
	Результат = Неопределено;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	АдресРесурса = "GetMyAccountInfo";
	ВидОперации = НСтр("ru = 'Получение учетных данных'");
	
	РезультатОперации = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(ДанныеМаркера, СпособОбмена, АдресРесурса,
		ВидОперации);
		
	Если РезультатОперации <> Неопределено Тогда
		Если РезультатОперации.Свойства().Получить("TaxcomId") = Неопределено Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не обнаружено.'");
		ИначеЕсли Не ЗначениеЗаполнено(РезультатОперации.TaxcomId) Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не заполнено.'");	
		Иначе
			Результат = Новый Структура;
			Результат.Вставить("ИдентификаторОрганизации", РезультатОперации.TaxcomId);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеОписаниеОшибки, ТекстОшибки);	
		КонецЕсли;
	Иначе
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриУспешнойПроверкеПрофиля()
	
	ТекстСообщения = НСтр("ru = 'Тест профиля настроек выполнен успешно.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

// Оповещения после интерфейсных действий

&НаКлиенте
Процедура ПередЗакрытиемПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Контрагенты");
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник." + ИмяСправочникаКонтрагенты + ".ФормаВыбора",
			ПараметрыФормыВыбора, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПропускатьПроверкуНастроекЭДО = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинет(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	Массив = Новый Массив;
	Массив.Добавить(Объект.Ссылка);
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПерейтиВЛичныйКабинетОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЛичныйКабинетОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	СертификатПодписи  = Неопределено;
	ПарольПользователя = Неопределено;
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И Не ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстСообщения = НСтр("ru='Нет доступных сертификатов, среди зарегистрированных по данному профилю настроек ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			,
			"СертификатыПодписейОрганизации",
			"Объект.СертификатыПодписейОрганизации");
	Иначе
		Для Каждого ЭлементСтруктуры Из СоответствиеПрофилейИПараметровСертификатов Цикл
			СтруктураСертификата = ЭлементСтруктуры.Значение;
			Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
				СтруктураСертификата.Свойство("СертификатПодписи", СертификатПодписи);
				СтруктураСертификата.Свойство("ПарольПользователя", ПарольПользователя);
			КонецЕсли;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		Подключение1СТакскомКлиент.ОткрытьЛичныйКабинетАбонента(СертификатПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовСпискаВидыЭДЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
	Иначе
		
		ЗаполнитьЗначенияСвойств(Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки),
			ДополнительныеПараметры);
		ЭтаФорма.ТекущийЭлемент = Элементы.ИдентификаторОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеДополнительныхНастроекЗавершить(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ИсходящиеДокументы;
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Формировать Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФормы = ОбменСКонтрагентамиСлужебныйКлиент.СвойстваДокументооборотаЭД();
	ЗаполнитьЗначенияСвойств(СвойстваФормы, ДанныеСтроки);
	
	НастройкиРегламентаЭДО = ОбменСКонтрагентамиСлужебныйКлиент.НастройкиРегламентаЭДО(ДанныеСтроки.ИсходящийДокумент, ДанныеСтроки.ВерсияФормата, Объект.СпособОбменаЭД);
	СвойстваФормы.Вставить("НастройкиРегламентаЭДО", НастройкиРегламентаЭДО);
	СвойстваФормы.Вставить("ОтображатьВыборПрофиля", Ложь);
	СвойстваФормы.Вставить("Организация", Объект.Организация);
	СвойстваФормы.Вставить("ИспользоватьУПД", Объект.ИспользоватьУПД);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаРегламентаЭДОПродолжить", ЭтотОбъект, СвойстваФормы);
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуРегламентаЭДО(ОписаниеОповещения, СвойстваФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеИдентификатораОрганизацииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
	Иначе
		Объект.ИдентификаторОрганизации = СокрЛП(ДополнительныеПараметры.СтарыйИдентификаторОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеТекстаПриглашения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		Объект.ШаблонТекстаПриглашений = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхВызовов

&НаКлиенте
Процедура РазрешитьРедактированиеИсходящиеДокументыЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КонтролироватьСодержимоеНастроекЭД = Истина;
		ИзменитьФлагУПДУКД();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИспользоватьУПД") Тогда
			Объект.ИспользоватьУПД = ДополнительныеПараметры.ИспользоватьУПД;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИспользоватьУКД") Тогда
			Объект.ИспользоватьУКД = ДополнительныеПараметры.ИспользоватьУКД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлагУПДУКД()
	
	Для каждого Строка Из Объект.ИсходящиеДокументы Цикл
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУКД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если Объект.ИспользоватьУПД Тогда
				ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
				Строка.Формировать = Истина;
			Иначе
				ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Строка);
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если Объект.ИспользоватьУКД Тогда
				ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
				Строка.Формировать = Истина;
			Иначе
				ВерсияФормата = ОбменСКонтрагентамиСлужебный.АктуальнаяВерсияФорматаЭД(Строка.ИсходящийДокумент);
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			
			ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Строка);
			
		КонецЕсли;
		
		ОбновитьФлагиРегламентаПоСтроке(Строка, ЭтоПрямойОбмен, Объект.ИспользоватьУПД, Объект.ИспользоватьУКД);
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ЗаполнитьПредставлениеРегламентаЭДОВСтроке(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФлагиРегламентаПоСтроке(Строка, ЭтоПрямойОбмен, ИспользоватьУПД, ИспользоватьУКД)
	
	// Если флаг использования установлен, нужно актуализировать флаги ответной подписи и извещения.
	Если Не ЭтоПрямойОбмен
		И Строка.Формировать Тогда
		
		Строка.ИспользоватьЭП = Строка.Формировать;
		Если (Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") И Не ИспользоватьУПД)
			Или (Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") 
			И Не ИспользоватьУКД) Тогда
			
			Строка.ТребуетсяОтветнаяПодпись = Ложь;
			Строка.ТребуетсяИзвещениеОПолучении = Ложь;
		Иначе
			
			Строка.ТребуетсяОтветнаяПодпись = Строка.ИспользоватьЭП;
			Если Строка.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату") Тогда
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ТребуетсяИзвещениеОПолучении = Истина;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ПроверкиПередЗаписью

&НаСервере
Функция НастройкаВалидирована(ЕстьОшибкиЗаполнения = Ложь)
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	
	ЕстьОшибкиВЗависимыхНастройках = Ложь;
	Если Не ЕстьОшибкиЗаполнения Тогда
		// Проверим, что все указанные маршруты возможно выполнить
		ПроверитьСоответствиеСертификатовМаршрутам(ЕстьОшибкиВЗависимыхНастройках);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибкиЗаполнения И Не ЕстьОшибкиВЗависимыхНастройках;

КонецФункции

&НаСервере
Процедура ПроверитьСоответствиеСертификатовМаршрутам(Отказ)
	
	СертификатыДляПодписи = Объект.СертификатыПодписейОрганизации.Выгрузить(,"Сертификат").ВыгрузитьКолонку("Сертификат");
	
	// Подготовим соответствие Маршрут - виды документов маршрута
	СоответствиеВидовЭДМаршрутам = Новый Соответствие;
	Для Каждого СтрокаИсходящегоДокумента Из Объект.ИсходящиеДокументы Цикл
		Если СтрокаИсходящегоДокумента.ИспользоватьЭП И СтрокаИсходящегоДокумента.Формировать Тогда
			МаршрутПодписания 	= СтрокаИсходящегоДокумента.МаршрутПодписания;
			ВидЭД				= СтрокаИсходящегоДокумента.ИсходящийДокумент;
			
			МассивЭД = СоответствиеВидовЭДМаршрутам[МаршрутПодписания];
			Если МассивЭД = Неопределено Тогда
				МассивЭД = Новый Массив;
				СоответствиеВидовЭДМаршрутам.Вставить(МаршрутПодписания, МассивЭД);
			КонецЕсли;
			МассивЭД.Добавить(ВидЭД);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим валидность каждого маршрута в соответствии с установленными настройками
	Для Каждого ЭлементСоответствия Из СоответствиеВидовЭДМаршрутам Цикл
		МаршрутПодписания = ЭлементСоответствия.Ключ;
		ВидыЭД            = ЭлементСоответствия.Значение;
		
		РезультатыПроверки = ЭлектронноеВзаимодействиеСлужебный.РезультатыПроверкиМаршрутаПоПараметрамНастройки(
			МаршрутПодписания, СертификатыДляПодписи, ВидыЭД);
			
		ЭлектронноеВзаимодействиеСлужебный.ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, 
			Объект.Ссылка, МаршрутПодписания, Отказ);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиПолученОтвет(Ответ, ПараметрыЗаписи) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		НовыеПараметрыЗаписи = Новый Структура;
		НовыеПараметрыЗаписи.Вставить("ПропуститьПроверки");
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			НовыеПараметрыЗаписи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		Записать(НовыеПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
