#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ПараметрыОбменаССервером, ТекущийПрофильТакском;

&НаКлиенте
Перем ЗаданиеНаПроверкуЗапущено;

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТаблицыДанных = Неопределено;
	Если Параметры.Свойство("АдресТаблицыДанных", АдресТаблицыДанных)
		И ТипЗнч(АдресТаблицыДанных) = Тип("Строка")
		И НЕ ЭтоАдресВременногоХранилища(АдресТаблицыДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормы(АдресТаблицыДанных);
	
	Если ПрофилиНастроекЭДО.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаданиеНаПроверкуЗапущено = Неопределено Тогда
		ЗаданиеНаПроверкуЗапущено = Ложь;
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ПараметрыОбменаССервером = Новый Структура;
	ПараметрыОбменаССервером.Вставить("ИдентификаторФормы",   УникальныйИдентификатор);
	ПараметрыОбменаССервером.Вставить("АдресРезультата",      Неопределено);
	ПараметрыОбменаССервером.Вставить("ИдентификаторЗадания", Неопределено);
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = 5;
	
	ПараметрыЗакрытия = Новый Структура;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент, ПараметрыЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ОбработкаВыбораСертификата(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПоказатьПомощникРегистрацииСертификатов" Тогда
		Параметр.ФормаПомощникаОткрыта = Истина;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Открыть();
		ЗаполнитьДанныеФормы(Параметр.АдресТаблицыДанных, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НеподписанныеДокументыНадписьНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НеподписанныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПредставленийДанных = Новый Массив;
	Для Каждого ЭлементСписка Из НеподписанныеДокументы Цикл
		СписокПредставленийДанных.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПредставленийДанных", СписокПредставленийДанных);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПредставленийДанных", СписокПредставленийДанных);
	ПараметрыФормы.Вставить("ПредставлениеДанных", Элементы.НеподписанныеДокументыНадпись.Заголовок);
	НоваяФорма = ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ПросмотрДанных", ПараметрыФормы, ЭтотОбъект);
	НоваяФорма.УстановитьСписокПредставлений(НеподписанныеДокументы, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверитьДанныеНажатие(Элемент)
	
	Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьРедактированиеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.КодНалоговогоОргана = КодНалоговогоОргана;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ЭлектроннаяПочта = ЭлектроннаяПочта;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрофилиНастроекЭДО

&НаКлиенте
Процедура ПрофилиНастроекЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Если ТекущиеДанные.Статус = 1
		ИЛИ ТекущиеДанные.Статус = -1
		ИЛИ ТекущиеДанные.Статус = 3 Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ДобавитьСертификатВПрофильНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиНастроекЭДОПриАктивизацииСтроки(Элемент)
	
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ДобавитьСертификатВПрофильНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьПовторно(Команда)
	
	Если ЗначениеЗаполнено(НеподписанныеДокументы) Тогда
		
		Оповещение = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭД", ОбменСКонтрагентамиКлиент);
		ЭлектронноеВзаимодействиеКлиентПереопределяемый.ВыполнитьПроверкуПроведенияДокументов(
			НеподписанныеДокументы.ВыгрузитьЗначения(), Оповещение);
		
		НеподписанныеДокументы.Очистить();
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрофильНастроекЭДО(Команда)
	
	ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСобытийФормы

&НаСервере
Процедура ЗаполнитьДанныеФормы(АдресТаблицыДанных, ПовторноеЗаполнение = Ложь)
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресТаблицыДанных);
	УдалитьИзВременногоХранилища(АдресТаблицыДанных);
	Если НЕ ЗначениеЗаполнено(ТаблицаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТаблицаДанных.ВладелецФайла КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЭД
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка,
		|	ПрофилиНастроекЭДО.Наименование КАК Наименование,
		|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПрофилиНастроекЭДО.Организация КАК Организация,
		|	ПрофилиНастроекЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ПрофилиНастроекЭДО.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ПрофилиНастроекЭДО.Город КАК Город,
		|	ПрофилиНастроекЭДО.Дом КАК Дом,
		|	ПрофилиНастроекЭДО.Индекс КАК Индекс,
		|	ПрофилиНастроекЭДО.Квартира КАК Квартира,
		|	ПрофилиНастроекЭДО.КодРегиона КАК КодРегиона,
		|	ПрофилиНастроекЭДО.Корпус КАК Корпус,
		|	ПрофилиНастроекЭДО.НаселенныйПункт КАК НаселенныйПункт,
		|	ПрофилиНастроекЭДО.Район КАК Район,
		|	ПрофилиНастроекЭДО.Регион КАК Регион,
		|	ПрофилиНастроекЭДО.Улица КАК Улица,
		|	ПрофилиНастроекЭДО.ОператорЭДО КАК ОператорЭДО,
		|	ПрофилиНастроекЭДО.ОператорЭДОИд КАК ОператорЭДОИд,
		|	ПрофилиНастроекЭДО.ОператорЭДОИНН КАК ОператорЭДОИНН,
		|	ПрофилиНастроекЭДО.ОператорЭДОКПП КАК ОператорЭДОКПП,
		|	ПрофилиНастроекЭДО.ОператорЭДООГРН КАК ОператорЭДООГРН,
		|	ПрофилиНастроекЭДО.ЭлектроннаяПочтаДляУведомлений КАК ЭлектроннаяПочта,
		|	ВЫРАЗИТЬ("""" КАК Строка(255)) КАК АдресОрганизации,
		|	ЛОЖЬ КАК Ожидание
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_ЭД.ПрофильНастроекЭДО
		|			ИЗ
		|				ВТ_ЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.ДокументОснование КАК ДокументОснование,
		|	ВложенныйЗапрос.ПредставлениеДокументаОснование КАК ПредставлениеДокументаОснование
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
		|		ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) КАК ПредставлениеДокументаОснование
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = ВТ_ЭД.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование,
		|		ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование)
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
		|			ПО ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = ВТ_ЭД.Ссылка) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТекущийПрофильЭДО = Неопределено;
	Если ПовторноеЗаполнение Тогда
		ТекущаяСтрока = Неопределено;
		ТаблицаДанных = РеквизитФормыВЗначение("ПрофилиНастроекЭДО");
		Выборка = Результаты[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийПрофильЭДО = Выборка.Ссылка;
			Если ТаблицаДанных.Найти(ТекущийПрофильЭДО, "Ссылка") = Неопределено Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				ЗаполнитьРегистрационныеДанныеОрганизации(НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаДанных = Результаты[1].Выгрузить();
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			ЗаполнитьРегистрационныеДанныеОрганизации(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ПрофилиНастроекЭДО.Загрузить(ТаблицаДанных);
	
	Если ПрофилиНастроекЭДО.Количество() > 1 Тогда
		ОтображениеСписком = Истина;
	Иначе
		ОтображениеСписком = Ложь;
	КонецЕсли;
	
	Если ОтображениеСписком И ТекущийПрофильЭДО <> Неопределено Тогда
		Отбор = Новый Структура("Ссылка", ТекущийПрофильЭДО);
		НайденныеСтроки = ПрофилиНастроекЭДО.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Элементы.ПрофилиНастроекЭДО.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результаты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПовторноеЗаполнение Тогда
			НайденноеЗначение = НеподписанныеДокументы.НайтиПоЗначению(Выборка.ДокументОснование);
			Если НайденноеЗначение <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НеподписанныеДокументы.Добавить(Выборка.ДокументОснование, Выборка.ПредставлениеДокументаОснование);
	КонецЦикла;
	
	НастроитьОтображениеФормы(ПовторноеЗаполнение);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеФормы(ПовторноеЗаполнение = Ложь)
	
	Если ОтображениеСписком Тогда
		Элементы.ПанельСертификатыНедоступны.ТекущаяСтраница = Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО;
		Элементы.СтраницаСертификатыНедоступныПрофильЭДО.Видимость = Ложь;
		Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО.Видимость = Истина;
		КлючСохраненияПоложенияОкна = "ОтображениеСписком";
	Иначе
		Элементы.ПанельСертификатыНедоступны.ТекущаяСтраница = Элементы.СтраницаСертификатыНедоступныПрофильЭДО;
		Элементы.СтраницаСертификатыНедоступныПрофильЭДО.Видимость = Истина;
		Элементы.СтраницаСертификатыНедоступныТаблицаПрофилейЭДО.Видимость = Ложь;
		КлючСохраненияПоложенияОкна = "ОтображениеЭлементом";
		ТекущийЭлемент = Элементы.ДобавитьСертификатВводДанных;
	КонецЕсли;
	
	ШаблонСтроки = НСтр("ru = 'Не удалось подписать документы (%1)'");
	Элементы.НеподписанныеДокументыНадпись.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСтроки, НеподписанныеДокументы.Количество());
	
	Если НЕ ПовторноеЗаполнение Тогда
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПрофилиНастроекЭДО");
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(1);
		СписокОтбора.Добавить(-1);
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПрофилиНастроекЭДО.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокОтбора;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельДополнительнойИнформации();
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус = 0 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаИнформация;
		
		Организация         = ТекущиеДанные.Организация;
		АдресОрганизации    = ТекущиеДанные.АдресОрганизации;
		КодНалоговогоОргана = ТекущиеДанные.КодНалоговогоОргана;
		ЭлектроннаяПочта    = ТекущиеДанные.ЭлектроннаяПочта;
		
		Элементы.ДобавитьСертификатВводДанных.Доступность = Истина;
		Элементы.ДобавитьСертификатВводДанных.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущиеДанные.Статус = 1 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.НадписьОжидание.Заголовок = НСтр("ru = 'Ожидание результата регистрации сертификата в сервисе'");
		
	ИначеЕсли ТекущиеДанные.Статус = -1 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.НадписьОжидание.Заголовок = НСтр("ru = 'Ожидание добавления сертификата в профиль:'")
			+ Символы.ПС + ТекущийПрофильТакском;
		
	ИначеЕсли ТекущиеДанные.Статус = 2 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.НадписьОписаниеОшибки.Заголовок = ТекущиеДанные.ОписаниеОшибки;
		Сертификат = ТекущиеДанные.Сертификат;
		
	ИначеЕсли ТекущиеДанные.Статус = 3 Тогда
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтраницаУспешно;
		Элементы.ПодписатьИОтправитьПовторно.КнопкаПоУмолчанию = Истина;
		Сертификат = ТекущиеДанные.Сертификат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРедактированиеАдреса()
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Индекс"    , ТекущиеДанные.Индекс);
	ПараметрыФормы.Вставить("Регион"    , ТекущиеДанные.Регион);
	ПараметрыФормы.Вставить("Район"     , ТекущиеДанные.Район);
	ПараметрыФормы.Вставить("Город"     , ТекущиеДанные.Город);
	ПараметрыФормы.Вставить("НасПункт"  , ТекущиеДанные.НаселенныйПункт);
	ПараметрыФормы.Вставить("Улица"     , ТекущиеДанные.Улица);
	ПараметрыФормы.Вставить("Дом"       , ТекущиеДанные.Дом);
	ПараметрыФормы.Вставить("Корпус"    , ТекущиеДанные.Корпус);
	ПараметрыФормы.Вставить("Квартира"  , ТекущиеДанные.Квартира);
	ПараметрыФормы.Вставить("КодРегиона", ТекущиеДанные.КодРегиона);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактированиеАдресаЗавершение", ЭтотОбъект, ТекущиеДанные);
	ОткрытьФорму("ОбщаяФорма.АдресУчастникаОбменаЭД", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАдресаЗавершение(ПараметрыАдреса, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Индекс           = ПараметрыАдреса.Индекс;
	ТекущиеДанные.Регион           = ПараметрыАдреса.Регион;
	ТекущиеДанные.Район            = ПараметрыАдреса.Район;
	ТекущиеДанные.Город            = ПараметрыАдреса.Город;
	ТекущиеДанные.НаселенныйПункт  = ПараметрыАдреса.НаселенныйПункт;
	ТекущиеДанные.Улица            = ПараметрыАдреса.Улица;
	ТекущиеДанные.Дом              = ПараметрыАдреса.Дом;
	ТекущиеДанные.Корпус           = ПараметрыАдреса.Корпус;
	ТекущиеДанные.Квартира         = ПараметрыАдреса.Квартира;
	ТекущиеДанные.КодРегиона       = ПараметрыАдреса.КодРегиона;
	
	АдресОрганизации = АдресОрганизацииСтрокой(ТекущиеДанные);
	ТекущиеДанные.АдресОрганизации = АдресОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВПрофильНастроекЭДО()
	
	Если ДанныеДляРегистрацииЗаполнены() Тогда
		ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(ЭтотОбъект, Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификата(Сертификат)
	
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОповещениеПослеПроверки = Новый ОписаниеОповещения("ЗарегистрироватьДобавитьСертификат", ЭтотОбъект, ДополнительныеПараметры);
	ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ТекущиеДанные, ОповещениеПослеПроверки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПроверкиПередДобавлениемСертификата(Организация, Профиль, Сертификат)

	Результат = Новый Структура;
	
	// Проверяем равенство ИНН и КПП в сертификате и организации.
	СвойстваСубъекта = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СвойстваСубъектаСертификата(Сертификат);
	СвойстваСубъекта.Вставить("ИНН", 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъекта.ИНН, 12, "0"));
	
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, РеквизитИНН + ", " + РеквизитКПП);
	СвойстваОрганизации.Вставить(РеквизитИНН, 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваОрганизации[РеквизитИНН], 12, "0"));
	
	Результат.Вставить("ИННОтличается", СвойстваСубъекта.Свойство("ИНН") И СвойстваСубъекта.ИНН <> СвойстваОрганизации[РеквизитИНН]);
	Результат.Вставить("КППОтличается", СвойстваСубъекта.Свойство("КПП") И СвойстваСубъекта.КПП <> СвойстваОрганизации[РеквизитКПП]);
	
	// Проверяем для облачных сертификатов, что их можно использовать.
	Результат.Вставить("СертификатЗапрещенКакОблачный", Ложь);
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ИспользованиеСертификатовОблачногоСервисаВозможно()
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоСертификатОблачногоСервиса(Сертификат) Тогда
			
			Результат.Вставить("СертификатЗапрещенКакОблачный", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("СертификатУжеЗарегистрирован", Ложь);
	Если СертификатЗарегистрированВПрофилеНастроекЭДО(Сертификат, Профиль) Тогда
		Результат.Вставить("СертификатУжеЗарегистрирован", Истина);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередДобавлениемСертификата(Сертификат, ДанныеПрофиля, ОповещениеПослеПроверки)
	
	РезультатыПроверки = РезультатПроверкиПередДобавлениемСертификата(Организация, ДанныеПрофиля.Ссылка, Сертификат);
	
	// Облачные сертификаты могут быть запрещены.
	Если РезультатыПроверки.СертификатЗапрещенКакОблачный Тогда
		ТекстСообщения = НСтр("ru = 'Выбранный сертификат связан с недопустимым средством ""облачной"" электронной подписи.
			|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
			|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
			|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.
			|Выберите сертификат, связанный с другим средством электронной подписи.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РезультатыПроверки.СертификатУжеЗарегистрирован Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат уже зарегистрирован в профиле настроек ЭДО. Выберите другой.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, 30);
		Возврат;
	КонецЕсли;
	
	Если РезультатыПроверки.ИННОтличается ИЛИ РезультатыПроверки.КППОтличается Тогда
		ДополнительныеПараметры = Новый Структура("ОписаниеОповещения, Сертификат", ОповещениеПослеПроверки, Сертификат);
		ПослеПодтвержденияДобавленияСертификата = Новый ОписаниеОповещения("ПослеПодтвержденияДобавленияСертификата",
			ЭтотОбъект, ДополнительныеПараметры);
			
		Вопросы = Новый Массив;
		
		Если РезультатыПроверки.ИННОтличается И РезультатыПроверки.КППОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН/КПП по данным выбранного сертификата не совпадают с ИНН/КПП организации.'");
		ИначеЕсли РезультатыПроверки.ИННОтличается Тогда
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'ИНН по данным выбранного сертификата не совпадает с ИНН организации.'");
		Иначе
			ПредупреждениеОРазличииРеквизитов = НСтр("ru = 'КПП по данным выбранного сертификата не совпадает с КПП организации.'");
		КонецЕсли;
		
		Вопросы.Добавить(ПредупреждениеОРазличииРеквизитов);
		Вопросы.Добавить(НСтр("ru = 'Продолжить регистрацию сертификата?'"));
		
		ТекстВопроса = СтрСоединить(Вопросы, Символы.ПС);
		ПоказатьВопрос(ПослеПодтвержденияДобавленияСертификата, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияДобавленияСертификата(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриУспешнойПроверкеПередДобавлениемСертификата(ДополнительныеПараметры.Сертификат,
			ДополнительныеПараметры.ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриУспешнойПроверкеПередДобавлениемСертификата(Сертификат, ОповещениеПослеПроверки)

	ВыполнитьОбработкуОповещения(ОповещениеПослеПроверки, Сертификат); 

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьДобавитьСертификат(Сертификат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Элементы.ДобавитьСертификатВводДанных.Доступность = Ложь;
	
	ТекущиеДанные.Сертификат = Сертификат;
	Если ТекущиеДанные.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		ЗарегистрироватьСертификатВСервисе1СЭДО(ТекущиеДанные);
	Иначе
		ЗарегистрироватьСертификатВСервисеТакском(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияСертификатаВСервисе1СЭДО

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисе1СЭДО(ТекущиеДанные)
	
	СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(ТекущиеДанные);
	
	ДанныеПакета = ДанныеПоРегистрационнойИнформацииНаСервере(СтруктураДанных);
	Оповещение   = Новый ОписаниеОповещения("ЗарегистрироватьСертификат1СЭДОЗавершение", ЭтотОбъект, ТекущиеДанные);
	ОбменСКонтрагентамиСлужебныйКлиент.СформироватьИОтправитьРегистрационныйПакет1СЭДО(Оповещение, ДанныеПакета);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоРегистрационнойИнформацииНаСервере(СтруктураДанных)
	
	ДанныеПакета = Новый Структура;
	
	ДобавляемыйСертификат = СтруктураДанных.Сертификат;
	
	ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДанныеПакета);
	
	ПолучитьАктуальныеДанныеОператораЭДО(СтруктураДанных);
	
	СтруктураДанных.ИдентификаторЗаявки = ОбменСКонтрагентамиСлужебный.НовыйUUID();
	
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанных.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации
			+ ", " + ИмяРеквизитаОГРНОрганизации);

	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(ДобавляемыйСертификат);
	
	РеквизитыПакета = Новый Структура;
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", СтруктураДанных.ИдентификаторЗаявки);
	РеквизитыПакета.Вставить("НаименованиеОрганизации",  ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",           СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
	РеквизитыПакета.Вставить("КППОрганизации",           СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
	РеквизитыПакета.Вставить("ИдентификаторОрганизации", СтруктураДанных.ИдентификаторОрганизации);
	РеквизитыПакета.Вставить("ОператорЭДО",              СтруктураДанных.ОператорЭДО);
	РеквизитыПакета.Вставить("ОператорЭДОИд",            СтруктураДанных.ОператорЭДОИд);
	РеквизитыПакета.Вставить("Сертификат",               Новый Массив);
	РеквизитыПакета.Вставить("ЭлектроннаяПочта",         СтруктураДанных.ЭлектроннаяПочта);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("РегистрационнаяИнформация");
	
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// Служебные данные
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ИдФайл", "registration_" + СтруктураДанных.ИдентификаторЗаявки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ВерсПрог", "1С:Предприятие 8");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ВерсФорм", "5.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"КНД", "1115109");
	
	// Данные по налоговому органу
	Если Не ЗначениеЗаполнено(СтруктураДанных.КодНалоговогоОргана)
		И ЗначениеЗаполнено(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]) Тогда
		СтруктураДанных.КодНалоговогоОргана = Лев(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации], 4);
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"КодНО", СтруктураДанных.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ДанныеПакета.Вставить("ОператорЭДОСертификат", СтруктураДанных.ОператорЭДОСертификат);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ОперЭДО.НаимОрг",   СтруктураДанных.ОператорЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ОперЭДО.ИдОперЭДО", СтруктураДанных.ОператорЭДОИд);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ОперЭДО.ИННЮЛ",     СтруктураДанных.ОператорЭДОИНН);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ОперЭДО.КПП",       СтруктураДанных.ОператорЭДОКПП);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"ОперЭДО.ОГРН",      СтруктураДанных.ОператорЭДООГРН);
	
	// Данные по абоненту
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"УчастЭДО.ТипЗаявления", "2");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"УчастЭДО.ИдУчастЭДО", СтруктураДанных.ИдентификаторОрганизации);
		
	Если Не ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(СтруктураДанных.Организация) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.КПП",     СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     СтруктураДанных.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  СтруктураДанных.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      СтруктураДанных.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      СтруктураДанных.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", СтруктураДанных.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      СтруктураДанных.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        СтруктураДанных.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     СтруктураДанных.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      СтруктураДанных.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
		
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ИННФЛ",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ОГРНИП", СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     СтруктураДанных.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  СтруктураДанных.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      СтруктураДанных.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      СтруктураДанных.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", СтруктураДанных.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      СтруктураДанных.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        СтруктураДанных.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     СтруктураДанных.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      СтруктураДанных.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
			"УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ПараметрыСертификата.Отчество);
		
	КонецЕсли;
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
		|ГДЕ
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураДанных.ПрофильНастроекЭДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим текущие сертификаты
	Пока Выборка.Следующий() Цикл
	
		ПараметрыТекущегоСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Выборка.Сертификат);
		
		НоваяСтрока = СертификатыПользователя.Добавить();
		НоваяСтрока.ДатаКонСертиф = ПараметрыТекущегоСертификата.ДействителенДо;
		
		Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыТекущегоСертификата.Отпечаток))," ",""));
		НоваяСтрока.ОтпСертиф = Отпечаток;
		
		// Подготовим пользовательский сертификат
		ДвоичныеДанныеСертификата = ПараметрыТекущегоСертификата.ДвоичныеДанныеСертификата;
		
		СертификатТекст = Base64Строка(ДвоичныеДанныеСертификата);
		НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + Символы.ПС
								+ СертификатТекст + Символы.ПС
								+ "-----END CERTIFICATE-----";
		
		РеквизитыПакета.Сертификат.Добавить(СертификатТекст);
		
		НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Фамилия, " ");
		НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Имя, " ");
		НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыТекущегоСертификата.Отчество, " ");
		
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
		НоваяСтрока.ДатаНачСертиф = СертификатКриптографии.ДатаНачала;
	КонецЦикла;
	
	НоваяСтрока = СертификатыПользователя.Добавить();
	
	ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
	НоваяСтрока.ДатаКонСертиф = ДобавляемыйСертификат.ДействителенДо;
	
	Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ДобавляемыйСертификат.Отпечаток))," ",""));
	НоваяСтрока.ОтпСертиф = Отпечаток;
	
	СертификатТекст = Base64Строка(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + Символы.ПС
							+ СертификатТекст + Символы.ПС
							+ "-----END CERTIFICATE-----";
	РеквизитыПакета.Сертификат.Добавить(СертификатТекст);

	НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
	НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
	НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации,
		СертификатыПользователя, "УчастЭДО.СертифДолжн");
	
	// Данные по подписанту
	ДолжностьПоСертификату = 0;
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"Подписант.Должность",    ДолжностьПоСертификату);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации,
		"Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ОбменСКонтрагентамиВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
	ДанныеПакета.Вставить("РеквизитыПакета", РеквизитыПакета);
	ДанныеПакета.Вставить("ДобавляемыйСертификат", ДобавляемыйСертификат);
	ДанныеПакета.Вставить("ДвоичныеДанныеДляОператораЭДО", ДвоичныеДанныеДляОператораЭДО);
	
	Возврат ДанныеПакета;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДанныеПакета)
	
	// Подготовим данные для соглашения с оператором ЭДО
	ИмяВременногоФайлаСоглашениеЭДО = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьФайл(ИмяВременногоФайлаСоглашениеЭДО, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
	СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", Новый ДвоичныеДанные(ИмяВременногоФайлаСоглашениеЭДО));
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаСоглашениеЭДО);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьАктуальныеДанныеОператораЭДО(ТекущиеДанные)
	
	ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		
		ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
			Если УзелОператорыЭДО <> Неопределено Тогда
				Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
					
					УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
					Если ВРег(УзелОператорЭДОИд.Значение) = ВРег(Лев(ТекущиеДанные.ИдентификаторОрганизации, 3)) Тогда
						
						УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
						ТекущиеДанные.ОператорЭДО = УзелОператорЭДОНаимОрг.Значение;
						
						УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
						ТекущиеДанные.ОператорЭДОИд = УзелОператорЭДОИд.Значение;
						
						УзелОператорЭДОИНН = УзелОператорЭДО.Строки.Найти("ИННЮЛ", "Имя");
						ТекущиеДанные.ОператорЭДОИНН = УзелОператорЭДОИНН.Значение;
						
						УзелОператорЭДОКПП = УзелОператорЭДО.Строки.Найти("КПП", "Имя");
						ТекущиеДанные.ОператорЭДОКПП = УзелОператорЭДОКПП.Значение;
						
						УзелОператорЭДООГРН = УзелОператорЭДО.Строки.Найти("ОГРН", "Имя");
						Если УзелОператорЭДООГРН <> Неопределено Тогда
							ТекущиеДанные.ОператорЭДООГРН = УзелОператорЭДООГРН.Значение;
						КонецЕсли;
						
						УзелОператорЭДОСертификат = УзелОператорЭДО.Строки.Найти("Сертификат", "Имя");
						Если УзелОператорЭДОСертификат <> Неопределено Тогда
							ТекущиеДанные.ОператорЭДОСертификат = УзелОператорЭДОСертификат.Значение;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат1СЭДОЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		
		УстановитьСтатусОжидание(Контекст);
		Если НЕ ЗаданиеНаПроверкуЗапущено Тогда
			ПроверитьВыполнениеЗаявкиНаРегистрацию();
		КонецЕсли;
			
	Иначе
		УстановитьСтатусВводДанных(Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляРегистрацииЗаполнены()
	
	Отказ = Ложь;
	Если ОтображениеСписком Тогда
		ТекущиеДанные = Элементы.ПрофилиНастроекЭДО.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ПрофилиНастроекЭДО[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Укажите профиль для добавления сертификата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(КодНалоговогоОргана) Тогда
		Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		ТекстСообщения = НСтр("ru = 'Поле ""Код налогового органа"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КодНалоговогоОргана",,Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(АдресОрганизации) Тогда
		Если НЕ Отказ Тогда
			Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Поле ""Юридический адрес"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"АдресОрганизации",,Отказ);
		
	ИначеЕсли ПустаяСтрока(ТекущиеДанные.КодРегиона) Тогда
		Если НЕ Отказ Тогда
			Элементы.ПанельДанныеДляРегистрации.ТекущаяСтраница = Элементы.СтраницаДанныеДляРегистрации;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = '""КодРегиона"" в юридическом адресе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"АдресОрганизации",,Отказ);
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

#КонецОбласти

#Область РегистрацияСертификатаВСервисеТакском

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисеТакском(ТекущиеДанные)
	
	ТекущийПрофильТакском = ТекущиеДанные.Ссылка;
	УстановитьСтатусОжидание(ТекущиеДанные);
	Подключение1СТакскомКлиент.ЗарегистрироватьСертификатАбонента(ТекущиеДанные.Сертификат,
		ТекущиеДанные.ИдентификаторОрганизации,
		ТекущиеДанные.Организация,
		Новый ОписаниеОповещения("ЗарегистрироватьСертификатВСервисеТакскомЗавершение", ЭтотОбъект, ТекущиеДанные));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификатВСервисеТакскомЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Истина Тогда
		СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(Контекст);
		
		СписокОшибок = Неопределено;
		МассивДанных = Новый Массив;
		МассивДанных.Добавить(СтруктураДанных);
		ДобавитьСертификатыВПрофиляЭДОНаСервере(МассивДанных, СписокОшибок);
		
		Если СписокОшибок = Неопределено Тогда
			УстановитьСтатусУспешно(Контекст);
		Иначе
			УстановитьСтатусОшибка(СписокОшибок);
		КонецЕсли;
		
	Иначе
		УстановитьСтатусОшибка(Контекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВыполненияЗаявкиВСервисе

&НаКлиенте
Процедура ПроверитьВыполнениеЗаявкиНаРегистрацию(Результат = Неопределено, Контекст = Неопределено) Экспорт
	
	ПовторитьПроверку = Ложь;
	
	ПараметрыОтбора = Новый Структура("Статус", 1);
	НайденныеСтроки = ПрофилиНастроекЭДО.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыЗаявок = Новый Массив;
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ИдентификаторЗаявки) Тогда
			ИдентификаторыЗаявок.Добавить(СтрокаТаблицы.ИдентификаторЗаявки);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаданиеНаПроверкуЗапущено Тогда
		
		Если Результат = Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Фоновое задание отменено пользователем'");
			УстановитьСтатусОшибка(НайденныеСтроки, ОписаниеОшибки);
			Возврат;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			УстановитьСтатусОшибка(НайденныеСтроки, Результат.ПодробноеПредставлениеОшибки);
			Возврат;
		КонецЕсли;
		
		РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			
			МассивДанных = Новый Массив;
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				Значение = РезультатПроверки.Получить(СтрокаТаблицы.ИдентификаторЗаявки);
				
				Если Значение = Ложь Тогда
					ПовторитьПроверку = Истина;
					
				ИначеЕсли Значение = Истина Тогда
					СтруктураДанных = ВыгрузитьДанныеФормыВСтруктуру(СтрокаТаблицы);
					МассивДанных.Добавить(СтруктураДанных);
					УстановитьСтатусУспешно(СтрокаТаблицы);
					
				ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
					УстановитьСтатусОшибка(СтрокаТаблицы, Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивДанных.Количество() Тогда
				СписокОшибок = Неопределено;
				ДобавитьСертификатыВПрофиляЭДОНаСервере(МассивДанных, СписокОшибок);
				Если СписокОшибок <> Неопределено Тогда
					УстановитьСтатусОшибка(СписокОшибок);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ПовторитьПроверку = Истина;
		КонецЕсли;
		
	Иначе
		ПовторитьПроверку = Истина;
	КонецЕсли;
	
	Если ПовторитьПроверку Тогда
		ЗаданиеНаПроверкуЗапущено = Истина;
		ДлительнаяОперация = ЗапуститьЗаданиеНаПроверкуЗаявкиНаРегистрацию(ИдентификаторыЗаявок, УникальныйИдентификатор);
		
		// Обертка оповещения для работы в режиме скрытой формы.
		Оповещение = Новый ОписаниеОповещения("ПроверитьВыполнениеЗаявкиНаРегистрацию", ЭтотОбъект);
		Контекст = Новый Структура("Оповещение", Оповещение);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьВыполнениеЗаявкиНаРегистрацию", 
			ОбменСКонтрагентамиСлужебныйКлиент, Контекст);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.Интервал = 15;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		ЗаданиеНаПроверкуЗапущено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьЗаданиеНаПроверкуЗаявкиНаРегистрацию(Знач ИдентификаторыЗаявок, Знач ИдентификаторФормы)
	
	ИмяПроцедуры = "ОбменСКонтрагентамиСлужебный.ОбменССерверомПолучитьОтветЭДО";
	ПараметрыПроцедуры = Новый Структура("ИдентификаторыЗаявок", ИдентификаторыЗаявок);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка запроса по заявке на регистрацию сертификата в 1С:ЭДО'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСертификатыВПрофиляЭДОНаСервере(Знач МассивДанных, СписокОшибок)
	
	Для Каждого СтруктураДанных Из МассивДанных Цикл
		
		ПрофильНастроекОбъект = СтруктураДанных.ПрофильНастроекЭДО.ПолучитьОбъект();
		
		ПрофильНастроекОбъект.КодНалоговогоОргана = СтруктураДанных.КодНалоговогоОргана;
		
		ПрофильНастроекОбъект.Индекс          = СтруктураДанных.Индекс;
		ПрофильНастроекОбъект.КодРегиона      = СтруктураДанных.КодРегиона;
		ПрофильНастроекОбъект.Регион          = СтруктураДанных.Регион;
		ПрофильНастроекОбъект.Район           = СтруктураДанных.Район;
		ПрофильНастроекОбъект.Город           = СтруктураДанных.Город;
		ПрофильНастроекОбъект.НаселенныйПункт = СтруктураДанных.НаселенныйПункт;
		ПрофильНастроекОбъект.Улица           = СтруктураДанных.Улица;
		ПрофильНастроекОбъект.Дом             = СтруктураДанных.Дом;
		ПрофильНастроекОбъект.Корпус          = СтруктураДанных.Корпус;
		ПрофильНастроекОбъект.Квартира        = СтруктураДанных.Квартира;
		
		Если ПрофильНастроекОбъект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			ПрофильНастроекОбъект.ОператорЭДО     = СтруктураДанных.ОператорЭДО;
			ПрофильНастроекОбъект.ОператорЭДОИд   = СтруктураДанных.ОператорЭДОИд;
			ПрофильНастроекОбъект.ОператорЭДОИНН  = СтруктураДанных.ОператорЭДОИНН;
			ПрофильНастроекОбъект.ОператорЭДОКПП  = СтруктураДанных.ОператорЭДОКПП;
			ПрофильНастроекОбъект.ОператорЭДООГРН = СтруктураДанных.ОператорЭДООГРН;
		КонецЕсли;
		
		НайденнаяСтрока = ПрофильНастроекОбъект.СертификатыПодписейОрганизации.Найти(СтруктураДанных.Сертификат, "Сертификат");
		Если НайденнаяСтрока = Неопределено Тогда
			НоваяСтрока = ПрофильНастроекОбъект.СертификатыПодписейОрганизации.Добавить();
			НоваяСтрока.Сертификат = СтруктураДанных.Сертификат;
		КонецЕсли;
		
		Попытка
			ПрофильНастроекОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'При добавлении сертификата в профиль настроек ЭДО %1 возникла ошибка:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ПрофильНастроекОбъект.Наименование) + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СписокОшибок.Вставить(СтруктураДанных.ПрофильНастроекЭДО, ТекстСообщения);
			
			ВидОперации = НСтр("ru = 'Добавление сертификата в профиль настроек ЭДО.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(ТекущиеДанные)
	
	ДанныеОрганизации = Новый Структура;
	ЭлектронноеВзаимодействиеПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(ТекущиеДанные.Организация, ДанныеОрганизации);
	
	Если ДанныеОрганизации.Свойство("КодИМНС") Тогда
		ТекущиеДанные.КодНалоговогоОргана = ДанныеОрганизации.КодИМНС;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Индекс") Тогда
		ТекущиеДанные.Индекс = ДанныеОрганизации.Индекс;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Регион") Тогда
		ТекущиеДанные.Регион = ДанныеОрганизации.Регион;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("КодРегиона") Тогда
		ТекущиеДанные.КодРегиона = ДанныеОрганизации.КодРегиона;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Район") Тогда
		ТекущиеДанные.Район = ДанныеОрганизации.Район;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Город") Тогда
		ТекущиеДанные.Город = ДанныеОрганизации.Город;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("НаселенныйПункт") Тогда
		ТекущиеДанные.НаселенныйПункт = ДанныеОрганизации.НаселенныйПункт;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Улица") Тогда
		ТекущиеДанные.Улица = ДанныеОрганизации.Улица;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Дом") Тогда
		ТекущиеДанные.Дом = ДанныеОрганизации.Дом;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Корпус") Тогда
		ТекущиеДанные.Корпус = ДанныеОрганизации.Корпус;
	КонецЕсли;
	Если ДанныеОрганизации.Свойство("Квартира") Тогда
		ТекущиеДанные.Квартира = ДанныеОрганизации.Квартира;
	КонецЕсли;
	
	ТекущиеДанные.АдресОрганизации = АдресОрганизацииСтрокой(ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СертификатЗарегистрированВПрофилеНастроекЭДО(Сертификат, ПрофильНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
		|ГДЕ
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка = &Ссылка
		|	И ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат = &Сертификат";
	
	Запрос.УстановитьПараметр("Сертификат", Сертификат);
	Запрос.УстановитьПараметр("Ссылка", ПрофильНастроекЭДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресОрганизацииСтрокой(ТекущиеДанные)
	
	МассивСтрок = Новый Массив;
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Индекс);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Регион);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.КодРегиона, НСтр("ru = 'регион %1'"));
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Район);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Город);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.НаселенныйПункт);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Улица);
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Дом     , НСтр("ru = 'д. %1'"));
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Корпус  , НСтр("ru = 'корп. %1'"));
	ДобавитьСтрокуВМассив(МассивСтрок, ТекущиеДанные.Квартира, НСтр("ru = 'кв. %1'"));
	
	Возврат СтрСоединить(МассивСтрок, ", ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВМассив(МассивСтрок, Значение, ШаблонСтроки = "")
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ШаблонСтроки) Тогда
		МассивСтрок.Добавить(Значение);
	Иначе
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Значение);
		МассивСтрок.Добавить(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьДанныеФормыВСтруктуру(ТекущиеДанныеФормы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПрофильНастроекЭДО",       ТекущиеДанныеФормы.Ссылка);
	Результат.Вставить("Сертификат",               ТекущиеДанныеФормы.Сертификат);
	Результат.Вставить("ИдентификаторОрганизации", ТекущиеДанныеФормы.ИдентификаторОрганизации);
	Результат.Вставить("Организация",              ТекущиеДанныеФормы.Организация);
	Результат.Вставить("ЭлектроннаяПочта",         ТекущиеДанныеФормы.ЭлектроннаяПочта);
	Результат.Вставить("КодНалоговогоОргана",      ТекущиеДанныеФормы.КодНалоговогоОргана);
	Результат.Вставить("Город",                    ТекущиеДанныеФормы.Город);
	Результат.Вставить("Дом",                      ТекущиеДанныеФормы.Дом);
	Результат.Вставить("Индекс",                   ТекущиеДанныеФормы.Индекс);
	Результат.Вставить("Квартира",                 ТекущиеДанныеФормы.Квартира);
	Результат.Вставить("КодРегиона",               ТекущиеДанныеФормы.КодРегиона);
	Результат.Вставить("Корпус",                   ТекущиеДанныеФормы.Корпус);
	Результат.Вставить("НаселенныйПункт",          ТекущиеДанныеФормы.НаселенныйПункт);
	Результат.Вставить("Район",                    ТекущиеДанныеФормы.Район);
	Результат.Вставить("Регион",                   ТекущиеДанныеФормы.Регион);
	Результат.Вставить("Улица",                    ТекущиеДанныеФормы.Улица);
	Результат.Вставить("ОператорЭДО",              ТекущиеДанныеФормы.ОператорЭДО);
	Результат.Вставить("ОператорЭДОИд",            ТекущиеДанныеФормы.ОператорЭДОИд);
	Результат.Вставить("ОператорЭДОИНН",           ТекущиеДанныеФормы.ОператорЭДОИНН);
	Результат.Вставить("ОператорЭДОКПП",           ТекущиеДанныеФормы.ОператорЭДОКПП);
	Результат.Вставить("ОператорЭДООГРН",          ТекущиеДанныеФормы.ОператорЭДООГРН);
	Результат.Вставить("ОператорЭДОСертификат");
	Результат.Вставить("ИдентификаторЗаявки");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусОжидание(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 1;
	Если ОтображениеСписком И ДанныеСтроки.Ссылка = ТекущийПрофильТакском Тогда
		
		Отбор = Новый Структура("СпособОбменаЭД", ДанныеСтроки.СпособОбменаЭД);
		МассивСтрок = ПрофилиНастроекЭДО.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			Если СтрокаТаблицы.Ссылка <> ТекущийПрофильТакском Тогда
				СтрокаТаблицы.Статус = -1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВводДанных(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 0;
	ОбновитьПанельДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОшибка(Значение, ОписаниеОшибки = "")
	
	ТекстОповещения = НСтр("ru = 'Добавление сертификата.'");
	ТекстПояснения = НСтр("ru = 'Не удалось добавить сертификаты'");
	Контекст = Неопределено;
	
	ОбновитьСтатусыТакском = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из Значение Цикл
			ЭлементМассива.Статус = 2;
			ЭлементМассива.ОписаниеОшибки = ОписаниеОшибки;
			Если ЭлементМассива.Ссылка = ТекущийПрофильТакском Тогда
				ОбновитьСтатусыТакском = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗначения = Тип("Соответствие") Тогда
		Для Каждого ЭлементСоответствия Из Значение Цикл
			Отбор = Новый Структура("Ссылка", ЭлементСоответствия.Ключ);
			МассивСтрок = ПрофилиНастроекЭДО.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() Тогда
				МассивСтрок[0].Статус = 2;
				МассивСтрок[0].ОписаниеОшибки = ЭлементСоответствия.Значение;
				Если МассивСтрок[0].Ссылка = ТекущийПрофильТакском Тогда
					ОбновитьСтатусыТакском = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Значение.Статус = 2;
		Значение.ОписаниеОшибки = ОписаниеОшибки;
		Если ОтображениеСписком И Значение.Ссылка = ТекущийПрофильТакском Тогда
			ОбновитьСтатусыТакском = Истина;
		КонецЕсли;
		
		ШаблонПояснения = НСтр("ru = 'Не удалось добавить сертификат %1 в профиль настроек ЭДО'");
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения, Значение.Сертификат);
		Контекст = Значение.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Если ОбновитьСтатусыТакском Тогда
		
		Отбор = Новый Структура("Статус", -1);
		МассивСтрок = ПрофилиНастроекЭДО.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.Статус = 0;
		КонецЦикла;
		
		ТекущийПрофильТакском = Неопределено;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ОповещениеПослеНажатия = Новый ОписаниеОповещения("ОповещениеПользователяПослеНажатия", ЭтотОбъект, Контекст);
	ПоказатьОповещениеПользователя(ТекстОповещения, ОповещениеПослеНажатия, ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусУспешно(ДанныеСтроки)
	
	ДанныеСтроки.Статус = 3;
	ДанныеСтроки.Успешно = Истина;
	Если ОтображениеСписком И ДанныеСтроки.Ссылка = ТекущийПрофильТакском Тогда
		
		Отбор = Новый Структура("Статус", -1);
		МассивСтрок = ПрофилиНастроекЭДО.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.Статус = 0;
		КонецЦикла;
		
		ТекущийПрофильТакском = Неопределено;
		
	КонецЕсли;
	
	ОбновитьПанельДополнительнойИнформации();
	
	ТекстОповещения = НСтр("ru = 'Добавление сертификата.'");
	ШаблонПояснения = НСтр("ru = 'Сертификат %1 успешно добавлен в профиль настроек ЭДО'");
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения, ДанныеСтроки.Сертификат);
	
	ОповещениеПослеНажатия = Новый ОписаниеОповещения("ОповещениеПользователяПослеНажатия",
		ЭтотОбъект, ДанныеСтроки.ПолучитьИдентификатор());
	
	ПоказатьОповещениеПользователя(ТекстОповещения, ОповещениеПослеНажатия, ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПользователяПослеНажатия(ИдентификаторСтроки) Экспорт
	
	Если НЕ Открыта() Тогда
		Открыть();
		Если ИдентификаторСтроки <> Неопределено Тогда
			Элементы.ПрофилиНастроекЭДО.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
