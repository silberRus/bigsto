
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ДокументСсылка) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = ПолучитьДанныеПоДокументу(Параметры.ДокументСсылка);
	
	Если ДанныеДляЗаполнения = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не обнаружены настройки подключения к Яндекс.Кассе'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеДляЗаполнения);
	
	////////////////////////////////////////////////////////////////////////////////
	
	ДанныеСчетаИзСервиса = Новый Структура;
	
	ДанныеСчетаИзСервиса.Вставить("КонтактныеДанныеЭлектронногоЧека");
	ДанныеСчетаИзСервиса.Вставить("ПлатежнаяСсылка");
	ДанныеСчетаИзСервиса.Вставить("ХешСумма");
	ДанныеСчетаИзСервиса.Вставить("СтатусСчета", "Новый");
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если ОтправкаЧековЧерезЯндекс Тогда
		ЗаполнитьСпискиКонтактнойИнформации(КонтактнаяИнформацияПоПратнеру(Партнер));	
	КонецЕсли; 
		
	ВариантОтправкиПлатежнойСсылки = "Почта";
	
	УстановитьВидимость();
	
	КлючСохраненияПоложенияОкна = СтрШаблон("ЯндексКасса.%1.%2%3%4", 
	    ЭтаФорма.Заголовок,
		Элементы.ГруппаВариантДоставкиЧека.Видимость,
		Элементы.ГруппаВариантОтправкиСсылки.Видимость,
		Элементы.ГруппаВариантОтправкиСсылки.Группировка);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	////////////////////////////////////////////////////////////////////////////////
	// Заполнение данных из сервиса
	
	ДлительнаяОперация = ПолучитьДанныеСчетаИзСервисаВФоне(ИдентификаторМагазина, ИдентификаторПлатежа);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	ПараметрыОжидания = ПараметрыФоновогоЗадания();
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ПолучитьДанныеСчетаИзСервисаЗавершение", ЭтотОбъект, ПараметрыОжидания);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
	////////////////////////////////////////////////////////////////////////////////
	// Копирование в буфер
	
	ТипПлатформыКлиента = ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента();
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	ФункционалБуфераОбменаДоступен = Не Элементы.БуферОбмена.Документ = Неопределено;
	
	ОтображатьКнопкуКопироватьВБуфер = (ТипПлатформыКлиента = ТипПлатформы.Windows_x86 
		ИЛИ ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64)
		И Не ЭтоВебКлиент 
		И ФункционалБуфераОбменаДоступен;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"КопироватьВБуфер",
		"Видимость",
		ОтображатьКнопкуКопироватьВБуфер);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВариантДоставкиПочтаПриИзменении(Элемент)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	
	ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе = Истина;
	
	УправлениеЗаголовками();
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантДоставкиСМСПриИзменении(Элемент)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");
	
	ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе = Истина;
	
	УправлениеЗаголовками();
	
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	
	ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе = Истина;
	
	УправлениеЗаголовками();
		
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");
	
	ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе = Истина;
	
	УправлениеЗаголовками();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиПочтаПриИзменении(Элемент)
	
	ВариантОтправкиПлатежнойСсылки = "Почта";
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиСМСПриИзменении(Элемент)
	
	ВариантОтправкиПлатежнойСсылки = "SMS";
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонEmailПриИзменении(Элемент)
	
	ВариантОтправкиПлатежнойСсылки = "Почта";
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонSMSПриИзменении(Элемент)
	
	ВариантОтправкиПлатежнойСсылки = "SMS";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылку(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.НастройкиЯндексКассы.Форма.ФормаПодготовкиПлатежнойСсылки.ОтправитьСсылку");
	
	////////////////////////////////////////////////////////////////////////////////
	
	КонтактныеДанныеЭлектронногоЧека = ПолучитьКонтактныеДанныеЭлектронногоЧека();
	
	Если ОтправкаЧековЧерезЯндекс 
		И ЗначениеЗаполнено(КонтактныеДанныеЭлектронногоЧека) Тогда
		
		ОбновитьКонтактнуюИнформацию();
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
			
	Если НЕ ЗначениеЗаполнено(ПлатежнаяСсылка)  Тогда
		Если НЕ ОтправкаЧековЧерезЯндекс 
			ИЛИ (ОтправкаЧековЧерезЯндекс 
				И ЗначениеЗаполнено(КонтактныеДанныеЭлектронногоЧека)) Тогда
			
				ДлительнаяОперация = ПолучитьПлатежнуюСсылкуВФоне(Параметры.ДокументСсылка, КонтактныеДанныеЭлектронногоЧека);
				
				ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
				
				Если ДлительнаяОперация <> Неопределено
					И ДлительнаяОперация.Статус = "Выполняется" Тогда
					Элементы.ДекорацияДлительнаяОперацияОтправить.Видимость = Истина;	
				КонецЕсли;
				
				ПараметрыОжидания = ПараметрыФоновогоЗадания(Истина);

				ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
					"ПолучитьПлатежнуюСсылкуЗавершение", ЭтотОбъект, ПараметрыОжидания);
				
				ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
					ДлительнаяОперацияЗавершение,
					ПараметрыОжидания);
			
		ИначеЕсли ОтправкаЧековЧерезЯндекс 
			И НЕ ЗначениеЗаполнено(КонтактныеДанныеЭлектронногоЧека) Тогда	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан адрес доставки электронного чека'"));
			Возврат;
		КонецЕсли;
	Иначе 
		Закрыть();
		ОткрытьФормуПодготовкиСообщения();	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодготовкиСообщения()
	
	Если ВариантОтправкиПлатежнойСсылки = "Почта" Тогда
		
		Если НЕ ЗначениеЗаполнено(ШаблонEmail) Тогда // Без шаблона
			РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(КонструкторПараметровОплатыБезШаблона());
		Иначе 
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонEmail, "Письмо"));
		КонецЕсли; 
		
	ИначеЕсли ВариантОтправкиПлатежнойСсылки = "SMS" Тогда	
		
		Если НЕ ЗначениеЗаполнено(ШаблонSMS) Тогда // Без шаблона
			ПоказатьФормуСообщения(Новый Структура("Текст, Получатель, ДополнительныеПараметры", 
			ПлатежнаяСсылка, СписокПолучателей("SMS")), "СообщениеSMS", Параметры.ДокументСсылка);
		Иначе 
			СформироватьСообщениеДляОтправки(КонструкторПараметровОтправки(ШаблонSMS, "СообщениеSMS"));	
		КонецЕсли; 
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	КопироватьСсылкуВБуфер();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСсылку(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.НастройкиЯндексКассы.Форма.ФормаПодготовкиПлатежнойСсылки.СформироватьСсылку");
	
	////////////////////////////////////////////////////////////////////////////////
	
	КонтактныеДанныеЭлектронногоЧека = ПолучитьКонтактныеДанныеЭлектронногоЧека();
			
	Если НЕ ЗначениеЗаполнено(КонтактныеДанныеЭлектронногоЧека)
		И ОтправкаЧековЧерезЯндекс Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан адрес доставки электронного чека'"));
		Возврат;
	КонецЕсли; 		
	
	////////////////////////////////////////////////////////////////////////////////
	
	ДлительнаяОперация = ПолучитьПлатежнуюСсылкуВФоне(Параметры.ДокументСсылка, КонтактныеДанныеЭлектронногоЧека);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
	Если ДлительнаяОперация <> Неопределено
		И ДлительнаяОперация.Статус = "Выполняется" Тогда
		Элементы.ДекорацияДлительнаяОперацияСформировать.Видимость = Истина;
	КонецЕсли;
	
	ПараметрыОжидания = ПараметрыФоновогоЗадания(Ложь); 
	
	ДлительнаяОперацияЗавершение = Новый ОписаниеОповещения(
		"ПолучитьПлатежнуюСсылкуЗавершение", ЭтотОбъект, ПараметрыОжидания);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ДлительнаяОперацияЗавершение,
		ПараметрыОжидания);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДокументБылИзменен(ДокументСсылка)
	
	Возврат ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПолучитьХешСуммуПоДокументу(ДокументСсылка) <> ДанныеСчетаИзСервиса.ХешСумма;
		
КонецФункции

&НаКлиенте
Функция ПолучитьКонтактныеДанныеЭлектронногоЧека()
	
	КонтактныеДанныеЭлектронногоЧека = "";
	
	Если ОтправкаЧековЧерезЯндекс Тогда
		Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail") 
			И ЗначениеЗаполнено(Email) Тогда
			
			КонтактныеДанныеЭлектронногоЧека = Email;
		КонецЕсли; 
		
		Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS") 
			И ЗначениеЗаполнено(Телефон) Тогда
			
			КонтактныеДанныеЭлектронногоЧека = "+7" + НомерТелефонаВФормате10Знаков(Телефон);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат КонтактныеДанныеЭлектронногоЧека;
	
КонецФункции

&НаСервере
Процедура УстановитьВариантОтправкиЧека(КонтактныеДанныеЭлектронногоЧека)
	
	Если ЭтоПочта(КонтактныеДанныеЭлектронногоЧека) Тогда
		Email = КонтактныеДанныеЭлектронногоЧека;
		ВариантОтправкиЭлектронногоЧека 
			= ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	Иначе 
		Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(КонтактныеДанныеЭлектронногоЧека);
		Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
		ВариантОтправкиЭлектронногоЧека 
			= ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");		
	КонецЕсли; 			
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию()
	
	Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS") Тогда
		
		Телефоны = Новый Массив;
		Для Каждого ЭлементСпискаЗначений Из Элементы.Телефон.СписокВыбора Цикл
			Телефоны.Добавить(НомерТелефонаВФормате10Знаков(ЭлементСпискаЗначений.Значение));
		КонецЦикла;
		
		Если Телефоны.Найти(НомерТелефонаВФормате10Знаков(Телефон)) = Неопределено Тогда
			ОбновитьКонтактнуюИнформациюСервер(
				Партнер,
				Телефон,
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));		
		КонецЕсли;
		
	ИначеЕсли ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail") Тогда
		
		Если Элементы.Email.СписокВыбора.НайтиПоЗначению(Email) = Неопределено Тогда
			ОбновитьКонтактнуюИнформациюСервер(
				Партнер,
				Email,
				ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера"));		
		КонецЕсли; 
				
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьКонтактнуюИнформациюСервер(Партнер, КонтактнаяИнформация, ВидКонтактнойИнформации)
		
	РозничныеПродажи.ДобавитьКонтактнуюИнформацию(
		Партнер,
		КонтактнаяИнформация,
		ВидКонтактнойИнформации,,
		Ложь);		
		
КонецПроцедуры

&НаКлиенте
Функция НомерТелефонаВФормате10Знаков(Телефон) Экспорт
	
	Телефон10Знаков = "";
	Числа = "0123456789";
	
	ДлинаПредставленияТелефона = СтрДлина(Телефон);
	Для Индекс = 1 По ДлинаПредставленияТелефона Цикл
		
		Символ = Сред(Телефон, Индекс, 1);
		Если СтрНайти(Числа, Символ) > 0 Тогда
			Телефон10Знаков = Телефон10Знаков + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Прав(Телефон10Знаков, 10);
	
КонецФункции

&НаСервере
Функция СформироватьСообщениеНаСервере(АдресВременногоХранилища, ПараметрыОтправки, ВидСообщения)
	
	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("ПараметрыОтправки", ПараметрыОтправки);
	ПараметрыВызоваСервера.Вставить("ВидСообщения",      ВидСообщения);
	
	ШаблоныСообщенийСлужебный.СформироватьСообщениеВФоне(ПараметрыВызоваСервера, АдресВременногоХранилища);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

&НаКлиенте
Процедура СформироватьСообщениеДляОтправки(ПараметрыОтправки)
	
	РежимВыбора = Ложь;
	
	АдресВременногоХранилища = Неопределено;
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	АдресРезультата = СформироватьСообщениеНаСервере(АдресВременногоХранилища, ПараметрыОтправки, ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения);
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ПоказатьФормуСообщения(Результат, ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения, ПараметрыОтправки.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСообщения(Сообщение, ВидСообщения, Предмет)
	
	Если ВидСообщения = "СообщениеSMS" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда 
			МодульОтправкаSMSКлиент= ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаSMSКлиент");
			ДополнительныеПараметры = Новый Структура("ИсточникКонтактнойИнформации, ПеревестиВТранслит");
			
			Если Сообщение.ДополнительныеПараметры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Сообщение.ДополнительныеПараметры);
			КонецЕсли;
			
			ДополнительныеПараметры.ИсточникКонтактнойИнформации = Предмет;
			Текст      = ?(Сообщение.Свойство("Текст"), Сообщение.Текст, "");
			Получатель = ?(Сообщение.Свойство("Получатель"), Сообщение.Получатель.ВыгрузитьЗначения(), Новый СписокЗначений);
			МодульОтправкаSMSКлиент.ОтправитьSMS(Получатель, Текст, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
			МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(Сообщение);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция КонструкторПараметровОтправки(Шаблон = Неопределено, ВидСообщения)
	
	ПараметрыОтправки = Новый Структура();
	ПараметрыОтправки.Вставить("Шаблон", Шаблон);
	ПараметрыОтправки.Вставить("Предмет", Параметры.ДокументСсылка);
	ПараметрыОтправки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтправки.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", ВидСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Соответствие);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ОтправитьСразу", Ложь);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("ПлатежнаяСсылка", ПлатежнаяСсылка);
	
	Возврат ПараметрыОтправки;
	
КонецФункции

&НаКлиенте
Функция КонструкторПараметровОплатыБезШаблона()
	
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Получатель", СписокПолучателей("Почта"));
	ПараметрыСообщения.Вставить("Предмет", Параметры.ДокументСсылка);
	ПараметрыСообщения.Вставить("Тема", "Ссылка для оплаты");
	
	Если ОтправлятьПисьмаВФорматеHTML() Тогда
		ПараметрыСообщения.Вставить("Текст", Новый Структура("ТекстHTML, СтруктураВложений",  
			СтрШаблон(ТекстПисьмаБезШаблонаHTML(), ПлатежнаяСсылка), Новый Структура()));			
	Иначе 
		ПараметрыСообщения.Вставить("Текст", СтрШаблон(ТекстПисьмаБезШаблонаТекст(), ПлатежнаяСсылка));  
	КонецЕсли; 
		
	Возврат ПараметрыСообщения;	
		
КонецФункции

&НаСервере
Функция СписокПолучателей(ВидСообщения)
	
	ТаблицаКонтактов = Новый ТаблицаЗначений;
	
	ТаблицаКонтактов.Колонки.Добавить("Контакт");
	ТаблицаКонтактов.Колонки.Добавить("Представление");
	
	СписокПолучателей = Новый СписокЗначений;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если ВидСообщения = "Почта" Тогда
		
		ТаблицаКонтактов.Колонки.Добавить("Адрес");
		
		ФормированиеПечатныхФорм.ЗаполнитьПолучателейСообщенияПоШаблону(
			ТаблицаКонтактов, Параметры.ДокументСсылка.Метаданные().ПолноеИмя(), Параметры.ДокументСсылка, Ложь);	
		
		Для каждого ЭлементКоллекции Из ТаблицаКонтактов Цикл
			СписокПолучателей.Добавить(ЭлементКоллекции.Адрес, ЭлементКоллекции.Представление);
		КонецЦикла;

	ИначеЕсли ВидСообщения = "SMS" Тогда	
		
		ТаблицаКонтактов.Колонки.Добавить("НомерТелефона");
		
		ФормированиеПечатныхФорм.ЗаполнитьПолучателейСообщенияПоШаблону(
			ТаблицаКонтактов, Параметры.ДокументСсылка.Метаданные().ПолноеИмя(), Параметры.ДокументСсылка, Истина);	
			
		Для каждого ЭлементКоллекции Из ТаблицаКонтактов Цикл
			СписокПолучателей.Добавить(ЭлементКоллекции.НомерТелефона, ЭлементКоллекции.Представление);
		КонецЦикла;
						
	КонецЕсли;
	
	Возврат СписокПолучателей;
		
КонецФункции

&НаКлиенте
Функция ТекстПисьмаБезШаблонаHTML()
	
	HTMLСтрока = 
	
	"<html>
	|<head>
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
	|<meta name=""format-detection"" content=""telephone=no"" />
	|</head>
	|<body>
	|<p>Ссылка для оплаты: <a href=""%1"">%1</a></p>
	|
	|</body>
	|</html>";
	
	Возврат СтрШаблон(НСтр("ru = '%1'"), HTMLСтрока);
		
КонецФункции

&НаКлиенте
Функция ТекстПисьмаБезШаблонаТекст()
	
	Возврат НСтр("ru = 'Ссылка для оплаты: %1'");
		
КонецФункции

&НаСервереБезКонтекста
Функция ОтправлятьПисьмаВФорматеHTML()
	Возврат ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML");	
КонецФункции

&НаКлиенте
Процедура КопироватьСсылкуВБуфер()
	
	Документ = Элементы.БуферОбмена.Документ;
	Если Документ <> Неопределено Тогда 
		Попытка
			Документ.parentWindow.ClipboardData.SetData("Text", ПлатежнаяСсылка);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Ссылка получена'"),
			, НСтр("ru = 'Ссылка для оплаты через Яндекс.Кассу скопирована в буфер обмена'"));			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Возникла ошибка при копировании в буфер обмена.
			|Воспользуйтесь комбинацией клавиш Ctrl+C.'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтактнаяИнформацияПоПратнеру(Партнер)
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен Партнер'");
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	ИсточникиКонтактнойИнформации = Новый Массив;
	ИсточникиКонтактнойИнформации.Добавить(Партнер);
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиКонтактнойИнформации(КонтактнаяИнформацияОбъекта)
	
	ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	
	Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
		
		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
			Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
			Элементы.Телефон.СписокВыбора.Добавить(Телефон);
		КонецЕсли;
		
		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			Email = ЭлементКонтактнойИнформации.Представление;
			Элементы.Email.СписокВыбора.Добавить(Email);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
		Телефон = Элементы.Телефон.СписокВыбора[0].Значение;
		Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		ВариантОтправкиЭлектронногоЧека 
			= ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS");
	КонецЕсли;
	
	Если Элементы.Email.СписокВыбора.Количество() > 0 Тогда
		Email = Элементы.Email.СписокВыбора[0].Значение;
		Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		ВариантОтправкиЭлектронногоЧека 
			= ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДоставкиЧека()
	
	АдресДоставкиЧека = "";
	
	Если ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail")
		И ЗначениеЗаполнено(Email) Тогда
		
		АдресДоставкиЧека = Email;
		
	ИначеЕсли ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS")
		И ЗначениеЗаполнено(Телефон) Тогда
		
		АдресДоставкиЧека = Телефон;
		
	КонецЕсли; 

	Возврат АдресДоставкиЧека;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоДокументу(ДокументСсылка)
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторПлатежа,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|	НастройкиЯндексКассы.ОтправкаЧековЧерезЯндекс КАК ОтправкаЧековЧерезЯндекс,
	|	НастройкиЯндексКассы.ИдентификаторМагазина КАК ИдентификаторМагазина,
	|	НастройкиЯндексКассы.СДоговором КАК СДоговором
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЯндексКассы КАК НастройкиЯндексКассы
	|		ПО ТаблицаДокумента.Организация = НастройкиЯндексКассы.Организация
	|			И (НЕ НастройкиЯндексКассы.Недействительна)
	|			И (НЕ НастройкиЯндексКассы.ПометкаУдаления)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокумента", ДокументСсылка.Метаданные().ПолноеИмя());
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		
		СтрокаВыгрузки = Выгрузка[0];
		
		Если СтрокаВыгрузки.СДоговором Тогда
			СтрокаВыгрузки.ИдентификаторПлатежа 
				= ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПолучитьУникальныйИдентификаторПлатежа(ДокументСсылка);
		Иначе 
			СтрокаВыгрузки.ИдентификаторПлатежа 
				= ДокументСсылка.УникальныйИдентификатор();
		КонецЕсли; 
		
		Возврат СтрокаВыгрузки;
	Иначе 
		Возврат Неопределено; 	
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПочта(ВходящаяСтрока)
	
	Возврат НЕ ЗначениеЗаполнено(ВходящаяСтрока) ИЛИ Найти(ВходящаяСтрока, "@") > 0;
		
КонецФункции

#КонецОбласти

#Область ПоддержкаАсинхронности

&НаКлиенте
Функция ПараметрыФоновогоЗадания(ЗакрытьФорму = Неопределено)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	
	Если ЗакрытьФорму = Неопределено Тогда
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение информации о счете.'");		
	Иначе 
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение ссылки для оплаты через Яндекс.Кассу.'");		
	КонецЕсли; 
	
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания = ?(ЗакрытьФорму = Неопределено, Истина, Ложь);
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	ПараметрыОжидания.Вставить("ЗакрытьФорму", ЗакрытьФорму);
	
	Возврат ПараметрыОжидания;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПлатежнуюСсылкуВФоне(ДокументСсылка, КонтактныеДанныеЭлектронногоЧека)
			
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	
	Задание.Наименование       = НСтр("ru = 'Получение ссылки для оплаты через Яндекс.Кассу.'");
	Задание.ИмяПроцедуры       = "ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПлатежнаяСсылка";
	Задание.ПараметрыПроцедуры = Новый Структура("ДокументСсылка, КонтактныеДанныеЭлектронногоЧека", 
		ДокументСсылка, КонтактныеДанныеЭлектронногоЧека);	
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, 
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСчетаИзСервисаВФоне(ИдентификаторМагазина, ИдентификаторПлатежа)
			
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = Новый Структура("ИмяПроцедуры, Наименование, ПараметрыПроцедуры");
	
	Задание.Наименование       = НСтр("ru = 'Получение данных счета для оплаты через Яндекс.Кассу.'");
	Задание.ИмяПроцедуры       = "ИнтеграцияСЯндексКассойСлужебныйВызовСервера.ПолучитьДанныеСчетаИзСервиса";
	Задание.ПараметрыПроцедуры = Новый Структура("ИдентификаторМагазина, ИдентификаторПлатежа", 
		ИдентификаторМагазина, ИдентификаторПлатежа);	
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Задание.Наименование;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(Задание.ИмяПроцедуры, 
		Задание.ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПлатежнуюСсылкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ДекорацияДлительнаяОперацияСформировать.Видимость = Ложь;
	Элементы.ДекорацияДлительнаяОперацияОтправить.Видимость = Ложь;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли; 
		
	////////////////////////////////////////////////////////////////////////////////
	
	ИдентификаторЗадания = Неопределено;
	
	ВывестиРезультатФоновойОперации(Результат);
	
	ПлатежнаяСсылка = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ДополнительныеПараметры.ЗакрытьФорму Тогда
		
		Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
			Закрыть();
			ОткрытьФормуПодготовкиСообщения();	
		КонецЕсли; 
		
	Иначе 
		Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
			ТребуетсяОбновлениеДанныхВСервисе = Ложь;
			ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе = Ложь;
		КонецЕсли; 
		
		УправлениеЗаголовками();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСчетаИзСервисаЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		Возврат;
	КонецЕсли; 
		
	////////////////////////////////////////////////////////////////////////////////
	
	ИдентификаторЗадания = Неопределено;
	
	ВывестиРезультатФоновойОперации(Результат);
	
	ДанныеСчета = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если ДанныеСчета = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ДанныеСчетаИзСервиса, ДанныеСчета);
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если ДанныеСчетаИзСервиса.СтатусСчета <> "Новый" Тогда // Счет отправлялся, но не оплачен
		
		ПлатежнаяСсылка = ДанныеСчетаИзСервиса.ПлатежнаяСсылка;
		
		КонтактныеДанныеЭлектронногоЧека = ДанныеСчетаИзСервиса.КонтактныеДанныеЭлектронногоЧека;
		
		УстановитьВариантОтправкиЧека(КонтактныеДанныеЭлектронногоЧека);
		
		Если ДанныеСчетаИзСервиса.СтатусСчета = "НеОплачен" Тогда // Если счет оплачен, не проверяем изменения
			Если ДокументБылИзменен(Параметры.ДокументСсылка) Тогда
				ТребуетсяОбновлениеДанныхВСервисе = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	УправлениеЗаголовками();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатФоновойОперации(Результат)
	
	Если Результат.Свойство("Сообщения") Тогда 
		Для Каждого Сообщение из Результат.Сообщения Цикл 
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
		
	УправлениеЗаголовками();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаВариантДоставкиЧека.Видимость = ОтправкаЧековЧерезЯндекс;
	
	Элементы.ГруппаВариантОтправкиСсылки.Видимость = НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Если НЕ ШаблоныСообщенийСлужебный.ИспользуютсяШаблоныСообщений() Тогда
		Элементы.ГруппаВариантОтправкиСсылки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;	
		Элементы.ДекорацияКонвертОтправка.Видимость = Ложь;
		Элементы.ДекорацияСообщенияОтправка.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЗаголовками()
	
	////////////////////////////////////////////////////////////////////////////////
	// Управление кнопкой формирования ссылкой
	
	Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда
		
		Если ТребуетсяОбновлениеДанныхВСервисе ИЛИ ТребуетсяОбновлениеКонтактнойИнформацииВСвервисе Тогда
			Элементы.СформироватьСсылку.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			Элементы.СформироватьСсылку.Доступность = Истина;	
		Иначе 
			Элементы.СформироватьСсылку.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
			Элементы.СформироватьСсылку.Доступность = Ложь;
		КонецЕсли; 
		
		Элементы.СформироватьСсылку.Заголовок = НСтр("ru = 'Обновить данные'");
	Иначе 
		Элементы.СформироватьСсылку.Доступность = Истина;
		Элементы.СформироватьСсылку.Заголовок = НСтр("ru = 'Сформировать ссылку'");		
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	// Управление заголовком формы
	
	Если ТребуетсяОбновлениеДанныхВСервисе Тогда
		Элементы.ДекорацияПояснениеКФорме.Заголовок = 
			НСтр("ru = 'Внимание! Счет был изменен после формирования ссылки для его оплаты. Требуется обновление данных.'");
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
 	
	Иначе 
		
		Если ДанныеСчетаИзСервиса.СтатусСчета = "Оплачен" Тогда // Счет оплачен
			Элементы.ДекорацияПояснениеКФорме.Заголовок = 
				НСтр("ru = 'Ссылка для оплаты счета была сформирована и отправлена покупателю. Счет оплачен.'");
		Иначе 
			Если ЗначениеЗаполнено(ПлатежнаяСсылка) Тогда // Ссылка сформирована
				Элементы.ДекорацияПояснениеКФорме.Заголовок = 
					НСтр("ru = 'Ссылка для оплаты счета сформирована и готова к отправке покупателю.'");	
			Иначе 
				Если НЕ ОтправкаЧековЧерезЯндекс Тогда
					Элементы.ДекорацияПояснениеКФорме.Заголовок = 
						НСтр("ru = 'Сформируйте ссылку для оплаты счета и отправьте ее покупателю.'");
				Иначе 
					Элементы.ДекорацияПояснениеКФорме.Заголовок = 
						НСтр("ru = 'Выберите способ доставки электронного чека, сформируйте ссылку для оплаты счета и отправьте ее покупателю.'");			
				КонецЕсли; 
			КонецЕсли; 			
		КонецЕсли;	
		
		Элементы.ДекорацияПояснениеКФорме.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти