&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УпрощенныйВводДоступен = ПартнерыИКонтрагенты.УпрощенныйВводДоступен() ИЛИ ТолькоПросмотр;
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.ЮрФизЛицо
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО Контрагенты.Партнер = Партнеры.Ссылка
			|ГДЕ
			|	Партнеры.Ссылка = &ЗначениеЗаполнения";
			
			Запрос.УстановитьПараметр("ЗначениеЗаполнения", Параметры.ЗначениеКопирования);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЮрФизЛицо =  Выборка.ЮрФизЛицо;
			Иначе
				ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
			
		Иначе
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		ПриСозданииИЧтенииНаСервере();
		
	КонецЕсли;
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Объект.Ссылка);
	
	Если ОтгрузкаЗапрещена Тогда
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Версионирование
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Версионирование
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыКИ);
	
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформацияКонтрагента");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	ДополнительныеПараметрыКИ.Вставить("ИсключаемыеВиды",  ОбщегоНазначенияУТПовтИсп.МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера());
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, КонтрагентПартнера, ДополнительныеПараметрыКИ,,,,Ложь);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) 
		ИЛИ ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры) Тогда
		УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма, Параметры, Ложь);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	РеквизитыПроверкиКонтрагентов.НеИспользоватьКэш = Истина;
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ПриСозданииНаСервереУправлениеВидимостью(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЮридическоеФизическоеЛицо = ?(Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания, 
				Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
				Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Объект,
		КонтрагентПартнера,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// Команды1СПАРКРиски
	СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.ПодменюСПАРК, 
												Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
	// Конец Команды1СПАРКРиски

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПартнерыИКонтрагенты.ЗаполнитьДанныеКонтрагентаПартнера(ЭтотОбъект, ТекущийОбъект.Ссылка);
	
	ПриСозданииИЧтенииНаСервере();
	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, КонтрагентПартнера, "ГруппаКонтактнаяИнформацияКонтрагента", Ложь);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		ОбновитьЗапретОтгрузки(Объект.Ссылка, ОтгрузкаЗапрещена);
		УстановитьДоступностьЗапретаОтгрузки();
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Обработчик механизма "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПартнерыИКонтрагенты.ПартнерФормаЭлементаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьКонтрагентаПартнера();
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыЗаписиСПАРКРиски = Новый Структура("КонтрагентСсылка", КонтрагентПартнера);
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписиСПАРКРиски);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		КодПоОКПО = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Или ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		КПП = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи, "Партнеры");
	Оповестить("Запись_Партнеры", Объект.Ссылка);
	ОповеститьОбИзменении(КонтрагентПартнера);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПартнерыИКонтрагенты.ПроверитьКорректностьЗаполненияКонтрагента(ЭтаФорма, КонтрагентПартнера, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаНаименованиеПриИзменении(ЭтаФорма,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(ЭтаФорма, Элемент);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьЗапретаОтгрузки();
	
	ОбновитьДоступностьСтавокДляКрыма(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаКомментарииНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.ПартнерФормаЭлементаБизнесРегионПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		ОбособленноеПодразделение = Истина;
		
		Если ГоловнойКонтрагент = КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		ОбособленноеПодразделение = Ложь;
		
		Если ГоловнойКонтрагент <> КонтрагентПартнера Тогда
			ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Иначе
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УправлениеДоступностью();
	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо);
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		
		ИННЗаполненКорректно = Ложь;
		
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;

	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		РезультатЗапуска = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(ИНН,
		                                                                                               ЮрФизЛицо,
		                                                                                               УникальныйИдентификатор,
		                                                                                               ФоновоеЗаданиеИдентификатор);
		
		ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПараметрыОбработчика.ТекущийИнтервал = 2;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатЗапуска.РеквизитыКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ОбработатьИзмененияГоловногоКонтрагента();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(Объект.Наименование, Объект.НаименованиеПолное);
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеКомпанияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Текст)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Текст, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"КПП",,);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(Текст) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"КодПоОКПО",,);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение",ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = Неопределено;

	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы,,,,, Новый ОписаниеОповещения("ШаблонЭтикеткиНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ШаблонЭтикетки = Результат;
    Если ШаблонЭтикетки=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ШаблонЭтикетки =  ШаблонЭтикетки;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияКПП" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущийКПП", КПП);
		ПараметрыФормы.Вставить("ИсторияКПП", ИсторияКПП);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияКПППослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКИсторииНаименованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияНаименований" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущееНаименованиеПолное", Объект.НаименованиеПолное);
		ПараметрыФормы.Вставить("ИсторияНаименований", ИсторияНаименований);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("ЮрФизлицо", ЮрФизЛицо);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИсторияНаименованийПослеЗакрытия", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагента(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьГоловногоКонтрагентаЗавершение", ЭтотОбъект);
	
	Если КоличествоВозможныхГоловныхКонтрагентов(ИНН, КонтрагентПартнера) = 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ЗначенияЗаполнения = Новый Структура;
		
		ЗначенияЗаполнения.Вставить("ИНН",       ИНН);
		ЗначенияЗаполнения.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",              ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ОснованиеОбособленныйКонтрагент", КонтрагентПартнера);
		
		ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового", ПараметрыФормы,
			ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
	
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Контрагент", КонтрагентПартнера);
		ПараметрыЗаполнения.Вставить("ИНН",        ИНН);
		ПараметрыЗаполнения.Вставить("Партнер",    Объект.Ссылка);
		ПараметрыЗаполнения.Вставить("ИспользоватьПартнеровКакКонтрагентов", Истина);

		ПартнерыИКонтрагентыКлиент.ЗаполнитьГоловногоКонтрагента(ЭтотОбъект, ПараметрыЗаполнения, Ложь, Оповещение);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузки(Команда)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к запрету отгрузки возможен только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСегментовЗапретаОтгрузкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                       ИНН,
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Объект.НаименованиеПолное);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ СамообслуживаниеКлиентСервер.ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
	                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
	                       Результат,
	                       ФоновоеЗаданиеИдентификатор);
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, Истина);
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	ТекущийЭлемент = Элементы.НаименованиеПолноеКомпания;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеДоступностью()
	
	ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
		ЭтотОбъект, ЮрФизЛицо, ОбособленноеПодразделение, ИНН);
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
	УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(ЭтотОбъект);
	
	СамообслуживаниеКлиентСервер.УправлениеСтраницамиЮрФизЛицоПриИзменении(ЭтотОбъект, ЮрФизЛицо);
	
	ОбновитьДоступностьСтавокДляКрыма(ЭтотОбъект);
	
	ПартнерыИКонтрагенты.ОбновитьСтрокиИстории(ИсторияКПП, ИсторияНаименований, ПереходКИсторииКПП, ПереходКИсторииНаименования);
	
	Элементы.КПП.ТолькоПросмотр                           = ИсторияКПП.Количество() > 1;
	Элементы.НаименованиеПолноеКомпания.ТолькоПросмотр    = ИсторияНаименований.Количество() > 1;
	Элементы.НаименованиеПолноеЧастноеЛицо.ТолькоПросмотр = ИсторияНаименований.Количество() > 1;
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
		И СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		
		СтранаРегистрации = Справочники.СтраныМира.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтрагентаПартнера()
	
	СоздатьКонтрагента = КонтрагентПартнера.Пустая();
	
	Если СоздатьКонтрагента Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		КонтрагентОбъект = КонтрагентПартнера.ПолучитьОбъект();
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, КонтрагентОбъект);
	
	КонтрагентОбъект.Наименование = Объект.Наименование;
	КонтрагентОбъект.НаименованиеПолное        = Объект.НаименованиеПолное;
	КонтрагентОбъект.ИНН                       = ИНН;
	КонтрагентОбъект.Партнер                   = Объект.Ссылка;
	КонтрагентОбъект.ЮрФизЛицо                 = ЮрФизЛицо;
	КонтрагентОбъект.НДСпоСтавкам4и2           = НДСПоСтавкам4и2;
	КонтрагентОбъект.КодПоОКПО                 = КодПоОКПО;
	КонтрагентОбъект.КПП                       = КПП;
	КонтрагентОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	КонтрагентОбъект.СтранаРегистрации         = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, СтранаРегистрации, Справочники.СтраныМира.Россия);
	КонтрагентОбъект.РегистрационныйНомер      = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, РегистрационныйНомер, "");
	КонтрагентОбъект.НалоговыйНомер            = ?(ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, НалоговыйНомер, "");
	
	КонтрагентОбъект.ИсторияКПП.Загрузить(ИсторияКПП.Выгрузить());
	КонтрагентОбъект.ИсторияНаименований.Загрузить(ИсторияНаименований.Выгрузить());
	
	Если Не ЗначениеЗаполнено(ГоловнойКонтрагент) И Не ОбособленноеПодразделение Тогда
		
		Если СоздатьКонтрагента Тогда
			НоваяСсылка = Справочники.Контрагенты.ПолучитьСсылку();
			КонтрагентОбъект.УстановитьСсылкуНового(НоваяСсылка);
			ГоловнойКонтрагент = КонтрагентОбъект.ПолучитьСсылкуНового();
		Иначе
			ГоловнойКонтрагент = КонтрагентПартнера;
		КонецЕсли;
		
	КонецЕсли;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	ПартнерыИКонтрагенты.ЗаполнитьКонтактнуюИнформациюКонтрагентаПартнера(КонтрагентОбъект, ЭтотОбъект, Объект.КонтактнаяИнформация, Ложь);
	
	Если Не (СоздатьКонтрагента Или ОбособленноеПодразделение) И ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ПартнерыИКонтрагенты.ИзменитьИННПодчиненныхКонтрагентов(КонтрагентПартнера, ИНН);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, КонтрагентОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонтрагентОбъект.Записать();
	
	КонтрагентПартнера = КонтрагентОбъект.Ссылка;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИЧтенииНаСервере()
	
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры);
	
	Если ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(ЮрФизЛицо);
	КонецЕсли;
	
	УправлениеДоступностью();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЗапретаОтгрузки()
	
	Если ИспользоватьЗапретОтгрузки И Объект.Клиент Тогда
		Если ОтгрузкаЗапрещена Тогда
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаЗапрещена;
		Иначе
			Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаОтгрузкаРазрешена;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницыЗапрета.ТекущаяСтраница = Элементы.ГруппаПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьЗапретОтгрузки(Партнер, ОтгрузкаЗапрещена)
	
	ОтгрузкаЗапрещена = СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()

	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru = 'Контрагент (создание)'");
		
	Иначе
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Контрагент)'"), Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьСтавокДляКрыма(Форма)
	
	ПоставщикИРезидент = Форма.Объект.Поставщик
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"))
		И (Форма.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо"));
	
	Форма.Элементы.НДСПоСтавкам4и2.Доступность = ПоставщикИРезидент;
	Если Не ПоставщикИРезидент Тогда
		Форма.НДСПоСтавкам4и2 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияГоловногоКонтрагента()
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГоловнойКонтрагент, "ИНН");
		Элементы.ЗаполнитьПоИНН.Доступность = Не ПустаяСтрока(ИНН);
	КонецЕсли;
	
	СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
		ЭтотОбъект, ОбособленноеПодразделение, ГоловнойКонтрагент, ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГоловногоКонтрагентаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ГоловнойКонтрагент = ВыбранноеЗначение;
		Модифицированность = Истина;
		ОбработатьИзмененияГоловногоКонтрагента();
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
	
	Объект.Наименование = РеквизитыКонтрагента.Наименование;
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если КПП <> РеквизитыКонтрагента.КПП Тогда
			КПП = РеквизитыКонтрагента.КПП;
			ИсторияКПП.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ИНН") Тогда
		ИНН = РеквизитыКонтрагента.ИНН;
	КонецЕсли;
	
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		ИсторияНаименований.Очистить();
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено  Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ДанныеДляСравнения.Наименование            = Объект.Наименование;
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	ДанныеДляСравнения.ИНН                     = ИНН;
	ДанныеДляСравнения.КПП                     = КПП;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               ОбособленноеПодразделение); 

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма, КнопкаНедоступнаБезусловно = Ложь)

	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
	                                                                       Форма.ЮрФизЛицо,
	                                                                       Форма.ИНН,
	                                                                       Форма.ОбособленноеПодразделение,
	                                                                       Форма.НастройкиПодключенияКСервисуИППЗаданы,
	                                                                       КнопкаНедоступнаБезусловно);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма)
	
	СамообслуживаниеКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоСокрНаименованию(Форма,
	                                                                                    Форма.ЮрФизЛицо,
	                                                                                    Форма.Объект.НаименованиеПолное,
	                                                                                    Форма.ОбособленноеПодразделение,
	                                                                                    Форма.НастройкиПодключенияКСервисуИППЗаданы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРеквизитыПроверкиКонтрагента(Форма)
	
	Если Форма.РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется Тогда
		Форма.РеквизитыПроверкиКонтрагентов.ЮрФизЛицо                 = Форма.ЮрФизЛицо;
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо        = (Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") 
		                                                            Или  Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент"));
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент  = Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
		                                                                Или Форма.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция КоличествоВозможныхГоловныхКонтрагентов(ИНН, Ссылка) 
	Возврат ПартнерыИКонтрагенты.ВозможныеГоловныеКонтрагенты(ИНН, Ссылка).Количество();
КонецФункции

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект, 
					Новый Структура("КонтрагентСсылка", КонтрагентПартнера));
КонецПроцедуры

#Область ПериодическиеРеквизиты

&НаКлиенте
Процедура ИсторияКПППослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИсторияКПП") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияКПП = Результат.ИсторияКПП;
		НоваяИсторияКПП.Сортировать("Период");
	
		ИсторияКПП.Очистить();
		Если НоваяИсторияКПП.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияКПП Цикл
				ЗаписьИстории = ИсторияКПП.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееКПП = НоваяИсторияКПП[НоваяИсторияКПП.Количество()-1].КПП;
		
		Если НовоеТекущееКПП <> КПП Тогда
			
			КПП = НовоеТекущееКПП;
			
			Если НЕ ПустаяСтрока(КПП)
				И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,"КПП",,);
		
			КонецЕсли;
				
			ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
			УправлениеДоступностью();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Перем ТекстСообщения;
	
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("ИсторияНаименований") Тогда
		
		Модифицированность = Истина;
		НоваяИсторияНаименований = Результат.ИсторияНаименований;
		НоваяИсторияНаименований.Сортировать("Период");
	
		ИсторияНаименований.Очистить();
		Если НоваяИсторияНаименований.Количество() > 1 Тогда
			Для Каждого СтрокаИстории Из НоваяИсторияНаименований Цикл
				ЗаписьИстории = ИсторияНаименований.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, СтрокаИстории);
			КонецЦикла;
		КонецЕсли;
		
		НовоеТекущееНаименование = НоваяИсторияНаименований[НоваяИсторияНаименований.Количество()-1].НаименованиеПолное;
		
		Если НовоеТекущееНаименование <> Объект.НаименованиеПолное Тогда
			
			Объект.НаименованиеПолное = НовоеТекущееНаименование;
			
		КонецЕсли;
		
		УправлениеДоступностью();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
// Конец Команды1СПАРКРиски

#КонецОбласти
