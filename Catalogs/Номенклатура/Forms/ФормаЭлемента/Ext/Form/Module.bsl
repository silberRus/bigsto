
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");

	ПараметрыДополнительныхСвойств = Новый Структура;
	ПараметрыДополнительныхСвойств.Вставить("Объект", Объект);
	ПараметрыДополнительныхСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ПараметрыДополнительныхСвойств.Вставить("СкрытьУдаленные", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПараметрыДополнительныхСвойств);
	
	Элементы.ВидНоменклатурыШаблонЦенникаНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	Элементы.ВидНоменклатурыШаблонЭтикеткиНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	
	ЗаголовокГруппыКартинкаОписание = НСтр("ru = 'Описание'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		
		// Установим доступность
		// ... формы в целом 
		ЭтаФорма.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
		// ... полей шаблонов этикетки и ценника
		Элементы.ИспользоватьИндивидуальныйШаблонЦенника.ТолькоПросмотр   = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЦенника);
		Элементы.ИспользоватьИндивидуальныйШаблонЭтикетки.ТолькоПросмотр = Не ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ИспользоватьИндивидуальныйШаблонЭтикетки);
		
		// ... поля картинки и кнопок его панели
		ЕстьПравоРедактированияКартинки    = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлКартинки);
		Элементы.ФайлКартинки.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ДобавитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ИзменитьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ОчиститьИзображение.Доступность = ЕстьПравоРедактированияКартинки;
		Элементы.ВыбратьКартинкуИзПрисоединенныхФайлов.Видимость = ЕстьПравоРедактированияКартинки;
		
		// ... поля описание для сайта и кнопки его выбора
		ЕстьПравоРедактированияОписания = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты.ФайлОписанияДляСайта);
		Элементы.ФайлОписанияДляСайта.ТолькоПросмотр = Не ЕстьПравоРедактированияОписания;
		
		ОбновитьНастройкиРеквизитов();
	Иначе
		ЕстьПравоРедактирования = Истина;
		ЗаполнитьПоПараметрам();
	КонецЕсли;
	
	Если Не ЕстьПравоРедактирования Тогда
		Элементы.СтраницыКарточкаНоменклатуры.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаРеквизитыНоменклатуры.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры") Тогда
		МассивВидов = Справочники.ВидыНоменклатуры.ПолучитьПредустановленныеВидыНоменклатуры();
		Элементы.ВидНоменклатурыПереключатель.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
		Элементы.ВидНоменклатурыПереключательОбязательныеПоля.СписокВыбора.ЗагрузитьЗначения(МассивВидов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		//Режим копирования
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Режим редактирования
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаКарточкаНоменклатуры;
		НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Истина);
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		
		Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
	Иначе	
		//Режим создания
		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
		НастройкаВидимостиФормы = "ПоказатьОсновные";
		РежимВидимостиПоказатьТолькоВажные = Истина;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	КоэффициентПересчетаВКубическиеМетры = 
		НоменклатураСервер.КоэффициентПересчетаВКубическиеМетры(Константы.ЕдиницаИзмеренияОбъема.Получить());
		
	Элементы.ВидНоменклатурыШаблонЦенникаНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	Элементы.ВидНоменклатурыШаблонЭтикеткиНеУказан.Заголовок = НСтр("ru = '<не указан>'");
	
	ЗаголовокГруппыКартинкаОписание = НСтр("ru = 'Описание'");
	
	//Запрет редактирования
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
		НастроитьДоступностьБлокируемыхРеквизитов();
	Иначе
		ПриСозданииЧтенииНаСервере();
		НастроитьФорму();
	КонецЕсли;
	
	ПоказатьСоветПереходКРедактированию = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Справочник.Номенклатура.Форма.ФормаЭлемента",
																								"ПоказатьСоветПереходКРедактированию",
																								Истина);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	ПриСозданииЧтенииНаСервере();
	
	НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);

	НастроитьДоступностьБлокируемыхРеквизитов();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(Объект, НастройкиВидимостиИЗаголовков);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ОбновитьКешРеквизитовВидаНоменклатуры();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВариантКомплектацииНоменклатуры = НаборыВызовСервера.ВариантКомплектацииНоменклатурыПоУмолчанию(
		Объект.Ссылка,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		
		Если Не Объект.ФайлКартинки.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Иначе
			АдресКартинки = "";
		Конецесли;
		
		Если Не Объект.ФайлОписанияДляСайта.Пустая() Тогда
			ПутьКФайлуОписанию = Строка(Объект.ФайлОписанияДляСайта);
		КонецЕсли;
	КонецЕсли;
	
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Вес");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Объем");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Площадь");
	ПреобразоватьМожноУказыватьВДокументахВСтроку("Длина");
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда 
		ИспользоватьИндивидуальныйШаблонЦенника = 1;
	КонецЕсли;
	
	Если Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда 
		ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	КонецЕсли;
	
	Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		ИспользованиеУпаковок = "ИндивидуальныйНабор";
	Иначе
		ИспользованиеУпаковок = "ОбщийНабор";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЕстьПравоРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ);
	
	// Контроль уникальности вызываем всегда, т.к. нужно обязательно проверить уникальность рабочего наименования
	АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Истина, Отказ);
	
	Если Отказ Тогда
		
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	Если Не Отказ
		И (ЕстьИндивидуальныеУпаковкиВОбъектеКопирования 
			Или ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования
			Или ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования)
		И Не НастройкиКопированияЗаданы Тогда
		
		Отказ = Истина;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЕстьИндивидуальныеУпаковкиВОбъектеКопирования", ЕстьИндивидуальныеУпаковкиВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования", ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования);
		ПараметрыФормы.Вставить("ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования", ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования);
		ПараметрыФормы.Вставить("ИсточникКопирования", ИсточникКопирования);
		ОткрытьФорму("Справочник.Номенклатура.Форма.НастройкиКопированияИндивидуальныхУпаковокХарактеристик",
			ПараметрыФормы,ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("КопироватьИндивидуальныеУпаковкиХарактеристикиЗавершение",
			ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, ЭтоЗапись", АдресВременногоХранилищаТаблицаНайдено,Истина);
		ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
			ПараметрыФормы,ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНоваяНоменклатура", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЭтикетки = Булево(ИспользоватьИндивидуальныйШаблонЭтикетки);
	ТекущийОбъект.ИспользоватьИндивидуальныйШаблонЦенника  = Булево(ИспользоватьИндивидуальныйШаблонЦенника);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НаименованиеДляПечатиСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеСформировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СменаВидаНоменклатурыОтработана");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочееНаименованиеПроверено", Истина);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ДанныеФайлаHTML) Или ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
			
			ПараметрыФайлаКартинки = Новый Структура();
			ПараметрыФайлаКартинки.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайлаКартинки.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
			ПараметрыФайлаКартинки.Вставить("ИмяБезРасширения", ДанныеФайлаКартинки.ИмяБезРасширения);
			ПараметрыФайлаКартинки.Вставить("РасширениеБезТочки", ДанныеФайлаКартинки.Расширение);
			ПараметрыФайлаКартинки.Вставить("ВремяИзмененияУниверсальное", ДанныеФайлаКартинки.УниверсальноеВремяИзменения);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайлаКартинки,
				АдресКартинки,
				"",
				"НоменклатураПрисоединенныеФайлы");
			
			ТекущийОбъект.ФайлКартинки = ПрисоединенныйФайл;
			
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеФайлаHTML) Тогда
			
			ПараметрыФайлаHTML = Новый Структура();
			ПараметрыФайлаHTML.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайлаHTML.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
			ПараметрыФайлаHTML.Вставить("ИмяБезРасширения", ДанныеФайлаHTML.ИмяБезРасширения);
			ПараметрыФайлаHTML.Вставить("РасширениеБезТочки", ДанныеФайлаHTML.Расширение);
			ПараметрыФайлаHTML.Вставить("ВремяИзмененияУниверсальное", ДанныеФайлаHTML.УниверсальноеВремяИзменения);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайлаHTML,
				АдресОписанияHTML,
				"",
				"НоменклатураПрисоединенныеФайлы");
			
			ТекущийОбъект.ФайлОписанияДляСайта = ПрисоединенныйФайл;
			
			ДанныеФайлаHTML = Неопределено;
		КонецЕсли;
		
		ТекущийОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	Если КопироватьИндивидуальныеУпаковки Тогда
		Справочники.УпаковкиЕдиницыИзмерения.СкопироватьИерархиюУпаковок(ИсточникКопирования, Объект.Ссылка);
		КопироватьИндивидуальныеУпаковки = Ложь;
	КонецЕсли;
	
	УстановитьСвязьСХарактеристикамиАлкогольнойПродукции = КопироватьИндивидуальныеХарактеристики
		И КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС;
	
	Если КопироватьИндивидуальныеХарактеристики Тогда
		КопироватьИндивидуальныеХарактеристики = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Наименование,
		|	ХарактеристикиНоменклатуры.НаименованиеПолное,
		|	ХарактеристикиНоменклатуры.Принципал,
		|	ХарактеристикиНоменклатуры.Контрагент,
		|	ХарактеристикиНоменклатуры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	)
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И (Не ХарактеристикиНоменклатуры.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Владелец", ИсточникКопирования);
		
		ВыборкаХарактеристик = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаХарактеристик.Следующий() Цикл
			
			ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			
			ХарактеристикаОбъект.Наименование       = ВыборкаХарактеристик.Наименование;
			ХарактеристикаОбъект.НаименованиеПолное = ВыборкаХарактеристик.НаименованиеПолное;
			
			ВыборкаДопРеквизитов = ВыборкаХарактеристик.ДополнительныеРеквизиты.Выбрать();
			
			Пока ВыборкаДопРеквизитов.Следующий() Цикл
				
				СтрокаДопРеквизитов = ХарактеристикаОбъект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДопРеквизитов,ВыборкаДопРеквизитов);
				
			КонецЦикла;
			
			ХарактеристикаОбъект.Владелец = Объект.Ссылка;
			ХарактеристикаОбъект.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
	Если КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС Тогда
		
		ИнтеграцияЕГАИСУТ.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС(
			ИсточникКопирования,
			Объект.Ссылка,
			УстановитьСвязьСХарактеристикамиАлкогольнойПродукции);
			
		КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = Ложь;
		УстановитьСвязьСХарактеристикамиАлкогольнойПродукции = Ложь;
		
	КонецЕсли;
	
	Если Не Элементы.СтраницаКарточкаНоменклатуры.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	НастроитьДоступностьБлокируемыхРеквизитов();
	КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(ТекущийОбъект, НастройкиВидимостиИЗаголовков);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Номенклатура", ПараметрыЗаписи, Объект.Ссылка);

	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ТекстВопроса =НСтр("ru = 'Зарегистрировать штрихкод?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗарегистрироватьШтрихкодЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Регистрация штрихкода'"));
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Элементы.Штрихкод.Видимость
				И Элементы.Штрихкод.Доступность Тогда
				Штрихкод = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр).Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ВидыНоменклатуры" Тогда
		
		ПриЗаписиВидаНоменклатуры();
	ИначеЕсли ИмяСобытия = "Запись_ШтрихкодыНоменклатуры"
		И Параметр = Объект.Ссылка Тогда
		
		ОбновитьГиперссылкиИКарточку();
	ИначеЕсли ИмяСобытия = "Запись_ТоварыДругогоКачества"
		И Параметр = Объект.Ссылка Тогда
		
		ОбработатьЗаписьТовараДругогоКачества();
		ОбновитьГиперссылкиИКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_ВариантыКомплектацииНоменклатуры"
		И Параметр.Свойство("ВладелецКомплекта")
		И Параметр.ВладелецКомплекта = Объект.Ссылка Тогда
		
		Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать")
			И Параметр.Свойство("Основной")
			И Параметр.Основной Тогда
			
			ВариантКомплектацииНоменклатуры = Параметр.Комплект;
			
		КонецЕсли;
		
		ОбновитьГиперссылкиИКарточку();
		
	ИначеЕсли ИмяСобытия = "Запись_ДрагоценныеМатериалы"
		И Параметр = Объект.Ссылка Тогда
		Прочитать();
		ОбновитьГиперссылкиИКарточку();
	ИначеЕсли ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Источник);
	ИначеЕсли ИмяСобытия = "Запись_УпаковкиНоменклатурыСписок"
		И (Параметр = Объект.Ссылка Или Параметр = Объект.НаборУпаковок) Тогда
		ОбновитьГиперссылкиИКарточку();
	ИначеЕсли ИмяСобытия = "Запись_СертификатНоменклатуры" Тогда
		ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Параметр);
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.ФайлКартинки = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
				
			ИначеЕсли ВыборФайлаОписания Тогда
				
				Объект.ФайлОписанияДляСайта = СсылкаНаФайл;
				ПутьКФайлуОписанию = СсылкаНаФайл;
				
			КонецЕсли;
			
			ОбновитьГиперссылкиИКарточку();
			
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ВключитьУдалитьВСегмент"
		И Параметр = Объект.Ссылка Тогда
		ОбновитьГиперссылкиИКарточку();
	ИначеЕсли ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		ОбновитьГиперссылкиИКарточку();
	ИначеЕсли ИмяСобытия = "ВыбранаУпаковкаДляОтчетов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Коэффициент") Тогда
			Объект.КоэффициентЕдиницыДляОтчетов = Параметр.Коэффициент;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_Запись_СертификатыНоменклатурыСписок(Сертификат)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	(ОбластиДействияСертификатовНоменклатуры.Номенклатура = &Номенклатура
	|			ИЛИ ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|				И ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	И НЕ ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ПометкаУдаления
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры = &СертификатНоменклатуры";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("СертификатНоменклатуры", Сертификат);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ОбновитьГиперссылкиИКарточку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗапись_ХарактеристикиНоменклатуры(Характеристика)

	Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика,"Владелец");
	
	Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры 
		И Владелец = Объект.Ссылка 
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВидНоменклатуры
		Или Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры 
		И Владелец = Объект.ВладелецХарактеристик Тогда
			ОбновитьГиперссылкиИКарточку();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыКарточкаНоменклатурыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.СтраницыКарточкаНоменклатуры.ПриСменеСтраницы");
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		ПоказатьСовет("ПереходКРедактированию");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСовет(ИмяСовета)

	ИмяНастройки = "ПоказатьСовет" + ИмяСовета;
	
	Если ЭтотОбъект[ИмяНастройки] Тогда
		
			Если ИмяСовета = "ПереходКРедактированию" Тогда 
				ТекстСообщения = НСтр("ru = 'Чтобы быстро перейти к редактированию реквизита, кликните дважды по нему в карточке.'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестное имя совета. Обратитесь к разработчикам программы.'");
			КонецЕсли;
			
			СписокКнопкок = Новый СписокЗначений;
			СписокКнопкок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Спасибо за совет'"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьСоветЗавершение", ЭтотОбъект, ИмяНастройки);
			
			ПоказатьВопрос(ОписаниеОповещения,ТекстСообщения, СписокКнопкок,,КодВозвратаДиалога.ОК, НСтр("ru = 'Полезный совет'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоветЗавершение(Результат, ИмяНастройки) Экспорт
	
	ПоказатьСоветЗавершениеСервер(ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоветЗавершениеСервер(Знач ИмяНастройки)
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Справочник.Номенклатура.Форма.ФормаЭлемента",
															ИмяНастройки,
															Ложь);
	ЭтотОбъект[ИмяНастройки] = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ВидНоменклатурыПриИзмененииНастрокаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
	Иначе
		Объект.НаборУпаковок = РеквизитыВидаНоменклатуры.НаборУпаковок;
		Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
		Объект.НоменклатураМногооборотнаяТара    = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара  = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокИндивидуальныйНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокОбщийНаборПриИзменении(Элемент)
	Объект.НаборУпаковок = Неопределено;
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	ИндивидуальныеУпаковки = Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	Если Объект.ИспользоватьУпаковки
		И Не ИндивидуальныеУпаковки  Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Объект.НаборУпаковок,
						Новый Структура("ЕдиницаИзмерения, ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов"));
						НеЗаполняемыеРеквизиты = "";
		Если Не ЗначениеЗаполнено(РеквизитыОбъекта.ЕдиницаДляОтчетов) Тогда
			НеЗаполняемыеРеквизиты = "ЕдиницаДляОтчетов, КоэффициентЕдиницыДляОтчетов";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта, , НеЗаполняемыеРеквизиты);
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если Не ЭтаФорма.Записать() Тогда
				
				ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
				ПоказатьПредупреждение(Неопределено, ТекстСообщения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЕдиницаИзмеренияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПоставляетсяВМногооборотнойТареПриИзменении(Элемент)
	
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураМногооборотнаяТараПриИзменении(Элемент)
	
	НоменклатураМногооборотнаяТараПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураМногооборотнаяТараПриИзмененииСервер()
	
	ИспользуютсяХарактеристикиМногооборотнойТары = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.ХарактеристикаМногооборотнаяТара);

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура", Объект.НоменклатураМногооборотнаяТара);
	СтруктураСтроки.Вставить("Характеристика", Объект.ХарактеристикаМногооборотнаяТара);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ИспользуютсяХарактеристикиМногооборотнойТары);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, Неопределено);

	Объект.НоменклатураМногооборотнаяТара = СтруктураСтроки.Номенклатура;
	Объект.ХарактеристикаМногооборотнаяТара = СтруктураСтроки.Характеристика;
	
	ИспользуютсяХарактеристикиМногооборотнойТары = СтруктураСтроки.ХарактеристикиИспользуются;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ИспользоватьУпаковки Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", Объект.Ссылка);
		СтруктураПараметров.Вставить("НаборУпаковок", Объект.НаборУпаковок);
		СтруктураПараметров.Вставить("ЕдиницаХранения", Объект.ЕдиницаИзмерения);
		СтруктураПараметров.Вставить("ЕдиницаДляОтчетов", Объект.ЕдиницаДляОтчетов);
		
		ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораЕдиницыДляОтчетов",
				СтруктураПараметров,
				Элемент, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВесИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаМожноУказыватьВДокументахПриИзменении(Элемент)
	МераМожноУказыватьВДокументахПриИзменении("Длина");
КонецПроцедуры

&НаКлиенте
Процедура ВесЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ВесЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Вес"));
КонецПроцедуры

&НаКлиенте
Процедура ОбъемЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ОбъемЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Объем"));
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ПлощадьЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Площадь"));
КонецПроцедуры

&НаКлиенте
Процедура ДлинаЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ДлинаЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Длина"));
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатие(ИмяПоля, СтандартнаяОбработка, ТипИзмеряемойВеличины)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЕдиницаИзмеренияНажатиеЗавершение", ЭтотОбъект, Новый Структура("ИмяПоля,ТипИзмеряемойВеличины", ИмяПоля,ТипИзмеряемойВеличины));
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипИзмеряемойВеличины", ТипИзмеряемойВеличины);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаВыбора",
				Новый Структура("Отбор,ТекущаяСтрока", Отбор, Объект[ИмяПоля]),
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Объект[ДополнительныеПараметры.ИмяПоля] = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	Мера = Строка(ДополнительныеПараметры.ТипИзмеряемойВеличины);
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%ЕдиницаИзмеренияМеры%", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСертификатовНоменклатурыПриИзменении(Элемент)
	ОбновитьГиперссылкиИКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ПринципалПриИзменении(Элемент)
	ПринципалПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ОбновитьГиперссылкиИКарточку();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Если ИспользоватьТоварныеКатегории Тогда
		ПроизводительПриИзмененииСервер()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЭтикеткаПриИзменении(Элемент)
	
	Объект.ШаблонЭтикетки = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = (ИспользоватьИндивидуальныйШаблонЭтикетки = 1);
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйШаблонЦенникПриИзменении(Элемент)
	
	Объект.ШаблонЦенника = ПредопределенноеЗначение("Справочник.ШаблоныЭтикетокИЦенников.ПустаяСсылка");
	Объект.ИспользоватьИндивидуальныйШаблонЦенника = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Описание",
		НСтр("ru = 'Дополнительная информация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогВыбораФайла.МножественныйВыбор = Ложь;
			ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
			
			Если ЗначениеЗаполнено(ПутьКФайлуОписанию) Тогда
				ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуОписанию;
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавлениеФайлаДиалогЗавершение",
			ЭтотОбъект,
			Новый Структура("ИмяРеквизита", "ДанныеФайлаHTML"));
			
			ДиалогВыбораФайла.Показать(ОписаниеОповещения);
			
	Иначе
		 ДобавитьФайлОписаниеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПросмотретьПрисоединенныйФайл("ФайлОписанияДляСайта", "ФайлОписанияДляСайта",
		НСтр("ru='Файл описания не выбран'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОписанияДляСайтаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ФайлОписанияДляСайта = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	ПутьКФайлуОписанию = "";
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
	Если ИмяЭлемента = "ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствами" Тогда
		
		ПараметрыФормы = Новый Структура("НоменклатураФильтраПоСвойствам", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиТоварыДругогоКачества" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ТоварыДругогоКачества.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиШтрихкодыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ШтрихкодыНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВариантыКомплектации"
		Или ИмяЭлемента = "ГиперссылкаПерейтиСоставНабора" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			
			Если ЗначениеЗаполнено(ВариантКомплектацииНоменклатуры) Тогда
				ПараметрыФормы = Новый Структура("Ключ", ВариантКомплектацииНоменклатуры);
				
				ПараметрыПереходаПоГиперссылке = Новый Структура;
				ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора");
				ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			Иначе
				Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать") Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					Отбор.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке = Новый Структура;
					ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.СоставНабора");
					ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				Иначе
					Отбор = Новый Структура;
					Отбор.Вставить("Владелец", Объект.Ссылка);
					ПараметрыФормы = Новый Структура("Отбор", Отбор);
					
					ПараметрыПереходаПоГиперссылке = Новый Структура;
					ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ХарактеристикиНоменклатуры.ФормаСписка");
					ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Владелец", Объект.Ссылка);
			ПараметрыФормы = Новый Структура("Отбор", Отбор);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ВариантыКомплектацииНоменклатуры.Форма.ФормаСписка");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиХарактеристикиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ХарактеристикиНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНоменклатуры" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУпаковкиНабора" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.НаборУпаковок);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрогнозыРасходаУпаковок" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ПрогнозыРасходаУпаковок.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРазмещениеНоменклатуры" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы",
			"РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСертификатыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.СертификатыНоменклатуры.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиДрагоценныеМатериалы" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.ДрагоценныеМатериалы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельности" Тогда
		
		Отбор = Новый Структура("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.НастройкаРаспределенияПоНаправлениямДеятельности.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСовместныеПродажи" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.СовместныеПродажи");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСегменты" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.НоменклатураСегмента.Форма.СегментыНоменклатурыПараметрическая");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностей" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.НастройкаСпособовОбеспеченияПотребностей.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиНастройкаПоддержанияЗапасов" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",	Отбор);
		ПараметрыФормы.Вставить("Источник",	"Номенклатура");
				
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.НастройкаПоддержанияЗапасов.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПроизводство" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "ОбщаяФорма.ПрименениеНоменклатурыВПроизводстве");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.ПрайсЛист.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПрайсЛистыПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",  Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.ПрайсЛистПоставщика.Форма.Форма");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатуры.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиков" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатурыПоставщиков.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСоглашения" Тогда
		
		Если Гиперссылка = "СоглашенияВыбрать"
			Или Гиперссылка = "СписокСоглашенийПоНоменклатуре" Тогда
			
			ОтборСоглашений = Новый Структура;
			ОтборСоглашений.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Действует"));
			ОтборСоглашений.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
			ОтборСоглашений.Вставить("Партнер", Объект.Принципал);
			
			МассивКонтрагентовДляОтбора = Новый Массив;
			МассивКонтрагентовДляОтбора.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			МассивКонтрагентовДляОтбора.Добавить(Объект.Контрагент);
			
			ОтборСоглашений.Вставить("Контрагент", Новый ФиксированныйМассив(МассивКонтрагентовДляОтбора));
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", ОтборСоглашений);
			ПараметрыФормы.Вставить("ВключитьОтборПоАгенсткойУслуге", Гиперссылка = "СписокСоглашенийПоНоменклатуре");
			
			ПараметрыСоздания = Новый Структура;
			ПараметрыСоздания.Вставить("АгентскаяУслугаНоменклатура", Объект.Ссылка);
			
			ПараметрыФормы.Вставить("ДополнительныеПараметры", ПараметрыСоздания);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.СоглашенияСПоставщиками.ФормаСписка");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			
		ИначеЕсли Гиперссылка = "СоглашенияСоздать" Тогда
			
			ЗначенияЗаполненияСоглашений = Новый Структура;
			ЗначенияЗаполненияСоглашений.Вставить("Партнер", Объект.Принципал);
			ЗначенияЗаполненияСоглашений.Вставить("Статус",  ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСПоставщиками.Действует"));
			ЗначенияЗаполненияСоглашений.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг"));
			ЗначенияЗаполненияСоглашений.Вставить("Контрагент", Объект.Контрагент);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияСоглашений);
			
			ПараметрыСоздания = Новый Структура;
			ПараметрыСоздания.Вставить("АгентскаяУслугаНоменклатура", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДополнительныеПараметры", ПараметрыСоздания);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.СоглашенияСПоставщиками.ФормаОбъекта");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			
		ИначеЕсли Гиперссылка = "СписокСоглашенийПоХарактеристикам" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
			
			ПараметрыПереходаПоГиперссылке = Новый Структура;
			ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.Номенклатура.Форма.СоглашенияСПоставщикамиПоХарактеристикам");
			ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		Если ПараметрыПереходаПоГиперссылке.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
			Оповестить("ФильтрПоАналогичнымСвойствам_Номенклатура", Объект.Ссылка, Объект.Ссылка);
		КонецЕсли;
		
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("НавигационнаяСсылка") Тогда
		ПерейтиПоНавигационнойСсылке(ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка);		
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНоменклатураСАналогичнымиСвойствамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиТоварыДругогоКачестваОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиШтрихкодыНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВариантыКомплектацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиХарактеристикиНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиУпаковкиНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиУпаковкиНабораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрогнозыРасходаУпаковокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиРазмещениеНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСертификатыНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиДрагоценныеМатериалыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиРаспределениеПродажПоНаправлениямДеятельностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСовместныеПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаПоддержанияЗапасовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаПоддержанияЗапасов");
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаСпособовОбеспеченияПотребностейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаСпособовОбеспеченияПотребностей");
		
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиНастройкаПередачиМатериаловВПроизводство(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат; // Для УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПроизводствоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрайсЛистКомпанииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиПрайсЛистыПоставщиковОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиИсторияИзмененияЦенПоставщиковОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиСоглашенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя, НавигационнаяСсылкаФорматированнойСтроки);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	НаименованиеЗаполнение = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальность(Команда)
	СтандартнаяОбработка = Ложь;
	
	АдресВременногоХранилищаТаблицаНайдено = ПроверитьУникальностьСформироватьНаименования(Ложь);
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаТаблицаНайдено) Тогда
		ПараметрыФормы = Новый Структура("АдресВременногоХранилищаТаблицаНайдено, Запись", АдресВременногоХранилищаТаблицаНайдено, Ложь);
		ОткрытьФорму("Справочник.Номенклатура.Форма.КонтрольУникальности",
			ПараметрыФормы,ЭтаФорма,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца,
			Новый ОписаниеОповещения("ПроверитьУникальностьЗавершение",
				ЭтаФорма),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru='Позиция номенклатуры уникальна'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальностьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Действие = "ВыбратьСуществующую" Тогда
		
		ПараметрыОповещения = Новый Структура("ЭтоНоваяНоменклатура", Ложь);
		Оповестить("Запись_Номенклатура",ПараметрыОповещения,Результат.Номенклатура);
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Результат.Номенклатура);
		Иначе
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат.Действие = "ПродолжитьЗапись" Тогда
		
		КонтрольУникальностиПередЗаписьюПроведен = Истина;
		
		Попытка
			ЭлементЗаписан = Записать();
		Исключение
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецПопытки;
		
		Если Не ЭлементЗаписан Тогда
			КонтрольУникальностиПередЗаписьюПроведен = Ложь;
			Возврат;
		КонецЕсли;
		
		Если ДляВыбора Тогда
			ОповеститьОВыборе(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КарточкаНоменклатурыОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.ФормаЭлемента.Элемент.КарточкаНоменклатуры.ОбработкаРасшифровки");
	
	Если Не ЗначениеЗаполнено(Расшифровка) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Истина;
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка) = Тип("Строка")
		Или ТипЗнч(Расшифровка) = ТипЗнч(Расшифровка) = Тип("ФорматированнаяСтрока") Тогда
		ИмяЭлемента = Расшифровка;
		Гиперссылка = "";
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ИмяЭлемента = Расшифровка.ИмяЭлемента;
		Гиперссылка = Расшифровка.Гиперссылка;
	Иначе
		ТекстИсключения = НСтр("ru = 'Неподдерживаемый тип параметры расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Если СтрНайти(ИмяЭлемента, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Если ЕстьПравоРедактирования Тогда
			Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
			
			РазвернутьСворачиваемуюГруппу(ИмяЭлемента);
			ТекущийЭлементВыбор = ИмяЭлемента;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(ИмяЭлемента) Тогда
				Если ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Строка")
					И ТипЗнч(Объект[ИмяЭлемента]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[ИмяЭлемента]) Тогда
					ПоказатьЗначение(,Объект[ИмяЭлемента]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Необрабатываемый тип параметр расшифровки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОблагаетсяНДСУПокупателяПриИзменении(Элемент)
	
	НастроитьФорму();
	ОбновитьГиперссылкиИКарточку();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьШтрихкодЗавершение(Знач Результат, Знач ПараметрКоманды) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("Штрихкод", Штрихкод);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Штрихкод = Неопределено;
		ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.ФормаЗаписи", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОбъемВДекалитрах(Команда)
	
	ОчиститьСообщения();
	
	РассчитатьОбъемВДекалитрахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОбъемВДекалитрахНаСервере()
	
	Если Не Объект.ОбъемИспользовать Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан объем для номенклатуры.'"),,"ОбъемИспользовать","Объект");
		Возврат;
	КонецЕсли;
	ОбъемЕдиницаИзмерения = ?(ЗначениеЗаполнено(Объект.ОбъемЕдиницаИзмерения), Объект.ОбъемЕдиницаИзмерения, Объект.ЕдиницаИзмерения);
	РеквизитыЕдиницыИзмеренияОбъем = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъемЕдиницаИзмерения, "Числитель, Знаменатель");
	
	Объект.ОбъемДАЛ = 100 * (Объект.ОбъемЧислитель * РеквизитыЕдиницыИзмеренияОбъем.Числитель) / 
		(Объект.ОбъемЗнаменатель * РеквизитыЕдиницыИзмеренияОбъем.Знаменатель);
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияВоВскрытойТареПриИзменении(Элемент)
	
	АлкогольнаяПродукцияВоВскрытойТареПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура АлкогольнаяПродукцияВоВскрытойТареПриИзмененииНаСервере()
	
	Если Объект.АлкогольнаяПродукцияВоВскрытойТаре Тогда
		Объект.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияРазливнойПродукции.Получить();
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.ФайлКартинки = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиУпаковкиНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиУпаковкиНабора(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиХарактеристикиНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНоменклатураСАналогичнымиСвойствами(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиШтрихкодыНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиФайлы(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиТоварыДругогоКачества(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрогнозыРасходаУпаковок(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиРазмещениеНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСовместныеПродажи(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСегменты(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиВариантыКомплектации(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаПоддержанияЗапасов(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаПоддержанияЗапасов");
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаСпособовОбеспеченияПотребностей(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Справочник.Номенклатура.Форма.ФормаЭлемента.Команда.ПерейтиНастройкаСпособовОбеспеченияПотребностей");
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиНастройкаПередачиМатериаловВПроизводство(Команда)
	
	Возврат; // Для УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПроизводство(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиСертификатыНоменклатуры(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиРаспределениеПродажПоНаправлениямДеятельности(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрайсЛистыПоставщиков(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиПрайсЛистКомпании(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиИсторияИзмененияЦенКомпании(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПерейтиИсторияИзмененияЦенПоставщиков(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.Форма.РазблокированиеРеквизитов",,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		Если Результат.Найти("ИспользоватьУпаковки") <> Неопределено Тогда
			Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Ложь;
			Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Ложь;
		КонецЕсли;
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПринципалПриИзмененииНаСервере()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Принципал, Объект.Контрагент);
	ОбновитьГиперссылкиИКарточку();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиВидаНоменклатуры()

	ОбновитьКешРеквизитовВидаНоменклатуры();
	ОбновитьГиперссылкиИКарточку();

КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере(ЗаполнениеПоИсточникуКопирования = Ложь)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	ОбновитьКешРеквизитовВидаНоменклатуры();
	
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(Объект,,,ЗаполнениеПоИсточникуКопирования);
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) И Модифицированность Тогда
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры) Тогда
			Объект.Наименование = "";
			ФормироватьРабочееНаименование = Истина;
		ИначеЕсли ЗначениеЗаполнено(НаименованиеЗаполнение) Тогда
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.Наименование = НаименованиеЗаполнение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
			Объект.НаименованиеПолное = "";
			ФормироватьНаименованиеДляПечати = Истина;
		ИначеЕсли ЗначениеЗаполнено(НаименованиеПолноеЗаполнение) Тогда 	
			// После обратного переключения на вид номенклатуры без шаблона возвращаем исходное наименование.
			Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		КонецЕсли;
		
		Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда 
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.АлкогольнаяПродукция
		И ЗначениеЗаполнено(РеквизитыЕГАИС) Тогда
		
		Объект.ОбъемДАЛ = РеквизитыЕГАИС.ОбъемЕГАИС / 10;
		Объект.Крепость = РеквизитыЕГАИС.КрепостьЕГАИС;
		Объект.ВидАлкогольнойПродукции = РеквизитыЕГАИС.ВидАлкогольнойПродукцииЕГАИС;
		
		Если ЗначениеЗаполнено(РеквизитыЕГАИС.ИмпортерЕГАИС) Тогда
			Объект.ПроизводительИмпортерДляДекларацийАлко = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЕГАИС.ИмпортерЕГАИС, "Контрагент");
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
			Объект.ПроизводительИмпортерДляДекларацийАлко = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЕГАИС.ПроизводительЕГАИС, "Контрагент");
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбновитьНастройкиРеквизитов();
	
	РеквизитыШаблоновЦенниковИЭтикеток = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры,
		"ШаблонЦенника, ШаблонЭтикетки");
	
	ИспользуетсяИндивидуальныйШаблонЦенника  = ЗначениеЗаполнено(Объект.ШаблонЦенника)
												И (Объект.ШаблонЦенника <> РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЦенника);
	ИспользуетсяИндивидуальныйШаблонЭтикетки = ЗначениеЗаполнено(Объект.ШаблонЭтикетки)
												И (Объект.ШаблонЭтикетки <> РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЭтикетки);
	
	Объект.ИспользоватьИндивидуальныйШаблонЦенника  = ИспользуетсяИндивидуальныйШаблонЦенника;
	объект.ИспользоватьИндивидуальныйШаблонЭтикетки = ИспользуетсяИндивидуальныйШаблонЭтикетки;
	
	Объект.ШаблонЦенника  = ?(ИспользуетсяИндивидуальныйШаблонЦенника, Объект.ШаблонЦенника,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	Объект.ШаблонЭтикетки = ?(ИспользуетсяИндивидуальныйШаблонЭтикетки, Объект.ШаблонЭтикетки,
		Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка());
	
	ОтборНастроекШаблонаЦенников = Новый Структура("ИмяРеквизита", "ШаблонЦенника");
	НастройкиШаблонаЦенников     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЦенников);
	
	Если НастройкиШаблонаЦенников.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЦенника
			И НастройкиШаблонаЦенников[0].ОбязателенДляЗаполнения
			И Не ЗначениеЗаполнено(РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЦенника) Тогда
			
			ИспользоватьИндивидуальныйШаблонЦенника = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЦенника = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЦенника Тогда
			ИспользоватьИндивидуальныйШаблонЦенника = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборНастроекШаблонаЭтикеток = Новый Структура("ИмяРеквизита", "ШаблонЭтикетки");
	НастройкиШаблонаЭтикеток     = ТаблицаНастроекРеквизитов.НайтиСтроки(ОтборНастроекШаблонаЭтикеток);
	
	Если НастройкиШаблонаЭтикеток.Количество() > 0 Тогда
		
		Если Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки
			И НастройкиШаблонаЭтикеток[0].ОбязателенДляЗаполнения
			И Не ЗначениеЗаполнено(РеквизитыШаблоновЦенниковИЭтикеток.ШаблонЭтикетки) Тогда
			
			ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
			Объект.ИспользоватьИндивидуальныйШаблонЭтикетки = Истина;
			
		ИначеЕсли Не Объект.ИспользоватьИндивидуальныйШаблонЭтикетки Тогда
			ИспользоватьИндивидуальныйШаблонЭтикетки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНастрокаФормы()

	ВидНоменклатурыПриИзмененииНаСервере();
	НастроитьФорму();

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКешРеквизитовВидаНоменклатуры()
	
	РеквизитыВидаНоменклатурыТепм = Новый Структура;
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонРабочегоНаименованияНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонНаименованияДляПечатиНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры", Ложь);
	
	РеквизитыВидаНоменклатурыТепм.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("СодержитДрагоценныеМатериалы", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСерии", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ВариантОказанияУслуг", Перечисления.ВариантыОказанияУслуг.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("НаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	РеквизитыВидаНоменклатурыТепм.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	РеквизитыВидаНоменклатурыТепм.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ИменаРеквизитов = "";
		Для Каждого КлючЗначение из РеквизитыВидаНоменклатурыТепм Цикл
			ИменаРеквизитов = ИменаРеквизитов + КлючЗначение.Ключ + ",";
		КонецЦикла;
		
		ИменаРеквизитов = Лев(ИменаРеквизитов,СтрДлина(ИменаРеквизитов) - 1);
		
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ИменаРеквизитов));
	Иначе
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(РеквизитыВидаНоменклатурыТепм);
	КонецЕсли;
	
	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьНеобходимостьФормированияНаименований(Форма)
	
	Форма.ФормироватьРабочееНаименование =
		Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры
		ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.Наименование)
		И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры));
	Форма.ФормироватьНаименованиеДляПечати =
		Форма.РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры
		ИЛИ (Не ЗначениеЗаполнено(Форма.Объект.НаименованиеПолное)
		И ЗначениеЗаполнено(Форма.РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры));

КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = НоменклатураКлиент.ФильтрФайловИзображений();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлОписаниеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Если ЗначениеЗаполнено(ПутьКФайлуОписанию) Тогда
			ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуОписанию;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаHTML"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		
		ВыборФайлаОписания = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
		ВыборФайлаОписания = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизводительПриИзмененииСервер()
		
	Объект.Марка = Справочники.Марки.ПолучитьМаркуПоУмолчанию(Объект.Производитель);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИИзображениями

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура КопироватьИндивидуальныеУпаковкиХарактеристикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КопироватьИндивидуальныеУпаковки = Результат.КопироватьИндивидуальныеУпаковки;
	КопироватьИндивидуальныеХарактеристики = Результат.КопироватьИндивидуальныеХарактеристики;
	КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = Результат.КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС;
	КонтрольУникальностиПередЗаписьюПроведен = Истина;
	НастройкиКопированияЗаданы = Истина;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		КонтрольУникальностиПередЗаписьюПроведен = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)

	// Настройки видимости элементов формы происходят в конце этой процедуры.
	// Если видимость элементов формы зависит от реквизитов формы и эти элементы 
	// не должны отображаться в карточке номенклатуры (первая вкладка формы), то настройки их видимости не обязательно 
	// заносить в процедуру СтруктураВидимостиЭлементовФормы(...). 
	// (Но все же лучше попытаться занести не добаляя никаких параметров для однородности)
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	#КонецОбласти
	
	Элементы.СтраницаКарточкаНоменклатуры.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	УстановитьДоступностьРедактированияНаименований(Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Элементы.Штрихкод.Видимость = Ложь;
	Иначе
		Элементы.Штрихкод.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПоставляетсяВМногооборотнойТаре.Доступность = Не Объект.ИспользоватьУпаковки
															И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	Если Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий) Тогда
		НастройкаИспользованияСерий = НСтр("ru = 'Не используются'");
	Иначе
		НастройкаИспользованияСерий = Строка(РеквизитыВидаНоменклатуры.НастройкаИспользованияСерий);
	КонецЕсли;
	
	Если РеквизитыВидаНоменклатуры.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме Тогда
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Элементы.Принципал.ОграничениеТипа = ТипСсылкаОрганизации;
	Иначе
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаПартнеры = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		
		Элементы.Принципал.ОграничениеТипа  = ТипСсылкаПартнеры;
		Элементы.Контрагент.ОграничениеТипа = ТипСсылкаКонтрагенты;
	КонецЕсли;
	
	ЗаполненВидНоменклатуры = ЗначениеЗаполнено(Объект.ВидНоменклатуры);
	
	Элементы.ТоварнаяКатегория.Доступность = ЗаполненВидНоменклатуры;
	
	Элементы.ЕдиницаИзмерения.Доступность = (ИспользованиеУпаковок = "ИндивидуальныйНабор"
											И Объект.ИспользоватьУпаковки)
											Или Не Объект.ИспользоватьУпаковки;
	
	ДоступностьШаблоновЭтикеток = ИспользоватьИндивидуальныйШаблонЭтикетки = 1;
	Элементы.ШаблонЭтикетки.Доступность = ДоступностьШаблоновЭтикеток;
	
	ДоступностьШаблоновЦенников = ИспользоватьИндивидуальныйШаблонЦенника = 1;
	Элементы.ШаблонЦенника.Доступность = ДоступностьШаблоновЦенников;
	
	Элементы.ГруппаДоступа.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.ОбъемДАЛ.Доступность = Не Объект.АлкогольнаяПродукцияВоВскрытойТаре;
	
	// Настройка видимости и заголовков
	
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	НастроитьЭлементыМеры("Вес",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Объем",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Площадь",ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	НастроитьЭлементыМеры("Длина",	ВидимостьЭлементов, ЗаголовкиЭлементов, РежимВидимостиПоказатьТолькоВажные);
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		ИмяЭлемента = ЭлементЗаголовок.Ключ;
		
		ЗаголовокЭлемента = ЗаголовокГиперссылки(ЭлементЗаголовок);
		
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЗаголовокЭлемента;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		Если СтрНачинаетсяС(ИмяЭлемента,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяЭлемента, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЗаголовокЭлемента, "(") - 1;
				
				Если СтрНайти(ЗаголовокЭлемента, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЗаголовокЭлемента, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЕдиницыИзмерения

&НаСервере
Процедура НастроитьЭлементыМеры(Мера, СтруктураВидимостиЭлементов, СтруктураЗаголовковЭлементов, РежимВидимостиПоказатьТолькоВажные)
	
	ДоступностьМеры = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура.Реквизиты[Мера + "ЕдиницаИзмерения"]);
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		ВидимостьМеры = Объект[Мера + "Использовать"];
		Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
	Иначе
		
		ТипЕдиницы = "";
		
		Если Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы)
			И Мера = ТипЕдиницы Тогда
			ДоступностьМеры = Ложь;
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Ложь;
		Иначе
			
			Элементы[Мера + "Использовать"].Доступность = ДоступностьМеры;
			ВидимостьМеры = Объект[Мера + "Использовать"] И СтруктураВидимостиЭлементов[Мера + "Использовать"];
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьМеры = ВидимостьМеры;
	
	СтруктураВидимостиЭлементов.Вставить(Мера + "Отступ", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Знаменатель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Надпись", 						ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "Числитель", 					ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "ЕдиницаИзмерения", 			ВидимостьМеры);
	СтруктураВидимостиЭлементов.Вставить(Мера + "МожноУказыватьВДокументах", 	ВидимостьМеры);
	
	Если Мера = "Вес" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% весит'");
	ИначеЕсли Мера = "Объем" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% занимает объем'");
	ИначеЕсли Мера = "Площадь" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% имеет площадь'");
	ИначеЕсли Мера = "Длина" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% имеет длину'");
	КонецЕсли;
	
	ТекстЗаголовкаНадписи = СтрЗаменить(ТекстЗаголовкаНадписи, "%ЕдиницаИзмерения%", Строка(Объект.ЕдиницаИзмерения));
	СтруктураЗаголовковЭлементов.Вставить(Мера + "Надпись", ТекстЗаголовкаНадписи);
	
	ТекстПредставленияЗначения = НСтр("ru = 'Можно указывать количество в %ЕдиницаИзмеренияМеры% в документах'");
	ТекстПредставленияЗначения = СтрЗаменить(ТекстПредставленияЗначения, "%ЕдиницаИзмеренияМеры%", Строка(Объект[Мера + "ЕдиницаИзмерения"]));
	
	Элементы[Мера + "МожноУказыватьВДокументах"].Доступность = ДоступностьМеры;
	Элементы[Мера + "МожноУказыватьВДокументах"].СписокВыбора[1].Представление = ТекстПредставленияЗначения;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьМожноУказыватьВДокументахВСтроку(Мера)
	
	Если Объект[Мера + "МожноУказыватьВДокументах"] Тогда
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах";
	Иначе
		ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "Справочно";
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура МераМожноУказыватьВДокументахПриИзменении(Мера)
	
	Если ЭтотОбъект[Мера + "МожноУказыватьВДокументахСтрока"] = "МожноВыбиратьВДокументах" Тогда
		Объект[Мера + "МожноУказыватьВДокументах"] = Истина;
	Иначе
		Объект[Мера + "МожноУказыватьВДокументах"] = Ложь;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура МераИспользоватьПриИзмененииСервер(Мера)
	
	Если Объект[Мера + "Использовать"] Тогда
		Объект[Мера + "Знаменатель"] = 1;
		Объект[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер()
	Если Объект.КоэффициентЕдиницыДляОтчетов = 1 Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	ТипЕдиницы = "";
	
	ЭтоМернаяЕдиница = Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения, ТипЕдиницы);
	Справочники.Номенклатура.ОтработатьЛогикуЗаполненияМеры(Объект, ЭтоМернаяЕдиница, ТипЕдиницы, ТипЕдиницы);
	
	Если ЭтоМернаяЕдиница Тогда
		Объект.ПоставляетсяВМногооборотнойТаре   = Ложь;
	КонецЕсли;
		
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУникальности

&НаСервере
Процедура ПроверитьЗаполнениеУникальныхРеквизитов(Отказ)
	
	ТекстОшибки = НСтр("ru='Поле ""%ИмяРеквизита%"" не заполнено'");
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", НСтр("ru = 'Вид номенклатуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроекРеквизитов Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита = "ВидНоменклатуры"
			Или Не СтрокаТаблицы.ОбязателенДляЗаполнения
			Или Не СтрокаТаблицы.Уникален Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ?(СтрокаТаблицы.ЭтоДопРеквизит, ЭтаФорма[СтрокаТаблицы.ПутьКДанным], Объект[СтрокаТаблицы.ИмяРеквизита]);
		ПутьКРеквизиту = СтрокаТаблицы.ПутьКДанным;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", СтрокаТаблицы.Представление);
			
			Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПутьКРеквизиту,,Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект." + СтрокаТаблицы.ИмяРеквизита,,Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(Отказ)
	
	ТекстОшибки = НСтр("ru='Поле ""%ИмяРеквизита%"" не заполнено'");
	
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		
		Отказ = Истина; 
		
		Возврат;
		
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Справочники.Номенклатура.НепроверяемыеРеквизиты(Объект, РеквизитыВидаНоменклатуры);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроекРеквизитов Цикл
		
		Если Не СтрокаТаблицы.ОбязателенДляЗаполнения
			Или СтрокаТаблицы.ИмяРеквизита = "ВидНоменклатуры"
			Или (СтрокаТаблицы.ОбязателенДляЗаполнения
				И СтрокаТаблицы.Уникален)
			Или (Не СтрокаТаблицы.ЭтоДопРеквизит
			 И НепроверяемыеРеквизиты.Найти(СтрокаТаблицы.ИмяРеквизита) <> Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеРеквизита = ?(СтрокаТаблицы.ЭтоДопРеквизит, ЭтаФорма[СтрокаТаблицы.ПутьКДанным], Объект[СтрокаТаблицы.ИмяРеквизита]);
		ПутьКРеквизиту = СтрокаТаблицы.ПутьКДанным;
		
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			
			ТекстСообщения = СтрЗаменить(ТекстОшибки, "%ИмяРеквизита%", СтрокаТаблицы.Представление);
						
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлКартинки" Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(АдресКартинки)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрокаТаблицы.ИмяРеквизита = "ФайлОписанияДляСайта" Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Ссылка)
						И Не ЗначениеЗаполнено(ПутьКФайлуОписанию)
					Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКРеквизиту, , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
						
			Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПутьКРеквизиту,,Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект." + СтрокаТаблицы.ИмяРеквизита,,Отказ);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
			
	Если Отказ И Не РежимВидимостиПоказатьТолькоВажные Тогда
		НастройкаВидимостиФормы = "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ЗначениеЗаполнено(Объект.ГруппаДоступа) Тогда
		
		Если Не Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Новый Структура("ГруппаДоступа, Ссылка", Объект.ГруппаДоступа, Объект.Ссылка)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Недостаточно прав на создание номенклатуры по этой группе доступа %ГруппаДоступа%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
			
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'В виде номенклатуры ""%ГруппаДоступа%"" не указана группа доступа. Невозможно создать номенклатуру этого вида.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ГруппаДоступа%", Объект.ГруппаДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидНоменклатуры",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(ВидНоменклатуры)
	
	ИдентичныеВидыНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыДляКонтроля.ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Ссылка = &ВидНоменклатуры
	|	И РеквизитыДляКонтроля.Уникален
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыДляКонтроля.Ссылка КАК ВидНоменклатуры,
	|	РеквизитыДляКонтроля.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыДляКонтроля.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	РеквизитыДляКонтроля.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыДляКонтроляНоменклатуры КАК РеквизитыДляКонтроля
	|ГДЕ
	|	РеквизитыДляКонтроля.Ссылка.ТипНоменклатуры = &ТипНоменклатуры
	|	И РеквизитыДляКонтроля.Уникален
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНоменклатуры,
	|	ИмяРеквизита,
	|	ЭтоДопРеквизит,
	|	Свойство
	|ИТОГИ ПО
	|	ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТипНоменклатуры", Объект.ТипНоменклатуры);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитовТекВидаНоменклатуры = РезультатыЗапроса[0].Выгрузить();
	КолРеквизитовДляКонтроля = ТаблицаРеквизитовТекВидаНоменклатуры.Количество();
	
	РеквизитыВидовНоменклатуры   = РезультатыЗапроса[1];
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
	
	ВыборкаПоВиду = РеквизитыВидовНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВиду.Следующий() Цикл
		
		СоответствуетУсловиям = Истина;
		
		ВыборкаПоРеквизитам = ВыборкаПоВиду.Выбрать();
		КолРеквизитовВида = ВыборкаПоРеквизитам.Количество();
		
		Если КолРеквизитовВида = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КолРеквизитовВида <> КолРеквизитовДляКонтроля Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоРеквизитам);
			
			Если ТаблицаРеквизитовТекВидаНоменклатуры.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СоответствуетУсловиям = Ложь;
			КонецЕсли;
			
			Если Не СоответствуетУсловиям Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентичныеВидыНоменклатуры.Добавить(ВыборкаПоВиду.ВидНоменклатуры);
		
	КонецЦикла;
	
	Возврат ИдентичныеВидыНоменклатуры;
	
КонецФункции

&НаСервере
Процедура ПроверитьУникальностьЭлементаПоРеквизитам()
	
	СтрокиУникальных = ТаблицаНастроекРеквизитов.НайтиСтроки(Новый Структура("Уникален", Истина));
	
	Если СтрокиУникальных.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиУникальных Цикл
				
		ЕстьУникальные = Истина;
		
		Если СтрокаТаблицы.ЭтоДопРеквизит Тогда
			
			СтрокаТаблицы.Значение = ЭтаФорма[СтрокаТаблицы.ПутьКДанным];
			
		Иначе
			
			Если СтрокаТаблицы.ИмяРеквизита = "ВидНоменклатуры" Тогда
				СтрокаТаблицы.Значение = Объект.ВидНоменклатуры;
			Иначе
				СтрокаТаблицы.Значение = Объект[СтрокаТаблицы.ПутьКДанным];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаНастроекРеквизитов.Выгрузить(СтрокиУникальных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.ВидНоменклатуры);
	
	ИмяТаблицы = "ТаблицаНоменклатура";
	
	ТекстОсновногоЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	" + ИмяТаблицы + ".Ссылка КАК Номенклатура,
	|	Истина КАК НайденоПоДопРеквизитам
	|ИЗ
	|	Справочник.Номенклатура КАК " + ИмяТаблицы;
	
	ТекстУсловия = "
	|ГДЕ
	|	(Не " + ИмяТаблицы + ".ЭтоГруппа)";
	
	// Генерируем текст условия запроса по реквизитам номенклатуры.
	МассивСтрокРеквизитов = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
	
	Для Каждого СтрокаУсловия Из МассивСтрокРеквизитов Цикл
		
		Если СтрокаУсловия.ИмяРеквизита = "ВидНоменклатуры" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУсловия = ТекстУсловия +
		"
		|  И " + ИмяТаблицы + "." + СтрокаУсловия.ИмяРеквизита + " = &" + СтрокаУсловия.ПутьКДанным;
		
		Запрос.УстановитьПараметр(СтрокаУсловия.ПутьКДанным, СтрокаУсловия.Значение);
		
	КонецЦикла;
	
	// Добавить условие по видам номенклатуры с идентичными настройками контроля уникальности.
	ВидыИдентичныеПоНастройкам = ВидыНоменклатурыИдентичныеПоНастройкамКонтроляУникальности(Объект.ВидНоменклатуры);
	ТекстУсловия = ТекстУсловия +
	"
	|  И " + ИмяТаблицы + ".ВидНоменклатуры В (&ВидыНоменклатуры)";
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыИдентичныеПоНастройкам);
	
	// Генерируем текст условия запроса по дополнительным реквизитам.
	ТекстЗапроса = ТекстОсновногоЗапроса;
	СчетчикУсловий = 1;
	
	МассивСтрокДопРеквизитов = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
	Для Каждого СтрокаУсловияДопРеквизита Из МассивСтрокДопРеквизитов Цикл
		
		ИмяТаблицыСУсловием = ИмяТаблицы + "СУсловиемПоДопРеквизиту_" + СчетчикУсловий;
		
		ТекстУсловия = ТекстУсловия +
		"
		|  И " + ИмяТаблицыСУсловием + ".Свойство = &Свойство_" + СтрокаУсловияДопРеквизита.ПутьКДанным + 
		"
		|  И " + ИмяТаблицыСУсловием + ".Значение = &Значение_" + СтрокаУсловияДопРеквизита.ПутьКДанным;
		
		Запрос.УстановитьПараметр("Свойство_" + СтрокаУсловияДопРеквизита.ПутьКДанным, СтрокаУсловияДопРеквизита.Свойство);
		Запрос.УстановитьПараметр("Значение_" + СтрокаУсловияДопРеквизита.ПутьКДанным, СтрокаУсловияДопРеквизита.Значение);
		
		ТекстСоединения = "
		| ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК " + ИмяТаблицыСУсловием + "
		| ПО " + ИмяТаблицы + ".Ссылка = " + ИмяТаблицыСУсловием + ".Ссылка";
		
		ТекстОсновногоЗапроса = ТекстОсновногоЗапроса + ТекстСоединения;
		СчетчикУсловий = СчетчикУсловий + 1;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстОсновногоЗапроса + ТекстУсловия;
	
	ТаблицаНайдено.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьЭлементаПоШтрихкоду()
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура                   КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование      КАК Наименование
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Отбор.Номенклатура = Выборка.Номенклатура;
		
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
			НоваяСтрока.НайденоПоШтрихкоду = Истина;
			
		Иначе
			
			НайденныеСтроки[0].НайденоПоШтрихкоду = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьПоРабочемуНаименованию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка <> &Ссылка
	|	И Номенклатура.Наименование = &Наименование
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка",       Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("Номенклатура");
	
	Пока Выборка.Следующий() Цикл
		
		Отбор.Номенклатура = Выборка.Номенклатура;
		
		НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ТаблицаНайдено.Добавить();
			
			НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
			НоваяСтрока.НайденоПоНаименованию = Истина;
			
		Иначе
			
			НайденныеСтроки[0].НайденоПоНаименованию = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьСформироватьНаименования(ЭтоЗапись, Отказ = Ложь)

	ПроверитьЗаполнениеУникальныхРеквизитов(Отказ);
		
	Если Не Отказ Тогда
		ПроверитьВозможностьСозданияИзмененияЭлементаПоГруппеДоступа(Отказ);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТаблицаНайдено.Очистить();
	
	Если Константы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Получить()
		И Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не КонтрольУникальностиПередЗаписьюПроведен Тогда
		
		ПроверитьУникальностьЭлементаПоРеквизитам();
		
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ПроверитьУникальностьЭлементаПоШтрихкоду();
		КонецЕсли;
	КонецЕсли;	
	
	Если ЭтоЗапись Тогда
		Если ФормироватьРабочееНаименование
			И ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Оба");
		ИначеЕсли ФормироватьРабочееНаименование Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
		ИначеЕсли ФормироватьНаименованиеДляПечати Тогда
			ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить() Тогда
		ПроверитьУникальностьПоРабочемуНаименованию();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Наименование) И ЭтоЗапись Тогда
		ТекстСообщения = НСтр("ru='Поле ""Рабочее наименование"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Наименование", "Объект"); 
		Отказ = Истина;
	КонецЕсли;
	
	ТаблицаНайдено.Сортировать("Номенклатура");
	Если ТаблицаНайдено.Количество()>0 Тогда
		Отказ = Истина;
		Возврат ПоместитьВоВременноеХранилище(ТаблицаНайдено.Выгрузить(),УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьДоступностьБлокируемыхРеквизитов()

	Элементы.ИспользоватьУпаковки.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокИндивидуальныйНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковокОбщийНабор.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	Элементы.НаборУпаковок.ТолькоПросмотр = Объект.ИспользоватьУпаковки;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяГиперссылкиПоИмениКоманды(ИмяКоманды)
	
	ИмяГиперссылки = ИмяКоманды;
	ИмяГиперссылки = СтрЗаменить(ИмяГиперссылки, "Команда", "Гиперссылка");
	
	Возврат ИмяГиперссылки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПараметрам()
	
	Если Параметры.Свойство("ВидАлкогольнойПродукцииЕГАИС")
		Или Параметры.Свойство("Параметры.ИмпортерЕГАИС")
		Или Параметры.Свойство("Параметры.ОбъемЕГАИС")
		Или Параметры.Свойство("Параметры.ПроизводительЕГАИС")
		Или Параметры.Свойство("Параметры.КрепостьЕГАИС") Тогда
		
		РеквизитыЕГАИССтруктура = Новый Структура();
		РеквизитыЕГАИССтруктура.Вставить("ВидАлкогольнойПродукцииЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ИмпортерЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ПроизводительЕГАИС");
		РеквизитыЕГАИССтруктура.Вставить("ОбъемЕГАИС", 0);
		РеквизитыЕГАИССтруктура.Вставить("КрепостьЕГАИС", 0);
		
		ЗаполнитьЗначенияСвойств(РеквизитыЕГАИССтруктура, Параметры);
		
		РеквизитыЕГАИС = Новый ФиксированнаяСтруктура(РеквизитыЕГАИССтруктура);
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыНоменклатуры.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукциейИВидом
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|	И ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыНоменклатуры.Ссылка) КАК Количество
		|ПОМЕСТИТЬ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукцией
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ТаблицаКоличество.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукциейИВидом КАК ТаблицаКоличество
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА
		|	И ВидыНоменклатуры.ВидАлкогольнойПродукции = &ВидАлкогольнойПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ТаблицаКоличество.Количество КАК Количество
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоВидовНоменклатурыСАлкогольнойПродукцией КАК ТаблицаКоличество
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыНоменклатуры.АлкогольнаяПродукция = ИСТИНА";
		Запрос.УстановитьПараметр("ВидАлкогольнойПродукции", РеквизитыЕГАИССтруктура.ВидАлкогольнойПродукцииЕГАИС);
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаПоВидуАлкогольнойПродукции = Результат[2].Выбрать();
		ВыборкаПоАлкогольнойПродукции = Результат[3].Выбрать();
		
		Если ВыборкаПоВидуАлкогольнойПродукции.Следующий() Тогда
			Если ВыборкаПоВидуАлкогольнойПродукции.Количество = 1 Тогда
				Объект.ВидНоменклатуры = ВыборкаПоВидуАлкогольнойПродукции.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
			И ВыборкаПоАлкогольнойПродукции.Следующий() Тогда
			Если ВыборкаПоАлкогольнойПродукции.Количество = 1 Тогда
				Объект.ВидНоменклатуры = ВыборкаПоАлкогольнойПродукции.Ссылка;
			КонецЕсли;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		
		ЕстьПравоРедактирования = Истина;
		
		// Новый элемент номенклатуры создан копированием, реквизиты формы заполняются
		// значениями реквизитов параметра копирования.
		ИсточникКопирования = Параметры.ЗначениеКопирования;
		ЗаполнитьЗначенияСвойств(Объект, ИсточникКопирования, , "ГруппаДоступа, ФайлКартинки, ФайлОписанияДляСайта, 
		    |ДополнительныеРеквизиты, ДрагоценныеМатериалы, Код, ПометкаУдаления");
		
		Объект.ДополнительныеРеквизиты.Загрузить(ИсточникКопирования.ДополнительныеРеквизиты.Выгрузить());
		
		СтруктураРеквизитовОбъектаКопирования = Новый Структура;
		СтруктураРеквизитовОбъектаКопирования.Вставить("ОбъектКопирования",          ИсточникКопирования);
		СтруктураРеквизитовОбъектаКопирования.Вставить("Наименование",               Объект.Наименование);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ВидНоменклатуры",            Объект.ВидНоменклатуры);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ИспользоватьУпаковки",       Объект.ИспользоватьУпаковки);
		СтруктураРеквизитовОбъектаКопирования.Вставить("НаборУпаковок",              Объект.НаборУпаковок);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
		СтруктураРеквизитовОбъектаКопирования.Вставить("ТипНоменклатуры",            Объект.ТипНоменклатуры);
		
		РеквизитыОбъектаКопирования = Новый ФиксированнаяСтруктура(СтруктураРеквизитовОбъектаКопирования);
		
		НаименованиеЗаполнение       = Объект.Наименование;
		НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное;
		ВидНоменклатуры              = Объект.ВидНоменклатуры;
		ГруппаНоменклатуры           = Объект.Родитель;
		
		Если Параметры.Свойство("СозданиеНекачественногоТовара") Тогда
			
			СозданиеНекачественногоТовара = Истина;
			Автозаголовок = Ложь;
			
			ТекстЗаголовка = НСтр("ru='Создание номенклатуры для испорченного товара ""%НаименованиеТовара%"".'");
			Заголовок = СтрЗаменить(ТекстЗаголовка, "%НаименованиеТовара%", Строка(Объект.Наименование));
			
			Объект.Качество        = Параметры.СозданиеНекачественногоТовара;
			Объект.СкладскаяГруппа = Справочники.СкладскиеГруппыНоменклатуры.ПустаяСсылка();
			Объект.ЦеноваяГруппа   = Справочники.ЦеновыеГруппы.ПустаяСсылка();
			Объект.ФайлКартинки    = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
			
			НаименованиеЗаполнение       = Объект.Наименование + ", " + Строка(Объект.Качество);
			НаименованиеПолноеЗаполнение = Объект.НаименованиеПолное + ", " + Строка(Объект.Качество);
			
		ИначеЕсли  Параметры.Свойство("НаименованиеНоменклатурыПоставщика") 
			И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыПоставщика) Тогда
			
			НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыПоставщика;
			
		ИначеЕсли Параметры.Свойство("НаименованиеНоменклатурыЕГАИС")
			Или Параметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") Тогда 
			
			Если Параметры.Свойство("НаименованиеНоменклатурыЕГАИС") 
				И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
			
			Если Параметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") 
				И ЗначениеЗаполнено(Параметры.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеПолноеЗаполнение = Параметры.ПолноеНаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Свойство("АртикулНоменклатурыПоставщика") 
			И ЗначениеЗаполнено(Параметры.АртикулНоменклатурыПоставщика) Тогда
			
			Объект.Артикул = Параметры.АртикулНоменклатурыПоставщика;
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ИсточникКопирования.ФайлКартинки)
			Или ЗначениеЗаполнено(ИсточникКопирования.ФайлОписанияДляСайта) Тогда
			
			СкопироватьПрисоединенныеФайлы(ИсточникКопирования.ФайлКартинки, ИсточникКопирования.ФайлОписанияДляСайта);
			
		КонецЕсли;
		
		ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования = 
			(РеквизитыОбъектаКопирования.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		
		Объект.Наименование       = НаименованиеЗаполнение;
		Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		
		ЕстьИндивидуальныеУпаковкиВОбъектеКопирования = РеквизитыОбъектаКопирования.ИспользоватьУпаковки 
			И (РеквизитыОбъектаКопирования.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура";
		Запрос.УстановитьПараметр("Номенклатура", ИсточникКопирования);
		
		ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования = Не Запрос.Выполнить().Пустой();
		
		КопироватьИндивидуальныеУпаковки       = ЕстьИндивидуальныеУпаковкиВОбъектеКопирования;
		КопироватьИндивидуальныеХарактеристики = ЕстьИндивидуальныеХарактеристикиВОбъектеКопирования;
		КопироватьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИС = ЕстьСвязьСКлассификаторомАлкогольнойПродукцииЕГАИСВОбъектеКопирования;
		
		ВидНоменклатурыПриИзмененииНаСервере(Истина);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		СправочникОбъект.Заполнить(Неопределено);
		ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		
		ЕстьПравоРедактирования = Истина;
		
		// Создается новый элемент номенклатуры.
		Параметры.Свойство("ВидНоменклатуры", ВидНоменклатуры);
		Параметры.Свойство("Родитель", ГруппаНоменклатуры);
		Если ВидНоменклатуры = Неопределено
			И ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Объект.ВидНоменклатуры;
		ИначеЕсли ВидНоменклатуры = Неопределено
			И Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		Если ГруппаНоменклатуры = Неопределено Тогда
			ГруппаНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		Если Параметры.Свойство("ТекстЗаполнения")
			И ЗначениеЗаполнено(Параметры.ТекстЗаполнения) Тогда
			НаименованиеЗаполнение = Параметры.ТекстЗаполнения;
		КонецЕсли;

		Если Параметры.Свойство("НаименованиеНоменклатурыПоставщика")
			И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыПоставщика) Тогда
			НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыПоставщика;
		КонецЕсли;
		
		
		Если Параметры.Свойство("АртикулНоменклатурыПоставщика")
			И ЗначениеЗаполнено(Параметры.АртикулНоменклатурыПоставщика) Тогда
			Объект.Артикул = Параметры.АртикулНоменклатурыПоставщика;
		КонецЕсли;
		
		Если Параметры.Свойство("НаименованиеНоменклатурыЕГАИС")
			Или Параметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") Тогда 
			
			Если Параметры.Свойство("НаименованиеНоменклатурыЕГАИС") 
				И ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеЗаполнение = Параметры.НаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
			
			Если Параметры.Свойство("ПолноеНаименованиеНоменклатурыЕГАИС") 
				И ЗначениеЗаполнено(Параметры.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
				НаименованиеПолноеЗаполнение = Параметры.ПолноеНаименованиеНоменклатурыЕГАИС;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.Наименование       = НаименованиеЗаполнение;
		Объект.НаименованиеПолное = НаименованиеПолноеЗаполнение;
		
		Если Параметры.Свойство("АртикулНоменклатурыПоставщика") 
			И ЗначениеЗаполнено(Параметры.АртикулНоменклатурыПоставщика) Тогда
			
			Объект.Артикул = Параметры.АртикулНоменклатурыПоставщика;
			
		КонецЕсли;
		
		РеквизитыОбъектаКопирования = Неопределено;
		
		Объект.Качество  = Перечисления.ГрадацииКачества.Новый;
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		
		ВидНоменклатурыГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ЭтоГруппа");
		
		Если ВидНоменклатуры.Пустая()
			Или ВидНоменклатурыГруппа Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ВидНоменклатурыПоУмолчанию();
		КонецЕсли;
			
		Объект.Родитель        = ГруппаНоменклатуры;
		Объект.ВидНоменклатуры = ВидНоменклатуры;
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
			Если Параметры.Свойство("АдресТаблицыПараметров") Тогда
				
				СтруктураПарметровДереваОтборов = Новый Структура("ВидНоменклатуры, АдресТаблицыСопоставления");
				СтруктураПарметровДереваОтборов.ВидНоменклатуры           = ВидНоменклатуры;
				СтруктураПарметровДереваОтборов.АдресТаблицыСопоставления = Параметры.АдресТаблицыСопоставления;
				
				АдресТаблицы = Параметры.АдресТаблицыПараметров;
				
			КонецЕсли;
			
			ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
			ТаблицаДопРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255)));
			
			ВидНоменклатурыПриИзмененииНаСервере();
			
			Если ЗначениеЗаполнено(АдресТаблицы) Тогда
				
				ЕстьЗначенияБыстрогоОтбора = Истина;
				
				ТаблицаЗначенийРеквизитов = ПолучитьИзВременногоХранилища(АдресТаблицы);
				МассивРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
				
				Для Каждого ЭлементМассива Из МассивРеквизитов Цикл
					Объект[ЭлементМассива.ИмяРеквизита] = ЭлементМассива.ЗначениеОтбора;
				КонецЦикла;
				
				МассивДопРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
				
				Если ИспользоватьДополнительныеРеквизитыИСведения И МассивДопРеквизитов.Количество() > 0 Тогда
					
					Для Каждого ЭлементМассива Из МассивДопРеквизитов Цикл
						
						НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
						НоваяСтрока.ИмяРеквизита = ЭлементМассива.ИмяРеквизита;
						
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ТаблицаДопРеквизитов.ИмяРеквизита
					|ПОМЕСТИТЬ ТаблицаИменСвойств
					|ИЗ
					|	&ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаИменСвойств.ИмяРеквизита КАК ИмяРеквизита,
					|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство
					|ИЗ
					|	ТаблицаИменСвойств КАК ТаблицаИменСвойств
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
					|		ПО ТаблицаИменСвойств.ИмяРеквизита = НаборыДополнительныхРеквизитов.Свойство.Наименование
					|ГДЕ
					|	НаборыДополнительныхРеквизитов.Ссылка = &НаборРеквизитов";
					
					Запрос.УстановитьПараметр("ТаблицаДопРеквизитов", ТаблицаДопРеквизитов);
					Запрос.УстановитьПараметр("НаборРеквизитов",      РеквизитыВидаНоменклатуры.НаборСвойств);
					
					ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
					СтруктураПоиска = Новый Структура("ИмяРеквизита");
					
					Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
						
						СтруктураПоискаЗначения = Новый Структура("Свойство", СтрокаТаблицы.Свойство);
						МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоискаЗначения);
						ОписаниеСвойства = МассивСтрок[0];
						ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
						
						СтруктураПоиска.ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
						МассивСтрокЗначение = ТаблицаЗначенийРеквизитов.НайтиСтроки(СтруктураПоиска);
						ЗначениеРеквизита = МассивСтрокЗначение[0].ЗначениеОтбора;
						ЭтаФорма[ПутьКДанным] = ЗначениеРеквизита;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбновитьКешРеквизитовВидаНоменклатуры();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПрисоединенныеФайлы(ФайлКартинки, ФайлОписание)
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлКартинки);
		
		ДанныеФайлаКартинки = Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайлаКартинки, ДанныеПрисоединенногоФайла);
		
		ДанныеФайлаКартинки.ИмяБезРасширения = СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла, "." + ДанныеПрисоединенногоФайла.Расширение, "");
		ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		
		// Конвертация присоединенного файла "старого" формата
		ПреобразоватьКартинкуВДвоичныеДанные(ДвоичныеДанныеФайла);
		
		Если Не ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		АдресКартинки = АдресФайлаВХранилище;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФайлОписание) Тогда
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ФайлОписание);
		
		ДанныеФайлаHTML = Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайлаHTML, ДанныеПрисоединенногоФайла);
		
		ДанныеФайлаHTML.ИмяБезРасширения = СтрЗаменить(ДанныеПрисоединенногоФайла.ИмяФайла, "." + ДанныеПрисоединенногоФайла.Расширение, "");
		
		ДвоичныеДанныеФайла  = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		АдресОписанияHTML    = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		ПутьКФайлуОписанию   = ФайлОписание.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьКартинкуВДвоичныеДанные(ОбъектКартинка)
	
	Если ТипЗнч(ОбъектКартинка) <> Тип("Картинка") Тогда
		Возврат;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ОбъектКартинка.Записать(ВременныйФайл);
	
	ОбъектКартинка = Новый ДвоичныеДанные(ВременныйФайл);
	
	ИмяСобытия = НСтр("ru = 'Копирование номенклатуры.Удаление временного файла.'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Попытка
		УдалитьФайлы(ВременныйФайл);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьТовараДругогоКачества()
			 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпрНоменклатура.ЕстьТоварыДругогоКачества КАК ЕстьТоварыДругогоКачестваВБазе,
	|	ВЫБОР
	|		КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТоварыДругогоКачестваПоФакту
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО СпрНоменклатура.Ссылка = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И СпрНоменклатура.ЕстьТоварыДругогоКачества <> ВЫБОР
	|			КОГДА ТоварыДругогоКачества.НоменклатураБрак ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Номенклатура",Объект.Ссылка);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Объект.ЕстьТоварыДругогоКачества <> Выборка.ЕстьТоварыДругогоКачестваПоФакту Тогда
			Объект.ЕстьТоварыДругогоКачества = Выборка.ЕстьТоварыДругогоКачестваПоФакту;
		КонецЕсли;
		
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВариантФормирования = "Рабочее" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.Наименование = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		СправочникОбъект.Наименование = Объект.Наименование;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечати" ИЛИ ВариантФормирования = "Оба" Тогда
		Объект.НаименованиеПолное = НоменклатураСервер.НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
	КонецЕсли;

	ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ЗаголовокФормированияПоШаблонуРабочее()
	Возврат НСтр("ru='<Рабочее наименование будет сформировано по шаблону>'");
КонецФункции

&НаСервере
Функция ЗаголовокФормированияПоШаблонуДляПечати()
	Возврат НСтр("ru='<Наименование для печати будет сформировано по шаблону>'");
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРедактированияНаименований(СкрыватьДоступность)
	
	ЗаголовокФормированияПоШаблонуРабочее = ЗаголовокФормированияПоШаблонуРабочее();
	ЗаголовокФормированияПоШаблонуДляПечати = ЗаголовокФормированияПоШаблонуДляПечати();
	
	Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Наименование.ОтметкаНезаполненного = Ложь;
		
	Иначе
		
		Элементы.Наименование.АвтоОтметкаНезаполненного = Не ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);
		
	КонецЕсли;
	
	Если СкрыватьДоступность Тогда
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры Тогда
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, ЗаголовокФормированияПоШаблонуРабочее);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.Наименование = ?(ЗначениеЗаполнено(Объект.Наименование), Объект.Наименование, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
			Элементы.Наименование.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры;
			Элементы.Наименование.ЦветТекста = ЦветТекстаНаименования;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры Тогда
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, ЗаголовокФормированияПоШаблонуДляПечати);
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Иначе
			Объект.НаименованиеПолное = ?(ЗначениеЗаполнено(Объект.НаименованиеПолное), Объект.НаименованиеПолное, "");
			ЦветТекстаНаименования = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Элементы.НаименованиеПолное.ТолькоПросмотр = РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры;
		Элементы.НаименованиеПолное.ЦветТекста = ЦветТекстаНаименования;
		
	Иначе
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияРабочегоНаименованияНоменклатуры И Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее Тогда
			Объект.Наименование = ?(Объект.Наименование = ЗаголовокФормированияПоШаблонуРабочее, "", Объект.Наименование);
		КонецЕсли;
		
		Если РеквизитыВидаНоменклатуры.ЗапретРедактированияНаименованияДляПечатиНоменклатуры И Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати Тогда
			Объект.НаименованиеПолное = ?(Объект.НаименованиеПолное = ЗаголовокФормированияПоШаблонуДляПечати, "", Объект.НаименованиеПолное);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ЗаполнитьНаименованиеДляПечатиПоШаблону.Доступность = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры);
	
	Элементы.ЗаполнитьРабочееНаименованиеПоШаблону.Доступность   = ЗначениеЗаполнено(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры);	                                                                                     

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмеренияСрокаГодности.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СрокГодности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЕдиницаИзмеренияСрокаГодности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокТипов = Новый СписокЗначений();
	СписокТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокТипов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокОбщийНабор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИспользованиеУпаковокИндивидуальныйНабор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Элементы.ИспользоватьУпаковки.ТолькоПросмотр;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЗаголовокГиперссылки(ЭлементЗаголовок);
	КонецЦикла;
	
	КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(Объект, НастройкиВидимостиИЗаголовков);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиРеквизитов()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	СтруктураПоиска = Новый Структура("Свойство");
	
	Если ТаблицаНастроекРеквизитов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТаблицаНастроекРеквизитов Цикл
			Если Не Строка.ОбязателенДляЗаполнения
				И Не Строка.Уникален Тогда
				Продолжить;
			КонецЕсли;
			 
			Если Строка.ЭтоДопРеквизит Тогда
				
				Если НЕ ИспользоватьДополнительныеРеквизитыИСведения Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска.Свойство = Строка.Свойство;
				
				НайденныеСтроки = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяЭлементаФормы = НайденныеСтроки[0].ИмяРеквизитаЗначение;
				
			Иначе
				
				ИмяЭлементаФормы = Строка.ИмяРеквизита;
				
			КонецЕсли;
			
			Если Элементы.Найти(ИмяЭлементаФормы) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Элемент = Элементы[ИмяЭлементаФормы];
			
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элементы[ИмяЭлементаФормы].АвтоОтметкаНезаполненного = Ложь;
				Элементы[ИмяЭлементаФормы].ОтметкаНезаполненного     = Ложь;
				
				Элемент.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРеквизитов = Справочники.Номенклатура.ТаблицаНастроекРеквизитов(Объект.ВидНоменклатуры,
																			Объект.ТипНоменклатуры,
																			Объект.ОсобенностьУчета,
																			РеквизитыВидаНоменклатуры.ВариантОказанияУслуг,
																			Объект.ИспользованиеХарактеристик,
																			РеквизитыВидаНоменклатуры.ИспользоватьСрокГодностиСерии,
																			"Номенклатура");	

	ТаблицаНастроекРеквизитов.Загрузить(ТаблицаРеквизитов);
	
	Справочники.Номенклатура.НастроитьФормуПоТаблицеНастроек(ЭтаФорма)
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("ОсновныеПараметрыУчета");
	ИменаСворачиваемыхГрупп.Добавить("ЕдиницыИзмерения");
	ИменаСворачиваемыхГрупп.Добавить("РегламентированныйУчет");
	ИменаСворачиваемыхГрупп.Добавить("Алкоголь");
	ИменаСворачиваемыхГрупп.Добавить("КиЗ");
	ИменаСворачиваемыхГрупп.Добавить("СведенияОПроизводителе");
	ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	
	ИменаСворачиваемыхГрупп.Добавить("КартинкаОписание");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	ИменаСворачиваемыхГрупп.Добавить("ПланированиеИМаркетинг");
	ИменаСворачиваемыхГрупп.Добавить("Обеспечение");
	ИменаСворачиваемыхГрупп.Добавить("Цены");
	ИменаСворачиваемыхГрупп.Добавить("Шаблоны");

	Возврат ИменаСворачиваемыхГрупп;
КонецФункции

&НаСервере
Функция ЗаголовокГиперссылки(ЭлементЗаголовок)
	Если ТипЗнч(ЭлементЗаголовок.Значение) = Тип("Строка") 
		Или ТипЗнч(ЭлементЗаголовок.Значение) = Тип("ФорматированнаяСтрока") Тогда
		Возврат ЭлементЗаголовок.Значение;
	Иначе
		Возврат ЭлементЗаголовок.Значение.Заголовок;
	КонецЕсли;	
КонецФункции

#КонецОбласти

#КонецОбласти
