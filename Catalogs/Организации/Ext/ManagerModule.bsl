#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ОбособленныеПодразделения

// Проверяет взаимосвязанность организации по организационной структуре.
// Если первая и вторая организации одинаковы, то считается, что они относятся к одной головной.
//
// Параметры:
//	ПерваяОрганизация - СправочникСсылка.Организации - проверяемая организация.
//	ВтораяОрганизация - СправочникСсылка.Организации - организация, с которой выполняется сравнение.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если первая организация является обособленным подразделением,
//		либо если вторая организация является обособленным подразделением первой,
//		либо если обе организации являются обособленными подразделениями одной и той же головной организации.
//		В противном случае возвращается Ложь.
//
Функция ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ПерваяОрганизация, ВтораяОрганизация) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ПерваяОрганизация) И ЗначениеЗаполнено(ВтораяОрганизация))
		ИЛИ ПерваяОрганизация = ВтораяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(ПерваяОрганизация);
	ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре = (МассивВзаимосвязанныхОрганизаций.Найти(ВтораяОрганизация) <> Неопределено);
	
	Возврат ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре;
	
КонецФункции

// Проверяет, связана ли организация с другими организациями по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если организация взаимосвязана с другими,
//		возвращается Истина, в противном случае Ложь.
//
Функция ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация) Экспорт
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(Организация);
	ОрганизацияВзаимосвязанаСДругимиОрганизациями = (МассивВзаимосвязанныхОрганизаций.Количество() <> 0);
	
	Возврат ОрганизацияВзаимосвязанаСДругимиОрганизациями;
	
КонецФункции

// Возвращает массив организаций, взаимосвязанных по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно искать связи,
//		если не указана, то возвращаются все взаимосвязанные организации.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция МассивВзаимосвязанныхОрганизаций(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	NULL КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВзаимосвязанныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимосвязанныеОрганизации.Ссылка
	|ИЗ
	|	ВзаимосвязанныеОрганизации КАК ВзаимосвязанныеОрганизации
	|ГДЕ
	|	ВзаимосвязанныеОрганизации.Ссылка <> &Организация
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &Организация)");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ?(ЗначениеЗаполнено(Организация),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"), Справочники.Организации.ПустаяСсылка()));
		
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивОрганизаций;
	
КонецФункции

// Возвращает массив филиалов организации у которых разрешено ведение взаиморасчетов через головную организацию.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно найти филиалы,
//		если не указана, то возвращаются все филиалы в которых допускаются взаиморасчеты через головную организацию.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (Организации.Ссылка <> &Организация И Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает массив головных организаций для указанных организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которой нужно получить головные организации
//
// Возвращаемое значение:
//	Массив - массив головных организаций
//
Функция ГоловныеОрганизации(МассивОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ИспользованиеНесколькихОрганизаций

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;

КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
		
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких организаций.
//
// Возвращаемое значение:
//		Булево
//
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

// Возвращает массив доступных организаций.
//
// Параметры:
//	ТолькоРазрешенные - Булево - определяет, надо ли получить все организации ИБ, или только доступные текущему пользователю.
//	УчитыватьПомеченныеНаУдаление - Булево - определяет, надо ли получать помеченные на удаление организации
//
// Возвращаемое значение:
//	Массив - массив организаций
//
Функция ДоступныеОрганизации(ТолькоРазрешенные = Ложь, УчитыватьПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	(ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ИЛИ &ИспользоватьУправленческуюОрганизацию)
	|	И (НЕ ДанныеСправочника.ПометкаУдаления 
	|		ИЛИ &УчитыватьПомеченныеНаУдаление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("УчитыватьПомеченныеНаУдаление", УчитыватьПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию",
		ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Если ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
	Иначе
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП.
//
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Результат.Добавить("ОбособленноеПодразделение");
		Результат.Добавить("ГоловнаяОрганизация");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.КодОКВЭД КАК КодОКВЭД,
	|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Организации.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
	|	Организации.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Регистрация = Справочники.Организации.РегистрацияВНалоговомОргане(Организация);
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, "КодПоОКТМО, КодПоОКАТО");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		НаименованиеПолное = Выборка.НаименованиеПолное;
		ИНН = Выборка.ИНН;
		КПП = Выборка.КПП;
		КодПоОКПО = Выборка.КодПоОКПО;
		КодПоОКАТО = РеквизитыРегистрации.КодПоОКАТО;
		КодПоОКТМО = РеквизитыРегистрации.КодПоОКТМО;
		КодОКВЭД = Выборка.КодОКВЭД;
		ЮрФизЛицо = Выборка.ЮрФизЛицо;
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			Свидетельство = "Свидетельство " + Выборка.СвидетельствоСерияНомер + " от " + Формат(Выборка.СвидетельствоДатаВыдачи, "ДЛФ=D");
		Иначе
			Свидетельство = "";
		КонецЕсли;
	Иначе
		Представление = "";
		Наименование = "";
		НаименованиеПолное = "";
		ИНН = "";
		КПП = "";
		КодПоОКПО = "";
		КодПоОКАТО = "";
		КодПоОКТМО = "";
		КодОКВЭД ="";
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
		Свидетельство = "";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, КодПоОКАТО, КодПоОКТМО, КодОКВЭД, ЮрФизЛицо, Свидетельство",
		Представление,
		Наименование,
		НаименованиеПолное,
		ИНН,
		КПП,
		КодПоОКПО,
		КодПоОКАТО,
		КодПоОКТМО,
		КодОКВЭД,
		ЮрФизЛицо,
		Свидетельство);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется система налогообложения
//	Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения
//
Функция НалогообложениеНДС(Организация, Склад = Неопределено, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&Дата,
	|		Организация = &Организация И Склад = &Склад
	|	) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата,
	|		Организация = &Организация) КАК РегУчетнаяПолитика
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|	ПО РегУчетнаяПолитика.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|
	|ГДЕ
	|	СпрУчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС
	|	ИЛИ СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("Дата", 		 ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Склад", 		 Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	Иначе
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	Возврат НалогообложениеНДС;
	
КонецФункции

// Функция определяет под какой тип налогообложения НДС "по умолчанию" закупается товар.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется система налогообложения
//	Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения
//
Функция ЗакупкаПодДеятельность(Организация, Склад = Неопределено, Дата = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата,
	|		Организация = &Организация) КАК РегУчетнаяПолитика
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|	ПО РегУчетнаяПолитика.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|	И СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|	И СпрУчетнаяПолитика.ПрименяетсяУчетНДСПоФактическомуИспользованию
	|	И &Склад <> Неопределено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&Дата,
	|		Организация = &Организация
	|		И Склад = &Склад
	|	) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	3 КАК Порядок,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата,
	|		Организация = &Организация) КАК РегУчетнаяПолитика
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|	ПО РегУчетнаяПолитика.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|ГДЕ
	|	СпрУчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС
	|		ИЛИ СпрУчетнаяПолитика.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|
	|УПОРЯДОЧИТЬ ПО Порядок
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	КонецЕсли;

	Возврат НалогообложениеНДС;
	
КонецФункции

// Функция определяет применение ЕНВД для розничной торговли.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется применение ЕНВД
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется применение ЕНВД
//	Дата - Дата определения применения ЕНВД
//
// Возвращаемое значение:
//	Булево - признак применения ЕНВД в розничной торговле
//
Функция РозничнаяТорговляОблагаетсяЕНВД(Организация, Склад, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Истина КАК РозничнаяТорговляОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&Дата,
	|		Организация = &Организация
	|		И Склад = &Склад
	|	) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РозничнаяТорговляОблагаетсяЕНВД = Выборка.РозничнаяТорговляОблагаетсяЕНВД;
	Иначе
		РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	КонецЕсли;
	
	Возврат РозничнаяТорговляОблагаетсяЕНВД;
	
КонецФункции

// Получает организацию, если организация одна в справочнике.
// Если управленческая организация отключена в настройках, то она не учитывается.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация
// 	СправочникСсылка.Организации.ПустаяСсылка - если организаций нет или организаций больше одной
//
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|";
	
	Если Не Константы.ИспользоватьУправленческуюОрганизацию.Получить() Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И Не Организации.Предопределенный";
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Организация;

КонецФункции

// Возвращает ссылку на "Регистрацию в налоговом органе" по состоянию на некоторую ДатаАктуальности
// Параметры:
//	Организация - СправочникСсылка.Организации - организации.
//	ДатаАктуальности - Дата - дата, на которую требуется получить сведения.
//
// Возвращаемое значение:
//	СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в налоговом органе.
//
Функция РегистрацияВНалоговомОргане(Организация, Знач ДатаАктуальности = Неопределено, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Возврат Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности, РегистрацияВНалоговомОргане);
	
КонецФункции

// Возвращает таблицу классификатора из макета с предопределенными элементами. Применяется для классификаторов (ОКВЭД, ОКОПФ и т.д.)
// Макеты хранятся в макетах данного справочника (см. общую форму "ФормаВыбораКода").
//	Параметры:
//		НазваниеМакета - Строка - имя макета, хранящего данные с предопределенными элементами классификатора.
//		ТекущийПериод - Дата - в данном методе не используется, однако может быть обязательной в случае обращения к другим классификаторам из общей формы.
//	Возвращаемое значение:
//		Структура - структура параметров со следующими свойствами:
//			* СписокКодов - Таблица значений - таблица классификатора с колонками:
//				** Код - Строка - строковое представление кода элемента классификатора.
//				** Наименование - Строка - наименование элемента классификатора.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	
	Макет	= ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает соответствие кодов к наименованию, указанное в макете. Применяется для классификаторов (ОКВЭД, ОКОПФ и т.д.)
//
// Параметры:
//		ИмяМакета - Строка - Имя макета, как оно задано в конфигураторе. Если он не будет обнаружен - будет возвращено пустое соответствие.
//		ИмяОбласти - Строка - Имя анализируемой области макета.
//
//	Возвращаемое значение:
//		Фиксированное соответствие
//			Ключ - код, указанный в первой колонке макета;
//			Значение - наименование, указанное во второй колонке макета.
//
Функция СоотвествиеКодовКНаименованиюИзМакета(ИмяМакета, ИмяОбласти = "Классификатор") Экспорт
	
	СоотвествиеКодов = Новый Соответствие;
	
	Макет = Справочники.Организации.ПолучитьМакет(ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(СоотвествиеКодов);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		
		ТекКод = СокрЛП(ОбластьМакета.Область(Ном,1).Текст);
		ТекНаименование = СокрЛП(ОбластьМакета.Область(Ном, 2).Текст);
		
		Если ТекКод = "###" Тогда
			Прервать;
		ИначеЕсли ПустаяСтрока(ТекКод) Тогда
			Продолжить;
		Иначе
			СоотвествиеКодов.Вставить(ТекКод, ТекНаименование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоотвествиеКодов);
	
КонецФункции

// Возвращает таблицу классификатора ОКВЭД2.
//
// Параметры:
//  ТолькоДоступныеДляВыбора - Булево - В таблицу будут включены только те строки, которые можно выбрать для вида деятельности организации.
// 
// Возвращаемое значение:
//  Таблица - Таблица классификатора ОКВЭД2.
//
Функция КлассификаторОКВЭД2(ТолькоДоступныеДляВыбора = Ложь) Экспорт
	
	КлассификаторОКВЭД2 = НовыйТаблицаДляПоискаОКВЭД();
	// Если выбираются только доступные для выбора,
	// то добавлять отдельную колонку "ДоступенДляВыбора" не имеет смысла,
	// т.к. все строки в результате будут доступны для выбора.
	Если НЕ ТолькоДоступныеДляВыбора Тогда
		КлассификаторОКВЭД2.Колонки.Добавить("ДоступенДляВыбора", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Макет = ПолучитьМакет("ОКВЭД2");
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				
				ДоступенДляВыбора = КодОКВЭД2ДоступенДляВыбора(КодПоказателя);
				Если ТолькоДоступныеДляВыбора
					И НЕ ДоступенДляВыбора Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КлассификаторОКВЭД2.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.ПредставлениеПоиска = ВРЕГ(КодПоказателя + " " + Название);
				Если НЕ ТолькоДоступныеДляВыбора Тогда
					НоваяСтрока.ДоступенДляВыбора = ДоступенДляВыбора;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КлассификаторОКВЭД2;
	
КонецФункции

// Возвращает пустую таблицу для поиска в классификаторе ОКВЭД2.
//
Функция НовыйТаблицаДляПоискаОКВЭД() Экспорт
	
	Схема = Справочники.Организации.ПолучитьМакет("ОтборОКВЭД");
	
	ТаблицаДляОтбораОКВЭД = Новый ТаблицаЗначений();
	
	Для Каждого Поле Из Схема.НаборыДанных.ОКВЭД.Поля Цикл
		ТаблицаДляОтбораОКВЭД.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
	КонецЦикла;
	
	Возврат ТаблицаДляОтбораОКВЭД;
	
КонецФункции

// Возвращает таблицу ОКВЭД2 с наложенным фильтром по СтрокаПоиска.
// Строка классификатора ОКВЭД включается в результат, если содержит все слова из СтрокаПоиска.
// 
// Параметры:
//  СтрокаПоиска         - Строка - Фильтр для отбора строк классификатора ОКВЭД2.
//  СписокВыбранныхКодов - СписокЗначений - Список, который содержит значения выбранных кодов ОКВЭД.
//  КлассификаторОКВЭД   - ТаблицаЗначений - Таблица классификатора ОКВЭД2. Структуру см. в НовыйТаблицаДляПоискаОКВЭД().
// 
// Возвращаемое значение:
//  Таблица - Таблица классификатора ОКВЭД2 с наложенным отбором по СтрокаПоиска с колонками:
//    - Код          - Строка - Код из классификатора ОКВЭД2
//    - Наименование - Строка - Наименование из классификатора ОКВЭД2
//    - Выбран       - Булево - Истина, если код содержится в СписокВыбранныхКодов.
//
Функция НайтиВКлассификатореОКВЭД2(СтрокаПоиска, СписокВыбранныхКодов, КлассификаторОКВЭД) Экспорт
	
	СхемаКомпоновки = Справочники.Организации.ПолучитьМакет("ОтборОКВЭД");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВыбранныеОКВЭД", СписокВыбранныхКодов);
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Слова = СтрРазделить(ВРег(СтрЗаменить(СтрокаПоиска, """", "")), " ", Ложь);
	Для Каждого Слово ИЗ Слова Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, "ПредставлениеПоиска", СокрЛП(Слово), ВидСравненияКомпоновкиДанных.Содержит);
	КонецЦикла;
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиДляКомпоновкиМакета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборы = Новый Структура("ТаблицаОКВЭД", КлассификаторОКВЭД);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция КодОКВЭД2ДоступенДляВыбора(Код)
	
	КоличествоЦифрВКоде = СтрДлина(СтрЗаменить(Код, ".", ""));
	Возврат КоличествоЦифрВКоде >= 4;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ОрганизацииВызовСервера.ОрганизацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НапечататьПомощникРаботыФаксимильнойПечати") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"НапечататьПомощникРаботыФаксимильнойПечати", 
			НСтр("ru='Как создать факсимильную подпись и печать?'"), 
			СформироватьПомощникРаботыФаксимильнойПечати(МассивОбъектов[0], ОбъектыПечати));
		
		КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПомощникРаботыФаксимильнойПечати(Организация, ОбъектыПечати)
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	Макет				= УправлениеПечатью.МакетПечатнойФормы("Справочник.Организации.ПомощникРаботыФаксимильнойПечати");
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация);
	
	// Вывести подписи
	Область = Макет.ПолучитьОбласть("ПоляКЗаполнению");
	СтруктураДанныхПодвал = Новый Структура;
	СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ОтветственныеЛица.Руководитель));
	СтруктураДанныхПодвал.Вставить("ФИОБухгалтера", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ОтветственныеЛица.ГлавныйБухгалтер));
	Область.Параметры.Заполнить(СтруктураДанныхПодвал);
	ТабличныйДокумент.Вывести(Область);

	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Линия"));
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Схема"));
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Организация);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПредопределеннуюОрганизацию() Экспорт
	
	ЗаписыватьОбъект = Ложь;
	
	СправочникОбъект = Справочники.Организации.УправленческаяОрганизация.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СправочникОбъект.ЮрФизЛицо) Тогда
		СправочникОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СправочникОбъект.Префикс) Тогда
		СправочникОбъект.Префикс = "УУ";
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗаписыватьОбъект Тогда
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.3.16.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Юридический адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Фактический адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Телефон организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Факс организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Адрес электронной почты организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Почтовый адрес организации'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления УП 2.4.2,
// заполняет реквизит "Дата регистрации" справочника "Организации" для индивидуальных предпринимателей.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ДатаРегистрации = &ПустаяДата
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И Организации.СвидетельствоДатаВыдачи <> &ПустаяДата
	|";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.Организации";
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если СправочникОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
					И Не ЗначениеЗаполнено(СправочникОбъект.ДатаРегистрации)
					И ЗначениеЗаполнено(СправочникОбъект.СвидетельствоДатаВыдачи) Тогда
				СправочникОбъект.ДатаРегистрации = СправочникОбъект.СвидетельствоДатаВыдачи;
				ОбъектИзменен = Истина;
			КонецЕсли;
		
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
