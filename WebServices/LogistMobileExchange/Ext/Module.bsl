
Функция GetData(date, User) Экспорт 
	
	// Получить типы объектов XDTO
    ТипСписокЗаданий = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "ShuttleMissions");
    ТипЗаданиеНаДоставку = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "ShuttleMission"); 
	
	 Запрос = Новый Запрос;
	 СписокЗаданий = ФабрикаXDTO.Создать(ТипСписокЗаданий);
	
	//Пользователь
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(User);
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запрос.УстановитьПараметр("Курьер", Пользователь.ФизическоеЛицо);
	Иначе
		Возврат СписокЗаданий;	
	КонецЕсли;
	
    Запрос.Текст =
        "ВЫБРАТЬ
        |	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание,
        |	МИНИМУМ(МаршрутныйЛистМаршрутныеЗадания.НомерСтроки) КАК НомерСтроки
        |ПОМЕСТИТЬ ВТМааршрутныеЛисты
        |ИЗ
        |	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
        |
        |СГРУППИРОВАТЬ ПО
        |	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	МаршрутноеЗадание_Док.Номер КАК Number,
        |	МаршрутноеЗадание_Док.ДатаДоставки КАК Date,
        |	МаршрутноеЗадание_Док.АдресДоставки КАК Address,
        |	МаршрутноеЗадание_Док.ВремяДоставкиС,
        |	МаршрутноеЗадание_Док.ВремяДоставкиПо,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутноеЗадание_Док.ТипЗадания) КАК JobType,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутноеЗадание_Док.Статус) КАК Status,
        |	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(МаршрутноеЗадание_Док.Контрагент), """") КАК Customer,
        |	МаршрутноеЗадание_Док.КонтактноеЛицо КАК Contact,
        |	МаршрутноеЗадание_Док.ДокументОснование,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутноеЗадание_Док.КомментарийКДоставке) КАК Comment,
        |	ЕСТЬNULL(ВТМааршрутныеЛисты.НомерСтроки, 0) КАК RowNumber,
        |	ВЫБОР
        |		КОГДА МаршрутноеЗадание_Док.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику
        |			ТОГДА ЕСТЬNULL(МаршрутноеЗадание_Док.ДокументОснование.Номер,"""")
        |		КОГДА МаршрутноеЗадание_Док.ДокументОснование.ДокументОснование ССЫЛКА Документ.ЗаказПоставщику
        |			ТОГДА ЕСТЬNULL(МаршрутноеЗадание_Док.ДокументОснование.ДокументОснование.Номер,"""")
        |		ИНАЧЕ """"
        |	КОНЕЦ КАК SuplierOrderNumber,
        |	ВЫБОР
        |		КОГДА МаршрутноеЗадание_Док.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
        |			ТОГДА ЕСТЬNULL(МаршрутноеЗадание_Док.ДокументОснование.Номер,"""")
        |		КОГДА МаршрутноеЗадание_Док.ДокументОснование.ДокументОснование ССЫЛКА Документ.ЗаказКлиента
        |			ТОГДА ЕСТЬNULL(МаршрутноеЗадание_Док.ДокументОснование.ДокументОснование.Номер,"""")
        |		ИНАЧЕ """"
        |	КОНЕЦ КАК CustomerOrderNumber
        |ИЗ
        |	Документ.МегаЛогист_МаршрутноеЗадание КАК МаршрутноеЗадание_Док
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТМааршрутныеЛисты КАК ВТМааршрутныеЛисты
        |		ПО МаршрутноеЗадание_Док.Ссылка = ВТМааршрутныеЛисты.МаршрутноеЗадание
        |ГДЕ
        |	МаршрутноеЗадание_Док.ПометкаУдаления = ЛОЖЬ
        |	И МаршрутноеЗадание_Док.Проведен = ИСТИНА
        |	И МаршрутноеЗадание_Док.Статус В(&Статусы)
        |	И МаршрутноеЗадание_Док.ДатаДоставки МЕЖДУ &НачалоПериода И &КонецПериода
        |	И МаршрутноеЗадание_Док.Курьер = &Курьер";
		
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено);
	МассивСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполняется);
	МассивСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено);
	МассивСтатусов.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено);
    Запрос.УстановитьПараметр("Статусы", МассивСтатусов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(date));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(date));
    РезультатЗапроса = Запрос.Выполнить();  
            
    Выборка = РезультатЗапроса.Выбрать();
    Пока Выборка.Следующий() Цикл
		
		// Создать объект XDTO заявки
		ЗаданиеНаДоставку = ФабрикаXDTO.Создать(ТипЗаданиеНаДоставку);
		ЗаполнитьЗначенияСвойств(ЗаданиеНаДоставку, Выборка);
		ЗаданиеНаДоставку.DeliveryTime = "" + Формат(Выборка.ВремяДоставкиС, "ДФ=HH:mm") + " - " + Формат(Выборка.ВремяДоставкиПо, "ДФ=HH:mm");
		Попытка
			ЗаданиеНаДоставку.Sum = Выборка.ДокументОснование.Товары.Итог("Сумма");		
		Исключение
			ЗаданиеНаДоставку.Sum = 0;
		КонецПопытки;
		
		//Вывод номеров заказов
		
		
		ЗаполнятьТовары = Истина;
		Если НЕ ЗначениеЗаполнено(Выборка.ДокументОснование) тогда
			ЗаполнятьТовары = Ложь;
		КонецЕсли;
		
		Если ЗаполнятьТовары И НЕ Выборка.ДокументОснование.Проведен тогда
			ЗаполнятьТовары = Ложь;
		КонецЕсли;	
		
		ТипТовары = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "Goods");
		ТипТовар = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "Good");
		СписокТоваров = ФабрикаXDTO.Создать(ТипТовары);
		Если ЗаполнятьТовары Тогда
			ТаблицаТоваров = Выборка.ДокументОснование.Товары.Выгрузить();
			Если Не ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ТаблицаТоваров.Свернуть("Номенклатура, Упаковка, Цена, ДатаПоступления", "Количество, Сумма");
			ИначеЕсли ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				ТаблицаТоваров.Свернуть("Номенклатура, Упаковка, Цена, ДатаОтгрузки", "Количество, Сумма");
			ИначеЕсли ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Если НачалоДня(Выборка.ДокументОснование.Дата) <> НачалоДня(date) тогда
					Продолжить;
				КонецЕсли;	
				ТаблицаТоваров.Свернуть("Номенклатура, Упаковка, Цена", "Количество, Сумма");
			ИначеЕсли ТипЗнч(Выборка.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				ТаблицаТоваров = Выборка.ДокументОснование.ЗаказНаПеремещение.Товары.Выгрузить();
				ТаблицаТоваров.Свернуть("Номенклатура, Упаковка, НачалоОтгрузки", "Количество");
				ТаблицаТоваров.Колонки.Добавить("Цена",ОбщегоНазначения.ОписаниеТипаЧисло(5));	
			Иначе
				ТаблицаТоваров.Свернуть("Номенклатура, Упаковка, Цена", "Количество, Сумма");
			КонецЕсли;
			Для Каждого СтрокаТЧ из ТаблицаТоваров цикл
				
				Попытка
					Если СтрокаТЧ.Отменено тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				//Заказ клиента
				Попытка
					Если НачалоДня(СтрокаТЧ.ДатаОтгрузки) <> НачалоДня(date) тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				//ЗаказПоставщику
				Попытка
					Если НачалоДня(СтрокаТЧ.ДатаПоступления) <> НачалоДня(date) тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;				
				
				//Перемещение товаров
				Попытка
					Если НачалоДня(СтрокаТЧ.НачалоОтгрузки) <> НачалоДня(date) тогда
						Продолжить;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
				Товар = ФабрикаXDTO.Создать(ТипТовар);
				Товар.GoodName 	= XMLСтрока(СтрокаТЧ.Номенклатура.Наименование);
				Товар.Qnty 		= СтрокаТЧ.Количество;
				Товар.Pack 		= XMLСтрока(" " + ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), СтрокаТЧ.Упаковка, СтрокаТЧ.Номенклатура.ЕдиницаИзмерения));
				Товар.Price 	= СтрокаТЧ.Цена;
				
				СписокТоваров.Good.Добавить(Товар);
			КонецЦикла;	
		КонецЕсли;
		ЗаданиеНаДоставку.Goods = СписокТоваров; 
		СписокЗаданий.ShuttleMission.Добавить(ЗаданиеНаДоставку);
	КонецЦикла;              
	
	//Добавление данных о GCM
	СписокЗаданий.GCMId = Константы.МегаЛогист_ProjectID.Получить();
	//СписокЗаданий.GCMId = "140392214548";
	//140392214548
	
     // Вернуть заявку
	 Возврат СписокЗаданий;
	 
КонецФункции

Функция GetReasons()
	
	// Получить типы объектов XDTO
    ТипПричины = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "Reasons");
	
	СписокПричин = ФабрикаXDTO.Создать(ТипПричины);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_ПричиныНевыполнения.Наименование
	|ИЗ
	|	Справочник.МегаЛогист_ПричиныНевыполнения КАК МегаЛогист_ПричиныНевыполнения";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокПричин.Name.Добавить(Выборка.Наименование);
	
	КонецЦикла;
	
	// Вернуть заявку
	Возврат СписокПричин;
	
КонецФункции

Функция LoadStatuses(СтрокаХМЛ)
	
	Попытка
	
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.УстановитьСтроку(СтрокаХМЛ);
		
		ТипСписокЗаданий = ФабрикаXDTO.Тип("http://megalogist.ru/logist", "Statuses");
		
		СписокСтатусов = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ, ТипСписокЗаданий);
		
		Для каждого Статус Из СписокСтатусов.Status Цикл
			
			ЗаданиеНаДоставку = Документы.МегаЛогист_МаршрутноеЗадание.НайтиПоНомеру(Статус.Number, ТекущаяДата()).ПолучитьОбъект();
			Если Статус.Type= "Комментари" Тогда
				ЗаданиеНаДоставку.КомментарийКурьера = Статус.Comment;
			Иначе
				ЗаданиеНаДоставку.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания[Статус.CurrStatus];
				ЗаданиеНаДоставку.ВремяДоставкиФакт 	= Статус.Time;
				Если Статус.Reason <> "" Тогда
					НайденныйЭлемент = Справочники.МегаЛогист_ПричиныНевыполнения.НайтиПоНаименованию(Статус.Reason);
					ЗаданиеНаДоставку.ПричинаНевыполнения 	= НайденныйЭлемент;
				КонецЕсли;
				ЗаданиеНаДоставку.КомментарийКПричине 	= Статус.Comment;
			КонецЕсли;
						
			ЗаданиеНаДоставку.Записать();
			
		КонецЦикла;
		
		Возврат Истина
	
	Исключение
		
		Возврат Ложь;
	
	КонецПопытки;
	
	
КонецФункции

Функция ПолучитьКоординаты(Широта, Долгота, Скорость, Время, Курьер, Направление, ИмяПровайдера, НомерПровайдера)
	
	//Пользователь
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Курьер);
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Запись = РегистрыСведений.МегаЛогист_ПеремещенияКурьеров.СоздатьМенеджерЗаписи();
		Запись.Долгота 			= Долгота;
		Запись.Широта 			= Широта;
		Запись.Скорость 		= Скорость;
		///////////////////////////////////////////
		//Мироненко Д.С 19.05.2016 10:56:44 НАЧАЛО
		//Комментарий: Используется время сервера
		//Запись.Период 			= Время;
		Запись.Период 			= ТекущаяДата();
		//Мироненко Д.С 19.05.2016 10:56:55 КОНЕЦ
		///////////////////////////////////////////
		Запись.Курьер 			= Пользователь.ФизическоеЛицо;
		Запись.Направление 		= Направление;
		Запись.ИмяПровайдера 	= ИмяПровайдера;
		Запись.НомерПровайдера 	= НомерПровайдера;
		Попытка
			Запись.Записать();
			Возврат Истина;
		Исключение
		    Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция SetAppNumber(User, Number)
	
	//Пользователь
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(User);
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		НаборЗаписей = РегистрыСведений.МегаЛогист_НомераПриложенийКурьеров.СоздатьНаборЗаписей();
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.Физлицо 		= Пользователь.ФизическоеЛицо;
		НоваяСтрока.НомерПриложения = Number;
		НаборЗаписей.Записать(Истина);
		Возврат Истина;	
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции


