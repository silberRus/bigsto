&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеализацияУслугПрочихАктивов", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		ТекстСчетФактура = ВыбранноеЗначение.ПредставлениеСчетаФактуры;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка) 
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ЗаполнитьДанныеФормы();
		НастроитьЭлементыФормы();
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		Если НЕ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
		ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ((Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор)
			Или (Параметр.Свойство("СписокОснований") И Параметр.СписокОснований.НайтиПоЗначению(Объект.Ссылка) <> Неопределено)) Тогда
		ОбновитьТекстСчетаФактуры();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_КорректировкаРеализации"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ДокументОснование")
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		ОбновитьТекстСчетаФактуры();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
КонецПроцедуры

&НаКлиенте
Процедура РеализацияНаОснованииПриИзменении(Элемент)
	
	Если Объект.РеализацияНаОсновании Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав")
			ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности") Тогда
			
			СписокТипов = Новый СписокЗначений;
			Если ИспользуетсяУчетВНА_2_4 Тогда
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеОС2_4.ФормаВыбора", НСтр("ru='Подготовка к передаче ОС'"));
			Иначе
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеОС.ФормаВыбора", НСтр("ru='Подготовка к передаче ОС (2.2)'"));
			КонецЕсли;
			
			ВыборТипаДокументаОснования(СписокТипов[0], Неопределено);
			
		Иначе
			СписокТипов = Новый СписокЗначений;
			Если ИспользуетсяУчетВНА_2_4 Тогда
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеНМА2_4.ФормаВыбора", НСтр("ru='Подготовка к передаче НМА'"));
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеОС2_4.ФормаВыбора", НСтр("ru='Подготовка к передаче ОС'"));
			Иначе
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеНМА.ФормаВыбора", НСтр("ru='Подготовка к передаче НМА (2.2)'"));
				СписокТипов.Добавить("Документ.ПодготовкаКПередачеОС.ФормаВыбора", НСтр("ru='Подготовка к передаче ОС (2.2)'"));
			КонецЕсли;
			
			СписокТипов.ПоказатьВыборЭлемента(
				Новый ОписаниеОповещения("ВыборТипаДокументаОснования", ЭтаФорма),
				НСтр("ru='Документ основание'"));
				
		КонецЕсли; 
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Объект.РеализацияНаОсновании = Ложь;
	Иначе
		ОткрытьФорму(Результат.Значение, , ЭтаФорма, ЭтаФорма,,, Новый ОписаниеОповещения("ВыборДокументаОснования", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДокументОснование = Результат;
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности") 
			И ИспользуетсяУчетВНА_2_4 Тогда
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав");
			ПриИзмененииХозяйственнойОперацииСервер();
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту") 
			И ИспользуетсяУчетВНА_2_4 Тогда
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов");
			ПриИзмененииХозяйственнойОперацииСервер();
		КонецЕсли;
	Иначе
		Объект.РеализацияНаОсновании = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПартнерПриИзмененииСервер();
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		ПересчитатьСуммыПоВалюте();
	Иначе
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерПриИзмененииСервер();
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	ПересчитатьСуммыПоВалюте();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		НалогообложениеИзСоглашения = Ложь;
		Возврат;
	КонецЕсли;
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	ПересчитатьСуммыПоВалюте();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	ДатаДокументаДоИзменения = Объект.Дата;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		
		Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		Объект.ДатаПереходаПраваСобственности = Дата('00010101');
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		
		Если Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено
			ИЛИ Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ПустаяСсылка() Тогда
			Объект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.ВПути;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
		
		Элементы.Расходы.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Расходы.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.Расходы.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли; 
	
	
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОснованиеИзменено = ОснованиеИзменено И ЗначениеЗаполнено(Объект.Основание);
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка, Объект.Организация);
	
	ФискальнаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	НалогообложениеНДСПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("Дата, Валюта, ВалютаВзаиморасчетов, СуммаДокумента");
	ЗаполнитьЗначенияСвойств(ДанныеПоСуммеПродажи, Объект);
	Если Объект.Валюта = Объект.ВалютаВзаиморасчетов Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Доходы, Объект.ЦенаВключаетНДС));
	ИначеЕсли Объект.Товары.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество() = 0 Тогда
		ДанныеПоСуммеПродажи.Вставить("СуммаВзаиморасчетов", Объект.Доходы.Итог("СуммаВзаиморасчетов"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Доходы.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Доходы.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ЭтоДокументПродажи"      , Истина);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоходы

&НаКлиенте
Процедура ДоходыКоличествоПриИзменении(Элемент)
	Действия = Новый Структура;
	ДобавитьДействияПересчетаСумм(Действия, Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Доходы.ТекущиеДанные, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЦенаПриИзменении(Элемент)
	Действия = Новый Структура;
	ДобавитьДействияПересчетаСумм(Действия, Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Доходы.ТекущиеДанные, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСуммаПриИзменении(Элемент)
	Действия = Новый Структура;
	ДобавитьДействияПересчетаНДС(Действия, Объект);
	Действия.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", Новый Структура("ИмяКоличества", "Количество"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Доходы.ТекущиеДанные, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСуммаНДСПриИзменении(Элемент)
	Действия = Новый Структура;
	ДействияПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчета);
	Действия.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Доходы.ТекущиеДанные, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтавкаНДСПриИзменении(Элемент)
	Действия = Новый Структура;
	ДобавитьДействияПересчетаСумм(Действия, Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Доходы.ТекущиеДанные, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяДоходовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Доходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяДоходов) Тогда
		ДоходыСтатьяДоходовПриИзмененииСервер();
	Иначе
		ТекущаяСтрока.АналитикаДоходов = Неопределено;
		ТекущаяСтрока.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПослеУдаления(Элемент)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат; // Пустой обработчик для УТ
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Расходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		РасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Расходы.НайтиПоИдентификатору(Элементы.Расходы.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
	
	Возврат; // в УТ пустой обработчик.
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВидАктиваПриИзменении(Элемент)
	
	
	Возврат; // в УТ пустой обработчик.
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Доходы;
	Если ТаблицаФормы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеТаблицы = Объект.Доходы;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
		"Сумма, СуммаНДС, СуммаСНДС");
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Доходы.ТекущиеДанные;
	Если НоваяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		ДобавитьДействияПересчетаСумм(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС(Команда)
	Если Объект.Доходы.Количество()>0 Тогда
		СтавкаНДС = Неопределено;

		ОткрытьФорму("Перечисление.СтавкиНДС.ФормаВыбора",,,,,, Новый ОписаниеОповещения("УстановитьСтавкуНДСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДСЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтавкаНДС = Результат;
    Если ЗначениеЗаполнено(СтавкаНДС) Тогда
        УстановитьСтавкуНДССервер(СтавкаНДС, КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДоходов(Команда)
	Если Объект.Доходы.Количество()>0 Тогда
		СтатьяДоходов = Неопределено;

		ОткрытьФорму("ПланВидовХарактеристик.СтатьиДоходов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("УстановитьСтатьюДоходовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДоходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтатьяДоходов = Результат;
    Если ЗначениеЗаполнено(СтатьяДоходов) Тогда
        УстановитьСтатьюДоходовСервер(СтатьяДоходов);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Доходы"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Расходы"));
	
	#Область ДатаПереходаПраваСобственности
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПереходаПраваСобственности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПереходаПраваСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПереходаПраваСобственности.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПереходаПраваСобственности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыПредставлениеОтраженияВРеглУчете.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расходы.ПредставлениеОтраженияВРеглУчете");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",  НСтр("ru = 'Настроить'"));
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "ДоходыСуммаСНДС");
	
	//
	
	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма,
													"ДоходыСтавкаНДС",
													"ДоходыСуммаНДС",
													"ДоходыСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоходыСуммаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыСтатьяРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав);
	ОтборЭлемента.ПравоеЗначение = СписокОпераций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ГрафикОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
	ДатаПлатежа = Дата(1,1,1);
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, ГрафикОплаты, Объект.Соглашение);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		Если Не ЗначениеЗаполнено(ДатаДокументаДоИзменения) Тогда
			ДатаДокументаДоИзменения = Объект.Дата;
		КонецЕсли;
		
		СдвигДат = (НачалоДня(Объект.Дата) - НачалоДня(ДатаДокументаДоИзменения))/86400;	
		Если СдвигДат > 0 Тогда
			Объект.ДатаПлатежа = Объект.Дата + СдвигДат*86400;
		Иначе
			Объект.ДатаПлатежа = Объект.Дата;
		КонецЕсли;
	Иначе
		Объект.ДатаПлатежа = ДатаПлатежа;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		Документы.РеализацияУслугПрочихАктивов.ЗаполнитьПоПартнеру(Объект, Объект.Партнер);
		НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение);
	Документы.РеализацияУслугПрочихАктивов.ЗаполнитьПоУсловиямПродаж(Объект, УсловияПродаж);
	
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	УстановитьВидимостьОпераций(Истина);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Объект.Организация;
		СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчетОрганизации;
		СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не (ИспользоватьСоглашенияСКлиентами И НалогообложениеИзСоглашения) Тогда
			Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация, , Объект.Дата);
			НалогообложениеНДСПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(ВалютаСтарая, ВалютаНовая)
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСтарая, ДатаДокумента);
	КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, ДатаДокумента);
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Доходы, Объект.ЦенаВключаетНДС, ВалютаСтарая, ВалютаНовая, КурсыСтарые, КурсыНовые, , , "Количество");
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(Объект.Доходы, 0, "СуммаВзаиморасчетов");
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПоВалюте()
	Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента<>Объект.Валюта И Объект.Доходы.Количество()>0 Тогда
		ВалютаПриИзмененииСервер(ВалютаДокумента, Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	ВалютаДокумента = Объект.Валюта;
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшЗначений)
	ДействияПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчета);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчета);
	Действия.Вставить("ОчиститьСуммуВзаиморасчетов");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Доходы, Действия, КэшЗначений);
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	ДействияПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура();
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчета);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчета);
	Действия.Вставить("ОчиститьСуммуВзаиморасчетов");
	Если Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС=Объект.НалогообложениеНДС
		Или Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт=Объект.НалогообложениеНДС
	Тогда
		Действия.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Доходы, Действия, Неопределено);
	
	НастроитьЭлементыФормы();
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействияПересчетаНДС(Действия, Объект)
	ДействияПересчета = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчета);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчета);
	Действия.Вставить("ОчиститьСуммуВзаиморасчетов");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьДействияПересчетаСумм(Действия, Объект)
	ДобавитьДействияПересчетаНДС(Действия, Объект);
	Действия.Вставить("ПересчитатьСумму", "Количество");
	Действия.Вставить("ОчиститьСуммуВзаиморасчетов");
КонецПроцедуры

&НаСервере
Процедура ДоходыСтатьяДоходовПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.Доходы.НайтиПоИдентификатору(Элементы.Доходы.ТекущаяСтрока);
	
	АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
		СтрокаТаблицы.СтатьяДоходов, Объект, Объект.Подразделение);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

#КонецОбласти

#Область ФискальнаяОперация

&НаКлиенте
Процедура ФискальнаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если "ПробитьЧек" = НавигационнаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("Партнер",        Объект.Партнер);
		ПараметрыФормы.Вставить("Организация",    Объект.Организация);
		ПараметрыФормы.Вставить("ТорговыйОбъект", Неопределено);
		
		ПодключаемоеОборудованиеУТКлиент.ПробитьЧек(
			ЭтотОбъект,
			ПараметрыФормы,
			РежимЗаписиДокумента.Проведение,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли "ОткрытьЗаписьЖурналаФискальныхОпераций" = НавигационнаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьЖурналаФискальныхОпераций(
			ЭтотОбъект,
			ПодключаемоеОборудованиеУТВызовСервера.ДанныеЖурналаФискальныхОпераций(Объект.Ссылка));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьТекстСчетаФактуры();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
	
	ОснованиеИзменено = Ложь;
	ТаблицаОснованийДляПечати.Загрузить(Документы.РеализацияУслугПрочихАктивов.ТаблицаОснованийДляПечати(Объект));
	Если ПравоДоступа("Изменение", Метаданные.Документы.РеализацияУслугПрочихАктивов) И ЗначениеЗаполнено(Объект.Основание) Тогда
		Если ЗначениеЗаполнено(Объект.Основание) Тогда
			СтруктураОснования = Документы.РеализацияУслугПрочихАктивов.СформироватьОснование(Объект);
			ОснованиеИзменено = (СокрЛП(Объект.Основание) <> СтруктураОснования.Основание) 
				ИЛИ (СокрЛП(Объект.ОснованиеНомер) <> СтруктураОснования.ОснованиеНомер)
				ИЛИ (Объект.ОснованиеДата <> СтруктураОснования.ОснованиеДата);
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	
	ЗаполнитьДанныеФормы(Истина);
	УстановитьВидимостьОпераций(Ложь);
	НастроитьЭлементыФормы();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Доходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Расходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Расходы);
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав Тогда
		
		Элементы.Расходы.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Расходы.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.Расходы.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций(ИзменитьОперациюНаДоступную)
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ВозможнаРеализацияБезПереходаПраваСобственности =
			ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
		
		
		Если ИспользуетсяУчетВНА_2_4 Тогда
			Операция = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав;
			ЗаголовокОперации = "";
		Иначе
			Операция = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
			ЗаголовокОперации = НСтр("ru='Реализация с отложенным переходом прав'");
		КонецЕсли;
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Операция);
		Если ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			Если ЭлементСписка = Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(Операция, ЗаголовокОперации);
			КонецЕсли;
		Иначе
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1;
		
		// Если операции нет в списке, то изменим операцию на доступную.
		Если ИзменитьОперациюНаДоступную
			И ЗначениеЗаполнено(Объект.ХозяйственнаяОперация)
			И Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Объект.ХозяйственнаяОперация) = Неопределено Тогда
			
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав 
				И Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности) <> Неопределено Тогда
				Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
			ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности 
				И Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав) <> Неопределено Тогда
				Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав;
			Иначе
				Объект.ХозяйственнаяОперация = Элементы.ХозяйственнаяОперация.СписокВыбора[0].Значение;
			КонецЕсли; 
			
			ПриИзмененииХозяйственнойОперацииСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусаИДатыПереходаПраваСобственности()
	
	ПоказатьСтатус = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
						ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав);
	
	Элементы.ДатаПереходаПраваСобственности.Видимость = ПоказатьСтатус;
	Элементы.Статус.Видимость = ПоказатьСтатус;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы(ПриЧтенииСоздании = Ложь)
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь , Не ПриЧтенииСоздании, ОбновитьФорму, Элементы.ПорядокРасчетов);;
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	ОбновитьТекстСчетаФактуры();
	
	Документы.РеализацияУслугПрочихАктивов.РассчитатьСостояние(Объект.Ссылка, Объект.Договор, ЭтаФорма);
	Если Не ОснованиеИзменено Тогда
		СтруктураОснования = Документы.РеализацияУслугПрочихАктивов.СформироватьОснование(Объект);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОснования);
	КонецЕсли;
	ТаблицаОснованийДляПечати.Загрузить(Документы.РеализацияУслугПрочихАктивов.ТаблицаОснованийДляПечати(Объект));
	
	ОбновитьОграничениеЗадолженности();
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаБезНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоБезНДС;
		ВидимостьКомандНДС = Ложь;
	Иначе
		Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Элементы.СтраницаСНДС;
		Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Элементы.СтраницаВсегоСНДС;
		ВидимостьКомандНДС = Истина;
	КонецЕсли;
	
	Элементы.ДоходыУстановитьСтавкуНДС.Видимость = ВидимостьКомандНДС;
	Элементы.ДоходыУстановитьСтатьюДоходов.Видимость = Элементы.ДоходыСтатьяДоходов.Видимость;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	Иначе
		Расчеты = НСтр("ru='Расчеты по договору'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьДатыПлатежа(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьПорядкаОплаты(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
		
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.ВалютаВзаиморасчетов, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.ВалютаВзаиморасчетов);
	КонецЕсли;	
		
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		ЗаполнитьДанныеФормы();
	КонецЕсли;
	Документы.РеализацияУслугПрочихАктивов.РассчитатьСостояние(Объект.Ссылка, Объект.Договор, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьюДоходовСервер(СтатьяДоходов)
	
	Для Каждого Доход Из ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Доходы, Элементы.Доходы.ВыделенныеСтроки) Цикл
		Доход.СтатьяДоходов = СтатьяДоходов;
		Доход.АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
			Доход.СтатьяДоходов,
			Объект,
			Объект.Подразделение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДССервер(СтавкаНДС, КэшЗначений)
	Действия = Новый Структура;
	ДобавитьДействияПересчетаСумм(Действия, Объект);
	Для Каждого Доход Из ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Доходы, Элементы.Доходы.ВыделенныеСтроки) Цикл
		Доход.СтавкаНДС = СтавкаНДС;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Доход, Действия, КэшЗначений);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации(ПоказыватьРеквизитыТТН)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                        Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                      Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеНомер",                 Объект.ОснованиеНомер);
	СтруктураПараметров.Вставить("ОснованиеДата",                  Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("Отпустил",                       Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 Ложь);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",         ПоказыватьРеквизитыТТН);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "РеализацияУслугПрочихАктивов");
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ТаблицаОснованийДляПечати",      ТаблицаОснованийДляПечати);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ХозяйственнаяОперация");
	СтруктураПараметров.Вставить("НеПоказыватьРеквизиты", МассивРеквизитов);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактуры()
	
	ТекстСчетФактура = ПродажиСервер.ПредставлениеСчетаФактурыВДокументеПродажи(Объект.Ссылка, Объект.Организация);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
																									Объект.НалогообложениеНДС,
																									ВалютаОплаты);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ИзмениласьВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов <> Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалюта = РезультатЗакрытия.Валюта <> Объект.Валюта;
		
		Объект.Валюта = РезультатЗакрытия.Валюта;
		
		Если ИзмениласьВалюта Тогда
			
			Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Доходы") 
				И РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
				
				ВалютаПриИзмененииСервер(ВалютаДокумента, Объект.Валюта);
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
				
			КонецЕсли;
			
			ВалютаДокумента = Объект.Валюта;
			
		КонецЕсли;
		
		Объект.ВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов;
		
		Если ИзмениласьВалютаВзаиморасчетов Тогда
			
			ЗаполнитьДоговорПоУмолчанию();
			НастроитьЭлементыФормы();
			ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
			ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
			ЗаполнитьПорядокОплатыПоУмолчанию();
			ОчиститьРасшифровкуПлатежа();
			
		КонецЕсли;
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись()
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Объект.Курс, Объект.Кратность);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект.Доходы,
			0,
			"СуммаВзаиморасчетов");
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Объект, "Доходы", СтруктураКурса);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьВалюты(Форма)
	
	ПараметрыНадписиВалюты = ВзаиморасчетыКлиентСервер.ПараметрыНадписиВалюты();
	
	ПараметрыНадписиВалюты.ВалютаДокумента      = Форма.ВалютаДокумента;
	ПараметрыНадписиВалюты.ВалютаВзаиморасчетов = Форма.ВалютаВзаиморасчетовДокумента;
	ПараметрыНадписиВалюты.ВалютаРеглУчета      = Форма.ВалютаРегламентированногоУчета;
	ПараметрыНадписиВалюты.СуммаДокумента       = Форма.Объект.Доходы.Итог("СуммаСНДС");
	ПараметрыНадписиВалюты.СуммаВзаиморасчетов  = Форма.Объект.Доходы.Итог("СуммаВзаиморасчетов");
	ПараметрыНадписиВалюты.Курс                 = Форма.Объект.Курс;
	ПараметрыНадписиВалюты.Кратность            = Форма.Объект.Кратность;
	
	Форма.НадписьВалюты = ВзаиморасчетыКлиентСервер.СформироватьНадписьВалюты(ПараметрыНадписиВалюты);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасшифровкуПлатежа()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
