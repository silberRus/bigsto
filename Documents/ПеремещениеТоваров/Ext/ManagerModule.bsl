#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.СкладПолучатель   КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	Шапка.СпособДоставки    КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Шапка.СкладОтправитель  КАК Склад,
	|	ИСТИНА                  КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В (&Ссылки)
	|	И (НЕ Шапка.ПеремещениеПоЗаказам
	|		ИЛИ Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПеремещения") Тогда
		Документы.АктОРасхожденияхПослеПеремещения.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЕсли;
	
	Документы.ПередачаТоваровМеждуОрганизациями.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.УпаковочныйЛист.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Перемещение товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПеремещениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПеремещениеТоваров";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Перемещение товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.ПеремещениеТоваровСоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНаОснованииЗаказа";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Перемещение товаров'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПеремещениеТоваров";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Перемещение товаров".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииПоГруппеСкладов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПеремещениеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПеремещениеТоваров";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОстаткиТоваровОрганизаций(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - 
//  МассивВсехРеквизитов	 - Массив									 - Массив всех реквизитов, зависимых от хозяйственной операции
//  МассивРеквизитовОперации - Массив									 - Массив имен реквизитов, используемыз в выбранной хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ОрганизацияПолучатель");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
	КонецЕсли;
	
КонецПроцедуры

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "СкладОтправитель,СкладПолучатель,Статус,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// 
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	
	ПараметрыСерийСкладаОтправитель = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладОтправитель, Ложь);
	ПараметрыСерийСкладаПолучатель  = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладПолучатель, Ложь);
	
	ИспользоватьОрдернуюСхемуПолучатель  = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель, Объект.Дата, Ложь);
	ИспользоватьОрдернуюСхемуОтправитель = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры
														Или (ПараметрыСерийСкладаПолучатель.ИспользоватьСерииНоменклатуры
														И Не ИспользоватьОрдернуюСхемуПолучатель)
														Или ПараметрыСерийСкладаПолучатель.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСкладаОтправитель.УчитыватьСебестоимостьПоСериям
														Или ПараметрыСерийСкладаПолучатель.УчитыватьСебестоимостьПоСериям;
														
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
	Если Объект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято Тогда
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению);
	КонецЕсли;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("НазначениеОтправителя");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ИмяПоляСклад = "СкладОтправитель";
	
	ПараметрыУказанияСерий.ИмяПоляСкладОтправитель = "СкладОтправитель";
	ПараметрыУказанияСерий.ИмяПоляСкладПолучатель  = "СкладПолучатель";
	
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерий.ПланированиеОтбора   = Ложь;
	ПараметрыУказанияСерий.ФактОтбора           = Объект.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено
	                                             Или Объект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	
	ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Товары_ЗаказНаПеремещение");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("ПеремещениеПоЗаказам");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа
// 
// Возвращаемое значение:
//  ДокументСсылка - распоряжение на поступление или отгрузку
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Если ЗначенияПолейДляОпределенияРаспоряжения.ПеремещениеПоЗаказам Тогда 
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Товары_ЗаказНаПеремещение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.НазначениеОтправителя,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.НазначениеОтправителя,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.НазначениеОтправителя,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.НазначениеОтправителя,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.НазначениеОтправителя,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.НазначениеОтправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|									ТОГДА 6
	|								ИНАЧЕ 8
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|								ТОГДА 5
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|				И &ФактОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И &Дата >= СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 8
	|					ИНАЧЕ 7
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УказыватьПриПриемке
	|				И ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|								И ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	Товары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправительСтарый,
	|	Товары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучательСтарый
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТоварыДляЗапроса.Номенклатура = Товары.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = Товары.Характеристика
	|			И ТоварыДляЗапроса.Назначение = Товары.Назначение
	|			И ТоварыДляЗапроса.НазначениеОтправителя = Товары.НазначениеОтправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|			И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|			И ТоварыДляЗапроса.НазначениеОтправителя = СерииДляЗапроса.НазначениеОтправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийОтправитель
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладОтправитель
	|			ПО (СкладОтправитель.Ссылка = &СкладОтправитель)
	|				И (ПолитикиУчетаСерийОтправитель.Склад = &СкладОтправитель)
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерийОтправитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПолучатель
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладПолучатель
	|			ПО (СкладПолучатель.Ссылка = &СкладПолучатель)
	|				И (ПолитикиУчетаСерийПолучатель.Склад = &СкладПолучатель)
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерийПолучатель.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки,
	|	Статусы.СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА &ПриемкаПоПеремещению
	|			ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР
	|		КОГДА Статусы.СтатусУказанияСерийПолучатель В (13, 14, 9, 10)
	|				И Статусы.СтатусУказанияСерийОтправитель <> 0
	|			ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|		КОГДА Статусы.СтатусУказанияСерийОтправитель В (5, 6)
	|			ТОГДА Статусы.СтатусУказанияСерийОтправитель
	|		КОГДА Статусы.СтатусУказанияСерийОтправитель > ВЫБОР
	|				КОГДА &ПриемкаПоПеремещению
	|					ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА Статусы.СтатусУказанияСерийОтправитель
	|		ИНАЧЕ ВЫБОР
	|				КОГДА &ПриемкаПоПеремещению
	|					ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	(Статусы.СтатусУказанияСерийОтправитель <> Статусы.СтатусУказанияСерийОтправительСтарый
	|			ИЛИ ВЫБОР
	|				КОГДА &ПриемкаПоПеремещению
	|					ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|				ИНАЧЕ 0
	|			КОНЕЦ <> Статусы.СтатусУказанияСерийПолучательСтарый
	|			ИЛИ ВЫБОР
	|				КОГДА Статусы.СтатусУказанияСерийПолучатель В (13, 14, 9, 10)
	|						И Статусы.СтатусУказанияСерийОтправитель <> 0
	|					ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|				КОГДА Статусы.СтатусУказанияСерийОтправитель В (5, 6)
	|					ТОГДА Статусы.СтатусУказанияСерийОтправитель
	|				КОГДА Статусы.СтатусУказанияСерийОтправитель > ВЫБОР
	|						КОГДА &ПриемкаПоПеремещению
	|							ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|					ТОГДА Статусы.СтатусУказанияСерийОтправитель
	|				ИНАЧЕ ВЫБОР
	|						КОГДА &ПриемкаПоПеремещению
	|							ТОГДА Статусы.СтатусУказанияСерийПолучатель
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ <> Статусы.СтатусУказанияСерийСтарый)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статусы.НомерСтроки";
	
	Возврат ТекстЗапроса;	
КонецФункции

// Процедура заполняет серии товаров по расходным ордерам, выписанным на основе этого документа
//
// Параметры:
//  Объект - ДокументОбъект или ДанныеФормыСтуктура - заполняемый документ
//
Процедура ЗаполнитьСерииПоОтгрузке(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьОрдернуюСхемуПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Объект.СкладОтправитель, Объект.Дата);
	ИспользоватьОрдернуюСхемуПриПоступлении = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.СкладПолучатель, Объект.Дата);
	
	ИспользуютсяСерииОтправитель = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.СкладОтправитель));
	ИспользуютсяСерииПолучатель  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.СкладПолучатель));
	
	Если Не ИспользоватьОрдернуюСхемуПриОтгрузке
		Или ИспользоватьОрдернуюСхемуПриПоступлении
		Или Не ИспользуютсяСерииОтправитель
		Или Не ИспользуютсяСерииПолучатель Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|ПОМЕСТИТЬ РасходныеОрдера
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	&ПеремещениеПоЗаказам
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В(&Распоряжения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	НЕ &ПеремещениеПоЗаказам
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСерий.Серия,
	|	СУММА(ОстаткиСерий.Количество) КАК Количество,
	|	ОстаткиСерий.Номенклатура,
	|	ОстаткиСерий.Характеристика,
	|	ОстаткиСерий.НазначениеОтправителя КАК НазначениеОтправителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтгружаемыеТовары.Серия КАК Серия,
	|		ОтгружаемыеТовары.Количество КАК Количество,
	|		ОтгружаемыеТовары.Номенклатура КАК Номенклатура,
	|		ОтгружаемыеТовары.Характеристика КАК Характеристика,
	|		ОтгружаемыеТовары.Назначение КАК НазначениеОтправителя
	|	ИЗ
	|		РасходныеОрдера КАК РасходныеОрдера
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК ОтгружаемыеТовары
	|			ПО РасходныеОрдера.Ссылка = ОтгружаемыеТовары.Ссылка
	|	ГДЕ
	|		ОтгружаемыеТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|		И ОтгружаемыеТовары.Ссылка.Проведен
	|		И ОтгружаемыеТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить)
	|		И ОтгружаемыеТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧТовары.Серия,
	|		-ТЧТовары.Количество,
	|		ТЧТовары.Номенклатура,
	|		ТЧТовары.Характеристика,
	|		ТЧТовары.НазначениеОтправителя
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ТЧТовары
	|	ГДЕ
	|		ТЧТовары.Ссылка.Проведен
	|		И ТЧТовары.ЗаказНаПеремещение В(&Распоряжения)
	|		И ТЧТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		И ТЧТовары.Ссылка <> &Распоряжение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТЧСерии.Серия,
	|		-ТЧСерии.Количество,
	|		ТЧСерии.Номенклатура,
	|		ТЧСерии.Характеристика,
	|		ТЧСерии.НазначениеОтправителя
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ТЧТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Серии КАК ТЧСерии
	|			ПО ТЧТовары.Ссылка = ТЧСерии.Ссылка
	|				И ТЧТовары.Номенклатура = ТЧСерии.Номенклатура
	|				И ТЧТовары.Характеристика = ТЧСерии.Характеристика
	|				И ТЧТовары.Назначение = ТЧСерии.Назначение
	|				И ТЧТовары.НазначениеОтправителя = ТЧСерии.НазначениеОтправителя
	|	ГДЕ
	|		ТЧТовары.Ссылка.Проведен
	|		И ТЧТовары.ЗаказНаПеремещение В(&Распоряжения)
	|		И ТЧТовары.Ссылка <> &Распоряжение) КАК ОстаткиСерий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСерий.Серия,
	|	ОстаткиСерий.Характеристика,
	|	ОстаткиСерий.Номенклатура,
	|	ОстаткиСерий.НазначениеОтправителя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиСерий.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ПоляСвязи,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки1,
	|	ТаблицаТовары.Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПолучатель
	|		ПО (ПолитикиУчетаСерийПолучатель.Склад = &СкладПолучатель)
	|			И (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПолучатель.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийОтправитель
	|		ПО (ПолитикиУчетаСерийПолучатель.Склад = &СкладОтправитель)
	|			И (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПолучатель.Ссылка)
	|ГДЕ
	|	(ЕСТЬNULL(ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ПоляСвязи,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийПолучатель
	|		ПО (ПолитикиУчетаСерийПолучатель.Склад = &СкладПолучатель)
	|			И (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПолучатель.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийОтправитель
	|		ПО (ПолитикиУчетаСерийПолучатель.Склад = &СкладОтправитель)
	|			И (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийПолучатель.Ссылка)
	|ГДЕ
	|	(НЕ ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				И НЕ ПолитикиУчетаСерийПолучатель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ИЛИ НЕ ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				И НЕ ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ПоляСвязи,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	ПоляСвязи = "";
	ПоляСвязиВЗапрос = "";
	Запятая = "";
	Для Каждого Поле Из ПараметрыУказанияСерий(Объект).ПоляСвязи Цикл
		ПоляСвязи = Поле + Запятая + ПоляСвязи;
		ПоляСвязиВЗапрос = ПоляСвязиВЗапрос + "
			|	ТаблицаТовары." + Поле + ",";
		Запятая = ",";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаТовары.ПоляСвязи,", ПоляСвязиВЗапрос);
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивРаспоряжений = Новый Массив;
	Если Объект.ПеремещениеПоЗаказам Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			МассивРаспоряжений.Добавить(СтрокаТовары.ЗаказНаПеремещение);
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("Распоряжения", МассивРаспоряжений);
	Запрос.УстановитьПараметр("Распоряжение", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПеремещениеПоЗаказам", Объект.ПеремещениеПоЗаказам);
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить(,"НомерСтроки,Номенклатура,Характеристика,Количество," + ПоляСвязи));
	Запрос.УстановитьПараметр("СкладПолучатель", Объект.СкладПолучатель);
	Запрос.УстановитьПараметр("СкладОтправитель", Объект.СкладОтправитель);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаСерийОрдера = РезультатЗапроса[1].Выгрузить();
	
	СтруктураПоиска= Новый Структура("Номенклатура, Характеристика, НазначениеОтправителя");
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	
	ВыборкаНомеровСтрокССериямиВТЧТовары = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаНомеровСтрокССериямиВТЧТовары.Следующий() Цикл
		СтрокаССериямиВТЧТовары = Объект.Товары[ВыборкаНомеровСтрокССериямиВТЧТовары.НомерСтроки - 1];
		//Заполнить колонку "Серия" в табличной части "Товары"
		ОстатокПоТовару = СтрокаССериямиВТЧТовары.Количество;
		Если ЗначениеЗаполнено(СтрокаССериямиВТЧТовары.Серия) Тогда
			СтруктураПоиска= Новый Структура("Номенклатура, Характеристика, НазначениеОтправителя, Серия");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаССериямиВТЧТовары);
		МассивСтрокТабСерий = ТаблицаСерийОрдера.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокТабСерий.Количество() > 0 Тогда
			ПерваяСтрока = Истина;
			Для Каждого Стр Из МассивСтрокТабСерий Цикл
				Если Не ПерваяСтрока Тогда
					НоваяСтрока = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаССериямиВТЧТовары);
					СтрокаССериямиВТЧТовары = НоваяСтрока;
				КонецЕсли;
				ПерваяСтрока = Ложь;
				СтрокаССериямиВТЧТовары.Серия = Стр.Серия;
				КоличествоЗаполнения = Мин(ОстатокПоТовару,Стр.Количество);
				СтрокаССериямиВТЧТовары.Количество = КоличествоЗаполнения;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаССериямиВТЧТовары, СтруктураДействий, Неопределено);
				Стр.Количество  = Стр.Количество  - КоличествоЗаполнения;
				ОстатокПоТовару = ОстатокПоТовару - КоличествоЗаполнения;
				Если Стр.Количество = 0 Тогда
					ТаблицаСерийОрдера.Удалить(Стр);
				КонецЕсли;
				Если ОстатокПоТовару = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокаССериямиВТЧТовары.Количество = 0;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаССериямиВТЧТовары, СтруктураДействий, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Серии.Очистить();
	// Нужно обойти Товары, чтобы распределить серии по полям связи, которых в ордере нет (Назначение)
	ВыборкаТовары = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл
		ОстатокПоТовару = ВыборкаТовары.Количество;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаТовары);
		МассивСтрокТабСерий = ТаблицаСерийОрдера.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТабСерий Из МассивСтрокТабСерий Цикл
			НоваяСтрокаТЧСерии = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧСерии,ВыборкаТовары);
			НоваяСтрокаТЧСерии.Серия = СтрокаТабСерий.Серия;
			КоличествоЗаполнения = Мин(ОстатокПоТовару,СтрокаТабСерий.Количество);
			НоваяСтрокаТЧСерии.Количество = КоличествоЗаполнения;
			СтрокаТабСерий.Количество = СтрокаТабСерий.Количество - КоличествоЗаполнения;
			ОстатокПоТовару           = ОстатокПоТовару           - КоличествоЗаполнения;
			Если СтрокаТабСерий.Количество = 0 Тогда
				ТаблицаСерийОрдера.Удалить(СтрокаТабСерий);
			КонецЕсли;
			Если ОстатокПоТовару = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПеремещенийТоваров[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                    КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен               КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления        КАК ПометкаУдаления,
	|	ИСТИНА                                   КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции// СформироватьЗапросПроверкиПриСменеСтатуса();

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
// 		ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
// 		НовыйСтатус - Перечисление - Новый статус
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "ПеремещениеТоваров" отсутствуют дополнительные проверки
	
КонецФункции

// Формирует структуру для создания перемещения товаров по одному или нескольким заказам на перемещение
// 		Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке
//
// Параметры:
//  МассивСсылок - Массив - заказы на перемещение, по которым необходимо ввести накладную
// 	РеквизитыШапки - Структура - структура, в которую будут помещены реквизиты шапки из массива заказов
//
// Возвращаемое значение:
// 	Булево - Ложь, если в переданных заказах отличаются реквизиты шапки
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений();
	ТекстыЗапроса.Добавить(СозданиеНаОснованииПроверкаОтгрузить(),       "ТаблицаЕстьОтгрузить");
	ТекстыЗапроса.Добавить(СозданиеНаОснованииПроверкаРеквизитовШапки(), "ТаблицаРеквизитыШапки");
	
	СначалаОрдера = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
		= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера;
	
	Если СначалаОрдера Тогда
		ТекстыЗапроса.Добавить(СозданиеНаОснованииПроверкаНаличияОрдеров(), "ТаблицаЕстьОрдера");
	КонецЕсли;
	
	Таблицы = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками", ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	
	// Данные шапки и складские признаки должны быть получены без ограничений
	УстановитьПривилегированныйРежим(Истина);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РеквизитыШапки = Новый Структура("ХозяйственнаяОперация, РазличныхОпераций,
	                                 |Организация, РазличныхОрганизаций,
	                                 |ОрганизацияПолучатель, РазличныхОрганизацийПолучателей,
	                                 |СкладОтправитель, РазличныхСкладовОтправителей,
	                                 |СкладПолучатель, РазличныхСкладовПолучателей,
	                                 |ЕстьНесовместимыеСпособыДоставки,
	                                 |Подразделение,
	                                 |НаправлениеДеятельности, ВидЦены,
	                                 |Статус,
	                                 |АдресДоставки,
	                                 |АдресДоставкиЗначенияПолей,
	                                 |СпособДоставки,
	                                 |ПеревозчикПартнер,
	                                 |ВариантПриемкиТоваров, РазличныхВариантовПриемкиТоваров,
	                                 |ДополнительнаяИнформацияПоДоставке");
	ЗаполнитьЗначенияСвойств(РеквизитыШапки, Таблицы.ТаблицаРеквизитыШапки[0]);
	РеквизитыШапки.Вставить("ЗаказПроведен", Таблицы.ТаблицаРеквизитыШапки[0].Проведен);
	
	РеквизитыШапки.Вставить("Склад", РеквизитыШапки.СкладОтправитель);
	
	РеквизитыШапки.Вставить("ЕстьОтгрузить", Таблицы.ТаблицаЕстьОтгрузить.Количество() > 0);
	РеквизитыШапки.Вставить("ЕстьОрдера",    Не СначалаОрдера Или Таблицы.ТаблицаЕстьОрдера.Количество() > 0);
	
	Возврат РеквизитыШапки;
	
КонецФункции

// Проверяет возможность создания перемещения на основании структуры данных для заполнения перемещения.
//
//  Параметры:
//   РеквизитыШапки - Структура - структура с полями:
//                                РазличныхОпераций,
//                                РазличныхОрганизаций,
//                                РазличныхОрганизацийПолучателей,
//                                РазличныхСкладовОтправителей,
//                                РазличныхСкладовПолучателей,
//                                РазличныхПодразделений,
//                                РазличныхВариантовПриемкиТоваров,
//                                ЕстьНесовместимыеСпособыДоставки.
//
//  Возвращаемое значение:
//   Булево - Истина, если одно перемещение создать возможно, иначе - ложь.
//
Функция ПроверитьДанныеЗаполненияНакладной(РеквизитыШапки) Экспорт
	
	ТекстыОшибок = Новый Массив();
	Если Не РеквизитыШапки.ЕстьОтгрузить Тогда
		ТекстыОшибок.Добавить(ОбеспечениеСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки());
	КонецЕсли;
	
	Если РеквизитыШапки.РазличныхОпераций > 1 Тогда
		ТекстыОшибок.Добавить(НСтр("ru='У выбранных заказов на перемещение отличается операция'"));
	КонецЕсли;
	
	Если РеквизитыШапки.ЕстьНесовместимыеСпособыДоставки Тогда
		ТекстыОшибок.Добавить(НСтр("ru='В одном из выделенных распоряжений указан способ доставки ""Перевозчик (с нашего склада)"",
			|несовместимый со способами доставки других выделенных распоряжений.'"))
	КонецЕсли;
	
	ШаблонПредупреждения = НСтр("ru='У выбранных заказов на перемещение отличается поле ""%ПредставлениеПоля%""'");
	
	Если РеквизитыШапки.РазличныхОрганизаций > 1 Тогда
		
		ПредставлениеПоля = НСтр("ru='Организация'");
		Если РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
			ПредставлениеПоля = НСтр("ru='Организация-отправитель'");
		КонецЕсли;
		ТекстыОшибок.Добавить(СтрЗаменить(ШаблонПредупреждения, "%ПредставлениеПоля%", ПредставлениеПоля));
		
	КонецЕсли;
	
	Если РеквизитыШапки.РазличныхОрганизацийПолучателей > 1 Тогда
		ПредставлениеПоля = НСтр("ru='Организация-получатель'");
		ТекстыОшибок.Добавить(СтрЗаменить(ШаблонПредупреждения, "%ПредставлениеПоля%", ПредставлениеПоля));
	КонецЕсли;
	
	Если РеквизитыШапки.РазличныхСкладовОтправителей > 1 Тогда
		ПредставлениеПоля = НСтр("ru='Склад-отправитель'");
		ТекстыОшибок.Добавить(СтрЗаменить(ШаблонПредупреждения, "%ПредставлениеПоля%", ПредставлениеПоля));
	КонецЕсли;
	
	Если РеквизитыШапки.РазличныхСкладовПолучателей > 1 Тогда
		ПредставлениеПоля = НСтр("ru='Склад-получатель'");
		ТекстыОшибок.Добавить(СтрЗаменить(ШаблонПредупреждения, "%ПредставлениеПоля%", ПредставлениеПоля));
	КонецЕсли;
	
	Если РеквизитыШапки.РазличныхВариантовПриемкиТоваров > 1 Тогда
		ПредставлениеПоля = НСтр("ru='Вариант приемки товаров'");
		ТекстыОшибок.Добавить(СтрЗаменить(ШаблонПредупреждения, "%ПредставлениеПоля%", ПредставлениеПоля));
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru='Нет данных для заполнения документа, так как отгрузка по заказу еще не начата.'");
	
	Результат = Новый Структура("ЕстьОшибки, ТекстОшибки, ЕстьПредупреждения, ТекстПредупреждения");
	Результат.ЕстьОшибки          = ТекстыОшибок.Количество() > 0;
	Результат.ТекстОшибки         = ТекстыОшибок;
	Результат.ЕстьПредупреждения  = Не РеквизитыШапки.ЕстьОрдера;
	Результат.ТекстПредупреждения = ТекстПредупреждения;
	
	Возврат Результат;
	
КонецФункции


// Возвращает результат запроса для заполнения накладной по заказам/ордерам
//
// Параметры:
//  ДанныеОтбора   - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//  КонтекстВызова - Строка - определяет контекст вызова процедуры: "Подбор", "Заполнение".
//
// Возвращаемое значение:
//  Результат - Выборка, Структура - выборка результата запроса, либо структура содержащая выборку результата запроса
//                                   и дополнительные данные для заполнения.
//
Функция РезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, КонтекстВызова) Экспорт
	
	// Описание всех возможных параметров запроса.
	ПараметрыЗапросов = Новый Структура("ОтобратьПоЗаказу, МассивЗаказов,
	                                    |Организация, СкладОтправитель, СкладПолучатель,
	                                    |Регистратор, ТоварыНакладной");
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Ложь);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Ложь);
	
	СписокЗапросов   = Новый СписокЗначений();
	ИменаПодзапросов = Новый Массив();
	
	// Обработка параметров вызова метода.
	Если КонтекстВызова = "СозданиеНаОсновании" Тогда
		
		ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "Подбор" Тогда
		
		ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ПерезаполнениеПоОрдерам" Тогда
		
		ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	ИначеЕсли КонтекстВызова = "ЗаполнениеПоЗаказам" Тогда
		
		ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, СписокЗапросов, ИменаПодзапросов, ДанныеОтбора);
		
	КонецЕсли;
	
	// Описание всех возможных текстов запросов.
	ТекстыЗапросов = Новый Соответствие();
	ТекстыЗапросов.Вставить("ВтЗаказыОтбор",    ТекстЗапросаВременнойТаблицыРаспоряжений());
	ТекстыЗапросов.Вставить("ВтНакладная",      ТекстЗапросаВременнойТаблицыНакладной());
	ТекстыЗапросов.Вставить("ТаблицаОтгружено", ТекстЗапросаОтгруженоПоОрдерам());
	
	// Используемые подзапросы для формирования таблицы "ТаблицаОформить" должны быть обернуты методом ТекстЗапросаОбъединения(...).
	ТекстыПодзапросов = Новый Соответствие();
	ТекстыПодзапросов.Вставить("БлокРегистрЗаказы",          ТекстЗапросаОстаткиРегистраЗаказы());
	ТекстыПодзапросов.Вставить("БлокСторноНакладная",        ТекстЗапросаСторноНакладная());
	ТекстыПодзапросов.Вставить("БлокНовыеДвиженияНакладная", ТекстЗапросаНовыеДвиженияНакладная());
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Элемент.Представление = ТекстыЗапросов[Элемент.Значение];
	КонецЦикла;
	
	Элемент = СписокЗапросов.НайтиПоЗначению("ТаблицаОформить");
	Если Элемент <> Неопределено Тогда
		Элемент.Представление = ТекстЗапросаОбъединения(ИменаПодзапросов, ТекстыПодзапросов);
	КонецЕсли;
	
	// Инициализация запроса.
	Запрос = Новый Запрос();
	
	Для Каждого Параметр Из ПараметрыЗапросов Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Для Каждого Элемент Из СписокЗапросов Цикл
		Запрос.Текст = Запрос.Текст + Элемент.Представление;
	КонецЦикла;
	
	// Выполнение запроса, возврат результата.
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураРезультата = Новый Структура();
	Для Каждого Элемент Из СписокЗапросов Цикл
		СтруктураРезультата.Вставить(Элемент.Значение, РезультатЗапроса[СписокЗапросов.Индекс(Элемент)].Выгрузить());
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
// 
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//     * ВыводитьТаблицыОтгрузка     - Число - 
//     * ВыводитьТаблицыПоступление  - Число - 
//     * ЭтоНакладная                - Булево - 
//     * СкладВШапке                 - Булево - 
//     * ИмяПоляСклад                - Строка - 
//     * ИмяПоляСкладПолучатель      - Строка - 
//     * ТекстТоварУслугаОтгрузка    - Строка - 
//     * ТекстТоварУслугаПоступление - Строка - 
//     * ИмяПоляНакладнаяПоЗаказам   - Строка - 
//     * СтруктураДопЗапросов        - Структура - содержит следующие ключи:
//        ** ТекстЗапросаВТТоварыПоступление - Строка - 
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",    1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 2);
	СтруктураСостояние.Вставить("ЭтоНакладная", Истина);
	СтруктураСостояние.Вставить("СкладВШапке",  Истина);
	СтруктураСостояние.Вставить("ИмяПоляСклад",           "СкладОтправитель");
	СтруктураСостояние.Вставить("ИмяПоляСкладПолучатель", "СкладПолучатель");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ИмяПоляНакладнаяПоЗаказам", "ПеремещениеПоЗаказам");
	
	ТекстЗапросаВТТоварыПоступление = ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения();
	
	СтруктураДопЗапросов = Новый Структура();
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыПоступление", ТекстЗапросаВТТоварыПоступление);
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние;
	
КонецФункции

#Область Заполнение

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",         Неопределено);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта",          Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру",     Ложь);
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",        Неопределено);
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",          "ПеремещениеТоваров");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ",      "ЗаказыНаПеремещение");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",          "ЗаказНаПеремещение");
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",          "Номенклатура, Характеристика, Серия, Назначение");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию получаемые в методе ПараметрыЗаполненияДокумента()
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов	= МассивЗаказов;
	
	ПараметрыЗаполнения.РеквизитыШапки	= РеквизитыШапки;
	
КонецПроцедуры

// Процедура заполняет поля объекта
//
// Параметры:
//  Объект				 - ДокументОбъект.ПеремещениеТоваров - объект для заполнения
//  ПараметрыЗаполнения	 - Структура						 - структура содержащая ключи РеквизитыШапки, ИмяРегистраЗаказ, ИмяПоляЗаказ
//  МассивЗаказов		 - Массив							 - массив заказов на перемещение
//
Процедура ЗаполнитьШапкуДокументаПоЗаказу(Объект, ПараметрыЗаполнения, МассивЗаказов) Экспорт
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения.РеквизитыШапки);
	
	Объект.ПеремещениеПоЗаказам = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам") Тогда
		Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
	Объект.Дата = ?(МассивЗаказов.Количество() = 1,
		ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ),
		ЗаказыСервер.ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(МассивЗаказов, ПараметрыЗаполнения.ИмяРегистраЗаказ, 
			ПараметрыЗаполнения.ИмяПоляЗаказ));
	
	// Заполнение серий.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект, ПараметрыУказанияСерий, Ложь);
	
	// Заполнение заказа(-ов) в шапке.
	Если МассивЗаказов.Количество() = 1 Тогда
		Объект.ЗаказНаПеремещение = МассивЗаказов[0];
	Иначе
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Объект.ЗаказНаПеремещение, Объект.Товары, ПараметрыЗаполнения.ИмяПоляЗаказ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает поле КоличествоУпаковок и другие зависимые поля
//
// Параметры:
//  Товары				 - ДанныеФормыКоллекция - Табличная часть "Товары"
//  ПараметрыЗаполнения	 - Структура - 
//
Процедура ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого Строка Из Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу Товары
//
// Параметры:
//  Накладная	 - Ссылка - Ссылка на накладную, табличную часть Товары которой необходимо вернуть
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Табличная часть документа перемещения товаров
//
Функция ДанныеТаблицыТоварыДокумента(Накладная) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки                    КАК НомерСтроки,
	|	Таблица.Номенклатура                   КАК Номенклатура,
	|	Таблица.Характеристика                 КАК Характеристика,
	|	Таблица.Упаковка                       КАК Упаковка,
	|	Таблица.КоличествоУпаковок             КАК КоличествоУпаковок,
	|	Таблица.Количество                     КАК Количество,
	|	Таблица.КодСтроки                      КАК КодСтроки,
	|	Таблица.СтатусУказанияСерий            КАК СтатусУказанияСерий,
	|	Таблица.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	|	Таблица.СтатусУказанияСерийПолучатель  КАК СтатусУказанияСерийПолучатель,
	|	ВЫБОР КОГДА Таблица.Ссылка.ПеремещениеПоЗаказам
	|		ТОГДА Таблица.ЗаказНаПеремещение
	|		ИНАЧЕ Таблица.Ссылка
	|	КОНЕЦ                                  КАК ЗаказНаПеремещение,
	|	Таблица.Сделка                         КАК Сделка,
	|	Таблица.Назначение                     КАК Назначение,
	|	Таблица.НазначениеОтправителя          КАК НазначениеОтправителя,
	|	Таблица.Серия                          КАК Серия,
	|	Таблица.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	Таблица.ИдентификаторСтроки            КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Накладная";
	
	Запрос.УстановитьПараметр("Накладная",                      Накладная);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение переданного параметра Таблица по заказам и складским ордерам
//
// Параметры:
//  Товары				 - ТаблицаЗначений - Таблица Товары для заполнения
//  Регистратор			 - ДокументСсылка.ПеремещениеТоваров - Ссылка на текущую накладную
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию определены в методе ПараметрыЗаполненияДокумента()
//
Процедура ЗаполнитьПоЗаказамОрдерам(Товары, Регистратор, ПараметрыЗаполнения) Экспорт
	
	ТекстРазделителя = НакладныеСервер.ТекстРазделителяЗапросов();
	
	КлючевыеПоля = "ЗаказНаПеремещение, Номенклатура, Характеристика, Серия, НазначениеОтправителя";
	
	// Если не нужно заполнять по ордеру, передаем пустые параметры запроса - по ордерам вернется пустая таблица
	Если ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		РаспоряженияДляОрдеров = ПараметрыЗаполнения.МассивЗаказов;
		РегистраторДляОрдеров  = Регистратор;
	Иначе
		РаспоряженияДляОрдеров = Неопределено;
		РегистраторДляОрдеров  = Неопределено;
	КонецЕсли;
	
	// Заказы
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЗаказНаПеремещение", "Распоряжения");
	
	ТекстЗапросаРегистраЗаказы = РегистрыНакопления.ЗаказыНаПеремещение.ТекстЗапросаОстатки(
		"ВтДанныеУчета",
		Отбор,
		"КОформлению <> 0");
		
	Отбор = Новый Структура();
	Отбор.Вставить("Ссылка", "Распоряжения");
	
	ТекстЗапросаЗаказ = Документы.ЗаказНаПеремещение.ТекстЗапросаТоварыДокумента(Отбор);
	
	ТекстЗапроса = ТекстЗапросаРегистраЗаказы
					+ ТекстРазделителя
					+ ТекстЗапросаЗаказ;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжения", ПараметрыЗаполнения.МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",  Регистратор);
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаказы.Колонки.КОформлению.Имя = "КоличествоВЗаказе";
	
	// Расходные ордера
	Запрос = Новый Запрос();
	
	ТекстЗапросаОсталосьОформить = РегистрыНакопления.ТоварыКОтгрузке.ТекстЗапросаОсталосьОформить();
	
	Запрос.Текст = ТекстЗапросаОсталосьОформить;
	
	Запрос.УстановитьПараметр("Распоряжения",  РаспоряженияДляОрдеров);
	Запрос.УстановитьПараметр("Регистратор",   РегистраторДляОрдеров);
	
	ТаблицаОрдера = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОрдера.Колонки.Количество.Имя   = "КоличествоВОрдере";
	ТаблицаОрдера.Колонки.Распоряжение.Имя = "ЗаказНаПеремещение";
	ТаблицаОрдера.Колонки.Собирается.Имя   = "КоличествоСобирается";
	
	ТаблицаОрдера.Колонки.Назначение.Имя   = "НазначениеОтправителя";
	
	// Распределение полученных таблиц
	
	Товары.Индексы.Добавить(КлючевыеПоля);
	
	// Добавление количества заказов
	Ключ = "ЗаказНаПеремещение, КодСтроки";
	
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаЗаказы, Товары, "КоличествоВЗаказе", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества заказов
	НакладныеСервер.ДополнитьТаблицу(ТаблицаЗаказы, Товары, "КоличествоВЗаказе");
	
	// Добавление количества ордеров.
	Ключ = КлючевыеПоля;
	
	// Есть накладные и заказы
	Условие = "[Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть заказы, нет накладных
	Условие = "НЕ [Количество], [КоличествоВЗаказе], ПО [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Есть накладные, нет заказов
	Условие = "[Количество], НЕ [КоличествоВЗаказе]";
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоВОрдере", Ключ, Условие, Истина);
	
	// Добавление отдельными строками нераспределенного количества ордеров
	НакладныеСервер.ДополнитьТаблицу(ТаблицаОрдера, Товары, "КоличествоВОрдере");
	
	// Дополнительная информация - сколько товара собирается
	НакладныеСервер.РаспределитьКоличество(ТаблицаОрдера, Товары, "КоличествоСобирается", Ключ, "", Истина);
	
КонецПроцедуры

// Возвращает массив содержащий переданную накладную, а так же:
// А. Заказ из массива заказов (если в массиве один элемент)
// Б. Все заказы которые подходят под отбор по Организации, 
// 	складу-отправителю и складу-получателю (если в массиве не один элемент)
//
// Параметры:
//  Накладная		 - ДокументСсылка.ПеремещениеТоваров - 
//  МассивЗаказов	 - Массив - Массив заказов на перемещение
//  РеквизитыШапки	 - Структура - Должна содержать ключи Организация, СкладОтправитель и СкладПолучатель
// 
// Возвращаемое значение:
//  Массив - массив документов ЗаказНаПеремещение
//
Функция РаспоряженияНакладной(Накладная, МассивЗаказов, РеквизитыШапки) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",        МассивЗаказов.Количество() = 1);
	Запрос.УстановитьПараметр("Регистратор",             Накладная);
	Запрос.УстановитьПараметр("МассивЗаказов",           МассивЗаказов);
	Запрос.УстановитьПараметр("Организация",             РеквизитыШапки.Организация);
	Запрос.УстановитьПараметр("СкладОтправитель",        РеквизитыШапки.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",         РеквизитыШапки.СкладПолучатель);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказНаПеремещение.Ссылка В (&МассивЗаказов)
		|		ИНАЧЕ ЗаказНаПеремещение.Организация      = &Организация
		|			И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
		|			И ЗаказНаПеремещение.СкладПолучатель  = &СкладПолучатель
		|	КОНЕЦ
		|	И ЗаказНаПеремещение.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Заказ";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	
КонецФункции

#КонецОбласти

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка()
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
	
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
		
		ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыПеремещенийТоваров.Отгружено);
		ОбщегоНазначенияУТ.ДобавитьСтрокуВТаблицуСтатусовИзменяемыхИзСписка(Таблица, Перечисления.СтатусыПеремещенийТоваров.Принято);
		
	КонецЕсли;
	
	Возврат Таблица
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru='Только назначения направления деятельности ""%1""'"));
	
	// Остатки товаров на складе-отправителе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Отправитель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.СкладОтправитель";
	
	// Потребности в товарах на складе-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Получатель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.СкладПолучатель";
	
	// Потребности в товарах на складе-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Товары.Назначение", "ВсеСклады");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры);

	ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                КАК Ссылка,
	|	ДанныеДокумента.Дата                  КАК Период,
	|	ДанныеДокумента.Номер                 КАК Номер,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Подразделение         КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК КорОрганизация,
	|	ДанныеДокумента.СкладОтправитель      КАК СкладОтправитель,
	|	ДанныеДокумента.СкладПолучатель       КАК СкладПолучатель,
	|	ДанныеДокумента.СкладПолучатель.ЦеховаяКладовая КАК ЦеховаяКладоваяПолучателя,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.СкладОтправитель) КАК СкладОтправительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.СкладПолучатель)  КАК СкладПолучательПредставление,
	|	ДанныеДокумента.ЗаказНаПеремещение    КАК ЗаказНаПеремещение,
	|	ДанныеДокумента.ПеремещениеПоЗаказам  КАК ПеремещениеПоЗаказам,
	|	ДанныеДокумента.ДатаРаспоряжения      КАК ДатаРаспоряжения,
	|	ДанныеДокумента.Статус                КАК Статус,
	|	ДанныеДокумента.ПеремещениеПодДеятельность КАК ПеремещениеПодДеятельность,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Ответственный         КАК Менеджер,
	|	ДанныеДокумента.Сделка                КАК Сделка,
	|	ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ДанныеДокумента.Дата >= ДанныеДокумента.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ДанныеДокумента.Дата >= ДанныеДокумента.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Ответственный          КАК Ответственный,
	|	ДанныеДокумента.Комментарий            КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления        КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен               КАК Проведен,
	|	ДанныеДокумента.ВариантПриемкиТоваров  КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	КорОрганизация = ?(Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами, Реквизиты.КорОрганизация, Неопределено);
	
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                            Реквизиты.Номер);
	Запрос.УстановитьПараметр("Статус",                           Реквизиты.Статус);
	Запрос.УстановитьПараметр("ДатаРаспоряжения",                 Реквизиты.ДатаРаспоряжения);
	Запрос.УстановитьПараметр("Организация",                      Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",                    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель",            Реквизиты.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("СкладПолучатель",                  Реквизиты.СкладПолучатель);
	Запрос.УстановитьПараметр("СкладОтправитель",                 Реквизиты.СкладОтправитель);
	Запрос.УстановитьПараметр("ЦеховаяКладоваяПолучателя",        Реквизиты.ЦеховаяКладоваяПолучателя);
	Запрос.УстановитьПараметр("ЗаказНаПеремещение",               Реквизиты.ЗаказНаПеремещение);
	Запрос.УстановитьПараметр("ПоЗаказуНаПеремещение",            Реквизиты.ПеремещениеПоЗаказам);
	Запрос.УстановитьПараметр("ПеремещениеПодДеятельность",       Реквизиты.ПеремещениеПодДеятельность);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",            Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Менеджер",                         Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("КорОрганизация",                   КорОрганизация);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриОтгрузке",         Реквизиты.ОрдернаяСхемаПриОтгрузке);
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриПоступлении",      Реквизиты.ОрдернаяСхемаПриПоступлении);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("ИспользуетсяНазначение",           ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	ПустоеЗначениеЗаказа = Новый Массив;
	ПустоеЗначениеЗаказа.Добавить(Неопределено);
	ПустоеЗначениеЗаказа.Добавить(Документы.ЗаказНаПеремещение.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеЗначениеЗаказа",             ПустоеЗначениеЗаказа);
	Запрос.УстановитьПараметр("НомерНаПечать",                    ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("Ответственный",                    Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",          ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПеремещениеТоваров"));
	Запрос.УстановитьПараметр("Комментарий",                      Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",                  Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                         Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Сделка",                           Реквизиты.Сделка);
	Запрос.УстановитьПараметр("ОбособленныйУчетТоваровПоСделке",  Реквизиты.ОбособленныйУчетТоваровПоСделке);
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением",   НакладнаяЯвляетсяРаспоряжением);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	
	ИнформацияПоСкладуОтправителю = "";
	Если ЗначениеЗаполнено(Реквизиты.СкладОтправитель) Тогда
		ШаблонСтроки = НСтр("ru='Перемещение с ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоСкладуОтправителю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.СкладОтправительПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоСкладуОтправителю", ИнформацияПоСкладуОтправителю);
	ИнформацияПоСкладуПолучателю = "";
	Если ЗначениеЗаполнено(Реквизиты.СкладПолучатель) Тогда
		ШаблонСтроки = НСтр("ru='Перемещение на ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоСкладуПолучателю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.СкладПолучательПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоСкладуПолучателю", ИнформацияПоСкладуПолучателю);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Запрос)

	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.УстановитьПараметр("Ссылка",                 Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("СкладПолучатель",        Запрос.Параметры.СкладПолучатель);
	ЗапросАналитик.УстановитьПараметр("Статус",                 Запрос.Параметры.Статус);
	ЗапросАналитик.УстановитьПараметр("ИспользуетсяНазначение", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	ЗапросАналитик.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура        КАК Номенклатура,
	|	Таблица.Характеристика      КАК Характеристика,
	|	Таблица.Серия      КАК Серия,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.Склад              КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Аналитика.Номенклатура        КАК Номенклатура,
	|		Аналитика.Характеристика      КАК Характеристика,
	|		ТаблицаВидыЗапасов.Серия      КАК Серия,
	|		ТаблицаВидыЗапасов.Назначение КАК Назначение,
	|		&СкладПолучатель              КАК Склад
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Аналитика.Номенклатура      = Ключи.Номенклатура
	|		И Аналитика.Характеристика  = Ключи.Характеристика
	|		И ТаблицаВидыЗапасов.Серия  = Ключи.Серия
	|		И ТаблицаВидыЗапасов.Назначение  = Ключи.Назначение
	|		И &СкладПолучатель          = Ключи.Склад
	|
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Аналитика.Номенклатура        КАК Номенклатура,
	|		Аналитика.Характеристика      КАК Характеристика,
	|		ТаблицаВидыЗапасов.Серия      КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|		&СкладПолучатель              КАК Склад
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Аналитика.Номенклатура      = Ключи.Номенклатура
	|		И Аналитика.Характеристика  = Ключи.Характеристика
	|		И ТаблицаВидыЗапасов.Серия  = Ключи.Серия
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  = Ключи.Назначение
	|		И &СкладПолучатель          = Ключи.Склад
	|
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И Не &ИспользуетсяНазначение
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Аналитика.Номенклатура        КАК Номенклатура,
	|		Аналитика.Характеристика      КАК Характеристика,
	|		Аналитика.Серия               КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|		Аналитика.Склад               КАК Склад
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Аналитика.Номенклатура      = Ключи.Номенклатура
	|		И Аналитика.Характеристика  = Ключи.Характеристика
	|		И Аналитика.Серия  = Ключи.Серия
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)  = Ключи.Назначение
	|		И Аналитика.Склад = Ключи.Склад
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И Не &ИспользуетсяНазначение
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Аналитика.Номенклатура                              КАК Номенклатура,
	|		Аналитика.Характеристика                            КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)        КАК Назначение,
	|		СпрВидыЗапасов.ВладелецТовара                       КАК Склад
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидыЗапасов
	|		ПО СпрВидыЗапасов.Ссылка = ТаблицаВидыЗапасов.ВидЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО
	|		Аналитика.Номенклатура      = Ключи.Номенклатура
	|		И Аналитика.Характеристика  = Ключи.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = Ключи.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = Ключи.Серия
	|		И СпрВидыЗапасов.ВладелецТовара = Ключи.Склад
	|	ГДЕ
	|		ТаблицаВидыЗапасов.Ссылка = &Ссылка
	|		И СпрВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И ТаблицаВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	) КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО Таблица.Номенклатура = Ключи.Номенклатура
	|		И Таблица.Характеристика  = Ключи.Характеристика
	|		И Таблица.Серия  = Ключи.Серия
	|		И Таблица.Назначение = Ключи.Назначение
	|		И Таблица.Склад = Ключи.Склад
	|ГДЕ
	|	Ключи.Номенклатура ЕСТЬ NULL
	|";
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТовары";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.ЗаказНаПеремещение       КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	ТаблицаТовары.НазначениеОтправителя    КАК НазначениеОтправителя,
	|	ВЫБОР КОГДА &ПоЗаказуНаПеремещение ТОГДА
	|			ТоварыЗаказа.ВариантОбеспечения
	|	КОНЕЦ                                  КАК ВариантОбеспечения
	|
	|ПОМЕСТИТЬ ВтТовары
	|
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТоварыЗаказа
	|		ПО ТаблицаТовары.ЗаказНаПеремещение= ТоварыЗаказа.Ссылка
	|			И ТаблицаТовары.Номенклатура   = ТоварыЗаказа.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТоварыЗаказа.Характеристика
	|			И ТаблицаТовары.КодСтроки      = ТоварыЗаказа.КодСтроки
	|			И &ПоЗаказуНаПеремещение
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Склад.ЦеховаяКладовая КАК ЦеховаяКладоваяОтправителя,
	|	&ЦеховаяКладоваяПолучателя КАК ЦеховаяКладоваяПолучателя,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатурыОтправитель,
	|	Аналитика.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиОтправитель,
	|	АналитикаБезНазначения.КлючАналитики КАК АналитикаНоменклатурыОтправительБезНазначения,
	|	АналитикаНоменклатурыПолучатель.КлючАналитики  КАК АналитикаНоменклатурыПолучатель,
	|	АналитикаНоменклатурыПолучатель.Назначение.НаправлениеДеятельности  КАК НаправлениеДеятельностиПолучатель,
	|	АналитикаПолучательБезНазначения.КлючАналитики  КАК АналитикаНоменклатурыПолучательБезНазначения,
	|	АналитикаКомитента.КлючАналитики КАК АналитикаУчетаКомитента,
	|
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасов.Валюта КАК Валюта,
	|	ТаблицаВидыЗапасов.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовОприходование,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя.ТипЗапасов КАК ТипЗапасовОприходование,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ВидыЗапасов.РеализацияЗапасовДругойОрганизации КАК РеализацияЗапасовДругойОрганизации,
	|	ВидыЗапасов.ВидЗапасовВладельца КАК ВидЗапасовВладельца,
	|	АналитикаРасчетов.КлючАналитики КАК АналитикаРасчетовСКомитентом
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО
	|		Аналитика.Номенклатура = АналитикаБезНазначения.Номенклатура
	|		И Аналитика.Характеристика = АналитикаБезНазначения.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение
	|		И Аналитика.Серия = АналитикаБезНазначения.Серия
	|		И Аналитика.Склад = АналитикаБезНазначения.Склад
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатурыПолучатель
	|	ПО
	|		Аналитика.Номенклатура		= АналитикаНоменклатурыПолучатель.Номенклатура
	|		И Аналитика.Характеристика	= АналитикаНоменклатурыПолучатель.Характеристика
	|		И ТаблицаВидыЗапасов.Назначение = АналитикаНоменклатурыПолучатель.Назначение
	|		И ТаблицаВидыЗапасов.Серия	= АналитикаНоменклатурыПолучатель.Серия
	|		И &СкладПолучатель			= АналитикаНоменклатурыПолучатель.Склад
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПолучательБезНазначения
	|	ПО
	|		АналитикаНоменклатурыПолучатель.Номенклатура = АналитикаПолучательБезНазначения.Номенклатура
	|		И АналитикаНоменклатурыПолучатель.Характеристика = АналитикаПолучательБезНазначения.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаПолучательБезНазначения.Назначение
	|		И АналитикаНоменклатурыПолучатель.Серия = АналитикаПолучательБезНазначения.Серия
	|		И АналитикаНоменклатурыПолучатель.Склад = АналитикаПолучательБезНазначения.Склад
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаВидыЗапасов.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаРасчетов
	|		ПО АналитикаРасчетов.Организация = &Организация
	|		И АналитикаРасчетов.Партнер = ВидыЗапасов.ВладелецТовара
	|		И АналитикаРасчетов.Контрагент = ВидыЗапасов.Контрагент
	|		И АналитикаРасчетов.Договор = ВидыЗапасов.Договор
	|		И АналитикаРасчетов.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаКомитента
	|	ПО
	|		Аналитика.Номенклатура = АналитикаКомитента.Номенклатура
	|		И Аналитика.Характеристика = АналитикаКомитента.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаКомитента.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = АналитикаКомитента.Серия
	|		И ВидыЗапасов.ВладелецТовара = АналитикаКомитента.Склад
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПеремещение";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаРаспоряжения                      КАК Период,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
		|			ТаблицаТовары.Серия
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Серия,
		|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
		|	ТаблицаТовары.ЗаказНаПеремещение       КАК ЗаказНаПеремещение,
		|	ТаблицаТовары.Количество               КАК Заказано,
		|	ТаблицаТовары.Количество               КАК КОформлению
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки <> 0
		|	И &ПоЗаказуНаПеремещение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&ДатаРаспоряжения                      КАК Период,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
		|			ТаблицаТовары.Серия
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Серия,
		|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
		|	ТаблицаТовары.ЗаказНаПеремещение       КАК ЗаказНаПеремещение,
		|	0                                      КАК Заказано,
		|	ТаблицаТовары.Количество               КАК КОформлению
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки = 0
		|	И &ПоЗаказуНаПеремещение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&ДатаРаспоряжения                      КАК Период,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
		|			ТаблицаТовары.Серия
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                  КАК Серия,
		|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
		|	ТаблицаТовары.ЗаказНаПеремещение       КАК ЗаказНаПеремещение,
		|	0                                      КАК Заказано,
		|	ТаблицаТовары.Количество               КАК КОформлению
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.КодСтроки = 0
		|	И &ПоЗаказуНаПеремещение
		|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
		// Закрытие графика поступления на "Складе-получателе" в статусе "Принято"
		// 		На неордерном складе
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&СкладПолучатель КАК Склад,
		|	ТаблицаТовары.ЗаказНаПеремещение КАК Распоряжение,
		|	0 КАК КодСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	ТаблицаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступление,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.КодСтроки <> 0
		|	И НЕ &ОрдернаяСхемаПриПоступлении
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	&СкладПолучатель КАК Склад,
		|	ТаблицаТовары.ЗаказНаПеремещение КАК Распоряжение,
		|	0 КАК КодСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	ТаблицаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступление,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА -ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	&ПоЗаказуНаПеремещение
		|	И &НакладнаяЯвляетсяРаспоряжением
		|	И &ОрдернаяСхемаПриПоступлении
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	&СкладПолучатель КАК Склад,
		|	&Ссылка КАК Распоряжение,
		|	0 КАК КодСтроки,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	ТаблицаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступление,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	&ПоЗаказуНаПеремещение
		|	И &НакладнаяЯвляетсяРаспоряжением
		|	И &ОрдернаяСхемаПриПоступлении
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// 		На ордерном складе при поступлении по заказу по старым назначениям
		|ВЫБРАТЬ
		|	&Период,
		|	&СкладПолучатель,
		|	ТаблицаТовары.ЗаказНаПеремещение,
		|	0,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.ВариантОбеспечения,
		|	0,
		|	-ТаблицаТовары.Количество,
		|	0,
		|	-ТаблицаТовары.Количество
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.КодСтроки <> 0
		|	И &ОрдернаяСхемаПриПоступлении
		|	И ВЫБОР
		|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// 		На ордерном складе сторно приходного ордера при поступлении по заказу по старым назначениям
		|ВЫБРАТЬ
		|	&Период,
		|	&СкладПолучатель,
		|	ТаблицаТовары.ЗаказНаПеремещение,
		|	0,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|	ТаблицаТовары.ВариантОбеспечения,
		|	ТаблицаТовары.Количество,
		|	0,
		|	ТаблицаТовары.Количество,
		|	0
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.КодСтроки <> 0
		|	И &ОрдернаяСхемаПриПоступлении
		|	И ВЫБОР
		|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
		// Отгрузка со "Склада-отправителя"
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период                                КАК Период,
		|	&СкладОтправитель                      КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Количество               КАК ВНаличии,
		|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                              КАК ВРезервеПодЗаказ
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.КодСтроки = 0 //перемещение не по заказу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Поступление на "Склад-получатель".
		// На неордерном складе
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&СкладПолучатель КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Количество КАК ВНаличии,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВРезервеПодЗаказ
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	НЕ &ОрдернаяСхемаПриПоступлении
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		// На ордерном складе для старых назначений установка резерва под заказ (т.к. в приходном ордере нет старых 
		// назначений, приходный ордер этогосделать не мог)
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	&Период,
		|	&СкладПолучатель,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	0,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	ВтТовары КАК ТаблицаТовары
		|ГДЕ
		|	&ОрдернаяСхемаПриПоступлении
		|	И ВЫБОР
		|			КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				ТОГДА НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	// Отгрузка обособленного товара не по заказу со "Склада-отправителя".
	|ВЫБРАТЬ
	|	1                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)    КАК ВидДвижения,
	|	&Период                                   КАК Период,
	|	&СкладОтправитель                         КАК Склад,
	|	ТаблицаТовары.Номенклатура                КАК Номенклатура,
	|	ТаблицаТовары.Характеристика              КАК Характеристика,
	|
	|	ТаблицаТовары.Назначение                  КАК Назначение,
	|
	|	НЕОПРЕДЕЛЕНО                              КАК КЗаказу,
	|	НЕОПРЕДЕЛЕНО                              КАК Потребность,
	|	ТаблицаТовары.Количество                  КАК НаличиеПодЗаказ,
	|	НЕОПРЕДЕЛЕНО                              КАК КОтгрузке
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.КодСтроки = 0 И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка обособленного товара не по заказу со "Склада-отправителя", приход "К заказу".
	|ВЫБРАТЬ
	|	1                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)    КАК ВидДвижения,
	|	&Период                                   КАК Период,
	|	&СкладОтправитель                         КАК Склад,
	|	ТаблицаТовары.Номенклатура                КАК Номенклатура,
	|	ТаблицаТовары.Характеристика              КАК Характеристика,
	|
	|	ТаблицаТовары.Назначение                  КАК Назначение,
	|
	|	ТаблицаТовары.Количество                  КАК КЗаказу,
	|	НЕОПРЕДЕЛЕНО                              КАК Потребность,
	|	НЕОПРЕДЕЛЕНО                              КАК НаличиеПодЗаказ,
	|	НЕОПРЕДЕЛЕНО                              КАК КОтгрузке
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.КодСтроки = 0 И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                         КАК Порядок,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)    КАК ВидДвижения,
	|	&Период                                   КАК Период,
	|	&СкладПолучатель                          КАК Склад,
	|	ТаблицаТовары.Номенклатура                КАК Номенклатура,
	|	ТаблицаТовары.Характеристика              КАК Характеристика,
	|	ТаблицаТовары.Назначение                  КАК Назначение,
	|
	|
	|	ВЫБОР КОГДА ТаблицаТовары.КодСтроки = 0 ТОГДА
	|			-ТаблицаТовары.Количество
	|		КОНЕЦ                                 КАК КЗаказу,
	|
	|	НЕОПРЕДЕЛЕНО                              КАК Потребность,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ИСТИНА) 
	|				ИЛИ НЕ &ОрдернаяСхемаПриПоступлении
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ                                     КАК НаличиеПодЗаказ,
	|	НЕОПРЕДЕЛЕНО                              КАК КОтгрузке
	|ИЗ
	|	ВтТовары КАК ТаблицаТовары
	|
	|
	|ГДЕ
	|	ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|	И (ТаблицаТовары.КодСтроки = 0
	|			ИЛИ НЕ ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ИЛИ НЕ &ОрдернаяСхемаПриПоступлении)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&СкладОтправитель КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НазначениеОтправителя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В (4, 6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.Количество КАК ВНаличии,
	|	0 КАК КОтгрузке,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В (6, 8, 10, 14)
	|				И ТаблицаТовары.КодСтроки = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтролироватьОстатки
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|	И (ТаблицаТовары.СтатусУказанияСерийОтправитель В (0, 2, 10, 14)
	|			ИЛИ ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&СкладОтправитель,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НазначениеОтправителя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаСерии.Серия,
	|	МАКСИМУМ(ТаблицаСерии.Количество),
	|	0,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерийОтправитель) В (6, 8)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.НазначениеОтправителя = ТаблицаТовары.НазначениеОтправителя
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка, // Для адаптированного текста запроса
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Назначение,
	|	ТаблицаТовары.НазначениеОтправителя,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.НазначениеОтправителя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерийОтправитель) В (4, 6, 8)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&СкладПолучатель,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель В (4, 6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Количество,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ТаблицаТовары.СтатусУказанияСерийПолучатель В (0, 2, 10, 14)
	|			ИЛИ ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|	И НЕ &ОрдернаяСхемаПриПоступлении
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&СкладПолучатель,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаСерии.Серия,
	|	МАКСИМУМ(ТаблицаСерии.Количество),
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Назначение = ТаблицаТовары.Назначение
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаТовары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И НЕ &ОрдернаяСхемаПриПоступлении
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка, // Для адаптированного текста запроса
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерийПолучатель) В (4, 6, 8)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	// Отгрузка по распоряжению с неордерного слкада (расход "К отгрузке").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	ТаблицаТовары.ЗаказНаПеремещение       КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Оформление накладной по распоряжению с ордерного слкада (расход "К оформлению").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	ТаблицаТовары.ЗаказНаПеремещение       КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	0                                      КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриОтгрузке
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Выдача распоряжения на отгрузку с ордерного слкада (приход "К отгрузке").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриОтгрузке
	|	И НЕ &ПоЗаказуНаПеремещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход и расход по строкам сверхзаказа на любом складе (приход/расход по "К отгрузке", "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	ТаблицаТовары.ЗаказНаПеремещение       КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоЗаказуНаПеремещение
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	ТаблицаТовары.ЗаказНаПеремещение       КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ВЫБОР 
	|		КОГДА &ОрдернаяСхемаПриОтгрузке ТОГДА 
	|			0 
	|		ИНАЧЕ ТаблицаТовары.Количество 
	|	КОНЕЦ КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоЗаказуНаПеремещение
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Приход и расход по накладным не по заказу на неордерном складе для доставки (приход/расход по "К отгрузке").
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|	И НЕ &ПоЗаказуНаПеремещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	&СкладПолучатель                       КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам ТОГДА
	|			ТаблицаТовары.НазначениеОтправителя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ                              КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.СтатусУказанияСерийОтправитель В(10, 14) ТОГДА
	|			ТаблицаТовары.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ                              КАК Серия,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &ОрдернаяСхемаПриОтгрузке
	|	И НЕ &ПоЗаказуНаПеремещение";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладПолучатель                       КАК Склад,
	|	&СкладОтправитель                      КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.ЗаказНаПеремещение       ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюПоступленийПоОрдерам,
	|	0                                      КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ПоЗаказуНаПеремещение
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладПолучатель                       КАК Склад,
	|	&СкладОтправитель                      КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА &НакладнаяЯвляетсяРаспоряжением
	|			ИЛИ НЕ &ПоЗаказуНаПеремещение
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаТовары.ЗаказНаПеремещение
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	ТаблицаТовары.Количество               КАК КОформлениюПоступленийПоОрдерам,
	|	0                                      КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриПоступлении
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладПолучатель                       КАК Склад,
	|	&СкладОтправитель                      КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА &НакладнаяЯвляетсяРаспоряжением
	|			ИЛИ НЕ &ПоЗаказуНаПеремещение
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ТаблицаТовары.ЗаказНаПеремещение
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюПоступленийПоОрдерам,
	|	ТаблицаТовары.Количество               КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдернаяСхемаПриПоступлении
	|	И (&НакладнаяЯвляетсяРаспоряжением
	|		ИЛИ ТаблицаТовары.КодСтроки = 0)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТаблицаСерии.НазначениеОтправителя <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаСерии.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам
		|						ТОГДА ТаблицаСерии.НазначениеОтправителя
		|				КОНЕЦ
		|	КОНЕЦ КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	&СкладОтправитель КАК Отправитель,
		|	&СкладПолучатель КАК Получатель,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	ИСТИНА КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Количество <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТаблицаСерии.НазначениеОтправителя <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаСерии.НазначениеОтправителя.ДвиженияПоСкладскимРегистрам
		|						ТОГДА ТаблицаСерии.НазначениеОтправителя
		|				КОНЕЦ
		|	КОНЕЦ КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	&СкладОтправитель КАК Отправитель,
		|	&СкладПолучатель КАК Получатель,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	ИСТИНА КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                                   КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
	|		ТаблицаВидыЗапасов.ВидЗапасовВладельца.Организация
	|	ИНАЧЕ
	|		&Организация
	|	КОНЕЦ                                               КАК Организация,
	|	&Организация                                        КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.АналитикаНоменклатурыОтправитель КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.Номенклатура                     КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                   КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.РеализацияЗапасовДругойОрганизации ТОГДА
	|		ТаблицаВидыЗапасов.ВидЗапасовВладельца
	|	ИНАЧЕ
	|		ТаблицаВидыЗапасов.ВидЗапасов
	|	КОНЕЦ                                               КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                         КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                       КАК Количество,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	&ПеремещениеПодДеятельность                         КАК НалогообложениеНДС,
	|	ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучатель  КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование          КАК КорВидЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                   КАК Порядок,
	|	ТаблицаВидыЗапасов.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	&ОрганизацияПолучатель                              КАК Организация,
	|	&Организация                                        КАК ОрганизацияОтгрузки,
	|	ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучатель  КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.Номенклатура                     КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика                   КАК Характеристика,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование          КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                         КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                       КАК Количество,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                        КАК НалогообложениеНДС,
	|	НЕОПРЕДЕЛЕНО                                        КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                       КАК КорВидЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|			ТОГДА ВидыЗапасов.АналитикаУчетаКомитента
	|		ИНАЧЕ 
	|			ВЫБОР КОГДА &ИспользуетсяНазначение
	|			ТОГДА ВидыЗапасов.АналитикаНоменклатурыОтправитель
	|			ИНАЧЕ ВидыЗапасов.АналитикаНоменклатурыОтправительБезНазначения
	|		КОНЕЦ
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ВЫБОР 
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ВидыЗапасов.ЦеховаяКладоваяОтправителя
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|			ТОГДА Неопределено
	|			ИНАЧЕ ВидыЗапасов.ВидЗапасов
	|		КОНЕЦ
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	ВидыЗапасов.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ВидыЗапасов.АналитикаНоменклатурыПолучатель
	|		ИНАЧЕ ВидыЗапасов.АналитикаНоменклатурыПолучательБезНазначения
	|	КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
	|	ВЫБОР 
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ВидыЗапасов.ЦеховаяКладоваяПолучателя
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ КАК КорРазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|   	ВидыЗапасов.ВидЗапасовОприходование
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КорВидЗапасов,
	|
	|	&Подразделение КАК Подразделение,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&КорОрганизация КАК КорОрганизация,
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ИЛИ ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИЛИ ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		ТОГДА ВидыЗапасов.АналитикаРасчетовСКомитентом
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорАналитикаФинансовогоУчета,
	|	&ПеремещениеПодДеятельность КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ВидыЗапасов.АналитикаНоменклатурыПолучатель
	|		ИНАЧЕ ВидыЗапасов.АналитикаНоменклатурыПолучательБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&ОрганизацияПолучатель КАК Организация,
	|	ВЫБОР 
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ИНАЧЕ ВЫБОР КОГДА ВидыЗапасов.ЦеховаяКладоваяПолучателя
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		КОНЕЦ
	|	КОНЕЦ КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|   	ВидыЗапасов.ВидЗапасовОприходование
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	ВидыЗапасов.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	&Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров)
	|		ИНАЧЕ &ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК КорОрганизация,
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ИЛИ ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|			ИЛИ ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		ТОГДА ВидыЗапасов.АналитикаРасчетовСКомитентом
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АналитикаУчетаПоПартнерам,
	|	(ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА &ПеремещениеПодДеятельность
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ) КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО КАК КорВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПеремещениеОбособленно)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Перемещение)
	|	КОНЕЦ КАК ТипЗаписи
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Порядок,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ВидыЗапасов.АналитикаНоменклатурыОтправитель
	|		ИНАЧЕ ВидыЗапасов.АналитикаНоменклатурыОтправительБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию) КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|		ТОГДА ВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ВидыЗапасов.Количество КАК Количество,
	|	0 КАК СтоимостьРегл,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	&Подразделение КАК Подразделение,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК КорОрганизация,
	|	ВидыЗапасов.АналитикаРасчетовСКомитентом КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаФинансовогоУчета,
	|	&ПеремещениеПодДеятельность КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) КАК ТипЗаписи
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ВидыЗапасов.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|НомерСтрокиДокумента
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизацийКПередаче(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизацийКПередаче";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки                                 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	Запасы.ВидЗапасовВладельца.Организация             КАК ОрганизацияВладелец,
	|	Запасы.АналитикаНоменклатурыОтправитель            КАК АналитикаУчетаНоменклатуры,
	|	Запасы.Номенклатура                                КАК Номенклатура,
	|	Запасы.Характеристика                              КАК Характеристика,
	|	Запасы.ВидЗапасов                                  КАК ВидЗапасовПродавца,
	|	Запасы.НомерГТД                                    КАК НомерГТД,
	|	Запасы.Количество                                  КАК Количество
	|ИЗ
	|	ВтВидыЗапасов КАК Запасы
	|ГДЕ
	|	Запасы.ВидЗапасов.РеализацияЗапасовДругойОрганизации
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаНоменклатурыОтправитель
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаНоменклатурыОтправительБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.НаправлениеДеятельностиОтправитель КАК НаправлениеДеятельности,
	|	&СкладОтправитель КАК Склад,
	|	ТаблицаВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучатель
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучательБезНазначения
	|	КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.НаправлениеДеятельностиПолучатель КАК КорНаправлениеДеятельности,
	|	&СкладПолучатель КАК КорСклад,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов КАК КорТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорВидЗапасов,
	|
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|		ТОГДА 0 
	|		ИНАЧЕ ТаблицаВидыЗапасов.Количество 
	|	КОНЕЦ КАК КорКоличество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|
	|	&Ссылка КАК ДокументДвижения,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ ТаблицаВидыЗапасов.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.Номенклатура
	|	КОНЕЦ КАК КорИсточникГФУНоменклатуры,
	|	&КорОрганизация КАК КорОрганизация
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров),
	|	&КорОрганизация,
	|	&Подразделение,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаНоменклатурыОтправитель
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаНоменклатурыОтправительБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.НаправлениеДеятельностиОтправитель КАК НаправлениеДеятельности,
	|	&СкладОтправитель,
	|	ТаблицаВидыЗапасов.ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучатель
	|		ИНАЧЕ ТаблицаВидыЗапасов.АналитикаНоменклатурыПолучательБезНазначения
	|	КОНЕЦ,
	|	ТаблицаВидыЗапасов.НаправлениеДеятельностиПолучатель КАК КорНаправлениеДеятельности,
	|	&СкладПолучатель,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|
	|	0,
	|	ТаблицаВидыЗапасов.Количество,
	|	0,
	|	0,
	|	0,
	|	&Ссылка КАК ДокументДвижения,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ ТаблицаВидыЗапасов.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТаблицаВидыЗапасов.ВидЗапасовОприходование
	|		ИНАЧЕ ТаблицаВидыЗапасов.Номенклатура
	|	КОНЕЦ,
	|	&Организация КАК КорОрганизация
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ДатаДокументаИБ КАК ДатаДокументаИБ,
	|	ДанныеДокумента.НомерДокументаИБ КАК НомерДокументаИБ,
	|	ДанныеДокумента.ТипСсылки КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.МестоХранения КАК МестоХранения,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Сумма КАК Сумма,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Дополнительно КАК Дополнительно,
	|	ДанныеДокумента.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРеестрДокументов.Ссылка КАК Ссылка,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ КАК ДатаДокументаИБ,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерДокументаИБ) КАК НомерДокументаИБ,
	|	ТаблицаРеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация КАК Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер КАК Партнер,
	|	ТаблицаРеестрДокументов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРеестрДокументов.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ТаблицаРеестрДокументов.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТаблицаРеестрДокументов.МестоХранения КАК МестоХранения,
	|	ТаблицаРеестрДокументов.Подразделение КАК Подразделение,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Ответственный) КАК Ответственный,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Валюта) КАК Валюта,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Сумма) КАК Сумма,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Статус) КАК Статус,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Проведен) КАК Проведен,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ПометкаУдаления) КАК ПометкаУдаления,
	|	МИНИМУМ(ТаблицаРеестрДокументов.ДополнительнаяЗапись) КАК ДополнительнаяЗапись,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Дополнительно) КАК Дополнительно,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ДатаПервичногоДокумента) КАК ДатаПервичногоДокумента,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерПервичногоДокумента) КАК НомерПервичногоДокумента
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК Ссылка,
	|		&Период КАК ДатаДокументаИБ,
	|		&Номер КАК НомерДокументаИБ,
	|		&ИдентификаторМетаданных КАК ТипСсылки,
	|		&Организация КАК Организация,
	|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		НЕОПРЕДЕЛЕНО КАК Партнер,
	|		НЕОПРЕДЕЛЕНО КАК Контрагент,
	|		МАКСИМУМ(ЕСТЬNULL(ТаблицаТовары.НазначениеОтправителя.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.НазначениеОтправителя.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности,
	|		&СкладОтправитель КАК МестоХранения,
	|		&Подразделение КАК Подразделение,
	|		&Ответственный КАК Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|		НЕОПРЕДЕЛЕНО КАК Валюта,
	|		0 КАК Сумма,
	|		&Статус КАК Статус,
	|		&Проведен КАК Проведен,
	|		&ПометкаУдаления КАК ПометкаУдаления,
	|		ЛОЖЬ КАК ДополнительнаяЗапись,
	|		&ИнформацияПоСкладуПолучателю КАК Дополнительно,
	|		&Период КАК ДатаПервичногоДокумента,
	|		&НомерНаПечать КАК НомерПервичногоДокумента
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|			ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК Ссылка,
	|		&Период КАК ДатаДокументаИБ,
	|		&Номер КАК НомерДокументаИБ,
	|		&ИдентификаторМетаданных КАК ТипСсылки,
	|		ВЫБОР
	|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|				ТОГДА &ОрганизацияПолучатель
	|			ИНАЧЕ &Организация
	|		КОНЕЦ КАК Организация,
	|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		НЕОПРЕДЕЛЕНО КАК Партнер,
	|		НЕОПРЕДЕЛЕНО КАК Контрагент,
	|		МАКСИМУМ(ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности,
	|		&СкладПолучатель КАК МестоХранения,
	|		&Подразделение КАК Подразделение,
	|		&Ответственный КАК Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|		НЕОПРЕДЕЛЕНО КАК Валюта,
	|		0 КАК Сумма,
	|		&Статус КАК Статус,
	|		&Проведен КАК Проведен,
	|		&ПометкаУдаления КАК ПометкаУдаления,
	|		ИСТИНА КАК ДополнительнаяЗапись,
	|		&ИнформацияПоСкладуОтправителю КАК Дополнительно,
	|		&Период КАК ДатаПервичногоДокумента,
	|		&НомерНаПечать КАК НомерПервичногоДокумента
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|			ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка) КАК ТаблицаРеестрДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРеестрДокументов.ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер,
	|	ТаблицаРеестрДокументов.Контрагент,
	|	ТаблицаРеестрДокументов.Подразделение,
	|	ТаблицаРеестрДокументов.МестоХранения,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ,
	|	ТаблицаРеестрДокументов.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаРеестрДокументов.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ТаблицаРеестрДокументов.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюОтчетовКомитенту(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюОтчетовКомитенту";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	Запасы.Валюта                                      КАК Валюта,
	|	Запасы.ВидЗапасов                                  КАК ВидЗапасов,
	|	Запасы.Номенклатура                                КАК Номенклатура,
	|	Запасы.Характеристика                              КАК Характеристика,
	|	Запасы.НомерГТД                                    КАК НомерГТД,
	|	&ХозяйственнаяОперация                             КАК ХозяйственнаяОперация,
	|	0                                                  КАК Количество,
	|	Запасы.Количество                                  КАК КоличествоСписано,
	|	0                                                  КАК СуммаВыручки,
	|	0                                                  КАК КоличествоКОформлению,
	|	Запасы.Количество                                  КАК КоличествоСписаноКОформлению,
	|	0                                                  КАК СуммаВыручкиКОформлению,
	|	НЕОПРЕДЕЛЕНО                                       КАК КорВидЗапасов,
	|	Запасы.АналитикаУчетаКомитента                     КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	ВтВидыЗапасов КАК Запасы
	|ГДЕ
	|	Запасы.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И Запасы.ТипЗапасовОприходование = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ПеремещениеТоваров";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",                 """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоСкладуПолучателю",  """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоСкладуОтправителю", """""");
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриОтгрузке",
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
		|				И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриПоступлении", 
		"ВЫБОР
		|		КОГДА ТаблицаТовары.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|				И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("ПоЗаказуНаПеремещение", "ТаблицаТовары.Ссылка.ПеремещениеПоЗаказам");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	Если ИмяРегистра = "ТоварыКОтгрузке" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаПеремещение" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыНаСкладах" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Комплект документов на принтер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументов";
	КомандаПечати.СразуНаПринтер = Истина;
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 1;

	// Комплект документов с настройкой...
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
	КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 2;
	
	// Накладная на перемещение
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяНаПеремещение";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на перемещение'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 3;

	// Накладная на внутреннее перемещение (ТОРГ-13)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ13";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на внутреннее перемещение (ТОРГ-13)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 4;

	Документы.ТранспортнаяНакладная.ДобавитьКомандыПечати(КомандыПечати);
	
	// Требование-накладная (М-11)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьМ11";
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru = 'Требование-накладная (М-11)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 6;	

	// Задание на размещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = НСтр("ru = 'Задание на размещение товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаРазмещение");
	КомандаПечати.Порядок = 8;

	// Задание на отбор товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = НСтр("ru = 'Задание на отбор товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаОтбор");
	КомандаПечати.Порядок = 9;

	Если ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыНоменклатуры)
		И ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры") Тогда
		// Реестр сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыРеестр";
		КомандаПечати.Представление = НСтр("ru = 'Сертификаты (реестр)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 10;
		
		// Изображения сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыИзображенияИзДокументов";
		КомандаПечати.Представление = НСтр("ru = 'Сертификаты (по каждой позиции документа)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 11;

		// Изображения сертификатов номенклатуры
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "СертификатыНоменклатурыИзображенияИзДокументовБезДублей";
		КомандаПечати.Представление = НСтр("ru = 'Сертификаты (по одному на сертификат)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 12;

	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранение") Тогда
		// МХ-1 
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор = "МХ1";
		КомандаПечати.Представление = НСтр("ru='Акт о приеме-передаче ТМЦ на хранение (МХ-1)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 13;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранение") Тогда
		// МХ-3 
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор = "МХ3";
		КомандаПечати.Представление = НСтр("ru = 'Акт о возврате ТМЦ, сданных на хранение (МХ-3)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 14;
	КонецЕсли;
	
	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		// Ценники
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "Документ.ПеремещениеТоваров";
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценники'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 15;

		// Этикетки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "Документ.ПеремещениеТоваров";
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 16;
	КонецЕсли;

	Если Пользователи.ЭтоПолноправныйПользователь()
		 И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		// Этикетки доставки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокДоставки";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ЭтикеткаДоставки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки доставки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 17;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ13",
			НСтр("ru = 'Накладная на внутреннее перемещение (ТОРГ-13)'"),
			СформироватьПечатнуюФормуТОРГ13(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяНаПеремещение") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяНаПеремещение",
			НСтр("ru = 'Накладная на перемещение'"),
			СформироватьПечатнуюФормуНакладнойНаПеремещениеТоваров(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыРеестр") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыРеестр",
			НСтр("ru = 'Сертификаты (реестр)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуРеестрСертификатовНоменклатуры(МассивОбъектов, ОбъектыПечати),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_РеестрСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументов",
			НСтр("ru = 'Сертификаты (по каждой позиции документа)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументов(МассивОбъектов, ОбъектыПечати),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СертификатыНоменклатурыИзображенияИзДокументовБезДублей") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументовБезДублей",
			НСтр("ru = 'Сертификаты (по одному на сертификат)'"),
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументовБезДублей(МассивОбъектов, ОбъектыПечати),
			,
			"Справочник.СертификатыНоменклатуры.ПФ_MXL_ИзображенияСертификатов");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"НакладнаяНаПеремещение");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуНакладнойНаПеремещениеТоваров(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"ТОРГ13");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуТОРГ13(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"ТТН");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьТТН.СформироватьПечатнуюФормуТТН(КомплектПечати.Объекты, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"М11");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ПеремещениеТоваров", КомплектПечати.Объекты);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьМ11.СформироватьПечатнуюФормуМ11(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"ТранспортнаяНакладная");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьТранспортнойНакладной.СформироватьПечатнуюФормуТранспортнойНакладной(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"СертификатыНоменклатурыРеестр");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуРеестрСертификатовНоменклатуры(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"СертификатыНоменклатурыИзображенияИзДокументов");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументов(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"СертификатыНоменклатурыИзображенияИзДокументовБезДублей");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Справочники.СертификатыНоменклатуры.СформироватьПечатнуюФормуИзображенияСертификатовИзДокументовБезДублей(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"МХ3");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ПеремещениеТоваров", КомплектПечати.Объекты);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуМХ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"МХ1");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ПеремещениеТоваров", КомплектПечати.Объекты);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуМХ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.ПеремещениеТоваров",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "НакладнаяНаПеремещение", НСтр("ru = 'Накладная на перемещение'"),                     0);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТОРГ13", НСтр("ru = 'Накладная на внутреннее перемещение (ТОРГ-13)'"),                2);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "М11", НСтр("ru = 'Требование-накладная (М-11)'"),                                                            0);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТТН", НСтр("ru = 'Товарно-транспортная накладная (1-Т)'"),                            0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ТранспортнаяНакладная", НСтр("ru = 'Транспортная накладная'"),                        0);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
			"СертификатыНоменклатурыРеестр",
			НСтр("ru = 'Сертификаты (реестр)'"),
			0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументов",
			НСтр("ru = 'Сертификаты (по каждой позиции документа)'"),
			0);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
			"СертификатыНоменклатурыИзображенияИзДокументовБезДублей",
			НСтр("ru = 'Сертификаты (по одному на сертификат)'"),
			0);	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранение") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
			"МХ1", 
			НСтр("ru='Акт о приеме-передаче ТМЦ на хранение (МХ-1)'"),
			0);
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранение") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм,
			"МХ3",
			НСтр("ru = 'Акт о возврате ТМЦ, сданных на хранение (МХ-3)'"),
			0);
	КонецЕсли; 
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

// Функция получает данные для формирования печатной формы отбора/размещения товаров.
//
Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	
	ВидСклада = ?(ПараметрыПечати.ИмяФормы = "ЗаданиеНаРазмещение" , "Получатель", "Отправитель");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПеремещениеТоваров.Склад" + ВидСклада + ") КАК СкладПредставление,
	|	ПеремещениеТоваров.Склад" + ВидСклада + " КАК Склад,
	|	"""" КАК ПомещениеПредставление,
	|	ПеремещениеТоваров.Дата КАК Дата,
	|	ПеремещениеТоваров.Номер КАК Номер,
	|	NULL КАК ВидОперации,";
	Если ВидСклада = "Получатель" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Выбор Когда
		|			ПеремещениеТоваров.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И ПеремещениеТоваров.Дата >= ПеремещениеТоваров.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
		|		Тогда Истина
		|		Иначе Ложь
		|	Конец КАК НарушенаОрдернаяСхема,
		|	ПеремещениеТоваров.СкладПолучатель.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
		|	ПеремещениеТоваров.СкладПолучатель.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СкладПолучатель.ИспользоватьАдресноеХранениеСправочно
		|			И (НЕ ПеремещениеТоваров.СкладПолучатель.ИспользоватьАдресноеХранение
		|				ИЛИ ПеремещениеТоваров.Дата < ПеремещениеТоваров.СкладПолучатель.ДатаНачалаАдресногоХраненияОстатков)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользуетсяСправочноеХранение";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	Выбор Когда
		|			ПеремещениеТоваров.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
		|			И ПеремещениеТоваров.Дата >= ПеремещениеТоваров.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
		|		Тогда Истина
		|		Иначе Ложь
		|	Конец КАК НарушенаОрдернаяСхема,
		|	ПеремещениеТоваров.СкладОтправитель.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры, 
		|	ПеремещениеТоваров.СкладОтправитель.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СкладОтправитель.ИспользоватьАдресноеХранениеСправочно
		|			И (НЕ ПеремещениеТоваров.СкладОтправитель.ИспользоватьАдресноеХранение
		|				ИЛИ ПеремещениеТоваров.Дата < ПеремещениеТоваров.СкладОтправитель.ДатаНачалаАдресногоХраненияОстатков)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользуетсяСправочноеХранение";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка КАК Ссылка,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок,
	|	ТаблицаСерии.Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|	
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ВЫРАЗИТЬ(ТаблицаСерии.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок,
	|	ТаблицаСерии.Количество
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад" + ВидСклада + " КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТовары.НаборУпаковок КАК НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.НаборУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммированнаяТаблицаТоваров.Ссылка КАК Ссылка,
	|	СуммированнаяТаблицаТоваров.Склад КАК Склад,
	|	СуммированнаяТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	СуммированнаяТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	СуммированнаяТаблицаТоваров.Характеристика КАК Характеристика,
	|	СуммированнаяТаблицаТоваров.Серия КАК Серия,
	|	СуммированнаяТаблицаТоваров.Номенклатура.Код КАК Код,
	|	СуммированнаяТаблицаТоваров.Номенклатура.Артикул КАК Артикул,
	|	СуммированнаяТаблицаТоваров.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	СуммированнаяТаблицаТоваров.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	СуммированнаяТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии,
	|	СуммированнаяТаблицаТоваров.Количество КАК Количество,
	|	СуммированнаяТаблицаТоваров.Количество КАК КоличествоУпаковок,
	|	ПРЕДСТАВЛЕНИЕ(СуммированнаяТаблицаТоваров.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СуммированнаяТаблицаТоваров.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	СуммированнаяТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий
	|ИЗ
	|	СуммированнаяТаблицаТоваров КАК СуммированнаяТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО СуммированнаяТаблицаТоваров.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = СуммированнаяТаблицаТоваров.Ссылка.Склад" 	+ ВидСклада + ")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО СуммированнаяТаблицаТоваров.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = СуммированнаяТаблицаТоваров.Ссылка.Склад" 	+ ВидСклада + ")
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммированнаяТаблицаТоваров.Ссылка КАК Ссылка,
	|	СуммированнаяТаблицаТоваров.Склад КАК Склад,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	СуммированнаяТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(СуммированнаяТаблицаТоваров.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	СуммированнаяТаблицаТоваров КАК СуммированнаяТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (СуммированнаяТаблицаТоваров.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ СуммированнаяТаблицаТоваров.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И (НЕ УпаковкиНоменклатуры.ПометкаУдаления)
	|			И СуммированнаяТаблицаТоваров.Количество >= &ТекстЗапросаКоэффициентУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО СуммированнаяТаблицаТоваров.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = СуммированнаяТаблицаТоваров.Ссылка.Склад" + ВидСклада + ")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад" + ВидСклада + " КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад" + ВидСклада + ")
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И НЕ ТаблицаТовары.Серия ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТовары.Ссылка.Склад" + ВидСклада + ",
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры",
			"СуммированнаяТаблицаТоваров.Номенклатура"));
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[3];
	РезультатПоУпаковкам		= МассивРезультатов[4];
	РезультатПоСериям			= МассивРезультатов[5];
	
	СтруктураДанныхДляПечати 	= Новый Структура();
	
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",          РезультатПоШапке);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатПоТабличнойЧасти);
	СтруктураДанныхДляПечати.Вставить("РезультатПоУпаковкам",      РезультатПоУпаковкам);
	СтруктураДанныхДляПечати.Вставить("РезультатПоСериям",         РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

// Функция получает данные для формирования печатной формы М-11
//
Функция ПолучитьДанныеДляПечатнойФормыМ11(ПараметрыПечати, МассивДокументов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	КОНЕЦПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Товары.Ссылка.ВидЦены КАК ВидЦены,
	|	Товары.Ссылка.ВидЦены.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЦенНоменклатуры.Ссылка,
	|	ПериодыЦенНоменклатуры.НомерСтроки,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Упаковка
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|	ИЗ
	|		Товары КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|			ПО Товары.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|				И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|				И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
	|				И Товары.ДатаПолученияЦены >= ЦеныНоменклатуры.Период
	|				И Товары.ВалютаЦены = ЦеныНоменклатуры.Валюта
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Ссылка,
	|		Товары.НомерСтроки,
	|		ЦеныНоменклатуры.ВидЦены,
	|		ЦеныНоменклатуры.Номенклатура,
	|		ЦеныНоменклатуры.Характеристика) КАК ПериодыЦенНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ПериодыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
	|			И ПериодыЦенНоменклатуры.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|			И ПериодыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ПериодыЦенНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалютПоДокументам.Ссылка,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документы.Ссылка КАК Ссылка,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период,
	|		КурсыВалют.Валюта КАК Валюта
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Документы.ВидЦены.ВалютаЦены = КурсыВалют.Валюта
	|				И Документы.Дата >= КурсыВалют.Период
	|	ГДЕ
	|		Документы.Ссылка В(&МассивДокументов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Ссылка,
	|		КурсыВалют.Валюта) КАК ПериодыКурсовВалютПоДокументам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалютПоДокументам.Период = КурсыВалют.Период
	|			И ПериодыКурсовВалютПоДокументам.Валюта = КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК ДатаДокумента,
	|	Документы.Дата КАК ДатаСоставления,
	|	Документы.Организация КАК Организация,
	|	Документы.Организация.Префикс КАК Префикс,
	|	Документы.СкладПолучатель КАК Подразделение,
	|	Документы.ВидЦены КАК УчетныйВидЦены,
	|	Документы.ВидЦены.ВалютаЦены КАК УчетныйВидЦеныВалютаЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Ссылка.СкладОтправитель КАК Склад,
	|	Товары.Ссылка.СкладОтправитель.ТекущийОтветственный КАК КладовщикОтправитель,
	|	Товары.Ссылка.СкладОтправитель.ТекущаяДолжностьОтветственного КАК ДолжностьКладовщикаОтправителя,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	Товары.Номенклатура.Код КАК НоменклатурныйНомерКод,
	|	Товары.Номенклатура.Артикул КАК НоменклатурныйНомерАртикул,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	(ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК ЧИСЛО(15, 2))) * Товары.КоличествоУпаковок КАК Сумма,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Цены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(КурсыВалют.Курс, 1) / ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК ЧИСЛО(15, 2)) КАК Цена,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО Товары.Ссылка = КурсыВалют.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
	|		ПО Товары.Ссылка = Цены.Ссылка
	|			И Товары.НомерСтроки = Цены.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(ДолжностьКладовщикаОтправителя), МАКСИМУМ(КладовщикОтправитель)
	|ПО
	|	Ссылка,
	|	Склад");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Цены.Упаковка",
			"Товары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
			
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	// Пакет запросов:
	// 		[0] - Временная таблица по табличной части документа
	// 		[1] - Временная таблица по ценам номенклатуры табличной части
	// 		[2] - Временная таблица по курсам валют документов
	// 		[3] - Выборка по шапкам документов
	// 		[4] - Выборка по табличным частям документов
	
	Возврат Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПакетаЗапросов[3],
		РезультатПакетаЗапросов[4]);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура      КАК Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика    КАК Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка          КАК Упаковка,
	|	МИНИМУМ(ПеремещениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПеремещениеТоваровТовары.Количество)    КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Организация                      КАК Организация,
	|	ПеремещениеТоваров.СкладПолучатель                  КАК Склад,
	|	ПеремещениеТоваров.СкладПолучатель.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура      КАК Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика    КАК Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка          КАК Упаковка,
	|	МИНИМУМ(ПеремещениеТоваровТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ПеремещениеТоваровТовары.Количество)    КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Организация                      КАК Организация,
	|	ПеремещениеТоваров.СкладПолучатель                  КАК Склад,
	|	ПеремещениеТоваров.СкладПолучатель.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция СформироватьПечатнуюФормуНакладнойНаПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Колонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(Колонка);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_НакладнаяНаПеремещение");
	
	ОбластьЗаголовкаПеремещение         = Макет.ПолучитьОбласть("ЗаголовокПеремещение");
	ОбластьЗаголовкаВнутренняяПередача  = Макет.ПолучитьОбласть("ЗаголовокВнутренняяПередача");
	
	Если ВыводитьКоды Тогда
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
									  + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
									  + Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка                              КАК Ссылка,
	|	ПеремещениеТоваров.Номер                               КАК Номер,
	|	ПеремещениеТоваров.Дата                                КАК Дата,
	|	ПеремещениеТоваров.Организация.Префикс                 КАК Префикс,
	|	ПеремещениеТоваров.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	ПеремещениеТоваров.СкладОтправитель.Представление      КАК ОтправительПредставление,
	|	ПеремещениеТоваров.СкладПолучатель.Представление       КАК ПолучательПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.Организация.НаименованиеСокращенное = """" ТОГДА
	|		ПеремещениеТоваров.Организация.Наименование
	|	ИНАЧЕ
	|		ПеремещениеТоваров.Организация.НаименованиеСокращенное
	|	КОНЕЦ                                                  КАК ОрганизацияПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.ОрганизацияПолучатель.НаименованиеСокращенное = """" ТОГДА
	|		ПеремещениеТоваров.ОрганизацияПолучатель.Наименование
	|	ИНАЧЕ
	|		ПеремещениеТоваров.ОрганизацияПолучатель.НаименованиеСокращенное
	|	КОНЕЦ                                                  КАК ОрганизацияПолучательПредставление,
	|	ВЫБОР КОГДА ПеремещениеТоваров.СкладОтправитель.ИспользоватьСерииНоменклатуры
	|	 ИЛИ ПеремещениеТоваров.СкладПолучатель.ИспользоватьСерииНоменклатуры ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|ИТОГИ ПО
	|	ИспользоватьСерииНоменклатуры
	|";
	
	ЗапросПоШапке.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ДеревоОбъектов = ЗапросПоШапке.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПерваяСтрокаОбъектов = Истина;  // В дереве объектов может быть максимум 2 строки, эта переменная для 
									// определения того, что началась вторая строка для вывода разделителя границ
	
	Для Каждого ИспользованиеСерий Из ДеревоОбъектов.Строки Цикл
		
		ЗапросПоТоварам = Новый Запрос;
		ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", ИспользованиеСерий.Строки.ВыгрузитьКолонку("Ссылка"));
		
		Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда
			
			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.СтатусУказанияСерий В(10, 14)
			|			ТОГДА ТаблицаТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Серия,
			|	ТаблицаТовары.Упаковка КАК Упаковка,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
			|	И НЕ ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Ссылка,
			|	МИНИМУМ(ТаблицаТовары.НомерСтроки),
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
			|	ТаблицаСерии.Количество,
			|	ТаблицаСерии.Количество
			|ИЗ
			|	Документ.ПеремещениеТоваров.Серии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
			|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
			|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
			|ГДЕ
			|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Ссылка,
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество,
			|	ТаблицаСерии.Количество
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка,
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ТаблицаТоваров.Упаковка
			|	КОНЕЦ КАК Упаковка,
			|	СУММА(ТаблицаТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ КАК Серия
			|ПОМЕСТИТЬ СуммированнаяТаблицаТоваров
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
			|		ИНАЧЕ ТаблицаТоваров.Упаковка
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|			ТОГДА NULL
			|		ИНАЧЕ ТаблицаТоваров.Серия
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ТаблицаТовары.Номенклатура.Код КАК Код,
			|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
			|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия КАК Серия,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий
			|ИЗ
			|	СуммированнаяТаблицаТоваров КАК ТаблицаТовары
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки,
			|	Товар,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТоваров.Ссылка КАК Ссылка,
			|	МИНИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки,
			|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
			|	ТаблицаТоваров.Характеристика КАК Характеристика,
			|	ТаблицаТоваров.Серия.Наименование КАК ПредставлениеСерии
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
			|	И НЕ ТаблицаТоваров.Серия ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТоваров.Ссылка,
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Серия.Наименование
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	НомерСтроки,
			|	Номенклатура,
			|	Характеристика,
			|	ПредставлениеСерии";
			
			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			РезультатЗапроса		 = ЗапросПоТоварам.ВыполнитьПакет();
			ВыборкаПоТоварам		 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаПоСериям 		 = РезультатЗапроса[3].Выбрать();
			
		Иначе
			
			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Ссылка КАК Ссылка,
			|	ТаблицаТовары.Номенклатура КАК Товар,
			|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ТаблицаТовары.Номенклатура.Код КАК Код,
			|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
			|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
			|	ВЫБОР
			|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТаблицаТовары.Количество КАК Количество,
			|	ЛОЖЬ КАК НастройкаИспользованияСерий,
			|	ТаблицаТовары.НомерСтроки
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ТаблицаТовары.НомерСтроки,
			|	Товар,
			|	Характеристика";
			
			ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
			ВыборкаПоТоварам = ЗапросПоТоварам.Выполнить().Выбрать();
			
		КонецЕсли;
				
		ПервыйДокумент = Истина;

		Для Каждого Шапка Из ИспользованиеСерий.Строки Цикл
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			Если Не ПервыйДокумент ИЛИ (ПервыйДокумент И НЕ ПерваяСтрокаОбъектов) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			// Выводим шапку накладной
			Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда

				ОбластьЗаголовка  = ОбластьЗаголовкаПеремещение;

			Иначе //Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами

				ОбластьЗаголовка = ОбластьЗаголовкаВнутренняяПередача;

			КонецЕсли;

			НазваниеДокумента = НСтр("ru = 'Накладная на перемещение'");
			ОбластьЗаголовка.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Шапка,
				НазваниеДокумента);
			ОбластьЗаголовка.Параметры.Заполнить(Шапка);
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовка, Шапка.Ссылка);
			ТабличныйДокумент.Вывести(ОбластьЗаголовка);
			
			ТабличныйДокумент.Вывести(ОбластьНомераШапка);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхШапка);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ТабличныйДокумент.Присоединить(ОбластьУпаковокШапка);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиШапка);
			
			// Выборка товаров
			
			НомерСтроки = 1;
			
			Пока ВыборкаПоТоварам.НайтиСледующий(Новый Структура("Ссылка",Шапка.Ссылка)) Цикл
				
				ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
				
				Если ВыводитьКоды Тогда
					ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоТоварам[Колонка];
					ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
				КонецЕсли;
				
				Если ВыборкаПоТоварам.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Ссылка", ВыборкаПоТоварам.Ссылка);
					СтруктураПоиска.Вставить("НомерСтроки", ВыборкаПоТоварам.НомерСтроки);
					СтруктураПоиска.Вставить("Номенклатура", ВыборкаПоТоварам.Товар);
					СтруктураПоиска.Вставить("Характеристика", ВыборкаПоТоварам.Характеристика);
					
					СтрокаСерий = "";
					Пока ВыборкаПоСериям.НайтиСледующий(СтруктураПоиска) Цикл
						СтрокаСерий = СтрокаСерий + ВыборкаПоСериям.ПредставлениеСерии + ", ";
					КонецЦикла;
					
					Если СтрДлина(СтрокаСерий) <> 0 Тогда
						СтрокаСерий = Лев(СтрокаСерий, СтрДлина(СтрокаСерий) - 2);
					КонецЕсли;
					
				Иначе
					
					СтрокаСерий = ВыборкаПоТоварам.Серия;
					
				КонецЕсли;
				
				ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СокрЛП(ВыборкаПоТоварам.ТоварНаименование),
					СокрЛП(ВыборкаПоТоварам.ХарактеристикаНаименование),
					, // Упаковка
					СокрЛП(СтрокаСерий));
				
				ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
					ТабличныйДокумент.Присоединить(ОбластьУпаковокСтрока);
				КонецЕсли;
				
				ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
				
				НомерСтроки = НомерСтроки + 1;
								
			КонецЦикла;
			
			
			ТабличныйДокумент.Вывести(ОбластьНомераПодвал);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодовПодвал);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхПодвал);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ТабличныйДокумент.Присоединить(ОбластьУпаковокПодвал);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
			
			// Вывести подписи.
			ТабличныйДокумент.Вывести(ОбластьПодписей);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
			
		КонецЦикла;
		
		ПерваяСтрокаОбъектов = Ложь;
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

// Формирует табличный документ по унифицированной форме ТОРГ-13
// 
// Возвращаемое значение
//  Табличный документ - унифицированная форма ТОРГ-13
//
Функция СформироватьПечатнуюФормуТОРГ13(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТоварКод = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(ТоварКод) Тогда
		ТоварКод = "Код";
	КонецЕсли;

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПеремещениеТоваров.ПФ_MXL_ТОРГ13");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета по-умолчанию
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_ТОРГ13_";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Перемещение.Ссылка                                          КАК Ссылка,
	|	Перемещение.Номер                                           КАК Номер,
	|	Перемещение.Дата                                            КАК ДатаДокумента,
	|	Перемещение.Организация                                     КАК Организация,
	|	Перемещение.Организация.Префикс                             КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Перемещение.СкладОтправитель)           КАК ОтправительПодразделение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Перемещение.СкладПолучатель)            КАК ПолучательПодразделение,
	|	Перемещение.СкладОтправитель.ТекущийОтветственный           КАК КладовщикОтправитель,
	|	Перемещение.СкладОтправитель.ТекущаяДолжностьОтветственного КАК ДолжностьКладовщикаОтправителя,
	|	Перемещение.СкладПолучатель.ТекущийОтветственный            КАК КладовщикПолучатель,
	|	Перемещение.СкладПолучатель.ТекущаяДолжностьОтветственного  КАК ДолжностьКладовщикаПолучателя,
	|	Перемещение.ВидЦены                                         КАК УчетныйВидЦены,
	|	Перемещение.ВидЦены.ВалютаЦены                              КАК УчетныйВидЦеныВалютаЦены
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Перемещение
	|ГДЕ
	|	Перемещение.Ссылка В(&МассивПеремещений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента, Ссылка
	|");
	Запрос.УстановитьПараметр("МассивПеремещений", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура                    КАК Товар,
	|	ПеремещениеТоваров.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВЫБОР КОГДА &ТоварКод = ""Код"" ТОГДА
	|		ПеремещениеТоваров.Номенклатура.Код
	|	ИНАЧЕ
	|		ПеремещениеТоваров.Номенклатура.Артикул
	|	КОНЕЦ                                                  КАК ТоварКод,
	|
	|	ПеремещениеТоваров.Характеристика.НаименованиеПолное   КАК Характеристика,
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 1
	|		ТОГДА НЕОПРЕДЕЛЕНО 
	|		ИНАЧЕ ПеремещениеТоваров.Упаковка.Наименование
	|	КОНЕЦ                                                  КАК Упаковка,
	|
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|
	|	ПеремещениеТоваров.КоличествоУпаковок КАК Количество,
	|
	|	ВЫБОР
	|		КОГДА НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|			ТОГДА ВЫБОР
	|					КОГДА КоэффициентыУпаковок.Количество < КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|						ТОГДА КоэффициентыУпаковок.Количество
	|					ИНАЧЕ КоэффициентыУпаковок.КоэффициентВложеннойУпаковки
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоВОдномМесте,
	|
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		КАК ЧИСЛО(15,2)) * ПеремещениеТоваров.КоличествоУпаковок КАК Сумма,
	|
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|			* ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		КАК ЧИСЛО(15,2)) КАК Цена,
	|
	|	ВЫБОР
	|		КОГДА ПеремещениеТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|			ПеремещениеТоваров.Количество
	|		ИНАЧЕ
	|			ПеремещениеТоваров.КоличествоУпаковок
	|	КОНЕЦ * &ТекстЗапросаВесУпаковки КАК МассаБрутто,
	|
	|	&ТекстЗапросаВесНоменклатуры * ПеремещениеТоваров.Количество КАК МассаНетто
	|
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ),
	|			(Номенклатура, Характеристика, ВидЦены)
	|				В 
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					&УчетныйВидЦены
	|				ИЗ
	|					Документ.ПеремещениеТоваров.Товары КАК Т
	|				ГДЕ
	|					Т.Ссылка = &ПеремещениеТоваров)
	|
	|		) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ПеремещениеТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ПеремещениеТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыУпаковок КАК КоэффициентыУпаковок
	|		ПО ПеремещениеТоваров.Ссылка = КоэффициентыУпаковок.Ссылка
	|			И ПеремещениеТоваров.НомерСтроки = КоэффициентыУпаковок.НомерСтроки
	|			И ПеремещениеТоваров.КоличествоУпаковок = КоэффициентыУпаковок.КоличествоУпаковок 
	|			И НЕ &ВыводитьБазовыеЕдиницыИзмерения
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ПеремещениеТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеТоваров.НомерСтроки
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПеремещениеТоваров.Упаковка",
			"ПеремещениеТоваров.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
				
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ПеремещениеТоваров.Упаковка",
			"ПеремещениеТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаВесНоменклатуры",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ПеремещениеТоваров.Номенклатура.ЕдиницаИзмерения",
			"ПеремещениеТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ПеремещениеТоваров.Упаковка",
			"ПеремещениеТоваров.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ПеремещениеТоваров.Упаковка",
			"ПеремещениеТоваров.Номенклатура"));
	
	Запрос.УстановитьПараметр("ТоварКод", ТоварКод);
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	ЗапросТоваров = Новый Запрос();
	ЗапросТоваров.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.НомерСтроки,
	|	ПеремещениеТоваровТовары.Ссылка,
	|	ПеремещениеТоваровТовары.Упаковка,
	|	ПеремещениеТоваровТовары.КоличествоУпаковок,
	|	ПеремещениеТоваровТовары.Количество
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &ПеремещениеТоваров";
	
	МассивВыводимыхОбластей = Новый Массив;
	Пока Шапка.Следующий() Цикл

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросТоваров.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросТоваров.УстановитьПараметр("ПеремещениеТоваров", Шапка.Ссылка);
		ЗапросТоваров.Выполнить();
		
		ПродажиСервер.ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ПеремещениеТоваров", Шапка.Ссылка);
		Запрос.УстановитьПараметр("ДатаДокумента", Шапка.ДатаДокумента);
		Запрос.УстановитьПараметр("УчетныйВидЦены", Шапка.УчетныйВидЦены);
		ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

		// Выводим общие реквизиты шапки.
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

		// Вывод шапки таблицы.
		ОбластьМакетаШапка    = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Ложь, Истина);
		ОбластьМакетаШапка.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакетаШапка, Шапка.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

		НомерСтраницы = 1;

		// Вывод заголовка таблицы.
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

		// Инициализация итогов по странице
		ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;

		// Инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;

		// Области макета.
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьМакетаСтрока     = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаВсего      = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал     = Макет.ПолучитьОбласть("Подвал");

		Ном = 0;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Ном = Ном + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакетаСтрока.Параметры.КоличествоМест    = Формат(ВыборкаСтрокТовары.Количество, "ЧЦ=15; ЧДЦ=3");
			ОбластьМакетаСтрока.Параметры.ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),
				СокрЛП(ВыборкаСтрокТовары.Характеристика),
				СокрЛП(ВыборкаСтрокТовары.Упаковка));
			
			СуммаСтроки = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена;
			ОбластьМакетаСтрока.Параметры.Сумма = СуммаСтроки;
			
			Если Ном > 1 Тогда
			
				// Умещаются ли области на страницу при печати.
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакетаСтрока);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				Если Ном = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьМакетаВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;
				
				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					// Вывод итогов по странице.
					ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// Инициализация итогов по странице.
					ИтогКоличествоМестПоСтранице = 0;
					ИтогМассаБруттоПоСтранице    = 0;
					ИтогМассаНеттоПоСтранице     = 0;
					ИтогСуммыПоСтранице          = 0;

					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

					// Вывод заголовка таблицы.
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

				КонецЕсли;

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

			// Обновление итоги по странице
			ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + ВыборкаСтрокТовары.МассаБрутто;
			ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + ВыборкаСтрокТовары.МассаНетто;
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + СуммаСтроки;

			// Обновление итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ВыборкаСтрокТовары.Количество;
			ИтогоМассаБрутто = ИтогоМассаБрутто + ВыборкаСтрокТовары.МассаБрутто;
			ИтогоМассаНетто  = ИтогоМассаНетто  + ВыборкаСтрокТовары.МассаНетто;
			ИтогоСумма       = ИтогоСумма       + СуммаСтроки;

		КонецЦикла;

		// Вывод итогов по странице.
		ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);

		// Вывод итогов по документу в целом.
		ОбластьМакетаВсего.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьМакетаВсего.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьМакетаВсего.Параметры.ИтогоСумма          = ИтогоСумма;
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);

		// Вывод подвала документа.
		ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
		ОбластьМакетаПодвал.Параметры.ДолжностьОтправителя = Шапка.ДолжностьКладовщикаОтправителя;
		ОбластьМакетаПодвал.Параметры.ФИООтправителя       = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.КладовщикОтправитель, Шапка.ДатаДокумента);
		ОбластьМакетаПодвал.Параметры.ДолжностьПолучателя  = Шапка.ДолжностьКладовщикаПолучателя;
		ОбластьМакетаПодвал.Параметры.ФИОПолучателя        = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.КладовщикПолучатель, Шапка.ДатаДокумента);
		ОбластьМакетаПодвал.Параметры.ИтогоСуммаПрописью   = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Цел(ИтогоСумма), ВалютаРеглУчета, Истина);
		ОбластьМакетаПодвал.Параметры.ИтогоСуммаКоп        = Формат(Цел((ИтогоСумма-Цел(ИтогоСумма))*100), "ЧЦ=2; ЧН=00");
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Функция получает данные для формирования печатной формы МХ - 1
//
Функция ПолучитьДанныеДляПечатнойФормыМХ1(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.СкладПолучатель КАК Склад,
	|	Склады.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
	|	Склады.УчетныйВидЦены КАК ВидЦены,
	|	Склады.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтШапка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|		ПО (РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Документ.Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ))
	|			И (РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен)
	|			И (Документ.Организация = РасчетСебестоимостиТоваровОрганизации.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО (Документ.СкладПолучатель = Склады.Ссылка)
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Проведен
	|	И Склады.СкладОтветственногоХранения
	|	И Документ.Организация <> Склады.Поклажедержатель
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Шапка.Склад КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ВидУпаковки,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Шапка.ВидЦены КАК ВидЦены,
	|	Шапка.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО Товары.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен)
	|		ИЛИ (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|			И Шапка.ПредварительныйРасчет ЕСТЬ NULL))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК Ссылка,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Склад КАК Склад,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление ВидУпаковки,
	|	ВидыЗапасов.Количество КАК КоличествоУпаковок,
	|	ВидыЗапасов.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(ВидыЗапасов.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Аналитика.Склад.УчетныйВидЦены КАК ВидЦены,
	|	Аналитика.Склад.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены,
	|	Шапка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО ВидыЗапасов.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Аналитика.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Шапка.Склад.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|;
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "Товары.Упаковка", "Товары.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "Товары.Упаковка", "Товары.Номенклатура"));
	
	СкладыСервер.ДополнитьТекстЗапросаДляПечатныхФормМХ1Х3(Запрос);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[6];
	РезультатПоСкладам = МассивРезультатов[7];
	РезультатПоТабличнойЧасти = МассивРезультатов[8];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоСкладам, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоСкладам,
		РезультатПоТабличнойЧасти);
		
	Возврат СтруктураДанныхДляПечати
	
КонецФункции

// Функция получает данные для формирования печатной формы МХ - 3
//
Функция ПолучитьДанныеДляПечатнойФормыМХ3(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Организация КАК Организация,
	|	Документ.СкладОтправитель КАК Склад,
	|	Склады.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
	|	Склады.УчетныйВидЦены КАК ВидЦены,
	|	Склады.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтШапка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|		ПО (РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Документ.Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ))
	|			И (РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен)
	|			И (Документ.Организация = РасчетСебестоимостиТоваровОрганизации.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО (Документ.СкладОтправитель = Склады.Ссылка)
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Проведен
	|	И Склады.СкладОтветственногоХранения
	|	И Документ.Организация <> Склады.Поклажедержатель
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Шапка.Склад КАК Склад,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ВидУпаковки,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Шапка.ВидЦены КАК ВидЦены,
	|	Шапка.ВалютаЦены КАК ВалютаЦены
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО Товары.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен)
	|		ИЛИ (Шапка.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|			И Шапка.ПредварительныйРасчет ЕСТЬ NULL))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК Ссылка,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	Шапка.Организация КАК Организация,
	|	Аналитика.Склад КАК Склад,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Аналитика.Номенклатура.ЕдиницаИзмерения.Представление ВидУпаковки,
	|	ВидыЗапасов.Количество КАК КоличествоУпаковок,
	|	ВидыЗапасов.Количество КАК Количество,
	|	КОНЕЦПЕРИОДА(ВидыЗапасов.Ссылка.Дата, ДЕНЬ) КАК ДатаПолученияЦены,
	|	Аналитика.Склад.УчетныйВидЦены КАК ВидЦены,
	|	Аналитика.Склад.УчетныйВидЦены.ВалютаЦены КАК ВалютаЦены,
	|	Шапка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВидыЗапасов КАК ВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтШапка КАК Шапка
	|		ПО ВидыЗапасов.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Аналитика.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Аналитика.Склад.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости)
	|;
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "Товары.Упаковка", "Товары.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "Товары.Упаковка", "Товары.Номенклатура"));
	
	СкладыСервер.ДополнитьТекстЗапросаДляПечатныхФормМХ1Х3(Запрос);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов",
		ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[6];
	РезультатПоСкладам = МассивРезультатов[7];
	РезультатПоТабличнойЧасти = МассивРезультатов[8];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоСкладам, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоСкладам,
		РезультатПоТабличнойЧасти);
		
	Возврат СтруктураДанныхДляПечати
	
КонецФункции

// Функция получает данные для формирования печатной формы МХ - 18
//
Функция ПолучитьДанныеДляПечатнойФормыМХ18(ПараметрыПечати, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов			= ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	Если НЕ ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						КАК Ссылка,
	|	ДанныеДокумента.Номер						КАК Номер,
	|	ДанныеДокумента.Дата						КАК Дата,
	|	ДанныеДокумента.Дата						КАК ДатаДокумента,
	|	ДанныеДокумента.Организация					КАК Организация,
	|	ДанныеДокумента.Организация.Префикс			КАК Префикс,
	|	ДанныеДокумента.СкладОтправитель.Представление	КАК ПредставлениеПодразделения
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокВыпуск.Ссылка       КАК Ссылка,
	|	ДокВыпуск.Дата         КАК Дата,
	|	ДокВыпуск.Организация  КАК Организация
	|ПОМЕСТИТЬ ВТДанныеДокументовВыпуска
	|ИЗ 
	|	Документ.ПеремещениеТоваров КАК ДокВыпуск
	|ГДЕ 
	|	ДокВыпуск.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.Ссылка,
	|	СпрУчетнаяПолитика.УчетГотовойПродукцииПоПлановойСтоимости КАК ИспользоватьПлановыеЦены
	|ПОМЕСТИТЬ ВТИспользованиеПлановыхЦен
	|ИЗ (
	|	ВЫБРАТЬ
	|		ДокументыВыпуска.Ссылка,
	|		ДокументыВыпуска.Дата,
	|		ДокументыВыпуска.Организация,
	|		МАКСИМУМ (РСУчетнаяПолитика.Период) КАК УчетнаяПолитикаПериод
	|
	|	ИЗ ВТДанныеДокументовВыпуска КАК ДокументыВыпуска
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК РСУчетнаяПолитика
	|		ПО РСУчетнаяПолитика.Организация = ДокументыВыпуска.Организация
	|		И  РСУчетнаяПолитика.Период <= ДокументыВыпуска.Дата
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыВыпуска.Ссылка,
	|		ДокументыВыпуска.Дата,
	|		ДокументыВыпуска.Организация
	|	) КАК Таб
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК РСУчетнаяПолитика
	|	ПО Таб.Организация = РСУчетнаяПолитика.Организация
	|	И  Таб.УчетнаяПолитикаПериод = РСУчетнаяПолитика.Период
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеПолитикиОрганизаций КАК СпрУчетнаяПолитика
	|	ПО РСУчетнаяПолитика.УчетнаяПолитика = СпрУчетнаяПолитика.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка														КАК Ссылка,
	|	ТаблицаТовары.Номенклатура													КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное								КАК НоменклатураНаименование,
	|	ТаблицаТовары.Номенклатура." + КолонкаКодов + "								КАК НоменклатураКод,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное								КАК ХарактеристикаНаименование,
	|	ТаблицаТовары.Характеристика												КАК Характеристика,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения 											КАК ЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаКодЕдиницыИзмерения 													КАК ЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения 											КАК ВидУпаковки,
	|	ВЫБОР КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		1
	|	ИНАЧЕ
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|	КОНЕЦ																				КАК КоличествоВОдномМесте,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок * &ТекстЗапросаВес)					КАК МассаБрутто,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок)										КАК Количество,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок) 									КАК КоличествоМест,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки)											КАК НомерСтроки,
	|	ЛОЖЬ																				КАК ЭтоВозвратнаяТара,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА ВТИспользованиеПлановыхЦен.ИспользоватьПлановыеЦены ЕСТЬ NULL
	|				  ИЛИ НЕ ВТИспользованиеПлановыхЦен.ИспользоватьПлановыеЦены
	|			ТОГДА 0
	|			ИНАЧЕ 0
	|			КОНЕЦ)																		КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ВТИспользованиеПлановыхЦен.ИспользоватьПлановыеЦены ЕСТЬ NULL
	|				  ИЛИ НЕ ВТИспользованиеПлановыхЦен.ИспользоватьПлановыеЦены
	|			ТОГДА 0
	|			ИНАЧЕ 0
	|		КОНЕЦ)																			КАК Сумма,
	|	ТаблицаТовары.Ссылка.СкладПолучатель.Представление                                       КАК Получатель
	|
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТИспользованиеПлановыхЦен КАК ВТИспользованиеПлановыхЦен
	|	ПО ТаблицаТовары.Ссылка = ВТИспользованиеПлановыхЦен.Ссылка
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|															)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка,
	|	Получатель";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаВес",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатПоШапке = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[3];
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти",
		РезультатПоШапке,
		РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "ПеревозчикПартнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ПеревозчикПартнер");
	
КонецПроцедуры

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Серия КАК Серия,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Количество КАК КоличествоУпаковок,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ЛОЖЬ КАК ЭтоТовар,
	|	ЛОЖЬ КАК ЭтоНеВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка
	|ПОМЕСТИТЬ ПеремещениеТоваровТаблицаТоваров
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	0,
	|	0,
	|	0,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ТаблицаТоваров.Упаковка
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	|
	|ГДЕ
	|	НЕ ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДокумента

Процедура ПараметрыЗапросаДляСозданияНаОсновании(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", Истина);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЗапросаДляПодбора(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("СкладОтправитель", ДанныеОтбора.РеквизитыШапки.СкладОтправитель);
	ПараметрыЗапросов.Вставить("СкладПолучатель",  ДанныеОтбора.РеквизитыШапки.СкладПолучатель);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",  ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
	ИменаПодзапросов.Добавить("БлокСторноНакладная");
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	
КонецПроцедуры

Процедура ПараметрыЗапросаДляПерезаполненияПоОрдерам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", Истина);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("ТоварыНакладной",  ДанныеОтбора.ТоварыНакладной);
	ПараметрыЗапросов.Вставить("УчитыватьСобирается", Истина);
	ПараметрыЗапросов.Вставить("ЗаполнятьПоСобирается", Истина);
	
	ИменаЗапросов.Добавить("ВтЗаказыОтбор");
	ИменаЗапросов.Добавить("ВтНакладная");
	ИменаЗапросов.Добавить("ТаблицаОтгружено");
	
	ИменаЗапросов.Добавить("ТаблицаОформить");
	ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
	ИменаПодзапросов.Добавить("БлокСторноНакладная");
	ИменаПодзапросов.Добавить("БлокНовыеДвиженияНакладная");
	
КонецПроцедуры

Процедура ПараметрыЗапросаДляЗаполненияПоЗаказам(ПараметрыЗапросов, ИменаЗапросов, ИменаПодзапросов, ДанныеОтбора)
	
	ПараметрыЗапросов.Вставить("МассивЗаказов",    ДанныеОтбора.МассивЗаказов);
	ПараметрыЗапросов.Вставить("ОтобратьПоЗаказу", ДанныеОтбора.МассивЗаказов.Количество() = 1);
	ПараметрыЗапросов.Вставить("Регистратор",      ДанныеОтбора.РеквизитыШапки.Ссылка);
	ПараметрыЗапросов.Вставить("Организация",      ДанныеОтбора.РеквизитыШапки.Организация);
	ПараметрыЗапросов.Вставить("СкладОтправитель", ДанныеОтбора.РеквизитыШапки.СкладОтправитель);
	ПараметрыЗапросов.Вставить("СкладПолучатель",  ДанныеОтбора.РеквизитыШапки.СкладПолучатель);
	
	Если ДанныеОтбора.ЗаполнятьПоОрдеру Тогда
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		ИменаЗапросов.Добавить("ТаблицаОтгружено");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
		
	Иначе
		
		ИменаЗапросов.Добавить("ВтЗаказыОтбор");
		
		ИменаЗапросов.Добавить("ТаблицаОформить");
		ИменаПодзапросов.Добавить("БлокРегистрЗаказы");
		ИменаПодзапросов.Добавить("БлокСторноНакладная");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаВременнойТаблицыНакладной()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Количество            КАК Количество,
		|
		|	Таблица.НомерСтроки           КАК НомерСтроки,
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.НазначениеОтправителя КАК НазначениеОтправителя,
		|	Таблица.Назначение            КАК Назначение,
		|	Таблица.Серия                 КАК Серия,
		|	Таблица.Сделка                КАК Сделка,
		|
		|	Таблица.КодСтроки             КАК КодСтроки,
		|	Таблица.Упаковка              КАК Упаковка,
		|
		|	ВЫБОР КОГДА Таблица.КодСтроки = 0 ТОГДА
		|				&Регистратор
		|			ИНАЧЕ
		|				Таблица.ЗаказНаПеремещение
		|		КОНЕЦ                     КАК Заказ
		|
		|ПОМЕСТИТЬ ВТНакладная
		|ИЗ
		|	&ТоварыНакладной КАК Таблица
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует результат запроса по невыполненной части заказов
//
// Параметры:
// ДанныеОтбора - Структура - поля, по которым будут отобраны остатки заказов
// Режим        - Строка - "ВводНаОсновании" или "Подбор".
//
// Вовращаемое значение:
// Результат запроса - результат запроса по невыполненной части заказов
//
Функция ТекстЗапросаВременнойТаблицыРаспоряжений()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка КАК Заказ
		|ПОМЕСТИТЬ ВТЗаказыОтбор
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказНаПеремещение.Ссылка В (&МассивЗаказов)
		|		ИНАЧЕ ЗаказНаПеремещение.Организация      = &Организация
		|			И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
		|			И ЗаказНаПеремещение.СкладПолучатель  = &СкладПолучатель
		|	КОНЕЦ
		|	И ЗаказНаПеремещение.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Заказ
		|;
		|
		|//////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбъединения(Имена, Тексты)
	
	ТекстОбъединения = "";
	ЭтоПервыйБлок = Истина;
	
	Для Каждого Имя Из Имена Цикл
		
		Если ЭтоПервыйБлок Тогда
			ЭтоПервыйБлок = Ложь;
		Иначе
			
			ТекстОбъединения = ТекстОбъединения + "
			                                      |
			                                      |	ОБЪЕДИНИТЬ ВСЕ
			                                      |
			                                      |";
			
		КонецЕсли;
		
		ТекстОбъединения = ТекстОбъединения + Тексты[Имя];
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Заказ             КАК ЗаказНаПеремещение,
		|	Набор.КодСтроки         КАК КодСтроки,
		|
		|	Набор.Номенклатура          КАК Номенклатура,
		|	Набор.Характеристика        КАК Характеристика,
		|	МАКСИМУМ(Набор.НазначениеОтправителя) КАК НазначениеОтправителя,
		|	МАКСИМУМ(Набор.Назначение)            КАК Назначение,
		|	Набор.Серия                 КАК Серия,
		|	МАКСИМУМ(Набор.Дата)                  КАК Дата,
		|	МАКСИМУМ(Набор.НомерСтроки)           КАК НомерСтроки,
		|	МАКСИМУМ(Набор.ДатаОтгрузки)          КАК ДатаОтгрузки,
		|	МАКСИМУМ(Набор.Сделка)                КАК Сделка,
		|	МАКСИМУМ(Набор.ПрисутствуетВДокументе) КАК ПрисутствуетВДокументе,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.Упаковка
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладной,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.Упаковка
		|		КОНЕЦ)                             КАК УпаковкаЗаказа,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				Набор.УпаковкаКоэффициент
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ)                             КАК УпаковкаНакладнойКоэффициент,
		|
		|	МАКСИМУМ(ВЫБОР КОГДА Набор.ПрисутствуетВДокументе ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.УпаковкаКоэффициент
		|		КОНЕЦ)                             КАК УпаковкаЗаказаКоэффициент,
		|
		|
		|	СУММА(Набор.КоличествоВЗаказе)        КАК КоличествоВЗаказе,
		|	СУММА(Набор.КоличествоВНакладной)     КАК КоличествоВНакладной
		|
		|ИЗ ТекстОбъединения КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Набор.Заказ, Набор.КодСтроки,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Серия,
		|	ВЫБОР КОГДА Набор.КодСтроки <> 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				Набор.НомерСтроки
		|		КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.КоличествоВЗаказе) > 0 ИЛИ СУММА(Набор.КоличествоВНакладной) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата, Заказ, НомерСтроки
		|;
		|
		|/////////////////////////////////////////////////////////////////////
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединения", "(" + ТекстОбъединения + ")");
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиРегистраЗаказы()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаОстатки.ЗаказНаПеремещение КАК Заказ,
		|		ТаблицаОстатки.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаОстатки.КОформлениюОстаток КАК КоличествоВЗаказе,
		|		0                                 КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		Таблица.Номенклатура        КАК Номенклатура,
		|		Таблица.Характеристика      КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								Таблица.Ссылка.Назначение
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|			
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                   КАК НазначениеОтправителя,
		|
		|		Таблица.Назначение          КАК Назначение,
		|		Таблица.Серия               КАК Серия,
		|		ДанныеДокумента.Дата        КАК Дата,
		|		Таблица.НомерСтроки         КАК НомерСтроки,
		|		Таблица.НачалоОтгрузки      КАК ДатаОтгрузки,
		|		ДанныеДокумента.Сделка      КАК Сделка,
		|		ЛОЖЬ                        КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|				ЗаказНаПеремещение В(
		|					ВЫБРАТЬ
		|						Таблица.Заказ КАК Заказ
		|					ИЗ
		|						ВТЗаказыОтбор КАК Таблица)) КАК ТаблицаОстатки
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК Таблица
		|			ПО ТаблицаОстатки.ЗаказНаПеремещение = Таблица.Ссылка
		|			 И ТаблицаОстатки.КодСтроки = Таблица.КодСтроки
		|	
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ДанныеДокумента
		|			ПО ТаблицаОстатки.ЗаказНаПеремещение = ДанныеДокумента.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОтгруженоПоОрдерам()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОстатки.ДокументОтгрузки       КАК ЗаказНаПеремещение,
		|	ТаблицаОстатки.Номенклатура           КАК Номенклатура,
		|	ТаблицаОстатки.Характеристика         КАК Характеристика,
		|	ТаблицаОстатки.Серия                  КАК Серия,
		|	ТаблицаОстатки.Назначение             КАК НазначениеОтправителя,
		|	1                                     КАК УпаковкаКоэффициент,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|		КОНЕЦ)                            КАК Собирается,
		|	
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &ЗаполнятьПоСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ТаблицаОстатки.Собрано)         КАК Количество
		|ИЗ
		|	ВТЗаказыОтбор КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТаблицаОстатки
		|		ПО Таблица.Заказ = ТаблицаОстатки.ДокументОтгрузки
		|		 И ТаблицаОстатки.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОстатки.ДокументОтгрузки,
		|	ТаблицаОстатки.Номенклатура, ТаблицаОстатки.Характеристика, ТаблицаОстатки.Серия, ТаблицаОстатки.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|					ТаблицаОстатки.КОтгрузке
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА ТаблицаОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ТаблицаОстатки.Регистратор <> &Регистратор ТОГДА
		|					- ТаблицаОстатки.КОформлению
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ВЫБОР КОГДА &УчитыватьСобирается И ТаблицаОстатки.ДокументОтгрузки = &Регистратор ТОГДА
		|					ТаблицаОстатки.Собирается
		|				ИНАЧЕ
		|					0
		|			КОНЕЦ
		|		+ ТаблицаОстатки.Собрано) > 0
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСторноНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		ТаблицаСторно.ЗаказНаПеремещение КАК Заказ,
		|		ТаблицаСторно.КодСтроки          КАК КодСтроки,
		|
		|		ТаблицаСторно.КОформлению        КАК КоличествоВЗаказе,
		|		0                                КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		ТаблицаСторно.Номенклатура       КАК Номенклатура,
		|		ТаблицаСторно.Характеристика     КАК Характеристика,
		|
		|		ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			
		|					ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|								Таблица.Ссылка.Назначение
		|							ИНАЧЕ
		|								Таблица.Назначение
		|						КОНЕЦ
		|			
		|				ИНАЧЕ
		|					ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			
		|			КОНЕЦ                        КАК НазначениеОтправителя,
		|
		|		Таблица.Назначение               КАК Назначение,
		|		Таблица.Серия                    КАК Серия,
		|		ДанныеДокумента.Дата             КАК Дата,
		|		Таблица.НомерСтроки              КАК НомерСтроки,
		|		Таблица.НачалоОтгрузки           КАК ДатаОтгрузки,
		|		ДанныеДокумента.Сделка           КАК Сделка,
		|		ЛОЖЬ                             КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаПеремещение КАК ТаблицаСторно
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК Таблица
		|			ПО Таблица.Ссылка = ТаблицаСторно.ЗаказНаПеремещение
		|			 И Таблица.КодСтроки = ТаблицаСторно.КодСтроки
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ДанныеДокумента
		|			ПО ТаблицаСторно.ЗаказНаПеремещение = ДанныеДокумента.Ссылка
		|	ГДЕ
		|		ТаблицаСторно.Регистратор = &Регистратор
		|		И ТаблицаСторно.ЗаказНаПеремещение В(
		|			ВЫБРАТЬ
		|				Таблица.Заказ КАК Заказ
		|			ИЗ
		|				ВТЗаказыОтбор КАК Таблица)
		|		И ТаблицаСторно.Активность";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНовыеДвиженияНакладная()
	
	ТекстЗапроса =
		"	ВЫБРАТЬ
		|		Таблица.Заказ       КАК Заказ,
		|		Таблица.КодСтроки   КАК КодСтроки,
		|		0                   КАК КоличествоВЗаказе,
		|		Таблица.Количество  КАК КоличествоВНакладной,
		|
		|		// Справочная информация.
		|		Таблица.Номенклатура          КАК Номенклатура,
		|		Таблица.Характеристика        КАК Характеристика,
		|		Таблица.НазначениеОтправителя КАК НазначениеОтправителя,
		|		Таблица.Назначение            КАК Назначение,
		|		Таблица.Серия                 КАК Серия,
		|		НЕОПРЕДЕЛЕНО                  КАК Дата,
		|		Таблица.НомерСтроки           КАК НомерСтроки,
		|		НЕОПРЕДЕЛЕНО                  КАК ДатаОтгрузки,
		|		Таблица.Сделка                КАК Сделка,
		|		ИСТИНА                        КАК ПрисутствуетВДокументе,
		|
		|		Таблица.Упаковка                          КАК Упаковка,
		|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК УпаковкаКоэффициент
		|	ИЗ
		|		ВтНакладная КАК Таблица";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВЫРАЗИТЬ(Таблица.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
			"ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура)"));
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СозданиеНаОснованииПроверкаОтгрузить()
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК ТоварыЗаказа
		|ГДЕ
		|	ТоварыЗаказа.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ТоварыЗаказа.Ссылка В(&МассивСсылок)
		|	И НЕ ТоварыЗаказа.Отменено
		|	И ТоварыЗаказа.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТоварыЗаказа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК Документ
		|			ПО Документ.Ссылка = ТоварыЗаказа.Ссылка
		|ГДЕ
		|	Документ.ПеремещениеПоЗаказам = Ложь
		|	И Документ.Ссылка В(&МассивСсылок)
		|	И Документ.Проведен
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СозданиеНаОснованииПроверкаРеквизитовШапки()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(Заказ.Статус)                             КАК Статус,
		|	МИНИМУМ(Заказ.Проведен)                           КАК Проведен,
		|	МИНИМУМ(Заказ.ХозяйственнаяОперация)              КАК ХозяйственнаяОперация,
		|	МИНИМУМ(Заказ.Организация)                        КАК Организация,
		|	МИНИМУМ(Заказ.ОрганизацияПолучатель)              КАК ОрганизацияПолучатель,
		|	МИНИМУМ(Заказ.СкладОтправитель)                   КАК СкладОтправитель,
		|	МИНИМУМ(Заказ.СкладПолучатель)                    КАК СкладПолучатель,
		|	МИНИМУМ(Заказ.Подразделение)                      КАК Подразделение,
		|	МИНИМУМ(Заказ.СкладПолучатель.УчетныйВидЦены)     КАК ВидЦены,
		|	МИНИМУМ(Заказ.НаправлениеДеятельности)            КАК НаправлениеДеятельности,
		|	МИНИМУМ(Заказ.ВариантПриемкиТоваров)              КАК ВариантПриемкиТоваров,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|				И МИНИМУМ(Заказ.СпособДоставки) = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|			ТОГДА МИНИМУМ(Заказ.СпособДоставки)
		|	КОНЕЦ                                             КАК СпособДоставки,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|				И МИНИМУМ(Заказ.СпособДоставки) = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.ПеревозчикПартнер) = 1
		|			ТОГДА МИНИМУМ(Заказ.ПеревозчикПартнер)
		|	КОНЕЦ                                             КАК ПеревозчикПартнер,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.АдресДоставки) = 1
		|			ТОГДА МИНИМУМ(Заказ.АдресДоставки)
		|	КОНЕЦ                                             КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.АдресДоставки) = 1
		|			ТОГДА МИНИМУМ(ВЫРАЗИТЬ(Заказ.АдресДоставкиЗначенияПолей КАК СТРОКА(1000)))
		|	КОНЕЦ                                             КАК АдресДоставкиЗначенияПолей,
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|				И МИНИМУМ(Заказ.СпособДоставки) = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(Заказ.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
		|			ТОГДА МИНИМУМ(ВЫРАЗИТЬ(Заказ.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)))
		|	КОНЕЦ                                             КАК ДополнительнаяИнформацияПоДоставке,
		|
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.ХозяйственнаяОперация) КАК РазличныхОпераций,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.Организация)           КАК РазличныхОрганизаций,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.ОрганизацияПолучатель) КАК РазличныхОрганизацийПолучателей,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.СкладОтправитель)      КАК РазличныхСкладовОтправителей,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.СкладПолучатель)       КАК РазличныхСкладовПолучателей,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.ВариантПриемкиТоваров) КАК РазличныхВариантовПриемкиТоваров,
		|	НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.СпособДоставки) > 1
		|		И МАКСИМУМ(ВЫБОР
		|					КОГДА Заказ.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|	                	ТОГДА ИСТИНА
		|	                	ИНАЧЕ ЛОЖЬ КОНЕЦ) = ИСТИНА    КАК ЕстьНесовместимыеСпособыДоставки
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Заказ
		|ГДЕ
		|	Заказ.Ссылка В(&МассивСсылок)
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////////////////
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СозданиеНаОснованииПроверкаНаличияОрдеров()

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,, ДокументОтгрузки В (&МассивСсылок)) КАК ТаблицаОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО СпрСклады.Ссылка = ТаблицаОбороты.Склад
		|ГДЕ
		|	ТаблицаОбороты.КОтгрузкеПриход > 0 И(
		|		ТаблицаОбороты.КОтгрузкеРасход > 0
		|		ИЛИ НЕ СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|		ИЛИ СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке > &НачалоТекущегоДня)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыСозданияПоГруппеСкладов(ПараметрКоманды) Экспорт
	
	Запрос = Новый Запрос();
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад,
		|	Товары.Склад.Наименование КАК Наименование
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Заказ
		|	И Товары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", ПараметрКоманды);
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
	НесколькоСкладов = Ложь;
	Если Склады.Количество() > 1 Тогда
		НесколькоСкладов = Истина;
	ИначеЕсли Склады.Количество() = 0 Тогда
		Склады.Добавить(Справочники.Склады.ПустаяСсылка());
	КонецЕсли;
	
	ПараметрыСозданияПоГруппеСкладов = Новый Структура();
	ПараметрыСозданияПоГруппеСкладов.Вставить("СписокСкладов",    Склады);
	ПараметрыСозданияПоГруппеСкладов.Вставить("НесколькоСкладов", НесколькоСкладов);
	
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

// Функция определяет реквизиты выбранного перемещения товаров.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПеремещениеТоваров - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - реквизиты перемещения товаров
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация",
		Дата,
		Организация,);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Обработка.ЖурналДокументовВнутреннегоТовародвижения.Форма.ФормаСпискаКОформлению";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ПеремещениеТоваров))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ПеремещениеТоваров)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ПеремещениеТоваров))
		И ПравоДоступа("Просмотр",   Метаданные.Документы.ЗаказНаПеремещение)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.ЗаказыНаПеремещение)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросПоРаспоряжениямВсего.ДокументОтгрузки КАК Распоряжение
	|ПОМЕСТИТЬ ВтРаспоряжения
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ТИПЗНАЧЕНИЯ(ДокументОтгрузки) В (&ДоступныеТипы)) КАК ЗапросПоРаспоряжениямВсего
	|ГДЕ
	|	ЗапросПоРаспоряжениямВсего.КОтгрузкеОстаток - ЗапросПоРаспоряжениямВсего.СобраноОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросПоРаспоряжениямВсего.ЗаказНаПеремещение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки КАК ЗапросПоРаспоряжениямВсего
	|ГДЕ
	|	ЗапросПоРаспоряжениямВсего.КОформлениюОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтРаспоряжения.Распоряжение) КАК ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе
	|ИЗ
	|	ВтРаспоряжения КАК ВтРаспоряжения";
	
	ДоступныеТипы = Новый Массив();
	ДоступныеТипы.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	ДоступныеТипы.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
	
	Запрос.УстановитьПараметр("ДоступныеТипы", ДоступныеТипы);
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПеремещенияТоваров
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ПеремещенияТоваров";
	ДелоРодитель.Представление  = НСтр("ru = 'Перемещения товаров'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Склад;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтгрузки", ОбщиеПараметрыЗапросов.ТекущаяДата);
	ПараметрыОтбора.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ТипНакладной", Тип("ДокументСсылка.ПеремещениеТоваров"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("КлючНазначенияФормы", "ПеремещенияТоваров");
	ПараметрыФормы.Вставить("ЭтоТекущиеДела");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Распоряжения на оформление в работе'");
	Дело.Количество     = Результат.ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПеремещенияТоваров";
	
	Если Результат.ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ПеремещениеТоваров";
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументДляОбработки
	|ГДЕ
	|	(ДокументДляОбработки.АдресДоставки <> """"
	|		И ВЫРАЗИТЬ(ДокументДляОбработки.АдресДоставкиЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ДокументДляОбработки.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ
	|	(ДокументДляОбработки.АдресДоставкиПеревозчика <> """"
	|		И ВЫРАЗИТЬ(ДокументДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ДокументДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПеремещениеТоваров";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ВариантПриемкиКонстанта = Константы.ВариантПриемкиТоваров.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка                       КАК Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных          КАК ВерсияДанных,
	|	ОбъектыДляОбработки.Ссылка.Проведен              КАК Проведен,
	|	ОбъектыДляОбработки.Ссылка.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставки         КАК АдресДоставки,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	ВТДокументыДляОбработки КАК ОбъектыДляОбработки
	|;
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка                КАК Ссылка,
	|	ОбъектыДляОбработки.ВерсияДанных          КАК ВерсияДанных,
	|	ОбъектыДляОбработки.Проведен              КАК Проведен,
	|	ВЫБОР КОГДА
	|		ОбъектыДляОбработки.ВариантПриемкиТоваров <> ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	КАК                                       ТребуетсяУказаниеВариантаПриемки,
	|	(ОбъектыДляОбработки.АдресДоставки <> """"
	|	И ВЫРАЗИТЬ(ОбъектыДляОбработки.АдресДоставкиЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ОбъектыДляОбработки.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ (ОбъектыДляОбработки.АдресДоставкиПеревозчика <> """"
	|		И ВЫРАЗИТЬ(ОбъектыДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ОбъектыДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	КАК                                       ТребуетсяПересчетЗначенийПолейАдреса
	|ИЗ
	|	ТаблицаСсылок КАК ОбъектыДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Выборка.ТребуетсяУказаниеВариантаПриемки Тогда
				ДокументОбъект.ВариантПриемкиТоваров = ВариантПриемкиКонстанта;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Выборка.ТребуетсяПересчетЗначенийПолейАдреса Тогда
				Если Не ПустаяСтрока(ДокументОбъект.АдресДоставкиЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(ДокументОбъект.АдресДоставки, НовыеЗначенияПолей);
					ДокументОбъект.АдресДоставкиЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
				Если Не ПустаяСтрока(ДокументОбъект.АдресДоставкиПеревозчикаЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(ДокументОбъект.АдресДоставкиПеревозчика, НовыеЗначенияПолей);
					ДокументОбъект.АдресДоставкиПеревозчикаЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтчетСостояниеВыполненияДокумента

Функция ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.ДокументПоступления КАК ДокументПоступления,
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|
		|	СУММА(Набор.Принимается)  КАК Принимается,
		|	СУММА(Набор.Принято)      КАК Принято,
		|	СУММА(Набор.Принять)      КАК Принять,
		|	СУММА(Набор.Поступило)    КАК Поступило,
		|
		|	СУММА(Набор.КПоступлению) КАК КПоступлению,
		|	СУММА(Набор.Оформить)     КАК Оформить,
		|	СУММА(Набор.Оформлено)    КАК Оформлено,
		|
		|	МАКСИМУМ(Набор.ОрдернаяСхемаПриПоступлении) КАК ОрдернаяСхемаПриПоступлении
		|
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКПоступлению.Характеристика      КАК Характеристика,
		|		ТоварыКПоступлению.Склад               КАК Склад,
		|
		|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток  КАК Принимается,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Принято,
		|		ТоварыКПоступлению.КОформлениюОрдеровКонечныйОстаток КАК Принять,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Поступило,
		|
		|		0                                              КАК КПоступлению,
		|		0                                              КАК Оформить,
		|		0                                              КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты( , , , ,
		|				ДокументПоступления В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыКОформлению.Ссылка             КАК ДокументПоступления,
		|		ТоварыКОформлению.Номенклатура       КАК Номенклатура,
		|		ТоварыКОформлению.Характеристика     КАК Характеристика,
		|		ТоварыКОформлению.Ссылка.СкладПолучатель КАК Склад,
		|
		|		0                                    КАК Принимается,
		|		0                                    КАК Принято,
		|		0                                    КАК Принять,
		|		0                                    КАК Поступило,
		|
		|		ТоварыКОформлению.Количество         КАК КПоступлению,
		|		0                                    КАК Оформить,
		|		ТоварыКОформлению.Количество         КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКОформлению.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКОформлению.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ТоварыКОформлению
		|ГДЕ
		|	НЕ ТоварыКОформлению.Ссылка.ПеремещениеПоЗаказам
		|	И ТоварыКОформлению.Ссылка В(
		|		ВЫБРАТЬ
		|			ВтДокументы.ДокументСсылка
		|		ИЗ
		|			ВтДокументы КАК ВтДокументы)) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ДокументПоступления,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли
