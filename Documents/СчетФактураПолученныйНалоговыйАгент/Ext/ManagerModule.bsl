#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.СчетФактураПолученныйНалоговыйАгент.ДобавитьКомандуСоздатьНаОснованииКорректировочныйСчетФактура(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Счет-фактура полученный".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииКорректировочныйСчетФактура(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.КорректировочныйСчетФактура";
		КомандаСоздатьНаОсновании.Идентификатор = "КорректировочныйСчетФактура";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Корректировочный/исправительный счет-фактура'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
			
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Счет-фактура полученный".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаПартииПоВидамНалогообложения(КомандыОтчетов);
	
КонецПроцедуры


// Функция находит счета-фактуры заданного документа.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти счет-фактуру;
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура;
//	РеквизитыСчетФактуры - Структура - Возвращаемый. Данные счета-фактуры (Ссылка, Номер, ДатаСоставления, ВИностраннойВалюте);
//	Проведен - Булево - Поиск только проведенных счетов-фактур..
//
// Возвращаемое значение:
//	Массив - Массив найденных счетов-фактур.
//
Функция СчетаФактурыПоОснованию(Основание, Организация = Неопределено, РеквизитыСчетаФактуры = Неопределено, Проведен = Истина) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.Ссылка.Номер КАК Номер,
	|	ТаблицаОснований.Ссылка.Дата КАК Дата,
	|	ТаблицаОснований.Ссылка.ДатаСоставления КАК ДатаСоставления,
	|	ТаблицаОснований.Ссылка.НомерИсправления КАК НомерИсправления,
	|	ТаблицаОснований.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	ТаблицаОснований.Ссылка.Валюта КАК Валюта,
	|	ТаблицаОснований.Ссылка.Проведен КАК Проведен,
	|	ТаблицаОснований.Ссылка.Корректировочный КАК Корректировочный
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ТаблицаОснований.ДокументОснование = &Основание
	|	И (ТаблицаОснований.Ссылка.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОснований.Ссылка.НомерИсправления УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПометкаУдаления = ЛОЖЬ", "Проведен");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, ТаблицаСчетовФактур[0]);
	КонецЕсли;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

// Помечает на удаление счет-фактуру, если:
// - организация счета-фактуры не соответствует указанной 
// - или если документ-основание помечен на удаление
//
// Параметры:
//	Основание		- Документ - документ-основание счета-фактуры
//	ПометкаУдаления - Булево - пометка удаления документа-основания
//	Организация		- СправочникСсылка.Организации - Организация, для которой формируется счет-фактура
//
Процедура ПроверитьРеквизитыСчетФактуры(Основание, ПометкаУдаления, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|		ПО СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|ГДЕ
	|	НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Организация <> Неопределено И Выборка.Организация <> Организация)
		 ИЛИ ПометкаУдаления Тогда
			Если Выборка.КоличествоОснований = 1 Тогда			 
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(Основание);
				ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает реквизиты исправляемого счета-фактуры.
//
// Параметры:
//	Основание		 - ДокументСсылка - документ-основание счета-фактуры
//	Организация		 - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура
//
// Возвращаемое значение:
//	Структура - Реквизиты счета-фактуры
//
Функция ИсправляемыйСчетФактураПоОснованию(Ссылка, Основание, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсправляемыйСчетФактура = Неопределено;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ОснованияСчетаФактуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировок.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеКорректировок
	|ГДЕ
	|	ДанныеКорректировок.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеОснования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаПриобретения КАК ДанныеКорректировок
	|	ПО
	|		ДанныеКорректировок.ДокументОснование = ДанныеОснования.ДокументОснование
	|
	|ГДЕ
	|	ДанныеОснования.Ссылка = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка                        КАК Ссылка,
	|	СчетФактураПолученный.Валюта                        КАК Валюта,
	|	СчетФактураПолученный.Организация                   КАК Организация,
	|	СчетФактураПолученный.Контрагент                    КАК Контрагент,
	|	СчетФактураПолученный.КодВидаОперации               КАК КодВидаОперации,
	|	СчетФактураПолученный.Корректировочный              КАК Корректировочный,
	|	СчетФактураПолученный.Номер                         КАК НомерИсходногоДокумента,
	|	СчетФактураПолученный.Номер                         КАК Номер,
	|	СчетФактураПолученный.Подразделение                 КАК Подразделение,
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		ЕСТЬNULL(СчетФактураПолученный.СчетФактураОснование.ДатаСоставления, Неопределено)
	|	ИНАЧЕ
	|		СчетФактураПолученный.ДатаСоставления
	|	КОНЕЦ                                             КАК ДатаИсходногоДокумента,
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		ЕСТЬNULL(СчетФактураПолученный.СчетФактураОснование.ДатаСоставления, Неопределено)
	|	ИНАЧЕ
	|		СчетФактураПолученный.ДатаСоставления
	|	КОНЕЦ                                             КАК ДатаСоставления,
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		СчетФактураПолученный.НомерИсправления
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ                                             КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		СчетФактураПолученный.Дата
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ                                             КАК ДатаИсправленияИсходногоДокумента,
	|	
	|	СчетФактураПолученный.ДокументыОснования.(
	|		ДокументОснование,
	|		ИсходныйДокумент,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента,
	|		НомерИсправленияИсходногоДокумента,
	|		ДатаИсправленияИсходногоДокумента
	|	) КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйОснования
	|	ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйОснования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияСчетаФактуры КАК ОснованияСчетаФактуры
	|		ПО ОснованияСчетаФактуры.Ссылка = СчетФактураПолученныйОснования.ДокументОснование
	|
	|ГДЕ
	|	СчетФактураПолученный.Ссылка <> &Ссылка
	|	И (СчетФактураПолученный.Организация = &Организация
	|	ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И СчетФактураПолученный.Проведен
	|	И НЕ СчетФактураПолученный.ПометкаУдаления
	|	И НЕ СчетФактураПолученный.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.Корректировочный УБЫВ,
	|	СчетФактураПолученный.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		ТаблицаОснований = Выборка.ДокументыОснования.Выгрузить();
		Если ТаблицаОснований.Найти(Основание,"ДокументОснование")=Неопределено Тогда
			
			ТаблицаОснований.Очистить();
			
			СтрокаОснования = ТаблицаОснований.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОснования, Выборка);
			СтрокаОснования.ДокументОснование = Основание;
			Если Выборка.Корректировочный Тогда
				СтрокаОснования.ИсходныйДокумент = Выборка.Ссылка;
				РеквизитыСчетаФактурыОснования = Документы.СчетФактураПолученныйНалоговыйАгент.ДанныеСчетаФактуры(Выборка.Ссылка);
				ИсходныеДанныеСчетаФактуры = РеквизитыСчетаФактурыОснования.ДокументыОснования;
				Для Каждого СтрокаТаблицы Из ИсходныеДанныеСчетаФактуры Цикл
					ЗаполнитьЗначенияСвойств(СтрокаОснования, СтрокаТаблицы, "НомерИсходногоДокумента,ДатаИсходногоДокумента");
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		РеквизитыСчетаФактуры.Вставить("ДокументыОснования", ТаблицаОснований);
		
	КонецЕсли;
	
	Возврат РеквизитыСчетаФактуры;
	
КонецФункции

// Получает реквизиты счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураПолученный - Счет-фактура, данные которого необходимо получить.
//
// Возвращаемое значение:
//	Структура - Реквизиты счета-фактуры
//
Функция ДанныеСчетаФактуры(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		СчетФактураПолученный.СчетФактураОснование
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК СчетФактураОснование,
	|	СчетФактураПолученный.Валюта                        КАК Валюта,
	|	СчетФактураПолученный.Организация                   КАК Организация,
	|	СчетФактураПолученный.Контрагент                    КАК Контрагент,
	|	СчетФактураПолученный.ИННКонтрагента                КАК ИННКонтрагента,
	|	СчетФактураПолученный.КППКонтрагента                КАК КППКонтрагента,
	|	СчетФактураПолученный.КодВидаОперации               КАК КодВидаОперации,
	|	СчетФактураПолученный.Корректировочный              КАК Корректировочный,
	|	СчетФактураПолученный.Номер                         КАК Номер,
	|	СчетФактураПолученный.Дата                          КАК Дата,
	|	СчетФактураПолученный.ДатаСоставления               КАК ДатаСоставления,
	|	СчетФактураПолученный.Подразделение                 КАК Подразделение,
	|	СчетФактураПолученный.ДокументыОснования.(
	|		ДокументОснование,
	|		ИсходныйДокумент,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента,
	|		НомерИсправленияИсходногоДокумента,
	|		ДатаИсправленияИсходногоДокумента,
	|		Сумма,
	|		НалоговаяБаза,
	|		СтавкаНДС,
	|		СуммаНДС
	|	)                                                 КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		СтруктураДанных.Вставить("ДокументыОснования", Выборка.ДокументыОснования.Выгрузить());
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Определяет документы "Корректировка поступления" по переданному основанию, по которым требуется ввести счет-фактуру.
//
// Параметры:
//	Основание - ДокументСсылка - Основание корректировки
//
// Возвращаемое значение:
//	ТаблицаЗначений - Найденные документы корректировки и даты корректировки.
//
Функция КорректировочныеДокументыПоОснованию(Основание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИсходные
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|	ПО СчетФактураПолученный.Ссылка = ОснованияСчетаФактуры.Ссылка
	|		И НЕ СчетФактураПолученный.Исправление
	|		И СчетФактураПолученный.Проведен
	|ГДЕ
	|	ОснованияСчетаФактуры.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаПриобретения.Ссылка КАК Ссылка,
	|	КорректировкаПриобретения.Дата КАК Дата
	|ИЗ
	|	ВТ_СчетаФактурыИсходные КАК СчетаФактурыИсходные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|			ПО СчетаФактурыИсходные.Ссылка = ОснованияСчетаФактуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|			ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаПриобретения.ДокументОснование
	|			И КорректировкаПриобретения.ВидКорректировки В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
	|			ПО (КорректировкаПриобретения.Ссылка = ТребуетсяСчетФактура.Основание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Приводит состояние проведения счета-фактуры в соответствие с документом-основанием
//
// Параметры:
//	Основание				- Документ - документ-основание счета-фактуры
//	Проведен 				- Булево - Состояние проведения документа-основания
//	ТребуетсяСчетФактура	- Булево - Потребность в наличии счета-фактуры для документа-основания
//
Процедура АктуализироватьСчетФактуру(Основание, Проведен, ТребуетсяСчетФактура = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ТаблицаОснований.Ссылка.ДатаСоставления, ДЕНЬ) КАК ДатаСоставления,
	|	ТаблицаОснований.Ссылка.Исправление КАК Исправление,
	|	ТаблицаОснований.Ссылка.Проведен КАК Проведен,
	|	ТаблицаОснований.Ссылка.ДатаИсправления КАК ДатаИсправления
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Проведен КАК Проведен,
	|	СчетаФактуры.Исправление КАК Исправление,
	|	КОЛИЧЕСТВО(ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ТаблицаОснований
	|		ПО СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|ГДЕ
	|	НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка,
	|	СчетаФактуры.Проведен,
	|	СчетаФактуры.Исправление,
	|	СчетаФактуры.ДатаСоставления,
	|	СчетаФактуры.ДатаИсправления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаФактуры.ДатаСоставления,
	|	СчетаФактуры.ДатаИсправления
	|";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("АктуализацияДвижений", Истина);
		
		Если НЕ Проведен ИЛИ НЕ ТребуетсяСчетФактура Тогда
			Если Выборка.КоличествоОснований = 1 Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(Основание);
				ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
		Иначе
			Если Выборка.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьПоказателиНачисленияНДС(Выборка);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - структура со следующими свойствами:
//	* МассивОрганизаций - Массив - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа-основания.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа-основания 
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ТипСчетаФактуры", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураПолученныйНалоговыйАгент"));
	Запрос.Параметры.Вставить("МассивОрганизаций", Параметры.МассивОрганизаций);
	Если Параметры.Свойство("БезОграниченияПериода") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоДокументовКОформлению
		|ИЗ
		|	РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяОформлениеСчетаФактуры
		|ГДЕ
		|	ТребуетсяОформлениеСчетаФактуры.ТипСчетаФактуры = &ТипСчетаФактуры
		|	И &УсловиеОтбора";
	Иначе
		Запрос.Параметры.Вставить("КонецПериода", КонецДня(Параметры.КонецПериода));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоДокументовКОформлению
		|ИЗ
		|	РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяОформлениеСчетаФактуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеОснования
		|		ПО ТребуетсяОформлениеСчетаФактуры.Организация = ДанныеОснования.Организация
		|			И ТребуетсяОформлениеСчетаФактуры.Основание = ДанныеОснования.Документ
		|ГДЕ
		|	ТребуетсяОформлениеСчетаФактуры.ТипСчетаФактуры = &ТипСчетаФактуры
		|	И ЕСТЬNULL(ДанныеОснования.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) <= &КонецПериода
		|	И &УсловиеОтбора";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		УсловиеОтбора = "ТребуетсяОформлениеСчетаФактуры.Организация В(&МассивОрганизаций)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.КоличествоДокументовКОформлению = NULL Тогда
		Возврат Выборка.КоличествоДокументовКОформлению;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


//Определяет параметры заполнения нового счета-фактуры, вводимого на основании существующего счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураПолученный - Счет-фактура, на основании которого вводится счет-фактура.
//
// Возвращаемое значение:
//	Структура - структура со следующими свойствами:
//	* Основания - Массив - Документы-основания "Корректировка поступления" нового счета-фактуры
//	* ДатаКорректировки - Дата - Дата нового корректировочного счета-фактуры
//	* Корректировочный - Булево - Истина, указывает на необходимость создания корректировочного счета-фактуры.
//	* Исправление - Булево - Истина, указывает на необходимость создания исправительного счета-фактуры.
//
Функция ПараметрыЗаполненияПоСчетуФактуре(СчетФактура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗаполнения = Новый Структура("Основания, ДатаКорректировки");
	ПараметрыЗаполнения.Вставить("Корректировочный", Ложь);
	ПараметрыЗаполнения.Вставить("Исправление", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованийКоррективочныхСФ
	|		ПО СчетФактураПолученный.Ссылка = ОснованийКоррективочныхСФ.ИсходныйДокумент
	|			И НЕ СчетФактураПолученный.Исправление
	|			И (ОснованийКоррективочныхСФ.Ссылка.Проведен)
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованийКоррективочныхСФ
	|		ПО СчетФактураПолученный.СчетФактураОснование = ОснованийКоррективочныхСФ.ИсходныйДокумент
	|			И СчетФактураПолученный.Исправление
	|			И (ОснованийКоррективочныхСФ.Ссылка.Проведен)
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование, ОснованияСчетаФактуры.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаПриобретения.Ссылка
	|ГДЕ
	|	ОснованияСчетаФактуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияСчетаФактуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ПО ВТ_ДокументыОснования.ДокументОснование = ОснованияСчетаФактуры.ДокументОснование
	|			И ОснованияСчетаФактуры.Ссылка.Проведен
	|			И (НЕ ОснованияСчетаФактуры.Ссылка.Исправление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияСчетаФактуры.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ОснованияИсходныхСФ
	|ИЗ
	|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ПО ИсходныеСчетаФактуры.Ссылка = ОснованияСчетаФактуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка                КАК Ссылка,
	|	КорректировкаПриобретения.Дата                  КАК Дата
	|ИЗ
	|	ВТ_ОснованияИсходныхСФ КАК ВТ_ОснованияИсходныхСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ВТ_ОснованияИсходныхСФ.ДокументОснование = КорректировкаПриобретения.ДокументОснование
	|			И (КорректировкаПриобретения.ВидКорректировки В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок), 
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
	|		ПО (КорректировкаПриобретения.Ссылка = ТребуетсяСчетФактура.Основание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[4].Пустой() Тогда
		
		Если РезультатЗапроса[0].Пустой() Тогда
			ПараметрыЗаполнения.Исправление = Истина;
		КонецЕсли;
		
	Иначе
		
		ТаблицаОснований = РезультатЗапроса[4].Выгрузить();
		ПараметрыЗаполнения.Основания = ТаблицаОснований.ВыгрузитьКолонку("Ссылка");
		ПараметрыЗаполнения.ДатаКорректировки = ТаблицаОснований[0].Дата;
		ПараметрыЗаполнения.Корректировочный = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

//Определяет необходимость ввода корректировочного счета-фактуры для документов-оснований счета-фактуры.
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураПолученныйНалоговыйАгент - Счет-фактура, для которого определяется необходимость корректировки.
//	Исходный - Булево - Ложь - Исходный счет-фактура будет вычислен на основании переданного.
//
// Возвращаемое значение:
//	Булево - Истина - требуется создание корректировочного счета-фактуры.
//
Функция ТребуетсяСозданиеКорректировочного(СчетФактура, Исходный = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Исходный Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПриобретения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|			ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаПриобретения.ДокументОснование
		|			И КорректировкаПриобретения.ВидКорректировки В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
		|			ПО (КорректировкаПриобретения.Ссылка = ТребуетсяСчетФактура.Основание)
		|ГДЕ
		|	ОснованияСчетаФактуры.Ссылка = &Ссылка";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование, ОснованияСчетаФактуры.ДокументОснование) КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_ДокументыОснования
		|ИЗ
		|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|		ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаПриобретения.Ссылка
		|ГДЕ
		|	ОснованияСчетаФактуры.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОснованияСчетаФактуры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
		|ИЗ
		|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
		|		ПО ВТ_ДокументыОснования.ДокументОснование = ОснованияСчетаФактуры.ДокументОснование
		|			И ОснованияСчетаФактуры.Ссылка.Проведен
		|			И (НЕ ОснованияСчетаФактуры.Ссылка.Исправление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОснованияСчетаФактуры.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_ОснованияИсходныхСФ
		|ИЗ
		|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
		|		ПО ИсходныеСчетаФактуры.Ссылка = ОснованияСчетаФактуры.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПриобретения.Ссылка                КАК Ссылка
		|ИЗ
		|	ВТ_ОснованияИсходныхСФ КАК ВТ_ОснованияИсходныхСФ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
		|		ПО ВТ_ОснованияИсходныхСФ.ДокументОснование = КорректировкаПриобретения.ДокументОснование
		|			И (КорректировкаПриобретения.ВидКорректировки В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок), 
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
		|		ПО (КорректировкаПриобретения.Ссылка = ТребуетсяСчетФактура.Основание)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой()
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеквизиты(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ДатаСоставления         КАК Период,
	|	ДанныеДокумента.Дата                    КАК ДатаПолучения,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.ИННКонтрагента          КАК ИННКонтрагента,
	|	ДанныеДокумента.КППКонтрагента          КАК КППКонтрагента,
	|	ДанныеДокумента.Корректировочный        КАК Корректировочный,
	|	ДанныеДокумента.Исправление             КАК Исправление,
	|	ДанныеДокумента.ПолученВЭлектронномВиде КАК ПолученВЭлектронномВиде,
	|	ДанныеДокумента.КодВидаОперации         КАК КодВидаОперации,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.НомерИсправления        КАК НомерИсправления,
	|	ДанныеДокумента.ДатаИсправления         КАК ДатаИсправления,
	|	ДанныеДокумента.Валюта                  КАК Валюта,
	|	ДанныеДокумента.СчетФактураОснование    КАК СчетФактураОснование,
	|	ДанныеДокумента.Подразделение           КАК Подразделение,
	|	ДанныеДокумента.Ответственный           КАК Ответственный,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.Проведен                КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.КодВидаОперацииНаУменьшение КАК КодВидаОперацииНаУменьшение,
	|	ДанныеДокумента.СчетФактураОснование.Дата   КАК ДатаСчетФактураОснование
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                         Реквизиты.ДатаПолучения);
	Запрос.УстановитьПараметр("ДатаСоставления",                Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",                     Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ИННКонтрагента",                 Реквизиты.ИННКонтрагента);
	Запрос.УстановитьПараметр("КППКонтрагента",                 Реквизиты.КППКонтрагента);
	Запрос.УстановитьПараметр("Корректировочный",               Реквизиты.Корректировочный);
	Запрос.УстановитьПараметр("Исправление",                    Реквизиты.Исправление);
	Запрос.УстановитьПараметр("ПолученВЭлектронномВиде",      ?(Реквизиты.ПолученВЭлектронномВиде, 2, 1));
	Запрос.УстановитьПараметр("КодВидаОперации",                Реквизиты.КодВидаОперации);
	Запрос.УстановитьПараметр("КодВидаОперацииНаУменьшение",    Реквизиты.КодВидаОперацииНаУменьшение);
	Запрос.УстановитьПараметр("Номер",                          Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерНаПечать",                  Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерИсправления",               Реквизиты.НомерИсправления);
	Запрос.УстановитьПараметр("ДатаИсправления",                Реквизиты.ДатаИсправления);
	Запрос.УстановитьПараметр("Валюта",                         Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаСчетаФактуры",             Реквизиты.Валюта);
	Запрос.УстановитьПараметр("СчетФактураОснование",           Реквизиты.СчетФактураОснование);
	Запрос.УстановитьПараметр("ДатаСчетФактураОснование",       Реквизиты.ДатаСчетФактураОснование);
	Запрос.УстановитьПараметр("Подразделение",                  Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Ответственный",                  Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий",                    Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураПолученныйНалоговыйАгент"));
	Запрос.УстановитьПараметр("СтатьяРасходов",                 ПланыВидовХарактеристик.СтатьиРасходов.НДСНалоговогоАгента);
	
	УчетНДСУТ.УстановитьПараметрыЗапросаПроведенияПоЖурналуСчетаФактурыПолученного(Реквизиты, Запрос);
	
	ИнформацияПоИсправлению = "";
	Если ЗначениеЗаполнено(Реквизиты.ДатаИсправления)
		И ЗначениеЗаполнено(Реквизиты.НомерИсправления) Тогда
		Если Реквизиты.Исправление Тогда
			ИнформацияПоИсправлению = НСтр("ru='Исправление %НомерИсправления% от %ДатаИсправления%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		Если Реквизиты.Корректировочный Тогда
			ИнформацияПоИсправлению = НСтр("ru='Исправление %НомерИсправления% от %ДатаИсправления% (корректировочный)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%НомерИсправления%", СокрЛП(Реквизиты.НомерИсправления));
		ИнформацияПоИсправлению = СтрЗаменить(ИнформацияПоИсправлению, "%ДатаИсправления%", Формат(Реквизиты.ДатаИсправления,"ДЛФ=D"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоИсправлению", ИнформацияПоИсправлению);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаВтСторнируемыеКорректировки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.ДокументОснование КАК СторнируемаяКорректировка
	|ПОМЕСТИТЬ ВтСторнируемыеКорректировки
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактура
	|			ПО Документы.Ссылка = СчетФактура.Ссылка
	|ГДЕ
	|	&Исправление
	|	И &Корректировочный
	|	И СчетФактура.Ссылка <> &Ссылка
	|	И СчетФактура.Номер ПОДОБНО &Номер
	|	И Документы.ДокументОснование ССЫЛКА Документ.КорректировкаПриобретения
	|	И НАЧАЛОПЕРИОДА(СчетФактура.ДатаСоставления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	И СчетФактура.Корректировочный
	|	И НЕ СчетФактура.Исправление
	|	И СчетФактура.Проведен";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтДокументыОснования()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Корректировочный И &Исправление
	|			ТОГДА ВложенныйЗапрос.ДокументОснование
	|		КОГДА &Корректировочный И НЕ &Исправление
	|			ТОГДА ДокументыОснования.ДокументОснование
	|		ИНАЧЕ
	|			ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование,ДокументыОснования.ДокументОснование)
	|	КОНЕЦ                                                               КАК КорректируемыйДокумент,
	|	ВЫБОР
	|		КОГДА КорректировкаПриобретения.Номер ЕСТЬ NULL ТОГДА
	|			ДанныеПервичныхДокументов.ДатаРегистратора
	|		КОГДА &Корректировочный ТОГДА
	|			ДокументыОснования.ДатаИсходногоДокумента
	|		ИНАЧЕ
	|			ОснованиеКорректировки.Дата
	|	КОНЕЦ                                                               КАК ПериодКорректировки,
	|	ДокументыОснования.ИдентификаторСтроки                              КАК ИдентификаторСтроки,
	|	ДокументыОснования.ДокументОснование                                КАК ДокументОснование,
	|	ДанныеПервичныхДокументов.ДатаРегистратора                          КАК ДатаДокументаОснования,
	|	ОснованиеКорректировки.ЗакупкаПодДеятельность                       КАК ЗакупкаПодДеятельность,
	|	ДокументыОснования.НомерИсходногоДокумента                          КАК НомерИсходногоДокумента,
	|	ДокументыОснования.ДатаИсходногоДокумента                           КАК ДатаИсходногоДокумента,
	|	ДокументыОснования.НомерИсправленияИсходногоДокумента               КАК НомерИсправленияИсходногоДокумента,
	|	ДокументыОснования.ДатаИсправленияИсходногоДокумента                КАК ДатаИсправленияИсходногоДокумента,
	|	ДокументыОснования.НалоговаяБаза                                    КАК НалоговаяБаза,
	|	ДокументыОснования.НалоговаяБаза - ДокументыОснования.СуммаНДС      КАК СуммаБезНДС,
	|	ДокументыОснования.СтавкаНДС                                        КАК СтавкаНДС,
	|	ДокументыОснования.СуммаНДС                                         КАК НДС,
	|	ВЫБОР 
	|		КОГДА &УправленческийУчетОрганизаций 
	|			ТОГДА ДокументыОснования.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                               КАК НДСУпр
	|ПОМЕСТИТЬ ВтДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|			ПО ДокументыОснования.ДокументОснование = КорректировкаПриобретения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ОснованиеКорректировки
	|			ПО КорректировкаПриобретения.ДокументОснование = ОснованиеКорректировки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|			ПО ДанныеПервичныхДокументов.Организация = &Организация
	|			 И ДанныеПервичныхДокументов.Документ = ДокументыОснования.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				СторнируемыеКорректировки.СторнируемаяКорректировка КАК ДокументОснование
	|			ИЗ
	|				ВтСторнируемыеКорректировки КАК СторнируемыеКорректировки
	|			) КАК ВложенныйЗапрос
	|				ПО (ИСТИНА)
	|ГДЕ
	|	ДокументыОснования.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьПараметрВалютаОснования(Запрос)
	
	Если Запрос.Параметры.Свойство("ВалютаОснования") Тогда
		Возврат;
	КонецЕсли;
	
	Если Запрос.Параметры.Ссылка.ДокументыОснования.Количество() Тогда
		ДокументОснование = Запрос.Параметры.Ссылка.ДокументыОснования[0].ДокументОснование;
		ВалютаОснования	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Валюта");
	Иначе
		ВалютаОснования	= Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаОснования", ВалютаОснования);
	
КонецПроцедуры

Процедура УстановитьПараметрКоэффициентПересчетаВВалютуРегл(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрВалютаОснования(Запрос);

	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Запрос.Параметры.ВалютаОснования,
			Запрос.Параметры.ВалютаОснования,
			Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр") Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентПересчетаВВалютуУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
										Константы.ВалютаРегламентированногоУчета.Получить(),
										Константы.ВалютаУправленческогоУчета.Получить(),
										Запрос.Параметры.Период);
										
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", КоэффициентПересчетаВВалютуУпр);
	
КонецПроцедуры

Процедура ИнициализироватьВтТаблицаСуммДокументов(Запрос, ТекстыЗапроса)
	
	Если Запрос.Параметры.Свойство("ВтТаблицаСуммДокументовИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос);
	
	ОбщийМассив = Новый Массив();
	ОбщийМассив.Добавить(ТекстЗапросаВтСторнируемыеКорректировки());
	ОбщийМассив.Добавить(ТекстЗапросаВтДокументыОснования());
	
	ЗапросТаблицаСуммДокументов = Новый Запрос;
	ЗапросТаблицаСуммДокументов.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Исправление",                    Запрос.Параметры.Исправление);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Корректировочный",               Запрос.Параметры.Корректировочный);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("ДатаИсправления",                Запрос.Параметры.ДатаИсправления);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("КодВидаОперации",                Запрос.Параметры.КодВидаОперации);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("КодВидаОперацииНаУменьшение",    Запрос.Параметры.КодВидаОперацииНаУменьшение);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Номер",                          Запрос.Параметры.Номер);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Ссылка",                         Запрос.Параметры.Ссылка);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Организация",                    Запрос.Параметры.Организация);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("Период",                         Запрос.Параметры.Период);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("УправленческийУчетОрганизаций",  Запрос.Параметры.УправленческийУчетОрганизаций);
	ЗапросТаблицаСуммДокументов.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", Запрос.Параметры.КоэффициентПересчетаВВалютуУпр);
	
	УстановитьПараметрВалютаОснования(ЗапросТаблицаСуммДокументов);
	УстановитьПараметрКоэффициентПересчетаВВалютуРегл(ЗапросТаблицаСуммДокументов);
	
	
#Область ТекстПриобретениеТоваровУслуг
	ТекстПриобретениеТоваровУслуг ="
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	ДокументыОснования.СтавкаНДС         КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС       КАК СуммаБезНДС,
	|	ДокументыОснования.НДС               КАК СуммаНДС,
	|	ДокументыОснования.НалоговаяБаза     КАК СуммаПоСчетуФактуреЖурнал,
	|	ДокументыОснования.НДС               КАК СуммаНДСЖурнал,
	|	ДокументыОснования.НДСУпр            КАК НДСУпр,
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	NULL                                 КАК СчетФактураВыданный,
	|	ПриобретениеТоваровУслуг.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ЛОЖЬ КАК ПрошлыеКорректировки,
	|	ПриобретениеТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПриобретениеТоваровУслуг.Подразделение КАК Подразделение,
	|	ПриобретениеТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПриобретениеТоваровУслуг.Партнер КАК Партнер,
	|	&КодВидаОперации КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаСуммДокументов
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО ПриобретениеТоваровУслуг.Ссылка = ДокументыОснования.ДокументОснование
	|ГДЕ
	|	ПриобретениеТоваровУслуг.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет))
	|";
#КонецОбласти
	
#Область ТекстКорректировкаПриобретения
	ТекстКорректировкаПриобретения ="
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	ДокументыОснования.СтавкаНДС         КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС       КАК СуммаБезНДС,
	|	ДокументыОснования.НДС               КАК СуммаНДС,
	|	ДокументыОснования.НалоговаяБаза     КАК СуммаПоСчетуФактуреЖурнал,
	|	ДокументыОснования.НДС               КАК СуммаНДСЖурнал,
	|	ДокументыОснования.НДСУпр            КАК НДСУпр,
	|	ВЫБОР
	|		КОГДА ДокументыОснования.НДС < 0
	|			ТОГДА КорректировкаПриобретения.ДокументОснование
	|		ИНАЧЕ ДокументыОснования.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	NULL                                 КАК СчетФактураВыданный,
	|	ВЫРАЗИТЬ(КорректировкаПриобретения.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг).ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ЛОЖЬ КАК ПрошлыеКорректировки,
	|	КорректировкаПриобретения.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КорректировкаПриобретения.Подразделение КАК Подразделение,
	|	КорректировкаПриобретения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КорректировкаПриобретения.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДокументыОснования.НДС < 0
	|			ТОГДА &КодВидаОперацииНаУменьшение
	|		ИНАЧЕ &КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО КорректировкаПриобретения.Ссылка = ДокументыОснования.ДокументОснование
	|ГДЕ
	|	КорректировкаПриобретения.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|
	|";
#КонецОбласти
	
#Область ТекстПередачаТоваровМеждуОрганизациями
	ТекстПередачаТоваровМеждуОрганизациями = "
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	ДокументыОснования.СтавкаНДС         КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС       КАК СуммаБезНДС,
	|	ДокументыОснования.НДС               КАК СуммаНДС,
	|	ДокументыОснования.НалоговаяБаза     КАК СуммаПоСчетуФактуреЖурнал,
	|	ДокументыОснования.НДС               КАК СуммаНДСЖурнал,
	|	ДокументыОснования.НДСУпр            КАК НДСУпр,
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	NULL КАК СчетФактураВыданный,
	|	ПередачаТоваровМеждуОрганизациями.ПередачаПодДеятельность,
	|	ЛОЖЬ КАК ПрошлыеКорректировки,
	|	ПередачаТоваровМеждуОрганизациями.НалогообложениеНДС,
	|	ПередачаТоваровМеждуОрганизациями.Подразделение КАК Подразделение,
	|	ПередачаТоваровМеждуОрганизациями.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ПередачаТоваровМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента
	|		ТОГДА ПередачаТоваровМеждуОрганизациями.Партнер
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	КОНЕЦ КАК Партнер,
	|	&КодВидаОперации
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО ПередачаТоваровМеждуОрганизациями.Ссылка = ДокументыОснования.ДокументОснование
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|
	|";
#КонецОбласти
	
	МассивЗапросов = Новый Массив();
	МассивЗапросов.Добавить(ТекстПриобретениеТоваровУслуг);
	МассивЗапросов.Добавить(ТекстКорректировкаПриобретения);
	МассивЗапросов.Добавить(ТекстПередачаТоваровМеждуОрганизациями);

	ТекстЗапроса = СтрСоединить(МассивЗапросов, " ОБЪЕДИНИТЬ ВСЕ ");
	
	Если Запрос.Параметры.Исправление Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДокументыОснования.ДокументОснование", "ДокументыОснования.КорректируемыйДокумент");
		ТекстЗапроса = ТекстЗапроса
			+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаВтТаблицаКорректировки(Запрос, ТекстыЗапроса, Истина);
			
		ОбщийМассив.Добавить(ТекстЗапросаВтПрошлыеКорректировки());
		
	КонецЕсли;
		
	ОбщийМассив.Добавить(ТекстЗапроса);
	
	ЗапросТаблицаСуммДокументов.Текст = СтрСоединить(ОбщийМассив, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	ЗапросТаблицаСуммДокументов.Выполнить();
	
	Запрос.УстановитьПараметр("ВтТаблицаСуммДокументовИнициализирована", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтПрошлыеКорректировки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки      КАК ИдентификаторСтроки,
	|	ДокументыОснования.КорректируемыйДокумент   КАК КорректируемыйДокумент,
	|	ДокументыОснования.СтавкаНДС                КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС              КАК СуммаБезНДС,
	|	ДокументыОснования.НДС                      КАК НДС,
	|	ДокументыОснования.НалоговаяБаза            КАК НалоговаяБаза,
	|	ДокументыОснования.НДСУпр                   КАК НДСУпр,
	|	ДокументыОснования.ЗакупкаПодДеятельность   КАК ЗакупкаПодДеятельность,
	|	КорректировкаПриобретения.Ссылка            КАК ДокументОснование
	|ПОМЕСТИТЬ ВтПрошлыеКорректировки
	|ИЗ
	|	ВтДокументыОснования КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ДокументыОснования.КорректируемыйДокумент = КорректировкаПриобретения.ДокументОснование
	|ГДЕ
	|	&Исправление
	|	И КорректировкаПриобретения.Проведен
	|	И КорректировкаПриобретения.Дата < ДокументыОснования.ДатаДокументаОснования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки      КАК ИдентификаторСтроки,
	|	ДокументыОснования.КорректируемыйДокумент   КАК КорректируемыйДокумент,
	|	ДокументыОснования.СтавкаНДС                КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС              КАК СуммаБезНДС,
	|	ДокументыОснования.НДС                      КАК НДС,
	|	ДокументыОснования.НалоговаяБаза            КАК НалоговаяБаза,
	|	ДокументыОснования.НДСУпр                   КАК НДСУпр,
	|	ДокументыОснования.ЗакупкаПодДеятельность   КАК ЗакупкаПодДеятельность,
	|	ПриобретениеТоваровУслуг.Ссылка             КАК ДокументОснование
	|ИЗ
	|	ВтДокументыОснования КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО ДокументыОснования.КорректируемыйДокумент = ПриобретениеТоваровУслуг.Ссылка
	|ГДЕ
	|	&Исправление
	|	И ДокументыОснования.КорректируемыйДокумент <> ДокументыОснования.ДокументОснование";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтПрошлыеИсправленияКорректировки(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтПрошлыеИсправленияКорректировки";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеТабличнойЧасти.ДокументОснование  КАК ДокументКорректировки,
	|	ВложенныйЗапрос.ДокументОснование       КАК ДокументОснование
	|ПОМЕСТИТЬ ВтПрошлыеИсправленияКорректировки
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ДанныеТабличнойЧасти
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|			ПО ДанныеТабличнойЧасти.Ссылка = СчетФактураПолученный.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				СторнируемыеКорректировки.СторнируемаяКорректировка КАК ДокументОснование
	|			ИЗ
	|				ВтСторнируемыеКорректировки КАК СторнируемыеКорректировки
	|			) КАК ВложенныйЗапрос
	|				ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК Основания
	|			ПО (ИСТИНА)
	|ГДЕ
	|	&Исправление
	|	И &Корректировочный
	|	И СчетФактураПолученный.Ссылка <> &Ссылка
	|	И ДанныеТабличнойЧасти.ДокументОснование ССЫЛКА Документ.КорректировкаПриобретения
	|	И СчетФактураПолученный.Номер ПОДОБНО &Номер
	|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаСоставления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаИсправления,ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаИсправления, ДЕНЬ)
	|	И СчетФактураПолученный.Корректировочный
	|	И СчетФактураПолученный.Проведен
	|	И ДанныеТабличнойЧасти.ДокументОснование <> Основания.ДокументОснование";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтТаблицаКорректировки(Запрос, ТекстыЗапроса, ПрошлыеКорректировки = Ложь)
	
	ИмяРегистра = "ВтТаблицаКорректировки";
	
	УстановитьПараметрВалютаОснования(Запрос);
	УстановитьПараметрКоэффициентПересчетаВВалютуРегл(Запрос);

#Область ТекстКорректировкаПриобретенияРасхождения
	ТекстКорректировкаПриобретенияРасхождения = "
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	ДокументыОснования.СтавкаНДС         КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС       КАК СуммаБезНДС,
	|	ДокументыОснования.НДС               КАК СуммаНДС,
	|	ДокументыОснования.НалоговаяБаза     КАК СуммаПоСчетуФактуреЖурнал,
	|	ДокументыОснования.НДС               КАК СуммаНДСЖурнал,
	|	ДокументыОснования.НДСУпр            КАК НДСУпр,
	|	ДокументыОснования.КорректируемыйДокумент КАК Основание,
	|	NULL КАК СчетФактураВыданный,
	|	ВЫРАЗИТЬ(КорректировкаПриобретения.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг).ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ЛОЖЬ КАК ПрошлыеКорректировки,
	|	КорректировкаПриобретения.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КорректировкаПриобретения.Подразделение КАК Подразделение,
	|	КорректировкаПриобретения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КорректировкаПриобретения.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДокументыОснования.НДС < 0
	|			ТОГДА &КодВидаОперацииНаУменьшение
	|		ИНАЧЕ &КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации
	|ПОМЕСТИТЬ ВтТаблицаКорректировки
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО КорректировкаПриобретения.Ссылка = ДокументыОснования.ДокументОснование
	|ГДЕ
	|	&Исправление ИЛИ &Корректировочный
	|
	|";
#КонецОбласти
	
#Область ТекстПрошлыеИсправленияКорректировки
	ТекстПрошлыеИсправленияКорректировки = "
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	ДокументыОснования.СтавкаНДС         КАК СтавкаНДС,
	|	ДокументыОснования.СуммаБезНДС       КАК СуммаБезНДС,
	|	ДокументыОснования.НДС               КАК СуммаНДС,
	|	ДокументыОснования.НалоговаяБаза     КАК СуммаПоСчетуФактуреЖурнал,
	|	ДокументыОснования.НДС               КАК СуммаНДСЖурнал,
	|	ДокументыОснования.НДСУпр            КАК НДСУпр,
	|	ПрошлыеИсправленияКорректировки.ДокументОснование КАК Основание,
	|	NULL КАК СчетФактураВыданный,
	|	КорректировкаПриобретения.ДокументОснование.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
	|	ИСТИНА КАК КорректировкаТекущегоКвартала,
	|	КорректировкаПриобретения.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КорректировкаПриобретения.Подразделение КАК Подразделение,
	|	КорректировкаПриобретения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КорректировкаПриобретения.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДокументыОснования.НДС < 0
	|			ТОГДА &КодВидаОперацииНаУменьшение
	|		ИНАЧЕ &КодВидаОперации
	|	КОНЕЦ КАК КодВидаОперации
	|ИЗ
	|	Документ.КорректировкаПриобретения.Расхождения КАК ТаблицаРасхождения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО ТаблицаРасхождения.Ссылка = ДокументыОснования.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПрошлыеИсправленияКорректировки КАК ПрошлыеИсправленияКорректировки
	|			ПО ТаблицаРасхождения.Ссылка = ПрошлыеИсправленияКорректировки.ДокументКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|			ПО ТаблицаРасхождения.Ссылка = КорректировкаПриобретения.Ссылка
	|
	|";
#КонецОбласти
	
	Если ПрошлыеКорректировки Тогда
		
		ТекстЗапроса = ТекстКорректировкаПриобретенияРасхождения;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВтДокументыОснования","ВтПрошлыеКорректировки");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ ВтТаблицаКорректировки","");
		
	Иначе
		
		Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрошлыеИсправленияКорректировки", ТекстыЗапроса) Тогда
			ТекстЗапросаВтПрошлыеИсправленияКорректировки(Запрос, ТекстыЗапроса);
		КонецЕсли; 
		
		ТекстЗапроса = ТекстКорректировкаПриобретенияРасхождения
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстПрошлыеИсправленияКорректировки;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса

КонецФункции

Функция ТекстЗапросаВтТаблицаДокументовДляКоррСФ(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаДанныхДляЖурнала";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаКорректировки", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаКорректировки(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|    ТаблицаДокументов.ИдентификаторСтроки,
	|    ТаблицаДокументов.НалогообложениеНДС,
	|    ТаблицаДокументов.ДокументОснование КАК ДокументОснование,
	|    ТаблицаДокументов.СуммаПоСчетуФактуреУменьшение,
	|    ТаблицаДокументов.СуммаНДСУменьшение,
	|    ТаблицаДокументов.СуммаПоСчетуФактуреУвеличение,
	|    ТаблицаДокументов.СуммаНДСУвеличение,
	|    ТаблицаДокументов.СуммаПоСчетуФактуреУменьшениеКомиссия,
	|    ТаблицаДокументов.СуммаНДСУменьшениеКомиссия,
	|    ТаблицаДокументов.СуммаПоСчетуФактуреУвеличениеКомиссия,
	|    ТаблицаДокументов.СуммаНДСУвеличениеКомиссия,
	|    ТаблицаДокументов.СчетФактураВыданный
	|
	|ПОМЕСТИТЬ ВтТаблицаДокументовДляКоррСФ
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКорректировки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ТаблицаКорректировки.НалогообложениеНДС КАК НалогообложениеНДС,
	|		ТаблицаКорректировки.Основание КАК ДокументОснование,
	|		ВЫБОР
	|			КОГДА ТаблицаКорректировки.СуммаПоСчетуФактуреЖурнал < 0 
	|				ТОГДА ТаблицаКорректировки.СуммаПоСчетуФактуреЖурнал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПоСчетуФактуреУменьшение,
	|		ВЫБОР 
	|			КОГДА ТаблицаКорректировки.СуммаНДСЖурнал < 0 
	|				ТОГДА ТаблицаКорректировки.СуммаНДСЖурнал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаНДСУменьшение,
	|		ВЫБОР 
	|			КОГДА ТаблицаКорректировки.СуммаПоСчетуФактуреЖурнал > 0 
	|				ТОГДА ТаблицаКорректировки.СуммаПоСчетуФактуреЖурнал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаПоСчетуФактуреУвеличение,
	|		ВЫБОР 
	|			КОГДА ТаблицаКорректировки.СуммаНДСЖурнал > 0 
	|				ТОГДА ТаблицаКорректировки.СуммаНДСЖурнал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаНДСУвеличение,
	|		0 КАК СуммаПоСчетуФактуреУменьшениеКомиссия,
	|		0 КАК СуммаНДСУменьшениеКомиссия,
	|		0 КАК СуммаПоСчетуФактуреУвеличениеКомиссия,
	|		0 КАК СуммаНДСУвеличениеКомиссия,
	|		ТаблицаКорректировки.СчетФактураВыданный КАК СчетФактураВыданный
	|			
	|	ИЗ
	|		ВтТаблицаКорректировки КАК ТаблицаКорректировки) КАК ТаблицаДокументов
	|";
	 
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	 
КонецФункции

Функция ТекстЗапросаВтТаблицаДанныхДляЖурнала(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаДанныхДляЖурнала";
	
	ИнициализироватьВтТаблицаСуммДокументов(Запрос, ТекстыЗапроса);
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаКорректировки", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаКорректировки(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаДокументовДляКоррСФ", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаДокументовДляКоррСФ(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = " 	
	//ВТТаблицаДанныхДляЖурнала
	|ВЫБРАТЬ
	|   ТаблицаДанныхДляЖурнала.СчетФактураВыданный,
	|   ТаблицаДанныхДляЖурнала.НомерСчетаФактуры,
	|   ТаблицаДанныхДляЖурнала.ДатаСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.НомерКорректировочногоСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.ДатаКорректировочногоСчетаФактуры,
	|   ТаблицаДанныхДляЖурнала.НомерИсправления,
	|   ТаблицаДанныхДляЖурнала.ДатаИсправления,
	|	ТаблицаДанныхДляЖурнала.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.ДатаИсправленияКорректировочногоСчетаФактуры,
	|
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуре,
	|   ТаблицаДанныхДляЖурнала.СуммаНДС,
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУменьшение,
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУвеличение,
	|   ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУменьшение,
	|   ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУвеличение,
	|
	|   ТаблицаДанныхДляЖурнала.ПоСтавкеБезНДС,
	|   ТаблицаДанныхДляЖурнала.КодВидаСделки,
	|
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреКомиссия,
	|   ТаблицаДанныхДляЖурнала.СуммаНДСКомиссия,
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|   ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|   ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУменьшениеКомиссия,
	|   ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУвеличениеКомиссия,
	|
	|   ТаблицаДанныхДляЖурнала.КодВидаОперацииКомиссия
	|
	|ПОМЕСТИТЬ ВтТаблицаДанныхДляЖурнала
	| 
	|ИЗ
	| 
	//Данные счета-фактуры на поступление
	|	(ВЫБРАТЬ
	|  		ТаблицаДанных.СчетФактураВыданный КАК СчетФактураВыданный,
	|   	&Номер 	КАК НомерСчетаФактуры,
	|  	 	&Период КАК ДатаСчетаФактуры,
	|		NULL 	КАК НомерКорректировочногоСчетаФактуры,
	|		NULL 	КАК ДатаКорректировочногоСчетаФактуры,
	|  	 	NULL 	КАК НомерИсправления,
	|   	NULL 	КАК ДатаИсправления,
	|		NULL 	КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|		NULL 	КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|
	|		ТаблицаДанных.СуммаПоСчетуФактуре КАК СуммаПоСчетуФактуре,
	|		ТаблицаДанных.СуммаНДС 			  КАК СуммаНДС,
	|  	 	0 КАК 	СуммаПоСчетуФактуреРазницаУменьшение,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУвеличение,
	|   	0 КАК 	СуммаНДСРазницаУменьшение,
	|   	0 КАК 	СуммаНДСРазницаУвеличение,
	|
	|		ВЫБОР
	|			КОГДА ТаблицаДанных.НалогообложениеНДС
	|				В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПоСтавкеБезНДС,   
	|		ТаблицаДанных.КодВидаСделки КАК КодВидаСделки,
	|
	|		ТаблицаДанных.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|		ТаблицаДанных.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|   	0 КАК 	СуммаНДСРазницаУменьшениеКомиссия,
	|   	0 КАК 	СуммаНДСРазницаУвеличениеКомиссия,
	|
	|		""""  КАК КодВидаОперацииКомиссия
	|
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ТаблицаДокументов.НалогообложениеНДС) КАК НалогообложениеНДС,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуре) КАК СуммаПоСчетуФактуре,
	|			СУММА(ТаблицаДокументов.СуммаНДС) КАК СуммаНДС,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреКомиссия) КАК СуммаПоСчетуФактуреКомиссия,
	|			СУММА(ТаблицаДокументов.СуммаНДСКомиссия) КАК СуммаНДСКомиссия,
	|			"""" КАК КодВидаСделки,
	|			ТаблицаДокументов.СчетФактураВыданный КАК СчетФактураВыданный
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТаблицаСуммДокументов.НалогообложениеНДС КАК НалогообложениеНДС,
	|				ТаблицаСуммДокументов.СуммаПоСчетуФактуреЖурнал КАК СуммаПоСчетуФактуре,
	|				ТаблицаСуммДокументов.СуммаНДСЖурнал КАК СуммаНДС,
	|				0 КАК СуммаПоСчетуФактуреКомиссия,
	|				0 КАК СуммаНДСКомиссия,
	|				ТаблицаСуммДокументов.СчетФактураВыданный КАК СчетФактураВыданный
	|			ИЗ
	|				ВтТаблицаСуммДокументов КАК ТаблицаСуммДокументов
	|			
	|			) КАК ТаблицаДокументов
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаДокументов.СчетФактураВыданный
	|		) КАК ТаблицаДанных
	|	ГДЕ
	|		НЕ &Исправление
	|		И НЕ &Корректировочный 
	|
	|	ОБЪЕДИНИТЬ ВСЕ 
	|
	//Данные счета-фактуры исправления
	|	ВЫБРАТЬ
	|       ТаблицаДанныхИсправление.СчетФактураВыданный,
	|   	&Номер 				КАК НомерСчетаФактуры,
	|  	 	&ДатаСоставления	КАК ДатаИсходногоДокумента,
	|		NULL 				КАК НомерКорректировочногоСчетаФактуры,
	|		NULL 				КАК ДатаКорректировочногоСчетаФактуры,
	|		&НомерИсправления 	КАК НомерИсправления,
	|		&ДатаИсправления 	КАК ДатаИсправления,
	|		NULL 				КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|		NULL 				КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|
	|		ТаблицаДанныхИсправление.СуммаПоСчетуФактуре,
	|		ТаблицаДанныхИсправление.СуммаНДС,
	|  	 	0 КАК 	СуммаПоСчетуФактуреРазницаУменьшение,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУвеличение,
	|   	0 КАК 	СуммаНДСРазницаУменьшение,
	|   	0 КАК 	СуммаНДСРазницаУвеличение,
	|
	|		ВЫБОР
	|			КОГДА ЕстьNULL(ТаблицаДанныхИсправление.НалогообложениеКорректировки, ТаблицаДанныхИсправление.НалогообложениеОснования)
	|				В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПоСтавкеБезНДС,
	|		ТаблицаДанныхИсправление.КодВидаСделки КАК КодВидаСделки,
	|
	|		ТаблицаДанныхИсправление.СуммаПоСчетуФактуреКомиссия КАК СуммаПоСчетуФактуреКомиссия,
	|		ТаблицаДанныхИсправление.СуммаНДСКомиссия КАК СуммаНДСКомиссия,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|   	0 КАК 	СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|   	0 КАК 	СуммаНДСРазницаУменьшениеКомиссия,
	|   	0 КАК 	СуммаНДСРазницаУвеличениеКомиссия,
    |
	|		ВЫБОР 
	|			КОГДА ТаблицаДанныхИсправление.СуммаПоСчетуФактуреКомиссия <> 0 
	|				ТОГДА &КодВидаОперации
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодВидаОперацииКомиссия
	|		
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ТаблицаДокументов.НалогообложениеОснования) КАК НалогообложениеОснования,
	|			МАКСИМУМ(ТаблицаДокументов.НалогообложениеКорректировки) КАК НалогообложениеКорректировки,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуре) КАК СуммаПоСчетуФактуре,
	|			СУММА(ТаблицаДокументов.СуммаНДС) КАК СуммаНДС,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреКомиссия) КАК СуммаПоСчетуФактуреКомиссия,
	|			СУММА(ТаблицаДокументов.СуммаНДСКомиссия) КАК СуммаНДСКомиссия,
	|			"""" КАК КодВидаСделки,
	|			ТаблицаДокументов.СчетФактураВыданный
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ТаблицаСуммДокументов.НалогообложениеНДС КАК НалогообложениеОснования,
	|				NULL КАК НалогообложениеКорректировки,
	|				ТаблицаСуммДокументов.СуммаПоСчетуФактуреЖурнал КАК СуммаПоСчетуФактуре,
	|				ТаблицаСуммДокументов.СуммаНДСЖурнал КАК СуммаНДС,
	|				0 КАК СуммаПоСчетуФактуреКомиссия,
	|				0 КАК СуммаНДСКомиссия,
	|				ТаблицаСуммДокументов.СчетФактураВыданный КАК СчетФактураВыданный
	|			ИЗ
	|				ВтТаблицаСуммДокументов КАК ТаблицаСуммДокументов
	|	
	|			ОБЪЕДИНИТЬ ВСЕ
	|	
	|			ВЫБРАТЬ
	|				NULL,
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС),
	|				-ТаблицаПредыдущийСчетФактура.СуммаБезНДС - ТаблицаПредыдущийСчетФактура.НДС,
	|				-ТаблицаПредыдущийСчетФактура.НДС,
	|				0,
	|				0,
	|				NULL
	|			ИЗ
	|				ВтСторноКнигиПродаж КАК ТаблицаПредыдущийСчетФактура
	|			) КАК ТаблицаДокументов
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаДокументов.СчетФактураВыданный
	|		) КАК ТаблицаДанныхИсправление
	|	ГДЕ
	|		&Исправление
	|		И НЕ &Корректировочный
	|
	|	ОБЪЕДИНИТЬ ВСЕ 
	|
	//Данные счета-фактуры корректировочной
	|	ВЫБРАТЬ
	|		ТаблицаДанныхКорректировка.СчетФактураВыданный,
	|		ТаблицаДанныхКорректировка.НомерИсходногоДокумента 				КАК НомерСчетаФактуры,
	|		ТаблицаДанныхКорректировка.ДатаИсходногоДокумента				КАК ДатаСчетаФактуры,
	|		&Номер 															КАК НомерКорректировочногоСчетаФактуры,
	|		&Период 														КАК ДатаКорректировочногоСчетаФактуры,
	|		ТаблицаДанныхКорректировка.НомерИсправленияИсходногоДокумента 	КАК НомерИсправления,
	|		ТаблицаДанныхКорректировка.ДатаИсправленияИсходногоДокумента 	КАК ДатаИсправления,
	|		&НомерИсправления 												КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|		ВЫБОР
	|			КОГДА &Исправление
	|				ТОГДА &ДатаИсправления
	|		КОНЕЦ 															КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|
	|		0 КАК СуммаПоСчетуФактуре,
	|		0 КАК СуммаНДС,
	|		-ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУменьшение 		КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|		ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУвеличение 		КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|		-ТаблицаДанныхКорректировка.СуммаНДСУменьшение КАК СуммаНДСРазницаУменьшение,
	|		ТаблицаДанныхКорректировка.СуммаНДСУвеличение  КАК СуммаНДСРазницаУвеличение,
	|
	|		ВЫБОР
	|			КОГДА ТаблицаДанныхКорректировка.НалогообложениеНДС
	|				В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ПоСтавкеБезНДС,
	|		ТаблицаДанныхКорректировка.КодВидаСделки КАК КодВидаСделки,
	|
	|		0 КАК СуммаПоСчетуФактуреКомиссия,
	|		0 КАК СуммаНДСКомиссия,
	|		-ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|		ТаблицаДанныхКорректировка.СуммаНДСУменьшениеКомиссия КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|		-ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУвеличениеКомиссия КАК СуммаНДСРазницаУменьшениеКомиссия,
	|		ТаблицаДанныхКорректировка.СуммаНДСУвеличениеКомиссия КАК СуммаНДСРазницаУвеличениеКомиссия,
	|
	|		ВЫБОР 
	|			КОГДА ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУменьшениеКомиссия <> 0 
	|			 	 ИЛИ ТаблицаДанныхКорректировка.СуммаПоСчетуФактуреУвеличениеКомиссия <> 0
	|				ТОГДА &КодВидаОперации
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодВидаОперацииКомиссия
	|
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДанныеОснований.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|			ДанныеОснований.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|			ДанныеОснований.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|			ДанныеОснований.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|			МАКСИМУМ(ТаблицаДокументов.НалогообложениеНДС) КАК НалогообложениеНДС,
	|		
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреУменьшение)         КАК СуммаПоСчетуФактуреУменьшение,
	|			СУММА(ТаблицаДокументов.СуммаНДСУменьшение)                    КАК СуммаНДСУменьшение,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреУвеличение)         КАК СуммаПоСчетуФактуреУвеличение,
	|			СУММА(ТаблицаДокументов.СуммаНДСУвеличение)                    КАК СуммаНДСУвеличение,
	|		
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреУменьшениеКомиссия) КАК СуммаПоСчетуФактуреУменьшениеКомиссия,
	|			СУММА(ТаблицаДокументов.СуммаНДСУменьшениеКомиссия)            КАК СуммаНДСУменьшениеКомиссия,
	|			СУММА(ТаблицаДокументов.СуммаПоСчетуФактуреУвеличениеКомиссия) КАК СуммаПоСчетуФактуреУвеличениеКомиссия,
	|			СУММА(ТаблицаДокументов.СуммаНДСУвеличениеКомиссия)            КАК СуммаНДСУвеличениеКомиссия,
	|			"""" КАК КодВидаСделки,
	|       	ТаблицаДокументов.СчетФактураВыданный
	|		ИЗ
	|			ВтТаблицаДокументовДляКоррСФ КАК ТаблицаДокументов
	|		
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДанныеОснований
	|				ПО ТаблицаДокументов.ИдентификаторСтроки = ДанныеОснований.ИдентификаторСтроки
	|
	|		СГРУППИРОВАТЬ ПО
	|			НомерИсходногоДокумента,
	|			ДатаИсходногоДокумента,
	|			НомерИсправленияИсходногоДокумента,
	|			ДатаИсправленияИсходногоДокумента,
	|			СчетФактураВыданный
	|
	|		) КАК ТаблицаДанныхКорректировка
	|
	|	ГДЕ
	|		&Корректировочный) КАК ТаблицаДанныхДляЖурнала
	|
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаДанныхДляЖурнала", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаДанныхДляЖурнала(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = " 
	|ВЫБРАТЬ 
	|	&Период																		КАК Период,
	|	&Организация 																КАК Организация,
	|	&Контрагент 																КАК Контрагент,
	|	&ИННКонтрагента 															КАК ИННКонтрагента,
	|	&КППКонтрагента 															КАК КППКонтрагента,
	|	ЕСТЬNULL(ДокументСчетФактура.Ссылка, &Ссылка) 								КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&ДатаПолучения												 				КАК ДатаВыставленияПолучения,
	|	&ПолученВЭлектронномВиде 													КАК КодСпособаВыставленияПолучения,
	|	&КодВидаОперации 															КАК КодВидаОперации,
	|	ТаблицаДанныхДляЖурнала.НомерСчетаФактуры 									КАК НомерСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.ДатаСчетаФактуры 									КАК ДатаСчетаФактуры,
	|
	|	ТаблицаДанныхДляЖурнала.НомерКорректировочногоСчетаФактуры                  КАК НомерКорректировочногоСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.ДатаКорректировочногоСчетаФактуры                   КАК ДатаКорректировочногоСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.НомерИсправления                                    КАК НомерИсправления,
	|	ТаблицаДанныхДляЖурнала.ДатаИсправления                                     КАК ДатаИсправления,
	|	ТаблицаДанныхДляЖурнала.НомерИсправленияКорректировочногоСчетаФактуры       КАК НомерИсправленияКорректировочногоСчетаФактуры,
	|	ТаблицаДанныхДляЖурнала.ДатаИсправленияКорректировочногоСчетаФактуры        КАК ДатаИсправленияКорректировочногоСчетаФактуры,
	|	&ВалютаСчетаФактуры 														КАК Валюта,
	|	
	|	0			 																КАК ИндексСтроки,
	|	НЕОПРЕДЕЛЕНО                                                                КАК Продавец,
	|	НЕОПРЕДЕЛЕНО                                                                КАК ИННПродавца,
	|	НЕОПРЕДЕЛЕНО                                                                КАК КПППродавца,
	|	
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуре 								КАК СуммаПоСчетуФактуре,
	|	ТаблицаДанныхДляЖурнала.СуммаНДС 											КАК СуммаНДС,
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУменьшение				КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУвеличение                КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУменьшение                           КАК СуммаНДСРазницаУменьшение,
	|	ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУвеличение                           КАК СуммаНДСРазницаУвеличение,
	|
	|	ТаблицаДанныхДляЖурнала.ПоСтавкеБезНДС                                      КАК ПоСтавкеБезНДС,
	|	ЛОЖЬ 																		КАК СчетФактураНеВыставляется,     
	|	ТаблицаДанныхДляЖурнала.КодВидаСделки 										КАК КодВидаСделки,
	|
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреКомиссия 						КАК СуммаПоСчетуФактуреКомиссия,
	|	ТаблицаДанныхДляЖурнала.СуммаНДСКомиссия 									КАК СуммаНДСКомиссия,
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия		КАК СуммаПоСчетуФактуреРазницаУменьшениеКомиссия,
	|	ТаблицаДанныхДляЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия		КАК СуммаПоСчетуФактуреРазницаУвеличениеКомиссия,
	|	ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУменьшениеКомиссия					КАК СуммаНДСРазницаУменьшениеКомиссия,
	|	ТаблицаДанныхДляЖурнала.СуммаНДСРазницаУвеличениеКомиссия					КАК СуммаНДСРазницаУвеличениеКомиссия,
	|
	|	ТаблицаДанныхДляЖурнала.КодВидаОперацииКомиссия		                    	КАК КодВидаОперацииКомиссия
	|
	|ИЗ 
	|	ВтТаблицаДанныхДляЖурнала КАК ТаблицаДанныхДляЖурнала	
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ДокументСчетФактура
	|		ПО ДокументСчетФактура.Ссылка = ТаблицаДанныхДляЖурнала.СчетФактураВыданный
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаВтДанныеОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтДанныеОснований";
	
	ТекстЗапроса =  "
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка					КАК Ссылка,
	|		ШапкаОснования.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|		ДанныеДокумента.ДокументОснование		КАК ДокументОснование,
	|		ШапкаОснования.Склад					КАК МестоХранения,
	|		ШапкаОснования.Договор					КАК Договор,
	|		ШапкаОснования.Партнер					КАК Партнер
	|	ПОМЕСТИТЬ ВтДанныеОснований
	|	ИЗ
	|		Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ДанныеДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК ШапкаОснования
	|			ПО ДанныеДокумента.ДокументОснование = ШапкаОснования.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка					КАК Ссылка,
	|		ШапкаОснования.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|		ДанныеДокумента.ДокументОснование		КАК ДокументОснование,
	|		ШапкаОснования.Склад					КАК МестоХранения,
	|		ШапкаОснования.Договор					КАК Договор,
	|		ВЫБОР КОГДА ШапкаОснования.РасчетыЧерезОтдельногоКонтрагента
	|			ТОГДА ШапкаОснования.Партнер
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		КОНЕЦ									КАК Партнер
	|	ИЗ
	|		Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ДанныеДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ШапкаОснования
	|			ПО ДанныеДокумента.ДокументОснование = ШапкаОснования.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка					КАК Ссылка,
	|		ШапкаОснования.НаправлениеДеятельности	КАК НаправлениеДеятельности,
	|		ДанныеДокумента.ДокументОснование		КАК ДокументОснование,
	|		ШапкаОснования.Склад					КАК МестоХранения,
	|		ШапкаОснования.Договор					КАК Договор,
	|		ШапкаОснования.Партнер					КАК Партнер
	|	ИЗ
	|		Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ДанныеДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ШапкаОснования
	|			ПО ДанныеДокумента.ДокументОснование = ШапкаОснования.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтДанныеОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДанныеОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&ДатаПолучения           КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&Контрагент              КАК Контрагент,
	|	&Подразделение           КАК Подразделение,
	|	&Ответственный           КАК Ответственный,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	СУММА(0)                 КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	&ИнформацияПоИсправлению КАК Дополнительно,
	|	&ДатаСоставления         КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента,
	|	ДанныеОснований.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ДанныеОснований.Партнер  						КАК Партнер,
	|	ДанныеОснований.НаправлениеДеятельности 		КАК НаправлениеДеятельности,
	|	ДанныеОснований.МестоХранения 					КАК МестоХранения,
	|	МАКСИМУМ(ДанныеОснований.Договор) 				КАК Договор,
	|	МИНИМУМ(ДанныеОснований.ДополнительнаяЗапись) 	КАК ДополнительнаяЗапись
	|ИЗ
	|(ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК СсылкаНаДокумент,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеНДСНалоговымАгентом) КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОснований.КоличествоДоговоров, 0) = 1
	|			ТОГДА ТаблицаОснований.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК Договор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОснований.КоличествоПартнеров, 0) = 1
	|			ТОГДА ТаблицаОснований.Партнер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК Партнер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОснований.КоличествоНаправленийДеятельности, 0) = 1
	|			ТОГДА ТаблицаОснований.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаОснований.КоличествоМестХранения, 0) = 1
	|			ТОГДА ТаблицаОснований.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК МестоХранения,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекстЗапросаТаблицаДанныхОснований КАК ТаблицаОснований
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОснований.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеНДСНалоговымАгентом) КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоДоговоров = 1
	|			ТОГДА ДанныеДокумента.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ						КАК Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоПартнеров = 1
	|			ТОГДА ДанныеДокумента.Партнер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ						КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ДанныеДокумента.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ						КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ						КАК МестоХранения,
	|	ИСТИНА						КАК ДополнительнаяЗапись
	|ИЗ
	|	ТекстЗапросаТаблицаДанныхОснований КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК Основания
	|		ПО ДанныеДокумента.Ссылка = Основания.Ссылка
	|ГДЕ
	|	НЕ Основания.ДокументОснование = ДанныеДокумента.ДокументОснование) КАК ДанныеОснований
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ДанныеОснований.СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	ДанныеОснований.Партнер,
	|	ДанныеОснований.НаправлениеДеятельности,
	|	ДанныеОснований.ХозяйственнаяОперация,
	|	ДанныеОснований.МестоХранения";
	
	ТекстЗапросаТаблицаДанныхОснований =  "
	|ВЫБРАТЬ
	|	ДанныеОснований.Ссылка											КАК Ссылка,
	|	МИНИМУМ(ДанныеОснований.ДокументОснование)						КАК ДокументОснование,
	|	МАКСИМУМ(ДанныеОснований.НаправлениеДеятельности)				КАК НаправлениеДеятельности,
	|	МАКСИМУМ(ДанныеОснований.МестоХранения)							КАК МестоХранения,
	|	МАКСИМУМ(ДанныеОснований.Договор)								КАК Договор,
	|	МАКСИМУМ(ДанныеОснований.Партнер)								КАК Партнер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОснований.НаправлениеДеятельности)	КАК КоличествоНаправленийДеятельности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОснований.МестоХранения)				КАК КоличествоМестХранения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОснований.Договор)					КАК КоличествоДоговоров,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОснований.Партнер)					КАК КоличествоПартнеров
	|ИЗ
	|  ВтДанныеОснований КАК ДанныеОснований
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОснований.Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстЗапросаТаблицаДанныхОснований", 			"(" + ТекстЗапросаТаблицаДанныхОснований + ")");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса)
	
	Если Запрос.Параметры.Свойство("ВтНДСЗаписиКнигиПродажИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтТаблицаСуммДокументов(Запрос, ТекстыЗапроса);
	УстановитьПараметрЗапросаНалогообложениеОрганизации(Запрос);
	
	ЗапросНДСЗаписиКнигиПродаж = Новый Запрос;
	ЗапросНДСЗаписиКнигиПродаж.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("Организация",                 Запрос.Параметры.Организация);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("Контрагент",                  Запрос.Параметры.Контрагент);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("КодВидаОперацииНаУменьшение", Запрос.Параметры.КодВидаОперацииНаУменьшение);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("Период",                      Запрос.Параметры.Период);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("НалогообложениеОрганизации",  Запрос.Параметры.НалогообложениеОрганизации);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("Исправление",                 Запрос.Параметры.Исправление);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("СчетФактураОснование",        Запрос.Параметры.СчетФактураОснование);
	ЗапросНДСЗаписиКнигиПродаж.УстановитьПараметр("Ссылка",                      Запрос.Параметры.Ссылка);
	
	ЗапросНДСЗаписиКнигиПродаж.Текст = 
	"ВЫБРАТЬ
	|	ВтТаблицаСуммДокументов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР КОГДА
	|		ВтТаблицаСуммДокументов.ЗакупкаПодДеятельность В (	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|															ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА &НалогообложениеОрганизации
	|		ИНАЧЕ ВтТаблицаСуммДокументов.ЗакупкаПодДеятельность
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	&Период                                   КАК Период,
	|	&Организация                              КАК Организация,
	|	ВтТаблицаСуммДокументов.ВидЦенности       КАК ВидЦенности,
	|	ВЫБОР КОГДА &Исправление
	|		ТОГДА &СчетФактураОснование
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                     КАК СчетФактура,
	|	&Контрагент                               КАК Покупатель,
	|	NULL                                      КАК ДокументОплаты,
	|	NULL                                      КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НДСНачисленКУплате) КАК Событие,
	|	&Период                                   КАК ДатаСобытия,
	|	ВтТаблицаСуммДокументов.СтавкаНДС         КАК СтавкаНДС,
	|	ВтТаблицаСуммДокументов.СуммаНДС          КАК НДС,
	|	ВтТаблицаСуммДокументов.НДСУпр            КАК НДСУпр,
	|	ВтТаблицаСуммДокументов.СуммаБезНДС       КАК СуммаБезНДС,
	|	NULL                                      КАК НомерДокументаОплаты,
	|	NULL                                      КАК ДатаДокументаОплаты,
	|	NULL                                      КАК ДоговорКонтрагента,
	|	ВтТаблицаСуммДокументов.КодВидаОперации   КАК КодВидаОперации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеНДСНалоговымАгентом) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВтНДСЗаписиКнигиПродаж
	|ИЗ
	|	ВтТаблицаСуммДокументов КАК ВтТаблицаСуммДокументов
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки
	|";
	ЗапросНДСЗаписиКнигиПродаж.Выполнить();
	
	Запрос.УстановитьПараметр("ВтНДСЗаписиКнигиПродажИнициализирована", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтСторноКнигиПродаж(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСторноКнигиПродаж";
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПродаж.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА НДСЗаписиКнигиПродаж.Период
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПродаж.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ КАК СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	&Исправление КАК Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера КАК ДатаСчетаФактурыКомиссионера,
	|	NULL КАК ХозяйственнаяОперация,
	|	-НДСЗаписиКнигиПродаж.СуммаБезНДС КАК СуммаБезНДС,
	|	-НДСЗаписиКнигиПродаж.НДС КАК НДС,
	|	NULL КАК НомерДокументаОплаты,
	|	NULL КАК ДатаДокументаОплаты,
	|	NULL КАК КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.РегламентнаяОперация КАК РегламентнаяОперация
	|ПОМЕСТИТЬ ВтСторноКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НДСНачисленКУплате)
	|	И НДСЗаписиКнигиПродаж.СчетФактура = &СчетФактураОснование
	|	И НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура = &СчетФактураПредыдущееИсправление
	|	И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|	И НДСЗаписиКнигиПродаж.Организация = &Организация
	|	И &Исправление
	|	И НДСЗаписиКнигиПродаж.Регистратор <> &Ссылка
	|	И НДСЗаписиКнигиПродаж.НДС > 0
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПродаж";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрЗапросаСчетФактураПредыдущееИсправление(Запрос);
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтСторноКнигиПродаж", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСторноКнигиПродаж(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтНДСЗаписиКнигиПродаж.Период КАК Период,
	|	ВтНДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВтНДСЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	ВтНДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	ВтНДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	ВтНДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	ВтНДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	ВтНДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	ВтНДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	ВтНДСЗаписиКнигиПродаж.ДатаСобытия КАК ДатаСобытия,
	|	NULL КАК ЗаписьДополнительногоЛиста,
	|	NULL КАК КорректируемыйПериод,
	|	NULL КАК СторнирующаяЗаписьДопЛиста,
	|	ВтНДСЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	NULL КАК ИсправленныйСчетФактура,
	|	NULL КАК Исправление,
	|	NULL КАК ДатаСчетаФактурыКомиссионера,
	|	ВтНДСЗаписиКнигиПродаж.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВтНДСЗаписиКнигиПродаж.СуммаБезНДС КАК СуммаБезНДС,
	|	ВтНДСЗаписиКнигиПродаж.НДС КАК НДС,
	|	ВтНДСЗаписиКнигиПродаж.НомерДокументаОплаты КАК НомерДокументаОплаты,
	|	ВтНДСЗаписиКнигиПродаж.ДатаДокументаОплаты КАК ДатаДокументаОплаты,
	|	ВтНДСЗаписиКнигиПродаж.КодВидаОперации КАК КодВидаОперации,
	|	NULL КАК РегламентнаяОперация
	|ИЗ
	|	ВтНДСЗаписиКнигиПродаж КАК ВтНДСЗаписиКнигиПродаж
	|ГДЕ
	|	НЕ &Исправление
	|	И ВтНДСЗаписиКнигиПродаж.НДС > 0
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура КАК СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности КАК ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС КАК СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты КАК ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты КАК ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие КАК Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера КАК ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС КАК СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС КАК НДС,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|ИЗ
	|	ВтСторноКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Организация,
	|	&Контрагент,
	|	&СчетФактураОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент),
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118),
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НДСНачисленКУплате) КАК Событие,
	|	&Период,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетФактураОснование, КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(&ДатаСчетФактураОснование, КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ) ТОГДА
	|			&ДатаСчетФактураОснование
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	NULL,
	|	&Ссылка,
	|	ИСТИНА,
	|	NULL,
	|	NULL КАК ХозяйственнаяОперация,
	|	СУММА(СуммыИсправления.СуммаБезНДС) КАК СуммаБезНДС,
	|	СУММА(СуммыИсправления.НДС) КАК НДС,
	|	NULL,
	|	NULL,
	|	NULL КАК КодВидаОперации,
	|	NULL КАК РегламентнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		-Сторно.СуммаБезНДС КАК СуммаБезНДС,
	|		-Сторно.НДС КАК НДС
	|	ИЗ
	|		ВтСторноКнигиПродаж КАК Сторно
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаДанных.СуммаБезНДС,
	|		ТаблицаДанных.НДС
	|	ИЗ
	|		ВтНДСЗаписиКнигиПродаж КАК ТаблицаДанных) КАК СуммыИсправления
	|
	|ГДЕ
	|	&Исправление
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ИМЕЮЩИЕ
	|	СУММА(СуммыИсправления.НДС) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.ХозяйственнаяОперация,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС,
	|	НДСЗаписиКнигиПродаж.НомерДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.ДатаДокументаОплаты,
	|	НДСЗаписиКнигиПродаж.КодВидаОперации,
	|	НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Регистратор = &Ссылка
	|	И НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСЗаписиКнигиПокупок";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрЗапросаСчетФактураПредыдущееИсправление(Запрос);
	
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса);
	
#Область ТекстСторноИсправление
	ТекстЗапросаСторноИсправление = "
	|
	|ВЫБРАТЬ
	|	&Период                                          КАК Период,
	|	НДСЗаписиКнигиПокупок.Организация                КАК Организация,
	|	НДСЗаписиКнигиПокупок.Поставщик                  КАК Поставщик,
	|	НДСЗаписиКнигиПокупок.СчетФактура                КАК СчетФактура,
	|	НДСЗаписиКнигиПокупок.ВидЦенности                КАК ВидЦенности,
	|	НДСЗаписиКнигиПокупок.СтавкаНДС                  КАК СтавкаНДС,
	|	НДСЗаписиКнигиПокупок.СчетУчетаНДС               КАК СчетУчетаНДС,
	|	НДСЗаписиКнигиПокупок.Событие                    КАК Событие,
	|	&Период                                          КАК ДатаСобытия,
	|	&Исправление                                     КАК Исправление,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.ЗаписьДополнительногоЛиста
	|			ТОГДА ИСТИНА
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период, КВАРТАЛ)
	|			ТОГДА ИСТИНА
	|	КОНЕЦ                                            КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод <> ДАТАВРЕМЯ(1,1,1)
	|			ТОГДА НДСЗаписиКнигиПокупок.КорректируемыйПериод
	|		КОГДА НАЧАЛОПЕРИОДА(НДСЗаписиКнигиПокупок.Период,КВАРТАЛ) < НАЧАЛОПЕРИОДА(&Период,КВАРТАЛ)
	|			ТОГДА НДСЗаписиКнигиПокупок.Период
	|	КОНЕЦ                                            КАК КорректируемыйПериод,
	|	НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура    КАК ИсправленныйСчетФактура,
	|	-НДСЗаписиКнигиПокупок.СуммаБезНДС               КАК СуммаБезНДС,
	|	-НДСЗаписиКнигиПокупок.НДС                       КАК НДС,
	|	НДСЗаписиКнигиПокупок.РегламентнаяОперация       КАК РегламентнаяОперация,
	|	&КодВидаОперацииНаУменьшение                     КАК КодВидаОперации
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок  КАК НДСЗаписиКнигиПокупок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНДСЗаписиКнигиПродаж КАК ДокументыОснования
	|			ПО НДСЗаписиКнигиПокупок.СчетФактура = ДокументыОснования.СчетФактура
	|
	|ГДЕ
	|	НДСЗаписиКнигиПокупок.Организация = &Организация
	|	И НДСЗаписиКнигиПокупок.Регистратор <> &Ссылка
	|	И &Исправление
	|	И &Корректировочный
	|	И НЕ НДСЗаписиКнигиПокупок.РегламентнаяОперация
	|	И НДСЗаписиКнигиПокупок.ИсправленныйСчетФактура = &СчетФактураПредыдущееИсправление
	|	И НДСЗаписиКнигиПокупок.НДС > 0
	|
	|";
#КонецОбласти

#Область ТекстКорректировка
	ТекстЗапросаКорректировка = "
	|
	|ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&Организация                      КАК Организация,
	|	&Контрагент                       КАК Поставщик,
	|	ВЫБОР КОГДА &Исправление
	|		ТОГДА &СчетФактураОснование
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                             КАК СчетФактура,
	|	ТаблицаДанных.ВидЦенности         КАК ВидЦенности,
	|	ТаблицаДанных.СтавкаНДС           КАК СтавкаНДС,
	|	NULL                              КАК СчетУчетаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	&Период                           КАК ДатаСобытия,
	|	ЛОЖЬ                              КАК ЗаписьДополнительногоЛиста,
	|	NULL                              КАК КорректируемыйПериод,
	|	&Исправление                      КАК Исправление,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &Ссылка
	|	КОНЕЦ                             КАК ИсправленныйСчетФактура,
	|	-ТаблицаДанных.СуммаБезНДС        КАК СуммаБезНДС,
	|	-ТаблицаДанных.НДС                КАК НДС,
	|	ЛОЖЬ                              КАК РегламентнаяОперация,
	|	ТаблицаДанных.КодВидаОперации     КАК КодВидаОперации
	|ИЗ
	|	ВтНДСЗаписиКнигиПродаж КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументыОснования КАК ДокументыОснования
	|			ПО ТаблицаДанных.ИдентификаторСтроки = ДокументыОснования.ИдентификаторСтроки
	|
	|ГДЕ
	|	&Корректировочный
	|	И ТаблицаДанных.НДС < 0
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
#КонецОбласти
	
	ТекстыОтражения = Новый Массив;
	ТекстыОтражения.Добавить(ТекстЗапросаСторноИсправление);
	ТекстыОтражения.Добавить(ТекстЗапросаКорректировка);
	ТекстЗапроса = СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса
	
КонецФункции

Процедура УстановитьПараметрЗапросаСчетФактураПредыдущееИсправление(Запрос)
	
	Если Запрос.Параметры.Свойство("СчетФактураПредыдущееИсправление") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетФактураПредыдущееИсправление", ?(Запрос.Параметры.Исправление,
		СчетФактураПредыдущееИсправление(Запрос.Параметры.СчетФактураОснование, Запрос.Параметры.НомерИсправления),
		Неопределено));
	
КонецПроцедуры

Функция СчетФактураПредыдущееИсправление(СчетФактураОснование, НомерИсправления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК ИсправленныйСчетФактура,
	|	СчетФактура.НомерИсправления КАК НомерИсправления
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактура
	|ГДЕ
	|	СчетФактура.СчетФактураОснование = &СчетФактураОснование
	|	И СчетФактура.Проведен
	|	И СчетФактура.Исправление
	|	И СчетФактура.НомерИсправления <> &НомерИсправления
	|";
	
	Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
	Запрос.УстановитьПараметр("НомерИсправления", НомерИсправления);
	
	ПредыдущийНомер = 0;
	ИсправленныйСчетФактура = Неопределено;
	НомерИсправленияЧислом = ?(ЗначениеЗаполнено(НомерИсправления),Число(НомерИсправления),1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерИзВыборки = Число(Выборка.НомерИсправления);
		Если НомерИзВыборки < НомерИсправленияЧислом
			И НомерИзВыборки > ПредыдущийНомер Тогда
			ПредыдущийНомер = НомерИзВыборки;
			ИсправленныйСчетФактура = Выборка.ИсправленныйСчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправленныйСчетФактура
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса);
	
	УстановитьПараметрКоэффициентПересчетаВВалютуУпр(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗаписиКнигиПродаж.Период               КАК Период,
	|	ЗаписиКнигиПродаж.Организация          КАК Организация,
	|	ЗаписиКнигиПродаж.СчетФактура          КАК СчетФактура,
	|	ЗаписиКнигиПродаж.Покупатель           КАК Поставщик,
	|	ЗаписиКнигиПродаж.ВидЦенности          КАК ВидЦенности,
	|	ЗаписиКнигиПродаж.СтавкаНДС            КАК СтавкаНДС,
	|	ЗаписиКнигиПродаж.ВидДеятельностиНДС   КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА &Исправление
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	ЗаписиКнигиПродаж.НДС                  КАК НДС,
	|	ЗаписиКнигиПродаж.НДСУпр               КАК НДСУпр,
	|	НЕОПРЕДЕЛЕНО                           КАК Событие,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	ЗаписиКнигиПродаж.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО                           КАК КорВидДеятельностиНДС
	|ИЗ
	|	ВтНДСЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
	|ГДЕ
	|	ЗаписиКнигиПродаж.НДС <> 0
	|	И ЗаписиКнигиПродаж.ВидДеятельностиНДС В
	|		(&НалогообложениеОрганизации,
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуиспользованию),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	Если Запрос.Параметры.Свойство("ВтПартииПрочихРасходовИнициализирована") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтНДСЗаписиКнигиПродаж(Запрос, ТекстыЗапроса);
	ИнициализироватьКлючиАналитикиУчетаПартийДокумента(Запрос);
	
	ЗапросПартииПрочихРасходов = Новый Запрос;
	ЗапросПартииПрочихРасходов.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПартииПрочихРасходов.УстановитьПараметр("Ссылка",               Запрос.Параметры.Ссылка);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("Организация",          Запрос.Параметры.Организация);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("СтатьяРасходов",       Запрос.Параметры.СтатьяРасходов);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("Период",               Запрос.Параметры.Период);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("Исправление",          Запрос.Параметры.Исправление);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("СчетФактураОснование", Запрос.Параметры.СчетФактураОснование);
	ЗапросПартииПрочихРасходов.УстановитьПараметр("Ссылка",               Запрос.Параметры.Ссылка);
	
	ЗапросПартииПрочихРасходов.Текст = 
	"ВЫБРАТЬ
	|	NULL                                              КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаУчетаПартий                    КАК АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	0                                                 КАК ВременнаяРазница,
	|	ВЫБОР КОГДА &Исправление
	|		ТОГДА &СчетФактураОснование
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                             КАК ДокументПоступленияРасходов,
	|	NULL                                              КАК ДокументРеализации,
	|	ВЫБОР 
	|		КОГДА Аналитика.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|			ТОГДА Аналитика.НалогообложениеНДС 
	|		ИНАЧЕ Аналитика.АналитикаУчетаПартий.НалогообложениеНДС 
	|	КОНЕЦ                                             КАК ВидДеятельностиНДС,
	|	ДокументыПоступления.СуммаНДС                     КАК НДСРегл,
	|	ДокументыПоступления.НДСУпр                       КАК НДСУпр,
	|	ДокументыПоступления.ЗакупкаПодДеятельность       КАК НалогообложениеНДС,
	|	ДокументыПоступления.ИдентификаторСтроки          КАК НомерСтроки,
	|	&Организация                                      КАК Организация,
	|	&Период                                           КАК Период,
	|	ДокументыПоступления.Подразделение                КАК Подразделение,
	|	ДокументыПоступления.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	0                                                 КАК ПостояннаяРазница,
	|	&Ссылка                                           КАК Регистратор,
	|	NULL                                              КАК СтатьяОтраженияРасходов,
	|	ВЫБОР 
	|		КОГДА ДокументыПоступления.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА NULL 
	|		ИНАЧЕ &СтатьяРасходов 
	|	КОНЕЦ                                             КАК СтатьяРасходов,
	|	ВЫБОР 
	|		КОГДА ДокументыПоступления.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА NULL 
	|		КОГДА ДокументыПоступления.ДокументОснование ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ДокументыПоступления.ДокументОснование КАК Документ.КорректировкаПриобретения).ДокументОснование 
	|		ИНАЧЕ ДокументыПоступления.ДокументОснование 
	|	КОНЕЦ                                             КАК АналитикаРасходов,
	|	0                                                 КАК Стоимость,
	|	0                                                 КАК СтоимостьБезНДС,
	|	0                                                 КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВтПартииПрочихРасходов
	|ИЗ
	|	ВтТаблицаСуммДокументов КАК ДокументыПоступления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК Аналитика
	|		ПО Аналитика.НомерСтроки = ДокументыПоступления.ИдентификаторСтроки
	|ГДЕ
	|	ДокументыПоступления.СуммаНДС <> 0
	|";
	
	ЗапросПартииПрочихРасходов.Выполнить();
	
	Запрос.УстановитьПараметр("ВтПартииПрочихРасходовИнициализирована", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииПрочихРасходов.АналитикаРасходов,
	|	ПартииПрочихРасходов.АналитикаУчетаНоменклатуры,
	|	ПартииПрочихРасходов.АналитикаУчетаПартий,
	|	ПартииПрочихРасходов.ВидДвижения,
	|	ПартииПрочихРасходов.ВременнаяРазница,
	|	ПартииПрочихРасходов.ДокументПоступленияРасходов,
	|	ПартииПрочихРасходов.ДокументРеализации,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ПартииПрочихРасходов.ВидДеятельностиНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидДеятельностиНДС,
	|	ПартииПрочихРасходов.НДСРегл,
	|	ПартииПрочихРасходов.НДСУпр,
	|	ПартииПрочихРасходов.НалогообложениеНДС,
	|	ПартииПрочихРасходов.НомерСтроки,
	|	ПартииПрочихРасходов.Организация,
	|	ПартииПрочихРасходов.Период,
	|	ПартииПрочихРасходов.Подразделение,
	|	ПартииПрочихРасходов.НаправлениеДеятельности,
	|	ПартииПрочихРасходов.ПостояннаяРазница,
	|	ПартииПрочихРасходов.Регистратор,
	|	ПартииПрочихРасходов.СтатьяОтраженияРасходов,
	|	ПартииПрочихРасходов.СтатьяРасходов,
	|	ПартииПрочихРасходов.Стоимость,
	|	ПартииПрочихРасходов.СтоимостьБезНДС,
	|	ПартииПрочихРасходов.СтоимостьРегл
	|ИЗ
	|	ВтПартииПрочихРасходов КАК ПартииПрочихРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПартийДокумента(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПартийДокументаИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	УстановитьПараметрЗапросаНалогообложениеОрганизации(Запрос);
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	ТаблицаДокументыПоступления.ИдентификаторСтроки КАК НомерСтроки,
	|	""ДокументыОснования"" КАК ИмяТабличнойЧасти,
	|	ТаблицаДокументыПоступления.Партнер КАК Поставщик,
	|	СчетФактураПолученныйНалоговыйАгент.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА
	|		ТаблицаДокументыПоступления.ЗакупкаПодДеятельность В (	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА &НалогообложениеОрганизации
	|		ИНАЧЕ ТаблицаДокументыПоступления.ЗакупкаПодДеятельность
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	ТаблицаДокументыПоступления.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК ВидЦенности,
	|	0 КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	втТаблицаСуммДокументов КАК ТаблицаДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученныйНалоговыйАгент
	|		ПО (СчетФактураПолученныйНалоговыйАгент.Ссылка = &Ссылка)";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПартийДокументаИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаНалогообложениеОрганизации(Запрос)
	
	Если Запрос.Параметры.Свойство("НалогообложениеОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	НалогообложениеОрганизации = Справочники.Организации.НалогообложениеНДС(Запрос.Параметры.Организация, Запрос.Параметры.Период);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", НалогообложениеОрганизации);
	
КонецПроцедуры


Функция ТекстЗапросаТаблицаРеквизиты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Реквизиты";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Организация,
	|	&Период";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.СчетФактураПолученныйНалоговыйАгент";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",           """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоИсправлению", """""");
	ПереопределениеРасчетаПараметров.Вставить("ДатаПолучения", "ДанныеДокумента.Дата");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтДанныеОснований", ТекстЗапросаВтДанныеОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Определяет счета-фактуры выданные для печати по переданным документам-основаниям.
// 
// Параметры:
//	МассивОбъектов - Массив - Документ-основания, для которых необходимо найти счета-фактуры
//	ПечатьВВалюте - Булево - Признак печати счетов-фактуры в валюте.
//
// Возвращаемое значение:
//	Структура - структура со следующими свойствами:
//	* СчетаФактурыНаПечать - Массив - Найденные счета-фактуры для печати.
//	* ТаблицаОшибок - ТаблицаЗначений - Документы-основания, по которым счет-фактура не может быть напечатан.
//
Функция ПолучитьСчетаФактурыНаПечать(МассивОбъектов, ПечатьВВалюте = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	ПервыйТип    = Истина;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование_" + ИмяОбъекта, СтруктураОбъектов.Значение);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА %ТекстУсловияТребуется% ТОГДА
		|			ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ КАК НеТребуетсяСчетФактура,
		|	ВЫБОР
		|		КОГДА &ПечатьВВалюте И ДанныеДокумента.Валюта = &ВалютаРегламентированногоУчета ТОГДА
		|			ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК НеТребуетсяПечатьВВалюте
		|		
		|//ОператорПОМЕСТИТЬ
		|ИЗ
		|	Документ.%ИмяОбъекта% КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ДокументОснование_%ИмяОбъекта%)";
		
		МенеджерОбъекта = Документы[ИмяОбъекта];
		ТекстУсловияТребуется = МенеджерОбъекта.ТекстУсловияТребуетсяСчетФактураПосредника();
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловияТребуется%", ТекстУсловияТребуется);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяОбъекта%", ИмяОбъекта);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"//ОператорПОМЕСТИТЬ", ?(ПервыйТип, "ПОМЕСТИТЬ ТаблицаОснований", ""));
		
		ПервыйТип = Ложь;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ТаблицаОснований.Ссылка                 КАК ДокументОснование,
	|	МАКСИМУМ(СчетаФактуры.НомерИсправления) КАК НомерИсправления
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	ТаблицаОснований КАК ТаблицаОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетаФактурыОснования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетаФактуры
	|			ПО СчетаФактурыОснования.Ссылка = СчетаФактуры.Ссылка
	|			И НЕ СчетаФактуры.ПометкаУдаления
	|		ПО ТаблицаОснований.Ссылка = СчетаФактурыОснования.ДокументОснование
	|			И НЕ ТаблицаОснований.НеТребуетсяСчетФактура
	|			И НЕ ТаблицаОснований.НеТребуетсяПечатьВВалюте
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОснований.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактурыОснования.ДокументОснование КАК Ссылка
	|
	|ПОМЕСТИТЬ ОснованияСоСчетФактурой
	|ИЗ
	|	НомераИсправлений КАК СчетаФактурыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	НомераИсправлений КАК НомераИсправлений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетаФактурыОснования
	|		ПО НомераИсправлений.ДокументОснование = СчетаФактурыОснования.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ПО СчетаФактурыОснования.Ссылка = СчетФактураПолученный.Ссылка
	|			И НЕ СчетФактураПолученный.ПометкаУдаления
	|			И НомераИсправлений.НомерИсправления = СчетФактураПолученный.НомерИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОснований.Ссылка                   КАК ДокументОснование,
	|	ТаблицаОснований.НеТребуетсяСчетФактура   КАК НеТребуетсяСчетФактура,
	|	ТаблицаОснований.НеТребуетсяПечатьВВалюте КАК НеТребуетсяПечатьВВалюте,
	|	ВЫБОР
	|		КОГДА ОснованияСоСчетФактурой.Ссылка ЕСТЬ NULL ТОГДА
	|			ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                     КАК НеВыставленСчетФактура
	|ИЗ
	|	ТаблицаОснований КАК ТаблицаОснований
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОснованияСоСчетФактурой КАК ОснованияСоСчетФактурой
	|	ПО ТаблицаОснований.Ссылка = ОснованияСоСчетФактурой.Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПечатьВВалюте", ПечатьВВалюте);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",
		ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СчетаФактурыНаПечать = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Ссылка");
	ТаблицаОшибок        = РезультатЗапроса[4].Выгрузить();
	
	Структура = Новый Структура;
	Структура.Вставить("СчетаФактурыНаПечать", СчетаФактурыНаПечать);
	Структура.Вставить("ТаблицаОшибок",        ТаблицаОшибок);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеСчетовФактур 

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент) 
		ИЛИ Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ТребуетсяОформлениеСчетаФактуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	Параметры.Вставить("БезОграниченияПериода");
	
	Если Параметры.Свойство("КраткоеПредставление") Тогда
		ТекстГиперссылки = НСтр("ru = 'СФ полученные (НА)'");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Счета-фактуры полученные (налоговый агент)'");
	КонецЕсли;	
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) = 0 Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыСчетФактураПолученный());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыСчетФактураПолученный());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыСчетФактураПолученный() Экспорт
	
	Возврат "Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
