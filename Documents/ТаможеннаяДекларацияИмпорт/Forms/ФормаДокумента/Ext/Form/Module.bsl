&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем КешРазделов; // используется для обработок связи между разделами и товарами
&НаКлиенте
Перем СтарыйНомерРаздела; // поддержка редактирования номера раздела
&НаКлиенте
Перем НовыйНомерРаздела; // поддержка редактирования номера раздела

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ПараметрыВыбораВалют = Новый Массив(1);
	ПараметрыВыбораВалют[0] = Новый ПараметрВыбора("Отбор.Ссылка", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Элементы.Валюта.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВалют);
	Элементы.ВалютаВзаиморасчетов.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВалют);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Элементы.ТоварыПодобратьИзОформления.Видимость = 
		НЕ ПолучитьФункциональнуюОпцию("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям");
		
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ВариантОформления);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
		Элементы.ГруппаИтогоТовары.ЦветФона = Новый Цвет();
	КонецЕсли;
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", 0)).Количество() > 0 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Элементы.ТоварыПоказатьВсеТовары.Пометка = Истина;
			НастроитьСервисыЗаполнения(Элементы, Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ТаможеннаяДекларацияИмпорт", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка) Тогда
		Если НЕ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы), Ложь, "АдресТоваровВХранилище");
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровПоПоступлениям" Тогда
		
		ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы), Ложь, "АдресТоваровВХранилище", "Товары", Истина);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Форма.ПодборПоОстаткам" Тогда
		
		ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы),Истина);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Статус) И СтатусДокумента <> Объект.Статус
	 И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни") Тогда
		ДатаВыпуска = Объект.Дата;
		ПоказатьВводДаты(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ДатаВыпуска", ДатаВыпуска)), ДатаВыпуска, НСтр("ru='Дата выпуска с таможни'"), ЧастиДаты.Дата);
        Возврат;
	КонецЕсли;
	СтатусДокумента = Объект.Статус;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииЗавершение(Дата, ДополнительныеПараметры) Экспорт
    
    ДатаВыпуска = ?(Дата = Неопределено, ДополнительныеПараметры.ДатаВыпуска, Дата);
    
    
    Если (Дата <> Неопределено) Тогда
        Объект.Дата = КонецДня(ДатаВыпуска);
    КонецЕсли;
    
    СтатусДокумента = Объект.Статус;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ПересчитатьСуммыПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ПоставщикПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЕстьСтрокиОтличнойВалюты() Тогда
		ПересчитатьСуммуПоКурсуНаДату();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокПоступленияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокПоступлений,
			НСтр("ru='Поступления по импорту (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияПриИзменении(Элемент)
	
	ВалютаИзменена = Ложь;
	ВариантОформленияПриИзмененииСервер(ВалютаИзменена);
	
	Если ВалютаИзменена Тогда
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииСервер();
	ПересчитатьСуммыПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПоставщикаПриИзменении(Элемент)
	
	КонтрагентПоставщикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	СоглашениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетовПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница = Элементы.СтраницаРазделыТовары Тогда
		АктивироватьРаздел();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерДекларацииПриИзменении(Элемент)
	ИнициироватьЗаполнениеНомераДляСФ();
КонецПроцедуры

&НаКлиенте
Процедура НумероватьПоТоварамПриИзменении(Элемент)
	ИнициироватьЗаполнениеНомераДляСФ();
	НастроитьСервисыЗаполнения(Элементы, Объект);
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовСборПриИзменении(Элемент)
	СтатьяРасходовПриИзмененииНаСервере("Сбор");
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовШтрафПриИзменении(Элемент)
	СтатьяРасходовПриИзмененииНаСервере("Штраф");
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовСборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если АналитикаРасходовЗаказРеализацияСбор Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовСборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.АналитикаРасходовСбор = ВыбранноеЗначение.АналитикаРасходов;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовСборАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовСборОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовШтрафНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если АналитикаРасходовЗаказРеализацияШтраф Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовШтрафОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.АналитикаРасходовШтраф = ВыбранноеЗначение.АналитикаРасходов;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовШтрафАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовШтрафОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодтверждениеОплатыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("СчетФактура", Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриУстановкеПодтвержденияОплаты", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("РегистрСведений.ПодтверждениеОплатыНДСВБюджет.Форма.ФормаДокументыОплаты", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("АктивироватьРаздел", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	НовыйНомерРаздела = НовыйНомерРаздела(Объект.Разделы);
	Если (НовыйНомерРаздела > НомерРазделаПредел) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Достигнут предельный номер раздела, новый раздел добавить нельзя. Проверьте нумерацию разделов.'"),
			Объект.Ссылка,
			"Разделы[" + (Элементы.Разделы.ТекущиеДанные.НомерСтроки - 1) + "].НомерРаздела",);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерРаздела = НовыйНомерРаздела;
		Если Не Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элемент.ТекущиеДанные.НомерДляСФ = НомерДляСФ(СокрЛП(Объект.НомерДекларации), Элемент.ТекущиеДанные.НомерРаздела);
		КонецЕсли;
	КонецЕсли;
	СтарыйНомерРаздела = Элемент.ТекущиеДанные.НомерРаздела;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Не ОтменаРедактирования Тогда
		ЗаменитьЭлементВСпискеВыбора(
			Элементы.ТоварыНомерРаздела.СписокВыбора, -1, Элемент.ТекущиеДанные.НомерРаздела, Элементы.ТоварыНомерРаздела.Формат);
	КонецЕсли;
	Если Неопределено <> Элемент.ТекущиеДанные Тогда
		СтарыйНомерРаздела = Элемент.ТекущиеДанные.НомерРаздела;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	КешРазделов = Новый Соответствие;
	Для Каждого Раздел Из Разделы Цикл
		КешРазделов.Вставить(Раздел.НомерРаздела, Раздел.НомерРаздела);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПослеУдаления(Элемент)
	ОчиститьНомераРазделовТоваров(КешРазделов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыНомерРазделаПриИзменении(Элемент)
	НовыйНомерРаздела = Элементы.Разделы.ТекущиеДанные.НомерРаздела;
	Если НомерРазделаУникальный(Объект.Разделы, НовыйНомерРаздела) Тогда
		// меняем номер для с/ф, если требуется
		Если Не Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элементы.Разделы.ТекущиеДанные.НомерДляСФ = НомерДляСФ(СокрЛП(Объект.НомерДекларации), НовыйНомерРаздела);
		КонецЕсли;
		// меняем номер раздела у связанных товаров
		ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", НовыйНомерРаздела), Новый Структура("НомерРаздела", СтарыйНомерРаздела));
		// удалим старый номер раздела из списка выбора разделов в товарах
		ЗаменитьЭлементВСпискеВыбора(
			Элементы.ТоварыНомерРаздела.СписокВыбора, СтарыйНомерРаздела, НовыйНомерРаздела, Элементы.ТоварыНомерРаздела.Формат);
		
		АктивироватьРаздел();	
	Иначе
		Элементы.Разделы.ТекущиеДанные.НомерРаздела = СтарыйНомерРаздела;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(НСтр("ru = 'Раздел №%1 уже существует. Укажите другой номер раздела'"), "%1", НовыйНомерРаздела),
			Объект.Ссылка,
			"Разделы[" + (Элементы.Разделы.ТекущиеДанные.НомерСтроки - 1) + "].НомерРаздела",);
	КонецЕсли;
	НовыйНомерРаздела = Элементы.Разделы.ТекущиеДанные.НомерРаздела;
КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	ПересчитатьТаможеннуюСтоимостьТоваров(Раздел,Объект.Товары);
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СтавкаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	ПересчитатьТаможеннуюСтоимостьТоваров(Раздел,Объект.Товары);
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаНДСПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыНомерДляСФПриИзменении(Элемент)
	ОтборТоваров = Новый Структура("НомерРаздела", Элементы.Разделы.ТекущиеДанные.НомерРаздела);
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерГТД", Неопределено), ОтборТоваров);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		ДанныеРаздела = ДанныеТекущегоРаздела(Элементы.Разделы);
		ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения, Склад");
		Если Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элемент.ТекущиеДанные.НомерДляСФ = НомерДляСФ(СокрЛП(Объект.НомерДекларации), Элемент.ТекущиеДанные.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	ОбновитьИнформациюПоПоступлениям();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
	Действия.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));

	Действия.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
	Действия.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяСтоимостьПриИзменении(Элемент)
	Товар = Элементы.Товары.ТекущиеДанные;
	ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеТекущегоРаздела(Элементы.Разделы));
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПошлиныПриИзменении(Элемент)
	Товар = Элементы.Товары.ТекущиеДанные;
	ПересчитатьПоля(Товар, "СуммаНДС", ДанныеТекущегоРаздела(Элементы.Разделы));
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ДанныеГТД = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Элементы.Товары.ТекущиеДанные.НомерГТД, "Код, СтранаПроисхождения");
	Элементы.Товары.ТекущиеДанные.НомерДляСФ = ДанныеГТД.Код;
	Элементы.Товары.ТекущиеДанные.СтранаПроисхождения = ДанныеГТД.СтранаПроисхождения;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
 	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПоступленияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ДокументПоступленияПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерРазделаПриИзменении(Элемент)
	
	Товар = Элементы.Товары.ТекущиеДанные;
	ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеТекущегоРаздела(Элементы.Разделы));
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНаТовары(Команда)
	
	ОчиститьСообщения();
	
	ТекстОшибки = "";
	Если Объект.Разделы.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Необходимо создать хотя бы один раздел декларации и заполнить в нем товары.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "Объект.Разделы");
		Возврат;
	КонецЕсли;
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Необходимо заполнить товары декларации. Это можно сделать с помощью команды ""Заполнить"" или вручную.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "Объект.Товары");
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура("НомерРаздела");
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	СписокРазделов = "";
	Для Каждого Раздел Из Разделы Цикл
		НомерРаздела = Формат(Раздел.НомерРаздела, "ЧН=0; ЧГ=0");
		СписокРазделов = СписокРазделов + ?(ЗначениеЗаполнено(СписокРазделов), ", ", "") + НомерРаздела;
		
		Если Раздел.ТаможеннаяСтоимость = 0. Тогда
			ТекстОшибки = НСтр("ru='Необходимо задать таможенную стоимость в разделе %НомерРаздела%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерРаздела%", НомерРаздела);
			ПолеСтоимости = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Разделы", Раздел.НомерСтроки, "ТаможеннаяСтоимость");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, ПолеСтоимости, "Объект");
		КонецЕсли;
		
		Отбор.НомерРаздела = Раздел.НомерРаздела;
		Товары = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого Товар Из Товары Цикл
			Если Товар.ТаможеннаяСтоимость = 0. Тогда
				ТекстОшибки =
					НСтр("ru='Необходимо предварительно заполнить таможенную стоимость товара в строке %СтрокаТовара% раздела %НомерРаздела%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерРаздела%", НомерРаздела);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаТовара%", Формат(Товар.НомерСтроки, "ЧН=0; ЧГ=0"));
				ПолеСтоимости = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товар.НомерСтроки, "ТаможеннаяСтоимость");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, ПолеСтоимости, "Объект");
			КонецЕсли;
		КонецЦикла;
		Если Товары.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='Необходимо заполнить товары раздела %НомерРаздела%. Это можно сделать с помощью команды ""Заполнить"" или вручную.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерРаздела%", НомерРаздела);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "Объект.Товары");
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстОшибки <> "" Или Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьНаТоварыСервер();
	
	ТекстПояснения = ?(Разделы.Количество() > 1,
		НСтр("ru = 'Суммы разделов %СписокРазделов% распределены на товары'"),
		НСтр("ru = 'Суммы раздела %СписокРазделов% распределены на товары'"));
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Команда выполнена'"), ,
		СтрЗаменить(ТекстПояснения, "%СписокРазделов%", СписокРазделов), БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТоварам(Команда)
	Если Объект.Товары.Количество() > 0 И Объект.Разделы.Количество() > 0 Тогда
		РассчитатьПоТоварамСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеТовары(Команда)
	Элементы.ТоварыПоказатьВсеТовары.Пометка = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	НастроитьСервисыЗаполнения(Элементы, Объект);
	АктивироватьРаздел();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерРаздела(Команда)
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомерРаздела(Команда)
	ТекущийРаздел = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", ТекущийРаздел), Новый Структура("НомерРаздела", 0));
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ТаможеннаяДекларацияИмпорт.ФормаДокумента.Команда.ПодобратьТовары");
	
	Склад = ДанныеТекущегоРаздела(Элементы.Разделы).Склад;
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата", ДатаДокумента(Объект.Дата));
	ПараметрыПодбора.Вставить("Склад", Склад);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыПодбора.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах",  Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров",             Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПоступлений(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьИзПоступленийЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		Новый Структура("Организация, Поставщик"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПоступленийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДанныеРаздела = ДанныеТекущегоРаздела(Элементы.Разделы);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Партнер",          Объект.Поставщик);
	ПараметрыПодбора.Вставить("Организация",      Объект.Организация);
	ПараметрыПодбора.Вставить("Склад",            ДанныеРаздела.Склад);
	ПараметрыПодбора.Вставить("ЗакупкаПоИмпорту", Истина);
	ПараметрыПодбора.Вставить("ПоказыватьТару",   Ложь);
	ПараметрыПодбора.Вставить("ПоказыватьТовары", Истина);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС",  Ложь);
	ПараметрыПодбора.Вставить("Валюта",           Объект.Валюта);
	ПараметрыПодбора.Вставить("Дата",             ДатаДокумента(Объект.Дата));
	
	ОткрытьФорму("ОбщаяФорма.ПодборТоваровПоПоступлениям", ПараметрыПодбора, ЭтаФорма);
	
	ОбновитьИнформациюПоПоступлениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзОформления(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьИзОформленияЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		Новый Структура("Организация, Поставщик"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзОформленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеРаздела = ДанныеТекущегоРаздела(Элементы.Разделы);
	ОтборТоваров = Новый Структура("НомерРаздела", ДанныеРаздела.НомерРаздела);
	АдресВХранилище = ПоместитьВХранилище("Товары", "Номенклатура, Характеристика, Серия, Склад, Количество, ДокументПоступления", ОтборТоваров);
	Склад = ДанныеРаздела.Склад;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресВХранилище", АдресВХранилище);
	ПараметрыПодбора.Вставить("Организация",     Объект.Организация);
	ПараметрыПодбора.Вставить("Склад",           Склад);
	ПараметрыПодбора.Вставить("Дата",            Объект.Дата);
	ПараметрыПодбора.Вставить("Поставщик",       Объект.Поставщик);
	
	ОткрытьФорму("РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Форма.ПодборПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостьВыделенныхСтрок(Команда)
	Перем ВидЦены;
	ДляНезаполненныхСтрок = Ложь;
	ВыбратьВидЦеныПоставщика(ВидЦены,ДляНезаполненныхСтрок);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостьНезаполненныхСтрок(Команда)
	Перем ВидЦены;
	ДляНезаполненныхСтрок = Истина;
	ВыбратьВидЦеныПоставщика(ВидЦены,ДляНезаполненныхСтрок);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрануПроисхождения(Команда)
	Если Элементы.Товары.ВыделенныеСтроки.Количество()>0 Тогда
		СтранаПроисхождения = Неопределено;

		ОткрытьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина),,,,, Новый ОписаниеОповещения("УстановитьСтрануПроисхожденияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрануПроисхожденияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтранаПроисхождения = Результат;
    Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
        ЗаполнитьПоляТабчасти("Товары", Новый Структура("СтранаПроисхождения, НомерГТД", СтранаПроисхождения, Неопределено));
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерДляСФ(Команда)
	ИнициироватьЗаполнениеНомераДляСФ(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСклад(Команда)
	Если Элементы.Товары.ВыделенныеСтроки.Количество()>0 Тогда
		СкладРазмещения = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора",,,,,, Новый ОписаниеОповещения("УстановитьСкладЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СкладРазмещения = Результат;
    Если ЗначениеЗаполнено(СкладРазмещения) Тогда
        УстановитьСкладСервер(СкладРазмещения);
    КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена(ДанныеТекущегоРаздела(Элементы.Разделы));
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходовСбор, АналитикаРасходовСбор, СтатьяРасходовШтраф, АналитикаРасходовШтраф");
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходовСбор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаможенныйСбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьяРасходовСбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходовСбор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаможенныйСбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходовШтраф.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаможенныйШтраф");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьяРасходовШтраф");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходовШтраф.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаможенныйШтраф");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазделыСуммаПошлины.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Разделы.СтавкаПошлины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Разделы.СуммаПошлины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазделыСуммаПошлины.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Разделы.СтавкаПошлины");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерДляСФ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НумероватьПоТоварам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазделыНомерДляСФ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НумероватьПоТоварам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	//
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере(Имя)
	
	ЭтаФорма["АналитикаРасходов"+Имя+"Обязательна"] = 
		ЗначениеЗаполнено(Объект["СтатьяРасходов"+Имя])
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект["СтатьяРасходов"+Имя], "КонтролироватьЗаполнениеАналитики");
		
	ЭтаФорма["АналитикаРасходовЗаказРеализация"+Имя] = 
		ЗначениеЗаполнено(Объект["СтатьяРасходов"+Имя])
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект["СтатьяРасходов"+Имя], "АналитикаРасходовЗаказРеализация");
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ВалютаПриИзмененииСервер(ВалютаСтарая, ВалютаНовая)
	ДатаДокумента = ДатаДокументаСервер(Объект.Дата);
	КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСтарая, ДатаДокумента);
	КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, ДатаДокумента);
	
	Для Каждого Раздел Из Объект.Разделы Цикл
		Раздел.ТаможеннаяСтоимость =
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Раздел.ТаможеннаяСтоимость, ВалютаСтарая, ВалютаНовая,
				КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
		ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	КонецЦикла;
	
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	ТекущийРаздел = -1;
	СтавкаПошлины = 0.;
	Для Каждого Товар Из Объект.Товары Цикл
		Если ТекущийРаздел <> Товар.НомерРаздела Тогда
			ТекущийРаздел = Товар.НомерРаздела;
			Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
			ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
		КонецЕсли;
		Товар.ТаможеннаяСтоимость =
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Товар.ТаможеннаяСтоимость, ВалютаСтарая, ВалютаНовая,
				КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	Объект.ТаможенныйСбор = 
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.ТаможенныйСбор, ВалютаСтарая, ВалютаНовая,
			КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
	Объект.ТаможенныйШтраф =
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.ТаможенныйШтраф, ВалютаСтарая, ВалютаНовая,
			КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоКурсуНаДату()
	
	ТекстВопроса = НСтр("ru = 'Таможенная декларация оформлена по поступлениям в иностранной валюте, пересчитать сумму по курсу на дату документа?'");
	
	СписокКнопок = Новый СписокЗначений();
	СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Пересчитать'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не пересчитывать'"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьСуммуПоКурсуНаДатуЗавершение", ЭтотОбъект), ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоКурсуНаДатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        ПересчетКурсаВалютыСервер();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчетКурсаВалютыСервер()

	Действия = Новый Структура();
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	НовыйКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
	ПараметрыНовогоКурса   = Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента,   НовыйКурс.Курс,   НовыйКурс.Кратность);

	ТаможеннаяДекларацияИмпортТовары = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,ДокументПоступления,Количество");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаможеннаяДекларацияИмпортТовары", ТаможеннаяДекларацияИмпортТовары);
	Запрос.УстановитьПараметр("КодВалюты", "643");
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаможеннаяДекларацияИмпортТовары.Номенклатура,
	               |	ТаможеннаяДекларацияИмпортТовары.Характеристика,
	               |	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления,
	               |	ТаможеннаяДекларацияИмпортТовары.Количество
	               |ПОМЕСТИТЬ ТаможеннаяДекларацияИмпортТовары
	               |ИЗ
	               |	&ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПриобретениеТоваровУслугТовары.Номенклатура,
	               |	ПриобретениеТоваровУслугТовары.Характеристика,
	               |	СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество,
	               |	ПриобретениеТоваровУслугТовары.Ссылка КАК ДокументПоступления,
	               |	СУММА(ПриобретениеТоваровУслугТовары.Сумма) КАК Сумма
	               |ПОМЕСТИТЬ ПоступлениеТоваров
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
	               |			ТаможеннаяДекларацияИмпортТовары.Характеристика КАК Характеристика,
	               |			ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления,
	               |			СУММА(ТаможеннаяДекларацияИмпортТовары.Количество) КАК Количество
	               |		ИЗ
	               |			ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ТаможеннаяДекларацияИмпортТовары.ДокументПоступления,
	               |			ТаможеннаяДекларацияИмпортТовары.Характеристика,
	               |			ТаможеннаяДекларацияИмпортТовары.Номенклатура) КАК ТДИТсводная
	               |		ПО ПриобретениеТоваровУслугТовары.Номенклатура = ТДИТсводная.Номенклатура
	               |			И ПриобретениеТоваровУслугТовары.Характеристика = ТДИТсводная.Характеристика
	               |			И ПриобретениеТоваровУслугТовары.Ссылка = ТДИТсводная.ДокументПоступления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриобретениеТоваровУслугТовары.Ссылка,
	               |	ПриобретениеТоваровУслугТовары.Номенклатура,
	               |	ПриобретениеТоваровУслугТовары.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления,
	               |	ПриобретениеТоваровУслуг.Валюта КАК Валюта
	               |ИЗ
	               |	ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	               |		ПО ТаможеннаяДекларацияИмпортТовары.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	               |ГДЕ
	               |	НЕ ПриобретениеТоваровУслуг.Валюта.Код = &КодВалюты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления,
	               |	ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
	               |	ТаможеннаяДекларацияИмпортТовары.Характеристика КАК Характеристика,
	               |	ТаможеннаяДекларацияИмпортТовары.Количество * ПоступлениеТоваров.Сумма / ПоступлениеТоваров.Количество КАК Сумма,
	               |	ТаможеннаяДекларацияИмпортТовары.Количество
	               |ИЗ
	               |	ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоступлениеТоваров КАК ПоступлениеТоваров
	               |		ПО ТаможеннаяДекларацияИмпортТовары.Номенклатура = ПоступлениеТоваров.Номенклатура
	               |			И ТаможеннаяДекларацияИмпортТовары.Характеристика = ПоступлениеТоваров.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоступлениеТоваров.Номенклатура,
	               |	ПоступлениеТоваров.Характеристика,
	               |	ПоступлениеТоваров.Сумма,
	               |	ПоступлениеТоваров.ДокументПоступления,
	               |	ПоступлениеТоваров.Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаможеннаяДекларацияИмпортТовары.Номенклатура КАК Номенклатура,
	               |		ТаможеннаяДекларацияИмпортТовары.Характеристика КАК Характеристика,
	               |		ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления,
	               |		СУММА(ТаможеннаяДекларацияИмпортТовары.Количество) КАК КоличествоСумма
	               |	ИЗ
	               |		ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТаможеннаяДекларацияИмпортТовары.Номенклатура,
	               |		ТаможеннаяДекларацияИмпортТовары.ДокументПоступления,
	               |		ТаможеннаяДекларацияИмпортТовары.Характеристика) КАК ТДИТСвернутая
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаможеннаяДекларацияИмпортТовары КАК ТаможеннаяДекларацияИмпортТовары
	               |		ПО ТДИТСвернутая.Номенклатура = ТаможеннаяДекларацияИмпортТовары.Номенклатура
	               |			И ТДИТСвернутая.Характеристика = ТаможеннаяДекларацияИмпортТовары.Характеристика
	               |			И ТДИТСвернутая.ДокументПоступления = ТаможеннаяДекларацияИмпортТовары.ДокументПоступления
	               |			И ТДИТСвернутая.КоличествоСумма <> ТаможеннаяДекларацияИмпортТовары.Количество
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоступлениеТоваров КАК ПоступлениеТоваров
	               |		ПО ТДИТСвернутая.Номенклатура = ПоступлениеТоваров.Номенклатура
	               |			И ТДИТСвернутая.Характеристика = ПоступлениеТоваров.Характеристика
	               |			И ТДИТСвернутая.ДокументПоступления = ПоступлениеТоваров.ДокументПоступления
	               |			И ТДИТСвернутая.КоличествоСумма = ПоступлениеТоваров.Количество
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоступлениеТоваров.Номенклатура,
	               |	ПоступлениеТоваров.ДокументПоступления,
	               |	ПоступлениеТоваров.Характеристика,
	               |	ПоступлениеТоваров.Сумма,
	               |	ПоступлениеТоваров.Количество";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[2].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПоступления 	= Результат[2].Выгрузить();
	ТаблицаСуммыПоступления = Результат[3].Выгрузить();
	ТаблицаКорректировок 	= Результат[4].Выгрузить();
	
	ТекущийРаздел = -1;
	Для Каждого Товар Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Товар.ДокументПоступления) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийРаздел <> Товар.НомерРаздела Тогда
			ТекущийРаздел = Товар.НомерРаздела;
			Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
			ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
		КонецЕсли;
		СтрокаВалюта = РеквизитыПоступления.Найти(Товар.ДокументПоступления,"ДокументПоступления");
		ВалютаПоступления = ?(СтрокаВалюта = Неопределено, ВалютаДокумента, СтрокаВалюта.Валюта);
		ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПоступления, Объект.Дата);
		ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность", ВалютаПоступления, ТекущийКурс.Курс, ТекущийКурс.Кратность);
		
		Отбор = Новый Структура("Номенклатура,Характеристика,ДокументПоступления,Количество");
		ЗаполнитьЗначенияСвойств(Отбор,Товар);
		СтрокиПоступления = ТаблицаСуммыПоступления.НайтиСтроки(Отбор);
		Если СтрокиПоступления.Количество() > 0 Тогда
			СтрокаПоступления = СтрокиПоступления[0];
			Товар.ТаможеннаяСтоимость = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаПоступления.Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
			ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаКорректировок.Количество() > 0 Тогда
		
		ТекущийРаздел = -1;
		Для каждого ТоварКор Из ТаблицаКорректировок Цикл
			
			СуммаКРаспределению = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТоварКор.Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
			
			Отбор = Новый Структура("Номенклатура,Характеристика,ДокументПоступления");
			ЗаполнитьЗначенияСвойств(Отбор,ТоварКор);
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
			
			Если ТекущийРаздел <> НайденныеСтроки[0].НомерРаздела Тогда
				ТекущийРаздел = НайденныеСтроки[0].НомерРаздела;
				Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
				ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
			КонецЕсли;
			СтрокаВалюта = РеквизитыПоступления.Найти(НайденныеСтроки[0].ДокументПоступления,"ДокументПоступления");
			ВалютаПоступления = ?(СтрокаВалюта = Неопределено, ВалютаДокумента, СтрокаВалюта.Валюта);
			ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаПоступления, Объект.Дата);
			ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность", ВалютаПоступления, ТекущийКурс.Курс, ТекущийКурс.Кратность);
			
			ТаблицаТаможеннойСтоимости = Объект.Товары.Выгрузить(НайденныеСтроки, "ТаможеннаяСтоимость");
			ТаблицаТаможеннойСтоимости.Свернуть(,"ТаможеннаяСтоимость");

			НайденныеСтроки[0].ТаможеннаяСтоимость = НайденныеСтроки[0].ТаможеннаяСтоимость + СуммаКРаспределению - ТаблицаТаможеннойСтоимости[0].ТаможеннаяСтоимость;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтроки[0], Действия, Неопределено);
			ПересчитатьПоля(НайденныеСтроки[0], "СуммаПошлины, СуммаНДС", ДанныеРаздела);
		КонецЦикла; 
		
	КонецЕсли;
	
	КопияТовар = Объект.Товары.Выгрузить(,"НомерРаздела,ТаможеннаяСтоимость");
	КопияТовар.Свернуть("НомерРаздела","ТаможеннаяСтоимость");
	
	Для Каждого Раздел Из Объект.Разделы Цикл
		СтрокаРаздела = КопияТовар.Найти(Раздел.НомерРаздела,"НомерРаздела");
		Если СтрокаРаздела <> Неопределено Тогда
			Раздел.ТаможеннаяСтоимость = СтрокаРаздела.ТаможеннаяСтоимость;
			ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиОтличнойВалюты()

	ДокументыПоступления = Объект.Товары.Выгрузить(,"ДокументПоступления");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаПоступлений",ДокументыПоступления);
	Запрос.УстановитьПараметр("КодВалюты", "643");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоступлений.ДокументПоступления
		|ПОМЕСТИТЬ ТаблицаПоступлений
		|ИЗ
		|	&ТаблицаПоступлений КАК ТаблицаПоступлений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоступлений.ДокументПоступления
		|ИЗ
		|	ТаблицаПоступлений КАК ТаблицаПоступлений
		|ГДЕ
		|	НЕ ТаблицаПоступлений.ДокументПоступления.Валюта.Код = &КодВалюты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыПоВалюте()
	Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента <> Объект.Валюта Тогда
		ВалютаПриИзмененииСервер(ВалютаДокумента, Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	ВалютаДокумента = Объект.Валюта;
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Поставщик, Объект.КонтрагентПоставщика);
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОбновитьИнформациюПоПоступлениям();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПоставщикаПриИзмененииСервер()
	
	ОбновитьИнформациюПоПоступлениям();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    		= Объект.Организация;
		СтруктураПараметров.БанковскийСчет		= Объект.БанковскийСчетОрганизации;
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаСервере
Процедура ВариантОформленияПриИзмененииСервер(ВалютаИзменена)
	
	ЗаполнитьДанныеФормы();
	
	Если РасчетыСТаможней Тогда
		
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
		Объект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		
		Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента <> Объект.Валюта Тогда
			ВалютаПриИзмененииСервер(ВалютаДокумента, Объект.Валюта);
			ВалютаИзменена = Истина;
		КонецЕсли;
		
		ВалютаВзаиморасчетовПриИзмененииСервер();
		
		ЗаполнитьПорядокОплатыПоУмолчанию();
		
	Иначе
		
		НастроитьЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоПартнеру(Объект, Объект.Партнер);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.Соглашение);
		Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	ЗаполнитьДоговорПоУмолчанию();
	НастроитьЭлементыФормы();
	ОчиститьРасшифровкуПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьЗаполнениеНомераДляСФ(БезВопроса = Ложь)
	Если ?(Объект.НумероватьПоТоварам, Объект.Товары, Объект.Разделы).Количество() > 0 И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
		
		Если БезВопроса Тогда
			ТекущийРаздел = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
			ЗаполнитьНомерДляСФ(ТекущийРаздел);
		Иначе
			ТекстВопроса = НСтр("ru = 'Заполнить колонку с № декларации для счетов-фактур?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ИнициироватьЗаполнениеНомераДляСФЗавершение", ЭтотОбъект),
				ТекстВопроса, 
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьЗаполнениеНомераДляСФЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатВопроса = РезультатВопроса;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущийРаздел = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
		ЗаполнитьНомерДляСФ(ТекущийРаздел);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		РеквизитыПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.ДокументПоступления, "ЗакупкаПодДеятельность, ХозяйственнаяОперация");
		ТекущаяСтрока.ЗакупкаПодДеятельность = РеквизитыПоступления.ЗакупкаПодДеятельность;
		ТекущаяСтрока.ХозяйственнаяОперация  = РеквизитыПоступления.ХозяйственнаяОперация;
	КонецЕсли;
	
	ОбновитьИнформациюПоПоступлениям();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКомандФормыНаСервере

&НаСервере
Процедура РаспределитьНаТоварыСервер()
	Отбор = Новый Структура("НомерРаздела");
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	Для Каждого Раздел Из Разделы Цикл
		Отбор.НомерРаздела = Раздел.НомерРаздела;
		ТоварыРаздела = Объект.Товары.Выгрузить(Отбор);
		
		Если ТоварыРаздела.Количество() > 0 Тогда
			Коэффициенты = ТоварыРаздела.ВыгрузитьКолонку("ТаможеннаяСтоимость");
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.ТаможеннаяСтоимость, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "ТаможеннаяСтоимость");
			КонецЕсли;
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.СуммаПошлины, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "СуммаПошлины");
			КонецЕсли;
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.СуммаНДС, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Товар Из ТоварыРаздела Цикл
			ОбъектТовар = Объект.Товары[Товар.НомерСтроки-1];
			Объект.Товары[Товар.НомерСтроки-1].ТаможеннаяСтоимость = ?(Раздел.ТаможеннаяСтоимость > 0., Товар.ТаможеннаяСтоимость, 0.);
			Объект.Товары[Товар.НомерСтроки-1].СуммаПошлины = ?(Раздел.СуммаПошлины > 0., Товар.СуммаПошлины, 0.);
			Объект.Товары[Товар.НомерСтроки-1].СуммаНДС = ?(Раздел.СуммаНДС > 0., Товар.СуммаНДС, 0.);
		КонецЦикла;
	КонецЦикла;
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоТоварамСервер()
	Отбор = Новый Структура("НомерРаздела");
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	Для Каждого Раздел Из Разделы Цикл
		Отбор.НомерРаздела = Раздел.НомерРаздела;
		ТоварыРаздела = Объект.Товары.НайтиСтроки(Отбор);
		Если ТоварыРаздела.Количество() > 0 Тогда
			Раздел.ТаможеннаяСтоимость = 0.;
			ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
			Для Каждого Товар Из ТоварыРаздела Цикл
				Раздел.ТаможеннаяСтоимость = Раздел.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
				Раздел.СуммаПошлины = Раздел.СуммаПошлины + Товар.СуммаПошлины;
				Раздел.СуммаНДС = Раздел.СуммаНДС + Товар.СуммаНДС;
			КонецЦикла;
			ПересчитатьПоля(Раздел, "СтавкаПошлины", Раздел);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеРаздела, УдалятьСтроки, ИмяАдреса = Неопределено, ИмяТабчасти=Неопределено, ЗаполнятьСтоимость = Ложь)
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	Если УдалятьСтроки Тогда
		СтрокиУдаления = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", ДанныеРаздела.НомерРаздела));
		Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
			Объект.Товары.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяАдреса<>Неопределено Тогда
		БуферТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение[ИмяАдреса]);
		Если ИмяТабчасти<>Неопределено Тогда
			БуферТоваров = БуферТоваров[ИмяТабчасти];
		КонецЕсли;
	Иначе
		БуферТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	КонецЕсли;
	
	Для каждого ЭлементБуфера Из БуферТоваров Цикл
		Товар = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(
			Товар, 
			ЭлементБуфера);
		Если ЗаполнятьСтоимость Тогда
			Товар.ТаможеннаяСтоимость = ЭлементБуфера.Сумма;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Товар, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОбновитьИнформациюПоПоступлениям();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура УстановитьСтоимостьСервер(Знач ВидЦены = Неопределено, ОтборТоваров = Неопределено)
	Если ОтборТоваров = Неопределено Тогда
		ТоварыЗаполнения = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	Иначе
		ТоварыЗаполнения = Объект.Товары.НайтиСтроки(ОтборТоваров);
	КонецЕсли;
	ВидЦены = ?(ЗначениеЗаполнено(ВидЦены), ВидЦены, Справочники.ВидыЦенПоставщиков.ПустаяСсылка());
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения",    "Цена");
	ПараметрыЗаполнения.Вставить("Дата",              ДатаДокументаСервер(Объект.Дата));
	ПараметрыЗаполнения.Вставить("Валюта",            Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦеныПоставщика", ВидЦены);
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(Объект.Товары, ТоварыЗаполнения, ПараметрыЗаполнения);
	
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	ТекущийРаздел = -1;
	СтавкаПошлины = 0.;
	Для Каждого Товар Из ТоварыЗаполнения Цикл
		Если ТекущийРаздел <> Товар.НомерРаздела Тогда
			ТекущийРаздел = Товар.НомерРаздела;
			Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
			ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
		КонецЕсли;
		Товар.ТаможеннаяСтоимость = Товар.КоличествоУпаковок * Товар.Цена;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьТаможеннуюСтоимостьТоваров(ДанныеРаздела,Товары)

	СтрокиТоваров = Товары.НайтиСтроки(Новый структура("НомерРаздела", ДанныеРаздела.НомерРаздела));
	
	Для Каждого ТекСтрока Из СтрокиТоваров Цикл
		
		ПересчитатьПоля(ТекСтрока,"СуммаПошлины",ДанныеРаздела);
		
	КонецЦикла;
	
КонецПроцедуры	
	
#КонецОбласти

#Область ПоддержкаТаблицФормы

&НаКлиенте
Процедура АктивироватьРаздел()
	РазделОтбора = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
	ПоРазделам = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	Товары = Элементы.Товары;
	Если ПоРазделам И (Товары.ОтборСтрок = Неопределено Или Товары.ОтборСтрок.НомерРаздела <> РазделОтбора) Тогда // включить отбор
		Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерРаздела", РазделОтбора);
	ИначеЕсли Не ПоРазделам И Товары.ОтборСтрок<>Неопределено Тогда // выключить отбор
		Товары.ОтборСтрок = Неопределено;
	КонецЕсли; // ничего не менять
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйНомерРаздела(Разделы)
	МаксимальныйНомер = 0;
	Для Каждого Раздел Из Разделы Цикл
		Если Раздел.НомерРаздела > МаксимальныйНомер Тогда
			МаксимальныйНомер = Раздел.НомерРаздела;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйНомер + 1;
КонецФункции

&НаСервере
Процедура ОчиститьНомераРазделовТоваров(СтарыеНомера)
	Для Каждого Товар Из Объект.Товары Цикл
		Если СтарыеНомера[Товар.НомерРаздела]<>Неопределено Тогда
			Товар.НомерРаздела = 0;
		КонецЕсли;
	КонецЦикла;
	Выбор = Элементы.ТоварыНомерРаздела.СписокВыбора;
	Для Каждого СтарыйНомер Из СтарыеНомера Цикл
		НайденныйЭлемент = Выбор.НайтиПоЗначению(СтарыйНомер.Значение);
		Выбор.Удалить(НайденныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьЭлементВСпискеВыбора(Выбор, СтароеЗначение, НовоеЗначение, Формат);
	ЭлементВыбора = Выбор.НайтиПоЗначению(СтароеЗначение);
	Если Неопределено <> ЭлементВыбора Тогда
		Выбор.Удалить(ЭлементВыбора);
	КонецЕсли;
	ЭлементВыбора = Выбор.НайтиПоЗначению(СтароеЗначение);
	Если Неопределено = ЭлементВыбора Тогда
		Выбор.Добавить(НовоеЗначение, Формат(НовоеЗначение, Формат));
	КонецЕсли;
	Выбор.СортироватьПоЗначению();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеТекущегоРаздела(Разделы)
	ДанныеРаздела = ДанныеПустогоРаздела();
	Если Разделы.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, Разделы.ТекущиеДанные);
	КонецЕсли;
	Возврат ДанныеРаздела;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПустогоРаздела()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерРаздела",        0);
	СтруктураВозврата.Вставить("СтавкаПошлины",       0.);
	СтруктураВозврата.Вставить("СтавкаНДС",           Неопределено);
	СтруктураВозврата.Вставить("Склад",               Неопределено);
	СтруктураВозврата.Вставить("СтранаПроисхождения", Неопределено);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьПоля(ТекущиеДанные, Знач ПоляПересчета, Знач ДанныеРаздела) Экспорт
	ПоляПересчета = НРег(ПоляПересчета);
	Если СтрНайти(ПоляПересчета, "суммапошлины")>0 Тогда
		ТекущиеДанные.СуммаПошлины = ТекущиеДанные.ТаможеннаяСтоимость * ДанныеРаздела.СтавкаПошлины / 100.;
	ИначеЕсли СтрНайти(ПоляПересчета, "ставкапошлины")>0 Тогда
		ТекущиеДанные.СтавкаПошлины =
			100. * ?(ТекущиеДанные.ТаможеннаяСтоимость=0., 0., ТекущиеДанные.СуммаПошлины / ТекущиеДанные.ТаможеннаяСтоимость);
	КонецЕсли;
	Если СтрНайти(ПоляПересчета, "суммандс")>0 Тогда
		ТекущиеДанные.СуммаНДС =
			ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
				ТекущиеДанные.ТаможеннаяСтоимость + ТекущиеДанные.СуммаПошлины,
				ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ДанныеРаздела.СтавкаНДС), Ложь);
	КонецЕсли;
КонецПроцедуры

// ПоляЗначения - Структура("Поле1, Поле2, ...", Значение1, Значение2, ...)
&НаСервере
Процедура ЗаполнитьПоляТабчасти(ИмяТабчасти, ПоляЗначения, ОтборТабчасти = Неопределено)
	Если ОтборТабчасти = Неопределено Тогда
		Строки =
			ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект[ИмяТабчасти], Элементы[ИмяТабчасти].ВыделенныеСтроки);
	Иначе
		Строки = Объект[ИмяТабчасти].НайтиСтроки(ОтборТабчасти);
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьЗначенияСвойств(Строка, ПоляЗначения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерДляСФ(ТекущийРаздел)
	Табчасть = ?(Объект.НумероватьПоТоварам, Объект.Товары, Объект.Разделы);
	ИмяПоляДополнения = ?(Объект.НумероватьПоТоварам, "НомерСтроки",  "НомерРаздела");
	НомерДекларации = СокрЛП(Объект.НомерДекларации);
	Для Каждого Строка Из Табчасть Цикл
		Строка.НомерДляСФ = НомерДляСФ(НомерДекларации, Строка[ИмяПоляДополнения]);
	КонецЦикла;
	// изменились номера для с/ф - очистим ссылки на номера ГТД
	ОтборТоваров = ?(Объект.НумероватьПоТоварам, Новый Структура("НомерРаздела", ТекущийРаздел), Новый Структура);
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерГТД", Неопределено), ОтборТоваров);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерРазделаУникальный(Разделы, НомерРаздела)
	НомерВстречался = Ложь;
	Для Каждого Раздел Из Разделы Цикл
		Если НомерВстречался И (Раздел.НомерРаздела = НомерРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
		НомерВстречался = НомерВстречался Или (Раздел.НомерРаздела = НомерРаздела);
	КонецЦикла;
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "")
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьВХранилище(ИмяТабчасти, ИменаПолей, ПараметрыОтбора)
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабчасти].Выгрузить(ПараметрыОтбора, ИменаПолей), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЗаполнитьДанныеФормы(Истина);
	ЗаполнитьДополнительныеПризнакиТоваров();
	НастроитьЭлементыФормы();
	НастроитьВыборРазделов();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	// НомерРаздела.МаксимальноеЗначение ДОЛЖНО быть задано для нормальной работы.
	НомерРазделаПредел = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ТабличныеЧасти.Разделы.Реквизиты.НомерРаздела.МаксимальноеЗначение;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект,
																									Документы.ТаможеннаяДекларацияИмпорт));
	
	СтатьяРасходовПриИзмененииНаСервере("Сбор");
	СтатьяРасходовПриИзмененииНаСервере("Штраф");
	
	ОбновитьИнформациюПоПоступлениям();
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.Валюта, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУстановкеПодтвержденияОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "" Тогда
		Элементы.ДекорацияПодтверждениеОплаты.Заголовок = Результат;
	Иначе
		Элементы.ДекорацияПодтверждениеОплаты.Заголовок = ТекстСостояниеОплатыНДСВБюджет(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСостояниеОплатыНДСВБюджет(СчетФактура)
	
	Возврат РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ТекстСостояниеОплатыНДСВБюджет(СчетФактура);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормы(ПриЧтенииСоздании = Ложь)
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	РасчетыСТаможней = (Объект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	СтатусДокумента = Объект.Статус;
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь , Не ПриЧтенииСоздании, ОбновитьФорму, Элементы.ПорядокРасчетов);;
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	Элементы.ДекорацияПодтверждениеОплаты.Заголовок = ТекстСостояниеОплатыНДСВБюджет(Объект.Ссылка);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазностиИтогов(Разделы, Товары)
	Возврат Новый Структура("РазностьСтоимостей, РазностьПошлин, РазностьНДС",
		Разделы.Итог("ТаможеннаяСтоимость") - Товары.Итог("ТаможеннаяСтоимость"),
		Разделы.Итог("СуммаПошлины") - Товары.Итог("СуммаПошлины"),
		Разделы.Итог("СуммаНДС") - Товары.Итог("СуммаНДС")); // клиент-серверные оптимизации
КонецФункции

&НаСервере
Процедура УстановитьДействияДополнительныхПризнаковТоваров(Действия)
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЗапасов()
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.Товары.ТекущиеДанные.Номенклатура"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Поставщик", "Объект.Поставщик"));
	КонецЕсли;
	Элементы.ТоварыВидЗапасов.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеПризнакиТоваров()
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормаОплатыСписокВыбора()
	Список = Элементы.ФормаОплаты.СписокВыбора;
	Список.Очистить();
	Список.Добавить(Перечисления.ФормыОплаты.Безналичная);
	Если Не РасчетыСТаможней Тогда
		Список.Добавить(Перечисления.ФормыОплаты.Наличная);
		Список.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), НСтр("ru='Любая'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	Перем ВсеРеквизиты;
	Перем РеквизитыОперации;
	
	Элементы.Контрагент.Заголовок = ?(РасчетыСТаможней, НСтр("ru='Контрагент таможни'"), НСтр("ru='Контрагент брокера'"));
	
	ПараметрыВыбораПартнер = Новый Массив;
	Если РасчетыСТаможней Тогда
		ПараметрыВыбораПартнер.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", РасчетыСТаможней));
	Иначе
		ПараметрыВыбораПартнер.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПартнер);
	
	Элементы.ГруппаРасходы.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	Элементы.Валюта.ТолькоПросмотр = РасчетыСТаможней;
	Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = РасчетыСТаможней;

	Элементы.Соглашение.Доступность = Не РасчетыСТаможней;
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.Договор.ОтметкаНезаполненного =
		Элементы.Договор.Доступность И ЗначениеЗаполнено(Объект.Соглашение) И Не ЗначениеЗаполнено(Объект.Договор);
	
	ЗаполнитьФормаОплатыСписокВыбора();
	
	НастроитьСервисыЗаполнения(Элементы, Объект);
	УстановитьПараметрыВыбораВидаЗапасов();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() 
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьДатыПлатежа(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьПорядкаОплаты(Этаформа);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВыборРазделов()
	Выбор = Элементы.ТоварыНомерРаздела.СписокВыбора;
	Выбор.Очистить();
	Для Каждого Раздел Из Объект.Разделы Цикл
		Выбор.Добавить(Раздел.НомерРаздела, Формат(Раздел.НомерРаздела, Элементы.ТоварыНомерРаздела.Формат));
	КонецЦикла;
	Выбор.СортироватьПоЗначению();
	Выбор.Вставить(0, 0, Формат(0, Элементы.ТоварыНомерРаздела.Формат));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСервисыЗаполнения(Элементы, Объект)
	ПоРазделам = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	
	Элементы.ТоварыПодобратьИзПоступлений.Доступность = ПоРазделам;
	Элементы.ТоварыПодобратьТовары.Доступность = ПоРазделам;
	Элементы.ТоварыПодобратьИзОформления.Доступность = ПоРазделам;
	
	Элементы.ТоварыЗаполнитьНомерРаздела.Доступность = Не ПоРазделам;
	Элементы.ТоварыУстановитьНомерРаздела.Доступность = Не ПоРазделам;
	
	Элементы.РазделыУстановитьНомерДляСФ.Доступность = Не Объект.НумероватьПоТоварам;
	Элементы.ТоварыУстановитьНомерДляСФ.Доступность = Объект.НумероватьПоТоварам;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	ОперацииОтбораСоглашенийДоговоров = Документы.ТаможеннаяДекларацияИмпорт.ОперацииОтбораСоглашенийДоговоров();
	ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
	ДопПараметры.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		Объект, ОперацииОтбораСоглашенийДоговоров, ДопПараметры);
	Если (Договор <> Объект.Договор) Тогда
		Объект.Договор = Договор;
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДатаДокумента(ОбъектДата)
	Возврат ?(ЗначениеЗаполнено(ОбъектДата), ОбъектДата, ОбщегоНазначенияКлиент.ДатаСеанса());
КонецФункции

&НаСервере
Функция ДатаДокументаСервер(ОбъектДата)
	Возврат ?(ЗначениеЗаполнено(ОбъектДата), ОбъектДата, ТекущаяДатаСеанса());
КонецФункции

&НаКлиенте
Процедура ВыбратьВидЦеныПоставщика(ВидЦеныПоставщика,ДляНезаполненныхСтрок)
	
	ВидЦеныПоставщика = ВидЦеныПоставщикаПоУмолчанию(ДатаДокумента(Объект.Дата), Объект.Поставщик);
	
	Если ВидЦеныПоставщика = Неопределено Тогда
		ПараметрыПодбора = Новый Структура("Отбор",
		                                   Новый Структура("Владелец", Объект.Поставщик));
		ОткрытьФорму("Справочник.ВидыЦенПоставщиков.ФормаВыбора", 
			ПараметрыПодбора,,,,,
			Новый ОписаниеОповещения("ВыбратьВидЦеныПоставщикаЗавершение",ЭтотОбъект, Новый Структура("ДляНезаполненныхСтрок",ДляНезаполненныхСтрок)),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		УстановитьСтоимость(ВидЦеныПоставщика, ДляНезаполненныхСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидЦеныПоставщикаЗавершение(Результат, ДопПараметры) Экспорт
	
	ВидЦеныПоставщика = Результат;
	ДляНезаполненныхСтрок = ДопПараметры.ДляНезаполненныхСтрок;
	
	Если ЗначениеЗаполнено(ВидЦеныПоставщика) Тогда
		УстановитьСтоимость(ВидЦеныПоставщика, ДляНезаполненныхСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
ПРоцедура УстановитьСтоимость(ВидЦеныПоставщика, ДляНезаполненныхСтрок)
	Если ДляНезаполненныхСтрок Тогда
		УстановитьСтоимостьСервер(ВидЦеныПоставщика, Новый Структура("ТаможеннаяСтоимость", 0.));
	Иначе
		УстановитьСтоимостьСервер(ВидЦеныПоставщика);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидЦеныПоставщикаПоУмолчанию(ДатаДокумента, Партнер)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Цены.ВидЦеныПоставщика
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков КАК Цены
		|ГДЕ
		|	Цены.Партнер = &Партнер
		|	И Цены.Период <= КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)
		|");
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Выборка.Количество() = 0 Тогда
		Возврат Справочники.ВидыЦенПоставщиков.ПустаяСсылка();
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ВидЦеныПоставщика;
	КонецЦикла;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерДляСФ(НомерДекларации, НомерДополнения)
	Возврат НомерДекларации + "/" + НомерДополнения;
КонецФункции

&НаСервере
Процедура УстановитьСкладСервер(СкладРазмещения)
	
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("Склад", СкладРазмещения));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоПоступлениям()
	
	СписокПоступлений.Очистить();
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДокументПоступления) И СписокПоступлений.НайтиПоЗначению(ТекСтрока.ДокументПоступления) = Неопределено Тогда
			СписокПоступлений.Добавить(ТекСтрока.ДокументПоступления);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПоступлений.Количество() = 1 Тогда
		ПоступлениеТоваров = СписокПоступлений[0].Значение;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() > 1 Тогда
		НадписьЗаголовокПоступления = СтрЗаменить(
			НСтр("ru='Всего документов: %КоличествоПоступлений%'"), 
			"%КоличествоПоступлений%",
			СписокПоступлений.Количество());
		ПоступлениеТоваров = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() < 1 Тогда
		ПоступлениеТоваров = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() <= 1 Тогда
		Элементы.СтраницыПоступления.ТекущаяСтраница = Элементы.СтраницаПоступление;
	Иначе
		Элементы.СтраницыПоступления.ТекущаяСтраница = Элементы.СтраницаПоступления;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
																									ВалютаОплаты);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(ДанныеРаздела)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры",НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	БуферТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	Для каждого ЭлементБуфера Из БуферТоваров Цикл
		Товар = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера);
		
		ЗаполнитьЗначенияСвойств(Товар, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения, Склад");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки")
		И НЕ Элементы.ТоварыПоказатьВсеТовары.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не Элементы.ТоварыПоказатьВсеТовары.Пометка);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОчиститьРасшифровкуПлатежа()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеМеханизмыБсп

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
