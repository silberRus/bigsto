// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.ОтчетКомиссионера);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		РассчитыватьВознаграждение = Истина;
		
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	УчетНДСУТ.ЗаполнитьСписокВыбораНалогообложенияПродажи(Элементы.НалогообложениеНДС, Перечисления.ХозяйственныеОперации.ОтчетКомиссионера);
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	Элементы.ТоварыЭтоНекорректныйКонтрагент.Видимость = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СпособРасчетаВознаграждения = Объект.СпособРасчетаВознаграждения;

	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоТоварамПереданнымНаКомиссию" Тогда
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураКомиссионеру.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураКомиссионеру.Форма.ФормаСпискаПоОтчетуКомиссионера" Тогда
		
		НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		
		НастроитьПредставлениеСчетаФактурыПолученный();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	Если ИмяСобытия = "ЗачтенаОплата" 
		И Параметр = Объект.Ссылка 
		И НЕ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, корректность графика оплаты по заказу
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		СуммаПродажи      = Объект.Товары.Итог("СуммаПродажи");
		КоличествоЭтапов  = Объект.ЭтапыГрафикаОплаты.Количество();
		
		Если СуммаПродажи = 0 И КоличествоЭтапов > 0 Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			
		ИначеЕсли СуммаПродажи <> СуммаЭтаповОплаты Тогда
			
			ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами 
				И ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
			ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
			
			Если КоличествоЭтапов = 0 И Не (ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен) Тогда
				
				ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
					Объект,
					Неопределено,
					Неопределено,
					СуммаПродажи);
			Иначе
				ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен);
			КонецЕсли;
			
			ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
			
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
		
		Если РассчитыватьВознаграждение Тогда
		
			Отказ = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
				Новый ОписаниеОповещения("ПередЗаписьюНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ЭтаФорма);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
			
	НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтчетКомиссионера", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПересчитыватьЦены = Ложь;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение)
		И ЗначениеЗаполнено(Объект.Валюта)
		И Объект.Товары.Количество() <> 0 Тогда
	
		ТекстВопроса = НСтр("ru='Перезаполнить цены?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ПересчитыватьЦены", ПересчитыватьЦены)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;

	ДатаПриИзмененииФрагмент(ПересчитыватьЦены);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
	ПересчитыватьЦены = ДополнительныеПараметры.ПересчитыватьЦены;
    
    Если Ответ <> КодВозвратаДиалога.Нет Тогда
        ПересчитыватьЦены = Истина;
    КонецЕсли;
    
    ДатаПриИзмененииФрагмент(ПересчитыватьЦены);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииФрагмент(Знач ПересчитыватьЦены)
    
    ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
    
    Если ПересчитыватьЦены Тогда
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении()
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		КомиссионнаяТорговляКлиент.ПроверитьНеобходимостьПересчетаВВалютуОтчетыПоКомиссии(
			Новый ОписаниеОповещения("ВалютаПриИзмененииВопросПересчитатьВалютуЗавершение", ЭтотОбъект),
			Объект,
			ВалютаДокумента);
		
	Иначе
		ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииВопросПересчитатьВалютуЗавершение(ПересчитатьВалюту, ДополнительныеПараметры) Экспорт
	
	ВалютаПриИзмененииСервер(
		Объект.Валюта,
		ПересчитатьВалюту);
		
	ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	
	ВалютаДокумента = Объект.Валюта;
	ЗаполнитьПорядокОплатыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПартнерПриИзмененииСервер();
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер();
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСписокСчетовФактурКомиссионеруНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Список счетов-фактур доступен только после записи документа, провести документ?'");
		КодОтвета = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ТекстСписокСчетовФактурКомиссионеруНажатиеПослеВопроса", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьСписокСчетовФактурКомиссионеру();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		НалогообложениеИзСоглашения = Ложь;
		Возврат;
	КонецЕсли;
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация       = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоРезультатамИнвентаризацииПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
		Новый ОписаниеОповещения("СпособРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	ИначеЕсли НЕ Объект.СуммаВознаграждения = 0
			И Объект.СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Объект.СпособРасчетаВознаграждения = СпособРасчетаВознаграждения;
	КонецЕсли;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	СпособРасчетаВознагражденияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СпособРасчетаВознаграждения = Объект.СпособРасчетаВознаграждения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВознагражденияПриИзменении(Элемент)
	
	КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
		Новый ОписаниеОповещения("ПроцентВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	УслугаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	КомиссионнаяТорговляКлиент.СтавкаНДСВознагражденияПриИзменении(Объект, ПроцентНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержатьВознаграждениеПриИзменении(Элемент)
	
	Элементы.ЗачетОплатыПоВознаграждению.Доступность = Не Объект.УдержатьВознаграждение И Объект.СуммаВознаграждения > 0;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		ПересчитатьОстаткиПоДаннымУчетаСервер(ТекущаяСтрока.НомерСтроки);
		ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокУчет;
	Иначе

		КоличествоДоПересчета = ТекущаяСтрока.Количество;
		
		КомиссионнаяТорговляКлиент.ОтчетКомиссионераТоварыУпаковкаПриИзменении(Объект, ТекущаяСтрока,
			ИспользоватьСоглашенияСКлиентами, КэшированныеЗначения);
		
		Если ТекущаяСтрока.Количество <> КоличествоДоПересчета И ТекущаяСтрока.Количество <> 0 Тогда
			ТекущаяСтрока.КоличествоУпаковокУчет = Окр(ТекущаяСтрока.КоличествоУпаковокУчет * КоличествоДоПересчета / ТекущаяСтрока.Количество, 2, 1);
			ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);

	РассчитыватьВознаграждение = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КомиссионнаяТорговляКлиент.ОтчетКомиссионераТоварыКоличествоУпаковокПриИзменении(Объект, ТекущаяСтрока, КэшированныеЗначения);;

	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействий, Объект);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПродажиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	КомиссионнаяТорговляКлиент.ОтчетКомиссионераТоварыЦенаПродажиПриИзменении(ТекущаяСтрока, КэшированныеЗначения);

	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПродажиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиПоСуммеПродажи");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПродажиНДСПриИзменении(Элемент)
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)
	
	Объект.СуммаВознаграждения = Объект.Товары.Итог("СуммаВознаграждения");
	ИтогСуммаПродажи = Объект.Товары.Итог("СуммаПродажи");
	Объект.ПроцентВознаграждения = ?(ИтогСуммаПродажи <> 0, Объект.СуммаВознаграждения / ИтогСуммаПродажи * 100, 0);
	КомиссионнаяТорговляКлиент.РассчитатьКомиссионноеВознаграждениеНДС(Объект, ПроцентНДС);
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПокупательПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Товары);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДатаСчетаФактурыКомиссионераПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Товары);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"));

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Партнер", НСтр("ru = 'Комиссионер'"));
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОстаткиПоДаннымУчета(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Партнер");
	
	Оповещение = Новый ОписаниеОповещения("ПересчитатьОстаткиПоДаннымУчетаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru='Введите остаток по факту в новой строке.'");
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковокФакт";
	Иначе
		ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	КонецЕсли;
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВознаграждение(Команда)
	
	КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
		Новый ОписаниеОповещения("РассчитатьВознаграждениеНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВознаграждениеНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	МассивТиповНоменклатуры = Новый Массив();
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаПродажиНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НалогообложениеНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерСчетаФактурыКомиссионера.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДатаСчетаФактурыКомиссионера.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПокупатель.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаПродажиНДС.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, Объект.ФормаОплаты);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
		НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
		НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
		
		Если Не (ИспользоватьСоглашенияСКлиентами И НалогообложениеИзСоглашения) Тогда
			Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация, , Объект.Дата);
			НалогообложениеНДСПриИзмененииСервер();
		КонецЕсли;
	
	КонецЕсли;
	
	ОчиститьРасшифровкуПлатежа();
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ЗаполнитьСписокВыбораГрузоотправитель();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		ПродажиСервер.ПересчитатьСуммуДокументаВВалюту(
			Объект,
			ВалютаДокумента,
			Объект.Валюта,
			Истина, // ЕстьСуммаПродажи
			Истина); // ЕстьСуммаПродажиНДС
		РассчитыватьВознаграждение = Истина;
		РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	КонецЕсли;
	
	ОчиститьРасшифровкуПлатежа();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
	
	ВалютаДокумента = Объект.Валюта;
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
	НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	УправлениеЭлементамиФормы();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ЗаполнитьПорядокОплатыПоУмолчанию();
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	ЗаполнитьСписокВыбораГрузоотправитель();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	Элементы.ТоварыСумма.Видимость = Не Объект.ЦенаВключаетНДС;
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()

	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьУсловияПродажПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	КомиссионнаяТорговляСервер.РассчитатьСуммуВознаграждения(Объект);
	РассчитыватьВознаграждение = Ложь;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	
	ВалютаДокумента = Объект.Валюта;
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
		Объект,
		ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
		ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты,
		Объект.Товары.Итог("СуммаПродажи"));
	
	УправлениеЭлементамиФормы();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
	НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
	ЗаполнитьПорядокОплатыПоУмолчанию();
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура УслугаПриИзмененииСервер()
	
	КомиссионнаяТорговляСервер.ЗаполнитьСтавкуНДСкомиссионногоВознаграждения(Объект, ПроцентНДС);
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаВознагражденияПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	
	НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;

	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

// Процедура используется в автотесте процесса продаж.
//
&НаСервере
Функция ПоместитьТоварыВХранилище(Знач Товары, УникальныйИдентификатор)

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		Товары.Выгрузить(,"Номенклатура, Характеристика, Количество"),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресПлатежейВХранилище)
	
	Перем КэшированныеЗначения;
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Организация, Соглашение, ПоляЗаполнения",
			?(ЗначениеЗаполнено(Объект.КонецПериода), Объект.КонецПериода, Объект.Дата),
			Объект.Валюта,
			Объект.Организация,
			Объект.Соглашение,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиПоСуммеСНДС");
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиПоСуммеПродажи");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействийСДобавленнымиСтроками, Объект);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ИмяКолонкиКоличество = "КоличествоУпаковокФакт";
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
	Иначе
		ИмяКолонкиКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИмяКолонкиКоличество                   = ИмяКолонкиКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
		
	РассчитыватьВознаграждение = Истина;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОтчетКомиссионера.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.СпособРасчетаВознаграждения,
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьДоступностьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Элементы.ТоварыСумма.Видимость = Не Объект.ЦенаВключаетНДС;
	Элементы.ТоварыКоличествоУпаковокУчет.Видимость = Объект.ПоРезультатамИнвентаризации;
	Элементы.ТоварыКоличествоУпаковокФакт.Видимость = Объект.ПоРезультатамИнвентаризации;
	Элементы.ТоварыПересчитатьОстаткиПоДаннымУчета.Видимость = Объект.ПоРезультатамИнвентаризации;
	
	Элементы.ТоварыРазбитьСтроку.Видимость = Не Объект.ПоРезультатамИнвентаризации;
	Элементы.ТоварыКонтекстноеМенюРазбитьСтроку.Видимость = Не Объект.ПоРезультатамИнвентаризации;
	
	СпособРасчетаНеРассчитывается = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	Элементы.ЗачетОплатыПоВознаграждению.Доступность = Не Объект.УдержатьВознаграждение И Не СпособРасчетаНеРассчитывается
		И Объект.СуммаВознаграждения > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма);
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьГрафикиОплаты         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	Иначе
		НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь , Ложь);
	
	УправлениеЭлементамиФормы();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Объект.СтавкаНДСВознаграждения);
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
		
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
	НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	ЗаполнитьСписокВыбораГрузоотправитель();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект,
		Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,
		Объект.Валюта);
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ОбновитьФорму = Ложь;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
		Если ОбновитьФорму Тогда
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКомиссионноеВознаграждениеСервер()
	
	КомиссионнаяТорговляСервер.РассчитатьСуммуВознаграждения(Объект);
	РассчитыватьВознаграждение = Ложь;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, Организация, ПоляЗаполнения",
			?(ЗначениеЗаполнено(Объект.КонецПериода), Объект.КонецПериода, Объект.Дата),
			Объект.Валюта,
			Объект.Соглашение,
			Объект.Организация,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы));
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиПоСуммеСНДС");
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиПоСуммеПродажи");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиНДС");
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	РассчитыватьВознаграждение = Истина;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура ПересчитатьОстаткиПоДаннымУчетаСервер(НомерСтроки = Неопределено)
	
	КомиссионнаяТорговляСервер.ПересчитатьОстаткиПоДаннымУчета(
		Объект,
		Объект.КонецПериода,
		Истина, // ЕстьСуммаПродажи
		РассчитыватьВознаграждение,
		НомерСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиОтчетаКомиссионера(Форма)
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
	Если Форма.Объект.СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Форма.Элементы.СуммаВознагражденияВсего.Видимость      = Ложь;
	Иначе
		Форма.Элементы.СуммаВознагражденияВсего.Видимость      = Истина;
	КонецЕсли;
	
	ПроцентПлатежейОбщий = 0;
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеСчетовФактурКомиссионеру(Форма)
	
	ЗаполнитьТекстСписокСчетовФактурКомиссионеру(
		Форма.Объект.Ссылка,
		Форма.Объект.Организация,
		Форма.ТекстСписокСчетовФактурКомиссионеру,
		Форма.СчетаФактурыКОформлению);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры=Неопределено)
	
	Если НеТребуетсяВводСчетаФактуры = Неопределено тогда
		НеТребуетсяВводСчетаФактуры = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	КонецЕсли;
	
	ЭтаФорма.ТекстСчетФактураВознаграждение = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
		Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                          ТолькоПросмотр);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",                  Объект.Товары.Итог("СуммаПродажи"));
	ПараметрыФормы.Вставить("ГрафикОплаты",                            Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("Соглашение",                              Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",                 УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ФормаОплаты",                             Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                                   Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",                          Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",               ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("ИспользоватьОтрицательныеСуммыПлатежа",   Истина);
	ПараметрыФормы.Вставить("ИдентификаторПлатежа",                    Объект.ИдентификаторПлатежа);
	ПараметрыФормы.Вставить("ПорядокРасчетов",                         Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",                ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("ПорядокОплаты",                           Объект.ПорядокОплаты);
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов",                    Объект.Валюта);

	Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
		КоличествоЭтапов = Объект.ЭтапыГрафикаОплаты.Количество();
		ПараметрыФормы.Вставить("ДатаПлатежа", ?(КоличествоЭтапов = 0, Неопределено, Объект.ЭтапыГрафикаОплаты[0].ДатаПлатежа));
	Иначе
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы,
		ЭтаФорма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Модифицированность = Истина;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Объект.ФормаОплаты    = ПараметрыОплаты.ФормаОплаты;
		Объект.Касса          = ПараметрыОплаты.Касса;
		Объект.БанковскийСчет = ПараметрыОплаты.БанковскийСчет;
		Объект.ГрафикОплаты   = ПараметрыОплаты.ГрафикОплаты;
		Объект.ПорядокОплаты  = ПараметрыОплаты.ПорядокОплаты;
		
		Если ИспользоватьУпрощеннуюСхемуОплаты Тогда
			Если ЗначениеЗаполнено(ПараметрыОплаты.ДатаПлатежа) Тогда
				СтрокаОплаты = Объект.ЭтапыГрафикаОплаты.Добавить();
				СтрокаОплаты.ДатаПлатежа    = ПараметрыОплаты.ДатаПлатежа;
				СтрокаОплаты.ПроцентПлатежа = 100;
				СтрокаОплаты.СуммаПлатежа   = Объект.Товары.Итог("СуммаПродажи");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен)
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
		Объект,
		ГрафикСоглашенияЗаполнен,
		ГрафикЗаполнен,
		Объект.Товары.Итог("СуммаПродажи"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТекстСписокСчетовФактурКомиссионеру(Ссылка, Организация, ТекстСписокСчетовФактурКомиссионеру, СчетаФактурыКОформлению)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаФактурыКомитентов.Покупатель,
	|	СчетаФактурыКомитентов.НомерСчетаФактуры,
	|	СчетаФактурыКомитентов.ДатаСчетаФактуры
	|ИЗ
	|	РегистрСведений.СчетаФактурыКомиссионерамКОформлению КАК СчетаФактурыКомитентов
	|ГДЕ
	|	СчетаФактурыКомитентов.ОтчетКомиссионера = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СчетаФактуры = Документы.СчетФактураКомиссионеру.СчетаФактурыПоОснованию(Ссылка, Организация);
		Если СчетаФактуры.Количество() > 0 Тогда
			ТекстСписокСчетовФактурКомиссионеру = НСтр("ru='Счета-фактуры выданные комиссионеру'") + " (" + Строка(СчетаФактуры.Количество()) + ")"; 
		Иначе
			ТекстСписокСчетовФактурКомиссионеру = НСтр("ru='Счета-фактуры выданные комиссионеру'");
		КонецЕсли;
		СчетаФактурыКОформлению = Ложь;
	Иначе
		КоличествоКОформлению = РезультатЗапроса.Выбрать().Количество();
		ТекстСписокСчетовФактурКомиссионеру = НСтр("ru='Требуется оформление счетов-фактур комиссионеру'") + " (" + Строка(КоличествоКОформлению) + ")";
		СчетаФактурыКОформлению = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	
	ЗаполнитьЭтапыОплатыСервер(
		ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
		ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажиПоСуммеСНДС");
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиПоСуммеПродажи");
	СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействий, Объект);
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчет, Объект.Касса);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаДокумента,
																									Объект.НалогообложениеНДС,
																									ВалютаОплаты);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	// Подсистема "Свойства"
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьТоварыВХранилище(
		Объект.Товары,
		УникальныйИдентификатор);
	ПараметрыПодбора = Новый Структура("
		|АдресПлатежейВХранилище, 
		|Организация, 
		|Партнер,
		|Соглашение,
		|Дата,
		|ПоРезультатамИнвентаризации",
		АдресПлатежейВХранилище,
		Объект.Организация, 
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КонецПериода,
		Объект.ПоРезультатамИнвентаризации);
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоТоварамПереданнымНаКомиссию",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОстаткиПоДаннымУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПересчитатьОстаткиПоДаннымУчетаСервер();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Остаток (учет) заполнен.'"),
		,
		НСтр("ru='Остаток по данным учета в документе заполнен.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		
		Если Объект.ПоРезультатамИнвентаризации Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
		КонецЕсли;
		
		СамообслуживаниеКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокОтчетКомиссионера(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиОтчетаКомиссионера(ЭтаФорма);
		РассчитыватьВознаграждение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСписокСчетовФактурКомиссионеруНажатиеПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		Возврат;
	КонецПопытки;
	
	Если РезультатЗаписи Тогда
		ОткрытьСписокСчетовФактурКомиссионеру();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСчетовФактурКомиссионеру()
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления, КОформлению",
		Объект.Ссылка, Объект.Организация, Ложь, СчетаФактурыКОформлению);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокСчетовФактурКомиссионераЗакрытие", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураКомиссионеру.Форма.ФормаСпискаПоОтчетуКомиссионера",
			Новый Структура("Отбор", СтруктураОтбор), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурКомиссионераЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	НастроитьОтображениеСчетовФактурКомиссионеру(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораГрузоотправитель()
	
	Элементы.Грузоотправитель.СписокВыбора.Очистить();
	ОрганизацияГрузоотправитель = НСтр("ru='Организация: %1'");
	ОрганизацияГрузоотправитель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОрганизацияГрузоотправитель, Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.Грузоотправитель.СписокВыбора.Добавить(,ОрганизацияГрузоотправитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Элементы.Грузоотправитель.СписокВыбора.Добавить(Объект.Контрагент,Объект.Контрагент);
	КонецЕсли;
	Элементы.Грузоотправитель.ПодсказкаВвода = ОрганизацияГрузоотправитель;
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасшифровкуПлатежа()
	
	Объект.РасшифровкаПлатежаСКлиентом.Очистить();
	Объект.РасшифровкаПлатежаСПоставщиком.Очистить();
	
КонецПроцедуры

#КонецОбласти
