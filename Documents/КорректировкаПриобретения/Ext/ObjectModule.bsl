#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(
						Товары, 
						ЦенаВключаетНДС ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация);
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Курс,Кратность);
	
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВПоступлении(ЭтотОбъект, "Расхождения", СтруктураКурса);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Расхождения", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Расхождения");
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Для Каждого Строка Из Товары Цикл
				Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
					Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Строка Из Расхождения Цикл
				Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
					Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			ВидКорректировки,
			Склад,
			Подразделение,
			Партнер);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("Произвольный", "Склад");
		ИменаПолей.Вставить("Работа", "Подразделение");
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Расхождения,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Расхождения);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Для Каждого Строка Из Расхождения Цикл
			Если ЗначениеЗаполнено(Строка.ВидЗапасов) Тогда
				Строка.ВидЗапасов = Неопределено
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Очистим не используемые реквизиты документа.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.КорректировкаПриобретения.ЗаполнитьИменаРеквизитовПоОснованию(
		ДокументОснование,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, 
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаПриобретения));
	
	ОтразитьНаПрочихДоходах = Ложь;
	СписатьНаРасходы  = Ложь;
	Для Каждого СтрокаРасхождений Из Расхождения Цикл
		Если СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокПоступлений.ОтразитьНаПрочихДоходах Тогда
			ОтразитьНаПрочихДоходах = Истина;
		ИначеЕсли СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокПоступлений.СписатьНаРасходы Тогда
			СписатьНаРасходы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтразитьНаПрочихДоходах Тогда
		СтатьяДоходов 	 = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
		АналитикаДоходов = Неопределено;
		АналитикаПассивов = Неопределено;
	КонецЕсли;
	
	Если НЕ СписатьНаРасходы Тогда
		СтатьяРасходов	  = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		АналитикаРасходов = Неопределено;
		АналитикаАктивов = Неопределено;
	КонецЕсли;
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(Товары, "СтатьяРасходов");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ЗаполнитьПоПоступлениюТоваровУслуг(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		
		ЗаполнитьПоПоступлениюУслугПрочихАктивов(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("АктОРасхождениях")
		И ДанныеЗаполнения.Свойство("ОснованиеАкта") Тогда
		
		ЗаполнитьПоАктуОРасхождениях(ДанныеЗаполнения, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("Товары.Количество");
	
	Документы.КорректировкаПриобретения.ЗаполнитьИменаРеквизитовПоОснованию(
		ДокументОснование,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.СтавкаНДС");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	ПроверитьЗаполнениеСтатейРасходов(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Расхождения";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ПараметрыПроверкиЗаполненияСтатейРасходов();
	ПараметрыПроверки.ИмяТЧ = "Расхождения";
	ПроверитьЗаполнениеСтатейРасходов(МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПроверитьЗаполнениеПоРасхождениям(МассивНепроверяемыхРеквизитов, Отказ);
	
	Если НЕ ЗначениеЗаполнено(Соглашение) ИЛИ НЕ ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	Если НЕ ПоступлениеПоЗаказам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЗаказПоставщику");
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.ЗаказПоставщику");
	КонецЕсли;
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаПриобретения),
												Отказ,
												МассивНепроверяемыхРеквизитов);
												
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
	 И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
	 И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация")
	 <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить("СтатьяРасходов, АналитикаРасходов");
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("Товары"));
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("Расхождения"));
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, РеквизитыПроверкиАналитик, МассивНепроверяемыхРеквизитов, Отказ);
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,, МассивНепроверяемыхРеквизитов, Отказ);
		
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ТекстОшибки = НСтр("ru='Не указан получатель работ (услуг) в строке %1 списка Товары'");
	ЗапасыСервер.ПроверитьЗаполнениеПодразделенияВТабличнойЧасти(ЭтотОбъект, Товары, ТипыНоменклатуры, ТекстОшибки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.КорректировкаПриобретения.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыУПартнеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииРасходовНаСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);	

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	

	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);	

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Товары.Очистить();
	Расхождения.Очистить();
	
	ДатаПлатежа = Дата(1,1,1);
	Согласован  = Ложь;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеСчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДокументОснование);
	
	ТребуетсяСчетФактураНалоговыйАгент = 
		(НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	
	Если ИсходныеСчетаФактуры.Количество() > 0 Тогда
		Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен,,ТребуетсяСчетФактураНалоговыйАгент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация_и_Заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(Товары, "СтатьяРасходов");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ДанныеЗаполнения.Валюта;
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВалютаВзаиморасчетов") Тогда
		ВалютаВзаиморасчетов = ДанныеЗаполнения.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДатаКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументОснование,"Дата");
	Иначе
		ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию(Курс, Кратность, Валюта, ВалютаВзаиморасчетов, ДатаКурса);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваровУслуг(Знач ДокументОснование, ДанныеЗаполнения)
	
	МетаданныеДокументОснование = ДокументОснование.Метаданные();
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
	|	ДанныеДокумента.Партнер				 КАК Партнер,
	|	ДанныеДокумента.Контрагент			 КАК Контрагент,
	|	ДанныеДокумента.Соглашение			 КАК Соглашение,
	|	ДанныеДокумента.Организация			 КАК Организация,
	|	ДанныеДокумента.Договор				 КАК Договор,
	|	ДанныеДокумента.Склад				 КАК Склад,
	|	ДанныеДокумента.Валюта				 КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
	|	ДанныеДокумента.Подразделение		 КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Сделка				 КАК Сделка,
	|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ПорядокРасчетов		 КАК ПорядокРасчетов,
	|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам,
	|	НЕ ДанныеДокумента.Проведен			 КАК ЕстьОшибкиПроведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияОснования,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (&ДоступныеХозОперации) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиНалогообложениеНДС
	|	
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	ДоступныеХозОперации = Новый Массив();
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	
	Запрос.УстановитьПараметр("ДокументОснование",    ДокументОснование);
	Запрос.УстановитьПараметр("ДоступныеХозОперации", ДоступныеХозОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для поступления с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.ЕстьОшибкиНалогообложениеНДС Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для поступления с налогообложением ""%1"" не требуется вводить корректировку.'"),
			Выборка.НалогообложениеНДС);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		, // Статус
		Выборка.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Документы.КорректировкаПриобретения.ЗаполнитьТоварыПоИсходнымДанным(Выборка.ДокументОснование, Товары);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюУслугПрочихАктивов(Знач ДокументОснование, ДанныеЗаполнения)
	
	МетаданныеДокументОснование = ДокументОснование.Метаданные();
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
	|	ДанныеДокумента.Партнер				 КАК Партнер,
	|	ДанныеДокумента.Контрагент			 КАК Контрагент,
	|	ДанныеДокумента.Соглашение			 КАК Соглашение,
	|	ДанныеДокумента.Организация			 КАК Организация,
	|	ДанныеДокумента.Договор				 КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Валюта				 КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
	|	ДанныеДокумента.Подразделение		 КАК Подразделение,
	|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ПорядокРасчетов		 КАК ПорядокРасчетов,
	|	Ложь								 КАК ПоступлениеПоЗаказам,
	|	НЕ ДанныеДокумента.Проведен			 КАК ЕстьОшибкиПроведен,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияОснования,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиНалогообложениеНДС
	|	
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для поступления с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.ЕстьОшибкиНалогообложениеНДС Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для поступления с налогообложением ""%1"" не требуется вводить корректировку.'"),
			Выборка.НалогообложениеНДС);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		, // Статус
		Выборка.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Валюта, ВалютаВзаиморасчетов");
	
	Документы.КорректировкаПриобретения.ЗаполнитьТоварыПоИсходнымДанным(Выборка.ДокументОснование, Товары);
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуОРасхождениях(Знач СтруктураПараметров, ДанныеЗаполнения)
	
	ДокументОснованиеПоступление      = СтруктураПараметров.ОснованиеАкта;
	ДокументОснованиеАктОРасхождениях = СтруктураПараметров.АктОРасхождениях;
	
	МетаданныеДокументОснование = ДокументОснованиеПоступление.Метаданные();
	Если НЕ ПравоДоступа("Чтение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснованиеПоступление)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОснованиеАктОРасхождениях) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК ДокументОснование,
	|	ДанныеДокумента.Партнер                 КАК Партнер,
	|	ДанныеДокумента.Контрагент              КАК Контрагент,
	|	ДанныеДокумента.Соглашение              КАК Соглашение,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Договор                 КАК Договор,
	|	ДанныеДокумента.Склад                   КАК Склад,
	|	ДанныеДокумента.Подразделение           КАК Подразделение,
	|	ДанныеДокумента.Сделка                  КАК Сделка,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Валюта                  КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Менеджер                КАК Менеджер,
	|	ДанныеДокумента.ФормаОплаты             КАК ФормаОплаты,
	|	ДанныеДокумента.ЦенаВключаетНДС         КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.НалогообложениеНДС      КАК НалогообложениеНДС,
	|	ДанныеДокумента.ПоступлениеПоЗаказам    КАК ПоступлениеПоЗаказам,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента  КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.ПорядокРасчетов         КАК ПорядокРасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперацияОснования,
	|	НЕ ДанныеДокумента.Проведен             КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (&ДоступныеХозОперации)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиНалогообложениеНДС,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	АктОРасхожденияхПослеПриемки.СпособОтраженияРасхождений КАК СпособОтраженияРасхождений,
	|	АктОРасхожденияхПослеПриемки.Ссылка КАК АктОРасхожденияхПослеПриемкиОснование,
	|	ВЫБОР
	|		КОГДА АктОРасхожденияхПослеПриемки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатусАктОРасхождениях,
	|	НЕ АктОРасхожденияхПослеПриемки.Проведен КАК ЕстьОшибкиПроведенАктОРасхождениях,
	|	АктОРасхожденияхПослеПриемки.Статус КАК СтатусАктОРасхождениях
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхожденияхПослеПриемки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	АктОРасхожденияхПослеПриемки.Ссылка = &ДокументОснованиеАктОРасхождениях
	|	И ДанныеДокумента.Ссылка = &ДокументОснованиеПоступление";
	
	ДоступныеХозОперации = Новый Массив();
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ДоступныеХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	
	Запрос.УстановитьПараметр("ДоступныеХозОперации", ДоступныеХозОперации);
	Запрос.УстановитьПараметр("ДокументОснованиеАктОРасхождениях", ДокументОснованиеАктОРасхождениях);
	Запрос.УстановитьПараметр("ДокументОснованиеПоступление", ДокументОснованиеПоступление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для поступления с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.СпособОтраженияРасхождений = Перечисления.СпособыОтраженияАктовОРасхожденияПослеПоступления.ИсправлениеПервичныхДокументов Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для акта со способом отражения расхождений ""%1"" не требуется вводить корректировку.'"),
			Выборка.СпособОтраженияРасхождений);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыАктаОРасхождениях.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыАктаОРасхождениях.Отработано);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.АктОРасхожденияхПослеПриемкиОснование,
		Выборка.СтатусАктОРасхождениях,
		Выборка.ЕстьОшибкиПроведенАктОРасхождениях,
		Выборка.ЕстьОшибкиСтатусАктОРасхождениях,
		МассивДопустимыхСтатусов);
		
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		, // Статус
		Выборка.ЕстьОшибкиПроведен);
		
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Склад, Валюта, ВалютаВзаиморасчетов, ДокументОснование, АктОРасхожденияхПослеПриемкиОснование, ЦенаВключаетНДС, НалогообложениеНДС");
	
	Документы.КорректировкаПриобретения.ЗаполнитьТоварыПоАктуОРасхождениях(ЭтотОбъект);
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаРеализации);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#Конецобласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация");
	ИспользоватьРаздельноеОформлениеЗакупок = ЗакупкиСервер.ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперация);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента(ХозяйственнаяОперация);
	
	ПерезаполнитьВидыЗапасов = Не Проведен
		Или ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект)
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
			И ИспользоватьРаздельноеОформлениеЗакупок;
	
	Если ИспользоватьРаздельноеОформлениеЗакупок
		И ПерезаполнитьВидыЗапасов Тогда
		
		Отбор = Новый Структура("ВариантОтражения", Новый Массив);
		Отбор.ВариантОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокПоступлений.УвеличитьЗакупкуУвеличитьТоварыУПартнеров);
		Отбор.ВариантОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокПоступлений.УвеличитьСтоимостьТовара);
		МенеджерВременныхТаблицИзлишки = ВременныеТаблицыДанныхДокумента(ХозяйственнаяОперация, Отбор);
		
		Отбор.ВариантОтражения.Очистить();
		Отбор.ВариантОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокПоступлений.УменьшитьЗакупкуУменьшитьТоварыУПартнеров);
		Отбор.ВариантОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокПоступлений.УменьшитьСтоимостьТовара);
		МенеджерВременныхТаблицНедостачи = ВременныеТаблицыДанныхДокумента(ХозяйственнаяОперация, Отбор);
		
		ВидыЗапасовПромежуточная = ВидыЗапасов.Выгрузить(Новый Массив);
		ВидыЗапасов.Очистить();
		
		ДополнительныеСвойства.Вставить("КонтролироватьНомераГТД", Ложь); // разрешаем списывать остатки по пустым номерам ГТД
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов(Истина);
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоОстаткамКОформлению(ЭтотОбъект, 
			МенеджерВременныхТаблицИзлишки, 
			Отказ, 
			ПараметрыЗаполнения);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВидыЗапасов.Выгрузить(), ВидыЗапасовПромежуточная);
		ВидыЗапасов.Очистить();
		
		ДополнительныеСвойства.Вставить("КонтролироватьНомераГТД", Ложь); // разрешаем списывать остатки по пустым номерам ГТД
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов(Ложь);
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоОстаткамКОформлению(ЭтотОбъект, 
			МенеджерВременныхТаблицНедостачи, 
			Отказ, 
			ПараметрыЗаполнения);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВидыЗапасовПромежуточная, ВидыЗапасов);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, ВариантОтражения", "Количество");
		ЗаполнитьДопКолонкиВидовЗапасов();
		
	ИначеЕсли Не ИспользоватьРаздельноеОформлениеЗакупок
		И ПерезаполнитьВидыЗапасов Тогда
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, Расхождения);
		
	КонецЕсли;
	
КонецПроцедуры

#Конецобласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ПринятаяВозвратнаяТара);
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ПараметрыПроверкиЗаполненияСтатейРасходов()
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнениеСтатейРасходов(МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено)
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияСтатейРасходов();
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Не заполнена колонка ""Статья расходов"" в строке %1 списка ""%2""'");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки	 КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура	 КАК Номенклатура,
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И ТаблицаТовары.СписатьНаРасходы
	|	И (ТаблицаТовары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		ИЛИ ТаблицаТовары.СтатьяРасходов = НЕОПРЕДЕЛЕНО)
	|");
	Запрос.УстановитьПараметр("ТаблицаТовары", ЭтотОбъект[ПараметрыПроверки.ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, СтатьяРасходов, СписатьНаРасходы"));
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			Выборка.НомерСтроки,
			ПараметрыПроверки.ИмяТЧ);
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, Выборка.НомерСтроки, "СтатьяРасходов");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить(ПараметрыПроверки.ИмяТЧ + ".СтатьяРасходов");
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоРасхождениям(МассивНепроверяемыхРеквизитов, Отказ)
	
	ШаблонОшибки = НСтр("ru = 'Не заполнена колонка ""Распоряжение на инвентаризацию"" в строке %НомерСтроки% списка ""Расхождения""'");
	
	СуммаНаПрочиеДоходы		  = 0;
	СуммаНаПрочиеРасходы 	  = 0;
	
	ТребуетсяДатаПлатежа = Ложь;
	
	Для Каждого СтрокаРасхождений Из Расхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокПоступлений.ОтразитьНаПрочихДоходах Тогда
			СуммаНаПрочиеДоходы = СуммаНаПрочиеДоходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		ИначеЕсли СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокПоступлений.СписатьНаРасходы Тогда
			СуммаНаПрочиеРасходы = СуммаНаПрочиеРасходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		КонецЕсли;
		
		Если СтрокаРасхождений.КодСтроки = 0 ИЛИ СтрокаРасхождений.Сумма > 0 Тогда
			ТребуетсяДатаПлатежа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаНаПрочиеДоходы = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
	КонецЕсли;
	
	Если СуммаНаПрочиеРасходы = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
	КонецЕсли;
	
	Если НЕ ТребуетсяДатаПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(ВЫБРАТЬ
	|			ТоварыДокумента.ЗаказПоставщику
	|		ИЗ
	|			Документ.КорректировкаПриобретения.Товары КАК ТоварыДокумента
	|		ГДЕ
	|			ТоварыДокумента.Ссылка = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщику.Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.Товары.ВыгрузитьКолонку("ЗаказПоставщику"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Функция ВременныеТаблицыДанныхДокумента(ХозяйственнаяОперация, Отбор = Неопределено)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	&Дата				 КАК Дата,
	|	&Организация		 КАК Организация,
	|	&Партнер			 КАК Партнер,
	|	&Контрагент			 КАК Контрагент,
	|	&Соглашение			 КАК Соглашение,
	|	&ВидКорректировки	 КАК ВидКорректировки,
	|	&Договор			 КАК Договор,
	|	&Валюта				 КАК Валюта,
	|	&НалогообложениеНДС	 КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ТипЗапасов			 КАК ТипЗапасов,
	|	ЛОЖЬ				 КАК ЕстьСделкиВТабличнойЧасти
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки					 КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура					 КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика				 КАК Характеристика,
	|	ТаблицаТоваров.Назначение					 КАК Назначение,
	|	ТаблицаТоваров.Серия						 КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий			 КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.ВидЗапасов 					 КАК ВидЗапасов,
	|	ТаблицаТоваров.ВариантОтражения 			 КАК ВариантОтражения,
	|	ТаблицаТоваров.НомерГТД						 КАК НомерГТД,
	|	ТаблицаТоваров.Склад						 КАК Склад,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	 КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтавкаНДС					 КАК СтавкаНДС,
	|	ТаблицаТоваров.Количество					 КАК Количество,
	|	ТаблицаТоваров.СуммаСНДС					 КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС						 КАК СуммаНДС
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ИСТИНА
	|	//&ТаблицаТоваровОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	 КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					 КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя			 КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД						 КАК НомерГТД,
	|	ТаблицаВидыЗапасов.ВариантОтражения				 КАК ВариантОтражения,
	|	ТаблицаВидыЗапасов.Количество					 КАК Количество
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|ГДЕ
	|	ИСТИНА
	|	//&ТаблицаВидыЗапасовОтбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	 КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура							 КАК Номенклатура,
	|	Аналитика.Характеристика						 КАК Характеристика,
	|	Аналитика.Серия									 КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов					 КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)	 КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.ВариантОтражения				 КАК ВариантОтражения,
	|	ТаблицаВидыЗапасов.НомерГТД						 КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество					 КАК Количество,
	|	Аналитика.Склад									 КАК Склад
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Строки.АналитикаУчетаНоменклатуры,
	|	Строки.ВидЗапасов
	|
	|ПОМЕСТИТЬ ВидыЗапасовПоступления
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Строки
	|ГДЕ
	|	Строки.Ссылка = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки									 КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура									 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.ВариантОтражения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокПоступлений.УвеличитьЗакупкуУвеличитьСкладскиеОстатки),
	|		 ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокПоступлений.УвеличитьЗакупкуУчестьПриИнвентаризации))
	|			ТОГДА ВидыЗапасовПоступления.ВидЗапасов
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ТекущийВидЗапасов,
	|	ВЫБОР
	|		КОГДА
	|			ОписанияТоваров.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И &ВернутьМногооборотнуюТару
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ														 КАК ЭтоВозвратнаяТара,
	|
	|	&Организация												 КАК Организация,
	|	&ХозяйственнаяОперация										 КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА ОписанияТоваров.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ														 КАК ТипЗапасов,
	|	НЕОПРЕДЕЛЕНО												 КАК ВладелецТовара,
	|	ТаблицаТоваров.ВариантОтражения								 КАК ВариантОтражения,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	 КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)				 КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)		 КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					 КАК Валюта,
	|	ВЫБОР КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению И Не &ПартионныйУчетВерсии22 ТОГДА
	|		&ЗакупкаПодДеятельность
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ														 КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации									 КАК НалогообложениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)		 КАК ВидЦены
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ОписанияТоваров
	|		ПО ОписанияТоваров.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВидыЗапасовПоступления КАК ВидыЗапасовПоступления
	|	ПО
	|		ВидыЗапасовПоступления.АналитикаУчетаНоменклатуры = ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	&ПерезаполнитьВидыЗапасов
	|	ИЛИ ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ЕСТЬNULL(ВидыЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка)) <> 
	|		ВЫБОР
	|			КОГДА
	|				ОписанияТоваров.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ВернутьМногооборотнуюТару
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|			ИНАЧЕ
	|				&ТипЗапасов
	|		КОНЕЦ 
	|	ИЛИ ЕСТЬNULL(ВидыЗапасов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> &Организация";
	
	ТекстОтбораТаблицаТоваров = "";
	ТекстОтбораВидыЗапасов = "";
	Если ЗначениеЗаполнено(Отбор) Тогда
		Для Каждого КлючЗначение Из Отбор Цикл
			ТекстОтбораТаблицаТоваров = 
				ТекстОтбораТаблицаТоваров
				+ " И "
				+ "ТаблицаТоваров." + КлючЗначение.Ключ
				+ " В (&"
				+ КлючЗначение.Ключ + ")";
						ТекстОтбораВидыЗапасов = 
			ТекстОтбораВидыЗапасов
				+ " И "
				+ "ТаблицаВидыЗапасов." + КлючЗначение.Ключ
				+ " В (&"
				+ КлючЗначение.Ключ + ")";
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ТаблицаТоваровОтбор", ТекстОтбораТаблицаТоваров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ТаблицаВидыЗапасовОтбор", ТекстОтбораВидыЗапасов);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",			 Организация);
	Запрос.УстановитьПараметр("Дата",					 Дата);
	Запрос.УстановитьПараметр("Партнер",				 Партнер);
	Запрос.УстановитьПараметр("Контрагент",				 Контрагент);
	Запрос.УстановитьПараметр("Соглашение",				 Соглашение);
	Запрос.УстановитьПараметр("Договор",				 Договор);
	Запрос.УстановитьПараметр("Валюта",					 Валюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС",		 НалогообложениеНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",	 ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ТипЗапасов",				 ТипЗапасовПоХозОперации());
	Запрос.УстановитьПараметр("ВидКорректировки",		 ВидКорректировки);
	Запрос.УстановитьПараметр("Проведен",				 Проведен);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",		 Расхождения.Выгрузить(, "НомерСтроки, Номенклатура, Характеристика, Назначение, Серия, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, СтавкаНДС, Количество, СуммаСНДС, СуммаНДС, Склад, СтатусУказанияСерий, ВариантОтражения"));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",	 ВидыЗапасов.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, ВариантОтражения, Количество"));
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ДокументОснование",		 ДокументОснование);
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ЗакупкаПодДеятельность,ВернутьМногооборотнуюТару");
	Запрос.УстановитьПараметр("ЗакупкаПодДеятельность", РеквизитыОснования.ЗакупкаПодДеятельность);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", РеквизитыОснования.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22",	УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(Дата)));
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект, Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПараметрыЗаполненияВидовЗапасов(ПоИзлишкам)
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию = Истина;
	ПараметрыЗаполнения.ТаблицаРеквизитовВидовЗапасовПоУмолчанию = ТаблицаРеквизитовВидовЗапасовПоУмолчанию();
	ПараметрыЗаполнения.ИмяТаблицыОстатков = ?(ПоИзлишкам, "ТоварыУПартнеровПоложительныйОстаток", "ТоварыУПартнеровОтрицательныйОстаток");
	ПараметрыЗаполнения.БезОтбораПоНомерамГТД = Истина;
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Очистить();
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(ТипЗапасовПоХозОперации());
	ПараметрыЗаполнения.ОтборыВидовЗапасов.Организация = Организация;
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ВидЦены = Справочники.ВидыЦенПоставщиков.ПустаяСсылка();
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ТаблицаРеквизитовВидовЗапасовПоУмолчанию()
	
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию = Расхождения.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ВариантОтражения");
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"ВладелецТовара", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"ТипЗапасов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗапасов"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"ТипЗапасовРезервы", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗапасов"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.Колонки.Добавить(
		"Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.ЗаполнитьЗначения(Партнер, "ВладелецТовара");
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.ЗаполнитьЗначения(Договор, "Договор");
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.ЗаполнитьЗначения(ТипЗапасовПоХозОперации(), "ТипЗапасов");
	ТаблицаРеквизитовВидовЗапасовПоУмолчанию.ЗаполнитьЗначения(Контрагент, "Контрагент");
	
	Возврат ТаблицаРеквизитовВидовЗапасовПоУмолчанию;
	
КонецФункции

Функция ТипЗапасовПоХозОперации()
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ХозяйственнаяОперация");
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути Или
		 ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути Или
		 ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути Тогда
		 Возврат Перечисления.ТипыЗапасов.СобственныйТоварВПути;
	ИначеЕсли 
		 ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки Или
		 ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки Тогда
		 Возврат Перечисления.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке;
	ИначеЕсли 
		 ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		 Возврат Перечисления.ТипыЗапасов.КомиссионныйТовар;
	Иначе
		 Возврат Перечисления.ТипыЗапасов.Товар;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДопКолонкиВидовЗапасов()
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Измерения = "АналитикаУчетаНоменклатуры, ИдентификаторСтроки, НомерГТД,
				|ЗаказПоставщику, Цена, СтавкаНДС,
				|Сделка, ВариантОтражения, КодСтроки,
				|Подразделение, СписатьНаРасходы, СтатьяРасходов,
				|АналитикаРасходов, АналитикаАктивовПассивов";
	Ресурсы = "Количество, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов, СуммаСНДС, СуммаНДС";
	СтруктураРесурсов = Новый Структура(Ресурсы);
	МассивРесурсов = СтрРазделить(Ресурсы, ", ", Ложь);
	
	РасхожденияТолькоПоСуммам = Расхождения.Выгрузить(Новый Структура("Количество", 0));
	ВидыЗапасовРасхожденияТолькоПоСуммам = ВидыЗапасов.ВыгрузитьКолонки();
	Для Каждого СтрВидыЗапасовРасхожденияТолькоПоСуммам Из ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0)) Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрВидыЗапасовРасхожденияТолькоПоСуммам);
		
		Для Каждого СтрРасхожденияТолькоПоСуммам 
			Из РасхожденияТолькоПоСуммам.НайтиСтроки(СтруктураПоиска) Цикл
			
			НоваяСтрока = ВидыЗапасовРасхожденияТолькоПоСуммам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрВидыЗапасовРасхожденияТолькоПоСуммам);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрРасхожденияТолькоПоСуммам, Измерения + ", " + Ресурсы);
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТовары = Расхождения.Выгрузить(, Измерения + ", " + Ресурсы);
	ТаблицаТовары.Свернуть(Измерения, Ресурсы); 
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураРесурсов, СтрокаТоваров);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоСтроке = Мин(СтруктураРесурсов.Количество, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров, Измерения);
			
			НоваяСтрока.Количество = КоличествоПоСтроке;
			
			Если СтруктураРесурсов.Количество Тогда
				Для Каждого ЭлементРесурс Из МассивРесурсов Цикл
					НоваяСтрока[ЭлементРесурс] = КоличествоПоСтроке * СтруктураРесурсов[ЭлементРесурс] / СтруктураРесурсов.Количество;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			Для Каждого ЭлементРесурс Из МассивРесурсов Цикл
				СтруктураРесурсов[ЭлементРесурс] = СтруктураРесурсов[ЭлементРесурс] - НоваяСтрока[ЭлементРесурс];
			КонецЦикла;
			
			Если СтруктураРесурсов.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрВидыЗапасовРасхожденияТолькоПоСуммам Из ВидыЗапасовРасхожденияТолькоПоСуммам Цикл
		ЗаполнитьЗначенияСвойств(ВидыЗапасов.Добавить(), СтрВидыЗапасовРасхожденияТолькоПоСуммам);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Дата, Организация, ВидКорректировки, Партнер, Контрагент, Соглашение";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.ВариантОтражения КАК ВариантОтражения,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.ВариантОтражения КАК ВариантОтражения,
	|		-ТаблицаВидыЗапасов.Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ВариантОтражения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

#Конецобласти

#КонецОбласти

#КонецЕсли
