&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки поступления от строки заказа

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		Элементы.КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
	КонецЕсли;
	Если Параметры.ЗаполнятьПоОрдеру 
		ИЛИ Параметры.ЗначенияЗаполнения.Свойство("ЗаполнятьПоОрдеру") 
		ИЛИ (ЗначениеЗаполнено(Параметры.Основание) 
			И ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("ЗаполнятьПоОрдеру")) 
		Тогда
		ЗаполнитьПоПриемкеСервер(Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ТТНВходящаяЕГАИС = Параметры.Основание;
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	УстановитьДоступностьСоглашений();
	
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	Если Не ИспользоватьЗаказыПоставщикам Тогда
		Элементы.КартинкаОтклонениеЦенЗаказ.Видимость = Ложь;
		Элементы.КартинкаОтклонениеЦенЗаказы.Видимость = Ложь;
		Элементы.КартинкаРасхождениеЗаказ.Видимость = Ложь;
		Элементы.КартинкаРасхождениеЗаказы.Видимость = Ложь;
	КонецЕсли;
	
	Договор = Объект.Договор;
	
	ИспользуетсяПоступлениеТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	Элементы.ТоварыЗаполнитьСерииПоДаннымПоступленияТоваров.Видимость = ИспользуетсяПоступлениеТоваров;
	
	Если НЕ Объект.ПоступлениеПоЗаказам Тогда
		Элементы.ТоварыИндексКартинки.Видимость = Ложь; 
	КонецЕсли;

	Если ИспользоватьПоступлениеПоНесколькимЗаказам Тогда
		Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам.Заголовок = НСтр("ru = 'Подобрать товары из заказов'");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") И Не ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		Элементы.ТоварыГруппаПолучатель.Видимость = Ложь;
	ИначеЕсли Не СкладГруппа Тогда
		Элементы.ТоварыГруппаПолучатель.Заголовок = НСтр("ru = 'Подразделение-получатель'");
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение",Метаданные.Документы.ЗаказПоставщику);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УстановитьДоступностьКомандБуфераОбмена();
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Товары);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Товары);
	
	// silber { 
	
	// информация о товаре
	МодульИнформации.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	// Подключим заполнялку транспортных расходов
	ИницилизироватьЭлементыТранспортныхРасходов();
	ОбновитьВидимостьТранспортныхРасходов();
	// } silber
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЖурналДокументовЗакупки.Форма.ФормаПодбораТоваровИзЗаказа" Тогда
		
		ПолучитьТоварыИзХранилища(РезультатВыбора.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РедактированиеВзаиморасчетов" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученныйНалоговыйАгент.Форма.ФормаСписка" Тогда
		
		НастроитьПредставлениеСчетаФактуры();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаДокумента" 
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто" Тогда
		
		НастроитьОтображениеРеквизитовЗаявленияОВвозеТоваровЕАЭС(ЭтаФорма, РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(РезультатВыбора.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(РезультатВыбора);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);
			
			Если ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
				ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки.Подразделение = РезультатВыбора;
			
		КонецЦикла;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиАвансовогоОтчета" Тогда
		
		Если РезультатВыбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		КонецЕсли;
		
	// /* Storverk Тюняков 7121 Сверка по файлу поставщика	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СТ_СверкаПоступленияПоФайлуПоставщика.Форма.Форма" Тогда
		Состояние(НСтр("ru = 'Выполнение выбранных действий и перенос данных в документ. Пожалуйста, подождите... '"),,,БиблиотекаКартинок.Информация32);
			ПолучитьТаблицуСверкиИзХранилища(РезультатВыбора.АдресТоваровВХранилище);
	// */ Storverk Тюняков 7121 Сверка по файлу поставщика	
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ЗакупкиКлиент.ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
		Если (НЕ Объект.ПоступлениеПоЗаказам И Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"))
				ИЛИ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	ИначеЕсли ИмяСобытия = "ЗакрытиеЗаказов" И Параметр = Объект.Ссылка Тогда
		ОбработатьОповещениеЗакрытияЗаказов();
	КонецЕсли;

	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		
		УстановитьДоступностьСоглашений();
		
		ОбновитьСводнуюИнформациюПоДоставке();
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ"
		Или ИмяСобытия = "Запись_УведомлениеОбИмпортеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	Если ИмяСобытия = "Запись_ТТНВходящаяЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество,Склад",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(
		Объект,
		Новый ОписаниеОповещения("ПередЗаписьюПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПередЗаписьюОбработатьЗаписьОбъектаВФорме(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОбработатьЗаписьОбъектаВФорме(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
	
		НужноЗаполнитьДату = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
			
			Для Каждого ТекСтрока Из Объект.Товары Цикл
				
				Если Не ЗначениеЗаполнено(ТекСтрока.КодСтроки)
					ИЛИ Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
					
					НужноЗаполнитьДату = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НужноЗаполнитьДату Тогда
			
			ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПриобретениеТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ТТНВходящаяЕГАИСОбновитьФорму Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка",     ТТНВходящаяЕГАИС);
		ПараметрыОповещения.Вставить("Основание",  Объект.Ссылка);
		ПараметрыОповещения.Вставить("Перечитать", Истина);
		
		Оповестить("Запись_ТТНВходящаяЕГАИС", ПараметрыОповещения, Объект.Ссылка);
		ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
		
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	ТТНВходящаяЕГАИСОбновитьФорму = Ложь;
	Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		ТТНВходящаяЕГАИСДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "ДокументОснование");
		Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИСДокументОснование) Тогда
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(
				ТТНВходящаяЕГАИС,
				Объект.Ссылка);
			ТТНВходящаяЕГАИСОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".

	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ПересчитатьСуммуСверхЗаказа();
	НеТребуетсяВводСчетаФактуры = НеТребуетсяВводСчетаФактурыДляОперации(Объект.ХозяйственнаяОперация, Объект.НалогообложениеНДС);
	НастроитьПредставлениеСчетаФактуры(НеТребуетсяВводСчетаФактуры);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Товары);
	
	НоменклатураСервер.ЗаполнитьСтрануПроисхождения(Объект.Товары);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Если Объект.Проведен
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		ДенежныеСредстваСервер.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Объект.Организация, Объект.Дата, Объект.ПодотчетноеЛицо);
		
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПредыдущиеРеквизитыСтроки = Новый Структура(
		"НоменклатураПоставщика,
		|Номенклатура,
		|Характеристика,
		|Назначение,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Склад,
		|ТипНоменклатуры,
		|ХарактеристикиИспользуются,
		|ЗаказПоставщику,
		|КодСтроки");
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеОтборы = Новый Структура;
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути") Тогда
		ДополнительныеОтборы.Вставить("ИспользуютсяДоговорыКонтрагентов", Истина);
	КонецЕсли;
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		ДополнительныеОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ВопросПользователюПередЗаполнениемЦенПоСоглашению(
		Новый ОписаниеОповещения("ПартнерПриИзмененииВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзмененииВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Если ОтветНаВопрос Тогда
			ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
			ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		КонецЕсли;
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДополнительныеПараметры.Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	НаправлениедеятельностиСтарое = Объект.НаправлениеДеятельности;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект,
		Элементы.Договор.Доступность,
		Элементы.Договор.Видимость,
		Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	ПриИзмененииНаправленияДеятельностиСервер();
	
	Если НаправлениедеятельностиСтарое <> Объект.НаправлениеДеятельности Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		Объект.БанковскийСчетГрузоотправителя = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Грузоотправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НаправлениедеятельностиСтарое = Объект.НаправлениеДеятельности;
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		ЗакупкиСервер.УстановитьДоступностьДоговора(
			Объект,
			Элементы.Договор.Доступность,
			Элементы.Договор.Видимость,
			Объект.Договор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		АктуализироватьЗакупкуПодДеятельность();
		
		ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчетОрганизации, , Объект.НаправлениеДеятельности);
		
		НастроитьПредставлениеСчетаФактуры();
		
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ПриИзмененииНаправленияДеятельностиСервер();
	
	Если НаправлениедеятельностиСтарое <> Объект.НаправлениеДеятельности Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ВопросПользователюПередЗаполнениемЦенПоСоглашению(
		Новый ОписаниеОповещения("СоглашениеПриИзмененииВопросЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзмененииВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииСоглашенияСервер(
		ЗначениеЗаполнено(Объект.Соглашение)
		И Объект.Товары.Количество() > 0
		И ОтветНаВопрос);

	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		
		ПредыдущееЗначениеСкладГруппа = СкладГруппа;
		
		Если НеобходимВопросОбОчисткеСклада() Тогда
			
			Если СкладГруппа Тогда
				ТекстВопроса = НСтр("ru='Строки по заказу, в которых склад не входит в группу складов ""%Склад%"" будут удалены из списка ""Товары"". Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки по заказу, в которых склад отличается от ""%Склад%"" будут удалены из списка ""Товары"". Продолжить?'");
			КонецЕсли;
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Склад%", Объект.Склад);
			
			Ответ = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ПредыдущееЗначениеСкладГруппа", ПредыдущееЗначениеСкладГруппа)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
            Возврат;
			
		КонецЕсли;
		
		ПриИзмененииСкладаСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПредыдущееЗначениеСкладГруппа = ДополнительныеПараметры.ПредыдущееЗначениеСкладГруппа;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        
        Объект.Склад = Склад;
        СкладГруппа = ПредыдущееЗначениеСкладГруппа;
        Возврат;
        
    КонецЕсли;
    
    
    ПриИзмененииСкладаСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПересчитыватьЦены = Ложь;
	
	Если Не Объект.ПоступлениеПоЗаказам  Тогда
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
		ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	ДатаДокументаДоИзменения = Объект.Дата;
	
	Если ПересчитыватьЦены Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
		Элемент,
		Объект.АдресДоставки,
		Объект.АдресДоставкиЗначенияПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
		Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПоЗаказамПриИзменении(Элемент)
	
	ЗаказПоставщику = Неопределено;
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		
		Если ИспользоватьПоступлениеПоНесколькимЗаказам Тогда
		
			Если Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru='Список Товары будет перезаполнен остатками непоступивших товаров по заказам. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары будут привязаны к строкам заказов. Продолжить?'");
			КонецЕсли;
			
		Иначе
			
			// &ЗамерПроизводительности
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
				"Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента.ПоступлениеПоЗаказамПриИзменении");
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Валюта",                Объект.Валюта);
			ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
			ПараметрыОтбора.Вставить("Договор",               Объект.Договор);
			ПараметрыОтбора.Вставить("НалогообложениеНДС",    Объект.НалогообложениеНДС);
			ПараметрыОтбора.Вставить("Организация",           Объект.Организация);
			ПараметрыОтбора.Вставить("Партнер",               Объект.Партнер);
			ПараметрыОтбора.Вставить("Соглашение",            Объект.Соглашение);
			ПараметрыОтбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
			ПараметрыОтбора.Вставить("ЦенаВключаетНДС",       Объект.ЦенаВключаетНДС);
			ПараметрыОтбора.Вставить("ПорядокРасчетов",       Объект.ПорядокРасчетов);
			ПараметрыОтбора.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
			ПараметрыОтбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
			ПараметрыОтбора.Вставить("ВариантПриемкиТоваров", Объект.ВариантПриемкиТоваров);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор",       ПараметрыОтбора);
			ПараметрыФормы.Вставить("Склад",       Объект.Склад);
			ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
			
			ОповещениеЗакрытия  = Новый ОписаниеОповещения("ПоступлениеПоЗаказамПриИзмененииПослеВыбора", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.ЖурналДокументовЗакупки.Форма.ФормаВыбораРаспоряжения", ПараметрыФормы, , , , ,
				ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
	Иначе
		
		Если Объект.Товары.Количество() > 0 Тогда
			
			Если ИспользоватьПоступлениеПоНесколькимЗаказам Тогда
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказа. Продолжить?'");
			КонецЕсли;
			
		Иначе
			
			ПриИзмененииПоступленияПоНесколькимЗаказам();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоступлениеПоЗаказамПриИзмененииФрагмент(ЗаказПоставщику, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПоЗаказамПриИзмененииПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаказПоставщику = Результат;
    
    Если ЗаказПоставщику = Неопределено Тогда
        Объект.ПоступлениеПоЗаказам = Ложь;
        Возврат;
    КонецЕсли;
    
    Если Объект.Товары.Количество() = 0 Тогда
        ТекстВопроса = СтрЗаменить(НСтр("ru='Список Товары будет заполнен остатками непоступивших товаров по документу %ЗаказПоставщику%. Продолжить?'"), "%ЗаказПоставщику%", ЗаказПоставщику);
    Иначе
        ТекстВопроса = СтрЗаменить(НСтр("ru='Строки в списке Товары будут привязаны к строкам документа %ЗаказПоставщику%. Продолжить?'"), "%ЗаказПоставщику%", ЗаказПоставщику);
    КонецЕсли;
    
    
    ПоступлениеПоЗаказамПриИзмененииФрагмент(ЗаказПоставщику, ТекстВопроса);

КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПоЗаказамПриИзмененииФрагмент(Знач ЗаказПоставщику, Знач ТекстВопроса)
    
    Перем ОтветНаВопрос;
    
    ОтветНаВопрос = Неопределено;
    
    
    ПоказатьВопрос(Новый ОписаниеОповещения("ПоступлениеПоЗаказамПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ЗаказПоставщику", ЗаказПоставщику)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗаказПоставщику = ДополнительныеПараметры.ЗаказПоставщику;
	
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПоступлениеПоЗаказам = Не Объект.ПоступлениеПоЗаказам;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Объект.ЗаказПоставщику = ЗаказПоставщику;
	КонецЕсли;
	ПоступлениеПоЗаказамПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиАвансовогоОтчетаНажатие(Элемент)
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("НазначениеАванса",             Объект.НазначениеАванса);
	ДанныеПечати.Вставить("КоличествоДокументов",         Объект.КоличествоДокументов);
	ДанныеПечати.Вставить("КоличествоЛистов",             Объект.КоличествоЛистов);
	ДанныеПечати.Вставить("Руководитель",                 Объект.Руководитель);
	ДанныеПечати.Вставить("ГлавныйБухгалтер",             Объект.ГлавныйБухгалтер);
	
	ДанныеПечати.Вставить("Дата",                         Объект.Дата);
	ДанныеПечати.Вставить("Организация",                  Объект.Организация);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеПечати", ДанныеПечати);
	СтруктураПараметров.Вставить("ИмяДокумента", "ПриобретениеТоваровУслуг");
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиАвансовогоОтчета", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	Перем ЕстьКорректировки, ЕстьСчетаФактуры;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Товары.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Товары.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ЭтоДокументЗакупки"      , Истина);
	
	ПроверитьНаличиеКорректировокИСчетовФактур(Объект.Ссылка, ЕстьКорректировки, ЕстьСчетаФактуры);
	
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЕстьКорректировки ИЛИ ЭтаФорма.ТолькоПросмотр);
	
	Если Объект.ПоступлениеПоЗаказам И Не РазрешеноОтклонениеОтУсловийЗакупок() Тогда
		СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр", Истина);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
		СтруктураПараметров.Вставить("НеПоказыватьРасчеты", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если "СвязатьСТТНЕГАИС" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ВозможныеТТНЕГАИС(Объект.Организация, Объект.Склад, Объект.Контрагент));
		ПараметрыОткрытия = Новый Структура("Отбор", Отбор);
		
		ОткрытьФорму(
			"Документ.ТТНВходящаяЕГАИС.ФормаВыбора",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ОбработатьВыборТТНЕГАИСИзСписка", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТТНЕГАИСИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТребуетсяСвязатьОрганизацию", Ложь);
	ПараметрыОбработки.Вставить("Ссылка",                      Результат);
	
	ОбработатьВыборТТНЕГАИС(ПараметрыОбработки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина);

	Если НеобходимоОбновитьСтатусыСерий Или ИспользоватьПоступлениеПоНесколькимЗаказам Тогда

		ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения); // серверный вызов

	Иначе

		ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();

	КонецЕсли;

	Если НеобходимоОбновитьСтатусыСерий Тогда

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);

	КонецЕсли;

	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ТоварыКешТекущейСтроки, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗавершитьРедактированиеСтрокиТовары(Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.ПоступлениеПоЗаказам Тогда 
		Если Объект.Товары.Количество()>0 И ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.КодСтроки = 0 Тогда
				ТекущаяСтрока.РасхождениеЗаказ = 1;
			Иначе
				ТекущаяСтрока.РасхождениеЗаказ = 0;
			КонецЕсли;
		КонецЕсли;
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
			Объект.Товары,
			НадписьРасхождениеЗаказ, 
			Элементы.КартинкаРасхождениеЗаказ,
			Элементы.КартинкаРасхождениеЗаказы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ТоварыЗаказПоставщику Тогда
			
			Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЗаказПоставщику) Тогда
				ПоказатьЗначение(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, Новый Структура("Поле", Поле)), Элементы.Товары.ТекущиеДанные.ЗаказПоставщику);
                Возврат;
			ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
				ПоказатьЗначение(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, Новый Структура("Поле", Поле)), Объект.ЗаказПоставщику);
                Возврат;
			КонецЕсли;
			
		ИначеЕсли Поле = Элементы.ТоварыСделка Тогда
			
			ПоказатьЗначение(, Элементы.Товары.ТекущиеДанные.Сделка);
						
		КонецЕсли;
		
		ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(ДополнительныеПараметры) Экспорт
    
    Поле = ДополнительныеПараметры.Поле;
    
    ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", Новый Структура("НомерГТД", ВыбранноеЗначение));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
			"Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента.ТоварыЗаказПоставщикуНачалоВыбора");
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Валюта",                    Объект.Валюта);
		ПараметрыОтбора.Вставить("Контрагент",                Объект.Контрагент);
		ПараметрыОтбора.Вставить("Договор",                   Объект.Договор);
		ПараметрыОтбора.Вставить("НалогообложениеНДС",        Объект.НалогообложениеНДС);
		ПараметрыОтбора.Вставить("Организация",               Объект.Организация);
		ПараметрыОтбора.Вставить("Партнер",                   Объект.Партнер);
		ПараметрыОтбора.Вставить("Соглашение",                Объект.Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация",     Объект.ХозяйственнаяОперация);
		ПараметрыОтбора.Вставить("ЦенаВключаетНДС",           Объект.ЦенаВключаетНДС);
		ПараметрыОтбора.Вставить("ПорядокРасчетов",           Объект.ПорядокРасчетов);
		ПараметрыОтбора.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
		ПараметрыОтбора.Вставить("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
		ПараметрыОтбора.Вставить("ВариантПриемкиТоваров",     Объект.ВариантПриемкиТоваров);
		
		ЗаказПоставщику = Неопределено;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",             ПараметрыОтбора);
		ПараметрыФормы.Вставить("Склад",             Объект.Склад);
		ПараметрыФормы.Вставить("Регистратор",       Объект.Ссылка);
		ПараметрыФормы.Вставить("СкрыватьДопОтборы", Истина);
		
		ПараметрыОповещения =  Новый Структура("ТекущиеДанные", ТекущиеДанные);
		ОповещениеЗакрытия  = Новый ОписаниеОповещения("ТоварыЗаказПоставщикуНачалоВыбораЗавершение", ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытьФорму("Обработка.ЖурналДокументовЗакупки.Форма.ФормаВыбораРаспоряжения", ПараметрыФормы, , , , ,
			ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказПоставщикуНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    ЗаказПоставщику = Результат;
    
    Элементы.Товары.ТекущиеДанные.ЗаказПоставщику = ЗаказПоставщику;
    
    Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказПоставщику) Тогда
        ТекущиеДанные.Сделка = ПолучитьСделкуПоЗаказуПоставщику(ТекущиеДанные.ЗаказПоставщику);
    Иначе
        ТекущиеДанные.Сделка = ПредопределенноеЗначение("Справочник.СделкиСКлиентами.ПустаяСсылка");
    КонецЕсли;
    
    
    ОбновитьИнформациюПоЗаказам();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("СтруктураДействий", СтруктураДействий);
	
	Если ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДополнительныеПараметры.Вставить("ОчиститьСтруктуруДействий", Истина);
		ВопросПользователюПриИзмененииРеквизитаСтроки(
			Новый ОписаниеОповещения("ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекущаяСтрока);
		
	Иначе
		
		ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	Если ДополнительныеПараметры.Свойство("ОчиститьСтруктуруДействий") Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = ДополнительныеПараметры.СтруктураДействий;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	Если ТекущаяСтрока.Номенклатура <> ПредыдущиеРеквизитыСтроки.Номенклатура Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущаяСтрока.АналитикаРасходов = Неопределено;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ТекущаяСтрока.СписатьНаРасходы = Истина;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущаяСтрока.АналитикаРасходов = Неопределено;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ТекущаяСтрока.СписатьНаРасходы = Истина;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыХарактеристикаПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.СписатьНаРасходы = Ложь;
	ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	ТекущиеДанные.АналитикаРасходов = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		Если Объект.ПоступлениеПоЗаказам И ТекущаяСтрока.КодСтроки > 0 Тогда
			СтруктураДействий.Вставить("ПересчитатьЦенуЗаказаЗаУпаковку", ТекущаяСтрока.Количество);
		КонецЕсли;
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		ОбновитьНадписьОтклоненийОтЦенЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатьяРасходовПриИзменении(Элемент)
	
	ТоварыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыСкладПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказПоставщикуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказПоставщику) Тогда
			ТекущиеДанные.Сделка = ПолучитьСделкуПоЗаказуПоставщику(ТекущиеДанные.ЗаказПоставщику);
		Иначе
			ТекущиеДанные.Сделка = ПредопределенноеЗначение("Справочник.СделкиСКлиентами.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер(НеобходимоОбновитьСтатусыСерий, КэшированныеЗначения)

	Если НеобходимоОбновитьСтатусыСерий Тогда

		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);

	КонецЕсли;

	ОбновитьИнформациюПоЗаказам();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураПоставщика" Тогда
		ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер,
			Элементы.Товары.ТекущиеДанные,
			Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНомерГТД" Тогда
		ЗакупкиКлиент.ЗаполнитьСписокВыбораНомеровГТД(
			Элементы.Товары.ТекущиеДанные, 
			Элементы.ТоварыНомерГТД.СписокВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению() Экспорт

	ЗаполнитьЦеныПоСоглашению(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенПоставщика(Команда)

	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоВидуЦенПоставщика(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЗакупкиКлиент.ВыбратьВидЦеныПоставщика(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокВыборВидЦеныПоставщикаЗавершение", ЭтотОбъект),
			Объект.Партнер,
			Объект.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокВыборВидЦеныПоставщикаЗавершение(ВидЦеныПоставщика, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦеныПоставщика) Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщикаСервер(ВидЦеныПоставщика);
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦеныПоставщика(ЦеныРассчитаны, ВидЦеныПоставщика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)

	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;

	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение,
		Ложь,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ПриобретениеТоваровУслуг.ФормаДокумента.Команда.ПодобратьТовары");
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",        Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",         Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Склад",      Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",     Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",       Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах",  Истина);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	ИначеЕсли ХозяйственныеОперацииРаздельнойЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ОтборПоТипуНоменклатуры = Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
	Иначе
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареУслугеРаботе(Ложь)));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоЗаказамОрдерам(Команда)
	
	ПодборТоваровИзЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоПоступлениям(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ВызватьИсключение НСтр("ru = 'Для заполнения цен по последним поступлениям необходимо указать поставщика'");
	КонецЕсли;
	
	ЦеныЗаполнены = Ложь;
	ЗаполнитьЦеныПоПоследнимПоступлениямСервер(ЦеныЗаполнены);
	
	Если ЦеныЗаполнены Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru= 'В строках документа заполнены цены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			НСтр("ru= 'Ни в одной строке цена не заполнена'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВзаиморасчетыПоУпрОрганизации(Команда)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет") Тогда
		
		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		СтруктураПараметры = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Партнер,
			|Контрагент,
			|Валюта,
			|Документ,
			|СуммаВсего,
			|ЭтоРасчетыСКлиентами
			|",
			АдресПлатежейВХранилище,
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Валюта,
			Объект.Ссылка,
			СуммаВсего,
			Ложь); ОткрытьФорму(
			"ОбщаяФорма.РедактированиеВзаиморасчетов",
			СтруктураПараметры,
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоНоменклатуры(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОчиститьСообщения();
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КодСтроки) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для строки по заказу запрещено изменять качество. Воспользуйтесь командой ""Разбить строку"".'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;	
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	ПараметрыПроверкиСерий.Склад = ТекущаяСтрока.Склад;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьКачествоНоменклатурыЗавершение", ЭтотОбъект);
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачествоНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьРедактированиеСтрокиТовары(Элементы.Товары, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	Перем ЗаполненыНомераГТД;
	
	НомерГТД = Неопределено;

	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ЗаполнитьНомераГТДЗавершение", ЭтотОбъект, Новый Структура("ЗаполненыНомераГТД", ЗаполненыНомераГТД)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполненыНомераГТД = ДополнительныеПараметры.ЗаполненыНомераГТД;
    
    
    НомерГТД = Результат;
    Если ЗначениеЗаполнено(НомерГТД) Тогда
        ЗаполнитьНомераГТДНаСервере(НомерГТД, ЗаполненыНомераГТД);
    КонецЕсли;
    ФинансыКлиент.ОповеститьОЗаполненииНомеровГТДвТабличнойЧасти(НомерГТД, ЗаполненыНомераГТД);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДПоПоступлениям(Команда)
	
	ЗаполнитьНомераГТДПоПоследнимПоступлениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, НСтр("ru='Товары'"), ВыделенныеСтроки) Тогда
		СтруктураОтбора = Новый Структура("ВыборГруппы,ЭтоГруппа", ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"), Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуФакт(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуФактЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер("Товары");
	ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(
		Новый ОписаниеОповещения("ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение", ЭтотОбъект),
		АдресТоваровВХранилище,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьТоварыИзВременногоХранилищаСервер(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтклоненияЦен(Команда)
	
	ПоказатьОтклоненияЦен = Не ПоказатьОтклоненияЦен;
	Элементы.ТоварыПоказатьОтклоненияЦен.Пометка = ПоказатьОтклоненияЦен; 
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Если ПоказатьОтклоненияЦен Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЦенаИзменилась", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
					НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
        Возврат;
    КонецЕсли;
    
    ЗакрытьЗаказФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент()
    
    СписокЗаказовКЗакрытию = Новый СписокЗначений;
    Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
        СписокЗаказовКЗакрытию.Добавить(Объект.ЗаказПоставщику)
    Иначе
        СписокЗаказовКЗакрытию.ЗагрузитьЗначения(СписокЗаказов.ВыгрузитьЗначения())
    КонецЕсли;
    
    СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("СкорректироватьЦены",          Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия
					,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	ПараметрыОткрытия.Вставить("Соглашение",                           Объект.Соглашение);
	ПараметрыОткрытия.Вставить("ПоступлениеПоЗаказам",                 Объект.ПоступлениеПоЗаказам);
	
	ВозвращаемыеПараметры = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВозвращаемыеПараметры = Результат;
    
    Если ВозвращаемыеПараметры <> Неопределено Тогда
        
        ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
        Модифицированность = Истина;
        
        РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Товары");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЗагружатьСуммы", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	ПараметрыФормы.Вставить("СопоставлятьПоНоменклатуреПоставщиков", Истина);
	
	ХозяйственныеОперацииИмпорта = ХозяйственныеОперацииИмпорта();
	
	Если ХозяйственныеОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗагружатьГТД", Ложь);
	Иначе
		ПараметрыФормы.Вставить("ЗагружатьГТД", Истина);
	КонецЕсли;
	
	ОтборПоТипуНоменклатуры = Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки();
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		ЗагружатьСкидки = Ложь;
	Иначе
		ЗагружатьСкидки = Истина;
		
		Если ХозяйственныеОперацииРаздельнойЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
			ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяТЧ", "Товары");
	ПараметрыФормы.Вставить("ЗагружатьСкидки", ЗагружатьСкидки);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоговор(Элемент)
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", 
		Новый Структура("Ключ", Объект.Договор));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоглашение(Элемент)
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОткрытьФорму("Справочник.СоглашенияСПоставщиками.Форма.ФормаЭлемента", 
		Новый Структура("Ключ", Объект.Соглашение));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоДаннымПоступленияТоваров(Команда)
	
	РезультатЗаполнения = ЗаполнитьСерииПоДаннымПоступленияТоваровНаСервере();
	
	НоменклатураКлиент.ОповеститьОПерезаполненииСерий(РезультатЗаполнения.ЕстьИзменения, РезультатЗаполнения.КоличествоИзначальноВерное);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки(ИспользоватьТоварыВПутиОтПоставщиков, ИспользоватьНеотфактурованныеПоставки);
	СписокОперацийРаздельнойЗакупки = Новый СписокЗначений();
	СписокОперацийРаздельнойЗакупки.ЗагрузитьЗначения(ХозяйственныеОперацииРаздельнойЗакупки);

	УсловноеОформление.Элементы.Очистить();

	//
	
	УчетНДСПереопределяемый.УстановитьУсловноеОформлениеДляНДСпоСтавкам4и2(
		УсловноеОформление,
		Элементы.ТоварыСтавкаНДС);

	//
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("Товары"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, РеквизитыПроверкиАналитик);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите поставщика>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСделка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Сделка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСделка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Согласован");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа, заказ не выбран>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ТоварыНомерГТДСтранаПроисхождения", "Объект.Товары.ВедетсяУчетПоГТД");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСделка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбора3 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийРаздельнойЗакупки;
	
	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийРаздельнойЗакупки;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПлатежа.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПлатежа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВШапке(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИндексКартинки.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИндексКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИндексКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);
	
	ХозяйственныеОперацииИмпорта = ХозяйственныеОперацииИмпорта();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ХозяйственныеОперацииИмпорта;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();
	
	ПараметрыУстановки.Форма                 = ЭтаФорма;
	ПараметрыУстановки.ЭтоПоступление        = Истина;
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВидЗапасов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоступлениеПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	
	ЗакупкиСервер.УстановитьУсловноеОформлениеПоРасходам(ЭтаФорма);
		
	// отметка незаполненного подразделения, если Товар

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// текст аналитики расходов, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью расходов>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление склада и подразделения
	// отключение видимости склада, если работа или услуга

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслуги();

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отключение видимости подразделения, если товар или тара или операция комиссии

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПодразделение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = НоменклатураСервер.СписокХозяйственныхОперацийИсключающихУслуги();

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// поясняющая надпись для подразделения, если склады не в табличной части

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ/услуг>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// только просмотр СуммыНДС, если СтавкаНДС = БезНДС или НДС0%

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// только просмотр Назначения, если КодСтроки заполнен

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	НаправлениедеятельностиСтарое = Объект.НаправлениеДеятельности;
	
	ДоговорДоЗаполненияУсловийЗакупок = Объект.Договор;
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	Если Договор <> Объект.Договор Тогда
		ПриИзмененииДоговораСервер();
	КонецЕсли;
	
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.ПоступлениеПоЗаказам, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	ПриИзмененииСкладаСервер();
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(Объект.Товары, Объект.Партнер);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НастроитьПредставлениеСчетаФактуры();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	ПриИзмененииНаправленияДеятельностиСервер();
	
	Если НаправлениедеятельностиСтарое <> Объект.НаправлениеДеятельности Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер(ПересчитыватьЦены=Истина)
	
	НаправлениедеятельностиСтарое = Объект.НаправлениеДеятельности;
	ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ДокументЗакупки = РеквизитФормыВЗначение("Объект");
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(ДокументЗакупки.Соглашение, Истина, Истина);
		ДокументЗакупки.ЗаполнитьУсловияЗакупок(УсловияЗакупок);
		ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
		
		Если Договор <> Объект.Договор Тогда
			ПриИзмененииДоговораСервер();
		КонецЕсли;
		
		ВалютаДокумента = Объект.Валюта;
		ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
		
		ОбновитьФорму = Ложь;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.ПоступлениеПоЗаказам, , ОбновитьФорму, Элементы.ПорядокРасчетов);
		Если ОбновитьФорму Тогда
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		
		Если ПересчитыватьЦены Тогда
			СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
			ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
				Объект.Товары,
				Неопределено, // Массив строк
				Новый Структура( // Параметры заполнения
					"ПоляЗаполнения, Дата, Валюта, Соглашение",
					"Цена, СтавкаНДС, ВидЦеныПоставщика",
					Объект.Дата,
					Объект.Валюта,
					Объект.Соглашение
				),
				Новый Структура( // Структура действий с измененныими строками
					"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьСуммуВзаиморасчетов, ПересчитатьСуммуСУчетомРучнойСкидки",
					"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
			
		ИначеЕсли ЦенаВключаетНДС <> Объект.ЦенаВключаетНДС Тогда
			
			СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
				Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
			
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			И ИспользоватьРучныеСкидкиВЗакупках Тогда
			ЗакупкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
		КонецЕсли;
		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
		ПриИзмененииСкладаСервер();
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
		
		СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
		МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		
		Если Объект.ПоступлениеПоЗаказам Тогда
			ОбновитьОтклоненияОтЗаказа();
		КонецЕсли;
		ПересчитатьСуммуСверхЗаказа();
		РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		
		НастроитьПредставлениеСчетаФактуры();
		
		Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
		
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ПриИзмененииНаправленияДеятельностиСервер();
	
	Если НаправлениедеятельностиСтарое <> Объект.НаправлениеДеятельности Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ОчиститьРасшифровкуПлатежа();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	НаправлениедеятельностиСтарое = Объект.НаправлениеДеятельности;
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.ПоступлениеПоЗаказам, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;

	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	ПриИзмененииНаправленияДеятельностиСервер();
	Если НаправлениедеятельностиСтарое <> Объект.НаправлениеДеятельности Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокОплаты");
	Иначе
		ЗаполнитьПорядокОплатыПоУмолчанию();
	КонецЕсли;
	
	ОчиститьРасшифровкуПлатежа();
	
	Если Договор <> Объект.Договор Тогда
		Договор = Объект.Договор;
		Объект.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, Объект.Договор);
	КонецЕсли;
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Ложь,
		Истина);
		
	Если Объект.ПоступлениеПоЗаказам Тогда
		ЗаполнитьЦеныНоменклатурыЗаказов();
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде = Истина)
	
	ХозОперацииЗакупкаВСтранахЕАЭС = ЗакупкиВызовСервера.ХозяйственныеОперацииПоОсновной(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиВызовСервера.ХозяйственныеОперацииПоОсновной(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		Объект.ВернутьМногооборотнуюТару = Ложь;
		Объект.ДатаВозвратаМногооборотнойТары = Неопределено;
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		
		Если ИспользоватьРучныеСкидкиВЗакупках Тогда
			ЗакупкиСервер.ОтменитьРучныеСкидки(Объект,"Товары", Истина);
			ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
			ИЛИ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя
			ИЛИ Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
		
		Объект.ПоступлениеПоЗаказам = Ложь;
		ПриИзмененииПоступленияПоНесколькимЗаказам();

		Объект.ВернутьМногооборотнуюТару = Ложь;
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		
	ИначеЕсли ХозОперацииЗакупкаПоИмпорту.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		Или ХозОперацииЗакупкаВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Объект.ВернутьМногооборотнуюТару = Ложь;
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		НалогообложениеНДСПриИзмененииСервер();
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		Объект.ПоступлениеПоЗаказам = Ложь;
		Объект.ЗаказПоставщику = Неопределено;
		ОтвязатьСтрокиОтЗаказовПоставщикам();
		СписокЗаказов.Очистить();
		УстановитьВидимостьКомандПоЗаказу();
		ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
		ОбновитьИнформациюПоЗаказам();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		НалогообложениеНДСПриИзмененииСервер();
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути
		И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ИспользуютсяДоговорыКонтрагентов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		Если ИспользуютсяДоговорыКонтрагентов <> Неопределено
			И Не ИспользуютсяДоговорыКонтрагентов Тогда
			Объект.Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакупкиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДС, Объект.ХозяйственнаяОперация);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьПараметрыВыбораВидаЗапасов();
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	НастроитьПредставлениеСчетаФактуры();
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	АктуализироватьЗакупкуПодДеятельность();
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Объект.Склад, Объект.Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Объект.Принял = СтруктураОтветственного.Ответственный;
		Объект.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		МассивУдаляемыхСтрок = Новый Массив();
		
		Если СкладГруппа Тогда
			
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Истина);
			
			Для Каждого ТекСтрока Из Объект.Товары Цикл
				
				Если (ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
						Или ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
					И ЗначениеЗаполнено(ТекСтрока.КодСтроки)
					И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)
					И Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
					
					МассивУдаляемыхСтрок.Добавить(ТекСтрока);
					
				КонецЕсли;
			
			КонецЦикла;
			
		Иначе
		
			МассивУдаляемыхСтрок = Новый Массив();
			
			Для Каждого ТекСтрока Из Объект.Товары Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.КодСтроки)
					И ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)
					И (ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
						Или ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
					И Объект.Склад <> ТекСтрока.Склад Тогда
					МассивУдаляемыхСтрок.Добавить(ТекСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
			Объект.Товары.Удалить(ТекЭлемент);
		КонецЦикла;
		
	КонецЕсли;
	
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Истина);
	
	ОбновитьИнформациюПоЗаказам();
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	АктуализироватьЗакупкуПодДеятельность();
	
	Если Не СкладГруппа Тогда
		Элементы.ТоварыГруппаПолучатель.Заголовок = НСтр("ru = 'Подразделение-получатель'");
	Иначе
		Элементы.ТоварыГруппаПолучатель.Заголовок = НСтр("ru = 'Получатель'");
	КонецЕсли;
	Элементы.ГруппаКартинкаИНадписьНесколькоСкладов.Видимость = СкладГруппа;
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоступленияПоНесколькимЗаказам()
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		
		Если НЕ ИспользоватьПоступлениеПоНесколькимЗаказам 
			И ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
			
			СоглашениеЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПоставщику, "Соглашение");
			Если СоглашениеЗаказа <> Объект.Соглашение 
				И ЗначениеЗаполнено(СоглашениеЗаказа) Тогда
				
				Объект.Соглашение = СоглашениеЗаказа;
				ПриИзмененииСоглашенияСервер();
				
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Объект,
				Объект.ЗаказПоставщику,
				"Валюта, Контрагент, Договор, НалогообложениеНДС, Организация, Партнер, ХозяйственнаяОперация, 
				|ВариантПриемкиТоваров, ЦенаВключаетНДС, ВернутьМногооборотнуюТару");
		КонецЕсли;
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиПоступленияКЗаказамПоставщикам(Не ИспользоватьПоступлениеПоНесколькимЗаказам);
		КонецЕсли;
		
	Иначе
		
		ОтвязатьСтрокиОтЗаказовПоставщикам();
		СписокЗаказов.Очистить();
		Объект.ЗаказПоставщику = Неопределено;
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

	КонецЕсли;
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.ПоступлениеПоЗаказам, , ОбновитьФорму, Элементы.ПорядокРасчетов);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьПараметрыВыбораВидаЗапасов();
	УстановитьВидимостьКомандПоЗаказу();
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьИнформациюПоЗаказам();
	ДоставкаТоваров.ПриИзмененииФлагаПоЗаказам(Элементы, Объект, Объект.ПоступлениеПоЗаказам);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	ТекСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, ТекСтрока.СтатьяРасходов, ТекСтрока.АналитикаРасходов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;
	
	ДатаПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, Объект.Соглашение);
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		Если Не ЗначениеЗаполнено(ДатаДокументаДоИзменения) Тогда
			ДатаДокументаДоИзменения = Объект.Дата;
		КонецЕсли;
		СдвигДат = (НачалоДня(Объект.Дата) - НачалоДня(ДатаДокументаДоИзменения))/86400;	
		
		Если СдвигДат > 0 Тогда
			Объект.ДатаПлатежа = Объект.Дата + СдвигДат*86400;
		Иначе
			Объект.ДатаПлатежа = Объект.Дата;
		КонецЕсли;
		
	Иначе
		Объект.ДатаПлатежа = ДатаПлатежа;
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	АктуализироватьЗакупкуПодДеятельность();
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	ПриИзмененииНаправленияДеятельностиСервер();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ОчиститьРасшифровкуПлатежа();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНаправленияДеятельностиСервер()
	
	ИзмененныеСтроки = НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	ЗакупкиСервер.ОчиститьРеквизитыСписанияНаРасходыПриУстановкеНазначенияВТабличнойЧасти(ИзмененныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	ПересчитатьСуммуСУчетомРучнойСкидки = Новый Структура("Очищать", Ложь);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", ПересчитатьСуммуСУчетомРучнойСкидки);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦеныПоставщика");
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк
		ПараметрыЗаполнения,
		СтруктураДействий);
	Если Объект.ПоступлениеПоЗаказам Тогда
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщикаСервер(ВидЦеныПоставщика)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Строка);
		Если СтрокаТаблицы.КодСтроки = 0 Тогда
			МассивСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок,
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, ВидЦеныПоставщика",
			"Цена, ВидЦеныПоставщика",
			Объект.Дата,
			Объект.Валюта,
			ВидЦеныПоставщика
		),
		Новый Структура( // Структура действий с измененныими строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьСуммуВзаиморасчетов, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
	Если Объект.ПоступлениеПоЗаказам Тогда
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуВзаиморасчетов", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Ложь, Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНоменклатурыЗаказов()
	
	Если Не Объект.ПоступлениеПоЗаказам Тогда
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			ТекСтрока.ЦенаЗаказа = 0;
			ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ДатаДокумента  = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Товары.КодСтроки       КАК КодСтроки,
	|	Товары.Цена            КАК Цена,
	|	Товары.Упаковка        КАК Упаковка,
	|	Товары.Номенклатура    КАК Номенклатура
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки <> 0
	|;
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка    КАК ЗаказПоставщику,
	|	ТоварыЗаказа.Ссылка.Дата КАК ДатаЗаказа,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	(ТоварыЗаказа.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1))*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)      КАК ЦенаЗаказа,
	|	ТоварыЗаказа.Упаковка  КАК УпаковкаЗаказа
	|ИЗ
	|	Товары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|ПО
	|	Товары.ЗаказПоставщику = ТоварыЗаказа.Ссылка
	|	И Товары.КодСтроки = ТоварыЗаказа.КодСтроки
	|");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТоварыЗаказа.Упаковка",
			"Товары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"Номенклатура, ЗаказПоставщику,КодСтроки,Цена,Упаковка"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.КодСтроки) Тогда
			Выборка.Сбросить();
			СтруктураОтбора = Новый Структура("ЗаказПоставщику,КодСтроки", ТекСтрока.ЗаказПоставщику, ТекСтрока.КодСтроки);
			Если Выборка.НайтиСледующий(СтруктураОтбора) Тогда
				ТекСтрока.ЦенаЗаказа = РаботаСКурсамиВалют.ПересчитатьВВалюту(Выборка.ЦенаЗаказа,
						Объект.ВалютаВзаиморасчетов,
						Объект.Валюта,
						Выборка.ДатаЗаказа);
			КонецЕсли;
		Иначе
			ТекСтрока.ЦенаЗаказа = 0;
		КонецЕсли;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	КонецЦикла;
	
	ОбновитьИнформациюПоЗаказам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоПоследнимПоступлениямСервер(ЦеныЗаполнены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки    КАК НомерСтроки,
	|	ИсходнаяТаблица.Номенклатура   КАК Номенклатура,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.Упаковка       КАК Упаковка
	|	
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка.МоментВремени КАК МоментВремени,
	|	ПриобретениеТоваровУслуг.Номенклатура         КАК Номенклатура,
	|	ПриобретениеТоваровУслуг.Характеристика       КАК Характеристика,
	|	ПриобретениеТоваровУслуг.Упаковка             КАК Упаковка,
	|	ПриобретениеТоваровУслуг.ВидЦеныПоставщика    КАК ВидЦеныПоставщика,
	|	ПриобретениеТоваровУслуг.Цена                 КАК Цена,
	|	ПриобретениеТоваровУслуг.Ссылка.Валюта        КАК Валюта
	|	
	|ПОМЕСТИТЬ ЦеныПоступлений
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаТовары
	|	ПО
	|		ПриобретениеТоваровУслуг.Номенклатура = ТаблицаТовары.Номенклатура
	|		И ПриобретениеТоваровУслуг.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка.Проведен
	|	И ПриобретениеТоваровУслуг.Ссылка.Партнер = &Партнер
	|	И ПриобретениеТоваровУслуг.Ссылка.Дата   <= &Дата
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныПоступлений.Номенклатура         КАК Номенклатура,
	|	ЦеныПоступлений.Характеристика       КАК Характеристика,
	|	ЦеныПоступлений.Упаковка             КАК Упаковка,
	|	ЦеныПоступлений.Цена                 КАК Цена,
	|	ЦеныПоступлений.ВидЦеныПоставщика    КАК ВидЦеныПоставщика,
	|	ЦеныПоступлений.Валюта               КАК Валюта
	|	
	|ПОМЕСТИТЬ ЦеныПоследнихПоступлений
	|ИЗ
	|	ЦеныПоступлений КАК ЦеныПоступлений 
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ЦеныПоступлений КАК Отбор
	|	ПО
	|		ЦеныПоступлений.Номенклатура = Отбор.Номенклатура
	|		И ЦеныПоступлений.Характеристика = Отбор.Характеристика
	|		И ЦеныПоступлений.МоментВремени < Отбор.МоментВремени
	|ГДЕ
	|	Отбор.МоментВремени ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки    КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка       КАК Упаковка,
	|	ЦеныПоследнихПоступлений.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ТОГДА
	|			&ТекстЗапросаКоэффициентУпаковки1
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ЦеныПоследнихПоступлений.Цена / ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныПоследнихПоступлений.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ЦеныПоследнихПоступлений КАК ЦеныПоследнихПоступлений
	|		
	|	ПО 
	|		ТаблицаТовары.Номенклатура = ЦеныПоследнихПоступлений.Номенклатура
	|		И ТаблицаТовары.Характеристика = ЦеныПоследнихПоступлений.Характеристика
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|	ПО 
	|		ЦеныПоследнихПоступлений.Валюта = КурсыВалютыЦены.Валюта
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	ПО
	|		ИСТИНА";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТаблицаТовары.Упаковка",
			"ТаблицаТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныПоследнихПоступлений.Упаковка",
			"ЦеныПоследнихПоступлений.Номенклатура"));
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, Характеристика, Упаковка"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = Объект.Товары[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка, "Цена, ВидЦеныПоставщика");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		
		ЦеныЗаполнены = Истина;
		
	КонецЦикла;
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодборТоваровИзЗаказа()
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
	Исключение
		ПоказатьПредупреждение(,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	МассивКодовСтрок = Новый Массив;
	АдресТоваров = "";
	
	ПередПодборомТоваровИзЗаказаСервер(МассивКодовСтрок, АдресТоваров);

	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ЗаказПоставщику", Объект.ЗаказПоставщику);
	ПараметрыПодбора.Вставить("ВалютаДокумента", Объект.Валюта);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("МассивКодовСтрок", МассивКодовСтрок);
	ПараметрыПодбора.Вставить("Партнер", Объект.Партнер);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыПодбора.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыПодбора.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаВзаиморасчетов);
	ПараметрыПодбора.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыПодбора.Вставить("ПорядокРасчетов", Объект.ПорядокРасчетов);
	ПараметрыПодбора.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыПодбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыПодбора.Вставить("АдресТоварыНакладнойВоВременномХранилище", АдресТоваров);
	ПараметрыПодбора.Вставить("ОрдернаяСхемаПриПриемке", ОрдернаяСхемаПриПриемке);
	ПараметрыПодбора.Вставить("ПоступлениеПоЗаказам", Объект.ПоступлениеПоЗаказам);
	ПараметрыПодбора.Вставить("ВариантПриемкиТоваров", Объект.ВариантПриемкиТоваров);
	
	ОткрытьФорму(
		"Обработка.ЖурналДокументовЗакупки.Форма.ФормаПодбораТоваровИзЗаказа",
		ПараметрыПодбора,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПередПодборомТоваровИзЗаказаСервер(МассивКодовСтрок, АдресТоваров)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказПоставщику) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,ЗаказПоставщику", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказПоставщику));
		КонецЕсли;
		
	КонецЦикла;
	
	АдресТоваров = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки();
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, ЭтаФорма);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, ЭтаФорма);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	
	Если ХозяйственныеОперацииРаздельнойЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		СтруктураДействий.ТолькоТовары = Истина;
	КонецЕсли;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	ОбновитьОтклоненияОтЗаказа();
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость               = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриобретениеТоваровУслуг));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоДаннымПоступленияТоваровНаСервере()
	
	ТаблицаТовары = Объект.Товары.Выгрузить();
	
	РезультатЗаполненияСерий = НоменклатураСервер.ЗаполнитьСерииПоДаннымТоваровУПартнеров(ТаблицаТовары, Объект, Истина);
	
	Если РезультатЗаполненияСерий.ЕстьИзменения Тогда
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТаблицаТовары, СтруктураДействий, Неопределено);
		
		Объект.Товары.Загрузить(ТаблицаТовары);
		
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект, ПараметрыУказанияСерий, Ложь);
	КонецЕсли;
	
	РезультатЗаполнения = Новый Структура("ЕстьИзменения, КоличествоИзначальноВерное");
	ЗаполнитьЗначенияСвойств(РезультатЗаполнения, РезультатЗаполненияСерий);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПорядокРасчетов" Тогда
		ПорядокРасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеПоЗаказу" Тогда
		ПоступлениеПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеПоЗаказам" Тогда
		ПоступлениеПоЗаказамПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатураПоставщика" Тогда
		ТоварыНоменклатураПоставщикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНазначение" Тогда
		ТоварыНазначениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦеныПоставщика" Тогда
		ТоварыВидЦеныПоставщикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЗаказПоставщику" Тогда
		ТоварыЗаказПоставщикуПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСписатьНаРасходы" Тогда
		ТоварыСписатьНаРасходыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтатьяРасходов" Тогда
		ТоварыСтатьяРасходовПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ОтвязатьОтЗаказа" Тогда
		ОтвязатьОтЗаказа(Команда);
	ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ПолучитьВес" Тогда
		ПолучитьВес(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "ПроверитьКоличествоВДокументе" Тогда
		ПроверитьКоличествоВДокументе(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщика" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенПоставщика(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоПоступлениям" Тогда
		ЗаполнитьЦеныПоПоступлениям(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьНомераГТД" Тогда
		ЗаполнитьНомераГТД(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьНомераГТДПоПоступлениям" Тогда
		ЗаполнитьНомераГТДПоПоступлениям(Команда);
	ИначеЕсли Команда.Имя = "ТоварыПодобратьТоварыПоЗаказамОрдерам" Тогда
		ПодобратьТоварыПоЗаказамОрдерам(Команда);
	ИначеЕсли Команда.Имя = "ИзменитьКачество" Тогда
		ИзменитьКачествоНоменклатуры(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "РазбитьСтрокуФакт" Тогда
		РазбитьСтрокуФакт(Команда);
	ИначеЕсли Команда.Имя = "ПодобратьТовары" Тогда
		ПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика" Тогда
		ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда);
	ИначеЕсли Команда.Имя = "ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьСкладВВыделенныхСтроках" Тогда
		ЗаполнитьСкладВВыделенныхСтроках(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломИзменения(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()
	
	Перем ЕстьКорректировки, ЕстьСчетаФактуры;
	
	РеквизитМожноИзменить = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
			"РезультатВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПроверитьНаличиеКорректировокИСчетовФактур(Объект.Ссылка, ЕстьКорректировки, ЕстьСчетаФактуры);
	
	Если НЕ ЕстьПравоДобавленияКорректировок() И (ЕстьКорректировки ИЛИ ЕстьСчетаФактуры) И ИспользоватьКорректировкиПриобретений Тогда
		
		Если ЕстьКорректировки Тогда
			ТекстСообщения = НСтр("ru='На основании документа введена корректировка поступления.
				|Недостаточно прав для создания корректировки поступления.'");
		Иначе
			ТекстСообщения = НСтр("ru='На основании документа зарегистрирован счет-фактура.
				|Недостаточно прав для создания корректировки поступления.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли ЕстьКорректировки И ИспользоватьКорректировкиПриобретений Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ВвестиКорректировку", НСтр("ru='Ввести корректировку'"));
		СписокКнопок.Добавить("ОтменитьИзменения", НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru='На основании документа введена корректировка поступления.
				|Изменение исходного документа запрещено.'"),
			СписокКнопок,
			,
			"ВвестиКорректировку");
		
	ИначеЕсли ЕстьСчетаФактуры И ИспользоватьКорректировкиПриобретений Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ВвестиКорректировку", НСтр("ru='Ввести корректировку'"));
		СписокКнопок.Добавить("ОтменитьИзменения", НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru='На основании документа зарегистрирован счет-фактура. Ввести корректировку поступления
				|для выставления исправленных счетов-фактур?'"),
			СписокКнопок,
			,
			"ВвестиКорректировку");
			
	Иначе
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	Возврат РеквизитМожноИзменить;
	
КонецФункции

&НаКлиенте
Процедура РезультатВопросаЗавершение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = "ВвестиКорректировку" Тогда // "Ввести корректировку"
		ОткрытьФорму("Документ.КорректировкаПриобретения.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		ОбщегоНазначенияУТКлиент.ВернутьПредыдущееЗначениеРеквизита(ЭтаФорма, Элемент);
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.СохранитьЗначениеРеквизита(ЭтаФорма, Элемент);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки();
	ПоступлениеПоРаздельнойЗакупке = 
		ХозяйственныеОперацииРаздельнойЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено;
	
	Если ПоступлениеПоРаздельнойЗакупке
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда
		
		ПараметрыОтбора = Новый Структура();
		
		Если ПоступлениеПоРаздельнойЗакупке Тогда
			ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
		Иначе
			ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		КонецЕсли;
		
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
		
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если Объект.ПоступлениеПоЗаказам Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
		КонецЕсли;
		Если НЕ ИспользоватьРучныеСкидкиВЗакупках Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей)
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", 
		Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
											
	Если СтруктураНаименованийТабличныхЧастей.Свойство("Товары") Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Товары);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьПоступлениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам");
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	ИспользоватьКорректировкиПриобретений = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиПриобретений");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	ВестиСведенияДляДекларацийАлкоВРознице = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	Склад = Объект.Склад;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(
		ЭтаФорма, Объект.ПоступлениеПоЗаказам, Ложь, , Элементы.ПорядокРасчетов);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	Элементы.ГруппаКартинкаИНадписьНесколькоСкладов.Видимость = СкладГруппа;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриобретениеТоваровУслуг));
	УстановитьВидимостьЭлементовСерий();
	
	УстановитьПараметрыВыбораВидаЗапасов();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьКомандПоЗаказу();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказы);

	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	КонецЕсли;
	
	НастроитьПредставлениеСчетаФактуры();
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗакупкиСервер.ЗаполнитьСписокВыбораНалогообложения(Элементы.НалогообложениеНДС, Объект.ХозяйственнаяОперация);
	
	ДатаДокументаДоИзменения = Объект.Дата;
	
	УстановитьСписокВыбораСтавокНДС();
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	
	НоменклатураСервер.ЗаполнитьСтрануПроисхождения(Объект.Товары);
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС

	Элементы.ХозяйственнаяОперация.СписокВыбора.ЗагрузитьЗначения(
		ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупки(ПолноеИмяДокумента()));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХозяйственнуюОперациюДоговора(ХозяйственнаяОперация)
	
	ХозяйственнаяОперацияДоговора = ХозяйственнаяОперация;
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо")
		Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет") Тогда
		
		ХозяйственнаяОперацияДоговора = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиПоступления(Форма)
	
	// Расчет итога по табличной части "Товары"
	КоллекцияТовары = Форма.Объект.Товары;
	Форма.СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару, 
		КоллекцияТовары.Итог("СуммаСНДС"),
		КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары"));
	Форма.СуммаНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаНДС"),
		КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары"));
	
	СуммаБезНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару, КоллекцияТовары.Итог("Сумма"), КоллекцияТовары.Итог("СуммаБезВозвратнойТары"));
	
	ХозяйственныеОперацииИмпорта = ХозяйственныеОперацииИмпорта();
	ХозяйственныеОперацииВвозИзЕАЭС = ХозяйственныеОперацииВвозИзЕАЭС();
	
	Если ХозяйственныеОперацииИмпорта.Найти(Форма.Объект.ХозяйственнаяОперация) <> Неопределено
		Или ХозяйственныеОперацииВвозИзЕАЭС.Найти(Форма.Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Форма.Элементы.ГруппаСтраницыНДС.Видимость = Ложь;
		
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.Видимость = Истина;
		
		Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
			ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя")
			ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС") Тогда
			
			Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
			Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
			
		Иначе
			Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
			Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСделкуПоЗаказуПоставщику(ЗаказПоставщику)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "Сделка");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПоступлениеПоЗаказам, ТребуетсяЗалогЗаТару)
	
	Если ТекущаяСтрока.Цена < ТекущаяСтрока.ЦенаЗаказа И ТекущаяСтрока.ЦенаЗаказа <> 0 И ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ТекущаяСтрока.ИндексКартинки = 3;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.Цена > ТекущаяСтрока.ЦенаЗаказа И ТекущаяСтрока.ЦенаЗаказа <> 0 И ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ТекущаяСтрока.ИндексКартинки = 1;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ИндексКартинки = 8;
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
		ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 0;
		
	КонецЕсли;
	
	Если ПоступлениеПоЗаказам Тогда
		Если ТекущаяСтрока.КодСтроки = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтклоненияОтЗаказа()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер(ИмяКоллекции)
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект[ИмяКоллекции]);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		
		Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ПересчитатьСуммуСверхЗаказа();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ПараметрыОбновления = ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме();
	
	ПараметрыОбновления.ИмяРеквизитаСписокЗаказов         = "СписокЗаказов";
	ПараметрыОбновления.ПутьЗаказаВШапке                  = "Объект.ЗаказПоставщику";
	ПараметрыОбновления.ИмяНадписиЗаголовка               = "НадписьЗаголовокЗаказы";
	ПараметрыОбновления.ИмяГруппыКолонокВТабличнойЧасти   = "ТоварыГруппаЗаказПоставщику";
	ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти          = "ЗаказПоставщику";
	ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти = ИспользоватьПоступлениеПоНесколькимЗаказам;

	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(ЭтаФорма, Объект.Товары, ПараметрыОбновления);
		
	ОбновитьНадписьОтклоненийОтЦенЗаказа();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Видимость",
		(Объект.ПоступлениеПоЗаказам И ЗначениеЗаполнено(Объект.ЗаказПоставщику)) Или Не Объект.ПоступлениеПоЗаказам);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Доступность", Не Объект.ПоступлениеПоЗаказам);
	
	Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		Объект.Сделка = ПолучитьСделкуПоЗаказуПоставщику(Объект.ЗаказПоставщику);
	ИначеЕсли Объект.ПоступлениеПоЗаказам Тогда
		Объект.Сделка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьОтклоненийОтЦенЗаказа()
	
	Если Объект.ПоступлениеПоЗаказам И
		Объект.Товары.НайтиСтроки(Новый Структура("ЦенаИзменилась", Истина)).Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
			НадписьОтклонениеЦен = НСтр("ru='Цены отличаются от заказа'");
		Иначе
			НадписьОтклонениеЦен = НСтр("ru='Цены отличаются от заказов'");
		КонецЕсли;
		
		Элементы.КартинкаОтклонениеЦенЗаказы.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.КартинкаОтклонениеЦенЗаказ.Картинка = БиблиотекаКартинок.Предупреждение;
		ТекстПодсказки = НСтр("ru='Для установки фильтра по строкам с отклонением цены 
		|воспользуйтесь командой ""Показать отклонения цен"" в группе команд ""Цены""'");
	Иначе
		НадписьОтклонениеЦен = "";
		ПустаяКартинка = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаОтклонениеЦенЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаОтклонениеЦенЗаказ.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		ТекстПодсказки = "";
	КонецЕсли;
	
	Элементы.НадписьОтклонениеЦенЗаказ.Подсказка   = ТекстПодсказки;
	Элементы.НадписьОтклонениеЦенЗаказы.Подсказка  = ТекстПодсказки;
	Элементы.КартинкаОтклонениеЦенЗаказы.Подсказка = ТекстПодсказки;
	Элементы.КартинкаОтклонениеЦенЗаказ.Подсказка  = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеЗакрытияЗаказов()
	
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьНадписьОтклоненийОтЦенЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		ДопПараметры.Налогообложение = Объект.НалогообложениеНДС;
		ДопПараметры.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ДопПараметры.ВариантОформленияЗакупок = ВариантыОформленияЗакупок(Объект.ХозяйственнаяОперация);
		ДоговорПоУмолчанию = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, ХозяйственнаяОперацияДоговора, ДопПараметры);
		
	Иначе
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		ДопПараметры.Налогообложение = Объект.НалогообложениеНДС;
		ДопПараметры.ВариантОформленияЗакупок = ВариантыОформленияЗакупок(Объект.ХозяйственнаяОперация);
		ДоговорПоУмолчанию = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, ХозяйственнаяОперацияДоговора, ДопПараметры);
		
	КонецЕсли;
	
	Если Договор <> ДоговорПоУмолчанию
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Объект.Договор = ДоговорПоУмолчанию;
		
		ПриИзмененииДоговораСервер();
		
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Объект.ПоступлениеПоЗаказам, , , Элементы.ПорядокРасчетов);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	Договор = Объект.Договор;
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)
	
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоЗаказуСервер()
	
	Объект.Товары.Очистить();
	
	Если ИспользоватьПоступлениеПоНесколькимЗаказам Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Объект.ЗаказПоставщику);
	КонецЕсли;
	
	Документы.ПриобретениеТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
		Объект,
		Объект.Товары,
		Склад,
		МассивЗаказов);
	
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ОбновитьИнформациюПоЗаказам();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецФункции

&НаСервере
Процедура ОтвязатьСтрокиОтЗаказовПоставщикам()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		ТекСтрока.КодСтроки = 0;
		ТекСтрока.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
		ТекСтрока.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандПоЗаказу()
	
	Элементы.ТоварыПоказатьОтклоненияЦен.Видимость = Объект.ПоступлениеПоЗаказам;
	Элементы.ЗакрытьЗаказ.Видимость = Объект.ПоступлениеПоЗаказам;
	Элементы.ЗакрытьЗаказы.Видимость = Объект.ПоступлениеПоЗаказам;
	Элементы.ТоварыДополнитьМногооборотнойТарой.Видимость = Не Объект.ПоступлениеПоЗаказам;
	
КонецПроцедуры

&НаСервере
Функция НеобходимВопросОбОчисткеСклада()
	
	ЗадаватьВопрос = Ложь;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	
	Если Не СкладГруппа Тогда
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)
				И ЗначениеЗаполнено(ТекСтрока.КодСтроки)
				И ЗначениеЗаполнено(ТекСтрока.Склад)
				И ТекСтрока.Склад <> Объект.Склад Тогда
				
				ЗадаватьВопрос = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику)
				И ЗначениеЗаполнено(ТекСтрока.КодСтроки)
				И ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
				
				ЗадаватьВопрос = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗадаватьВопрос;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	Если Не Объект.ПоступлениеПоЗаказам Тогда
		МассивЭлементов.Добавить("Дата");
	КонецЕсли;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("ДатаПлатежа");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("ПоступлениеПоЗаказу");
	МассивЭлементов.Добавить("ПоступлениеПоЗаказам");
	
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("Сделка");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("ЗакупкаПодДеятельность");
	
	МассивЭлементов.Добавить("Склад");
	
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("ДатаВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения");
	
	МассивЭлементов.Добавить("ТоварыОтвязатьОтЗаказа");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтвязатьОтЗаказа");
	
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыПолучитьВес");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыПроверитьКоличествоВДокументе");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦеныПоставщика");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоПоступлениям");
	МассивЭлементов.Добавить("ТоварыЗаполнитьНомераГТД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьНомераГТДПоПоступлениям");
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыПоЗаказамОрдерам");
	МассивЭлементов.Добавить("ТоварыИзменитьКачество");
	
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтрокуФакт");
	МассивЭлементов.Добавить("ТоварыПодобратьНоменклатуру");
	МассивЭлементов.Добавить("ТоварыЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	Если Не Объект.ПоступлениеПоЗаказам Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьСкладВВыделенныхСтроках", "Доступность", СкладГруппа);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТоварыЗаполнитьСкладВВыделенныхСтроках", "Видимость", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОтвязатьОтЗаказа",                "Видимость", Объект.ПоступлениеПоЗаказам);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюОтвязатьОтЗаказа", "Видимость", Объект.ПоступлениеПоЗаказам);
	
	Если Объект.ПоступлениеПоЗаказам И Не ПраваПользователяПовтИсп.ОтклонениеОтУсловийЗакупок() Тогда
		
		МассивЭлементов = Новый Массив;
		
		// Элементы управления шапки
		МассивЭлементов.Добавить("Партнер");
		МассивЭлементов.Добавить("Соглашение");
		МассивЭлементов.Добавить("Договор");
		МассивЭлементов.Добавить("НалогообложениеНДС");
		МассивЭлементов.Добавить("ЦенаВключаетНДС");
		МассивЭлементов.Добавить("Организация");
		МассивЭлементов.Добавить("Контрагент");
		МассивЭлементов.Добавить("ХозяйственнаяОперация");
		МассивЭлементов.Добавить("Менеджер");
		МассивЭлементов.Добавить("Сделка");
		МассивЭлементов.Добавить("Подразделение");
		МассивЭлементов.Добавить("ЗакупкаПодДеятельность");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриобретениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Расчеты");
	МассивЭлементов.Добавить("ЗаголовокОплата");
	МассивЭлементов.Добавить("ЗачетОплатыФорма");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	
	ВидимостьЭлементов = 
		(Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию) 
		И (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
		
	Элементы.ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок.Видимость = ВидимостьЭлементов;
	Элементы.ТоварыОтменитьРучныеСкидки.Видимость = ВидимостьЭлементов;
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ВидимостьЭлементов);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатураПоставщика);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	Элементы.ФормаОткрытьВзаиморасчетыПоУпрОрганизации.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыЗаполнитьНомераГТД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьНомераГТДПоПоступлениям");
	
	ХозяйственныеОперацииИмпорта = ХозяйственныеОперацииИмпорта();
	
	ВидимостьЭлементов = (ХозяйственныеОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) = Неопределено);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ВидимостьЭлементов);
	
	Элементы.ПоступлениеПоЗаказам.Доступность = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
	Элементы.ПоступлениеПоЗаказу.Доступность = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
	
	ЗакупкаЧерезПодотчетноеЛицо = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	Элементы.РеквизитыПечатиАвансовогоОтчета.Видимость = ЗакупкаЧерезПодотчетноеЛицо
		И ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.РеквизитыПечатиАвансовогоОтчета);
	Элементы.ПоступлениеПоЗаказу.Видимость = Не ЗакупкаЧерезПодотчетноеЛицо;
	Элементы.Соглашение.Видимость = Не ЗакупкаЧерезПодотчетноеЛицо;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЗапасов()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.Товары.ТекущиеДанные.Номенклатура"));
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Комитент", "Объект.Партнер"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Соглашение", "Объект.Соглашение"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.НалогообложениеНДС", "Объект.НалогообложениеНДС"));
	КонецЕсли;
	
	Элементы.ТоварыВидЗапасов.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураПоставщика, Номенклатура, Характеристика, Упаковка, Склад, ВидЦеныПоставщика, Цена, Сумма, КоличествоУпаковок, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		
		Если Объект.ПоступлениеПоЗаказам Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресТоваровВХранилище)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваровЗаказа = Новый Структура("КодСтроки,ЗаказПоставщику,Серия");
	СтруктураПоискаТоваровНакладной = Новый Структура("НомерСтроки");
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		Если СтрокаТоваров.КодСтроки<>0 И ЗначениеЗаполнено(СтрокаТоваров.ЗаказПоставщику) Тогда
			СтруктураПоискаТоваровЗаказа.КодСтроки = СтрокаТоваров.КодСтроки;
			СтруктураПоискаТоваровЗаказа.ЗаказПоставщику = СтрокаТоваров.ЗаказПоставщику;
			СтруктураПоискаТоваровЗаказа.Серия = СтрокаТоваров.Серия;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровЗаказа);
		Иначе
			СтруктураПоискаТоваровНакладной.НомерСтроки = СтрокаТоваров.НомерСтроки;
			МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваровНакладной);
		КонецЕсли;
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				Объект.Товары.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		Если НЕ ИспользоватьПоступлениеПоНесколькимЗаказам 
			И ЗначениеЗаполнено(СтрокаТЧТовары.ЗаказПоставщику) 
			И Объект.ЗаказПоставщику <> СтрокаТЧТовары.ЗаказПоставщику Тогда
			
			Объект.ЗаказПоставщику = СтрокаТЧТовары.ЗаказПоставщику;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ЗаполнитьЦеныНоменклатурыЗаказов();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	ОбновитьИнформациюПоЗаказам();
	Объект.ПоступлениеПоЗаказам = ЗначениеЗаполнено(Объект.ЗаказПоставщику) ИЛИ СписокЗаказов.Количество() > 0;
	ОбновитьОтклоненияОтЗаказа();
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьВидимостьКомандПоЗаказу();
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(РезультатВыбора)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(РезультатВыбора.АдресТоваровВХранилище);
	ИмяТЧ = РезультатВыбора.ИмяТЧ;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	
	Если ИмяТЧ = "Товары" Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект[ИмяТЧ].Добавить();
		Если ИмяТЧ = "Товары" Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров, , "КодСтроки");
			Если Объект.ПоступлениеПоЗаказам Тогда
				СтрокаТЧТовары.РасхождениеЗаказ = 1;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		Иначе 
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТЧ = "Товары" Тогда
		МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		ЗаполнитьСтатусыУказанияСерийСервер();
		ЗаполнитьЦеныНоменклатурыЗаказов();
		ПриИзмененииСкладаВТабличнойЧастиСервер();
		ОбновитьИнформациюПоЗаказам();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
		ЗаполнитьПризнакСписанияНаРасходыДляУслуг();
	КонецЕсли;

	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Если Объект.ПоступлениеПоЗаказам И СписокЗаказов.Количество() <= 1
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		Документы.ЗаказПоставщику.РассчитатьСостояние(
			Объект.ЗаказПоставщику,
			Объект.Договор,
			ЭтаФорма);
		
	Иначе
		
		Документы.ПриобретениеТоваровУслуг.РассчитатьСостояние(
			Объект.Ссылка,
			Объект.Договор,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору'");
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
	 И Объект.ПоступлениеПоЗаказам Тогда
		Расчеты = НСтр("ru='Оплачено по заказу'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	Иначе
		Расчеты = НСтр("ru='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
	ВидимостьЭлемента = 
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо
		И Не (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И СписокЗаказов.Количество() > 1);
	
	Элементы.Расчеты.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад, Истина);
	
	Если ЗаполненоСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ПриИзмененииСкладаВТабличнойЧастиСервер();
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Функция ПривязатьСтрокиПоступленияКЗаказамПоставщикам(ОтобратьПоЗаказу)
	
	Если Не ИспользоватьЗаказыПоставщикам Или
		(Не ИспользоватьПоступлениеПоНесколькимЗаказам
		И Не ЗначениеЗаполнено(Объект.ЗаказПоставщику)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КодСтроки = 0
		|	И Товары.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказы.ЗаказПоставщику.Сделка    КАК Сделка,
		|	ТаблицаЗаказы.ЗаказПоставщику           КАК ЗаказПоставщику,
		|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
		|	ТаблицаЗаказы.Характеристика            КАК Характеристика,
		|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
		|	ТаблицаЗаказы.Склад                     КАК Склад,
		|	ТаблицаЗаказы.Назначение                КАК Назначение,
		|	СУММА(ТаблицаЗаказы.КОформлению)        КАК КОформлениюОстаток
		|ПОМЕСТИТЬ
		|	ЗаказыПоставщикам
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыОстатки.ЗаказПоставщику        КАК ЗаказПоставщику,
		|		ЗаказыОстатки.Номенклатура           КАК Номенклатура,
		|		ЗаказыОстатки.Характеристика         КАК Характеристика,
		|		ЗаказыОстатки.КодСтроки              КАК КодСтроки,
		|		ЗаказыОстатки.Склад                  КАК Склад,
		|		ЕСТЬNULL(ТоварыЗаказа.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|		ЗаказыОстатки.КОформлениюОстаток     КАК КОформлению
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|				ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
		|					ЗаказПоставщику  = &ЗаказПоставщику
		|				ИНАЧЕ
		|					ЗаказПоставщику.Партнер = &Партнер
		|					И ЗаказПоставщику.Контрагент = &Контрагент
		|					И ЗаказПоставщику.Договор = &Договор
		|					И ЗаказПоставщику.Организация = &Организация
		|					И ЗаказПоставщику.ВариантПриемкиТоваров = &ВариантПриемкиТоваров
		|					И ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|					И ЗаказПоставщику.Соглашение = &Соглашение
		|					И (ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|						&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
		|					И ЗаказПоставщику.НалогообложениеНДС = &НалогообложениеНДС
		|					И ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|					И ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
		|					И ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|				КОНЕЦ
		|				И
		|				ВЫБОР
		|					КОГДА
		|						ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА
		|						Склад В ИЕРАРХИИ (&Склад) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИНАЧЕ
		|						Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|				КОНЕЦ
		|			И (Номенклатура, Характеристика) В
		|			(ВЫБРАТЬ
		|				Товары.Номенклатура КАК Номенклатура,
		|				Товары.Характеристика КАК Характеристика
		|			ИЗ
		|				Товары КАК Товары)
		|			) КАК ЗаказыОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
		|		ПО ТоварыЗаказа.Ссылка = ЗаказыОстатки.ЗаказПоставщику
		|		И ТоварыЗаказа.КодСтроки = ЗаказыОстатки.КодСтроки
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЗаказыДвижения.ЗаказПоставщику,
		|		ЗаказыДвижения.Номенклатура,
		|		ЗаказыДвижения.Характеристика,
		|		ЗаказыДвижения.КодСтроки,
		|		ЗаказыДвижения.Склад,
		|		ЕСТЬNULL(ТоварыЗаказа.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
		|		ВЫБОР КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				-ЗаказыДвижения.КОформлению
		|			ИНАЧЕ
		|				ЗаказыДвижения.КОформлению
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыДвижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
		|		ПО ТоварыЗаказа.Ссылка = ЗаказыДвижения.ЗаказПоставщику
		|		И ТоварыЗаказа.КодСтроки = ЗаказыДвижения.КодСтроки
		|
		|	ГДЕ
		|		ЗаказыДвижения.Регистратор = &Регистратор
		|		И ВЫБОР КОГДА &ОтобратьПоЗаказу ТОГДА
		|			ЗаказыДвижения.ЗаказПоставщику = &ЗаказПоставщику
		|		ИНАЧЕ
		|			ЗаказыДвижения.ЗаказПоставщику.Партнер = &Партнер
		|			И ЗаказыДвижения.ЗаказПоставщику.Контрагент = &Контрагент
		|			И ЗаказыДвижения.ЗаказПоставщику.Договор = &Договор
		|			И ЗаказыДвижения.ЗаказПоставщику.Организация = &Организация
		|			И ЗаказыДвижения.ЗаказПоставщику.ВариантПриемкиТоваров = &ВариантПриемкиТоваров
		|			И ЗаказыДвижения.ЗаказПоставщику.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|			И ЗаказыДвижения.ЗаказПоставщику.Соглашение = &Соглашение
		|			И (ЗаказыДвижения.ЗаказПоставщику.Валюта = &ВалютаВзаиморасчетов ИЛИ
		|				&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
		|			И ЗаказыДвижения.ЗаказПоставщику.НалогообложениеНДС = &НалогообложениеНДС
		|			И ЗаказыДвижения.ЗаказПоставщику.ЦенаВключаетНДС = &ЦенаВключаетНДС
		|			И ЗаказыДвижения.ЗаказПоставщику.ПорядокРасчетов = &ПорядокРасчетов
		|			И ЗаказыДвижения.ЗаказПоставщику.ВернутьМногооборотнуюТару = &ВернутьМногооборотнуюТару
		|		КОНЕЦ
		|		И ЗаказыДвижения.Активность
		|				И ВЫБОР
		|					КОГДА
		|						ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЭтоГруппа
		|					ТОГДА
		|						ЗаказыДвижения.Склад В ИЕРАРХИИ (&Склад) ИЛИ ЗаказыДвижения.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|					ИНАЧЕ
		|						ЗаказыДвижения.Склад В (ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), &Склад)
		|				КОНЕЦ
		|			И (ЗаказыДвижения.Номенклатура, ЗаказыДвижения.Характеристика) В
		|			(ВЫБРАТЬ
		|				Товары.Номенклатура КАК Номенклатура,
		|				Товары.Характеристика КАК Характеристика
		|			ИЗ
		|				Товары КАК Товары)
		|	) КАК ТаблицаЗаказы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаЗаказы.ЗаказПоставщику,
		|		ТаблицаЗаказы.Номенклатура,
		|		ТаблицаЗаказы.Характеристика,
		|		ТаблицаЗаказы.КодСтроки,
		|		ТаблицаЗаказы.Склад,
		|		ТаблицаЗаказы.Назначение
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ТаблицаЗаказы.КОформлению) > 0
		|;
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*)                        КАК КоличествоДублей,
		|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика     КАК Характеристика,
		|	ЗаказыПоставщикам.Склад              КАК Склад
		|ПОМЕСТИТЬ
		|	ДублиТоваров
		|ИЗ
		|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|ВЫБРАТЬ
		|	ЗаказыПоставщикам.Сделка             КАК Сделка,
		|	ЗаказыПоставщикам.ЗаказПоставщику    КАК ЗаказПоставщику,
		|	ЗаказыПоставщикам.Номенклатура       КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика     КАК Характеристика,
		|	ЗаказыПоставщикам.КодСтроки          КАК КодСтроки,
		|	ЗаказыПоставщикам.Склад              КАК Склад,
		|	ЗаказыПоставщикам.Назначение         КАК Назначение,
		|	ЗаказыПоставщикам.КОформлениюОстаток КАК КОформлениюОстаток,
		|	0                                    КАК Распределено,
		|	ДублиТоваров.КоличествоДублей        КАК КоличествоДублей
		|ИЗ
		|	ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДублиТоваров
		|ПО
		|	ЗаказыПоставщикам.Номенклатура = ДублиТоваров.Номенклатура
		|	И ЗаказыПоставщикам.Характеристика = ДублиТоваров.Характеристика
		|	И ЗаказыПоставщикам.Склад = ДублиТоваров.Склад
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ПО
		|	ЗаказПоставщикуТовары.Ссылка = ЗаказыПоставщикам.ЗаказПоставщику
		|	И ЗаказПоставщикуТовары.КодСтроки = ЗаказыПоставщикам.КодСтроки
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ЗаказПоставщикуТовары.НомерСтроки,
		|	ЗаказПоставщикуТовары.Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика,
		|	ЗаказПоставщикуТовары.Склад,
		|	ЗаказПоставщикуТовары.ДатаПоступления
		|");
		
		
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));

	Запрос.УстановитьПараметр("ЗаказПоставщику",           Объект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Партнер",                   Объект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",                   Объект.Договор);
	Запрос.УстановитьПараметр("Организация",               Объект.Организация);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Или
		Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Иначе
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперацияДоговора);
	КонецЕсли;
	Запрос.УстановитьПараметр("Соглашение",                Объект.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",      Объект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВариантПриемкиТоваров",     Объект.ВариантПриемкиТоваров);
	Запрос.УстановитьПараметр("НалогообложениеНДС",        Объект.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",           Объект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",           Объект.ПорядокРасчетов);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("Склад",                     Объект.Склад);
	Запрос.УстановитьПараметр("Регистратор",               Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",          ОтобратьПоЗаказу);
	
	Запрос.УстановитьПараметр("Товары",  Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказПоставщику"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Склад");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказПоставщику");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Сделка");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Назначение");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("Склад",          Выборка.Склад);
		СтруктураПоиска.Вставить("КодСтроки",      0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
				
				КоличествоВСтроке = ТекСтрока.Количество;
				
				Если КоличествоВСтроке > НераспределенноеКоличество Тогда
					ТекСтрока.Количество = НераспределенноеКоличество;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено);
				КонецЕсли;
				
				НераспределенноеКоличество = НераспределенноеКоличество - КоличествоВСтроке;
				
				Если НераспределенноеКоличество < 0 Тогда
					НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "КодСтроки");
					НоваяСтрока.Количество = -НераспределенноеКоличество;
					
					НоваяСтрокаТовары = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ТекСтрока, , "КодСтроки,ЗаказПоставщику");
					НоваяСтрокаТовары.Количество = -НераспределенноеКоличество;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
				ИначеЕсли НераспределенноеКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
		
		Для Каждого НераспределеннаяСтрока Из ТаблицаНераспределенныхТоваров Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодСтроки", 0);
			СтруктураПоиска.Вставить("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
			СтруктураПоиска.Вставить("Номенклатура",   НераспределеннаяСтрока.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", НераспределеннаяСтрока.Характеристика);
			СтруктураПоиска.Вставить("Склад",          НераспределеннаяСтрока.Склад);
			
			СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				
				Если СтрокаТовары.Количество = НераспределеннаяСтрока.Количество Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					НераспределеннаяСтрока.Количество = 0;
				ИначеЕсли СтрокаТовары.Количество > НераспределеннаяСтрока.Количество Тогда
					Разница = СтрокаТовары.Количество - НераспределеннаяСтрока.Количество;
					
					НоваяСтрокаТовары = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
					НоваяСтрокаТовары.Количество = Разница;
					СтрокиТовары.Добавить(НоваяСтрокаТовары);
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение,Количество");
					
					НераспределеннаяСтрока.Количество = 0;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, Неопределено);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
					
				ИначеЕсли СтрокаТовары.Количество < НераспределеннаяСтрока.Количество Тогда
					Разница = НераспределеннаяСтрока.Количество - СтрокаТовары.Количество;
					ЗаполнитьЗначенияСвойств(СтрокаТовары, НераспределеннаяСтрока, "КодСтроки,ЗаказПоставщику,Сделка,Назначение");
					НераспределеннаяСтрока.Количество = Разница;
					
				КонецЕсли;
				
				Если НераспределеннаяСтрока.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Форма)
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Форма.Объект.ПоступлениеПоЗаказам, Форма.Объект.ТребуетсяЗалогЗаТару));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПередЗаполнениемЦенПоСоглашению(ОписаниеОповещения)
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
	КонецЕсли;
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(Истина, НСтр("ru='Перезаполнить'"));
	ВариантыОтветов.Добавить(Ложь, НСтр("ru='Не перезаполнять'"));
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Перезаполнить цены по соглашению?'"),
		ВариантыОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура
		И ТекущаяСтрока.Характеристика = ПредыдущиеРеквизитыСтроки.Характеристика
		И ТекущаяСтрока.Назначение = ПредыдущиеРеквизитыСтроки.Назначение
		И ТекущаяСтрока.Склад = ПредыдущиеРеквизитыСтроки.Склад Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь потвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ДополнительныеПараметры.ТекущаяСтрока.ЦенаЗаказа = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Серия, СтатусУказанияСерий, Склад, ТипНоменклатуры, ЗаказПоставщику");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, Серия, СтатусУказанияСерий, Склад, ТипНоменклатуры, ЗаказПоставщику", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
			
			СтруктураДействий = Новый Структура;
			
			Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
			КонецЕсли;
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
			СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
			СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
			СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыПоставщикамНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы поставщикам (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер()
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, ЕстьКорректировки, ЕстьСчетаФактуры)
	
	ЗакупкиСервер.ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Ссылка, ЕстьКорректировки, ЕстьСчетаФактуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоДобавленияКорректировок()
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаПриобретения);
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилищеЗакупки(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНомераГТДНаСервере(Знач НомерГТД, ЗаполненыНомераГТД)
	
	ЗапасыСервер.ЗаполнитьНомераГТДвТабличнойЧасти(
		Объект.Товары,
		НомерГТД,
		Элементы.Товары.ВыделенныеСтроки,
		ЗаполненыНомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДПоПоследнимПоступлениям()
	
	ЗаполненыНомераГТД = Ложь;
	ЗаполнитьНомераГТДПоПоследнимПоступлениямСервер(ЗаполненыНомераГТД);
	
	Если ЗаполненыНомераГТД Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Номера ГТД заполнены'"),
			,
			НСтр("ru='В строках документа заполнены номера ГТД'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Номера ГТД не заполнены'"),
			,
			НСтр("ru='Ни в одной строке номер ГТД не заполнен'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераГТДПоПоследнимПоступлениямСервер(ЗаполненыНомераГТД)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура
	|
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|ГДЕ
	|	ИсходнаяТаблица.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ИсходнаяТаблица.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ИсходнаяТаблица.ВедетсяУчетПоГТД
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ДанныеРегистра.ДатаПоступления) КАК ДатаПоступления
	|	
	|ПОМЕСТИТЬ ДатыПоступленияТоваровОрганизаций
	|ИЗ
	|	РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Номенклатура
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ДанныеРегистра.НомерГТД) КАК НомерГТД	
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДатыПоступленияТоваровОрганизаций КАК ДатыПоступленияТоваровОрганизаций
	|	ПО
	|		ТаблицаТовары.Номенклатура = ДатыПоступленияТоваровОрганизаций.Номенклатура
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ДанныеРегистра
	|	ПО
	|		ТаблицаТовары.Номенклатура = ДанныеРегистра.Номенклатура
	|		И ДанныеРегистра.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|		И ДатыПоступленияТоваровОрганизаций.ДатаПоступления = ДанныеРегистра.ДатаПоступления
	|		
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура
	|");
	Запрос.УстановитьПараметр("ИсходнаяТаблица", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, НомерГТД, ТипНоменклатуры, ВедетсяУчетПОГТД"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Объект.Товары.Получить(Выборка.НомерСтроки - 1);
		СтрокаТаблицы.НомерГТД = Выборка.НомерГТД;
		
		Действия = Новый Структура;
		Действия.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", Новый Структура("НомерГТД", Выборка.НомерГТД));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, Действия, Неопределено);
		
		ЗаполненыНомераГТД = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеТребуетсяВводСчетаФактурыДляОперации(ХозяйственнаяОперация, НалогообложениеНДС)
	
	ХозяйственныеОперацииИмпорта = ЗакупкиВызовСервера.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	Если ХозяйственныеОперацииИмпорта.Найти(ХозяйственнаяОперация) <> Неопределено
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо
		ИЛИ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС Тогда
		НеТребуетсяВводСчетаФактуры = Истина;
	Иначе
		НеТребуетсяВводСчетаФактуры = Ложь;
	КонецЕсли;
	
	Возврат НеТребуетсяВводСчетаФактуры;
	
КонецФункции

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		Для каждого ТекСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
			СтрокаТаблицы.КодСтроки = 0;
			СтрокаТаблицы.РасхождениеЗаказ = 1;
		КонецЦикла;
		ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
		ОповеститьОбОкончанииОтвязкиСтрок(ВыделенныеСтроки.Количество());
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу()
	
	Если Объект.Товары.Количество() = 0 или Не Объект.ПоступлениеПоЗаказам или НЕ ИспользоватьЗаказыПоставщикам Тогда
		Элементы.КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		Элементы.КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		НадписьРасхождениеЗаказ = "";
		
		Если Объект.Товары.Количество()>0 Тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.РасхождениеЗаказ = 0;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоРасхождений = 0;
		
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуСверхЗаказа();
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Товары, НадписьРасхождениеЗаказ, КартинкаРасхождениеЗаказ, КартинкаРасхождениеЗаказы)
	КоличествоРасхождений = Товары.Итог("РасхождениеЗаказ");
	
	Если КоличествоРасхождений > 0 Тогда
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		КартинкаРасхождениеЗаказы.Картинка = БиблиотекаКартинок.ПустаяКартинка;
		НадписьРасхождениеЗаказ = "";
		КоличествоРасхождений = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказов отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСоглашений()
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		КоличествоСоглашенийСПоставшиком  = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Объект.Партнер);
		Элементы.Соглашение.Видимость = ЗначениеЗаполнено(Объект.Соглашение) ИЛИ КоличествоСоглашенийСПоставшиком > 0;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Ложь, Объект.ПоступлениеПоЗаказам);
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо") Тогда
		ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Ложь, Объект.ПоступлениеПоЗаказам);
	Иначе
		Элементы.ЗачетОплатыФорма.Видимость=Ложь;
	КонецЕсли;
	
	ВзаиморасчетыСервер.УстановитьВидимостьДатыПлатежа(ЭтаФорма);
	ВзаиморасчетыСервер.УстановитьВидимостьПорядкаОплаты(ЭтаФорма, Ложь, Объект.ПоступлениеПоЗаказам);
	
	НаправленияДеятельностиСервер.УстановитьВидимостьНаправленияДеятельности(ЭтаФорма, Ложь, Объект.ПоступлениеПоЗаказам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	ХозяйственныеОперацииИмпорта    = ХозяйственныеОперацииИмпорта();
	ХозяйственныеОперацииВвозИзЕАЭС = ХозяйственныеОперацииВвозИзЕАЭС();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВернутьМногооборотнуюТару",
		"Доступность",
		Форма.Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		И ХозяйственныеОперацииИмпорта.Найти(Форма.Объект.ХозяйственнаяОперация) = Неопределено
		И ХозяйственныеОперацииВвозИзЕАЭС.Найти(Форма.Объект.ХозяйственнаяОперация) = Неопределено
		И Форма.Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаВозвратаМногооборотнойТары",
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТребуетсяЗалогЗаТару",
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару
		И Форма.Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		И ХозяйственныеОперацииИмпорта.Найти(Форма.Объект.ХозяйственнаяОперация) = Неопределено
		И ХозяйственныеОперацииВвозИзЕАЭС.Найти(Форма.Объект.ХозяйственнаяОперация) = Неопределено
		И Форма.Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийДобавленныеСтроки);
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,Склад",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	СтруктураНаименованийТабличныхЧастей = Новый Структура("Товары");	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей);
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	ХозяйственныеОперацииИмпорта    = ХозяйственныеОперацииИмпорта();
	ХозяйственныеОперацииВвозИзЕАЭС = ХозяйственныеОперацииВвозИзЕАЭС();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
		ИЛИ ХозяйственныеОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		ИЛИ ХозяйственныеОперацииВвозИзЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
		ИЛИ Объект.ХозяйственнаяОперация =  Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, Объект.Дата);
		
		Если Заполнить Тогда
			Объект.ЗакупкаПодДеятельность = ВидДеятельностиНДСОрганизации;
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПоступления(
			Элементы.ЗакупкаПодДеятельность,  
			Объект.Дата,
			ВидДеятельностиНДСОрганизации,
			Объект.ХозяйственнаяОперация,
			Объект.Организация);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки");
	
КонецФункции

&НаСервере
Процедура ПересчитатьСуммуСверхЗаказа()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСписатьНаРасходыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.СписатьНаРасходы Тогда
		ТекущиеДанные.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущиеДанные.АналитикаРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Товары"" не введено ни одной строки.'"));
		Возврат;
	Иначе
		
		ТребуетсяЗаполнение = Ложь;
		
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);
			
			Если ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
				ДанныеСтроки.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
				Продолжить;
			КонецЕсли;
			
			ТребуетсяЗаполнение = Истина;
			Прервать;
			
		КонецЦикла;
		
		Если Не ТребуетсяЗаполнение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'В выделенных строках списка ""Товары"" заполнение подразделения-получателя не требуется.'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

#Область ПоискТТНПоРеквизитам

&НаКлиенте
Процедура НайтиТТНЕГАИС()
	
	Если ВестиСведенияДляДекларацийАлкоВРознице
		И ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
		И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Результат = НайтиТТНЕГАИСНаСервере(Объект.Контрагент, Объект.НомерВходящегоДокумента, Объект.ДатаВходящегоДокумента);
		
		Если ЗначениеЗаполнено(Результат.Ссылка) Тогда
			
			ТекстВопроса = НСтр("ru='Связать Товарно-транспортную накладную ЕГАИС %1 от %2 (Поставщик ЕГАИС - %3) с текущим поступлением? %4'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Результат.НомерТТН);
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%2", Результат.ДатаТТН);
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%3", Результат.ОрганизацияЕГАИС);
			
			Если Результат.ТребуетсяСвязатьОрганизацию Тогда
				
				Результат.Вставить("Контрагент", Объект.Контрагент);
				Результат.Вставить("Партнер",    Объект.Партнер);
				
				Уточнение = Символы.ПС + НСтр("ru='Поставщик ЕГАИС будет связан с поставщиком %1.'");
				Уточнение = СтрЗаменить(Уточнение, "%1", Объект.Контрагент);
				
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%4", Уточнение);
				
			Иначе
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%4", "");
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОбработатьОтветНаВопросОСвязыванииСВыбраннойТТНЕГАИС",
					ЭтотОбъект,
					Результат),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиТТНЕГАИСНаСервере(КонтрагентСсылка, НомерТТН, ДатаТТН)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|");
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивНайденныхОрганизацийЕГАИС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка   КАК Ссылка,
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНВходящаяЕГАИС.ДатаТТН  КАК ДатаТТН,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК ОрганизацияЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	(ТТНВходящаяЕГАИС.НомерТТН = &НомерТТН
	|			ИЛИ ТТНВходящаяЕГАИС.НомерТТН = &НомерТТНБезНулей)
	|	И ТТНВходящаяЕГАИС.ДатаТТН = &ДатаТТН
	|	И ВЫБОР
	|			КОГДА &НеИспользоватьОтборПоОрганизации
	|				ТОГДА ИСТИНА
	|			КОГДА ТТНВходящаяЕГАИС.Поставщик = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель В (&СписокОрганизаций)
	|			ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик В (&СписокОрганизаций)
	|		КОНЕЦ
	|");
	
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоОрганизации", МассивНайденныхОрганизацийЕГАИС.Количество() = 0);
	Запрос.УстановитьПараметр("СписокОрганизаций",                МассивНайденныхОрганизацийЕГАИС);
	Запрос.УстановитьПараметр("НомерТТН",                         СокрЛП(НомерТТН));
	Запрос.УстановитьПараметр("НомерТТНБезНулей",                 ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерТТН));
	Запрос.УстановитьПараметр("ДатаТТН",                          ДатаТТН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка");
	Результат.Вставить("НомерТТН");
	Результат.Вставить("ДатаТТН");
	Результат.Вставить("ОрганизацияЕГАИС");
	Результат.Вставить("ТребуетсяСвязатьОрганизацию", Ложь);
	
	Если Выборка.Количество()=1 Тогда
		
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Если МассивНайденныхОрганизацийЕГАИС.Количество() = 0 И ЗначениеЗаполнено(Выборка.ОрганизацияЕГАИС) Тогда
			Результат.ТребуетсяСвязатьОрганизацию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветНаВопросОСвязыванииСВыбраннойТТНЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбработатьВыборТТНЕГАИС(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТТНЕГАИС(ДополнительныеПараметры, СопоставлятьКлассификаторы = Истина)
	
	Если ДополнительныеПараметры.ТребуетсяСвязатьОрганизацию Тогда
		
		ЗаписатьСвязьКонтрагентаПартнераИОрганизацииЕГАИС(ДополнительныеПараметры);
		
	КонецЕсли;
	
	РезультатПроверки = ИнтеграцияЕГАИСВызовСервера.ПроверитьСопоставлениеКлассификаторов(ДополнительныеПараметры.Ссылка);
	Если Не РезультатПроверки.ЕстьНеСопоставленныеТовары
		И Не РезультатПроверки.ЕстьНеСопоставленныеОрганизации Тогда
		
		Если ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(ДополнительныеПараметры.Ссылка) Тогда
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения(
					"ОбработатьОтветНаВопросОРасхожденияхПослеВыбораДокументаПоступления",
					ЭтотОбъект,
					ДополнительныеПараметры),
				НСтр("ru='В товарах выбранного поступления есть алкогольная продукция, которой нет в ТТН. Продолжить выбор?'"),
				РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьОтветНаВопросОРасхожденияхПослеВыбораДокументаПоступления(КодВозвратаДиалога.Да, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбОткрытииФормыСопоставленияКлассификаторовЕГАИС", ЭтотОбъект, ДополнительныеПараметры),
				НСтр("ru='В документе найдены несопоставленные элементы классификаторов ЕГАИС.
				     |Сопоставить классификаторы?'"),
				Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОбОткрытииФормыСопоставленияКлассификаторовЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДополнительныеПараметры.Ссылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ТоварноТранспортныеНакладные", МассивСсылок);
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСопоставленияКлассификаторовЕГАИС(
		ЭтотОбъект,
		Новый ОписаниеОповещения(
			"ОбработатьРезультатСопоставленияКлассификаторовЕГАИС",
			ЭтотОбъект,
			ДополнительныеПараметры),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСопоставленияКлассификаторовЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьВыборТТНЕГАИС(ДополнительныеПараметры, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросОРасхожденияхПослеВыбораДокументаПоступления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДополнительныеПараметры.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ТТНЕГАИС)
	
	ИнтеграцияЕГАИСВызовСервера.ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ТТНЕГАИС, Объект.Ссылка);
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязьКонтрагентаПартнераИОрганизацииЕГАИС(ПараметрыСвязи)
	
	НачатьТранзакцию();
	Попытка
		
		СправочникОбъект = ПараметрыСвязи.ОрганизацияЕГАИС.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		СправочникОбъект.Заблокировать();
		
		СправочникОбъект.Контрагент     = ПараметрыСвязи.Контрагент;
		СправочникОбъект.ТорговыйОбъект = ПараметрыСвязи.Партнер;
		
		СправочникОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРасхожденияМеждуДокументомПоступленияИТТНЕГАИС(ТоварноТранспортнаяНакладнаяЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтСерии
	|ИЗ
	|	&ТаблицаСерии КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура КАК Номенклатура,
	|	ВтТовары.Характеристика КАК Характеристика,
	|	ВтТовары.Серия КАК Серия,
	|	ВтТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПоступления
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСерии КАК ВтСерии
	|		ПО ВтТовары.Номенклатура = ВтСерии.Номенклатура
	|			И ВтТовары.Характеристика = ВтСерии.Характеристика
	|			И ВтТовары.Серия = ВтСерии.Серия
	|ГДЕ
	|	ВтТовары.Номенклатура.АлкогольнаяПродукция
	|	И ВтСерии.Номенклатура ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура,
	|	ВтТовары.Характеристика,
	|	ВтТовары.Серия,
	|	ВтТовары.Количество
	|ИЗ
	|	ВтСерии КАК ВтТовары
	|ГДЕ
	|	ВтТовары.Номенклатура.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыПоступления.Номенклатура КАК Номенклатура,
	|	ВтТоварыПоступления.Характеристика КАК Характеристика,
	|	ВтТоварыПоступления.Серия КАК Серия,
	|	СУММА(ВтТоварыПоступления.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПоступленияССериями
	|ИЗ
	|	ВтТоварыПоступления КАК ВтТоварыПоступления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыПоступления.Номенклатура,
	|	ВтТоварыПоступления.Характеристика,
	|	ВтТоварыПоступления.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыПоступленияССериями.Номенклатура КАК Номенклатура,
	|	ВтТоварыПоступленияССериями.Количество КАК Количество
	|ИЗ
	|	ВтТоварыПоступленияССериями КАК ВтТоварыПоступленияССериями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварыТТН КАК ВтТоварыТТН
	|		ПО ВтТоварыПоступленияССериями.Номенклатура = ВтТоварыТТН.Номенклатура
	|			И ВтТоварыПоступленияССериями.Характеристика = ВтТоварыТТН.Характеристика
	|			И ВтТоварыПоступленияССериями.Серия = ВтТоварыТТН.Серия
	|ГДЕ
	|	(ВтТоварыПоступленияССериями.Количество > ЕСТЬNULL(ВтТоварыТТН.Количество, 0)
	|			ИЛИ ВтТоварыТТН.Номенклатура ЕСТЬ NULL)");
	
	Запрос.УстановитьПараметр("Ссылка",        ТоварноТранспортнаяНакладнаяЕГАИС);
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСерии",  Объект.Серии.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Функция ЗаполнитьПоПриемкеСервер(ЕстьПринятыеТовары)
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	Если Объект.ПоступлениеПоЗаказам Тогда
		МассивРаспоряжений = Объект.Товары.Выгрузить(, "ЗаказПоставщику").ВыгрузитьКолонку("ЗаказПоставщику");
		Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) И
			МассивРаспоряжений.Найти(Объект.ЗаказПоставщику) = Неопределено Тогда
			МассивРаспоряжений.Добавить(Объект.ЗаказПоставщику);
		КонецЕсли;
	Иначе
		МассивРаспоряжений = Неопределено;
	КонецЕсли;
	
	Если Справочники.Склады.ЭтоГруппа(Объект.Склад) Тогда
		Выборка = Справочники.Склады.Выбрать(Объект.Склад);
		МассивСкладов = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивСкладов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	СкладЗаполнения = ?(Справочники.Склады.ЭтоГруппа(Объект.Склад),МассивСкладов,Объект.Склад);
	
	ПараметрыЗаполнения = ЗакупкиСервер.ПараметрыЗаполненияПоФактическойПриемке();
	ПараметрыЗаполнения.ДокументПоступления                    = Объект.Ссылка;
	ПараметрыЗаполнения.ДатаПоступления                        = Объект.Дата;
	ПараметрыЗаполнения.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	ПараметрыЗаполнения.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	ПараметрыЗаполнения.Склад                                  = СкладЗаполнения;
	ПараметрыЗаполнения.МассивРаспоряжений                     = МассивРаспоряжений;
	ПараметрыЗаполнения.Договор                                = Объект.Договор;
	ПараметрыЗаполнения.ЗаполнитьПоПоступлениям                = ХозяйственныеОперацииРаздельнойЗакупки().Найти(Объект.ХозяйственнаяОперация)<>Неопределено;
	ПараметрыЗаполнения.ВариантПриемкиТоваров                  = Объект.ВариантПриемкиТоваров;
	
	ЕстьИзменения = ЗакупкиСервер.ЗаполнитьТоварыПоФактическойПриемке(
		Объект.Товары,
		ПараметрыЗаполнения,
		ЕстьПринятыеТовары);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбновитьИнформациюПоЗаказам();
	
	Если Объект.ПоступлениеПоЗаказам Тогда
		ОбновитьОтклоненияОтЗаказа();
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДатуПлатежаПоУмолчаниюНаСервере()
	
	Объект.ДатаПлатежа = Объект.Дата;
	ЭтапыОплатыСервер.ЗаполнитьДатуПлатежаВЗакупкахПоУмолчанию(Объект, , Истина);
	
КонецФункции

&НаСервере
Процедура УстановитьСписокВыбораСтавокНДС(ПересчетНДС = Ложь)
	
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НДСпоСтавкам4и2");
	
	// Если применение льготной ставки изменилось, предложим пересчитать НДС в табличной части
	Если ПересчетНДС И НДСпоСтавкам4и2Прежний <> НДСпоСтавкам4и2 Тогда
		
		СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		ПересчитатьСуммуСверхЗаказа();
		РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		СформироватьНадписьВалюты(ЭтаФорма);
		
	КонецЕсли;
	
	НДСпоСтавкам4и2Прежний = НДСпоСтавкам4и2;
	
	УчетНДСПереопределяемый.ЗаполнитьСписокВыбораСтавокНДС(Элементы.ТоварыСтавкаНДС.СписокВыбора, НДСпоСтавкам4и2);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаСуммыНДСВТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Форма.Объект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", Форма.НДСпоСтавкам4и2);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", Форма.НДСпоСтавкам4и2);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакСписанияНаРасходыДляУслуг()
	
	// заполнение признака списания на расходы
	СтруктураОтбора = Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
	НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.СписатьНаРасходы = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	ПересчитыватьЦены = Ложь;
	
	Если РезультатВопроса  Тогда
		ПересчитыватьЦены = Истина;
	КонецЕсли;
	
	ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	ДатаДокументаДоИзменения = Объект.Дата;
	
	Если ПересчитыватьЦены Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуФактЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ДанныеВыбораСкладов = ДанныеВыбораСкладов(Объект.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка", ДанныеВыбораСкладов);

КонецПроцедуры

&НаКлиенте
Процедура ТекстЗаявлениеОВвозеТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗакупкиКлиент.ВвестиЗаявлениеОВвозеТоваров(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовЗаявленияОВвозеТоваровЕАЭС(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Форма.ТекстЗаявлениеОВвозеТоваров = ПараметрыПредставления.ТекстЗаявлениеОВвозеТоваров;
		Форма.Элементы.ТекстЗаявлениеОВвозеТоваров.Гиперссылка = ПараметрыПредставления.ГиперссылкаЗаявлениеОВвозеТоваров;
		Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстЗаявлениеОВвозеТоваров;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяВВодЗаявленияОВвозеТоваровДляОперации(ХозяйственнаяОперация, Контрагент, Дата)
	
	ХозяйственныеОперацииВвозИзЕАЭС = ХозяйственныеОперацииВвозИзЕАЭС();
	
	Возврат (ХозяйственныеОперацииВвозИзЕАЭС.Найти(ХозяйственнаяОперация) <> Неопределено
				Или (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
					И УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(Контрагент.СтранаРегистрации, Дата)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьТолькоРаботыУслуги(Товары)
	
	Если Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	Для каждого Строка из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			СписокНоменклатуры.Добавить(Строка.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокНоменклатуры.Количество() = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&СписокНоменклатуры)
		|	И (Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))";
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура НастроитьПредставлениеСчетаФактуры(НеТребуетсяВводСчетаФактуры = Неопределено)
	
	ТребуетсяВводЗаявленияОВвозеТоваров = ТребуетсяВВодЗаявленияОВвозеТоваровДляОперации(Объект.ХозяйственнаяОперация,
		Объект.Контрагент, Объект.Дата);
	
	Если ТребуетсяВводЗаявленияОВвозеТоваров 
			и не ЕстьТолькоРаботыУслуги(Объект.Товары) Тогда // Ввод заявлений о ввозе товаров по работам и услугам не поддерживается
			
		НастроитьОтображениеРеквизитовЗаявленияОВвозеТоваровЕАЭС(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияЗаявленияОВвозеТоваров(Объект.Ссылка, Объект.Организация, Не ТребуетсяВводЗаявленияОВвозеТоваров));
	Иначе
		Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Элементы.ГруппаСтраницаТекстСчетФактура;
		Если НеТребуетсяВводСчетаФактуры = Неопределено Тогда
			НеТребуетсяВводСчетаФактуры = НеТребуетсяВводСчетаФактурыДляОперации(Объект.ХозяйственнаяОперация, Объект.НалогообложениеНДС);
		КонецЕсли;
		
		ЭтаФорма.ТекстСчетФактура = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
			Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	НайтиТТНЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	НайтиТТНЕГАИС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокЗаполнитьПоЗаказамОрдерам()
	
	СкладыТаблицы = Объект.Товары.Выгрузить(,"Склад").ВыгрузитьКолонку("Склад");
	ОрдернаяСхемаПриПриемке = СкладыСервер.ЕстьОрдерныйНаПриемкуСклад(СкладыТаблицы, Объект.Дата, Объект.Склад);
	
	Если НЕ ОрдернаяСхемаПриПриемке И НЕ ИспользоватьПоступлениеПоНесколькимЗаказам И ИспользоватьЗаказыПоставщикам Тогда
		ЗаголовокЗаполнить = НСтр("ru = 'Подобрать товары из заказа'");
	ИначеЕсли НЕ ОрдернаяСхемаПриПриемке И ИспользоватьПоступлениеПоНесколькимЗаказам И ИспользоватьЗаказыПоставщикам Тогда
		ЗаголовокЗаполнить = НСтр("ru = 'Подобрать товары из заказов'");
	ИначеЕсли ОрдернаяСхемаПриПриемке И НЕ ИспользоватьЗаказыПоставщикам Тогда
		ЗаголовокЗаполнить = НСтр("ru = 'Подобрать товары по ордерам'");
	Иначе
		ЗаголовокЗаполнить = НСтр("ru = 'Подобрать товары по заказам/ордерам'");
	КонецЕсли;
	Элементы.ТоварыПодобратьТоварыПоЗаказамОрдерам.Заголовок = ЗаголовокЗаполнить;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,
																									Объект.НалогообложениеНДС,
																									ВалютаОплаты);
	
	Перечисления.ПорядокОплатыПоСоглашениям.ЗаполнитьВозможныеПорядкиОплаты(Объект.ВалютаВзаиморасчетов, Элементы.ПорядокОплаты, Объект.ПорядокОплаты);
	
КонецПроцедуры

&НаСервере
Процедура ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись()
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Объект.Курс, Объект.Кратность);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект.Товары,
			0,
			"СуммаВзаиморасчетов");
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Объект, "Товары", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Объект, "Товары");
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция РазрешеноОтклонениеОтУсловийЗакупок()
	Возврат ПраваПользователяПовтИсп.ОтклонениеОтУсловийЗакупок();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьВалюты(Форма)
	
	ПараметрыНадписиВалюты = ВзаиморасчетыКлиентСервер.ПараметрыНадписиВалюты();
	
	ПараметрыНадписиВалюты.ВалютаДокумента      = Форма.ВалютаДокумента;
	ПараметрыНадписиВалюты.ВалютаВзаиморасчетов = Форма.ВалютаВзаиморасчетовДокумента;
	ПараметрыНадписиВалюты.ВалютаРеглУчета      = Форма.ВалютаРегламентированногоУчета;
	ПараметрыНадписиВалюты.СуммаДокумента       = Форма.Объект.Товары.Итог("СуммаСНДС");
	ПараметрыНадписиВалюты.СуммаВзаиморасчетов  = Форма.Объект.Товары.Итог("СуммаВзаиморасчетов");
	ПараметрыНадписиВалюты.Курс                 = Форма.Объект.Курс;
	ПараметрыНадписиВалюты.Кратность            = Форма.Объект.Кратность;
	ПараметрыНадписиВалюты.НеПоказыватьРасчеты  = Форма.Объект.ХозяйственнаяОперация 
		= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо");
	
	Форма.НадписьВалюты = ВзаиморасчетыКлиентСервер.СформироватьНадписьВалюты(ПараметрыНадписиВалюты);
	
КонецПроцедуры

&НаСервере
Процедура ПоступлениеПоЗаказамПриИзмененииСервер()
	ВидимостьЭлементов = Объект.ПоступлениеПоЗаказам;
	
	Элементы.ТоварыОтвязатьОтЗаказа.Видимость = ВидимостьЭлементов;
	Элементы.ТоварыКонтекстноеМенюОтвязатьОтЗаказа.Видимость = ВидимостьЭлементов;
	Элементы.ТоварыИндексКартинки.Видимость = ВидимостьЭлементов;
	
	ПриИзмененииПоступленияПоНесколькимЗаказам();
	ОбновитьЗависимыеРеквизитыФормыСерверПоЗаказу();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиТовары(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(
		Объект.Товары,
		НадписьРасхождениеЗаказ, 
		Элементы.КартинкаРасхождениеЗаказ,
		Элементы.КартинкаРасхождениеЗаказы);
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа, Ложь);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентУТ.ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер()
	
	ИнтеграцияГИСМ_УТ.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(ЭтаФорма);
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

// ИнтеграцияЕГАИС
&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	Элементы.ТекстДокументаЕГАИС.Видимость = Объект.ЕстьАлкогольнаяПродукция;
	
	Строки = Новый Массив;
	Если Не Объект.ЕстьАлкогольнаяПродукция Тогда
		
		Строки.Добавить("");
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТТНВходящаяЕГАИС.Ссылка       КАК Ссылка,
		|	СтатусыДокументовЕГАИС.Статус КАК Статус
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|		ПО СтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
		|ГДЕ
		|	ТТНВходящаяЕГАИС.ДокументОснование = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'ТТН ЕГАИС (входящая): %1'"),
						Выборка.Статус),,
					ЦветаСтиля.ЦветГиперссылки,,
					ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
			Шаблон = НСтр("ru = 'Связать еще (%1)'");
		Иначе
			Шаблон = НСтр("ru = 'Связать с ТТН ЕГАИС (входящей) (%1)'");
		КонецЕсли;
		
		ВозможныеТТНЕГАИС = ВозможныеТТНЕГАИС(Объект.Организация, Объект.Склад, Объект.Контрагент);
		
		КоличествоНакладных = ВозможныеТТНЕГАИС.Количество();
		
		Если КоличествоНакладных > 0 Тогда
			Строки.Добавить("  ");
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						Шаблон,
						КоличествоНакладных),,
					ЦветаСтиля.ЦветГиперссылки,,
					"СвязатьСТТНЕГАИС"));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозможныеТТНЕГАИС(Организация, Склад, Контрагент)
	
	МассивПустыхЗначений = Новый Массив;
	МассивПустыхЗначений.Добавить(Неопределено);
	Для Каждого ТипыДокументаПоступления Из Метаданные.ОпределяемыеТипы.ОснованиеТТНВходящаяЕГАИС.Тип.Типы() Цикл
		МассивПустыхЗначений.Добавить(Документы[Метаданные.НайтиПоТипу(ТипыДокументаПоступления).Имя].ПустаяСсылка());
	КонецЦикла;
	
	Контрагенты = Новый Массив;
	Контрагенты.Добавить(Неопределено);
	Контрагенты.Добавить(Контрагент);
	Для Каждого ТипыКонтрагентов Из Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентЕГАИС.Тип.Типы() Цикл
		Контрагенты.Добавить(Справочники[Метаданные.НайтиПоТипу(ТипыКонтрагентов).Имя].ПустаяСсылка());
	КонецЦикла;
	
	СтатусыОтказа = Новый СписокЗначений;
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Отменен);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СтатусыОтказа.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
	|ГДЕ
	|	  ТТНВходящаяЕГАИС.Организация = &Организация
	|	И ТТНВходящаяЕГАИС.ТорговыйОбъект = &Склад
	|	И ТТНВходящаяЕГАИС.ДокументОснование В(&ПустойДокументОснование)
	|	И Не СтатусыДокументовЕГАИС.Статус В(&СтатусыОтказа)
	|	И (ТТНВходящаяЕГАИС.Поставщик.Контрагент В (&Контрагенты)
	|		ИЛИ ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент В (&Контрагенты))
	|");
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ПустойДокументОснование", МассивПустыхЗначений);
	Запрос.УстановитьПараметр("СтатусыОтказа",           СтатусыОтказа);
	Запрос.УстановитьПараметр("Контрагенты",             Контрагенты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
// Конец ИнтеграцияЕГАИС

&НаСервере
Функция ПолноеИмяДокумента()
	
	Возврат "Документ.ПриобретениеТоваровУслуг";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ХозяйственныеОперацииИмпорта()
	
	ХозяйственныеОперацииИмпорта = Новый Массив;
	ХозяйственныеОперацииИмпорта.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	ХозяйственныеОперацииИмпорта.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	
	Возврат ХозяйственныеОперацииИмпорта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ХозяйственныеОперацииВвозИзЕАЭС()
	
	ХозяйственныеОперацииВвозИзЕАЭС = Новый Массив;
	ХозяйственныеОперацииВвозИзЕАЭС.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	ХозяйственныеОперацииВвозИзЕАЭС.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	ХозяйственныеОперацииВвозИзЕАЭС.Добавить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	
	Возврат ХозяйственныеОперацииВвозИзЕАЭС;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ХозяйственныеОперацииРаздельнойЗакупки(ИспользоватьТоварыВПути = Истина,
		ИспользоватьНеотфактурованныеПоставки = Истина)
	
	ХозяйственныеОперацииРаздельнойЗакупки = Новый Массив;
	
	Если ИспользоватьТоварыВПути Тогда
		ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути"));
		ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
		ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки"));
		ХозяйственныеОперацииРаздельнойЗакупки.Добавить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	КонецЕсли;
	
	Возврат ХозяйственныеОперацииРаздельнойЗакупки;
	
КонецФункции

&НаСервере
Функция ВариантыОформленияЗакупок(ХозяйственнаяОперация)
	
	ИспользоватьТоварыВПутиОтПоставщиков  = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	
	ВариантыОформленияЗакупок = Новый Массив;
	
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки(Истина, Ложь);
		
		Если ХозяйственныеОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
			ВариантыОформленияЗакупок.Добавить(Перечисления.ВариантыОформленияЗакупок.ТоварыВПути);
			
			Возврат ВариантыОформленияЗакупок;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозяйственныеОперацииРаздельнойЗакупки = ХозяйственныеОперацииРаздельнойЗакупки(Ложь, Истина);
		
		Если ХозяйственныеОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
			ВариантыОформленияЗакупок.Добавить(Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки);
			
			Возврат ВариантыОформленияЗакупок;
		КонецЕсли;
	КонецЕсли;
	
	ВариантыОформленияЗакупок.Добавить(Перечисления.ВариантыОформленияЗакупок.НеРазделять);
	
	Возврат ВариантыОформленияЗакупок;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ИзмениласьВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов <> Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалюта = РезультатЗакрытия.Валюта <> Объект.Валюта;
		
		Объект.Валюта = РезультатЗакрытия.Валюта;
		
		Если ИзмениласьВалюта Тогда
			
			Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента) 
				И РезультатЗакрытия.НеобходимПересчетСуммДокумента Тогда
				
				ПриИзмененииВалютыСервер(Объект.Валюта);
				ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
				
			КонецЕсли;
			
			ВалютаДокумента = Объект.Валюта;
			
		КонецЕсли;
		
		Объект.ВалютаВзаиморасчетов = РезультатЗакрытия.ВалютаВзаиморасчетов;
		
		Если ИзмениласьВалютаВзаиморасчетов Тогда
			
			ЗаполнитьДоговорПоУмолчанию();
			ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
			ЗаполнитьПорядокОплатыПоУмолчанию();
			ОчиститьРасшифровкуПлатежа();
			
		КонецЕсли;
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРасшифровкуПлатежа(Безусловно = Ложь)
	
	Если Безусловно ИЛИ НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСводнуюИнформациюПоДоставке()
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект, Объект.ПоступлениеПоЗаказам,,СводнаяИнформацияПоДоставке);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// /* Storverk Тюняков 7121 Сверка по файлу поставщика
&НаСервере
Процедура ПолучитьТаблицуСверкиИзХранилища(АдресТоваровВХранилище)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	масСтрокНаУдаление = Новый Массив;	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		Если СтрокаТоваров.Действие = "<Оставить без изменений>" Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекущаяСтрока = Неопределено;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.НомерСтрокиИсходный) Тогда
			масСтрокПоНомеру = Объект.Товары.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки", СтрокаТоваров.НомерСтрокиИсходный));
			Если ЗначениеЗаполнено(масСтрокПоНомеру) Тогда
				ТекущаяСтрока = масСтрокПоНомеру[0];
			КонецЕсли;	
		КонецЕсли; 
		
		Если СтрокаТоваров.Действие = "Удалить строку" Тогда
			Если ТекущаяСтрока <> Неопределено тогда
				масСтрокНаУдаление.Добавить(ТекущаяСтрока);
			КонецЕсли;
			Продолжить;	
		КонецЕсли;	
		
		Если СтрокаТоваров.Действие = "Взять из файла" Тогда
			
			Если ТекущаяСтрока <> Неопределено Тогда
				
				// Изменение полей количества / цены по файлу
				Если ТекущаяСтрока.КоличествоУпаковок <> СтрокаТоваров.Количество_Файл Тогда
					
					ТекущаяСтрока.КоличествоУпаковок = СтрокаТоваров.Количество_Файл;    				
					
					СтруктураДействий = Новый Структура;
					ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
				КонецЕсли;
				
				Если ТекущаяСтрока.Цена <> СтрокаТоваров.Цена_Файл Тогда
					
					ТекущаяСтрока.Цена = СтрокаТоваров.Цена_Файл;    			
					
					СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
					СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
					СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
					СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
						Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару);
					
				КонецЕсли;	
				
			Иначе
				
				// Добавление строки из файла
				ТекущаяСтрока = Объект.Товары.Добавить();
				ТекущаяСтрока.Номенклатура			 = СтрокаТоваров.Номенклатура;
				ТекущаяСтрока.КоличествоУпаковок	 = СтрокаТоваров.Количество_Файл;
				ТекущаяСтрока.Цена					 = СтрокаТоваров.Цена_Файл;
				
				СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
				СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
				СтруктураДействий.Вставить(
					"ПроверитьСопоставленнуюНоменклатуруПоставщика",
					ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
					Объект,
					НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
				СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				//Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
				//	СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
				//Иначе
				//	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
				//КонецЕсли;
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
				СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
					Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
				СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
				
				СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
					ЭтаФорма.ИмяФормы, "Товары"));
				
				//ТоварыНоменклатураПриИзмененииСервер(ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
							
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
					ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
					ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
					ТекущаяСтрока.СписатьНаРасходы = Ложь;
					ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
					ТекущаяСтрока.АналитикаРасходов = Неопределено;
					ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
				ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
					ТекущаяСтрока.СписатьНаРасходы = Истина;
				КонецЕсли;
				
				Если НЕ ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
					ТекущаяСтрока.НомерГТД = Неопределено;
					ТекущаяСтрока.СтранаПроисхождения = Неопределено;
				КонецЕсли;
				
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого СтрокаНаУдаление Из масСтрокНаУдаление Цикл
	    Объект.Товары.Удалить(СтрокаНаУдаление);	
	КонецЦикла; 
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
		
КонецПроцедуры

// silber {

#Область Информация_о_товаре

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре()	
	 	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	
	МодульИнформации.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, Новый Структура("ТоварыФорма", "Объект.Товары"));
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка,,,"Объект.Товары");
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
	
КонецПроцедуры
 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	МодульИнформацииКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	МодульИнформацииКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры

#КонецОбласти

#Область Транспортные_раходы

&НаСервере
Процедура ИницилизироватьЭлементыТранспортныхРасходов()
	
	ГруппаТовары = Элементы.Найти("Товары");
	Если ГруппаТовары = Неопределено Тогда
		ВызватьИсключение "Не найдена элемент формы - товары. Проверте чтобы существовала табличная часть товары.";
	КонецЕсли;
	
	// По затратам наших водилов
	
	Элемент = Элементы.Добавить("АТ_МаршрутноеЗадание", Тип("ПолеФормы"), ГруппаТовары);
	Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
	Элемент.Заголовок 					= "Маршрутное задание";
	Элемент.ПутьКДанным 				= "Объект.Товары.АТ_МаршрутноеЗадание";
	
	КомандаФормы = Команды.Добавить("ТранспортныеРасходы");
	КомандаФормы.Действие = "ТранспортныеРасходыНачало";
	КомандаФормы.Заголовок = НСтр("ru='Заполнить задолженность по транспортным расходам'");
	КомандаФормы.Подсказка = НСтр("ru='Заполнить задолженность по транспортным расходам'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
	КомандаФормы.Картинка = БиблиотекаКартинок.Грузовик;
	
	Элемент = Элементы.Добавить("ТранспортныеРасходыКнопка", Тип("КнопкаФормы"), ГруппаТовары.КоманднаяПанель);
	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Элемент.ИмяКоманды = "ТранспортныеРасходы";
	
	// По экспедиторским распискам
	
	Элемент = Элементы.Добавить("АТ_ЭкспедиторскаяРасписка", Тип("ПолеФормы"), ГруппаТовары);
	Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
	Элемент.Заголовок 					= "Экспедиторская расписка";
	Элемент.ПутьКДанным 				= "Объект.Товары.АТ_ЭкспедиторскаяРасписка";
	
	Элемент = Элементы.Добавить("АТ_Документ", Тип("ПолеФормы"), ГруппаТовары);
	Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
	Элемент.Заголовок 					= "Документ расписки";
	Элемент.ПутьКДанным 				= "Объект.Товары.АТ_Документ";
	
	КомандаФормы = Команды.Добавить("ЭкпедиторскиеРасписки");
	КомандаФормы.Действие = "ЭкспеиторскиеРаспискиНачало";
	КомандаФормы.Заголовок = НСтр("ru='Заполнить задолженность по экспедиторским распискам'");
	КомандаФормы.Подсказка = НСтр("ru='Заполнить задолженность по экспедиторским распискам'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
	КомандаФормы.Картинка = БиблиотекаКартинок.Грузовик2;
	
	Элемент = Элементы.Добавить("ЭкспедиторскиеРасходыКнопка", Тип("КнопкаФормы"), ГруппаТовары.КоманднаяПанель);
	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Элемент.ИмяКоманды = "ЭкпедиторскиеРасписки";
		
КонецПроцедуры
&НаСервере
Функция ЕстьТакаяКолонка(ИмяКолонки)
	
	Видимость = Ложь;
	
	Для Каждого Строка Из Объект.Товары Цикл
		Если Не Строка[ИмяКолонки].Пустая() Тогда
			Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Видимость;
	
КонецФункции
&НаСервере
Процедура ОбновитьВидимостьТранспортныхРасходов()
	
	//Видимость = Ложь;
	//Если Не ТолькоПросмотр Тогда
	//	Для Каждого Строка Из Объект.Товары Цикл
	//		Если Не Строка.АТ_МаршрутноеЗадание.Пустая() Тогда
	//			Видимость = Истина;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	РаспВидимость = ЕстьТакаяКолонка("АТ_ЭкспедиторскаяРасписка");
	
	Элементы.АТ_МаршрутноеЗадание.Видимость 		= ЕстьТакаяКолонка("АТ_МаршрутноеЗадание");
	Элементы.АТ_ЭкспедиторскаяРасписка.Видимость 	= РаспВидимость;
	Элементы.АТ_Документ.Видимость 					= РаспВидимость;
	
	Элементы.ТранспортныеРасходыКнопка.Видимость 	= Не ТолькоПросмотр;
	Элементы.ЭкспедиторскиеРасходыКнопка.Видимость 	= Не ТолькоПросмотр;
	
КонецПроцедуры

#Область Транспортные_расходы

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВыбратьПериод()
	
	Возврат "выбрать период"; 
	
КонецФункции

&НаСервере
Функция текстПараметрДатаДляЗаполненияКурьера()
	
	//Возврат ?(Объект.Ссылка.Пустая() Или НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), "", "&Дата");
	Возврат "";
	
КонецФункции
&НаСервере
Процедура ЗаполнитьПоКурьеру(Курьер, Период = Неопределено)
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ
	|	Курьер				Курьер,
	|	МаршрутноеЗадание	АТ_МаршрутноеЗадание,
	|	&Товар 				Номенклатура,
	|	&Упаковка 			Упаковка,
	|	1 					Количество,
	|	1					КоличествоУпаковок,
	|	СуммаОстаток 		Цена,
	|	СуммаОстаток 		Сумма,
	|	СуммаОстаток 		СуммаСНДС,
	|	СуммаОстаток 		СуммаВзаиморасчетов,
	|	СуммаОстаток		СуммаСНДСБезВозвратнойТары,
	|	&СтавкаНДС 			СтавкаНДС,
	|	&Подразделение 		Подразделение,
	|	&СписатьНаРасходы 	СтатьяРасходов,
	|	Истина 				СписатьНаРасходы,
	|
	|	ЕСТЬNULL(МаршрутноеЗадание.ДокументОснование.ЗаказНаПеремещение.ДокументОснование.ДокументОснование, 
	|		МаршрутноеЗадание.ДокументОснование.ЗаказКлиента) АналитикаРасходов
	|ИЗ 
	|	РегистрНакопления.АТ_ТранспортныеЗатраты.Остатки(%1, Курьер = &Курьер %2)
	|ГДЕ
	|	СуммаОстаток > 0
	|", текстПараметрДатаДляЗаполненияКурьера(),
		?(Период = Неопределено, "", "И МаршрутноеЗадание.Дата МЕЖДУ &НачалоПериода И &КонецПериода")));
	
	Запрос.УстановитьПараметр("Дата", 				Объект.Дата);
	Запрос.УстановитьПараметр("Курьер", 			Курьер);
	Запрос.УстановитьПараметр("СтавкаНДС", 			Перечисления.СтавкиНДС.БезНДС);
	Запрос.УстановитьПараметр("Товар", 				Справочники.Номенклатура.ПолучитьСсылку(				Новый УникальныйИдентификатор("2f695096-c1e4-11e6-80f4-001dd8b75f1d")));
	Запрос.УстановитьПараметр("Упаковка", 			Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(	Новый УникальныйИдентификатор("54992250-978d-11e6-8111-00155dfa1a0a")));
	Запрос.УстановитьПараметр("Подразделение", 		Справочники.СтруктураПредприятия.ПолучитьСсылку(		Новый УникальныйИдентификатор("53ad548f-b55d-11e4-8ed0-001517b9d0ec")));
	Запрос.УстановитьПараметр("СписатьНаРасходы",	ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(	Новый УникальныйИдентификатор("dfd9acb7-848e-11e6-810a-00155dfa1a02")));
	
	Если Период <> Неопределено Тогда
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(Период.ДатаНачала));
		Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(Период.ДатаОкончания));
	КонецЕсли;
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	ОбновитьВидимостьТранспортныхРасходов();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСписокДолговПоКурьерам()
	
	// Возвращает список физ лиц курьеров по которым должны им
	
	Список = Новый СписокЗначений;
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ 	Курьер, СУММА(СуммаОстаток) Сумма, МИНИМУМ(МаршрутноеЗадание.Дата) ДатаНачала, МАКСИМУМ(МаршрутноеЗадание.Дата) ДатаОкончания
	|ИЗ 		РегистрНакопления.АТ_ТранспортныеЗатраты.Остатки(%1)
	|
	|СГРУППИРОВАТЬ ПО Курьер
	|УПОРЯДОЧИТЬ ПО Курьер.Наименование", текстПараметрДатаДляЗаполненияКурьера()));
					
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НачалоДня(Выборка.ДатаНачала) = НачалоДня(Выборка.ДатаОкончания) Тогда
			Список.Добавить(Выборка.Курьер, СтрШаблон("%1 %2р. [%3]", Выборка.Курьер, Выборка.Сумма, Формат(Выборка.ДатаНачала, "ДЛФ=DD")));
		Иначе
			Список.Добавить(Выборка.Курьер, ?(Выборка.ДатаНачала = Выборка.ДатаОкончания,
									СтрШаблон("%1 %2р. [%3]", Выборка.Курьер, Выборка.Сумма, Формат(Выборка.ДатаНачала, "ДЛФ=DD")),
									СтрШаблон("%1 %2р. [%3] - [%4]", Выборка.Курьер, Выборка.Сумма, Формат(Выборка.ДатаНачала, "ДЛФ=DD"), Формат(Выборка.ДатаОкончания, "ДЛФ=DD"))));
			Список.Добавить(Выборка.Курьер, СтрШаблон("%1 %2", Выборка.Курьер, ТекстВыбратьПериод()));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ТранспортныеРасходыНачало(Кнопка)
	
	Список = ПолучитьСписокДолговПоКурьерам();
	Если Список.Количество() Тогда
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВыбранКурьер", ЭтаФорма), ПолучитьСписокДолговПоКурьерам(), Список);
	Иначе
		ПоказатьОповещениеПользователя("Никого нет",,"Проверяйте задолженность и дату документа", БиблиотекаКартинок.Грузовик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранПериодКурьера(Период, Курьер) Экспорт
	
	Если Период <> Неопределено Тогда
		ЗаполнитьПоКурьеру(Курьер, Период);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбранКурьер(ВыбКурьер, ДопПараметры) Экспорт
	
	Если ВыбКурьер <> Неопределено Тогда
		
		Если СтрЗаканчиваетсяНа(ВыбКурьер.Представление, ТекстВыбратьПериод()) Тогда
			
			стандПериод = Новый ДиалогРедактированияСтандартногоПериода;
			стандПериод.Показать(Новый ОписаниеОповещения("ВыбранПериодКурьера", ЭтаФорма, ВыбКурьер.Значение));
			
		Иначе
			ЗаполнитьПоКурьеру(ВыбКурьер.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Экспедиторские_расписки

&НаСервере
Процедура ЗаполнитьПоЭкспедиторскимРаспискам()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭкспедиторскаяРасписка	АТ_ЭкспедиторскаяРасписка,
	|	МаршрутноеЗадание		АТ_МаршрутноеЗадание,
	|	Документ				АТ_Документ,
	|	&Товар 					Номенклатура,
	|	&Упаковка 				Упаковка,
	|	1 						Количество,
	|	1						КоличествоУпаковок,
	|	СуммаОстаток 			Цена,
	|	СуммаОстаток 			Сумма,
	|	СуммаОстаток 			СуммаСНДС,
	|	СуммаОстаток 			СуммаВзаиморасчетов,
	|	СуммаОстаток			СуммаСНДСБезВозвратнойТары,
	|	&СтавкаНДС 				СтавкаНДС,
	|	&Подразделение 			Подразделение,
	|	&СписатьНаРасходы 		СтатьяРасходов,
	|	Истина 					СписатьНаРасходы,
	|
	|	ЕСТЬNULL(КП.Заказ, Документ.ЗаказКлиента) АналитикаРасходов
	|ИЗ 
	|	РегистрНакопления.АТ_ЭкспедиторскиеРасписки.Остатки(, ТК = &Партнер) Эксп
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ 	
	|		(
	|			ВЫБРАТЬ
	|				КП ДокКп,
	|				МАКСИМУМ(ВЫБОР КОГДА СвязанныйДокумент ССЫЛКА Документ.ЗаказКлиента ТОГДА СвязанныйДокумент ИНАЧЕ null КОНЕЦ) Заказ,
	|				МАКСИМУМ(ВЫБОР КОГДА ДокументРезультат ССЫЛКА Документ.ПеремещениеТоваров ТОГДА ДокументРезультат ИНАЧЕ null КОНЕЦ) Перемещение
	|			ИЗ
	|				РегистрСведений.АТ_СвязьОбъектовКП
	|			СГРУППИРОВАТЬ ПО КП
	|		) КП
	|ПО 
	|	Эксп.Документ = КП.Перемещение
	|
	|ГДЕ
	|	СуммаОстаток > 0
	|");
	
	Запрос.УстановитьПараметр("Партнер", 			Объект.Партнер);
	Запрос.УстановитьПараметр("СтавкаНДС", 			Договор.СтавкаНДС);
	Запрос.УстановитьПараметр("Товар", 				Справочники.Номенклатура.ПолучитьСсылку(				Новый УникальныйИдентификатор("2f695096-c1e4-11e6-80f4-001dd8b75f1d")));
	Запрос.УстановитьПараметр("Упаковка", 			Справочники.УпаковкиЕдиницыИзмерения.ПолучитьСсылку(	Новый УникальныйИдентификатор("54992250-978d-11e6-8111-00155dfa1a0a")));
	Запрос.УстановитьПараметр("Подразделение", 		Справочники.СтруктураПредприятия.ПолучитьСсылку(		Новый УникальныйИдентификатор("53ad548f-b55d-11e4-8ed0-001517b9d0ec")));
	Запрос.УстановитьПараметр("СписатьНаРасходы",	ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(	Новый УникальныйИдентификатор("245c9b33-ad21-11e8-90ea-107b44b1d9a3")));
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	ОбновитьВидимостьТранспортныхРасходов();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры
&НаСервере
Процедура ПересчитатьНДС(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ПараметрыПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры
&НаКлиенте
Процедура ЭкспеиторскиеРаспискиНачало(Кнопка)
	
	ЗаполнитьПоЭкспедиторскимРаспискам();
	ПересчитатьНДС(КэшированныеЗначения);
	
	//ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	//РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

// } silber