#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//								Конструктор структуры: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа().
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
		ЗаполнитьЗначенияСвойств(СтруктураКорректировкиСтрокЗаказа, ДополнительныеПараметры);
		
		Если СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки 
			ИЛИ СтруктураКорректировкиСтрокЗаказа.СкорректироватьМерныеТовары Тогда
			СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
			СтруктураРезультата = СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлена сборка или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа()
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	СтруктураВозврата = Новый Структура("КоличествоСтрок, СуммаОтклонения",0,0);
	
	ПричинаОтмены                = СтруктураПараметров.ПричинаОтмены;
	ОтменитьНеотработанныеСтроки = СтруктураПараметров.ОтменитьНеотработанныеСтроки;
	СкорректироватьМерныеТовары  = СтруктураПараметров.СкорректироватьМерныеТовары;
	ПроверятьОстатки             = СтруктураПараметров.ПроверятьОстатки;
	
	ОтменятьТолькоМТВПределахДопустимыхОтклонений = НЕ ОтменитьНеотработанныеСтроки 
													И СкорректироватьМерныеТовары;
	
	Если ОтменятьТолькоМТВПределахДопустимыхОтклонений Тогда
		ДопустимыеОтклонения = Документы.ЗаказНаСборку.ДопустимыеОтклоненияМерныхТоваров(ЭтотОбъект.Ссылка);
	Иначе
		ДопустимыеОтклонения = Неопределено;
	КонецЕсли;
	
	КомплектыПересчитаны = Документы.ЗаказНаСборку.СкорректироватьКомплектыСервер(ЭтотОбъект, ДопустимыеОтклонения,
																					ОтменитьНеотработанныеСтроки);
	
	Если КомплектыПересчитаны Тогда
		КоличествоСкорректированныхСтрок = 1;
	Иначе
		КоличествоСкорректированныхСтрок = 0;
	КонецЕсли;
	
	СвойстваОтмененнойСтроки = Новый Структура("Отменено, СтатусУказанияСерий", Истина, 0);
	
	Если Не ПроверятьОстатки Тогда
		
		Для каждого СтрокаТовары из Товары Цикл
			
			Если Не СтрокаТовары.Отменено Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СвойстваОтмененнойСтроки);
				КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураВозврата.КоличествоСтрок = КоличествоСкорректированныхСтрок;
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат Документы.ЗаказНаСборку.ОтменитьНеотработанныеСтроки(ЭтотОбъект,
				ОтменитьНеотработанныеСтроки,
				КомплектыПересчитаны,
				ОтменятьТолькоМТВПределахДопустимыхОтклонений,
				СкорректироватьМерныеТовары);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;


	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Объект";	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

	// Проверка количества в т.ч. товар
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ВсеСтрокиОтменены = Истина;
	Для Каждого СтрокаТаблицы Из Товары Цикл
		ВсеСтрокиОтменены = ВсеСтрокиОтменены И СтрокаТаблицы.Отменено;
	КонецЦикла;

	Если НачалоСборкиРазборки > ОкончаниеСборкиРазборки Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания сборки/разборки меньше даты начала сборки/разборки'"),
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда

		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОкончаниеСборкиРазборки) 
		И ОкончаниеСборкиРазборки < НачалоДня(Дата) 
		И Не ВсеСтрокиОтменены Тогда

		ТекстОшибки = НСтр("ru='Дата окончания сборки/разборки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(НачалоСборкиРазборки) 
		И НачалоСборкиРазборки < НачалоДня(Дата) 
		И Не ВсеСтрокиОтменены Тогда

		ТекстОшибки = НСтр("ru='Дата начала сборки/разборки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"НачалоСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	// Проверка характеристики в шапке.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");

	КонецЕсли;
		
	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	
	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указан товар ""%НазваниеТовара%"".
		|Один и тот же товар не может являться и комплектом, и комплектующей одновременно.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%",	НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
	
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТЧ.НомерСтроки,"Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ВариантОбеспечения");
	КонецЕсли;
	
	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Отказ, МассивНепроверяемыхРеквизитов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка, Отказ, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;

	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	ПараметрыСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Объект";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	ШаблонНазначения = Документы.ЗаказНаСборку.ШаблонНазначения(ЭтотОбъект);
	ПерегенерацияНазначения = Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
		?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров, НазначениеТовары, Назначение),
		ШаблонНазначения, ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	Если ПерегенерацияНазначения Тогда
		ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВСборке.Получить()
			<> Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Добавление заказа для расчета состояний необходимо для тех случаев когда, например, для всех товаров указан способ обеспечения "Не обеспечивать".
	// При таком способе обеспечения документ не делает движений по тем регистрам, которые добавили бы заказ для расчета самостоятельно.
	ПроведениеСерверУТ.ДобавитьЗаказДляРасчетаСостояний(ДополнительныеСвойства, Ссылка);
	
	ШаблонНазначения = Документы.ЗаказНаСборку.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(
		?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров, НазначениеТовары, Назначение),
		ШаблонНазначения, ЭтотОбъект, Склад);
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;

	// При отмене проведения или установке пометки на удаление проведенного документа необходим вызов пересчета состояний, для удаления записи по текущему документу
	// из регистра сведений СостоянияВнутреннихЗаказов. Корректный пересчет состояния возможен в том случае, когда у документа уже установлен (записан) признак Проведен = Ложь
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ДокументОснование       = Неопределено;
	НачалоСборкиРазборки    = Дата(1, 1, 1);
	ОкончаниеСборкиРазборки = Дата(1, 1, 1);
	ЖелаемаяДатаПоступления = Дата(1, 1, 1);
	МаксимальныйКодСтроки   = 0;
	КоличествоУпаковокОтменено = 0;
	КоличествоОтменено = 0;
	
	Для каждого СтрокаТовары Из Товары Цикл
		
		СтрокаТовары.Отменено = Ложь;
		СтрокаТовары.КодСтроки = 0;
		СтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
		
	КонецЦикла;
	
	Назначение       = Неопределено;
	НазначениеТовары = Неопределено;
	
	Серии.Очистить();

	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ЗаказНаСборку.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьОсновнуюКомплектацию(
			Номенклатура, Характеристика);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Товары") Тогда
		ЭтотОбъект.Товары.Загрузить(ДанныеЗаполнения.Товары);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантКомплектации) Тогда
		
		Реквизиты = "";
		Если НЕ ЗначениеЗаполнено(ДлительностьСборкиРазборки) Тогда
			Реквизиты = Реквизиты + ?(ЗначениеЗаполнено(Реквизиты), ", ", "") + "ДлительностьСборкиРазборки";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Количество) И НЕ ЗначениеЗаполнено(КоличествоУпаковок) Тогда
			Реквизиты = Реквизиты + ?(ЗначениеЗаполнено(Реквизиты), ", ", "") + "Количество, КоличествоУпаковок, Упаковка";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты) Тогда
		
			ПараметрыВариантаКомплектаций = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантКомплектации, Реквизиты);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыВариантаКомплектаций);
		
		КонецЕсли;
		
	КонецЕсли;
	
	// НачалоСборкиРазборки и ОкончаниеСборкиРазборки расчитываются только если они не заполнены.
	// При формировании заказов на сборку (разборку) из рабочего места формирования заказов по планам сборки (разборки)
	// НачалоСборкиРазборки и ОкончаниеСборкиРазборки расчитываются по календарю.
	Если ЗначениеЗаполнено(ДлительностьСборкиРазборки)
		И (Не ЗначениеЗаполнено(НачалоСборкиРазборки)
		Или Не ЗначениеЗаполнено(ОкончаниеСборкиРазборки))Тогда
		
		Если ЗначениеЗаполнено(НачалоСборкиРазборки) Тогда
			
			ОкончаниеСборкиРазборки = НачалоСборкиРазборки + ДлительностьСборкиРазборки * 86400;
			
		ИначеЕсли ЗначениеЗаполнено(ОкончаниеСборкиРазборки) Тогда
			
			НачалоСборкиРазборки = ОкончаниеСборкиРазборки - ДлительностьСборкиРазборки * 86400;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НачалоСборкиРазборки) И ЗначениеЗаполнено(ОкончаниеСборкиРазборки) Тогда
		
		ДлительностьСборкиРазборки = (ОкончаниеСборкиРазборки - НачалоСборкиРазборки) / 86400;
		
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("Товары") Тогда
	
		ЗаполнитьТоварыПоВариантуКомплектации();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус        КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен      КАК Проведен,
	|	ЗаказКлиента.Организация   КАК Организация,
	|	ЗаказКлиента.Сделка        КАК Сделка,
	|	ЗаказКлиента.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат
	|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ                      КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация             = Реквизиты.Организация;
	Сделка                  = Реквизиты.Сделка;
	ДокументОснование       = ЗаказКлиента;
	Подразделение           = Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	
	//Заполнение табличной части.
	ПараметрыТаблицыТовары = ОбеспечениеСервер.ПараметрыТаблицыОстатковПоЗаказу();
	ПараметрыТаблицыТовары.ПолучатьУслуги = Ложь;
	ПараметрыТаблицыТовары.ПолучатьРаботы = Ложь;
	ТаблицаТовары = ОбеспечениеСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, ПараметрыТаблицыТовары);
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицаТовары[0]);
		
		ЭтотОбъект.ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьОсновнуюКомплектацию(
			Номенклатура, Характеристика);
		
		Если ЗначениеЗаполнено(ЭтотОбъект.ВариантКомплектации) Тогда
			ЭтотОбъект.ДлительностьСборкиРазборки = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ВариантКомплектации, "ДлительностьСборкиРазборки");
		КонецЕсли;
		
		ЭтотОбъект.ЗаполнитьТоварыПоВариантуКомплектации();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(Товары);
	
	// Заполнение варианта обеспечения разбираемого комплекта.
	ТаблицаИзОбъекта = Новый ТаблицаЗначений();
	ТаблицаИзОбъекта.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ЗаполнитьЗначенияСвойств(ТаблицаИзОбъекта.Добавить(), ЭтотОбъект);
	
	ТаблицаИзОбъекта.Колонки.Добавить("ВариантОбеспечения");
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ТаблицаИзОбъекта);
	
	ВариантОбеспечения = ТаблицаИзОбъекта[0].ВариантОбеспечения;
	
	ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВСборке.Получить()
		<> Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" комплектующими,
// полученными по основному варианту комплектации.
//
Процедура ЗаполнитьТоварыПоВариантуКомплектации() Экспорт
	
	Товары.Загрузить(Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(ВариантКомплектации, , Количество));

КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыНаСборку);
	КонецЕсли;
	
	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// Проверяет возможность проведения документа в статусе "Закрыт".
//
// Параметры:
//  Отказ	 - Булево - параметр "Отказ" обработки проведения
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)

	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки");
	
	Если Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт
		И КонтролироватьОтгрузку Тогда
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа", Истина);
		
		Запрос = Документы.ЗаказНаСборку.СформироватьЗапросПроверкиПриСменеСтатуса(Массив, "Закрыт", ДополнительныеПараметры);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаОтгрузка = Результат.Выбрать();
		
		Пока ВыборкаОтгрузка.Следующий() Цикл
			
			ПроверкаПройдена = Документы.ЗаказНаСборку.ПроверкаПередСменойСтатуса(ВыборкаОтгрузка, Статус, ДополнительныеПараметры);
			Если Не ПроверкаПройдена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли