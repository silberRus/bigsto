#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаказНаПеремещение.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.СборкаТоваров.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на сборку (разборку)".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаСборку.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаСборку);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаСборку";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаСборку - список заказов для определения допустимых отклонений
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Заказ                - ДокументСсылка.ЗаказНаСборку
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ТипСборки            - ПеречислениеСсылка.ТипыДвиженияЗапасов
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(Знач СписокРаспоряжений) Экспорт
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если МассивРаспоряжений = Неопределено Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ТипСборки");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ЗаказНаСборку  КАК Заказ,
	|	ТоварыКПоступлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.ТипСборки      КАК ТипСборки,
	|	ТоварыКПоступлению.Серия          КАК Серия,
	|	СУММА(ТоварыКПоступлению.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.Обороты(&НачПериод, &КонПериод,,
	|		ЗаказНаСборку В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ЗаказНаСборку,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.ТипСборки,
	|	ТоварыКПоступлению.Серия";
		
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаСборку",
																"ЗаказНаСборку В (&МассивРаспоряжений)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Возвращает таблицу превышений оформления по заказу.
//
//	Параметры:
//		ЗаказСсылка - ДокументСсылка.ЗаказНаСборку - Заказ, для которого требуется определить превышения.
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ТипСборки            - ПеречислениеСсылка.ТипыДвиженияЗапасов
//		* Количество           - Число
//
Функция ПревышенияОформленияПоЗаказу(ЗаказСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура        КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика      КАК Характеристика,
	|	ТаблицаОстатки.ТипСборки           КАК ТипСборки,
	|	ТаблицаОстатки.Серия               КАК Серия,
	|	ТаблицаОстатки.КодСтроки           КАК КодСтроки,
	|	-ТаблицаОстатки.КОформлениюОстаток КАК Количество
	|ИЗ 
	|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку = &Заказ) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.КОформлениюОстаток < 0");
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область РасчетСостояний

// Возвращает структуру параметров для расчета состояния выполнения заказа в списке заказов.
// 
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//    * МодульОстаткиЗаказов         - РегистрНакопленияМенеджер.ЗаказыНаСборку - 
//    * КонтролироватьЗакрытиеЗаказа - Булево - 
//    * СтатусВПроцессеПоступления   - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//    * СтатусВПроцессеОтгрузки      - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//    * СтатусГотовКОтгрузке         - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//
Функция ПараметрыДляРасчетаСостояний() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("МодульОстаткиЗаказов", РегистрыНакопления.ЗаказыНаСборку);
	Структура.Вставить("КонтролироватьЗакрытиеЗаказа",
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки"));
	Структура.Вставить("СтатусВПроцессеПоступления", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеСборки);
	Структура.Вставить("СтатусВПроцессеОтгрузки", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеСборки);
	Структура.Вставить("СтатусГотовКОтгрузке", Перечисления.СостоянияВнутреннихЗаказов.ГотовКСборке);
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру, содержащую тексты запросов временных таблиц для расчета состояния выполнения заказа в списке заказов.
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ВременныеТаблицыДокументаДляРасчетаСостояний() Экспорт
	
	ТекстЗапросаТовары =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Документ.НачалоСборкиРазборки   КАК ДатаОтгрузки,
		|	Таблица.ВариантОбеспечения      КАК ВариантОбеспечения,
		|	Документ.Склад                  КАК Склад,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|
		|	ВЫБОР КОГДА Документ.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|				И НЕ Документ.ОбосабливатьПоНазначениюЗаказа ТОГДА
		|				Документ.Назначение
		|			ИНАЧЕ
		|				Документ.НазначениеТовары
		|		КОНЕЦ                       КАК Назначение,
		|	
		|	ИСТИНА                          КАК ЭтоТовар,
		|	Таблица.Количество              КАК Количество
		|	
		|ПОМЕСТИТЬ ВтТоварыДокумента
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Документ
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И НЕ Таблица.Отменено
		|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Таблица.НачалоСборкиРазборки    КАК ДатаОтгрузки,
		|	Таблица.ВариантОбеспечения      КАК ВариантОбеспечения,
		|	Таблица.Склад                   КАК Склад,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|
		|	Таблица.Назначение              КАК Назначение,
		|	
		|	ИСТИНА                          КАК ЭтоТовар,
		|	Таблица.Количество - Таблица.КоличествоОтменено КАК Количество
		|	
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.Количество - Таблица.КоличествоОтменено > 0
		|	И Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)";
	
	ТекстЗапросаРеквизиты =
		"ВЫБРАТЬ
		|	Таблица.Ссылка            КАК Ссылка,
		|	Таблица.Проведен          КАК Проведен,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению) ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ                 КАК СтатусКОтгрузке,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                 КАК СтатусЗакрыт
		|	
		|ПОМЕСТИТЬ ВтРеквизитыДокумента
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)";
	
	Результат = Новый Структура("ТоварыДокумента, РеквизитыДокумента", ТекстЗапросаТовары, ТекстЗапросаРеквизиты);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.ЗаказНаСборку КАК ЗаказНаСборку
		|ПОМЕСТИТЬ втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку В (&МассивДокументов)) КАК Остатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Остатки.ЗаказНаСборку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ПОМЕСТИТЬ втОстаткиПоОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивДокументов)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|ПОМЕСТИТЬ втОстаткиПоПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивДокументов)) КАК ТоварыКПоступлениюОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ТаблицаДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		//  Если хотя бы один регистр имеет остатки, работа по документу не завершена
		|	ВЫБОР
		|			КОГДА втОстаткиПоЗаказам.ЗаказНаСборку ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоОтгрузке.ДокументОтгрузки ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоПоступлению.ДокументПоступления ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоЗаказам КАК втОстаткиПоЗаказам
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказНаСборку
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоОтгрузке КАК втОстаткиПоОтгрузке
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоОтгрузке.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоПоступлению КАК втОстаткиПоПоступлению
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоПоступлению.ДокументПоступления
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ТаблицаДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполнен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок") Тогда
		
		ОформленоКомплектов = ОформленоКомплектов(ВыборкаПроверки.Ссылка);
		
		Если ОформленоКомплектов = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к.'") + " ";
			
			Если ВыборкаПроверки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
				ТекстОшибкиЗавершение = НСтр("ru = 'не предусмотрена возможность отмены неотработанных комплектов для документа, по которому не собран ни один комплект.
					|Полная отмена сборки возможна путем распроведения документа.'");
			Иначе
				ТекстОшибкиЗавершение = НСтр("ru = 'не предусмотрена возможность отмены неотработанных комплектов для документа, по которому не разобран ни один комплект.
					|Полная отмена разборки возможна путем распроведения документа.'");
			КонецЕсли;
				
			ТекстОшибки = ТекстОшибки + ТекстОшибкиЗавершение;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,ХозяйственнаяОперация,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// 
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Шапка = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	Шапка.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Шапка.ИспользоватьСерииНоменклатуры  = Ложь;
		Шапка.УчитыватьСебестоимостьПоСериям = Ложь;
		Шапка.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	Иначе
		Шапка.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		Шапка.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		Шапка.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки);
		Шапка.ИменаПолейДополнительные.Добавить("ВариантОбеспечения");
		Шапка.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		Шапка.ПоляСвязи.Добавить("Назначение");
	КонецЕсли;
	
	Шапка.ЭтоЗаказ = Истина;
	Шапка.ПланированиеОтгрузки = Истина;
	Шапка.РегистрироватьСерии = Ложь;
	Шапка.ТоварВШапке = Истина;
	Шапка.Дата = Объект.Дата;
	
	ТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ТЧ.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ТЧ.ИмяТЧСерии = "Товары";
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		ТЧ.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		ТЧ.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки);
	Иначе
		ТЧ.ИспользоватьСерииНоменклатуры  = Ложь;
		ТЧ.УчитыватьСебестоимостьПоСериям = Ложь;
		ТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	КонецЕсли;	
	
	ТЧ.ЭтоЗаказ = Истина;
	ТЧ.ПланированиеОтгрузки = Истина;
	ТЧ.РегистрироватьСерии = Ложь;
	ТЧ.ТоварВШапке = Ложь;
	ТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий = Новый Структура;
	
	ПараметрыУказанияСерий.Вставить("Шапка",Шапка);
	ПараметрыУказанияСерий.Вставить("ТЧ",ТЧ);	
	
	Возврат ПараметрыУказанияСерий;

КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Серия,
			|	Товары.Отменено,
			|	Товары.ВариантОбеспечения,
			|	Товары.Количество,
			|	Товары.СтатусУказанияСерий,
			|	Товары.НомерСтроки
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
			|	ВЫБОР
			|		КОГДА Товары.Отменено
			|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
			|				ИЛИ НЕ Товары.ВариантОбеспечения В (
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|			ТОГДА 0
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 14
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 15
			|					ИНАЧЕ 13
			|				КОНЕЦ
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 10
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 11
			|					ИНАЧЕ 9
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Статусы
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
			|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
			|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Статусы.НомерСтроки КАК НомерСтроки,
			|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ИЗ
			|	Статусы КАК Статусы
			|ГДЕ
			|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		Иначе
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Товары.Номенклатура,
			|	Товары.Серия,
			|	Товары.Отменено,
			|	Товары.Количество,
			|	Товары.СтатусУказанияСерий,
			|	Товары.НомерСтроки,
			|	Товары.ВариантОбеспечения
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Серии.Количество
			|ПОМЕСТИТЬ Серии
			|ИЗ
			|	&Серии КАК Серии
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
			|	ВЫБОР
			|		КОГДА Товары.Отменено
			|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
			|				ИЛИ НЕ Товары.ВариантОбеспечения В (
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
			|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
			|			ТОГДА 0
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|						ТОГДА 14
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|						ТОГДА 15
			|					ИНАЧЕ 13
			|				КОНЕЦ
			|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
			|			ТОГДА ВЫБОР
			|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
			|							И ЕСТЬNULL(Серии.Количество, 0) = 0
			|						ТОГДА 11
			|					КОГДА Товары.Количество = ЕСТЬNULL(Серии.Количество, 0)
			|							И Товары.Количество > 0
			|						ТОГДА 10
			|					ИНАЧЕ 9
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СтатусУказанияСерий
			|ПОМЕСТИТЬ Статусы
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ СУММА(Серии.Количество) КАК Количество ИЗ Серии КАК Серии) КАК Серии
			|			ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
			|			ПО (ПолитикиУчетаСерий.Склад = &Склад)
			|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Статусы.НомерСтроки КАК НомерСтроки,
			|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
			|ИЗ
			|	Статусы КАК Статусы
			|ГДЕ
			|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Создает в менеджере таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказНаСборку - документ, по которому создаются временные таблицы
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.ЗаказНаСборку.Склад КАК Склад,
	|	Заказы.ЗаказНаСборку.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА Заказы.ЗаказНаСборку.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ Заказы.ЗаказНаСборку.ОбосабливатьПоНазначениюЗаказа ТОГДА
	|			Заказы.ЗаказНаСборку.Назначение
	|		ИНАЧЕ
	|			Заказы.ЗаказНаСборку.НазначениеТовары
	|	КОНЕЦ КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку.Товары КАК Товары
	|		ПО Заказы.ЗаказНаСборку = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|			И (Заказы.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка))
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.ЗаказНаСборку.Склад,
	|	Заказы.ЗаказНаСборку.Подразделение,
	|	ВЫБОР КОГДА Заказы.ЗаказНаСборку.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И НЕ Заказы.ЗаказНаСборку.ОбосабливатьПоНазначениюЗаказа ТОГДА
	|			Заказы.ЗаказНаСборку.Назначение
	|		ИНАЧЕ
	|			Заказы.ЗаказНаСборку.НазначениеТовары
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Ссылка.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Упаковка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает признак наличия права на добавление документа у текущего пользователя
//
// Параметры:
//
// Возвращаемое значение:
//  Булево - истина, если право добавления документа есть у текущего пользователя, ложь, если такого права нет.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаСборку);
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
// 
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//     * ВыводитьТаблицыОбеспечение         - Число - 
//     * ВыводитьТаблицыОтгрузка            - Число - 
//     * ВыводитьТаблицыПоступление         - Число - 
//     * ВыводитьТаблицыОтмененоОтгрузка    - Число - 
//     * ВыводитьТаблицыОтмененоПоступление - Число - 
//     * ЭтоЗаказ                           - Булево - 
//     * ТекстТоварУслугаОтгрузка           - Строка - 
//     * ТекстТоварУслугаПоступление        - Строка - 
//     * ИмяРегистраПоступлениеУслуг        - Строка - 
//     * СтруктураДопЗапросов               - Структура - содержит следующие ключи:
//        ** ТекстЗапросаТаблицаНеобеспеченныеТовары          - Строка - 
//        ** ТекстЗапросаТаблицаСостояниеОбеспечения          - Строка - 
//        ** ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено   - Строка - 
//        ** ТекстЗапросаВТТоварыПоступление                  - Строка - 
//        ** ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ - Строка - 
//        ** ТекстЗапросаТаблицаОтмененоОтгрузка              - Строка - 
//        ** ТекстЗапросаТаблицаОтмененоПоступление           - Строка - 
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 4);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 5);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ИмяРегистраПоступлениеУслуг", "ЗаказыНаСборку");
	
	ТаблицаНеобеспеченныеТовары = ТаблицаНеобеспеченныеТоварыДляОтчетаСостояниеВыполнения();
	ТаблицаСостояниеОбеспечения = ТаблицаСостояниеОбеспеченияДляОтчетаСостояниеВыполнения();
	ВТТоварыРаспоряжениеЗаказОтгружено = ВременнаяТаблицаТоварыРаспоряжениеЗаказОтгруженоДляОтчетаСостояниеВыполнения();
	ВТТоварыПоступление = ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения();
	ВТТоварыРаспоряженияПоступлениеЗаказ = ВременнаяТаблицаТоварыРаспоряженияПоступлениеЗаказДляОтчетаСостояниеВыполнения();
	ТаблицаОтмененоОтгрузка = ТаблицаОтмененоОтгрузкаДляОтчетаСостояниеВыполнения();
	ТаблицаОтмененоПоступление = ТаблицаОтмененоПоступлениеДляОтчетаСостояниеВыполнения();
	
	СтруктураДопЗапросов = Новый Структура();
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаНеобеспеченныеТовары",          ТаблицаНеобеспеченныеТовары);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаСостояниеОбеспечения",          ТаблицаСостояниеОбеспечения);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряжениеЗаказОтгружено",   ВТТоварыРаспоряжениеЗаказОтгружено);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыПоступление",                  ВТТоварыПоступление);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ВТТоварыРаспоряженияПоступлениеЗаказ);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаОтмененоОтгрузка",              ТаблицаОтмененоОтгрузка);
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаОтмененоПоступление",           ТаблицаОтмененоПоступление);
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	
	// Потребности в комплектах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Назначение", "Комплекты");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Склад";
	
	// Потребности в комплектующих на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Комплектующие");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

//Используется для получения данных из заказов на сборку/разборку, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
//                          1) источнике данных о потребности:
//                          - "Заказ", "КодСтроки", "НомерСтроки",
//                          2) аналитики потребности:
//                          - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
//                          3) текущем варианте обеспечения:
//                          - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
//                          4) общих для заказа параметрах обеспечения:
//                          - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
//                          5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
//                          - "Упаковка", "Дата", "Статус", "СтатусИспользуется", "Дата".
//                          
//                          "Количество" - количество из заказа, по которому не оформлена накладная,
//                          поступает из таблицы "ВтРегистрЗаказыКлиентов", где предварительно рассчитывается
//                          по ресурсу "Заказано", регистра накопления "ЗаказыКлиентов".
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт

	ТекстЗапроса =
	//Потребности в материалах для сборки
	"ВЫБРАТЬ
	|	Т.Ссылка                              КАК Заказ,
	|	Т.КодСтроки                           КАК КодСтроки,
	|	Т.НомерСтроки                         КАК НомерСтроки,
	|	0                                     КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО                          КАК Продукция,
	|	НЕОПРЕДЕЛЕНО                          КАК Этап,
	|	0                                     КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура                        КАК Номенклатура,
	|	Т.Характеристика                      КАК Характеристика,
	|	ТаблицаДокумента.Склад                КАК Склад,
	|	ВЫБОР КОГДА ТаблицаДокумента.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИЛИ ТаблицаДокумента.ОбосабливатьПоНазначениюЗаказа ТОГДА
	|			ТаблицаДокумента.НазначениеТовары
	|		ИНАЧЕ
	|			ТаблицаДокумента.Назначение
	|		КОНЕЦ                             КАК Назначение,
	|	ТаблицаДокумента.Подразделение        КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
	|	ТаблицаДокумента.НачалоСборкиРазборки КАК ДатаОтгрузки,
	|	Т.Упаковка                            КАК Упаковка,
	|	
	|	Т.Количество                          КАК Количество,
	|	
	|	ВЫБОР КОГДА ТаблицаДокумента.ЖелаемаяДатаПоступления <=&НачалоТекущегоДня ТОГДА
	|				&НачалоТекущегоДня
	|			КОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ЖелаемаяДатаПоступления, ДЕНЬ, - ТаблицаДокумента.ДлительностьСборкиРазборки) < &НачалоТекущегоДня ТОГДА
	|				&НачалоТекущегоДня
	|			ИНАЧЕ
	|				ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ЖелаемаяДатаПоступления, ДЕНЬ, - ТаблицаДокумента.ДлительностьСборкиРазборки)
	|		КОНЕЦ                             КАК ЖелаемаяДатаОтгрузки,
	|
	|	ИСТИНА                                КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата                 КАК Дата,
	|	NULL                                  КАК Партнер,
	|	ТаблицаДокумента.Статус               КАК Статус,
	|	&ИспользоватьСтатусыЗаказовНаСборку   КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)
	|	И ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|
	|{ГДЕ
	|	Т.Ссылка.*                       КАК Заказ,
	|	ТаблицаДокумента.Склад.*         КАК Склад,
	|	ТаблицаДокумента.Ответственный.* КАК Менеджер}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Потребности в комплектах для разборки
	|ВЫБРАТЬ
	|	Т.Ссылка                КАК Заказ,
	|	1                       КАК КодСтроки,
	|	1                       КАК НомерСтроки,
	|	0                       КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО            КАК Продукция,
	|	НЕОПРЕДЕЛЕНО            КАК Этап,
	|	0                       КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура          КАК Номенклатура,
	|	Т.Характеристика        КАК Характеристика,
	|	Т.Склад                 КАК Склад,
	|	Т.Назначение            КАК Назначение,
	|	Т.Подразделение         КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
	|	Т.НачалоСборкиРазборки  КАК ДатаОтгрузки,
	|	Т.Упаковка              КАК Упаковка,
	|	
	|	Т.Количество  КАК Количество,
	|	
	|	ВЫБОР КОГДА Т.ЖелаемаяДатаПоступления <=&НачалоТекущегоДня ТОГДА
	|				&НачалоТекущегоДня
	|			КОГДА ДОБАВИТЬКДАТЕ(Т.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.ДлительностьСборкиРазборки) < &НачалоТекущегоДня ТОГДА
	|				&НачалоТекущегоДня
	|			ИНАЧЕ
	|				ДОБАВИТЬКДАТЕ(Т.ЖелаемаяДатаПоступления, ДЕНЬ, - Т.ДлительностьСборкиРазборки)
	|		КОНЕЦ                     КАК ЖелаемаяДатаОтгрузки,
	|
	|	ИСТИНА                 КАК НеОтгружатьЧастями,
	|	Т.Дата                 КАК Дата,
	|	NULL                   КАК Партнер,
	|	Т.Статус               КАК Статус,
	|	&ИспользоватьСтатусыЗаказовНаСборку КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Т
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И Т.Проведен
	|	И Т.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)
	|	И Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|	И Т.Количество > 0
	|
	|{ГДЕ
	|	Т.Ссылка.*          КАК Заказ,
	|	Т.Склад.*           КАК Склад,
	|	Т.Ответственный.*   КАК Менеджер}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ЭтоВыборОбеспеченияСУчетомСерий = (Операция = "СтрокаТовары" Или Операция = "Комплект")
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаПоступления
		- Объект.ДлительностьСборкиРазборки * 86400); //86400 - длительность суток

	Если Операция = "Комплект" Тогда
		
		Если ПараметрыУказанияСерий = Неопределено Тогда
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
		КонецЕсли;
		
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			
			Если СерииУказываютсяВОтдельнойТабличнойЧасти(Объект) Тогда
				
				ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", Объект.Номенклатура, Объект.Характеристика);
				НайденныеСтроки = Объект.Серии.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.Серии.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
				Объект.Количество = 0;
				Для Каждого Строка Из ДанныеЗаполнения Цикл
					
					Объект.Количество = Объект.Количество + Строка.Количество;
					
					Если (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
								Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
								Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада)
							И ЗначениеЗаполнено(Строка.Серия) Тогда
							
								СтрокаСерии = Объект.Серии.Добавить();
								СтрокаСерии.Номенклатура   = Объект.Номенклатура;
								СтрокаСерии.Характеристика = Объект.Характеристика;
								СтрокаСерии.Серия          = Строка.Серия;
								СтрокаСерии.Количество     = Строка.Количество;
								
								Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
									СтрокаСерии.Назначение = Объект.Назначение;
								Иначе
									СтрокаСерии.Назначение = Справочники.Назначения.ПустаяСсылка();
								КонецЕсли;
							
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Объект.Количество = ДанныеЗаполнения[0].Количество;
				Объект.Серия = ДанныеЗаполнения[0].Серия;
				
			КонецЕсли;
			
		Иначе
			
			Объект.Количество = ДанныеЗаполнения[0].Количество;
			
		КонецЕсли;
		
		Объект.ВариантОбеспечения = ДанныеЗаполнения[0].ВариантОбеспечения;
		Объект.НачалоСборкиРазборки = Макс(Объект.НачалоСборкиРазборки, ДанныеЗаполнения[0].ДатаОтгрузки, ДатаПоУмолчанию);
		КоэффициентУпаковки = Объект.КоличествоУпаковок / Объект.Количество;
		Объект.КоличествоУпаковок = Объект.Количество * КоэффициентУпаковки;
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка);
		ТекстРезультат = "";
		
	Иначе

		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");

		ТекСтрокаТовары = Неопределено;
		Идентификатор   = Неопределено;
		СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
		НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
		Счетчик = 0;
		Добавлено = 0;
		
		ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
		ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Истина;
		ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.НачалоСборкиРазборки;
		
		ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
		
		Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

			//Заполнение полей обеспечения.
			ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения");
			Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
				ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
			КонецЕсли;
			
			Если СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				Если ЗначениеЗаполнено(Объект.Назначение) И НЕ Объект.ОбосабливатьПоНазначениюЗаказа Тогда
					ТекСтрокаТовары.Назначение = Объект.Назначение;
				Иначе
					ТекСтрокаТовары.Назначение = Объект.НазначениеТовары;
				КонецЕсли;
			Иначе
				ТекСтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
			КонецЕсли;
			
			Если СтрокаОбеспечения.Отгружено = 0 Тогда
				ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			КонецЕсли;
			
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.НачалоСборкиРазборки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.НачалоСборкиРазборки = ДатаПоУмолчанию;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
			ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		КонецЦикла;
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
		ТекстРезультат = ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

	КонецЕсли;

	Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки
		+ Объект.ДлительностьсборкиРазборки * 86400; //86400 - длительность суток

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ТекстРезультат;

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Ложь;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	Параметры = Новый Структура("ПутиКДанным, ИмяТабличнойЧасти, СтатусКВыполнению, ИмяМенеджераРегистра");
	Параметры.ИмяТабличнойЧасти    = "Товары";
	Параметры.СтатусКВыполнению    = Истина;
	Параметры.ИмяМенеджераРегистра = "ЗаказыНаСборку";
	
	Параметры.ПутиКДанным = Новый Соответствие();
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	Параметры.ПутиКДанным.Вставить("Назначение",   "НазначениеТовары");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает количество собранных (разобранных) комплектов по переданному заказу
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаСборку, ДокументСсылка.ЗаказНаСборку - 
// 
// Возвращаемое значение:
//  Число - 
//
Функция ОформленоКомплектов(Объект) Экспорт

	ОтборОформлено = Новый ТаблицаЗначений();
	ОтборОформлено.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	ОтборОформлено.Колонки.Добавить("Ссылка", ОбеспечениеКлиентСервер.ОписаниеТиповЗаказыКОбеспечению());
	
	СтрокаОтбораКомлектов = ОтборОформлено.Добавить();
	СтрокаОтбораКомлектов.Ссылка = Объект.Ссылка;
	СтрокаОтбораКомлектов.КодСтроки = 1;
	
	ТаблицаШапки = Новый ТаблицаЗначений();
	ТаблицаШапки.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаШапки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаШапки.Колонки.Добавить("Склад",          Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаШапки.Колонки.Добавить("Назначение",     Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаШапки.Колонки.Добавить("Серия",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаШапки.Колонки.Добавить("Ссылка",         Новый ОписаниеТипов("ДокументСсылка.ЗаказНаСборку"));
	
	Корректировка = ТаблицаШапки.Скопировать(); // пустая табличная часть для передачи в регистры
	Корректировка.Колонки.Добавить("КПоступлению",  Новый ОписаниеТипов("Число"));
	Корректировка.Колонки.Добавить("КОтгрузке",      Новый ОписаниеТипов("Число"));
	
	УчитыватьНазначение = ЗначениеЗаполнено(Объект.Назначение) 
	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Назначение, "ДвиженияПоСкладскимРегистрам") = Истина;
	
	Если Объект.СтатусУказанияСерий = 14 Тогда
		СтрокаШапки = ТаблицаШапки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаШапки, Объект);
		СтрокаШапки.Назначение = ?(УчитыватьНазначение, Объект.Назначение, Справочники.Назначения.ПустаяСсылка());
	Иначе
		// СтатусУказанияСерий = 10
		// Используется табличная часть Серии

		Для Каждого Строка Из Объект.Серии Цикл
			СтрокаШапки = ТаблицаШапки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаШапки, Строка, "Номенклатура, Характеристика, Серия, Назначение");
			ЗаполнитьЗначенияСвойств(СтрокаШапки, Объект, "Склад, Ссылка");
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		ОформитьКомплектовПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(ОтборОформлено);
		ОформитьКомплектовПоОрдерам = РегистрыНакопления.ТоварыКОтгрузке.ТаблицаОформлено(ТаблицаШапки, Корректировка);
	Иначе
		ОформитьКомплектовПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(ОтборОформлено, Истина);
		ОформитьКомплектовПоОрдерам = РегистрыНакопления.ТоварыКПоступлению.ТаблицаОформлено(ТаблицаШапки, Корректировка);
	КонецЕсли;
	
	ОформитьКомплектовПоНакладным.Свернуть(, "Количество");
	ОформитьКомплектовПоОрдерам.Свернуть(, "Количество");
	ОформленоКомплектов = Макс(ОформитьКомплектовПоНакладным.Итог("Количество"), ОформитьКомплектовПоОрдерам.Итог("Количество"));
	
	Возврат ОформленоКомплектов;

КонецФункции

#КонецОбласти

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);

	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Статус КАК Статус,
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Склад КАК Склад,
	|	ДанныеШапки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СборкаКомплектующих,
	|	ДанныеШапки.НачалоСборкиРазборки КАК НачалоСборкиРазборки,
	|	ДанныеШапки.ОкончаниеСборкиРазборки КАК ОкончаниеСборкиРазборки,
	|	ДанныеШапки.Назначение КАК НазначениеШапка,
	|	ДанныеШапки.НазначениеТовары КАК НазначениеТовары,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Подразделение КАК Подразделение,
	|	ДанныеШапки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеШапки.Номер КАК Номер,
	|	ДанныеШапки.Ответственный КАК Ответственный,
	|	ДанныеШапки.Комментарий КАК Комментарий,
	|	ДанныеШапки.Проведен КАК Проведен,
	|	ДанныеШапки.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеШапки.ОбосабливатьПоНазначениюЗаказа КАК ОбосабливатьПоНазначениюЗаказа,
	|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрамШапка,
	|	ЕСТЬNULL(ДанныеШапки.НазначениеТовары.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрамНазначениеТовары,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ДанныеШапки.НачалоСборкиРазборки >= ДанныеШапки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ДанныеШапки.Дата >= ДанныеШапки.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдернаяСхемаПриПоступлении,
	|	ДанныеШапки.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	Запрос.УстановитьПараметр("НомерНаПечать",                  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыНаСборку";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	//////////////// СБОРКА ////////////////
	// Получение заказанных комплектов для поля "Заказано".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество
	|		+ ТаблицаТовары.КоличествоОтменено КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.КоличествоОтменено      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектов для поля "КОформлению".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	ТаблицаТовары.Количество
	|	+ ТаблицаТовары.КоличествоОтменено     КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	-ТаблицаТовары.КоличествоОтменено      КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	-ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Отменено
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//////////////// РАЗБОРКА ////////////////
	// Получение заказанных комплектов для поля "Заказано".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество
	|		+ ТаблицаТовары.КоличествоОтменено КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.КоличествоОтменено      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектов для поля "КОформлению".
	// Т.к. поле "Количество" уже уменьшено на величину отмены, расчитывается изначальная величина
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	ТаблицаТовары.Количество
	|	+ ТаблицаТовары.КоличествоОтменено     КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества для заказанных комплектов (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка) КАК ТипСборки,
	|	-ТаблицаТовары.КоличествоОтменено      КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "Заказано")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.Количество        КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Получение отмененного количества заказанных комплектующих (поле "КОформлению")
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка            КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
	|	ТаблицаТовары.Характеристика    КАК Характеристика,
	|	ТаблицаТовары.Серия             КАК Серия,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки,
	|	-ТаблицаТовары.Количество        КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))	
	|	И ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//////////////// ОБЩЕЕ ////////////////
	// ТЧ Серии относится к шапке документа с операцией "Разборка"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	                                       КАК ТипСборки,
	|	0                                      КАК КОформлению,
	|	ТаблицаТовары.Количество                КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// ТЧ Серии относится к шапке документа с операцией "Разборка"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки                  КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказНаСборку,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	1                                      КАК КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	                                       КАК ТипСборки,
	|	ТаблицаТовары.Количество                КАК КОформлению,
	|	0                                      КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	//График поступления комплекта при сборке
	|ВЫБРАТЬ
	|	0                            КАК Порядок,
	|	1                            КАК НомерСтроки,
	|	&ОкончаниеСборкиРазборки     КАК Период,
	|	ЗаказНаСборку.Ссылка         КАК Распоряжение,
	|
	|	ЗаказНаСборку.Номенклатура   КАК Номенклатура,
	|	ЗаказНаСборку.Характеристика КАК Характеристика,
	|	&Склад                       КАК Склад,
	|
	|	&НазначениеШапка             КАК Назначение,
	|
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА &НазначениеШапка <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступлениеПодЗаказ,
	|
	|
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступлениеСНеподтвержденными,
	|
	|	ВЫБОР КОГДА &НазначениеШапка <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ЗаказНаСборку.Количество
	|		КОНЕЦ                    КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ЗаказНаСборку.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//График поступления комплектующих при разборке
	|ВЫБРАТЬ
	|	1                                   КАК Порядок,
	|	ТаблицаКомплектующие.НомерСтроки    КАК НомерСтроки,
	|	&ОкончаниеСборкиРазборки            КАК Период,
	|	ТаблицаКомплектующие.Ссылка         КАК Распоряжение,
	|
	|	ТаблицаКомплектующие.Номенклатура   КАК Номенклатура,
	|	ТаблицаКомплектующие.Характеристика КАК Характеристика,
	|	&Склад                              КАК Склад,
	|
	|	ТаблицаКомплектующие.Назначение     КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступлениеПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступлениеСНеподтвержденными,
	|
	|	ВЫБОР КОГДА ТаблицаКомплектующие.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаКомплектующие.Количество
	|		КОНЕЦ                           КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаКомплектующие
	|ГДЕ
	|	ТаблицаКомплектующие.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|   И НЕ ТаблицаКомплектующие.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок, НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резерв комплектов при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	&Склад                                              КАК Склад,
	|	ТаблицаТовары.Количество                            КАК ВРезервеСоСклада,
	|	0                                                   КАК ВРезервеПодЗаказ,
	|	0                                                   КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка комплектов при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ТаблицаТовары.Номенклатура                          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                        КАК Характеристика,
	|	&Склад                                              КАК Склад,
	|	0                                                   КАК ВРезервеСоСклада,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|			ТОГДА ТаблицаТовары.Количество
	|		КОНЕЦ                                           КАК ВРезервеПодЗаказ,
	|	ТаблицаТовары.Количество                            КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Резерв комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	ТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                 КАК Характеристика,
	|	&Склад                                       КАК Склад,
	|	ТаблицаТовары.Количество                     КАК ВРезервеСоСклада,
	|	0                                            КАК ВРезервеПодЗаказ,
	|	0                                            КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|   И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	ТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                 КАК Характеристика,
	|	&Склад                                       КАК Склад,
	|	0                                            КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                        КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество                     КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|   И НЕ ТаблицаТовары.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	//Обеспечение склада обособленными комплектами при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И НЕ ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности в комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИЛИ &ОбосабливатьПоНазначениюЗаказа ТОГДА
	|			&НазначениеТовары
	|		ИНАЧЕ
	|			&НазначениеШапка
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности в комплектующих при сборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИЛИ &ОбосабливатьПоНазначениюЗаказа ТОГДА
	|			&НазначениеТовары
	|		ИНАЧЕ
	|			&НазначениеШапка
	|		КОНЕЦ                              КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности в комплектах при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности в комплектах при разборке
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&НазначениеШапка                       КАК Назначение,
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|
	//Обеспечение склада комплектующими при разборке
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&НачалоСборкиРазборки КАК Период,
	|	&Склад КАК Склад,
	|	&Склад КАК Получатель,
	|	&Ссылка КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТовары.Количество КАК ВРезерве,
	|	0 КАК КОтгрузке,
	|	0 КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
	|				И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|			ИЛИ &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|				И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА ВЫБОР
	|					КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						ИЛИ &ОбосабливатьПоНазначениюЗаказа
	|						ТОГДА ВЫБОР
	|								КОГДА &ДвиженияПоСкладскимРегистрамНазначениеТовары
	|									ТОГДА &НазначениеТовары
	|								ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|								ТОГДА &НазначениеШапка
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв комплектов при разборке, серия в шапке.
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10 // серия не указана в отдельной табличной части ""Серии""
	|	
	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка комплектов при разборке, серия в шапке.
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	
	|	ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			И ТаблицаТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|				
	|				&НазначениеШапка
	|				
	|			ИНАЧЕ
	|				
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				
	|		КОНЕЦ,
	|	
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.СтатусУказанияСерий <> 10 // серия не указана в отдельной табличной части ""Серии""
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв комплектов при разборке, серия в отдельной табличной части "Серии".
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТаблицаТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|
	|	И(ТаблицаТовары.Ссылка.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.Ссылка.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка комплектов при разборке, серия в отдельной табличной части "Серии".
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&НачалоСборкиРазборки,
	|	&Склад,
	|	&Склад,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	
	|	
	|	ВЫБОР КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|				
	|				&НазначениеШапка
	|				
	|			ИНАЧЕ
	|				
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				
	|		КОНЕЦ,
	|	
	|	
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|	И ТаблицаТовары.Ссылка.СтатусУказанияСерий = 10
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.Ссылка.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	//График отгрузки комплекта при разборке
	"ВЫБРАТЬ
	|	&НачалоСборкиРазборки        КАК Период,
	|	&НачалоСборкиРазборки        КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Склад                       КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			&НазначениеШапка
	|		КОНЕЦ                                  КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|				ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоНеобеспечено
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &СборкаКомплектующих
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//График отгрузки комплектующих при сборке
	|ВЫБРАТЬ
	|	&НачалоСборкиРазборки               КАК Период,
	|	&НачалоСборкиРазборки               КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура          КАК Номенклатура,
	|	ТаблицаТовары.Характеристика        КАК Характеристика,
	|	&Склад                              КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|
	|		ВЫБОР КОГДА &НазначениеШапка = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					ИЛИ &ОбосабливатьПоНазначениюЗаказа ТОГДА
	|					&НазначениеТовары
	|				ИНАЧЕ
	|					&НазначениеШапка
	|			КОНЕЦ
	|
	|		КОНЕЦ                                  КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоПодЗаказ,
	|
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                  КАК КоличествоНеобеспечено
	|
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Склад                    КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СборкаКомплектующих
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Склад                                 КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ &СборкаКомплектующих
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Склад                    КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	ТаблицаТовары.Количество + ТаблицаТовары.КоличествоОтменено КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &НакладнаяЯвляетсяРаспоряжением
	|	И &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Склад                                 КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	ТаблицаТовары.Количество               КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ &НакладнаяЯвляетсяРаспоряжением
	|	И НЕ &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Склад                    КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрамШапка
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	-ТаблицаТовары.КоличествоОтменено      КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.КоличествоОтменено > 0
	|	И НЕ &НакладнаяЯвляетсяРаспоряжением
	|	И &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Склад                                 КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	-ТаблицаТовары.Количество              КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И НЕ &НакладнаяЯвляетсяРаспоряжением
	|	И НЕ &СборкаКомплектующих
	|	И &ОрдернаяСхемаПриПоступлении
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = ПолноеИмяОбъекта();
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("СборкаКомплектующих",
		"ТаблицаТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрамШапка",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрамНазначениеТовары",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.НазначениеТовары.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("НазначениеШапка",
		"ТаблицаТовары.Ссылка.Назначение");
	ПереопределениеРасчетаПараметров.Вставить("НазначениеТовары",
		"ТаблицаТовары.Ссылка.НазначениеТовары");
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриПоступлении",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|	И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаСборку" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаСборку(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Склад КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Ответственный КАК Ответственный,
	|	&Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	0 КАК Сумма,
	|	&Статус КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаСборку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ЗаказНаСборку.Ссылка = Назначения.Заказ
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(ЗаказНаСборку.НаправлениеДеятельности.УчетЗатрат, ИСТИНА)
	|					ТОГДА ЗаказНаСборку.НаправлениеДеятельности
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ = Назначения.НаправлениеДеятельности)
	|ГДЕ
	|	(ЗаказНаСборку.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ЗаказНаСборку.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ИЛИ ЗаказНаСборку.НазначениеТовары = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ЗаказНаСборку.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров))
	|	И Назначения.Ссылка ЕСТЬ NULL";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляГенерацииНазначений(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказНаСборку";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "Справочник.Назначения") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
			ЭлементБлокировки.УстановитьЗначение("НаправлениеДеятельности", Выборка.НаправлениеДеятельности);
			ЭлементБлокировки.УстановитьЗначение("Заказ",                   Выборка.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("ТипНазначения",           Перечисления.ТипыНазначений.Собственное);
			
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Объект <> Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Назначение) И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров
					Или Не ЗначениеЗаполнено(Объект.НазначениеТовары) И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Заказ                   = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						
						НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НазначениеОбъект, ШаблонНазначения);
						
						РеквизитыДокумента = Новый Структура("Номер, Дата, Получатель", Объект.Номер, Объект.Дата, Объект.Склад);
						НазначениеОбъект.Наименование = Справочники.Назначения.ПредставлениеНазначения(НазначениеОбъект, РеквизитыДокумента);
						НазначениеОбъект.ПометкаУдаления = Объект.ПометкаУдаления;
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НазначениеОбъект, Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаСборку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	(ЗаказНаСборку.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ЗаказНаСборку.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ИЛИ ЗаказНаСборку.НазначениеТовары = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ЗаказНаСборку.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|			ИЛИ ЗаказНаСборку.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказНаСборку";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВариантПриемкиКонстанта = Константы.ВариантПриемкиТоваров.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если Не ЗначениеЗаполнено(Объект.Назначение) И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров
					Или Не ЗначениеЗаполнено(Объект.НазначениеТовары) И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Заказ                   = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если ЗначениеЗаполнено(Назначение) Тогда
						Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
							Объект.Назначение = Назначение;
						Иначе
							Объект.НазначениеТовары = Назначение;
						КонецЕсли;
					Иначе
						ВызватьИсключение НСтр("ru = 'В информационной базе не обнаружено нужное назначение'");
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПустаяСсылка() Тогда
					Объект.ВариантПриемкиТоваров = ВариантПриемкиКонстанта;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СерииУказываютсяВОтдельнойТабличнойЧасти(Объект)
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Возврат Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.Склад = &Склад
	|	И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|	И НЕ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|   И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаказНаСборку";
КонецФункции

Функция ЕстьСборкаПоЗаказу(ЗаказНаСборку) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку КАК Таблица
	|ГДЕ
	|	Таблица.ЗаказНаСборку = &ЗаказНаСборку
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.КОформлению <> 0
	|");
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Возвращает массив проведенных накладных по заказу
//
// Параметры:
//  ЗаказНаСборку	 - ДокументСсылка.ЗаказНаСборку - 
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьНакладныеПоЗаказу(ЗаказНаСборку) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку КАК Таблица
	|ГДЕ
	|	Таблица.ЗаказНаСборку = &ЗаказНаСборку
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.КОформлению <> 0
	|	И Таблица.Регистратор ССЫЛКА Документ.СборкаТоваров");
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ТекстЗапросаТоварыДокумента(Отбор, Ресурс) Экспорт

	Если Ресурс = "Комплект" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказНаСборку,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ВЫБОР КОГДА Таблица.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) ТОГДА
		|			Таблица.Назначение
		|		КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			Таблица.Назначение
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                            КАК Назначение,
		|	1                                    КАК КодСтроки,
		|	ДанныеУчета.Серия                    КАК Серия,
		|	СУММА(Таблица.Количество)            КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.Сделка                       КАК Сделка,
		|	Таблица.Склад                        КАК Склад,
		|	Таблица.НачалоСборкиРазборки         КАК ДатаОтгрузки,
		|	СУММА(ЕСТЬNULL(ДанныеУчета.КОформлению, 0)) КАК КОформлению,
		|	СУММА(ЕСТЬNULL(ДанныеУчета.Заказано, 0))    КАК Заказано
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка = ДанныеУчета.ЗаказНаСборку
		|	И Таблица.Номенклатура = ДанныеУчета.Номенклатура // Использование связи по номенклатуре позволяет всегда получать остатки комплектов
		|	И Таблица.Характеристика = ДанныеУчета.Характеристика
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказНаСборку ЕСТЬ NULL
		|	И (Таблица.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|	И ДанныеУчета.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
		|	ИЛИ Таблица.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|				И ДанныеУчета.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка))
		|//&Отбор
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Ссылка,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	ВЫБОР КОГДА Таблица.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) ТОГДА
		|			Таблица.Назначение
		|		КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|			Таблица.Назначение
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ,
		|	ДанныеУчета.Серия,
		|	Таблица.Упаковка,
		|	Таблица.Сделка,
		|	Таблица.Склад,
		|	Таблица.НачалоСборкиРазборки";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказНаСборку,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ВЫБОР 
		|		КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров) ТОГДА
		|				Таблица.Назначение
		|		КОГДА Таблица.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|					ВЫБОР КОГДА Таблица.Ссылка.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|						ИЛИ Таблица.Ссылка.ОбосабливатьПоНазначениюЗаказа ТОГДА
		|						Таблица.Ссылка.НазначениеТовары
		|					ИНАЧЕ
		|						Таблица.Ссылка.Назначение
		|					КОНЕЦ
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК                        Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Заказ.Сделка                         КАК Сделка,
		|	Заказ.Склад                          КАК Склад,
		|	Заказ.НачалоСборкиРазборки           КАК ДатаОтгрузки,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаСборку КАК Заказ
		|	ПО Таблица.Ссылка = Заказ.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|	ПО Таблица.Ссылка = ДанныеУчета.ЗаказНаСборку
		|	И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказНаСборку ЕСТЬ NULL
		|	И (Заказ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|	И ДанныеУчета.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|	ИЛИ Заказ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|				И ДанныеУчета.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление))
		|//&Отбор";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Склад" Тогда
				Ключ = "Таблица.Ссылка.Склад";
			КонецЕсли;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ОтчетСостояниеВыполненияДокумента

Функция ТаблицаНеобеспеченныеТоварыДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	И НЕ ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТаблицаСостояниеОбеспеченияДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ДокументТовары.Ссылка.НачалоСборкиРазборки КАК ДатаОтгрузки,
		|	ДокументТовары.ВариантОбеспечения КАК Действие,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	(ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|		
		|		ИЛИ ДокументТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
		|			И ДокументТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
		|		
		|	И НЕ ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ДокументТовары.НачалоСборкиРазборки КАК ДатаОтгрузки,
		|	ДокументТовары.ВариантОбеспечения КАК Действие,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	(ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|		
		|		ИЛИ ДокументТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению)
		|			И ДокументТовары.ВариантОбеспечения В(
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
		|	
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ВременнаяТаблицаТоварыРаспоряжениеЗаказОтгруженоДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	СУММА(ДокументТовары.Количество) КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.Ссылка.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияОтгружено
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	НЕ ДокументТовары.Отменено
		|	И ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ВтДокументы.Проведен
		|
		|	И ДокументТовары.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Серия,
		|	ДокументТовары.Ссылка.Склад,
		|	ВтДокументы.ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Серия КАК Серия,
		|	ДокументТовары.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ВтДокументы.Проведен
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|	И ДокументТовары.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.ДокументПоступления КАК ДокументПоступления,
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|
		|	СУММА(Набор.Принимается) КАК Принимается,
		|	СУММА(Набор.Принято)     КАК Принято,
		|	СУММА(Набор.Принять)     КАК Принять,
		|	СУММА(Набор.Поступило)   КАК Поступило,
		|
		|	СУММА(Набор.КПоступлению) КАК КПоступлению,
		|	СУММА(Набор.Оформить)     КАК Оформить,
		|	СУММА(Набор.Оформлено)    КАК Оформлено,
		|
		|	МАКСИМУМ(Набор.ОрдернаяСхемаПриПоступлении) КАК ОрдернаяСхемаПриПоступлении
		|
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКПоступлению.Характеристика      КАК Характеристика,
		|		ТоварыКПоступлению.Склад               КАК Склад,
		|
		|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток  КАК Принимается,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Принято,
		|		ТоварыКПоступлению.КОформлениюОрдеровКонечныйОстаток КАК Принять,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Поступило,
		|
		|		0                                              КАК КПоступлению,
		|		0                                              КАК Оформить,
		|		0                                              КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты( , , , ,
		|				ДокументПоступления В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыКОформлению.ЗаказНаСборку       КАК ДокументПоступления,
		|		ТоварыКОформлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКОформлению.Характеристика      КАК Характеристика,
		|		ТоварыКОформлению.ЗаказНаСборку.Склад КАК Склад,
		|
		|		0                                    КАК Принимается,
		|		0                                    КАК Принято,
		|		0                                    КАК Принять,
		|		0                                    КАК Поступило,
		|
		|		ТоварыКОформлению.КОформлениюПриход          КАК КПоступлению,
		|		ТоварыКОформлению.КОформлениюКонечныйОстаток КАК Оформить,
		|		ТоварыКОформлению.КОформлениюРасход          КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКОформлению.ЗаказНаСборку.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКОформлению.ЗаказНаСборку.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                    КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ЗаказыНаСборку.ОстаткиИОбороты(, , , ,
		|				(ЗаказНаСборку, ТипСборки) В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка КАК ЗаказНаСборку,
		|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипСборки
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКОформлению) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ДокументПоступления,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТоварыРаспоряженияПоступлениеЗаказДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	СУММА(ДокументТовары.Количество) КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Ссылка.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	НЕ ДокументТовары.Отменено
		|	И ВтДокументы.Проведен
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|	И ДокументТовары.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Ссылка.Склад,
		|	ВтДокументы.ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.Количество КАК Количество,
		|	0 КАК СуммаСНДС,
		|	ДокументТовары.Склад КАК Склад,
		|	ВтДокументы.ДокументСсылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	ВтДокументы.Проведен
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|	И ДокументТовары.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|;
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаОтмененоОтгрузкаДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковокОтменено КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.КоличествоОтменено > 0
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТаблицаОтмененоПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	ДокументТовары.НомерСтроки КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковок КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку.Товары КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.Отменено
		|	И ДокументТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВтДокументы.ДокументСсылка КАК Документ,
		|	1 КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.КоличествоУпаковокОтменено КАК Количество,
		|	ВЫБОР 
		|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|	ТОГДА
		|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ДокументТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	"""" КАК ПричинаОтмены,
		|	0 КАК Сумма
		|ИЗ
		|	Документ.ЗаказНаСборку КАК ДокументТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
		|ГДЕ
		|	ДокументТовары.КоличествоОтменено > 0
		|	И ДокументТовары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
		|
		|ИТОГИ ПО
		|	Документ;
		|";
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#Область ОтменаНеотработанныхСтроки

Функция ОтменаНеоформленныхКомплектующихПоПриемке(ДокументОбъект) Экспорт
	
	ОтборПоОтмене = Новый Структура("Отменено", Ложь);
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ОтборПоОтмене);
	
	ТаблицаВыбранныхСтрок = Новый ТаблицаЗначений();
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Ссылка",               Новый ОписаниеТипов("ДокументСсылка.ЗаказНаСборку"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Склад",                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Характеристика",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Назначение",           Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Идентификатор",        Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КодСтроки",            Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВНакладной", Новый ОписаниеТипов("Число"));
	ТаблицаВыбранныхСтрок.Колонки.Добавить("КоличествоВОрдере",    Новый ОписаниеТипов("Число"));
	
	Идентификатор = 0;
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		Если Не Строка.Отменено Тогда
			НоваяСтрока = ТаблицаВыбранныхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура, Характеристика, Назначение, КодСтроки, Количество");
			НоваяСтрока.Ссылка = ДокументОбъект.Ссылка;
			НоваяСтрока.Склад = ДокументОбъект.Склад;
			НоваяСтрока.Идентификатор = Идентификатор;
		КонецЕсли;
		Идентификатор = Идентификатор + 1;
	КонецЦикла;
	
	Корректировка = ТаблицаВыбранныхСтрок.Скопировать(); // пустая таблица для передачи в регистры
	Корректировка.Колонки.Добавить("КПоступлению", Новый ОписаниеТипов("Число"));
	Корректировка.Колонки.Добавить("КОтгрузке",    Новый ОписаниеТипов("Число"));
	
	ОформитьКомплектовПоНакладным = РегистрыНакопления.ЗаказыНаСборку.ТаблицаОформлено(ТаблицаВыбранныхСтрок, Истина);
	ОформитьКомплектовПоОрдерам = РегистрыНакопления.ТоварыКПоступлению.ТаблицаОформлено(ТаблицаВыбранныхСтрок,
																							Корректировка);
	
	ОформитьКомплектовПоНакладным.Колонки.Количество.Имя = "КоличествоВНакладной";
	ОформитьКомплектовПоОрдерам.Колонки.Количество.Имя = "КоличествоВОрдере";
	
	Ключ = "КодСтроки";
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ОформитьКомплектовПоНакладным,
											ТаблицаВыбранныхСтрок,
											"КоличествоВНакладной",
											Ключ,
											Условие);
	
	Ключ = "Номенклатура, Характеристика, Назначение";
	Условие = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(ОформитьКомплектовПоОрдерам,
											ТаблицаВыбранныхСтрок,
											"КоличествоВОрдере",
											Ключ,
											Условие);
	
	// В таблице должны остаться только те строки, которые необходимо отменить
	// При этом количество - это количество, которое нужно отменить
	КоличествоИндексов = ТаблицаВыбранныхСтрок.Количество() - 1;
	
	Для н = 0 По КоличествоИндексов Цикл
		Строка = ТаблицаВыбранныхСтрок[КоличествоИндексов - н];
		Оформлено = Макс(Строка.КоличествоВНакладной, Строка.КоличествоВОрдере);
		Строка.Количество = Строка.Количество - Оформлено;
		Если Строка.Количество <= 0 Тогда
			ТаблицаВыбранныхСтрок.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВыбранныхСтрок;
	
КонецФункции

Функция ОтменитьНеотработанныеСтроки(ДокументОбъект, ОтменятьСтроки,
	КомплектыПересчитаны, ОтменятьТолькоМТВПределахДопустимыхОтклонений = Ложь,
	СкорректироватьМерныеТовары = Ложь, Модифицированность = Ложь) Экспорт

	Сообщение = "";
	КоличествоУпаковокОтмененоДоОтмены = ДокументОбъект.КоличествоУпаковокОтменено;
	КоличествоДоОтмены = ДокументОбъект.Количество;
	
	Если ОтменятьТолькоМТВПределахДопустимыхОтклонений Тогда
		ДопустимыеОтклонения = Документы.ЗаказНаСборку.ДопустимыеОтклоненияМерныхТоваров(ДокументОбъект.Ссылка);
	Иначе
		ДопустимыеОтклонения = Неопределено;
	КонецЕсли;
	
	Если КомплектыПересчитаны
		Или СкорректироватьКомплектыСервер(ДокументОбъект, ДопустимыеОтклонения, ОтменятьСтроки) Тогда
		
		ПереченьВариантов = Новый Массив();
		ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
		
		ПутиКДанным = Новый Соответствие();
		ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
		ПутиКДанным.Вставить("Склад", "Склад");
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("МенеджерРегистра",  РегистрыНакопления.ЗаказыНаСборку);
		ПараметрыЗаполнения.Вставить("ПутиКДанным",       ПутиКДанным);
		ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти", "Товары");
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
			ВыделенныеСтроки = Новый Массив();
			Для Каждого Строка Из ДокументОбъект.Товары Цикл
				Если Не Строка.Отменено Тогда
					ВыделенныеСтроки.Добавить(Строка.НомерСтроки - 1);
				КонецЕсли;
			КонецЦикла;
			
			Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(ДокументОбъект, ПереченьВариантов,
																				ПараметрыЗаполнения, ВыделенныеСтроки);
			
			ЕстьПревышениеОбособленнойПотребности = Неопределено <> Таблица.Найти(
				Перечисления.ВариантыОбеспечения.Обособленно,
				"ВариантОбеспечения");
			
			ЗаказыСервер.СократитьТаблицуДоНеОбеспеченныхСтрок(Таблица);
			
		Иначе
			Таблица = Документы.ЗаказНаСборку.ОтменаНеоформленныхКомплектующихПоПриемке(ДокументОбъект);
			ЕстьПревышениеОбособленнойПотребности = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		
			КоличествоСтрокКОтмене = Таблица.Количество();
			
			ЗаказыСервер.ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект.Товары, Таблица);
			
			РезультатОтмены = ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСтрокКОтмене, Модифицированность);
			Если КоличествоСтрокКОтмене = 0 И ЕстьПревышениеОбособленнойПотребности Тогда
				ТекстОповещения = НСтр("ru = 'Строки не отменены, так как все обособленные товары (работы) уже заказаны либо поступили'");
				РезультатОтмены.Вставить("Оповещение", ТекстОповещения);
			КонецЕсли;
			
			ОтменитьНеотработанныеСерииКомплектовСервер(ДокументОбъект);
			
			Если СкорректироватьМерныеТовары Тогда
				ЗаказыСервер.УвеличитьСтрокиЗаказаНаРазмерПревышенияОтгрузкиМерныхТоваров(ДокументОбъект,
				                                                                            ДокументОбъект.Товары,
				                                                                            КоличествоСтрокКОтмене);
			КонецЕсли;
		
		Иначе
			
			// Возврат количественных значений комплекта до выполнения отмены неотработанных строк
			ДокументОбъект.КоличествоУпаковокОтменено = КоличествоУпаковокОтмененоДоОтмены;
			ДокументОбъект.Количество = КоличествоДоОтмены;
			
			СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДокументОбъект, СтруктураДействий, Неопределено);
			
			Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(Таблица, "Товары", НСтр("ru = 'Товары'"));
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			
			РезультатОтмены = Новый Структура("Оповещение", НСтр("ru = 'Отмена неотработанных строк не выполнена'"));
			
		КонецЕсли;
		
	Иначе
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
			Сообщение = НСтр("ru = 'Не предусмотрена возможность отмены неотработанных комплектов для документа,
				|по которому не собран ни один комплект.
				|Полная отмена сборки возможна путем распроведения документа.'");
		Иначе
			Сообщение = НСтр("ru = 'Не предусмотрена возможность отмены неотработанных комплектов для документа,
				|по которому не разобран ни один комплект.
				|Полная отмена разборки возможна путем распроведения документа.'");
		КонецЕсли;
		
		РезультатОтмены = Новый Структура();
		РезультатОтмены.Вставить("Ошибки", Новый Массив());
		РезультатОтмены.Вставить("Оповещение", "");
		
	КонецЕсли;
	
	РезультатОтмены.Вставить("ОшибкаОтмены", Сообщение);
	
	Возврат РезультатОтмены;
	
КонецФункции

// Расчет количества отмененных комплектов в шапке документа
// Возращает признак успешной отмены неотработанных комплектов
// 
// Возвращаемое значение:
//   - Булево
//
Функция СкорректироватьКомплектыСервер(ДокументОбъект, ДопустимыеОтклонения, ОтменятьСтроки) Экспорт
	
	ОформленоКомплектов = Документы.ЗаказНаСборку.ОформленоКомплектов(ДокументОбъект);
	
	// При количестве 0 документ нельзя записать
	Если ОформленоКомплектов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДопустимыеОтклонения <> Неопределено Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
			СтруктураПоиска = Новый Структура("ТипСборки",Перечисления.ТипыДвиженияЗапасов.Поступление);
		Иначе
			СтруктураПоиска = Новый Структура("ТипСборки",Перечисления.ТипыДвиженияЗапасов.Отгрузка);
		КонецЕсли;
		СтрокиКомплектов = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоиска);
		
		ТекущееОтклонение = ДокументОбъект.Количество - ОформленоКомплектов;
		ТекущееОтклонение = ?(ТекущееОтклонение>0, ТекущееОтклонение,-ТекущееОтклонение);
		
		Если СтрокиКомплектов.Количество() > 0 Тогда
			Если ТекущееОтклонение > СтрокиКомплектов[0].ДопустимоеОтклонение Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДокументОбъект.Количество - ОформленоКомплектов > 0 И Не ОтменятьСтроки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Модифицирование шапки документа, хранящей данные о комплекте.
	Если ДокументОбъект.Количество <> ОформленоКомплектов Тогда
		ДокументОбъект.КоличествоУпаковокОтменено = ДокументОбъект.Количество - ОформленоКомплектов;
		ДокументОбъект.Количество = ОформленоКомплектов; // выставление фактически собранного/разобранного количества
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДокументОбъект, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтменитьНеотработанныеСерииКомплектовСервер(ДокументОбъект)
	
	ПараметрыУказанияСерий =
	Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗаказНаСборку));
	
	// Процедура доступна если разборка и используются серии
	Если Не ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры 
		И ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втСерииЗаказа.Серия,
	|	втСерииЗаказа.Количество,
	|	втСерииЗаказа.Номенклатура,
	|	втСерииЗаказа.Характеристика,
	|	втСерииЗаказа.Назначение
	|ПОМЕСТИТЬ втСерииЗаказа
	|ИЗ
	|	&СерииЗаказа КАК втСерииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииЗаказа.Серия,
	|	СУММА(СерииЗаказа.Количество) КАК Количество,
	|	СерииЗаказа.Номенклатура,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение
	|ПОМЕСТИТЬ СерииЗаказа
	|ИЗ
	|	втСерииЗаказа КАК СерииЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииЗаказа.Серия,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение,
	|	СерииЗаказа.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.Серия,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Назначение,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.КОформлениюОстаток,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток < ТоварыКОтгрузкеОстатки.КОформлениюОстаток
	|			ТОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток
	|		ИНАЧЕ ТоварыКОтгрузкеОстатки.КОформлениюОстаток
	|	КОНЕЦ КАК КоличествоНедостача
	|ПОМЕСТИТЬ СерииРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &Заказ) КАК ТоварыКОтгрузкеОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииЗаказа КАК СерииЗаказа
	|		ПО ТоварыКОтгрузкеОстатки.Серия = СерииЗаказа.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаСборкуОстатки.Серия,
	|	ЗаказыНаСборкуОстатки.Номенклатура,
	|	ЗаказыНаСборкуОстатки.Характеристика,
	|	ЗаказыНаСборкуОстатки.КОформлениюОстаток КАК КоличествоНедостача
	|ПОМЕСТИТЬ СерииНакладной
	|ИЗ
	|	РегистрНакопления.ЗаказыНаСборку.Остатки(, ЗаказНаСборку = &Заказ) КАК ЗаказыНаСборкуОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииЗаказа КАК СерииЗаказа
	|		ПО ЗаказыНаСборкуОстатки.Серия = СерииЗаказа.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииЗаказа.Серия,
	|	СерииЗаказа.Номенклатура,
	|	СерииЗаказа.Характеристика,
	|	СерииЗаказа.Назначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СерииНакладной.КоличествоНедостача, 0) > ЕСТЬNULL(СерииРегистра.КоличествоНедостача, 0)
	|			ТОГДА ЕСТЬNULL(СерииРегистра.КоличествоНедостача, 0)
	|		ИНАЧЕ ЕСТЬNULL(СерииНакладной.КоличествоНедостача, 0)
	|	КОНЕЦ КАК КоличествоНедостача,
	|	СерииРегистра.КОтгрузкеОстаток,
	|	СерииРегистра.КОформлениюОстаток
	|ИЗ
	|	СерииЗаказа КАК СерииЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииРегистра КАК СерииРегистра
	|		ПО СерииЗаказа.Номенклатура = СерииРегистра.Номенклатура
	|			И СерииЗаказа.Характеристика = СерииРегистра.Характеристика
	|			И СерииЗаказа.Серия = СерииРегистра.Серия
	|			И СерииЗаказа.Назначение = СерииРегистра.Назначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииНакладной КАК СерииНакладной
	|		ПО СерииЗаказа.Номенклатура = СерииНакладной.Номенклатура
	|			И СерииЗаказа.Характеристика = СерииНакладной.Характеристика
	|			И СерииЗаказа.Серия = СерииНакладной.Серия
	|ГДЕ
	|	ЕСТЬNULL(СерииРегистра.КоличествоНедостача, СерииЗаказа.Количество) > 0";
	
	Запрос.УстановитьПараметр("Заказ", ДокументОбъект.Ссылка);
	
	Если ДокументОбъект.СтатусУказанияСерий = 14 Тогда
		
		ТЗСерии = ДокументОбъект.Серии.Выгрузить();
		ТЗСерии.Очистить();
		
		СерияВШапке = ТЗСерии.Добавить();
		ЗаполнитьЗначенияСвойств(СерияВШапке, ДокументОбъект);
		
		Запрос.УстановитьПараметр("СерииЗаказа", ТЗСерии);
		
	Иначе
		// СтатусУказанияСерий = 10
		// Используется табличная часть Серии
		Запрос.УстановитьПараметр("СерииЗаказа", ДокументОбъект.Серии.Выгрузить());
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	МассивУдаляемых = Новый Массив();
	
	Пока Результат.Следующий() Цикл
		
		Если ДокументОбъект.СтатусУказанияСерий = 14 Тогда
			// Используется поле серия в шапке
			
			// Количество в шапке модифицируется процедурой ОтменитьНеотработанныеКомплектыСервер
			// В этой процедуре в шапке модифицируется только поле Серия
			Если ДокументОбъект.Серия = Результат.Серия 
				И (ДокументОбъект.Количество = Результат.КоличествоНедостача Или ДокументОбъект.Количество = 0) Тогда
				ДокументОбъект.Серия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			КонецЕсли;
			
		Иначе
			// СтатусУказанияСерий = 10
			// Используется табличная часть Серии 
			
			Отбор = Новый Структура();
			Отбор.Вставить("Серия",				Результат.Серия);
			Отбор.Вставить("Номенклатура",		Результат.Номенклатура);
			Отбор.Вставить("Характеристика",	Результат.Характеристика);
			Отбор.Вставить("Назначение",		Результат.Назначение);
			
			СтрокиСерий = ДокументОбъект.Серии.НайтиСтроки(Отбор);
			
			Недостача = Результат.КоличествоНедостача;
			Для Каждого СтрокаСерий Из СтрокиСерий Цикл
				
				Если СтрокаСерий.Количество = Недостача Тогда
					МассивУдаляемых.Добавить(СтрокаСерий);
					Недостача = 0;
				Иначе
					Вычитаемое = Мин(СтрокаСерий.Количество, Недостача);
					СтрокаСерий.Количество = СтрокаСерий.Количество - Вычитаемое;
					Недостача = Недостача - Вычитаемое;
					
					Если СтрокаСерий.Количество = 0 Тогда
						МассивУдаляемых.Добавить(СтрокаСерий);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУдаляемых);
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
		ДокументОбъект.Серии.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Назначения

// Возврашает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаСборку, ДанныеФормыСтруктура - заказ на сборку, по которому необходимо получить шаблон назначения
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияТоваровВСборке.Получить();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияТоваровВСборке.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
