&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем СерияРедактируетсяВШапке; //используется для определения, что форма подбора серий вызвана для серии, указанной в шапке

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
		
	КонецЕсли;
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение",Метаданные.Документы.ЗаказНаСборку);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	// Установка списка доступных статусов
	Перечисления.СтатусыВнутреннихЗаказов.ЗаполнитьСписокВыбора(Элементы.Статус.СписокВыбора, 
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаСборкуБезПолнойОтгрузки") 
		ИЛИ Объект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;
		
		СкрытьГруппуОтмена();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Если ЭтаФорма.ТекущийЭлемент = Элементы.ВариантОбеспечения Тогда
			
			ЗаполнитьВариантОбеспеченияКомплекта(ВыбранноеЗначение);
			УстановитьДоступностьСерииВШапке();
			
		Иначе
			
			Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
			
		КонецЕсли;
		
		СкрытьГруппуОтмена();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
		СкрытьГруппуОтмена();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		Если СерияРедактируетсяВШапке Тогда 
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Шапка, ВыбранноеЗначение);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ТЧ, ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения, ПараметрыУказанияСерий.Шапка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения, ПараметрыУказанияСерий.Шапка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения, ПараметрыУказанияСерий.Шапка);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииСервер(КэшированныеЗначения);
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект, КэшированныеЗначения, ПараметрыУказанияСерий.Шапка);
	
	СкрытьГруппуОтмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу", Объект.ВариантКомплектации);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
	СтруктураСтроки.Вставить("ВариантКомплектации",        Объект.ВариантКомплектации);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Истина);

	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Объект"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки, "ВариантКомплектации");
	
	ВариантКомплектацииПриИзмененииНаСервере();
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Объект, СтруктураДействий, КэшированныеЗначения);
	
	СкрытьГруппуОтмена();
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуОтмена()
	
	// Количество изменено пользователем. Значение отмененного количества больше не актуально.
	Объект.КоличествоОтменено = 0;
	Объект.КоличествоУпаковокОтменено = 0;
	// Пока по документу нет отмененных комплектов, соответствующее поле скрыто.
	Элементы.ГруппаОтмена.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьПодборСерий(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Истина,Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Объект.Серия;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.Шапка, ВыбранноеЗначение);
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ПараметрыВыбораОбеспеченияКомплекта();
	Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда 
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Истина);
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспеченияКомплекта", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ОшибкиПользователю = Неопределено;
			ЕстьОшибки = Ложь;
			Если Объект.Количество = 0 Тогда
				Поле  = "Объект.КоличествоУпаковок";
				Текст = НСтр("ru = 'Поле ""Количество"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
				Поле  = "Объект.Номенклатура";
				Текст = НСтр("ru = 'Поле ""Номенклатура"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Характеристика) И ХарактеристикиИспользуются Тогда
				Поле  = "Объект.Характеристика";
				Текст = НСтр("ru = 'Поле ""Характеристика"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
				Поле  = "Объект.Склад";
				Текст = НСтр("ru = 'Поле ""Склад"" не заполнено'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ЕстьОшибки Тогда
				
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю);
				
			Иначе
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
				ЭтаФорма, УникальныйИдентификатор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Ошибки = Неопределено;
		Поле = "Объект.КоличествоУпаковок";
		Для Каждого РеквизитыОшибки Из ПараметрыФормы Цикл
			
			Если РеквизитыОшибки.Регистр = "Заказы" Тогда
				
				ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%, склад %Склад%. Уже оформлена накладная в количестве большем, чем указано в документе, на %Количество% %Единица%'");
				
			ИначеЕсли РеквизитыОшибки.Регистр = "ТоварыКОтгрузке" Тогда
				
				ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Назначение%. Отгружено со склада %Склад% больше, чем указано в документе, на %Количество% %Единица%'");
				
			КонецЕсли;
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(РеквизитыОшибки.Номенклатура, РеквизитыОшибки.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%",  Строка(РеквизитыОшибки.Количество));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",     Строка(РеквизитыОшибки.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",       Строка(РеквизитыОшибки.Склад));
			Если РеквизитыОшибки.Регистр = "ТоварыКОтгрузке" Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%",  Строка(РеквизитыОшибки.Назначение));
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, Поле, ТекстСообщения, Неопределено);
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьСборкиРазборкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоСборкиРазборки) Тогда
		
		Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки + Объект.ДлительностьСборкиРазборки * 86400;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ОкончаниеСборкиРазборки) Тогда
		
		Объект.НачалоСборкиРазборки = Объект.ОкончаниеСборкиРазборки - Объект.ДлительностьСборкиРазборки * 86400;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСборкиРазборкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.НачалоСборкиРазборки) Тогда
		
		Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки + Объект.ДлительностьСборкиРазборки * 86400;
		
	Иначе
		
		Объект.ОкончаниеСборкиРазборки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСборкиРазборкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеСборкиРазборки) Тогда
		
		Объект.НачалоСборкиРазборки = Объект.ОкончаниеСборкиРазборки - Объект.ДлительностьСборкиРазборки * 86400;
		
	Иначе
		
		Объект.НачалоСборкиРазборки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказНаСборку.Форма.ФормаДокумента.Элементы.Товары.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда 
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Ложь);
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				
				ОткрытьФорму(
					"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
				КонецЕсли;
				
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Товары",
				НСтр("ru = 'Комплектующие'"));
			
			Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
						ЭтаФорма, УникальныйИдентификатор);
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Комплектующие'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТЧ));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТЧ));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Ложь, Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение					 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ТЧ, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОбеспеченияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТЧ));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий.ТЧ));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаказа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.ЗагрузитьДанныеИзТСД");
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКомплектующими(Команда)

	Если Не ЗначениеЗаполнено(Объект.ВариантКомплектации) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано поле ""Комплектация""'"),,
				"ВариантКомплектации",
				"Объект");

		Возврат;
		
	КонецЕсли;

	ЗаполнитьТоварыПоВариантуКомплектации();

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.ПодобратьТовары");
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.Склад);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                    ПараметрыУказанияСерий.ТЧ);
	ПараметрыФормы.Вставить("Назначение",                                Объект.НазначениеТовары);
	ПараметрыФормы.Вставить("Подразделение",                             Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",                Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВШапке(Команда)
	
	ОткрытьПодборСерий(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

#Область Обеспечение

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Комплектующие",
		НСтр("ru = 'Комплектующие'"));

	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.СостояниеОбеспечения");
	
	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Комплектующие"".
		|Просмотр состояния обеспечения списка комплектующих невозможен.'");
		
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма, "Товары", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияРезервирование");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.СоздатьКорректировкуНазначенияСнятиеРезерва");
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗакрытьЗаказФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", 
					СтруктураЗакрытия, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Неопределено,
		"Серия", "Объект.СтатусУказанияСерий", "ТипНоменклатуры");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары",
		"Серия", "Объект.СтатусУказанияСерий", "ТипНоменклатуры");
	

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма);
	
	#Область Обеспечение
	
	// Выделение цветом отмененной строки табличной части
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	//
	
	#КонецОбласти
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()

	Возврат Новый Структура("ДокументОснование, ВариантОбеспечения", Ложь, Ложь);

КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыЗависимыхРеквизитов(ЗависимыеРеквизиты)
	
	Если ЗависимыеРеквизиты.ДокументОснование Тогда
		Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Если ЗависимыеРеквизиты.ВариантОбеспечения Тогда
		
		Элементы.ВариантОбеспечения.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		
		ЭтоСборка = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Элементы.ЗаполнитьОбеспечение.Видимость = ЭтоСборка;
		Элементы.СостояниеОбеспечения.Видимость = ЭтоСборка;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Обеспечение

&НаСервере
Функция ПараметрыВыбораОбеспечения()
	
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	ПутиКДанным.Вставить("Назначение", "НазначениеШапки");
	Если Объект.ОбосабливатьПоНазначениюЗаказа Или Не Объект.ОбосабливатьПоНазначениюЗаказа И Не ЗначениеЗаполнено(Объект.Назначение) Тогда
		ПутиКДанным.Вставить("Назначение", "НазначениеТовары");
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("МенеджерРегистра", РегистрыНакопления.ЗаказыНаСборку);
	
	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Товары.ТекущаяСтрока,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПараметрыЗаполнения);
	
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий(ТоварВШапке)
	
	Если ТоварВШапке Тогда
		
		ОшибкиПользователю = Неопределено;
		ЕстьОшибки = Ложь;
		Если Объект.Количество = 0 Тогда
			Поле  = "Объект.КоличествоУпаковок";
			Текст = НСтр("ru = 'Поле ""Количество"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			Поле  = "Объект.Номенклатура";
			Текст = НСтр("ru = 'Поле ""Номенклатура"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Характеристика) И ХарактеристикиИспользуются Тогда
			Поле  = "Объект.Характеристика";
			Текст = НСтр("ru = 'Поле ""Характеристика"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
			Поле  = "Объект.Склад";
			Текст = НСтр("ru = 'Поле ""Склад"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ОшибкиПользователю, Поле, Текст, "");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю);
			Возврат Неопределено;
		Иначе
			ПараметрыФормы = ПараметрыВыбораОбеспеченияКомплекта();
		КонецЕсли;
	Иначе
		
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Товары",
				НСтр("ru = 'Комплектующие'"));
		
		Если Не ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыФормы = ПараметрыВыбораОбеспечения();
	КонецЕсли;
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Товары'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Объект.Склад);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Ложь);
		
	Если ТоварВШапке Тогда
		ПараметрыФормы.Вставить("Упаковка",               Объект.Упаковка);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.Шапка);
		Если Объект.СтатусУказанияСерий = 14
			Или Объект.СтатусУказанияСерий = 13 Тогда
			Серии = Новый Массив;
			Серия = Новый Структура("Серия, Количество", Объект.Серия, Объект.Количество);
			Серии.Добавить(Серия);
			ПараметрыФормы.Вставить("Серия",              Серии);
		Иначе
			Серии = Новый Массив;
			Для Каждого СтрокаСерии Из Объект.Серии Цикл
				Если СтрокаСерии.Номенклатура = ПараметрыФормы.Отбор.Номенклатура 
					И СтрокаСерии.Характеристика = ПараметрыФормы.Отбор.Характеристика Тогда
						Серия = Новый Структура("Серия, Количество", СтрокаСерии.Серия, СтрокаСерии.Количество);
						Серии.Добавить(Серия);
				КонецЕсли;
			КонецЦикла;
			ПараметрыФормы.Вставить("Серия",              Серии);
		КонецЕсли;
		ПараметрыФормы.Вставить("РазборкаНаКомплектующие",Истина);
	Иначе
		ПараметрыФормы.Вставить("Упаковка",               ТекущаяСтрока.Упаковка);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ТЧ);
		ПараметрыФормы.Вставить("Серия",                  ТекущаяСтрока.Серия);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса",
		Ложь); // Всегда Ложь, для данного документа, вопрос используется фиктивно.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспеченияКомплекта(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияКомплектаПослеВопроса",
		Ложь); // Всегда Ложь, для данного документа, вопрос используется фиктивно.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	// Ответ всегда равен КодВозвратаДиалога.Нет, для данного документа.
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияКомплектаПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	// Ответ всегда равен КодВозвратаДиалога.Нет, для данного документа.
	ЗаполнитьВариантОбеспеченияКомплекта(ДополнительныеПараметры.ПодобранныеТовары);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораОбеспеченияКомплекта()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	ПутиКДанным.Вставить("Назначение", "НазначениеТовары");

	//Таблица Корректировок регистров обеспечения, для имитации проведения редактируемого документа.
	Корректировка = ОбеспечениеСервер.СтруктураКорректировкиОбеспечения();
	ОбеспечениеСервер.СторноДвиженийДокумента(Корректировка, Объект, ПутиКДанным);

	ТекущийВариант = Новый Структура("ВариантОбеспечения, Склад, Количество, ДатаДоступности");
	ЗаполнитьЗначенияСвойств(ТекущийВариант, Объект);
	ТекущийВариант.ДатаДоступности = Объект.НачалоСборкиРазборки;

	Отбор = Новый Структура("Номенклатура, Характеристика, Назначение, Подразделение, Склад");
	ЗаполнитьЗначенияСвойств(Отбор, Объект);
	Отбор.Вставить("ТипНоменклатуры", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ТипНоменклатуры"));

	Результат = Новый Структура();
	Результат.Вставить("АдресКорректировки", ПоместитьВоВременноеХранилище(Корректировка));
	Результат.Вставить("ТекущийВариант", ТекущийВариант);
	Результат.Вставить("Отбор",          Отбор);
	Результат.Вставить("ГруппаСкладов",  Неопределено);
	Результат.Вставить("Тип",            ТипЗнч(Объект.Ссылка));
	Результат.Вставить("СписокВыбора",   Неопределено);
	Результат.Вставить("КоличествоОформлено", 0);
	
	ТаблицаНевыделенныеСтроки = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	АдресТаблицыПодобраноРанее = ПоместитьВоВременноеХранилище(ТаблицаНевыделенныеСтроки, УникальныйИдентификатор);
	Результат.Вставить("АдресТаблицыПодобраноРанее", АдресТаблицыПодобраноРанее);


	Возврат Результат;

КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	РеквизитыЗаказа.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаПоступления - Объект.ДлительностьСборкиРазборки * 86400; //сутки
	РеквизитыЗаказа.НеОтгружатьЧастями = Истина;

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	ПутиКДанным.Вставить("Назначение", "НазначениеТовары");

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("ИмяМенеджераРегистра",
		"ЗаказыНаСборку");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Товары.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Документы.ЗаказНаСборку.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	ПутиКДанным = Новый Соответствие;
	ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоСборкиРазборки");
	ПутиКДанным.Вставить("Назначение", "НазначениеШапки");
	Если Объект.ОбосабливатьПоНазначениюЗаказа Или Не Объект.ОбосабливатьПоНазначениюЗаказа И Не ЗначениеЗаполнено(Объект.Назначение) Тогда
		ПутиКДанным.Вставить("Назначение", "НазначениеТовары");
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыНаСборку);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "Товары", НСтр("ru = 'Комплектующие'")));
	КонецЕсли;
	
	//Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказНаСборку.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий);
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказНаСборку.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Процедура ЗаполнитьВариантОбеспеченияКомплекта(ВыбранноеЗначение)

	Документы.ЗаказНаСборку.ЗаполнитьВариантОбеспечения(Объект, ЭтаФорма, "Комплект", ВыбранноеЗначение, ПараметрыУказанияСерий);
	УстановитьДоступностьСерииВШапке();

КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	НаправлениеДеятельностиПриИзмененииСервер();

	ЗависимыеРеквизиты = ЗависимыеРеквизиты();
	ЗависимыеРеквизиты.ВариантОбеспечения = Истина;
	УстановитьСвойстваЭлементовФормыЗависимыхРеквизитов(ЗависимыеРеквизиты);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	УстановитьВидимостьЭлементовНазначение();
	НастроитьЭлементыСерий();
	УстановитьСвойстваЭлементовФормыХозяйственнаяОперация(Неопределено);
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(КэшЗначений)
	Действия = Новый Структура("
		|ПроверитьХарактеристикуПоВладельцу, ПересчитатьКоличествоЕдиниц, ПроверитьЗаполнитьВариантКомплектацииПоВладельцу,
		|ПроверитьЗаполнитьУпаковкуПоВладельцу");
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, Действия);
		
	Действия.ПроверитьХарактеристикуПоВладельцу = Объект.Характеристика;
	Действия.ПроверитьЗаполнитьВариантКомплектацииПоВладельцу = Объект.ВариантКомплектации;
	Действия.ПроверитьЗаполнитьУпаковкуПоВладельцу = Объект.Упаковка;
	Действия.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно, ОбособленнаяЗакупка", Ложь, Ложь));

	Шапка = Новый Структура("
		|Номенклатура, Характеристика, Назначение, ВариантКомплектации, ВариантОбеспечения, Упаковка, ТипНоменклатуры,
		|Количество, КоличествоУпаковок, ХарактеристикиИспользуются");
	ЗаполнитьЗначенияСвойств(Шапка, Объект);
	Шапка.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Шапка, Действия, КэшЗначений);
	
	ЗаполнитьЗначенияСвойств(Объект, Шапка);
	
	ВариантКомплектацииПриИзмененииНаСервере();
	
	ХарактеристикиИспользуются = Шапка.ХарактеристикиИспользуются;
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(Объект.Номенклатура, Элементы.Упаковка);
		
	УстановитьДоступностьНазначенияВШапке();
	
	Если ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшЗначений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.НеОтгружатьЧастями = Ложь;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопроса",
			Объект.Товары.Количество() > 0);
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл

		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, ВариантОбеспечения, Серия");

		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
		
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			
			СтруктураДействий.Вставить("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки",
				ОбеспечениеКлиентСервер.СтруктураЗаполненияВариантаОбеспечения(Объект, СтрокаТовара.ДатаОтгрузки));
				
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	КонецЦикла;

	
	Объект.НачалоСборкиРазборки = Макс(ВыбранноеЗначение.МаксимальнаяДатаОтгрузки, Объект.НачалоСборкиРазборки,  НачалоДня(ТекущаяДатаСеанса()));
	
	Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки + Объект.ДлительностьСборкиРазборки * 86400; //86400 - длительность суток
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);	

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.ТЧ;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура НастроитьЭлементыСерий()
	
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры;
	
	Элементы.УказатьСерииВШапке.Видимость  = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	Элементы.СтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	Элементы.Серия.Видимость               = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	
	УстановитьДоступностьСерииВШапке();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСерииВШапке()
	Если Объект.СтатусУказанияСерий > 12 Тогда
		Элементы.Серия.Доступность = Истина;
	Иначе
		Элементы.Серия.Доступность = Ложь;
	КонецЕсли;
	Элементы.УказатьСерииВШапке.Доступность =
		  Объект.СтатусУказанияСерий > 0
		И Объект.СтатусУказанияСерий < 13;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТоварВШапке)
	
	Если ТоварВШапке Тогда
		
		НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.Шапка,ПараметрыФормыУказанияСерий);
		
	Иначе
		
		НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.ТЧ,ПараметрыФормыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, 
				ПараметрыУказанияСерий.Шапка, КэшированныеЗначения);
	УстановитьДоступностьСерииВШапке();
				
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке)
	
	Если ТоварВШапке Тогда
		
		Результат = НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка, ТекущиеДанныеИдентификатор, ЭтаФорма);
		Если Объект.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			Результат.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		КонецЕсли;
		Возврат Результат;
		
	Иначе
		
		Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ, ТекущиеДанныеИдентификатор, ЭтаФорма);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	НастроитьЭлементыСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(Ложь,,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ТоварВШапке, Текст = "", ТекущиеДанные = Неопределено)
	
	Если ТоварВШапке Тогда
		ТекущиеПараметрыУказанияСерий = ПараметрыУказанияСерий.Шапка;
		СерияРедактируетсяВШапке      = Истина;
	Иначе
		ТекущиеПараметрыУказанияСерий = ПараметрыУказанияСерий.ТЧ;
		СерияРедактируетсяВШапке      = Ложь;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		Если ТоварВШапке Тогда
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Истина);
			ИмяПроцедурыОповещения ="ОбработатьВыборВариантаОбеспеченияКомплекта";
		Иначе
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий(Ложь);
			ИмяПроцедурыОповещения ="ОбработатьВыборВариантаОбеспечения";
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения(ИмяПроцедурыОповещения, ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ТекущиеПараметрыУказанияСерий,Текст,ТекущиеДанные)Тогда
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		ИначеЕсли Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке);
		
		ЗначениеВозврата = Неопределено;

		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий, ТоварВШапке", ПараметрыФормыУказанияСерий, ТоварВШапке)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    ТоварВШапке = ДополнительныеПараметры.ТоварВШапке;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТоварВШапке);
    КонецЕсли;
    Если ТоварВШапке Тогда
        НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл

		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);

		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, 
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		
		Если ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			Объект.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
		
		ШаблонНазначения = Документы.ЗаказНаСборку.ШаблонНазначения(Объект);
		Если ЗначениеЗаполнено(Объект.Ссылка) Или ШаблонНазначения.Заказ = Неопределено Тогда
			Объект.НазначениеТовары = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
		Иначе
			Объект.НазначениеТовары = Неопределено;
		КонецЕсли;
		
	Иначе
		
		НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
		
	КонецЕсли;
	
	Объект.ОбосабливатьПоНазначениюЗаказа = Константы.ВариантОбособленияТоваровВСборке.Получить()
		<> Перечисления.ВариантыОбособленияТоваровВСборке.НазначениеСобираемогоКомплекта;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовНазначение()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		
		Элементы.Назначение.Видимость = Истина;
		Элементы.ТоварыВариантОбеспечения.Видимость = Истина;
		Элементы.ТоварыНазначение.Видимость = Ложь;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		
		Элементы.Назначение.Видимость = Ложь;
		Элементы.ТоварыВариантОбеспечения.Видимость = Ложь;
		Элементы.ТоварыНазначение.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительно()
	
	Элементы.ГруппаДополнительно.Видимость =
		ПолучитьФункциональнуюОпцию("ОтветственныйВДокументах")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами");

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНазначенияВШапке()
	
	ТипНомеклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура,"ТипНоменклатуры");
	Если ТипНомеклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		Элементы.Назначение.Доступность = Истина;
		Элементы.Назначение.ПодсказкаВвода =  НСтр("ru = '<без назначения>'");
	Иначе
		Элементы.Назначение.Доступность = Ложь;
		Элементы.Назначение.ПодсказкаВвода =  НСтр("ru = '<для товаров>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");	
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаСборку));
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();

	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(Объект.Номенклатура, Элементы.Упаковка);
	
	УстановитьВидимостьОбеспечения();
	УстановитьВидимостьЭлементовНазначение();
	УстановитьДоступностьНазначенияВШапке();
	УстановитьВидимостьГруппыДополнительно();
	
	НастроитьЭлементыСерий();

	ЗависимыеРеквизиты = ЗависимыеРеквизиты();
	ЗависимыеРеквизиты.ДокументОснование  = Истина;
	ЗависимыеРеквизиты.ВариантОбеспечения = Истина;
	УстановитьСвойстваЭлементовФормыЗависимыхРеквизитов(ЗависимыеРеквизиты);
	Элементы.ВариантОбеспечения.Доступность = Не ЕстьРазборкаПоЗаказу();

	Элементы.ЗаполнитьОбеспечение.Доступность = Не ТолькоПросмотр;
	
	УстановитьСвойстваЭлементовФормыХозяйственнаяОперация(Неопределено);
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоВариантуКомплектации()

	Если Объект.Ссылка.Пустая() Или Не Документы.ЗаказНаСборку.ЕстьСборкаПоЗаказу(Объект.Ссылка) Тогда

		ОбновитьПризнакИспользованияХарактеристик = Истина;
		Объект.Товары.Загрузить(Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(
								Объект.ВариантКомплектации, , Объект.Количество));
								
	Иначе
		
		// Строки добавляться не будут. Только обновление количества.
		ОбновитьПризнакИспользованияХарактеристик = Ложь;

		Справочники.ВариантыКомплектацииНоменклатуры.ОбновитьКоличествоКомплектующихПоКоличествуКомплектов(
			Объект.Товары, Объект.Количество, Объект.ВариантКомплектации);

	КонецЕсли;

	СтруктураПараметровДействия = Новый Структура("ЗаполнитьОбособленно", Ложь);
	СтруктураДействий = Новый Структура("ПроверитьЗаполнитьОбеспечение", СтруктураПараметровДействия);
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	Если ОбновитьПризнакИспользованияХарактеристик Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Истина);

	Оповестить("Запись_ЗаказНаСборку", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Функция ЕстьРазборкаПоЗаказу()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда

		Результат = Ложь;

	Иначе

		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьОтгрузка
			|ИЗ
			|	РегистрНакопления.ЗаказыНаСборку КАК Т
			|ГДЕ
			|	Т.ЗаказНаСборку = &Ссылка
			|	И Т.ТипСборки = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
			|	И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И Т.КОформлению > 0";

		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

		УстановитьПривилегированныйРежим(Истина);
		Результат = Не Запрос.Выполнить().Пустой();

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВариантКомплектацииПриИзменении(Элемент)
	ВариантКомплектацииПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантКомплектацииПриИзмененииНаСервере()
	
	Объект.ДлительностьСборкиРазборки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВариантКомплектации, "ДлительностьСборкиРазборки");
	
	Если ЗначениеЗаполнено(Объект.НачалоСборкиРазборки) Тогда
		
		Объект.ОкончаниеСборкиРазборки = Объект.НачалоСборкиРазборки + Объект.ДлительностьСборкиРазборки * 86400;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ОкончаниеСборкиРазборки) Тогда
		
		Объект.НачалоСборкиРазборки = Объект.ОкончаниеСборкиРазборки - Объект.ДлительностьСборкиРазборки * 86400;
		
	КонецЕсли;
	
КонецПроцедуры

// Установка видимости и иных свойств элементов
//
&НаСервере
Процедура УстановитьСвойстваЭлементовФормыХозяйственнаяОперация(КэшированныеЗначения)
	
	// Поле "Количество" переименовываем в соответствии с типом операции.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		Элементы.КоличествоУпаковок.Заголовок = НСтр("ru = 'Разобрать'");
		ЭтаФорма.Команды.ОтменитьНеотработанные.Подсказка = НСтр("ru = 'Отмене подлежит неиспользованное количество комплектов и неполученные комплектующие'");
	Иначе
		Элементы.КоличествоУпаковок.Заголовок = НСтр("ru = 'Собрать'");
		ЭтаФорма.Команды.ОтменитьНеотработанные.Подсказка = НСтр("ru = 'Отмене подлежит несобранное количество комплектов и неиспользованные комплектующие'");
	КонецЕсли;
	
	ПересчитатьКоличествоОтменено(КэшированныеЗначения);
	
	// Пока по документу нет отмененных комплектов, не отображаем соответствующее поле.
	Элементы.ГруппаОтмена.Видимость = Объект.КоличествоОтменено > 0;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоговыеПоказателиЗаказа()

	ВсеСтрокиОтменены = Истина;
	ТолькоНеТребуется = Истина;
	ВариантНеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		ВсеСтрокиОтменены = ВсеСтрокиОтменены И СтрокаТовары.Отменено;
		ТолькоНеТребуется = ТолькоНеТребуется И (СтрокаТовары.Отменено Или СтрокаТовары.ВариантОбеспечения = ВариантНеТребуется);
	КонецЦикла;

КонецПроцедуры

#Область ОтменаСтрок

// Выполняет пересчет реквизита формы документа "КоличествоЕдиницаОтмененныхУпаковок"
// исходя из даных о упаковке и количества отмененных упаковок.
&НаСервере
Процедура ПересчитатьКоличествоОтменено(КэшированныеЗначения)

	СтруктураСтрокаТаблицы = Новый Структура();
	СтруктураСтрокаТаблицы.Вставить("Номенклатура", Объект.Номенклатура);
	СтруктураСтрокаТаблицы.Вставить("Характеристика", Объект.Характеристика);
	СтруктураСтрокаТаблицы.Вставить("Упаковка", Объект.Упаковка);
	СтруктураСтрокаТаблицы.Вставить("КоличествоУпаковок", Объект.КоличествоУпаковокОтменено);
	СтруктураСтрокаТаблицы.Вставить("Количество", Объект.КоличествоУпаковокОтменено);
	СтруктураСтрокаТаблицы.Вставить("Склад", Объект.Склад);

	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);

	Объект.КоличествоОтменено = СтруктураСтрокаТаблицы.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеотработанные(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.ОтменитьНеотработанные");
	
	РезультатОтмены = ОтменитьНеотработанныеСервер(КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(РезультатОтмены.ОшибкаОтмены) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтмены.ОшибкаОтмены, Объект.Ссылка);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк'"), , РезультатОтмены.Оповещение);
	КонецЕсли;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНеотработанныеСервер(КэшированныеЗначения)
	
	РезультатОтмены = Документы.ЗаказНаСборку.ОтменитьНеотработанныеСтроки(Объект, Истина, Ложь,
																			Ложь, Ложь, Модифицированность);
	
	УстановитьСвойстваЭлементовФормыХозяйственнаяОперация(КэшированныеЗначения);
	
	Если ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
	КонецЕсли;
	
	Возврат РезультатОтмены;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаСборку.ФормаДокумента.Команда.ОтменитьВыделенныеСтроки");
	
	ОтменитьВыделенныеСтрокиСервер();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена выделенных строк'"), , НСтр("ru = 'Выделенные строки отменены'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСервер()
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		Строка = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		Строка.Отменено = Истина;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров, КэшированныеЗначения)
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки =
		ЗаказОбъект.Статус <> Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
	
	СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ЗаказОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаказОбъект, "Объект");
	
	УстановитьСвойстваЭлементовФормыХозяйственнаяОперация(КэшированныеЗначения);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ЕстьТоварыКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
	
	Если ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен Тогда
		ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
