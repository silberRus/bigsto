&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.Печать
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	//АТ Терентьев
	//ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма);
	
	//АТ Терентьев
	//МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	//пТаблицаЗаданий = Объект.МаршрутныеЗадания.Выгрузить();
	Для каждого СтрокаТЧ Из Объект.МаршрутныеЗадания Цикл
	
		НоваяСтрока = пТаблицаЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	
	КонецЦикла;
	
	ОбновитьВесОбъем();
	РассчитатьПлан();
	РассчитатьОтклонениеПробег();
	РассчитатьОтклонениеТопливо();
	РассчитатьОтклонениеПродолжительность();
	ПреобразоватьПродолжительность();
	
	// silber {
	СуммаРейса = Объект.МаршрутныеЗадания.Итог("АТ_СуммаРейса");
	// } silber
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьДанныеФормы();
    ВзаиморасчетыСКурьером();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаказыКлиентов()
	
	МассивОбъектов= Новый Массив();
	
	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
			
		СтрокаТаблицы = Объект.МаршрутныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") тогда
			
			Если СтрокаТаблицы.МаршрутноеЗадание.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено тогда
				Продолжить;
			КонецЕсли;
			
			Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаТаблицы.МаршрутноеЗадание) тогда
				Продолжить;
			КонецЕсли;
			
			Если НачалоДня(СтрокаТаблицы.МаршрутноеЗадание.ДатаДоставки) <> НачалоДня(Объект.ДатаОтправки) тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаТаблицы.МаршрутноеЗадание.ПометкаУдаления=Истина тогда
				Продолжить;
			КонецЕсли;	
			
			МассивОбъектов.Добавить(СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование);
		КонецЕсли;	
	
	КонецЦикла;

	Возврат МассивОбъектов
	
КонецФункции	

&НаСервере
Функция ЗаполнитьЗаказыПоставщику()
	
	МассивОбъектов= Новый Массив();
	
	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
			
		СтрокаТаблицы = Объект.МаршрутныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			
			Если СтрокаТаблицы.МаршрутноеЗадание.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено тогда
				Продолжить;
			КонецЕсли;
			
			Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаТаблицы.МаршрутноеЗадание) тогда
				Продолжить;
			КонецЕсли;
			
			Если НачалоДня(СтрокаТаблицы.МаршрутноеЗадание.ДатаДоставки) <> НачалоДня(Объект.ДатаОтправки) тогда
				Продолжить;
			КонецЕсли;	
			
			Если СтрокаТаблицы.МаршрутноеЗадание.ПометкаУдаления=Истина тогда
				Продолжить;
			КонецЕсли;	
			
			МассивОбъектов.Добавить(СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование);
		КонецЕсли;	
	
	КонецЦикла;

	Возврат МассивОбъектов
	
КонецФункции	

Функция ЗаполнитьПКО()
	
	МассивПКО=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	             |ИЗ
	             |	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	             |ГДЕ
	             |	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
	             |	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Заказ =&ЗаказКлиента";
				 
	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
		
		СтрокаМЗ = Объект.МаршрутныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ЗаказКлиента=СтрокаМЗ.МаршрутноеЗадание.ДокументОснование;
		Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") или
				ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ЗаказКлиента.ФормаОплаты = Перечисления.ФормыОплаты.Наличная 
					или ЗаказКлиента.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка() Тогда
				Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента);
				Результат=Запрос.Выполнить().Выбрать();
				Если Результат.Количество()=0 тогда
					ТекстСообщения="По маршрутному заданию №"+СтрокаМЗ.МаршрутноеЗадание.Номер+
								" не может быть сформирована печатная форма ""Приходный кассовый ордер"", т.к. не создан документ ""Приходный кассовый ордер"".";
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
				КонецЕсли;	
				Пока Результат.Следующий() цикл
					МассивПКО.Добавить(Результат.Ссылка);
				КонецЦикла;
			иначе
				ТекстСообщения="По маршрутному заданию №"+СтрокаМЗ.МаршрутноеЗадание.Номер+
								" не может быть сформирована печатная форма ""Приходный кассовый ордер"", т.к. оплата осуществляется не наличными средствами.";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат МассивПКО

КонецФункции

Функция ЗаполнитьДокументыРеализации(ДляСчетФактур=0)
	
	МассивРеализаций=Новый Массив;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	РеализацияТоваровУслуг.Ссылка
	             |ИЗ
	             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	             |ГДЕ
	             |	РеализацияТоваровУслуг.Ссылка.Проведен = ИСТИНА
	             |	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента";
				 
	Для Каждого ВыделеннаяСтрока из Элементы.МаршрутныеЗадания.ВыделенныеСтроки цикл
		
		СтрокаМЗ = Объект.МаршрутныеЗадания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ЗаказКлиента=СтрокаМЗ.МаршрутноеЗадание.ДокументОснование;
		Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента);
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Количество()=0 тогда
				Если ДляСчетФактур=0 тогда
					ТекстСообщения="По маршрутному заданию №"+СтрокаМЗ.МаршрутноеЗадание.Номер+
							" не может быть сформирована печатная форма ""Торг-12"", т.к. не создан документ ""Реализация товаров и услуг"".";
				иначе
					ТекстСообщения="По маршрутному заданию №"+СтрокаМЗ.МаршрутноеЗадание.Номер+
							" не может быть сформирована печатная форма ""Счет фактура"", т.к. не создан документ ""Реализация товаров и услуг"".";
				КонецЕсли;			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецЕсли;	
			
			Пока Результат.Следующий() цикл
				МассивРеализаций.Добавить(Результат.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
			МассивРеализаций.Добавить(ЗаказКлиента);
		КонецЕсли;
	КонецЦикла;		
	
	Возврат МассивРеализаций

КонецФункции

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	//ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ИмяФормы);
	
	//ОписаниеКоманды = УправлениеПечатьюКлиентПовтИсп.ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	//
	//Если ОписаниеКоманды.Идентификатор="ЗаказКлиента" тогда
	//	МассивОбъектов=ЗаполнитьЗаказыКлиентов();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="ЗаказПоставщику" тогда
	//	МассивОбъектов=ЗаполнитьЗаказыПоставщику();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//ИначеЕсли ОписаниеКоманды.Идентификатор="КО1" тогда
	//	МассивОбъектов=ЗаполнитьПКО();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="УПД" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(0);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="ТОРГ12" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(0);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//ИначеЕсли ОписаниеКоманды.Идентификатор="СчетФактура" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(1);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//иначе
	//	МассивОбъектов=Объект;
	//КонецЕсли;	
	//
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКомандыПечати(ИмяКоманды, АдресКомандПечатиВоВременномХранилище)
	
	КомандыПечати = ПолучитьИзВременногоХранилища(АдресКомандПечатиВоВременномХранилище);
	Для Каждого КомандаПечати Из ЭтаФорма.Команды.НайтиСтроки(Новый Структура("ИмяКомандыНаФорме", ИмяКоманды)) Цикл
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	КонецЦикла;
	
КонецФункции

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	////АТ Терентьев
	//ОписаниеКоманды = ОписаниеКомандыПечати(Команда.Имя, ЭтаФорма.Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	//
	//Если ОписаниеКоманды.Идентификатор="ЗаказКлиента" тогда
	//	МассивОбъектов=ЗаполнитьЗаказыКлиентов();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="ЗаказПоставщику" тогда
	//	МассивОбъектов=ЗаполнитьЗаказыПоставщику();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//ИначеЕсли ОписаниеКоманды.Идентификатор="КО1" тогда
	//	МассивОбъектов=ЗаполнитьПКО();
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="УПД" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(0);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;
	//ИначеЕсли ОписаниеКоманды.Идентификатор="ТОРГ12" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(0);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//ИначеЕсли ОписаниеКоманды.Идентификатор="СчетФактура" тогда
	//	МассивОбъектов=ЗаполнитьДокументыРеализации(1);
	//	Если МассивОбъектов.Количество()=0 тогда
	//		Возврат;
	//	КонецЕсли;	
	//иначе
	//	МассивОбъектов=Объект;
	//КонецЕсли;
	
	
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	//АТ Терентьев
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

Процедура ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементУсловногоОформления, ЭлементФормыРодитель)
	
	Для Каждого Элемент Из ЭлементФормыРодитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ЗаполнитьРекурсивноПоляУсловногоОформления(ЭлементУсловногоОформления, Элемент);
		КонецЕсли;
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Выделение цветом состояния "Отменен"
	Элемент = УсловноеОформление.Элементы.Добавить();

	ЗаполнитьРекурсивноПоляУсловногоОформления(Элемент,Элементы.МаршрутныеЗадания); 
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МаршрутныеЗадания.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Дата доставки не совпадает с датой отправки
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаршрутныеЗаданияМаршрутноеЗаданиеДатаДоставки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МаршрутныеЗадания.ДатаДоставки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Объект.ДатаОтправки;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);

	//проблемные МЗ
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаршрутныеЗаданияМаршрутноеЗаданиеДатаДоставки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МаршрутныеЗадания.ЭтоПроблемноеМЗ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	
	//плановые показатели
	//пробег
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеПробег.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеПробег");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеПробег.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеПробег");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	
	//топливо
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеТопливо.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеТопливо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеТопливо.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеТопливо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	
	//продолжительность
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеПродолжительность.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеПродолжительность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	Элемент = УсловноеОформление.Элементы.Добавить();	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклонениеПродолжительность.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклонениеПродолжительность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	
	// silber {
	УправлениеВидимостьюДополнительно();
	// } silber
	
КонецПроцедуры

&НаСервере
Процедура ВзаиморасчетыСКурьером()
		
	Долг=Объект.СуммаКПолучению+Объект.СуммаВыдано-Объект.СуммаПолучено-Объект.СуммаПотрачено
						-Объект.СуммаВозврат-Объект.СуммаПрочее-Объект.СуммаНевыполненно;
	ДолгКурьера = НСтр("ru='Долг курьера'") + ": " + Долг + " руб.";
	
КонецПроцедуры

Процедура ЗаполнитьДанныеФормы()
		
	Для Каждого СтрокаТаблицы Из Объект.МаршрутныеЗадания Цикл
		СтрокаТаблицы.Статус = СтрокаТаблицы.МаршрутноеЗадание.Статус;
		СтрокаТаблицы.ДатаДоставки = СтрокаТаблицы.МаршрутноеЗадание.ДатаДоставки;
		СтрокаТаблицы.ЭтоПроблемноеМЗ= Ложь; //МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаТаблицы.МаршрутноеЗадание);  //АТ_ТерентьевЕМ
		СтрокаТаблицы.СтандартнаяКартинка=?(СтрокаТаблицы.МаршрутноеЗадание.Проведен, 0, ?(СтрокаТаблицы.МаршрутноеЗадание.ПометкаУдаления, 1, 2));
		// silber {
		ЗаполнитьСтрокуТаблицы(СтрокаТаблицы);
		// } silber
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыданоПриИзменении(Элемент)	
	ВзаиморасчетыСКурьером();             	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКПолучениюПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаКлиенте
Процедура СуммаПолученоПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаКлиенте
Процедура СуммаПотраченоПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаКлиенте
Процедура СуммаВозвратПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаКлиенте
Процедура СуммаПрочееПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаСервере
Процедура ОтправитьВодителяНаСервере()
	
	МЛ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.МегаЛогист_МаршрутныйЛист"));
	
	Если МЛ.Статус<>Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.КВыполнению тогда
		Сообщить("Отправить водителя можно только по маршрутному листу в статусе К выполнению");
		Возврат;
	КонецЕсли;
	
	МЛ.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Выполняется;
	Для Каждого СтрокаТаблицы из МЛ.МаршрутныеЗадания цикл
		
		МЗ=СтрокаТаблицы.МаршрутноеЗадание.ПолучитьОбъект();
		//Если МЗ.Статус<>Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КВыполнению тогда
		//	Продолжить;
		//КонецЕсли;
		//+АТ Терентьев
		//Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаТаблицы.МаршрутноеЗадание) тогда
		//	Продолжить;
		//КонецЕсли;
		//-АТ Терентьев
		Если СтрокаТаблицы.МаршрутноеЗадание.ПометкаУдаления=Истина тогда
			Продолжить;
		КонецЕсли;
		
		МЗ.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполняется;
		МЗ.Записать(РежимЗаписиДокумента.Запись);
		МЗ.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;		
	
	МЛ.Записать(РежимЗаписиДокумента.Проведение);
	ЗначениеВДанныеФормы(МЛ,Объект);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВодителя(Команда)
	
	ОтправитьВодителяНаСервере();	
	ЗаполнитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_МаршрутныйЛист", ПараметрыЗаписи, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ПоследовательностьНаСервере()
		
	ДокументМаршрутныйЛист = РеквизитФормыВЗначение("Объект");
	ДокументМаршрутныйЛист.Последовательность();
	ЗначениеВРеквизитФормы(ДокументМаршрутныйЛист, "Объект");
	ЗаполнитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Последовательность(Команда)
	
	ПоследовательностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	ДокументМаршрутныйЛист = РеквизитФормыВЗначение("Объект");
	Объект.СуммаКПолучению=ДокументМаршрутныйЛист.РасчитатьСуммуКПолучению();
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьНаСервере();
	ВзаиморасчетыСКурьером();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеЗаданияПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормы();
	ОбновитьВесОбъем();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолгКурьераНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КартаНаПечать(Команда)
	
	//СтруктураПараметров = Новый Структура("МаршрутныйЛист", Объект.Ссылка);
	ФормаПечати = ПолучитьФорму("Документ.МегаЛогист_МаршрутныйЛист.Форма.ФормаЗЛ");
	
	ФормаПечати.МаршрутныйЛист = Объект.Ссылка;
	ФормаПечати.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СпланироватьМаршрутыВMaxoptra(Команда)
	
	Отказ = Ложь;
	СпланироватьМаршрутыНаСервере(Отказ);
	Если Не Отказ Тогда
		ПодключитьОбработчикОжидания("ОтразитьСтатус", 10, Истина);
		//Элементы.ПоказатьМаршруты.Пометка = Истина;
	КонецЕсли;
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура СпланироватьМаршрутыНаСервере(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МегаЛогист_ХарактеристикиТранспортныхСредств.Склад
	|ИЗ
	|	Справочник.МегаЛогист_ХарактеристикиТранспортныхСредств КАК МегаЛогист_ХарактеристикиТранспортныхСредств
	|ГДЕ
	|	МегаЛогист_ХарактеристикиТранспортныхСредств.ТранспортноеСредство = &ТранспортноеСредство";
	
	Запрос.УстановитьПараметр("ТранспортноеСредство", Объект.Транспорт);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Склад = Выборка.Склад.Склад;
	Иначе 
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеМаксоптра(Истина);
	
	МассивОграничений = Новый Массив;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	КС = Новый КвалификаторыСтроки();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТаблицаЗначений.Колонки.Добавить("performerName", 	ОписаниеТиповС);
	ТаблицаЗначений.Колонки.Добавить("vehicleName", 	ОписаниеТиповС);
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.performerName 	= Строка(Объект.Курьер);
	НоваяСтрока.vehicleName 	= Строка(Объект.Транспорт);
    МассивОграничений.Добавить(Объект.Транспорт.Код);
	
	
	Если Отказ Тогда Возврат; КонецЕсли;
	МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(МассивОграничений, Ложь), Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	//ТаблицаВодителей = ТаблицаКурьеров.Выгрузить(, "Курьер");
	ТаблицаВодителей = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВодителей.Колонки.Добавить("Курьер", Новый ОписаниеТипов(МассивТипов));
	НоваяСтрока = ТаблицаВодителей.Добавить();
	НоваяСтрока.Курьер = Объект.Курьер;
	МегаЛогист_РаботаСМакоптра.importPerformers(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоВодителям(,ТаблицаВодителей), Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	МегаЛогист_РаботаСМакоптра.assignPerformersToVehicles(ИДСессии, ТаблицаЗначений, Отказ);
	Если Отказ Тогда Возврат; КонецЕсли;
	
	МассивОграничений = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.МаршрутныеЗадания Цикл
		
		СтрокаТЧ.ПорядкаОбъезда = 999;
		///////////////////////////////////////////
		//Мироненко Д.С 23.03.2017 9:19:21 НАЧАЛО
		//Комментарий: Проверка пометки на удаление
		
		//МассивОграничений.Добавить(СтрокаТЧ.МаршрутноеЗадание);
		Если ЗначениеЗаполнено(СтрокаТЧ.МаршрутноеЗадание) И Не СтрокаТЧ.МаршрутноеЗадание.ПометкаУдаления Тогда
		
			МассивОграничений.Добавить(СтрокаТЧ.МаршрутноеЗадание);
		
		КонецЕсли;
		
		//Мироненко Д.С 23.03.2017 9:19:30 КОНЕЦ
		///////////////////////////////////////////
	
	КонецЦикла;
	
	ТаблицаВыгрузки = МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеЗаказам(МассивОграничений, Склад);
	МегаЛогист_РаботаСМакоптра.РасчитатьПродолжительностьПогрузки(ТаблицаВыгрузки);
	
	МегаЛогист_РаботаСМакоптра.save(ИДСессии, ТаблицаВыгрузки, Отказ);
		
	Если Не Отказ Тогда
	
		МегаЛогист_РаботаСМакоптра.start(ИДСессии, Отказ, Склад, Объект.ДатаОтправки);
	
	КонецЕсли;
	Если Не Отказ Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выгрузка данных успешно завершена. Планирование начато...";
		Сообщение.Сообщить();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСтатус()
	Отказ = Ложь;
	СтруктураВозврата 	= Неопределено;
	СтрокаТаблицы 		= Неопределено;
	ПродолжатьВывод		= Ложь;
	ОтразитьСтатусСервер(СтруктураВозврата, СтрокаТаблицы, ПродолжатьВывод, Отказ);
	Если ПродолжатьВывод Тогда
	
		ПодключитьОбработчикОжидания("ОтразитьСтатус", 10, Истина);
	
	//Иначе 
	//     Если Не Отказ Тогда
	//	 
	//		ОбновитьОтображениеКарты();
	//		ОбновитьВесОбъем();
	//	 
	//	 КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтразитьСтатусСервер(СтруктураВозврата, СтрокаТаблицы, ПродолжатьВывод, Отказ)
	
	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Ложь;
	СтруктураОтвета = МегаЛогист_РаботаСМакоптра.mx_status(ИДСессии, Отказ);
	Если СтруктураОтвета.scheduling.operationNumber = "2" Тогда
		//Элементы.Статус.Видимость = Истина;
		//Элементы.Статус.Заголовок = "Расчет матрицы";
		//Статус = Число(СтруктураОтвета.scheduling.progress);
		Сообщить("Расчет матрицы: " + СтруктураОтвета.scheduling.progress + "%");
		ПродолжатьВывод = Истина;
	ИначеЕсли СтруктураОтвета.scheduling.operationNumber = "1" Тогда
		//Элементы.Статус.Видимость = Истина;
		//Элементы.Статус.Заголовок = "Идёт планирование";
		//Статус = Число(СтруктураОтвета.scheduling.progress);
		Сообщить("Идёт планирование: " + СтруктураОтвета.scheduling.progress + "%");
		ПродолжатьВывод = Истина;
	Иначе
		ПродолжатьВывод = Ложь;
		//Элементы.Статус.Видимость = Ложь;
		Если СтруктураОтвета.scheduling.requestStatus = "false" Тогда
			
			//Обработка Структуры возврата
			//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
			Отказ = Истина;
			//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СокрЛП(СтрЗаменить(СтруктураОтвета.scheduling.message, "<br />", ""));
			Сообщение.Сообщить();
			
		Иначе
			//Вывод склада
			//НайденныйЭлемент = Справочники.МегаЛогист_СоответствиеСкладов1СИMaxoptra.НайтиПоРеквизиту("Склад", Склад);
			//Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
			//	
			//	СтруктураВозврата = Новый Структура("Широта, Долгота", НайденныйЭлемент.Широта, НайденныйЭлемент.Долгота);
			//	СтрокаТаблицы = Новый Структура("АдресДоставкиПриведенный, ТипЗадания", "", "Курьеры");
			//	//МегаЛогист_Служебный.ДобавитьМаркерЛокация(Элементы, СтруктураВозврата, СтрокаТаблицы, 9999, "warehouse.png", "", "", "", "transport");
			//	
			//КонецЕсли;
			СтруктураРасписания = МегаЛогист_РаботаСМакоптра.getScheduleByAOCOnDate(ИДСессии,Склад, Объект.ДатаОтправки);
			//Попытка
			//
			//	//Сообщить(СтруктураРасписания.error.errorMessage);
			//	//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
			//	//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
			//	//Возврат;
			//
			//Исключение
			//
			//КонецПопытки;
			Попытка
			
				Если ТипЗнч(СтруктураРасписания.scheduleResponse.vehicles.vehicle) = Тип("ОбъектXDTO") Тогда
					РазобратьРасписание(СтруктураРасписания.scheduleResponse.vehicles.vehicle);
				Иначе 
					Для каждого ОбъектРассписания Из СтруктураРасписания.scheduleResponse.vehicles.vehicle Цикл
						
						РазобратьРасписание(ОбъектРассписания);
						
					КонецЦикла;
				КонецЕсли;
				//МегаЛогист_РаботаСМакоптра.delete(ИДСессии);
				Объект.МаршрутныеЗадания.Сортировать("ПорядкаОбъезда");
				Отказ = Ложь;
				Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = "Планирование завершено. " + СокрЛП(СтрЗаменить(СтруктураОтвета.scheduling.message, "<br />", ""));
				Сообщение.Текст = "Планирование завершено.";
				Сообщение.Сообщить();
			
			Исключение
			
			КонецПопытки;
			
		КонецЕсли;
		
		//ОчиститьДанныеМаксоптра();
		
	КонецЕсли;
	
	//Типа правильное завершение
	
	//СтруктураРасписания = МегаЛогист_РаботаСМакоптра.getScheduleByAOCOnDate(ИДСессии,Склад, ДатаДоставки);
	//Если ТипЗнч(СтруктураРасписания.scheduleResponse.vehicles.vehicle) = Тип("ОбъектXDTO") Тогда
	//	РазобратьРасписание(СтруктураРасписания.scheduleResponse.vehicles.vehicle);
	//Иначе 
	//	Для каждого ОбъектРассписания Из СтруктураРасписания.scheduleResponse.vehicles.vehicle Цикл
	//	
	//		РазобратьРасписание(ОбъектРассписания);
	//	
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьРасписание(ОбъектРасписания)

	////поиск курьера
	//Курьер = Справочники.ФизическиеЛица.НайтиПоНаименованию(ОбъектРасписания.driverExternalID);
	//Если Не ЗначениеЗаполнено(Курьер) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не найден курьер. Привязка не возможна";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	Курьер = Объект.Курьер;

	Если ТипЗнч(ОбъектРасписания.run.location) = Тип("ОбъектXDTO") Тогда
		ЗаполнитьТаблицуАдресов(Курьер, ОбъектРасписания.run.location)
	Иначе 
		Для каждого Локация Из ОбъектРасписания.run.location Цикл
		
			ЗаполнитьТаблицуАдресов(Курьер, Локация)
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАдресов(Курьер, Локация)
	
	Для каждого СтрокаАдреса Из Объект.МаршрутныеЗадания Цикл
		
		Попытка
			Если ТипЗнч(Локация.order) = Тип("СписокXDTO") Тогда
			
				Для каждого Заказ Из Локация.order Цикл
				
					Если Найти(Заказ.orderReference, СтрокаАдреса.МаршрутноеЗадание.Номер) > 0 Тогда
						
						//СтрокаАдреса.Курьер 		= Курьер;
						СтрокаАдреса.ПорядкаОбъезда = Локация.number;
						
					КонецЕсли;
				
				КонецЦикла;
			
			Иначе
			
				Если Найти(Локация.order.orderReference, СтрокаАдреса.МаршрутноеЗадание.Номер) > 0 Тогда
						
					//СтрокаАдреса.Курьер 		= Курьер;
					СтрокаАдреса.ПорядкаОбъезда = Локация.number;
					
				КонецЕсли;
			
			КонецЕсли;
		Исключение
			Прервать;
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры
	
&НаСервере
Процедура ОчиститьДанныеМаксоптра(БезВодителей = Ложь)

	ИДСессии = МегаЛогист_РаботаСМакоптра.Авторазация();
	Если ИДСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	МегаЛогист_РаботаСМакоптра.importSchedules(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоНазначениям(), Объект.ДатаОтправки, Отказ);
	МегаЛогист_РаботаСМакоптра.delete(ИДСессии, Склад, Объект.ДатаОтправки);
	//МегаЛогист_РаботаСМакоптра.importVehicles(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоТранспорту(), Отказ);
	Если Не БезВодителей Тогда
		МегаЛогист_РаботаСМакоптра.importPerformers(ИДСессии, МегаЛогист_РаботаСМакоптра.ВыгрузитьДанныеПоВодителям(), Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//ОчиститьДанныеМаксоптра();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НачалоДня(Объект.ДатаОтправки) = НачалоДня(ТекущаяДата()) И Объект.Статус = Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Выполняется Тогда
		
		Если пТаблицаЗаданий.Количество() <> Объект.МаршрутныеЗадания.Количество() Тогда
			
			МегаЛогист_Служебный.ОтправитьПушУведомления(
			ТекущийОбъект.Курьер, 
			"Маршрутный лист изменен", 
			"Маршрутный лист №" + ТекущийОбъект.Номер + " изменен", 1);
			
		Иначе 
			
			Для й = 0 По пТаблицаЗаданий.Количество() - 1 Цикл
				
				Если пТаблицаЗаданий[0].МаршрутноеЗадание <> Объект.МаршрутныеЗадания[0].МаршрутноеЗадание Тогда
					
					МегаЛогист_Служебный.ОтправитьПушУведомления(
					ТекущийОбъект.Курьер, 
					"Порядок объезда изменен", 
					"В маршрутном листе №" + ТекущийОбъект.Номер + " изменен порядок объезда", 1);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	Для каждого СтрокаТЧ Из Объект.МаршрутныеЗадания Цикл
	
		НоваяСтрока = пТаблицаЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНевыполненныеНаСервере()
	
	ДокументМаршрутныйЛист = РеквизитФормыВЗначение("Объект");
	Объект.СуммаНевыполненно=ДокументМаршрутныйЛист.РасчитатьСуммуНевыполненных();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНевыполненные(Команда)
	
	РассчитатьНевыполненныеНаСервере();
	ВзаиморасчетыСКурьером();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНевыполненноПриИзменении(Элемент)
	ВзаиморасчетыСКурьером();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесОбъем()
	
	Вес=0;
	Объем=0;
	Для Каждого СтрокаМЗ из Объект.МаршрутныеЗадания цикл
		
		ВесОбъем=МегаЛогист_Общий.ПолучитьВесОбъем(СтрокаМЗ.МаршрутноеЗадание.ДокументОснование,Объект.ДатаОтправки);
		Вес=Вес+ВесОбъем.Вес;
		Объем=Объем+ВесОбъем.Объем;
	КонецЦикла;
	
	ВесПроцент=""+?(Объект.Транспорт.ГрузоподъемностьВТоннах=0,0,Окр(Вес/(Объект.Транспорт.ГрузоподъемностьВТоннах*10),2))+"%";
	ОбъемПроцент=""+?(Объект.Транспорт.ВместимостьВКубическихМетрах=0,0,Окр(Объем/Объект.Транспорт.ВместимостьВКубическихМетрах*100,2))+"%";
		
КонецПроцедуры	

&НаСервере
Процедура РассчитатьПлан()
	
	РасходТопливаНа100км=0;
	
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("Транспорт",Объект.Транспорт);
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	МегаЛогист_ХарактеристикиТранспортныхСредств.РасходТопливаНа100км
	             |ИЗ
	             |	Справочник.МегаЛогист_ХарактеристикиТранспортныхСредств КАК МегаЛогист_ХарактеристикиТранспортныхСредств
	             |ГДЕ
	             |	МегаЛогист_ХарактеристикиТранспортныхСредств.ТранспортноеСредство = &Транспорт";
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() тогда
		РасходТопливаНа100км=Результат.РасходТопливаНа100км;
	КонецЕсли;
	
	ПланТопливо=РасходТопливаНа100км/100*Объект.ПлановыйПробег;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортПриИзменении(Элемент)
	ОбновитьВесОбъем();
	РассчитатьПлан();
КонецПроцедуры

&НаСервере
Процедура РассчитатьОтклонениеПробег()			
	ОтклонениеПробег=?(Объект.ПлановыйПробег=0,0,Окр((Объект.Пробег-Объект.ПлановыйПробег)/Объект.ПлановыйПробег*100,2));	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОтклонениеТопливо()			
	ОтклонениеТопливо=?(ПланТопливо=0,0,Окр((Объект.РасходТоплива-ПланТопливо)/ПланТопливо*100,2));	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОтклонениеПродолжительность()			
	ОтклонениеПродолжительность=?(Объект.ПлановаяПродолжительность=0,0,Окр((Объект.ФактическаяПродолжительность-Объект.ПлановаяПродолжительность)/Объект.ПлановаяПродолжительность*100,2));	
КонецПроцедуры

&НаКлиенте
Процедура ПлановыйПробегПриИзменении(Элемент)
	РассчитатьПлан();
	РассчитатьОтклонениеПробег();
КонецПроцедуры

&НаКлиенте
Процедура ПробегПриИзменении(Элемент)
	РассчитатьОтклонениеПробег();
КонецПроцедуры

&НаКлиенте
Процедура РасходТопливаПриИзменении(Элемент)
	РассчитатьОтклонениеТопливо();
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяПродолжительностьПриИзменении(Элемент)
	РассчитатьОтклонениеПродолжительность();
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяПродолжительностьПриИзменении(Элемент)
	РассчитатьОтклонениеПродолжительность();
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьПродолжительность()			
	мПлановаяПродолжительность=Дата(1,1,1)+Объект.ПлановаяПродолжительность*60;
	мФактическаяПродолжительность=Дата(1,1,1)+Объект.ФактическаяПродолжительность*60;
КонецПроцедуры

&НаКлиенте
Процедура мПлановаяПродолжительностьПриИзменении(Элемент)
	Объект.ПлановаяПродолжительность=(мПлановаяПродолжительность-Дата(1,1,1))/60;
	РассчитатьОтклонениеПродолжительность();
КонецПроцедуры

&НаКлиенте
Процедура мФактическаяПродолжительностьПриИзменении(Элемент)
	Объект.ФактическаяПродолжительность=(мФактическаяПродолжительность-Дата(1,1,1))/60;
	РассчитатьОтклонениеПродолжительность();
КонецПроцедуры

&НаКлиенте
Процедура НапечататьКомплектДокументов(Команда)
	
	Если Элементы.МаршрутныеЗадания.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого МаршрутноеЗадание Из Элементы.МаршрутныеЗадания.ВыделенныеСтроки Цикл
		
		Основание = ПолучитьОснованиеМаршрутногоЗадания(МаршрутноеЗадание);
		МассивДляПечати = Новый Массив;
		МассивДляПечати.Добавить(Основание);
		
		Если Не ЗначениеЗаполнено(Основание) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И НетСчетФактуры(Основание)) Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер( 
			"Документ.РеализацияТоваровУслуг", 
			"Накладная,Накладная", 
			МассивДляПечати, 
			Новый Структура 
			);
			Если Не ЭтоРозничныйКонтрагент(Основание) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "У документа " + Строка(Основание) + " нет счет-фактуры! У контграгента не установлен флаг - ""ЭтоРозничный"". Возможно ошибка!";
				Сообщение.Сообщить();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер( 
			"РегистрСведений.НастройкиПечатиОбъектов", 
			"КомплектДокументов", 
			МассивДляПечати, 
			Новый Структура 
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОснованиеМаршрутногоЗадания(МаршрутноеЗадание)
	Строка = Объект.МаршрутныеЗадания.НайтиПоИдентификатору(МаршрутноеЗадание) ;
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.МаршрутноеЗадание, "ДокументОснование");
КонецФункции

&НаСервереБезКонтекста
Функция НетСчетФактуры(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &Ссылка
	|	И СчетФактураВыданный.Проведен";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРозничныйКонтрагент(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Контрагент.ЭтоРозничный КАК ЭтоРозничный
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЭтоРозничный;
	
КонецФункции

// silber {

// Расспределение сумм

&НаСервере
Процедура РасспределитьСуммуРейса()
	
	Таб = Документы.МегаЛогист_МаршрутныйЛист.РасспределитьСуммуРейса(Объект.Ссылка, СуммаРейса);
	Для Каждого Строка Из Объект.МаршрутныеЗадания Цикл
		Строка.АТ_СуммаРейса = Таб[Строка.НомерСтроки - 1].АТ_СуммаРейса;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРейсаПриИзменении(Элемент)
	
	Кол = Объект.МаршрутныеЗадания.Количество();
	Если Кол Тогда
		РасспределитьСуммуРейса();
	Иначе
		ПоказатьПредупреждение(,"Сумму можно вводить только когда есть маршрутные задания",,"");
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура МаршрутныеЗаданияАТ_СуммаРейсаПриИзменении(Элемент)
	
	СуммаРейса = Объект.МаршрутныеЗадания.Итог("АТ_СуммаРейса");
	
КонецПроцедуры

// Деньги получены

&НаСервере
Процедура УправлениеВидимостьюДополнительно();
	
	Элементы.МаршрутныеЗаданияАТ_ДеньгиПолучены.ТолькоПросмотр = Не АТ_Кэш.МожетПолучатьДеньгиОтВодителей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТаблицы(СтрокаТаблицы)
	
	//СтрокаТаблицы.ЭтоРозница = ЗначениеЗаполнено(СтрокаТаблицы.МаршрутноеЗадание) И 
	//		ЗначениеЗаполнено(СтрокаТаблицы.МаршрутноеЗадание) И
	//		ЗначениеЗаполнено(СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование.Соглашение) И
	//		СтрокаТаблицы.МаршрутноеЗадание.ДокументОснование.Соглашение = Перечисления.АТ_ТипыСоглашенийСКлиентами.Розница;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеЗаданияАТ_ДеньгиПолученыПриИзменении(Элемент)
	
	//текДанные = Элементы.МаршрутныеЗадания.ТекущиеДанные;
	//Если текДанные <> Неопределено Тогда
	//
	//	Если Не АТ_Кэш.МожетПолучатьДеньгиОтВодителей() Тогда
	//		текДанные.АТ_ДеньгиПолучены = Не текДанные.АТ_ДеньгиПолучены;
	//		ПоказатьПредупреждение(,"Вы не имеете права получать деньги. 
	//		|Или укажите в настройках перечень лиц, которые могут получать деньги.",,"Ошибка доступа");
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьСуммуРеализации(МаршЗадание)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ДокументОснование.СуммаДокумента Сумма ИЗ Документ.МегаЛогист_МаршрутноеЗадание ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", МаршЗадание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура МаршрутныеЗаданияАТ_ДеньгиПолученыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	текДанные 				= Элементы.МаршрутныеЗадания.ТекущиеДанные;
	
	Если текДанные <> Неопределено Тогда
		текДанные.АТ_ПолученаСумма = ПолучитьСуммуРеализации(текДанные.МаршрутноеЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолученоДенег(Команда)
	
	ПоказатьПредупреждение(,"в разработке...",,"еще рано");
	
КонецПроцедуры

// } silber