#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
	КонецЕсли;	

	ИнициализироватьДокумент(ДанныеЗаполнения);
    	
КонецПроцедуры

#КонецОбласти


#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный             = Пользователи.ТекущийПользователь();	
	Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.КВыполнению;
	
КонецПроцедуры

Функция РасчитатьСуммуКПолучению() Экспорт
	
	СуммаПлан=0;
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		
		ВыводитьПредупреждение=Ложь;
		ЕстьОплата=Ложь;
		
		Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаМЗ.МаршрутноеЗадание) тогда
			Продолжить;
		КонецЕсли;
		
		МЗ=СтрокаМЗ.МаршрутноеЗадание;
		ДокументОснование=МЗ.ДокументОснование;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") или
			ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда			
			
			ФормаОплаты=ДокументОснование.ФормаОплаты;
			Если ФормаОплаты=Перечисления.ФормыОплаты.Наличная тогда
				
				Для Каждого СтрокаОснования из ДокументОснование.Товары цикл
					Если СтрокаОснования.ДатаОтгрузки <>ДатаОтправки тогда
						Продолжить;
					КонецЕсли;
					ЕстьОплата=Истина;
					СуммаПлан=СуммаПлан+СтрокаОснования.СуммаСНДС;					
				КонецЦикла;
				
				Если ЕстьОплата тогда
					Для Каждого СтрокаОснования из ДокументОснование.ЭтапыГрафикаОплаты цикл
						Если СтрокаОснования.ВариантОплаты<>Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки тогда
							ВыводитьПредупреждение=Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
				
			КонецЕсли;					
		КонецЕсли;		
		
		Если ВыводитьПредупреждение тогда
			СтрокаСообщения="В заказе клиента № "+ДокументОснование.Номер+" от "+Формат(ДокументОснование.Дата, "ДФ=dd.MM.yyyy")+" сумма оплаты разбита на несколько этапов."+
							"Проверьте сумму к получению на дату "+Формат(ДатаОтправки, "ДФ=dd.MM.yyyy")+".";
			Сообщить(СтрокаСообщения);				
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СуммаПлан;
	
КонецФункции

Функция РасчитатьСуммуНевыполненных() Экспорт
	
	СуммаНевыполненных=0;
	Для Каждого СтрокаМЗ из МаршрутныеЗадания цикл
		
		ВыводитьПредупреждение=Ложь;
		ЕстьОплата=Ложь;
		
		Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(СтрокаМЗ.МаршрутноеЗадание) тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаМЗ.МаршрутноеЗадание.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.НеВыполнено или
			СтрокаМЗ.МаршрутноеЗадание.Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено тогда
		иначе
			Продолжить;
		КонецЕсли;	
		
		МЗ=СтрокаМЗ.МаршрутноеЗадание;
		ДокументОснование=МЗ.ДокументОснование;
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") или
			ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда			
			
			ФормаОплаты=ДокументОснование.ФормаОплаты;
			Если ФормаОплаты=Перечисления.ФормыОплаты.Наличная тогда
				
				Для Каждого СтрокаОснования из ДокументОснование.Товары цикл
					Если СтрокаОснования.ДатаОтгрузки <>ДатаОтправки тогда
						Продолжить;
					КонецЕсли;
					ЕстьОплата=Истина;
					СуммаНевыполненных=СуммаНевыполненных+СтрокаОснования.СуммаСНДС;					
				КонецЦикла;
				
				Если ЕстьОплата тогда
					Для Каждого СтрокаОснования из ДокументОснование.ЭтапыГрафикаОплаты цикл
						Если СтрокаОснования.ВариантОплаты<>Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки тогда
							ВыводитьПредупреждение=Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;	
				
			КонецЕсли;					
		КонецЕсли;		
		
		Если ВыводитьПредупреждение тогда
			СтрокаСообщения="В заказе клиента № "+ДокументОснование.Номер+" от "+Формат(ДокументОснование.Дата, "ДФ=dd.MM.yyyy")+" сумма оплаты разбита на несколько этапов."+
							"Проверьте сумму к получению на дату "+Формат(ДатаОтправки, "ДФ=dd.MM.yyyy")+".";
			Сообщить(СтрокаСообщения);				
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СуммаНевыполненных;
	
КонецФункции

Процедура Последовательность()Экспорт
	
	МЗ = МаршрутныеЗадания.Выгрузить();
	
	МЗ.Колонки.Добавить("ДокументОснование");
	МЗ.Колонки.Добавить("ВремяДоставкиС");
	МЗ.Колонки.Добавить("ВремяДоставкиПо");
	МЗ.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число"));
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаМЗ из МЗ цикл
		
		СтрокаМЗ.ДокументОснование=СтрокаМЗ.МаршрутноеЗадание.ДокументОснование;
		СтрокаМЗ.ВремяДоставкиС=?(СтрокаМЗ.МаршрутноеЗадание.ВремяДоставкиС=ПустаяДата,Дата(1,1,1,23,59,59),СтрокаМЗ.МаршрутноеЗадание.ВремяДоставкиС);
		СтрокаМЗ.ВремяДоставкиПо=?(СтрокаМЗ.МаршрутноеЗадание.ВремяДоставкиПо=ПустаяДата,Дата(1,1,1,23,59,59),СтрокаМЗ.МаршрутноеЗадание.ВремяДоставкиПо);
		
	КонецЦикла;
	
	Для Каждого СтрокаМЗ из МЗ цикл
		Если ТипЗнч(СтрокаМЗ.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
			Для Каждого СтрокаОснование из СтрокаМЗ.ДокументОснование.Товары цикл
				Если ТипЗнч(СтрокаОснование.Назначение.Заказ)=Тип("ДокументСсылка.ЗаказКлиента") тогда
					
					НайденныеСтроки=МЗ.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаОснование.Назначение.Заказ));
					Для Каждого НайденнаяСтрока из НайденныеСтроки цикл
						НайденнаяСтрока.Приоритет=2;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	
	///////////////////////////////////////////
	//Мироненко Д.С 02.11.2016 15:15:48 НАЧАЛО
	//Комментарий: Добавлен порядок объеезда из Максоптра
	//МЗ.Сортировать("Приоритет,ВремяДоставкиПо,ВремяДоставкиС");
	МЗ.Сортировать("ПорядкаОбъезда,Приоритет,ВремяДоставкиПо,ВремяДоставкиС");
	//Мироненко Д.С 02.11.2016 15:16:23 КОНЕЦ
	///////////////////////////////////////////
	
	МаршрутныеЗадания.Загрузить(МЗ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Статус=Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Отменен тогда
		Документы.МегаЛогист_МаршрутноеЗадание.ИзменитьСтатус(МаршрутныеЗадания);
	КонецЕсли;
	
	Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Записывать = Истина;
	
	//Приход по операциям
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ВыданоКурьеру;
	Движение.Сумма=СуммаВыдано;	
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ОплатаОтКлиентов;
	Движение.Сумма=СуммаКПолучению;
	
	//Расход по операциям
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ПолученоОтКурьера;
	Движение.Сумма=СуммаПолучено;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ВозвратТовара;
	Движение.Сумма=СуммаВозврат;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.ПодтвержденныеРасходы;
	Движение.Сумма=СуммаПотрачено;
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.Прочее;
	Движение.Сумма=СуммаПрочее;	
	//***
	Движение = Движения.МегаЛогист_ВзаиморасчетыСКурьерами.Добавить();
	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	Движение.Период=Дата;
	
	Движение.Курьер	= Курьер;
	Движение.МаршрутныйЛист				= Ссылка;
	Движение.ВидОперации=Перечисления.МегаЛогист_ВидыОперацияВзаиморасчетыСКурьером.НевыполненныеЗадания;
	Движение.Сумма=СуммаНевыполненно;
	
	// silber { Добавим дополнительные таблицы движений
	
	ДопТабл = ПолучитьДопТаблицыДвижений();
	Для Каждого Элемент Из ДопТабл Цикл
		Если Элемент.Значение.Количество() Тогда
			Движения[Элемент.Ключ].Записывать = Истина;
			Движения[Элемент.Ключ].Загрузить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// } silber
	
	Движения.Записать();
	
КонецПроцедуры

// silber {
Функция ПолучитьДопТаблицыДвижений()
	
	// Таблица движений для проведения по добавленным регистрам
	
	Запрос = Новый Запрос("
	
	// АТ_МаршрутныеЗаданияЗатраты
	
	|ВЫБРАТЬ 
	|	&Ссылка МаршрутныйЛист,
	|	ЗонаРейса, 
	|	Период, 
	|	МаршрутноеЗадание, 
	|	ЕСТЬNULL(ДокументОснование.ЗаказКлиента.ЗонаДоставки, ДокументОснование.ЗонаДоставки) ЗонаДоставки,
	|	ЕСТЬNULL(ДокументОснование.Партнер, ЕСТЬNULL(МаршрутноеЗадание.Контрагент.Партнер, МаршрутноеЗадание.Контрагент)) Партнер,
	|	СУММА(ДокументОснование.СуммаДокумента) 	СуммаРеализации,
	|	СУММА(СуммаРейса)							СуммаРейса
	|ИЗ
	|	(	ВЫБРАТЬ
	|			АТ_СуммаРейса		СуммаРейса,
	|			Ссылка.АТ_ЗонаРейса ЗонаРейса,
	|			Ссылка.Дата 		Период,
	|			МаршрутноеЗадание,
	|			ЕСТЬNULL(МаршрутноеЗадание.ДокументОснование.ЗаказНаПеремещение.ДокументОснование, МаршрутноеЗадание.ДокументОснование) ДокументОснование
	|		ИЗ
	|			Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	|		ГДЕ
	|			Ссылка = &Ссылка И АТ_СуммаРейса <> 0
	|	) Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Период,
	|	ЗонаРейса,
	|	МаршрутноеЗадание,
	|	ДокументОснование,
	|	ЕСТЬNULL(ДокументОснование.ЗаказКлиента.ЗонаДоставки, ДокументОснование.ЗонаДоставки),
	|	ЕСТЬNULL(ДокументОснование.Партнер, ЕСТЬNULL(МаршрутноеЗадание.Контрагент.Партнер, МаршрутноеЗадание.Контрагент))
	|;
	
	// АТ_ТранспортныеЗатраты
	
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Ссылка.Дата)		Период,
	|	МаршрутноеЗадание.Курьер	Курьер, 
	|	МаршрутноеЗадание, 
	|	СУММА(АТ_СуммаРейса) 		Сумма
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	|
	|ГДЕ
	|	Ссылка = &Ссылка И АТ_СуммаРейса <> 0 И Ссылка.Статус = &Статус
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутноеЗадание;
	
	// АТ_ПолученныеДеньгиОтВодителей Приход
	
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Ссылка.Дата)		Период,
	|	&ВидДвиженияПриход			ВидДвижения,
	|	МаршрутноеЗадание.Курьер	Курьер, 
	|	МаршрутноеЗадание, 
	|	СУММА(ЕСТЬNULL(МаршрутноеЗадание.ДокументОснование.СуммаДокумента, 0)) Сумма
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	|
	|ГДЕ
	|	Ссылка = &Ссылка И Ссылка.Статус = &Статус И
	|	МаршрутноеЗадание.ДокументОснование.Проведен И
	//|	МаршрутноеЗадание.ДокументОснование.Соглашение.АТ_Тип = ЗНАЧЕНИЕ(Перечисление.АТ_ТипыСоглашенийСКлиентами.Розница)
	|	МаршрутноеЗадание.ДокументОснование.Контрагент.ЭтоРозничный И
	|	МаршрутноеЗадание.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутноеЗадание
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(МаршрутноеЗадание.ДокументОснование.СуммаДокумента, 0)) <> 0
	
	// АТ_ПолученныеДеньгиОтВодителей Расход
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	МАКСИМУМ(Ссылка.Дата)		Период,
	|	&ВидДвиженияРасход			ВидДвижения,
	|	МаршрутноеЗадание.Курьер	Курьер, 
	|	МаршрутноеЗадание, 
	|	СУММА(АТ_ПолученаСумма) 	Сумма
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	|
	|ГДЕ
	|	Ссылка = &Ссылка И АТ_ПолученаСумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутноеЗадание
	|");
	
	Запрос.УстановитьПараметр("Ссылка", 			Ссылка);
	Запрос.УстановитьПараметр("Статус",				Перечисления.МегаЛогист_СтатусыМаршрутногоЛиста.Выполнен);
	Запрос.УстановитьПараметр("Розница", 			Перечисления.АТ_ТипыСоглашенийСКлиентами.Розница);
	Запрос.УстановитьПараметр("ВидДвиженияРасход", 	ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", 	ВидДвиженияНакопления.Приход);
	
	Пакет = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("АТ_МаршрутныеЗаданияЗатраты, АТ_ТранспортныеЗатраты, АТ_ПолученныеДеньгиОтВодителей", 
						Пакет[0].Выгрузить(), Пакет[1].Выгрузить(),Пакет[2].Выгрузить());
КонецФункции
// } silber

#КонецОбласти

