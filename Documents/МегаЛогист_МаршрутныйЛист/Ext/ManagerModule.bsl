#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Заказы клиентов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказКлиента";
	КомандаПечати.Представление = НСтр("ru = 'Заказы клиентов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Заказ поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	КомандаПечати.Представление = НСтр("ru = 'Заказы поставщику'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщику");

	// Маршрутный лист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//+АТ Терентьев
	// Маршрутный лист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛистАвтотехника";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист Автотехника'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//-АТ Терентьев
	
	// Маршрутный лист с товарами
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист (с товарами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьТовары", Истина);
	
	// Путевой лист
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПутевойЛист";
	КомандаПечати.Представление = НСтр("ru = 'Путевой лист'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Приходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПриходныйКассовыйОрдер";
	КомандаПечати.Идентификатор = "КО1";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Универсальный передаточный документ (УПД)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "УПД";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
 	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Товарная накладная (ТОРГ-12)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
	
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ПечатьВВалюте", Ложь);
	КомандаПечати.Порядок = 20;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"МаршрутныйЛист",
			"Маршрутный лист",
			СформироватьПечатнуюФормуМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	//+АТ Терентьев
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистАвтотехника") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"МаршрутныйЛистАвтотехника",
			"Маршрутный лист Автотехника",
			СформироватьПечатнуюФормуМаршрутныйЛист_АТ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	//-АТ Терентьев
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПутевойЛист",
			"Путевой лист",
			СформироватьПечатнуюФормуПутевойЛист(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
				
КонецПроцедуры

Функция ВернутьДолгПоЗаказу(Заказ)
	
	Долг=0;
	Запрос=Новый Запрос();
	Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.Текст="ВЫБРАТЬ
	             |	РасчетыСКлиентамиПоДокументамОстатки.КОплатеОстаток КАК Долг
	             |ИЗ
	             |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&НаДату, ЗаказКлиента = &Заказ) КАК РасчетыСКлиентамиПоДокументамОстатки";
	Результат=Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() тогда				 
		Долг=Результат.Долг;
	КонецЕсли;
	
	Возврат Долг
		
КонецФункции	

Функция СформироватьПечатнуюФормуМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ОтображатьТовары = Ложь;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьТовары") Тогда
		ОтображатьТовары = ПараметрыПечати.ОтображатьТовары;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_МаршрутныйЛист";
	
	Если ОтображатьТовары тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МегаЛогист_МаршрутныйЛист.ПФ_MXL_МаршрутныйЛистТовары");
	иначе	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МегаЛогист_МаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
	КонецЕсли;
		
	ОбластьШапкаДокумента 			= Макет.ПолучитьОбласть("ШапкаДокумента");
	ОбластьШапкаТаблицы				= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы			= Макет.ПолучитьОбласть("СтрокаТаблицы"); 	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутныйЛист.Ссылка КАК Ссылка,
	|	МегаЛогист_МаршрутныйЛист.Номер КАК Номер,
	|	МегаЛогист_МаршрутныйЛист.Дата КАК Дата,
	|	МегаЛогист_МаршрутныйЛист.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	МегаЛогист_МаршрутныйЛист.Курьер,
	|	МегаЛогист_МаршрутныйЛист.Транспорт,
	|	МегаЛогист_МаршрутныйЛист.ДатаОтправки,
	|	МегаЛогист_МаршрутныйЛист.Статус,
	|	МегаЛогист_МаршрутныйЛист.Комментарий,
	|	МегаЛогист_МаршрутныйЛист.СуммаВыдано,
	|	МегаЛогист_МаршрутныйЛист.СуммаПолучено,
	|	МегаЛогист_МаршрутныйЛист.СуммаПотрачено
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист КАК МегаЛогист_МаршрутныйЛист
	|ГДЕ
	|	МегаЛогист_МаршрутныйЛист.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистМаршрутныеЗадания.НомерСтроки КАК НомерСтроки,
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка КАК Ссылка,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ТипЗадания КАК ТипЗадания,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиС КАК ВремяДоставкиС,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.АдресДоставки КАК АдресДоставки,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент КАК Контрагент,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КонтактноеЛицо КАК КонтактноеЛицо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование.Номер КАК НомерЗаказа,
	|	NULL КАК Долг,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование КАК ДокументОснование,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КомментарийКДоставке КАК КомментарийКДоставке
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
	|ГДЕ
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка В(&МассивОбъектов)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено)
	|	И НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки, ДЕНЬ) = НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.Ссылка.ДатаОтправки, ДЕНЬ)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной.
		ОбластьШапкаДокумента.Параметры.Заполнить(ВыборкаДокументы);
		ТекстЗаголовка=СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Маршрутный лист № %1 от %2."+Символы.ПС+"Дата доставки %3, водитель %4'"),
		ВыборкаДокументы.Номер, Формат(ВыборкаДокументы.Дата, "ДЛФ=DD"),Формат(ВыборкаДокументы.ДатаОтправки, "ДЛФ=DD"),ВыборкаДокументы.Курьер);
        ОбластьШапкаДокумента.Параметры.ТекстЗаголовка=ТекстЗаголовка;
				
		СуммаНаличная=0;
		СуммаБезналичная=0;
		СуммаКартой=0;
		СуммаБезФормы=0;
		Заданий=0;
		
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();				
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			
			Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(ВыборкаПоСтрокам.МаршрутноеЗадание) тогда
				Продолжить;
			КонецЕсли;	

			Заданий=Заданий+1;
			
			МЗ=ВыборкаПоСтрокам.МаршрутноеЗадание;
			ДокументОснование=ВыборкаПоСтрокам.ДокументОснование;

			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") или
				 ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				
				ФормаОплаты=ДокументОснование.ФормаОплаты;
				
				Для Каждого СтрокаОснования из ДокументОснование.Товары цикл
					Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") тогда
						Если СтрокаОснования.ДатаОтгрузки <>ВыборкаДокументы.Ссылка.ДатаОтправки тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;	
					Если ФормаОплаты=Перечисления.ФормыОплаты.Наличная тогда
						СуммаНаличная=СуммаНаличная+СтрокаОснования.СуммаСНДС;
					ИначеЕсли ФормаОплаты=Перечисления.ФормыОплаты.Безналичная тогда
						СуммаБезналичная=СуммаБезналичная+СтрокаОснования.СуммаСНДС;
					ИначеЕсли ФормаОплаты=Перечисления.ФормыОплаты.ПлатежнаяКарта тогда
						СуммаКартой=СуммаКартой+СтрокаОснования.СуммаСНДС;
					иначе
						СуммаБезФормы=СуммаБезФормы+СтрокаОснования.СуммаСНДС;
						Сообщить("Не определен вид оплаты для: "+ДокументОснование);
					КонецЕсли;
	
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаВсего=СуммаБезналичная+СуммаНаличная+СуммаКартой+СуммаБезФормы;
		
		ОбластьШапкаДокумента.Параметры.СуммаНаличная=СуммаНаличная;
		ОбластьШапкаДокумента.Параметры.СуммаБезналичная=СуммаБезналичная;
		ОбластьШапкаДокумента.Параметры.СуммаКартой=СуммаКартой;
		
		ОбластьШапкаДокумента.Параметры.СуммаВсего=СуммаВсего;
		ОбластьШапкаДокумента.Параметры.Заданий=Заданий;
		
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Вывод строк.
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();				
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(ВыборкаПоСтрокам.МаршрутноеЗадание) тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаПоСтрокам);
			
			МЗ=ВыборкаПоСтрокам.МаршрутноеЗадание;
			ДокументОснование=ВыборкаПоСтрокам.ДокументОснование;

			Если ЗначениеЗаполнено(ВыборкаПоСтрокам.Контрагент) тогда
				Если ВыборкаПоСтрокам.Контрагент.ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо
					или ВыборкаПоСтрокам.Контрагент.ЮрФизЛицо=Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо тогда
					ОбластьСтрокаТаблицы.Параметры.Контрагент="";
				КонецЕсли;
			КонецЕсли;	
			
			СуммаПлан=0;
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") или
				 ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				
				ФормаОплаты=ДокументОснование.ФормаОплаты;
				Если ФормаОплаты=Перечисления.ФормыОплаты.ПлатежнаяКарта тогда
					ФормаОплаты="Картой курьеру";
				КонецЕсли;
								
				Для Каждого СтрокаОснования из ДокументОснование.Товары цикл
					Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") тогда
						Если СтрокаОснования.ДатаОтгрузки <>ВыборкаДокументы.Ссылка.ДатаОтправки тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;	
										
					СуммаПлан=СуммаПлан+СтрокаОснования.СуммаСНДС;
						
				КонецЦикла;
				
				ОбластьСтрокаТаблицы.Параметры.Сумма=""+СуммаПлан+" руб. /"+ФормаОплаты;
			иначе
				ОбластьСтрокаТаблицы.Параметры.Сумма="";
			КонецЕсли;
			
			Если ОтображатьТовары тогда				
				СтрокаТовары="";
				Для Каждого СтрокаОснования из ДокументОснование.Товары цикл
					
					Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") тогда
						Если СтрокаОснования.ДатаОтгрузки <>ВыборкаДокументы.Ссылка.ДатаОтправки тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") тогда
						Если СтрокаОснования.ДатаПоступления <>ВыборкаДокументы.Ссылка.ДатаОтправки тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;	

					СтрокаТовары=СтрокаТовары+СтрокаОснования.Номенклатура+Символы.ПС;
					СтрокаТовары=СтрокаТовары+"Количество: "+СтрокаОснования.Количество+Символы.ПС;
					попытка
						СтрокаТовары=СтрокаТовары+"Сумма: "+СтрокаОснования.СуммаСНДС+" руб."+Символы.ПС;
					Исключение
					КонецПопытки;
				КонецЦикла;
				
				ОбластьСтрокаТаблицы.Параметры.СтрокаТовары=СтрокаТовары;
			КонецЕсли;
			
			ОбластьСтрокаТаблицы.Параметры.Интервал="" + Формат(ВыборкаПоСтрокам.ВремяДоставкиС, "ДФ=ЧЧ:мм") + " - " + Формат(ВыборкаПоСтрокам.ВремяДоставкиПо, "ДФ=ЧЧ:мм");
						
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
		КонецЦикла;
						
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//+АТ Терентьев
Функция СформироватьПечатнуюФормуМаршрутныйЛист_АТ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_МаршрутныйЛистАвтотехника";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МегаЛогист_МаршрутныйЛист.ПФ_МаршрутныйЛист_Автотехника");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутныйЛист.Ссылка КАК Ссылка,
	|	МегаЛогист_МаршрутныйЛист.Номер КАК Номер,
	|	МегаЛогист_МаршрутныйЛист.Дата КАК Дата,
	|	МегаЛогист_МаршрутныйЛист.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	МегаЛогист_МаршрутныйЛист.Курьер КАК Курьер,
	|	МегаЛогист_МаршрутныйЛист.Транспорт КАК Транспорт,
	|	МегаЛогист_МаршрутныйЛист.ДатаОтправки КАК ДатаОтправки,
	|	МегаЛогист_МаршрутныйЛист.Статус КАК Статус,
	|	МегаЛогист_МаршрутныйЛист.Комментарий КАК Комментарий,
	|	МегаЛогист_МаршрутныйЛист.СуммаВыдано КАК СуммаВыдано,
	|	МегаЛогист_МаршрутныйЛист.СуммаПолучено КАК СуммаПолучено,
	|	МегаЛогист_МаршрутныйЛист.СуммаПотрачено КАК СуммаПотрачено
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист КАК МегаЛогист_МаршрутныйЛист
	|ГДЕ
	|	МегаЛогист_МаршрутныйЛист.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	// silber {
	| РАЗЛИЧНЫЕ
	// } silber
	|	МаршрутныйЛистМаршрутныеЗадания.НомерСтроки КАК НомерСтроки,
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка КАК Ссылка,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание КАК МаршрутноеЗадание,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ТипЗадания КАК ТипЗадания,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиС КАК ВремяДоставкиС,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.АдресДоставки КАК АдресДоставки,
	//|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент КАК Контрагент,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КонтактноеЛицо КАК КонтактноеЛицо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование.Номер КАК НомерЗаказа,
	|	NULL КАК Долг,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование КАК ДокументОснование,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус КАК МаршрутноеЗаданиеСтатус,
	|	ВЫРАЗИТЬ(МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КомментарийКДоставке КАК СТРОКА(1000)) КАК КомментарийКДоставке,
	|	ПеремещениеТоваровДокумент.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	
	// silber {
	|	ЕСТЬNULL(СвязьКП.КП.Контрагент, МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент) КАК Контрагент,
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка.ДатаОтправки							ДатаОтправки,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент.Партнер		Партнер,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(СвязьКП.КП.Контрагент.Партнер.ОсновнойМенеджер, МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент.Партнер.ОсновнойМенеджер)), """") Менеджер,
	|	ЕСТЬNULL(РасходныйОрдер.АТ_КоличествоМест, 0)								КоличествоМест,
	|
	|	Маршруты.Перевозчик, Маршруты.БП_АдресДоставкиСсылка, Маршруты.БП_АдресДоставкиПеревозчикаСсылка,
	//|	СчФакт.Номер																НомерСчетФактуры,
	// } silber
	
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
	
	// silber { Вытащим последнии ордера
	
	//|	ЛЕВОЕ СОЕДИНЕНИЕ
	//|		Документ.СчетФактураВыданный СчФакт
	//|	ПО
	//|		МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование  = СчФакт.ДокументОснование
	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(	ВЫБРАТЬ Распоряжение Заказ, МАКСИМУМ(Орд.Ссылка) РасходныйОрдер
	|			ИЗ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям Орд
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания Маршр
	|			ПО 	Маршр.МаршрутноеЗадание.ДокументОснование.ЗаказКлиента = Орд.Распоряжение ИЛИ		// реализация
	|				Маршр.МаршрутноеЗадание.ДокументОснование.ЗаказНаПеремещение = Орд.Распоряжение		// перемещение
	|
	|			ГДЕ 
	|				Орд.Ссылка.Проведен И
	|				Маршр.Ссылка В(&МассивОбъектов) И 
	|				МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено) И
	|				НАЧАЛОПЕРИОДА(МаршрутноеЗадание.ДатаДоставки, ДЕНЬ) = НАЧАЛОПЕРИОДА(Маршр.Ссылка.ДатаОтправки, ДЕНЬ) И
	|				МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ
	|
	|			СГРУППИРОВАТЬ ПО Распоряжение
	|		) Орд
	|	ПО 			МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование.ЗаказКлиента 		= Орд.Заказ ИЛИ
	|				МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование.ЗаказНаПеремещение 	= Орд.Заказ
	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АТ_СвязьОбъектовКП СвязьКП
	|ПО	МаршрутноеЗадание.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров И 
	|	МаршрутноеЗадание.ДокументОснование = СвязьКП.ДокументРезультат
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|		(	ВЫБРАТЬ 
	|				Листы.МаршрутноеЗадание 			МаршрутноеЗадание,
	|				МАКСИМУМ(Перевозчик)				Перевозчик,
	|				МАКСИМУМ(АдресДоставки) 			БП_АдресДоставкиСсылка, 
	|				МАКСИМУМ(АдресДоставкиПеревозчик) 	БП_АдресДоставкиПеревозчикаСсылка
	|			ИЗ
	|				РегистрСведений.АТ_МаршрутДоставки Рег
	|
	|       	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания Листы
	|			ПО						ЕСТЬNULL(Листы.МаршрутноеЗадание.ДокументОснование.ЗаказКлиента, 		Листы.МаршрутноеЗадание.ДокументОснование.ЗаказНаПеремещение) 	= Рег.Объект И
	|									ЕСТЬNULL(Листы.МаршрутноеЗадание.ДокументОснование.СкладОтправитель, 	Листы.МаршрутноеЗадание.ДокументОснование.Склад) 				= Рег.Отправитель И
	|									Листы.Ссылка В(&МассивОбъектов)
	|		
	|			СГРУППИРОВАТЬ ПО МаршрутноеЗадание, АдресДоставки
	|		) Маршруты
	|ПО
	|	Маршруты.МаршрутноеЗадание 	= МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание 	
	// } silber
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваровДокумент
	|		ПО МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование = ПеремещениеТоваровДокумент.Ссылка
	|ГДЕ
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка В(&МассивОбъектов)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено)
	|	И НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки, ДЕНЬ) = НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.Ссылка.ДатаОтправки, ДЕНЬ)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		//Если Не ПервыйДокумент Тогда
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		
		Если ПервыйДокумент Тогда
			
			ОбластьШапка	= Макет.ПолучитьОбласть("Шапка");
			ОбластьНачало	= Макет.ПолучитьОбласть("Начало");
			
			ОбластьНачало.Параметры.Дата = Формат(ВыборкаДокументы.ДатаОтправки,"ДФ=dd.MM.yy");
			НомерРаспоряжения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументы.Номер, Ложь, Ложь); 
						
			//ОбластьСтрока	= Макет.ПолучитьОбласть("Строка");
			ОбластьПодвал	= Макет.ПолучитьОбласть("Подвал");
			//silber {
			ОбластьШапка2		= Макет.ПолучитьОбласть("ШапкаТаблПродолжение");
			ОбластьСтрокаРеал	= Макет.ПолучитьОбласть("Строка");
			ОбластьСтрокаПер	= Макет.ПолучитьОбласть("СтрокаПеремещения");
			ОбластьПродолжение	= Макет.ПолучитьОбласть("Продолжение");
			ОбластьШапка.Параметры.Номер = НомерРаспоряжения; 
			//} silber
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			//ОбластьНачало.Параметры.Номер = НомерРаспоряжения;
			ОбластьНачало.Параметры.Экспедитор = ВыборкаДокументы.Курьер;
			
			ТабличныйДокумент.Вывести(ОбластьНачало);
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		//НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Ном = 1;
		
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			
			МЗ = ВыборкаПоСтрокам.МаршрутноеЗадание;
			ДокументОснование = ВыборкаПоСтрокам.ДокументОснование;
			
			// silber {
			ЭтоПеремещение = ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров");
			ОбластьСтрока = ?(ЭтоПеремещение, ОбластьСтрокаПер, ОбластьСтрокаРеал);
			// } silber
			
			//Номер документа.
			ОбластьСтрока.Параметры.Ном = Ном;
			
			//Если ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказКлиента) Тогда
			//	НомерДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоСтрокам.ЗаказКлиента, "Номер");
			//ИначеЕсли ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказНаПеремещение) Тогда
			//	НомерДокумента = ВыборкаПоСтрокам.НомерЗаказа + " (Заказ " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоСтрокам.ЗаказНаПеремещение, "Номер") + ")";
			//Иначе
			//	НомерДокумента = ВыборкаПоСтрокам.НомерЗаказа;
			//КонецЕсли;
			
			// silber { вместо закоментаренного выше
			
			Если ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказКлиента) Тогда
				НомерДокумента2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоСтрокам.ЗаказКлиента, "Номер");
				НомерДокумента = "реализация" + Символы.ПС + ВыборкаПоСтрокам.НомерЗаказа;
			ИначеЕсли ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказНаПеремещение) Тогда
				НомерДокумента2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПоСтрокам.ЗаказНаПеремещение, "Номер");
				НомерДокумента = "перемещение" + Символы.ПС + ВыборкаПоСтрокам.НомерЗаказа;
			Иначе
				НомерДокумента = ВыборкаПоСтрокам.НомерЗаказа;
				НомерДокумента2 = "";
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(ВыборкаПоСтрокам.НомерСчетФактуры) Тогда
			//	НомерДокумента = "упд" + Символы.ПС + ВыборкаПоСтрокам.НомерСчетФактуры;
			//КонецЕсли;
			
			ОбластьСтрока.Параметры.НомерДокумента2 = НомерДокумента2;
			
			// } silber
			
			ОбластьСтрока.Параметры.НомерДокумента = НомерДокумента;
			
			//ТК, Контрагент и адреса
			
			Если Не ПолучитьФункциональнуюОпцию("АТ_Мультидоставка") Тогда
			
				Если ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказКлиента) Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаПоСтрокам.ЗаказКлиента, "ПеревозчикПартнер, АдресДоставки, АдресДоставкиПеревозчика, БП_АдресДоставкиСсылка, БП_АдресДоставкиПеревозчикаСсылка");
				ИначеЕсли ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказНаПеремещение) Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаПоСтрокам.ЗаказНаПеремещение, "ПеревозчикПартнер, АдресДоставки, АдресДоставкиПеревозчика");
				Иначе
					ЗначенияРеквизитов = Новый Структура("ПеревозчикПартнер, АдресДоставки, АдресДоставкиПеревозчика", Неопределено, ВыборкаПоСтрокам.АдресДоставки, Неопределено);
				КонецЕсли;
				
			Иначе
				
				// silber { вместо закоментаренного выше
				ЗначенияРеквизитов = Новый Структура("ПеревозчикПартнер, АдресДоставки, АдресДоставкиПеревозчика, БП_АдресДоставкиСсылка, БП_АдресДоставкиПеревозчикаСсылка",
												ВыборкаПоСтрокам.Перевозчик, 
												?(ЗначениеЗаполнено(ВыборкаПоСтрокам.БП_АдресДоставкиСсылка), ВыборкаПоСтрокам.БП_АдресДоставкиСсылка.Представление, ""),
												?(ЗначениеЗаполнено(ВыборкаПоСтрокам.БП_АдресДоставкиПеревозчикаСсылка), ВыборкаПоСтрокам.БП_АдресДоставкиПеревозчикаСсылка.Представление, ""),
												ВыборкаПоСтрокам.БП_АдресДоставкиСсылка,
												ВыборкаПоСтрокам.БП_АдресДоставкиПеревозчикаСсылка);
			КонецЕсли;
			// } silber
			
			ОбластьСтрока.Параметры.КонтрагентАдрес = ЗначенияРеквизитов.АдресДоставки;
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.ПеревозчикПартнер) Тогда
				ОбластьСтрока.Параметры.ТранспортнаяКомпанияКонтрагент = ЗначенияРеквизитов.ПеревозчикПартнер;
				ОбластьСтрока.Параметры.ТранспортнаяКомпанияАдрес = ЗначенияРеквизитов.АдресДоставкиПеревозчика;
			Иначе
				ОбластьСтрока.Параметры.ТранспортнаяКомпанияКонтрагент = "";
				ОбластьСтрока.Параметры.ТранспортнаяКомпанияАдрес = "";
			КонецЕсли;
			
			
			//Контрагент.
			//Если ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			//	ОбластьСтрока.Параметры.Контрагент = "Автотехника"
			
			// silber {
			Если ЭтоПеремещение Тогда
				ОбластьСтрока.Параметры.Склад = ДокументОснование.СкладПолучатель;
			Иначе
				ОбластьСтрока.Параметры.ВремяРаботы = РегистрыСведений.АТ_ГрафикРаботы.ПолучитьСтрВремяРаботыДня(ВыборкаПоСтрокам.Партнер, ВыборкаПоСтрокам.ДатаОтправки);
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Контрагент = ВыборкаПоСтрокам.Контрагент;
			ОбластьСтрока.Параметры.Менеджер = ?(ЗначениеЗаполнено(ВыборкаПоСтрокам.Менеджер), СтрШаблон("(%1)", ВыборкаПоСтрокам.Менеджер), "");
			
			// Места
			ОбластьСтрока.Параметры.Мест = Формат(ВыборкаПоСтрокам.КоличествоМест, "ЧН=-");
			
			// Веса
			Если ЗначениеЗаполнено(ВыборкаПоСтрокам.ДокументОснование) Тогда
				ВесТочный 	= Ложь;
				Вес 		= АТ_Сервер.ПолучитьВесДокумента(ВыборкаПоСтрокам.ДокументОснование, ВесТочный);
				ОбластьСтрока.Параметры.Вес = ?(ВесТочный, "", "?") + ?(Вес, Вес, "");
			КонецЕсли;
			
			// } silber
			
			//Контактная информация.
			Если ТипЗнч(ВыборкаПоСтрокам.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ВыборкаПоСтрокам.ЗаказКлиента) Тогда
				//silber (Юля сказала закомментраить) Если ЗначениеЗаполнено(ЗначенияРеквизитов.ПеревозчикПартнер) И ЗначениеЗаполнено(ЗначенияРеквизитов.БП_АдресДоставкиПеревозчикаСсылка) Тогда
				//	КонтактнаяИнформация = АТ_ПолучитьКонтактноеЛицо(ЗначенияРеквизитов.БП_АдресДоставкиПеревозчикаСсылка);
				//Иначе
					КонтактнаяИнформация = АТ_ПолучитьКонтактноеЛицо(ЗначенияРеквизитов.БП_АдресДоставкиСсылка);
				//КонецЕсли;
			Иначе
				КонтактнаяИнформация = Строка(ВыборкаПоСтрокам.КонтактноеЛицо) + Символы.ПС;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.КонтактнаяИнформация = КонтактнаяИнформация;
			
			//Задание.
			ОбластьСтрока.Параметры.Задание = ВыборкаПоСтрокам.КомментарийКДоставке;
			
			// silber {
			
			Если ВыборкаПоСтрокам.Количество() - Ном < 3 Тогда
				ОблПроверки = Новый ТабличныйДокумент;
				ОблПроверки.Вывести(ОбластьСтрока);
				ОблПроверки.Вывести(ОбластьПодвал);
			Иначе
				ОблПроверки = ОбластьСтрока;
			КонецЕсли;
			
			Если Не ТабличныйДокумент.ПроверитьВывод(ОблПроверки) Тогда
				//ТабличныйДокумент.Вывести(ОбластьПродолжение);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапка2);
			КонецЕсли;
			
			// } silber
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			Ном = Ном + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		//УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = "Страница [&НомерСтраницы] из [&СтраницВсего] по документу №" + НомерРаспоряжения;
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция АТ_ПолучитьКонтактноеЛицо(СсылкаАдрес)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(СсылкаАдрес) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление,
		|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
		|ИЗ
		|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
		|		ПО БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	БП_АдресаДоставкиКонтрагентов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Вид";
		Запрос.УстановитьПараметр("Ссылка", СсылкаАдрес);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат = Результат + ?(Результат = "", Строка(Выборка.Ссылка) + " тел.:" + Выборка.Представление, ", " + Выборка.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//-АТ Терентьев

Функция СформироватьПечатнуюФормуПутевойЛист(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_ПутевойЛист";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.МегаЛогист_МаршрутныйЛист.ПФ_MXL_ПутевойЛист");
	
	ОбластьПервыйЛист 				= Макет.ПолучитьОбласть("ПервыйЛист");
	ОбластьВторойЛистЧасть1			= Макет.ПолучитьОбласть("ВторойЛистЧасть1");
	ОбластьМаршрут					= Макет.ПолучитьОбласть("Маршрут");
	ОбластьВторойЛистЧасть2			= Макет.ПолучитьОбласть("ВторойЛистЧасть2");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МегаЛогист_МаршрутныйЛист.Ссылка КАК Ссылка,
	|	МегаЛогист_МаршрутныйЛист.Номер КАК Номер,
	|	МегаЛогист_МаршрутныйЛист.Дата КАК Дата,
	|	МегаЛогист_МаршрутныйЛист.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	МегаЛогист_МаршрутныйЛист.Курьер,
	|	МегаЛогист_МаршрутныйЛист.Транспорт,
	|	МегаЛогист_МаршрутныйЛист.ДатаОтправки,
	|	МегаЛогист_МаршрутныйЛист.Статус,
	|	МегаЛогист_МаршрутныйЛист.Комментарий,
	|	МегаЛогист_МаршрутныйЛист.СуммаВыдано,
	|	МегаЛогист_МаршрутныйЛист.СуммаПолучено,
	|	МегаЛогист_МаршрутныйЛист.СуммаПотрачено
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист КАК МегаЛогист_МаршрутныйЛист
	|ГДЕ
	|	МегаЛогист_МаршрутныйЛист.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистМаршрутныеЗадания.НомерСтроки КАК НомерСтроки,
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка КАК Ссылка,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ТипЗадания КАК ТипЗадания,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиС КАК ВремяДоставкиС,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.АдресДоставки КАК АдресДоставки,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Контрагент КАК Контрагент,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КонтактноеЛицо КАК КонтактноеЛицо,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование.Номер КАК НомерЗаказа,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДокументОснование КАК ДокументОснование,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус,
	|	МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.КомментарийКДоставке КАК КомментарийКДоставке
	|ИЗ
	|	Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания КАК МаршрутныйЛистМаршрутныеЗадания
	|ГДЕ
	|	МаршрутныйЛистМаршрутныеЗадания.Ссылка В(&МассивОбъектов)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.Статус <> ЗНАЧЕНИЕ(Перечисление.МегаЛогист_СтатусыМаршрутногоЗадания.Отменено)
	|	И НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ДатаДоставки, ДЕНЬ) = НАЧАЛОПЕРИОДА(МаршрутныйЛистМаршрутныеЗадания.Ссылка.ДатаОтправки, ДЕНЬ)
	|	И МаршрутныйЛистМаршрутныеЗадания.МаршрутноеЗадание.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументы = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Транспорт=ВыборкаДокументы.Транспорт;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной.
		ОбластьПервыйЛист.Параметры.Заполнить(ВыборкаДокументы);
		
		// данные об организации
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация,ВыборкаДокументы.Дата);
							
		ОбластьПервыйЛист.Параметры.ПараметрыОрганизации	= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		
		ОбластьПервыйЛист.Параметры.ТССерия=Транспорт.ЛицензионнаяКарточкаСерия;
		ОбластьПервыйЛист.Параметры.ТСНомер=Транспорт.ЛицензионнаяКарточкаНомер;
		ОбластьПервыйЛист.Параметры.ТСМарка=Транспорт.Марка;
		ОбластьПервыйЛист.Параметры.ТСГосНомер=Транспорт.Код;
		
		ОбластьПервыйЛист.Параметры.ПрицепМарка=Транспорт.Прицеп;
		ОбластьПервыйЛист.Параметры.ПрицепГосНомер=Транспорт.ГосударственныйНомерПрицепа;
		
		ОбластьПервыйЛист.Параметры.ПечОрганизация=СокрЛП(Организация.Наименование);

		ТабличныйДокумент.Вывести(ОбластьПервыйЛист);

		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		ТабличныйДокумент.Вывести(ОбластьВторойЛистЧасть1);
		
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
		НС=0;
		Пока ВыборкаПоСтрокам.Следующий() Цикл
			
			Если МегаЛогист_Общий.ЭтоПроблемноеМЗ(ВыборкаПоСтрокам.МаршрутноеЗадание) тогда
				Продолжить;
			КонецЕсли;	
			
			НС=НС+1;
			ОбластьМаршрут.Параметры.ПунктРазгрузки = ВыборкаПоСтрокам.МаршрутноеЗадание.АдресДоставки;
			ОбластьМаршрут.Параметры.НС = НС;
			ОбластьМаршрут.Параметры.ДатаДоставки = ВыборкаДокументы.ДатаОтправки;
			ОбластьМаршрут.Параметры.Контрагент=ВыборкаПоСтрокам.МаршрутноеЗадание.Контрагент;
					
			ТабличныйДокумент.Вывести(ОбластьМаршрут);
		КонецЦикла;
				
		ТабличныйДокумент.Вывести(ОбластьВторойЛистЧасть2);
										
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли

// silber {

&НаСервере
Функция РасспределитьСуммуРейса_ст(МаршрутныйЛистСсылка, СуммаРейса) Экспорт
	
	//// Распределяет общую сумму затрат на затраты по заданиям
	//// и возвращает таблицу значений аналагичную таблице документа МегаЛогист_МаршрутноеЗадание
	//// если это транспортная компания тогда рапрседеляется сумма как двойная цена
	//// если заданий несколько, а адрес один тогда только первому, а последующим по нулям.
	//
	//Таб = МаршрутныйЛистСсылка.МаршрутныеЗадания.Выгрузить();
	//Таб.ЗаполнитьЗначения(0, "АТ_СуммаРейса");
	//
	//Если Таб.Количество() Тогда
	//
	//	Запрос = Новый Запрос("
	//	|ВЫБРАТЬ 
	//	|	null ОбщИтоги, АдресДоставки, МИНИМУМ(Ссылка) МаршрутноеЗадание,
	//	|	1 + МАКСИМУМ(ВЫБОР КОГДА ТипЗадания = &ТипТК ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КолАдресов
	//	|ИЗ
	//	|	Документ.МегаЛогист_МаршрутноеЗадание
	//	|ГДЕ
	//	|	Ссылка В(	ВЫБРАТЬ МаршрутноеЗадание 
	//	|				ИЗ 		Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	//	|				ГДЕ Ссылка = &Ссылка
	//	|			)
	//	|СГРУППИРОВАТЬ ПО
	//	|	АдресДоставки
	//	|
	//	|ИТОГИ  СУММА(КолАдресов) КолАдресов ПО ОбщИтоги
	//	|");
	//	
	//	Запрос.УстановитьПараметр("ТипТК", 	Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаВТК);
	//	Запрос.УстановитьПараметр("Ссылка",	МаршрутныйЛистСсылка);
	//	
	//	ВыбИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//	Если ВыбИтоги.Следующий() Тогда
	//		
	//		РаздатьПо = СуммаРейса / ВыбИтоги.КолАдресов;
	//		ВыбАдреса = ВыбИтоги.Выбрать();
	//		
	//		Пока ВыбАдреса.Следующий() Цикл
	//			Таб.Найти(ВыбАдреса.МаршрутноеЗадание, "МаршрутноеЗадание").АТ_СуммаРейса = РаздатьПо * ВыбАдреса.КолАдресов;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	Таб[0].АТ_СуммаРейса = Таб[0].АТ_СуммаРейса + СуммаРейса - Таб.Итог("АТ_СуммаРейса");
	//	
	//КонецЕсли;
	//
	//Возврат Таб;
	
КонецФункции
&НаСервере
Функция РасспределитьСуммуРейса_Ст2(МаршрутныйЛистСсылка, СуммаРейса) Экспорт
	
	//// Распределяет общую сумму затрат на затраты по заданиям
	//// и возвращает таблицу значений аналагичную таблице документа МегаЛогист_МаршрутноеЗадание
	//// если это транспортная компания тогда рапрседеляется сумма как двойная цена
	//// если заданий несколько, а адрес один тогда только первому, а последующим по нулям.
	//
	//Таб = МаршрутныйЛистСсылка.МаршрутныеЗадания.Выгрузить();
	//Таб.ЗаполнитьЗначения(0, "АТ_СуммаРейса");
	//
	//Если Таб.Количество() Тогда
	//
	//	Запрос = Новый Запрос("
	//	|ВЫБРАТЬ 
	//	|	null ОбщИтоги, Контрагент, МИНИМУМ(Ссылка) МаршрутноеЗадание,
	//	|	1 + МАКСИМУМ(ВЫБОР КОГДА ТипЗадания = &ТипТК ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КолАдресов
	//	|ИЗ
	//	|	Документ.МегаЛогист_МаршрутноеЗадание
	//	|ГДЕ
	//	|	Ссылка В(	ВЫБРАТЬ МаршрутноеЗадание
	//	|				ИЗ 		Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
	//	|				ГДЕ Ссылка = &Ссылка И Статус В(&РазрешенныеСтатусы)
	//	|			)
	//	|СГРУППИРОВАТЬ ПО
	//	|	Контрагент
	//	|
	//	|ИТОГИ  СУММА(КолАдресов) КолАдресов ПО ОбщИтоги
	//	|");
	//	
	//	РазрешенныеСтатусы = Новый Массив;
	//	РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено);
	//	РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполняется);
	//	РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КВыполнению);
	//	РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КРаспределению);
	//	
	//	Запрос.УстановитьПараметр("ТипТК", 				Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаВТК);
	//	Запрос.УстановитьПараметр("РазрешенныеСтатусы", РазрешенныеСтатусы);
	//	Запрос.УстановитьПараметр("Ссылка",				МаршрутныйЛистСсылка);
	//	
	//	ВыбИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//	Если ВыбИтоги.Следующий() Тогда
	//		
	//		РаздатьПо = СуммаРейса / ВыбИтоги.КолАдресов;
	//		ВыбАдреса = ВыбИтоги.Выбрать();
	//		
	//		Пока ВыбАдреса.Следующий() Цикл
	//			Таб.Найти(ВыбАдреса.МаршрутноеЗадание, "МаршрутноеЗадание").АТ_СуммаРейса = РаздатьПо * ВыбАдреса.КолАдресов;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//	Таб[0].АТ_СуммаРейса = Таб[0].АТ_СуммаРейса + СуммаРейса - Таб.Итог("АТ_СуммаРейса");
	//	
	//КонецЕсли;
	//
	//Возврат Таб;
	
КонецФункции
&НаСервере
Функция РасспределитьСуммуРейса(МаршрутныйЛистСсылка, СуммаРейса) Экспорт
	
	// Распределяет общую сумму затрат на затраты по заданиям
	// и возвращает таблицу значений аналагичную таблице документа МегаЛогист_МаршрутноеЗадание
	// если это транспортная компания тогда рапрседеляется сумма как двойная цена
	
	Таб = МаршрутныйЛистСсылка.МаршрутныеЗадания.Выгрузить();
	Таб.ЗаполнитьЗначения(0, "АТ_СуммаРейса");
	
	Если Таб.Количество() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	0		колАдресов,
		|			АдресДоставки,
		|			Контрагент,
		|	Ссылка 	МаршрутноеЗадание,
		|	ВЫБОР КОГДА ТипЗадания = &ТипТК ТОГДА 2 ИНАЧЕ 1 КОНЕЦ КоэффТК
		|ИЗ
		|	Документ.МегаЛогист_МаршрутноеЗадание
		|ГДЕ
		|	Ссылка В(	ВЫБРАТЬ МаршрутноеЗадание
		|				ИЗ 		Документ.МегаЛогист_МаршрутныйЛист.МаршрутныеЗадания
		|				ГДЕ Ссылка = &Ссылка И Статус В(&РазрешенныеСтатусы))
		|ИТОГИ
		|	МАКСИМУМ(КоэффТК), МАКСИМУМ(КоэффТК) * КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АдресДоставки) колАдресов
		|ПО 
		|	ОБЩИЕ, АдресДоставки, Контрагент
		|");
		
		РазрешенныеСтатусы = Новый Массив;
		РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполнено);
		РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.Выполняется);
		РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КВыполнению);
		РазрешенныеСтатусы.Добавить(Перечисления.МегаЛогист_СтатусыМаршрутногоЗадания.КРаспределению);
		
		Запрос.УстановитьПараметр("ТипТК", 				Справочники.МегаЛогист_ТипыМаршрутныхЗаданий.ДоставкаВТК);
		Запрос.УстановитьПараметр("РазрешенныеСтатусы", РазрешенныеСтатусы);
		Запрос.УстановитьПараметр("Ссылка",				МаршрутныйЛистСсылка);
		
		ВыбИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ВыбИтоги.Следующий() Тогда
			
			колАдр = 0;
			ВыбАдреса = ВыбИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыбАдреса.Следующий() Цикл
				колАдр = колАдр + ВыбАдреса.КоэффТК;
			КонецЦикла;
			ВыбАдреса.Сбросить();
			
			РаздатьПо = СуммаРейса / колАдр;
			
			Пока ВыбАдреса.Следующий() Цикл
				
				ВыборкаКонтрагента = ВыбАдреса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				РаздатьПоКонтрагенту = РаздатьПо / ВыборкаКонтрагента.Количество();
				
				Пока ВыборкаКонтрагента.Следующий() Цикл
					
					ВыборкаЗаданий = ВыборкаКонтрагента.Выбрать();
					РаздатьПоЗаданию = РаздатьПоКонтрагенту / ВыборкаЗаданий.Количество();
					
					Пока ВыборкаЗаданий.Следующий() Цикл
						
						Таб.Найти(ВыборкаЗаданий.МаршрутноеЗадание, "МаршрутноеЗадание").АТ_СуммаРейса = РаздатьПоЗаданию * ВыбАдреса.КоэффТК;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Таб[0].АТ_СуммаРейса = Таб[0].АТ_СуммаРейса + СуммаРейса - Таб.Итог("АТ_СуммаРейса");
		
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции


// } silber