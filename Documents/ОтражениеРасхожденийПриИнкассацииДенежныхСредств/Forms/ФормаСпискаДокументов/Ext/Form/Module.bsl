
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановитьСвязиПараметровВыбораБанковскогоСчета();
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ОрганизацияОтбор.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.ДенежныеСредстваВПутиОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	
	ИспользоватьНесколькоРасчетныхСчетов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	Элементы.БанковскийСчетОтбор.Видимость = ИспользоватьНесколькоРасчетныхСчетов;
	Элементы.ДенежныеСредстваВПутиБанковскийСчет.Видимость = ИспользоватьНесколькоРасчетныхСчетов;
	
	ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	Элементы.ДенежныеСредстваВПутиКасса.Видимость = ИспользоватьНесколькоРасчетныхСчетов;
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.РасхожденияПриИнкассацииКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РасходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ОтражениеРасхожденийПриИнкассацииДенежныхСредств" Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	БанковскийСчет = Настройки.Получить("БанковскийСчет");
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	
	ОрганизацияОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияОтборПриИзмененииНаСервере()
	
	УстановитьСвязиПараметровВыбораБанковскогоСчета();
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		РасхожденияПриИнкассации,
		"БанковскийСчет",
		БанковскийСчет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(БанковскийСчет));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ДенежныеСредстваВПути,
		"БанковскийСчет",
		БанковскийСчет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(БанковскийСчет));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасхожденияПриИнкассации

&НаКлиенте
Процедура РасхожденияПриИнкассацииПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьОтражениеИзлишка(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить(
		"Основание",
		Новый Структура("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств")));
	ОткрытьФорму("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.РасхожденияПриИнкассации);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтражениеНедостачи(Команда)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить(
		"Основание",
		Новый Структура("ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств")));
	ОткрытьФорму("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.РасхожденияПриИнкассации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасхождение(Команда)
	
	ДанныеСтроки = Элементы.ДенежныеСредстваВПути.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		СтруктураОснование = Новый Структура("Организация, БанковскийСчет, Касса, Валюта");
		ЗаполнитьЗначенияСвойств(СтруктураОснование, ДанныеСтроки);
		Если ДанныеСтроки.СуммаВПути > 0 Тогда
			СтруктураОснование.Вставить("Сумма", ДанныеСтроки.СуммаВПути);
			СтруктураОснование.Вставить("ХозяйственнаяОперация",
				ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств"));
		Иначе
			СтруктураОснование.Вставить("Сумма", ДанныеСтроки.СуммаИзлишка);
			СтруктураОснование.Вставить("ХозяйственнаяОперация",
				ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств"));
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		
		Открытьформу("Документ.ОтражениеРасхожденийПриИнкассацииДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.РасхожденияПриИнкассации);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.РасхожденияПриИнкассации);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.РасхожденияПриИнкассации, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.РасхожденияПриИнкассации);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.РасхожденияПриИнкассации);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = РасхожденияПриИнкассации.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	Элемент.Представление = НСтр("ru = 'Отражение недостачи / Списание'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отражение недостачи / Списание'"));
	
	//
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	Элемент.Представление = НСтр("ru = 'Отражение излишка'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отражение излишка'"));
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "РасхожденияПриИнкассации.Дата", Элементы.Дата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораБанковскогоСчета()
	
	МассивПараметров = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	Элементы.БанковскийСчетОтбор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок,
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Организация));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок,
			"БанковскийСчет",
			БанковскийСчет,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(БанковскийСчет));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСписки()
	
	Элементы.ДенежныеСредстваВПути.Обновить();
	
КонецПроцедуры

&НаСервере
Функция МассивДинамическихСписков()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(РасхожденияПриИнкассации);
	МассивСписков.Добавить(ДенежныеСредстваВПути);
	
	Возврат МассивСписков;

КонецФункции

#КонецОбласти
