&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьЗаголовокРеквизитовПечати();
	
	УчетНДСУТ.ЗаполнитьСписокВыбораНалогообложенияПродажи(Элементы.НалогообложениеНДС, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбновитьКонтрольЗаполненияАналитикиРасходов(ЭтаФорма, Неопределено);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	Если НЕ РасхожденияАктуальны Тогда
		
		Если Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара")
			ИЛИ Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
			
			ЗаполнитьРасхожденияСервер();
			
		ИначеЕсли ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да,	Нстр("ru='Перезаполнить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена,Нстр("ru='Отмена'"));
			
			Отказ = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПередЗаписьюВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				НСтр("ru='Табличная часть ""Товары"" была изменена. Перезаполнить расхождения?'"),
				СписокКнопок, , КодВозвратаДиалога.Да);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Документы.ТранспортнаяНакладная.СохранитьРеквизитыТОРГ12ПередЗаписью(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСлужебныеРеквизитыТабличныхЧастей();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	НеТребуетсяВводСчетаФактуры = (Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	Документы.ТранспортнаяНакладная.СравнитьРеквизитыТОРГ12ПослеЗаписи(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора());
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
		ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
		ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
		Иначе
			ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТранспортнаяНакладная" Тогда
		ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
		ОбновитьИнформациюТранспортныхНакладных(ДанныеТранспортныхНакладных, ЭтаФорма);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И (Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор
			Или Параметр.Свойство("СписокОснований") И Параметр.СписокОснований.НайтиПоЗначению(Объект.Ссылка) <> Неопределено) Тогда
		ОбновитьТекстСчетаФактуры();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаПодбораТоваровИзЗаказа" Тогда
		
		ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		ТекстСчетФактура = ВыбранноеЗначение.ПредставлениеСчетаФактуры;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		
		НастроитьПредставлениеСчетаФактурыПолученный();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		ОбработкаВыбораДокументаОснованияСервер(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ТранспортнаяНакладная.Форма.ФормаВыбора" Тогда
		
		ДанныеТранспортныхНакладных = ОбработкаВыбораТранспортнойНакладной(ВыбранноеЗначение);
		ОбновитьИнформациюТранспортныхНакладных(ДанныеТранспортныхНакладных, ЭтаФорма);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ДокументОснование", Объект.ДокументОснование);
	Оповестить("Запись_КорректировкаРеализации", ПараметрыЗаписи, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ИзмененныеРеквизитыТОРГ12Строка) Тогда
		
		Если СтрНайти(ИзмененныеРеквизитыТОРГ12СтрокаСинонимов, ",") <> 0 Тогда  
			ТекстВопроса = НСтр("ru = 'Реквизиты %ИзмененныеРеквизиты% были изменены. Изменить их значения в транспортных накладных, в которых числится текущий документ?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Реквизит %ИзмененныеРеквизиты% был изменен. Изменить его значение в транспортных накладных, в которых числится текущий документ?'");
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзмененныеРеквизиты%", ИзмененныеРеквизитыТОРГ12СтрокаСинонимов);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Изменить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не изменять'"));
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)), ТекстВопроса, СписокКнопок);
		Возврат;
		
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		ОбновитьРеквизитыТранспортныхНакладныхНаСервере();
	КонецЕсли;
	ЗапретНаЗакрытиеФормы = Ложь;
	
	ИзмененныеРеквизитыТОРГ12Строка = "";
	ИзмененныеРеквизитыТОРГ12СтрокаСинонимов = "";
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗапретНаЗакрытиеФормы Тогда
		Отказ = Истина;
	Иначе
		ПринудительноЗакрытьФорму = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ПоказатьЗначение(Неопределено, Объект.ДокументОснование);
		
	Иначе		
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		СписокТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеДокументаОснованияНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТипов, Элементы.ПредставлениеДокументаОснования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатиеЗавершение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Проведен", Истина);
	СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		
	Если ВыбранноеЗначение.Значение = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяФормыВыбора = "Документ.РеализацияТоваровУслуг.ФормаВыбора";
		СтруктураОтбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено"));
		
	ИначеЕсли ВыбранноеЗначение.Значение = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ИмяФормыВыбора = "Документ.АктВыполненныхРабот.ФормаВыбора";
		
	ИначеЕсли ВыбранноеЗначение.Значение = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ИмяФормыВыбора = "Документ.РеализацияУслугПрочихАктивов.ФормаВыбора";
		
	КонецЕсли;
	
	ОткрытьФорму(
		ИмяФормыВыбора,
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОснованияАктаПриемкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.АктОРасхожденияхПослеОтгрузкиОснование) Тогда
		ПоказатьЗначение(,Объект.АктОРасхожденияхПослеОтгрузкиОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	Элементы.АналитикаРасходовДополнительно.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	
	ОбновитьКонтрольЗаполненияАналитикиРасходов(ЭтаФорма, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	СтатьяЗаполнена = ЗначениеЗаполнено(Объект.СтатьяДоходов);
	
	Элементы.АналитикаДоходов.Доступность = СтатьяЗаполнена;
	Элементы.АналитикаДоходовДополнительно.Доступность = СтатьяЗаполнена;
	
	Если СтатьяЗаполнена Тогда
		СтатьяДоходовПриИзмененииНаСервере();
	Иначе
		АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяДоходовПриИзмененииНаСервере()
	
	АналитикаДоходовОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка, Объект.Организация, Объект.ВидКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ОперацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураПолученныйОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортнаяНакладнаяТекстНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ТранспортнаяНакладная);
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаДокумента", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.АналитикаРасходов = ВыбранноеЗначение.АналитикаРасходов;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст)
		И АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст)
		И АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовДополнительноНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Объект.АналитикаРасходов) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Объект.АналитикаРасходов) = Тип("ДокументСсылка.ЗаказКлиента")
	Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовДополнительноОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.АналитикаРасходов = ВыбранноеЗначение.АналитикаРасходов;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовДополнительноАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовДополнительноОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьВалютыНажатие(Элемент, СтандартнаяОбработка)
	
	Перем ЕстьКорректировки;

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"         , Объект.Валюта);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетов"    , Объект.ВалютаВзаиморасчетов);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов"     , Объект.Расхождения.Итог("СуммаВзаиморасчетов"));
	СтруктураПараметров.Вставить("СуммаДокумента"          , Объект.Расхождения.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("Курс"                    , Объект.Курс);
	СтруктураПараметров.Вставить("Кратность"               , Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаДокумента"           , Объект.Дата);
	СтруктураПараметров.Вставить("ЭтоДокументПродажи"      , Истина);
	
	ПроверитьНаличиеКорректировок(Объект.Ссылка, Объект.ДокументОснование, ЕстьКорректировки);
	СтруктураПараметров.Вставить("ТолькоПросмотр"          , ЭтаФорма.ТолькоПросмотр ИЛИ ЕстьКорректировки);
	
	СтруктураПараметров.Вставить("ВалютаДокументаТолькоПросмотр", Истина);
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетовТолькоПросмотр", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеВзаиморасчеты", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВалютыИКурсДокумента", СтруктураПараметров,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Поле = Элементы.ТоварыСумма Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования суммы выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
	
	ИначеЕсли Поле = Элементы.ТоварыСуммаСНДС Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования суммы с НДС выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),);
		КонецЕсли;

	ИначеЕсли Поле = Элементы.ТоварыЗаказКлиента Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, ТекущаяСтрока.ЗаказКлиента);
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			ПараметрОповещения.Вставить("СверхЗаказа",          Истина);
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ЗаполнитьЗаказКлиента(ЭтаФорма, ТекущаяСтрока);
		
		Если НЕ СкладГруппа Тогда
			ТекущаяСтрока.Склад = Объект.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РасхожденияАктуальны = Ложь;
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ТоварыКешТекущейСтроки, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент <> Неопределено
		И Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОтражения Тогда
		
		СписокВыбора = Элементы.ТоварыВариантОтражения.СписокВыбора;
		СписокВыбора.Очистить();
		
		Если Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара") Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
			Если СтрокаТаблицы.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки"));
			КонецЕсли;
		Иначе
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
			Если СтрокаТаблицы.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа, Ложь);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
		СформироватьНадписьВалюты(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыДокументаОснования = РеквизитыДокументаОснования(Объект.ДокументОснование);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Валюта",                Объект.Валюта);
		ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
		ПараметрыОтбора.Вставить("Договор",    			  Объект.Договор);
		ПараметрыОтбора.Вставить("НалогообложениеНДС",    РеквизитыДокументаОснования.НалогообложениеНДС);
		ПараметрыОтбора.Вставить("Организация",           Объект.Организация);
		ПараметрыОтбора.Вставить("Партнер",               Объект.Партнер);
		ПараметрыОтбора.Вставить("Соглашение",            Объект.Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		ПараметрыОтбора.Вставить("ЦенаВключаетНДС",       РеквизитыДокументаОснования.ЦенаВключаетНДС);
		
		ОткрытьФорму(
			"Документ.КорректировкаРеализации.Форма.ФормаВыбораРаспоряжения",
			Новый Структура("Отбор,Склад,ДокументОснование", ПараметрыОтбора, Объект.Склад, Объект.ДокументОснование),
			Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗаказКлиента = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОтраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВариантыОтраженияКорректировокРеализаций") Тогда
		
		ТекущаяСтрока.ВариантОтражения = ВыбранноеЗначение;
		
	Иначе
		
		ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка");
		
	КонецЕсли;
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатьяДоходовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяДоходов) Тогда
		ТоварыСтатьяДоходовПриИзмененииСервер();
	Иначе
		ТекущаяСтрока.АналитикаДоходов = Неопределено;
		ТекущаяСтрока.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасхождения

&НаКлиенте
Процедура РасхожденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	Если Поле = Элементы.РасхожденияЗаказКлиента Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаказКлиента) Тогда
			ПоказатьЗначение(Неопределено, ТекущаяСтрока.ЗаказКлиента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияПриАктивизацииЯчейки(Элемент)
	
	СтрокаТаблицы = Элементы.Расхождения.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент <> Неопределено
		И Элемент.ТекущийЭлемент = Элементы.РасхожденияВариантОтражения Тогда
		
		СписокВыбора = Элементы.РасхожденияВариантОтражения.СписокВыбора;
		СписокВыбора.Очистить();
		
		Если СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
			Если СтрокаТаблицы.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации"));
			ИначеЕсли СтрокаТаблицы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьВыручку"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки"));
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.КоличествоУпаковок < 0 Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
			Если СтрокаТаблицы.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации"));
			ИначеЕсли СтрокаТаблицы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьВыручку"));
			Иначе
				СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияВариантОтраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВариантыОтраженияКорректировокРеализаций") Тогда
		
		ТекущаяСтрока.ВариантОтражения = ВыбранноеЗначение;
		
	Иначе
		
		ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка");
		
	КонецЕсли;
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияСуммаВзаиморасчетовПриИзменении(Элемент)
	СформироватьНадписьВалюты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияСтатьяДоходовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяДоходов) Тогда
		РасхожденияСтатьяДоходовПриИзмененииСервер();
	Иначе
		ТекущаяСтрока.АналитикаДоходов = Неопределено;
		ТекущаяСтрока.АналитикаДоходовОбязательна = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоИсходнымДанным(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоИсходнымДаннымЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Объект.Товары, 
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыИзЗаказа(Команда)
	
	РеквизитыДокументаОснования = РеквизитыДокументаОснования(Объект.ДокументОснование);
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказКлиента) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,ЗаказКлиента", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказКлиента));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура(
		"ВалютаДокумента,
		|Документ,
		|ДокументОснование,
		|Склад,
		|МассивКодовСтрок,
		|Партнер,
		|Сделка,
		|Контрагент,
		|Договор,
		|Организация,
		|ХозяйственнаяОперация,
		|Соглашение,
		|ВалютаВзаиморасчетов,
		|НалогообложениеНДС,
		|ЦенаВключаетНДС,
		|Дата",
		Объект.Валюта,
		Объект.Ссылка,
		Объект.ДокументОснование,
		Объект.Склад,
		МассивКодовСтрок,
		Объект.Партнер,
		Объект.Сделка,
		Объект.Контрагент,
		Объект.Договор,
		Объект.Организация,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"),
		Объект.Соглашение,
		Объект.ВалютаВзаиморасчетов,
		РеквизитыДокументаОснования.НалогообложениеНДС,
		РеквизитыДокументаОснования.ЦенаВключаетНДС,
		Объект.Дата);
	
	ОткрытьФорму("Документ.КорректировкаРеализации.Форма.ФормаПодбораТоваровИзЗаказа",
		ПараметрыПодбора,
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = ?(Не ИспользуетсяКоличествоУпаковок,
		                                           "Количество",
		                                           "КоличествоУпаковок");
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		РасхожденияАктуальны = Ложь;
		
	КонецЕсли;
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, НСтр("ru='Товары'"), ВыделенныеСтроки) Тогда
		
		СтруктураОтбора = Новый Структура("ВыборГруппы,ЭтоГруппа", ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"), Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
        РасхожденияАктуальны = Ложь;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасхождения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьРасхожденияЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Объект.Расхождения, 
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантыОтраженияТовары(Команда)
	
	УстановитьВариантыОтражения("Товары");
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантыОтраженияРасхождения(Команда)
	
	УстановитьВариантыОтражения("Расхождения");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, 
		"Документ.КорректировкаРеализации.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'корректировку реализации'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
		ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	Иначе
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
		ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
		ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
		ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАктуПриемки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоАктуПриемкиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Объект.Товары, 
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора());
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	Иначе
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТранспортныхНакладных(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументОснование", Объект.Ссылка));
	ОткрытьФорму("Документ.ТранспортнаяНакладная.ФормаСписка",
				ПараметрыФормы,
				ЭтаФорма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры			

&НаКлиенте
Процедура СоздатьТранспортнуюНакладную(Команда)
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ПроверитьВозможностьСозданияТранспортнойНакладной();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКонтрольЗаполненияАналитикиРасходов(Форма, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("СтатьяРасходов", Форма.Объект.СтатьяРасходов);
	ДанныеОбъекта.Вставить("АналитикаРасходовОбязательна", Форма.АналитикаРасходовОбязательна);
	ДанныеОбъекта.Вставить("АналитикаРасходовЗаказРеализация", Форма.АналитикаРасходовЗаказРеализация);
	
#Если Клиент Тогда
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеОбъекта, СтруктураДействий, КэшированныеЗначения);
#Иначе
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеОбъекта, СтруктураДействий, КэшированныеЗначения);
#КонецЕсли
	
	Форма.АналитикаРасходовОбязательна = ДанныеОбъекта.АналитикаРасходовОбязательна;
	Форма.АналитикаРасходовЗаказРеализация = ДанныеОбъекта.АналитикаРасходовЗаказРеализация;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Товары"));
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("Расхождения"));
	
	ПолеАналитикаРасходовДополнительно = УсловноеОформление.Элементы[УсловноеОформление.Элементы.Количество()-1].Поля.Элементы.Добавить();
	ПолеАналитикаРасходовДополнительно.Использование = Истина;
	ПолеАналитикаРасходовДополнительно.Поле = Новый ПолеКомпоновкиДанных("АналитикаРасходовДополнительно");
	
	ПолеАналитикаРасходовДополнительно = УсловноеОформление.Элементы[УсловноеОформление.Элементы.Количество()-2].Поля.Элементы.Добавить();
	ПолеАналитикаРасходовДополнительно.Использование = Истина;
	ПолеАналитикаРасходовДополнительно.Поле = Новый ПолеКомпоновкиДанных("АналитикаРасходовДополнительно");

	ПолеАналитикаДоходовДополнительно = УсловноеОформление.Элементы[УсловноеОформление.Элементы.Количество()-1].Поля.Элементы.Добавить();
	ПолеАналитикаДоходовДополнительно.Использование = Истина;
	ПолеАналитикаДоходовДополнительно.Поле = Новый ПолеКомпоновкиДанных("АналитикаДоходовДополнительно");
	
	ПолеАналитикаДоходовДополнительно = УсловноеОформление.Элементы[УсловноеОформление.Элементы.Количество()-2].Поля.Элементы.Добавить();
	ПолеАналитикаДоходовДополнительно.Использование = Истина;
	ПолеАналитикаДоходовДополнительно.Поле = Новый ПолеКомпоновкиДанных("АналитикаДоходовДополнительно");

	//
	
	УчетНДСУТ.УстановитьУсловноеОформлениеКодаТНВЭД(ЭтаФорма);
	УчетНДСУТ.УстановитьУсловноеОформлениеКодаТНВЭД(ЭтаФорма, "Расхождения");
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидКорректировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма,
														"РасхожденияСтавкаНДС",
														"РасхожденияСуммаНДС",
														"РасхожденияСуммаСНДС");
	
	//
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);
	
	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "РасхожденияСуммаСНДС");
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "РасхожденияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Расхождения.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "РасхожденияХарактеристика",
																		     "Объект.Расхождения.ХарактеристикиИспользуются");

	//
	
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);
	
	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма, "РасхожденияСклад");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расхождения.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияЗаказКлиента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПродажаПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияЗаказКлиента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПродажаПоЗаказам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаказКлиента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьЗаказыВТабличнойЧасти");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияВариантОтражения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расхождения.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расхождения.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВариантОтражения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расхождения.КодСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Расхождения.ЗаказКлиента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сверх заказа>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВернутьМногооборотнуюТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Сумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Сумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВернутьМногооборотнуюТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВернутьМногооборотнуюТару");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасхожденияСуммаВзаиморасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Валюта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВалютаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Если КорректировкаУслугПрочихАктивов Тогда
		КорректировкаПрошлогоПериодаДоИзменения = КорректировкаПрошлогоПериода;
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Дата");
		ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		КорректировкаПрошлогоПериода = НачалоГода(ДатаДокумента) > НачалоГода(ДатаОснования);
		Если КорректировкаПрошлогоПериодаДоИзменения <> КорректировкаПрошлогоПериода Тогда
			РасхожденияАктуальны = Ложь;
			УстановитьВидимостьЭлементовПоОснованию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОперацияПриИзмененииНаСервере()
	
	ОбновитьНадписиПоОперации();
	УстановитьВидимостьПоОперации();
	
	ОбновитьТекстСчетаФактуры();
	
	НеТребуетсяВводСчетаФактуры = (Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	РасхожденияАктуальны = Ложь;
	
	Если Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
		ИЛИ Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаСервере
Процедура ЗаполнитьПоИсходнымДаннымСервер()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Документ основание"" не заполнено'"),
			,
			"ПредставлениеДокументаОснования");
		Возврат;
	КонецЕсли;
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(
		Объект.ДокументОснование,
		Объект.Товары);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
	КонецЦикла;
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, ВернутьМногооборотнуюТару);
	
	РасхожденияАктуальны = (Объект.Расхождения.Количество() = 0);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоАктуПриемкиСервер()
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоАктуПриемки(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
	КонецЦикла;
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, ВернутьМногооборотнуюТару);
	
	РасхожденияАктуальны = Истина;
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	
	Если НЕ ИспользуетсяКоличествоУпаковок Тогда
		ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	Если НЕ ИспользуетсяКоличествоУпаковок Тогда
		ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()));
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасхожденияСервер()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Документ основание"" не заполнено'"),
			,
			"ПредставлениеДокументаОснования");
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(Объект);
	Документы.КорректировкаРеализации.ЗаполнитьРасхождения(Объект);
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Товары";
	
	ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения(ПолучитьДанныеПоСкладам());
	РасхожденияАктуальны = Истина;
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора()
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	// Склад будет вставлен позже
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий", ПараметрыУказанияСерий));
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий", ПараметрыУказанияСерий));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", Неопределено);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Неопределено);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора());
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиРеализации(Форма)
	
	Если Форма.ТребуетсяЗалогЗаТару Тогда
		Форма.СуммаВсего = Форма.Объект.Товары.Итог("СуммаСНДС");
		Форма.СуммаНДС = Форма.Объект.Товары.Итог("СуммаНДС");
	Иначе
		Форма.СуммаВсего = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
		Форма.СуммаНДС = Форма.Объект.Товары.Итог("СуммаНДСБезВозвратнойТары");
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьНесколькоСкладов     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Дата");
		ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		КорректировкаПрошлогоПериода = НачалоГода(ДатаДокумента) > НачалоГода(ДатаОснования);
		КорректировкаУслугПрочихАктивов = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов");
	Иначе
		КорректировкаПрошлогоПериода = Ложь;
		КорректировкаУслугПрочихАктивов = Ложь;
	КонецЕсли;
		
	ЗаполнитьХозяйственнуюОперациюДокументаОснования();
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
	УстановитьПредставлениеДокументаОснования();
	
	УстановитьВидимостьЭлементовПоОснованию();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьВидимостьПоЗаказам();
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	
	Элементы.ГруппаКартинкаИНадписьНесколькоСкладов.Видимость = СкладГруппа;
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.КорректировкаРеализации);
	Элементы.ТоварыСерия.Видимость                = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.РасхожденияСерия.Видимость           = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
	Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	Элементы.АналитикаРасходовДополнительно.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	Элементы.АналитикаДоходов.Доступность  = ЗначениеЗаполнено(Объект.СтатьяДоходов);
	Элементы.АналитикаДоходовДополнительно.Доступность  = ЗначениеЗаполнено(Объект.СтатьяДоходов);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	ОбновитьТекстСчетаФактуры();
	
	ИспользоватьЗаказыВТабличнойЧасти = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	
	ОбновитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОснованиеИзменено = Ложь;
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) И ЗначениеЗаполнено(Объект.Основание) Тогда
		Если ЗначениеЗаполнено(Объект.Основание) Тогда
			СтруктураОснования = Документы.КорректировкаРеализации.СтруктураОснованияДляПечати(Объект);
			ОснованиеИзменено = (СокрЛП(Объект.Основание) <> СтруктураОснования.Основание) 
				ИЛИ (СокрЛП(Объект.ОснованиеНомер) <> СтруктураОснования.ОснованиеНомер)
				ИЛИ (Объект.ОснованиеДата <> СтруктураОснования.ОснованиеДата);
		КонецЕсли;
	КонецЕсли;
	ТаблицаОснованийДляПечати.Загрузить(Документы.КорректировкаРеализации.ТаблицаОснованийДляПечати(Объект));
	
	РасхожденияАктуальны = Истина;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(Элементы.ФормаОплаты);
	
	ВернутьМногооборотнуюТару = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ВернутьМногооборотнуюТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,"ВернутьМногооборотнуюТару");
		ТребуетсяЗалогЗаТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование,"ТребуетсяЗалогЗаТару");
	КонецЕсли;
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, ВернутьМногооборотнуюТару);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТиповНоменклатуры));
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЕсли;
	
	Элементы.РеквизитыПечатиТОРГ12.Видимость = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов");
	
	НеТребуетсяВводСчетаФактуры = (Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры);
	
	ОбновитьНадписиПоОперации();
	УстановитьВидимостьПоОперации();
	
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Товары);
	ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(Объект.Расхождения);
	
	АналитикаДоходовОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяДоходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяДоходов, "КонтролироватьЗаполнениеАналитики");
		
	ПолучитьОбновитьИнформациюТранспортныхНакладных();
	
	Элементы.ВариантОформленияПродажи.Видимость = ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПредставлениеДокументаОснования = Строка(Объект.ДокументОснование) + " (" + Операция + ")";
		Иначе
			ПредставлениеДокументаОснования = Объект.ДокументОснование;
		КонецЕсли;
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Реализация товаров и услуг <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Акт выполненных работ <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Реализация услуг и прочих активов <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АктОРасхожденияхПослеОтгрузкиОснование) Тогда
		ПредставлениеДокументаОснованияАктаПриемки = Объект.АктОРасхожденияхПослеОтгрузкиОснование;
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		Элементы.ТоварыЗаполнитьПоАктуПриемки.Видимость = Ложь;
		Элементы.ГруппаОснованияАктаОРасхождениях.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОснованию()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.КорректировкаРеализации.ЗаполнитьИменаРеквизитовПоОснованию(
		Объект.ДокументОснование, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ИспользуетсяКоличествоУпаковок = Элементы.ТоварыКоличествоУпаковок.Видимость;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКоличество", "Видимость", НЕ ИспользуетсяКоличествоУпаковок);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНоменклатураЕдиницаИзмерения", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОткрытьПодбор", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьЦеныПоСоглашению", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасхожденияКоличество", "Видимость", НЕ ИспользуетсяКоличествоУпаковок);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасхожденияНоменклатураЕдиницаИзмерения", "Видимость", Элементы.РасхожденияНоменклатура.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ТоварыСтатьяДоходов");
	МассивИменЭлементов.Добавить("ТоварыАналитикаДоходов");
	МассивИменЭлементов.Добавить("РасхожденияСтатьяДоходов");
	МассивИменЭлементов.Добавить("РасхожденияАналитикаДоходов");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", КорректировкаУслугПрочихАктивов И Не КорректировкаПрошлогоПериода);
	
	Если КорректировкаУслугПрочихАктивов Тогда
		
		Если КорректировкаПрошлогоПериода Тогда
			
			МассивИменЭлементов = Новый Массив;
			МассивИменЭлементов.Добавить("ТекстНаПрочиеРасходы");
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Истина);
			
		Иначе
			
			МассивИменЭлементов = Новый Массив;
			МассивИменЭлементов.Добавить("ТекстНаПрочиеРасходы");
			МассивИменЭлементов.Добавить("ПодразделениеДоходы");
			МассивИменЭлементов.Добавить("СтатьяДоходов");
			МассивИменЭлементов.Добавить("АналитикаДоходов");
			МассивИменЭлементов.Добавить("ПодразделениеРасходы");
			МассивИменЭлементов.Добавить("СтатьяРасходов");
			МассивИменЭлементов.Добавить("АналитикаРасходов");
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Ложь);
			
		КонецЕсли;
		
		МассивИменЭлементов = Новый Массив;
		МассивИменЭлементов.Добавить("ТоварыСоставНабора");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивИменЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивИменЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Элементы.ТоварыСклад.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеРасходы");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость",
		Элементы.СтатьяРасходов.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеРасходыДополнительно");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеРасходыДополнительно");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеРасходыДополнительно");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость",
		Элементы.СтатьяРасходовДополнительно.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеДоходыДополнительно");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеДоходыДополнительно");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеДоходыДополнительно");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость",
		Элементы.СтатьяДоходовДополнительно.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеДоходыДополнительно");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеДоходыДополнительно");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеДоходыДополнительно");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость",
		Элементы.СтатьяДоходовДополнительно.Видимость);
	
	Элементы.ЦенаВключаетНДС.ОтображениеПредупрежденияПриРедактировании = ?(Элементы.ТоварыВидЦены.Видимость,
		ОтображениеПредупрежденияПриРедактировании.Отображать,
		ОтображениеПредупрежденияПриРедактировании.НеОтображать);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("ДатаПлатежа");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением,ПередНачаломИзменения;ТоварыСтатьяДоходов,ТоварыАналитикаДоходов");
	МассивЭлементов.Добавить("Расхождения;;РасхожденияСтатьяДоходов,РасхожденияАналитикаДоходов");
	МассивЭлементов.Добавить("ТоварыЗаполнить");
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыИзЗаказа");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("ТоварыУстановитьВариантыОтражения");
	МассивЭлементов.Добавить("РасхожденияЗаполнитьРасхождения");
	МассивЭлементов.Добавить("РасхожденияУстановитьВариантыОтражения");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоЗаказам()
	
	Если Объект.ПродажаПоЗаказам Тогда
		Элементы.ТоварыДобавить.Заголовок = НСтр("ru='Добавить товары сверх заказа'");
	Иначе
		Элементы.ТоварыДобавить.Заголовок = НСтр("ru='Добавить'");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПодобратьТоварыИзЗаказа", "Видимость", Объект.ПродажаПоЗаказам);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеЭлементовПоИтогамРасхождений(Форма)
	
	Форма.СуммаНаПрочиеДоходы  = 0;
	Форма.СуммаНаПрочиеРасходы = 0;
	Форма.ИтогСуммаСНДСУвеличение = 0;
	Форма.ИтогСуммаСНДСУменьшение = 0;
	Форма.ИтогСуммаНДСУвеличение = 0;
	Форма.ИтогСуммаНДСУменьшение = 0;
	
	ТребуетсяДатаПлатежа	   = Ложь;
	
	Если Форма.Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара")
		ИЛИ Форма.Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
		ТабличнаяЧасть = Форма.Объект.Товары;
	Иначе
		ТабличнаяЧасть = Форма.Объект.Расхождения;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		Форма.ИтогСуммаСНДСУвеличение = Форма.ИтогСуммаСНДСУвеличение + ?(СтрокаТЧ.СуммаСНДС > 0, СтрокаТЧ.СуммаСНДС, 0);
		Форма.ИтогСуммаСНДСУменьшение = Форма.ИтогСуммаСНДСУменьшение + ?(СтрокаТЧ.СуммаСНДС < 0, -СтрокаТЧ.СуммаСНДС, 0);
		
		Форма.ИтогСуммаНДСУвеличение = Форма.ИтогСуммаНДСУвеличение + ?(СтрокаТЧ.СуммаНДС > 0, СтрокаТЧ.СуммаНДС, 0);
		Форма.ИтогСуммаНДСУменьшение = Форма.ИтогСуммаНДСУменьшение + ?(СтрокаТЧ.СуммаНДС < 0, -СтрокаТЧ.СуммаНДС, 0);
		
		Если СтрокаТЧ.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах") Тогда
			Если Форма.КорректировкаУслугПрочихАктивов И Не Форма.КорректировкаПрошлогоПериода  Тогда
				Форма.СуммаНаПрочиеДоходы = Форма.СуммаНаПрочиеДоходы + СтрокаТЧ.СуммаСНДС;
			Иначе
				Форма.СуммаНаПрочиеДоходы = Форма.СуммаНаПрочиеДоходы + ?(СтрокаТЧ.СуммаСНДС<0, -СтрокаТЧ.СуммаСНДС, СтрокаТЧ.СуммаСНДС);
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы") Тогда
			Форма.СуммаНаПрочиеРасходы = Форма.СуммаНаПрочиеРасходы + ?(СтрокаТЧ.СуммаСНДС<0, -СтрокаТЧ.СуммаСНДС, СтрокаТЧ.СуммаСНДС);
		КонецЕсли;
		
		Если СтрокаТЧ.КодСтроки = 0 ИЛИ СтрокаТЧ.СуммаСНДС >= 0 Тогда
			ТребуетсяДатаПлатежа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ТекстНаПрочиеРасходы = СтрШаблон(НСтр("ru = 'Прочие расходы: %1 %2'"), 
		Формат(Форма.СуммаНаПрочиеРасходы, "ЧДЦ=2; ЧН="), 
		Форма.Объект.Валюта);
		
	Форма.ТекстНаПрочиеДоходы = СтрШаблон(НСтр("ru = 'Прочие доходы:  %1 %2'"), 
		Формат(Форма.СуммаНаПрочиеДоходы, "ЧДЦ=2; ЧН="), 
		Форма.Объект.Валюта);
		
	ДоступностьРасходы = ЗначениеЗаполнено(Форма.СуммаНаПрочиеРасходы);
	Форма.Элементы.ПодразделениеРасходы.Доступность					= ДоступностьРасходы;
	Форма.Элементы.ПодразделениеРасходыДополнительно.Доступность	= ДоступностьРасходы;
	Форма.Элементы.СтатьяРасходов.Доступность						= ДоступностьРасходы;
	Форма.Элементы.СтатьяРасходовДополнительно.Доступность			= ДоступностьРасходы;
	Форма.Элементы.АналитикаРасходов.Доступность					= ДоступностьРасходы;
	Форма.Элементы.АналитикаРасходовДополнительно.Доступность		= ДоступностьРасходы;

	ДоступностьДоходы = ЗначениеЗаполнено(Форма.СуммаНаПрочиеДоходы);
	Форма.Элементы.ПодразделениеДоходы.Доступность				= ДоступностьДоходы;
	Форма.Элементы.ПодразделениеДоходыДополнительно.Доступность	= ДоступностьДоходы;
	Форма.Элементы.СтатьяДоходов.Доступность					= ДоступностьДоходы;
	Форма.Элементы.СтатьяДоходовДополнительно.Доступность		= ДоступностьДоходы;
	Форма.Элементы.АналитикаДоходов.Доступность					= ДоступностьДоходы;
	Форма.Элементы.АналитикаДоходовДополнительно.Доступность	= ДоступностьДоходы;
	
	Если ТребуетсяДатаПлатежа Тогда
		Форма.Элементы.ДатаПлатежа.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ДатаПлатежа.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ДатаПлатежа.ОтметкаНезаполненного	 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСчетаФактурыПолученный(НеТребуетсяВводСчетаФактуры=Неопределено)
	
	Если НеТребуетсяВводСчетаФактуры = Неопределено тогда
		НеТребуетсяВводСчетаФактуры = (Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	КонецЕсли;
	
	ЭтаФорма.ТекстСчетФактураПолученный = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
		Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеРеквизитыТабличныхЧастей()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения(ДанныеСкладов);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер()

	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа, Ложь);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения(ДанныеСкладов)
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Расхождения,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Расхождения");
	
	Для Каждого СтрокаРасхождений Из Объект.Расхождения Цикл
		
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаРасхождений.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДокументаОснованияСервер(ВыбранноеЗначение)
	
	Модифицированность = Истина;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Объект.ДокументОснование = ВыбранноеЗначение;
	
	ПриЧтенииСозданииНаСервере();
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресТоваровВХранилище)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваров = Новый Структура("КодСтроки, ЗаказКлиента");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		// Обработка ТЧ товары.
		СтруктураПоискаТоваров.КодСтроки = СтрокаТоваров.КодСтроки;
		СтруктураПоискаТоваров.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
		МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваров);
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				Объект.Товары.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.ИндексНабора = ?(ЗначениеЗаполнено(СтрокаТЧТовары.НоменклатураНабора),1,0);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, ВернутьМногооборотнуюТару);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РасхожденияАктуальны = Ложь;
	
	ЗаполнитьОснованиеДляПечати();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДокументаОснования(ДокументОснование)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "НалогообложениеНДС, ЦенаВключаетНДС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеКорректировок(Ссылка, Основание, ЕстьКорректировки) Экспорт
	
	ПродажиСервер.ПроверитьНаличиеКорректировок(Ссылка, Основание, ЕстьКорректировки)
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, Серия");
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора),1,0);
		
		ЗаполнитьЗаказКлиента(ЭтаФорма, ТекущаяСтрока);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
	КонецЦикла;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РасхожденияАктуальны = Ложь;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                        Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                      Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",                  Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",                 Объект.ОснованиеНомер);
	СтруктураПараметров.Вставить("Отпустил",                       Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 Ложь);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "КорректировкаРеализации");
	СтруктураПараметров.Вставить("ПродажаПоЗаказам",               Объект.ПродажаПоЗаказам);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ТаблицаОснованийДляПечати",      ТаблицаОснованийДляПечати);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоСкладам()
	
	СкладыРасхождений = Объект.Расхождения.Выгрузить(,"Склад");
	СкладыРасхождений.Свернуть("Склад");
	СкладыРасхождений.Колонки.Добавить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",
		Новый ОписаниеТипов("Булево"));
	
	Для Каждого Стр Из СкладыРасхождений Цикл
		Если ЗначениеЗаполнено(Стр.Склад) Тогда
			Стр.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(Стр.Склад, Объект.Дата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СкладыРасхождений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС");
	
КонецФункции

&НаСервере
Процедура ОбновитьНадписиПоОперации()
	
	Если Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
		Текст = Нстр("ru='(перепоставка)'");
	ИначеЕсли Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		Текст = Нстр("ru='(недопоставка)'");
	Иначе
		Текст = Нстр("ru='(после корректировки)'");
	КонецЕсли;
	
	Элементы.ГруппаТовары.Заголовок = Нстр("ru='Товары'") + " " + Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОперации()
	
	ВидимостьЭлементов = Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
		ИЛИ Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара;
	
	Элементы.ТоварыВариантОтражения.Видимость = ВидимостьЭлементов;
	Элементы.ТоварыУстановитьВариантыОтражения.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаПрочиеДоходыРасходыДополнительно.Видимость = ВидимостьЭлементов;
	
	ВидимостьЭлементов = Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
		И Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара;
	
	Элементы.Расхождения.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаПрочиеДоходыРасходы.Видимость = ВидимостьЭлементов;
	
	Если Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		Элементы.ГруппаСчетФактура.ТекущаяСтраница = Элементы.ГруппаСчетФактураПолученный;
	Иначе
		Элементы.ГруппаСчетФактура.ТекущаяСтраница = Элементы.ГруппаСчетФактураВыданный;
	КонецЕсли;
	
	ЕстьРасхождения = (Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара
		И Объект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара);
		
	Элементы.ИтогСуммаСНДСУвеличение.Видимость = ЕстьРасхождения;
	Элементы.ИтогСуммаСНДСУменьшение.Видимость = ЕстьРасхождения;
	Элементы.ИтогСуммаВсегоУвеличениеБезНДС.Видимость = ЕстьРасхождения;
	Элементы.ИтогСуммаВсегоУменьшениеБезНДС.Видимость = ЕстьРасхождения;
	Элементы.ИтогСуммаНДСУвеличение.Видимость = ЕстьРасхождения;
	Элементы.ИтогСуммаНДСУменьшение.Видимость = ЕстьРасхождения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантыОтражения(ИмяТЧ)
	
	ЕстьУвеличениеКоличестваПоОрдерномуСкладу = Ложь;
	ЕстьУвеличениеКоличестваБезИнвентаризации = Ложь;
	ЕстьУменьшениеКоличестваПоОрдерномуСкладу = Ложь;
	ЕстьУменьшениеКоличестваБезИнвентаризации = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			И (СтрокаТЧ.КоличествоУпаковок > 0 И Объект.ВидКорректировки <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
			И СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ЕстьУвеличениеКоличестваПоОрдерномуСкладу = Истина;
			
		ИначеЕсли (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			И (СтрокаТЧ.КоличествоУпаковок > 0 И Объект.ВидКорректировки <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
			И НЕ СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ЕстьУвеличениеКоличестваБезИнвентаризации = Истина;
			
		ИначеЕсли (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			И (СтрокаТЧ.КоличествоУпаковок < 0 Или Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
			И СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ЕстьУменьшениеКоличестваПоОрдерномуСкладу = Истина;
			
		ИначеЕсли (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			И (СтрокаТЧ.КоличествоУпаковок < 0 Или Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
			И НЕ СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ЕстьУменьшениеКоличестваБезИнвентаризации = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ (
		ЕстьУвеличениеКоличестваПоОрдерномуСкладу
		ИЛИ ЕстьУвеличениеКоличестваБезИнвентаризации
		ИЛИ ЕстьУменьшениеКоличестваПоОрдерномуСкладу
		ИЛИ ЕстьУменьшениеКоличестваБезИнвентаризации) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нет строк, в которых доступно изменение варианта отражения.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтработанныеПроцедуры", Новый Массив);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДополнительныеПараметры.Вставить("ПроцедурыКВыполнению", Новый Массив);
	
	Если ЕстьУвеличениеКоличестваПоОрдерномуСкладу Тогда
		ДополнительныеПараметры.ПроцедурыКВыполнению.Добавить(
			Новый ОписаниеОповещения("УстановитьВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	Если ЕстьУвеличениеКоличестваБезИнвентаризации Тогда
		ДополнительныеПараметры.ПроцедурыКВыполнению.Добавить(
			Новый ОписаниеОповещения("УстановитьВариантОтраженияУвеличениеКоличестваБезИнвентаризации", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	Если ЕстьУменьшениеКоличестваПоОрдерномуСкладу Тогда
		ДополнительныеПараметры.ПроцедурыКВыполнению.Добавить(
			Новый ОписаниеОповещения("УстановитьВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	Если ЕстьУменьшениеКоличестваБезИнвентаризации Тогда
		ДополнительныеПараметры.ПроцедурыКВыполнению.Добавить(
			Новый ОписаниеОповещения("УстановитьВариантОтраженияУменьшениеКоличестваБезИнвентаризации", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОписаниеОповещения",
		Новый ОписаниеОповещения("ОбработатьВариантыОтраженияРекурсивно", ЭтотОбъект, ДополнительныеПараметры));
	
	ОбработатьВариантыОтраженияРекурсивно(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОснованиеДляПечати()
	
	Если Не ОснованиеИзменено Тогда
		СтруктураОснования = Документы.КорректировкаРеализации.СтруктураОснованияДляПечати(Объект);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОснования);
	КонецЕсли;
	ТаблицаОснованийДляПечати.Загрузить(Документы.КорректировкаРеализации.ТаблицаОснованийДляПечати(Объект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаказКлиента(ЭтаФорма, ТекущаяСтрока)
	
	Объект = ЭтаФорма.Объект;
	
	Если Не Объект.ПродажаПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	
	Если ЭтаФорма.ИспользоватьЗаказыВТабличнойЧасти И Объект.Товары.Количество() > 0 Тогда
	
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.ЗаказКлиента) Тогда
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(Заказ) И СтрокаТовары.ЗаказКлиента <> Заказ Тогда
				// продажа по нескольким заказам
				Заказ = Неопределено;
				Прервать;
			Иначе
				Заказ = СтрокаТовары.ЗаказКлиента;
			КонецЕсли;
		КонецЦикла
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Заказ = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ЗаказКлиента");
	КонецЕсли;
	
	ТекущаяСтрока.ЗаказКлиента = Заказ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокРеквизитовПечати()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
		Элементы.РеквизитыПечатиТОРГ12.Заголовок = 
			НСтр("ru = 'Реквизиты печати ТОРГ12 / Акта на передачу прав'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактуры()
	
	НеТребуетсяВводСчетаФактуры = (Объект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	
	ТекстСчетФактура = ПродажиСервер.ПредставлениеСчетаФактурыВДокументеПродажи(
		Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеВзаиморасчеты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		Объект.Курс					= РезультатЗакрытия.Курс;
		Объект.Кратность			= РезультатЗакрытия.Кратность;
		Объект.СуммаВзаиморасчетов	= РезультатЗакрытия.СуммаВзаиморасчетов;
		
		ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерераспредитьСуммуВзаиморасчетовИСформироватьНадпись()
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Объект.Курс, Объект.Кратность);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект.Расхождения,
			0,
			"СуммаВзаиморасчетов");
	
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(Объект, "Расхождения", СтруктураКурса);
	
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьВалюты(Форма)
	
	ПараметрыНадписиВалюты = ВзаиморасчетыКлиентСервер.ПараметрыНадписиВалюты();
	
	ПараметрыНадписиВалюты.ВалютаДокумента      = Форма.Объект.Валюта;
	ПараметрыНадписиВалюты.ВалютаВзаиморасчетов = Форма.Объект.ВалютаВзаиморасчетов;
	ПараметрыНадписиВалюты.ВалютаРеглУчета      = Форма.ВалютаРегламентированногоУчета;
	ПараметрыНадписиВалюты.СуммаДокумента       = Форма.Объект.Расхождения.Итог("СуммаСНДС");
	ПараметрыНадписиВалюты.СуммаВзаиморасчетов  = Форма.Объект.Расхождения.Итог("СуммаВзаиморасчетов");
	ПараметрыНадписиВалюты.Курс                 = Форма.Объект.Курс;
	ПараметрыНадписиВалюты.Кратность            = Форма.Объект.Кратность;
	
	Форма.НадписьВалюты = ВзаиморасчетыКлиентСервер.СформироватьНадписьВалюты(ПараметрыНадписиВалюты);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений


&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличество" Тогда
		ТоварыКоличествоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "РасхожденияСуммаВзаиморасчетов" Тогда
		РасхожденияСуммаВзаиморасчетовПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ЗаполнитьПоИсходнымДанным" Тогда
		ЗаполнитьПоИсходнымДанным(Команда);
	ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ПодобратьТоварыИзЗаказа" Тогда
		ПодобратьТоварыИзЗаказа(Команда);
	ИначеЕсли Команда.Имя = "РазбитьСтроку" Тогда
		РазбитьСтроку(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьСкладВВыделенныхСтроках" Тогда
		ЗаполнитьСкладВВыделенныхСтроках(Команда);
	ИначеЕсли Команда.Имя = "УстановитьВариантыОтраженияТовары" Тогда
		УстановитьВариантыОтраженияТовары(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьРасхождения" Тогда
		ЗаполнитьРасхождения(Команда);
	ИначеЕсли Команда.Имя = "УстановитьВариантыОтраженияРасхождения" Тогда
		УстановитьВариантыОтраженияРасхождения(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()
	
	Перем ЕстьКорректировки;
	
	РеквизитМожноИзменить = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
			"РезультатВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПроверитьНаличиеКорректировок(Объект.Ссылка, Объект.ДокументОснование, ЕстьКорректировки);
	
	Если ЕстьКорректировки Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ВвестиКорректировку", Нстр("ru='Ввести корректировку'"));
		СписокКнопок.Добавить("ОтменитьИзменения", Нстр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru='На основании документа введена корректировка реализации.
				|Изменение исходного документа запрещено.'"),
			СписокКнопок,
			,
			"ВвестиКорректировку");
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Оповещение, "ИзменитьРеквизит");
		РеквизитМожноИзменить = Истина;
		
	КонецЕсли;
	
	Возврат РеквизитМожноИзменить;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		ОбщегоНазначенияУТКлиент.ВернутьПредыдущееЗначениеРеквизита(ЭтаФорма, Элемент);
		Возврат;
	Иначе
		ОбщегоНазначенияУТКлиент.СохранитьЗначениеРеквизита(ЭтаФорма, Элемент);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[Элемент.Имя], Элемент.ТекущиеДанные);
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
		
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
		Если ИспользуетсяКоличествоУпаковок Тогда
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		Иначе
			ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма, "Товары");
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаТЧ.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
		КонецЕсли;
	КонецЦикла;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	РасхожденияАктуальны = Ложь;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "")
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ТранспортнаяНакладная

&НаСервере
Функция ОбработкаВыбораТранспортнойНакладной(ВыбраннаяТранспортнаяНакладная)
	
	Если ЗначениеЗаполнено(ВыбраннаяТранспортнаяНакладная) Тогда
		
		ТранспортнаяНакладнаяОбъект = ВыбраннаяТранспортнаяНакладная.ПолучитьОбъект();
		НоваяСтрока = ТранспортнаяНакладнаяОбъект.ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Объект.Ссылка;
		Попытка
			ТранспортнаяНакладнаяОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 		
		
	КонецЕсли;
	
	ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
	
	Возврат ДанныеТранспортныхНакладных;
	
КонецФункции

&НаСервере
Процедура ПолучитьОбновитьИнформациюТранспортныхНакладных()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТТН") И ПравоДоступа("Чтение", Метаданные.Документы.ТранспортнаяНакладная) Тогда 
		ДанныеТранспортныхНакладных = ПолучитьИнформациюТранспортныхНакладных();
		ОбновитьИнформациюТранспортныхНакладных(ДанныеТранспортныхНакладных, ЭтаФорма);
	Иначе
		Элементы.ГруппаТранспортныеНакладные.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформациюТранспортныхНакладных(Параметры, Форма)
	
	КоличествоТранспортныхНакладных = Параметры.КоличествоТранспортныхНакладных;
		
	Если КоличествоТранспортныхНакладных = 0 Тогда
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНетТранспортныхНакладных;
	ИначеЕсли КоличествоТранспортныхНакладных = 1 Тогда
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаОднаТранспортнаяНакладная;
		Форма.ТранспортнаяНакладная = Параметры.ТранспортнаяНакладная;
		Форма.ТранспортнаяНакладнаяТекст = НСтр("ru='ТТН'") + " " + Параметры.СокращенноеНаименованиеТранспортнойНакладной;
	Иначе
		Форма.Элементы.ГруппаТранспортныеНакладныеСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНесколькоТранспортныхНакладных;
		ЗаголовокКоманды = НСтр("ru = 'ТТН (%КоличествоТранспортныхНакладных%)'");
		ЗаголовокКоманды = СтрЗаменить(ЗаголовокКоманды, "%КоличествоТранспортныхНакладных%", КоличествоТранспортныхНакладных);
		Форма.Элементы.ОткрытьСписокТН.Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюТранспортныхНакладных()
	
	Возврат Документы.ТранспортнаяНакладная.ПолучитьИнформациюТранспортныхНакладных(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыТранспортныхНакладныхНаСервере()
	Документы.ТранспортнаяНакладная.ОбновитьРеквизитыТранспортныхНакладных(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладной()
	
	МожноСоздатьТТН = Истина;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		СообщениеПользователю = НСтр("ru = 'Невозможно оформить транспортную накладную, т.к. в качестве документа-основания выступает документ ""%ДокументОснование%"".'");
		СообщениеПользователю = СтрЗаменить(СообщениеПользователю, "%ДокументОснование%", Объект.ДокументОснование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,, "ПредставлениеДокументаОснования");
		
		МожноСоздатьТТН = Ложь;
		
	КонецЕсли;
	
	
	Если МожноСоздатьТТН И
		(НЕ ЗначениеЗаполнено(Объект.Ссылка)
			ИЛИ НЕ Объект.Проведен
			ИЛИ Модифицированность) Тогда 
		
		ТекстВопроса = НСтр("ru = 'Ввод транспортных накладных возможен только после проведения документа.'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета", ЭтотОбъект), ТекстВопроса, СписокКнопок);
		Возврат;
	КонецЕсли;
		
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(МожноСоздатьТТН);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(МожноСоздатьТТН)
	
	Если Не МожноСоздатьТТН Тогда
		Возврат; // Проверки не были пройдены, продолжать создание ТТН не нужно
	КонецЕсли;
	
	Если ПроверитьНаличиеТранспортныхНакладных() Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Оформить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru = 'Дополнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТранспортнуюНакладнуюЗавершение", ЭтотОбъект), НСтр("ru = 'Оформить новую ТТН или дополнить существующую?'"), СписокКнопок);
	Иначе
		ОформитьТранспортнуюНакладную();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт 
	
	Результат = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ПроверитьЗаполнение() Тогда
		Попытка
			Результат = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	ПроверитьВозможностьСозданияТранспортнойНакладнойЗавершение(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТранспортнуюНакладнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОформитьТранспортнуюНакладную();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ВыбратьТранспортнуюНакладную();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОформитьТранспортнуюНакладную()
	
	СозданныеТТН = ОформитьТранспортныеНакладныеНаСервере();
	
	Если СозданныеТТН.Количество() = 1 Тогда 
		ПоказатьЗначение(, СозданныеТТН[0]);
	ИначеЕсли СозданныеТТН.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТранспортныеНакладные", СозданныеТТН);
		ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.СозданныеТранспортныеНакладные", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТранспортнуюНакладную()
	
	АдресХранилища = ПолучитьАдресХранилищаСПараметрамиОтбораТТН();
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ДокументОснование", Объект.Ссылка);
	ПараметрыОтбора.Вставить("ДатаНачала", Объект.Дата - 14 * 24 * 60 * 60);
	ПараметрыОтбора.Вставить("АдресХранилища", АдресХранилища);
		
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаВыбора", 
				ПараметрыФормы, 
				ЭтаФорма,,,,,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресХранилищаСПараметрамиОтбораТТН()
	
	ТаблицаПараметровОтбора = Документы.ТранспортнаяНакладная.ПолучитьПараметрыОтбораТТН(Объект.Ссылка);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПараметровОтбора);
	
КонецФункции	

&НаСервере
Функция ПроверитьНаличиеТранспортныхНакладных()

	Отбор = Новый Структура("ДокументОснование, Дата",Объект.Ссылка,Объект.Дата);
	
	Возврат Документы.ТранспортнаяНакладная.ПроверитьНаличиеОформленныхТранспортныхНакладных(Отбор);

КонецФункции

&НаСервере
Функция ОформитьТранспортныеНакладныеНаСервере()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	СозданныеТТН = Документы.ТранспортнаяНакладная.СоздатьТранспортныеНакладные(МассивОбъектов);
	
	Если СозданныеТТН.Количество() <> 0 Тогда 
		ПолучитьОбновитьИнформациюТранспортныхНакладных();
	КонецЕсли;
	
	Возврат СозданныеТТН;
	
КонецФункции
	
#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПередЗаписьюВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
			Новый ОписаниеОповещения("ПередЗаписьюПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ЭтаФорма,
			Неопределено,
			Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПроверитьВозможностьЗаполненияТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ЗаполнитьРасхожденияСервер();
		НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасхождения;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		РасхожденияАктуальны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВариантыОтраженияРекурсивно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПроцедурыКВыполнению.Количество() > 0 Тогда
		
		ОписаниеОповещения = ДополнительныеПараметры.ПроцедурыКВыполнению[ДополнительныеПараметры.ПроцедурыКВыполнению.Количество() - 1];
		ДополнительныеПараметры.ПроцедурыКВыполнению.Удалить(ДополнительныеПараметры.ПроцедурыКВыполнению.Найти(ОписаниеОповещения));
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, );
		
	Иначе
		НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу(Результат, ДополнительныеПараметры) Экспорт
	
	СписокВариантовОтражения = Новый СписокЗначений;
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации"));
	
	СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
	
	ОткрытьФорму(
		"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		Новый ОписаниеОповещения("УстановитьВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладуЗавершение(ВариантОтражения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВариантОтражения)
		И Объект.ВидКорректировки <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
		
		Для Каждого СтрокаТЧ Из Объект[ДополнительныеПараметры.ИмяТЧ] Цикл
			
			Если (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
				И СтрокаТЧ.КоличествоУпаковок > 0
				И СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СтрокаТЧ.ВариантОтражения = ВариантОтражения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, "ВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу");
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВариантОтраженияУвеличениеКоличестваБезИнвентаризации(Результат, ДополнительныеПараметры) Экспорт
	
	СписокВариантовОтражения = Новый СписокЗначений;
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки"));
	
	СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
	
	ОткрытьФорму(
		"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		Новый ОписаниеОповещения("УстановитьВариантОтраженияУвеличениеКоличестваБезИнвентаризацииЗавершение", ЭтотОбъект, ДополнительныеПараметры));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУвеличениеКоличестваБезИнвентаризацииЗавершение(ВариантОтражения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВариантОтражения)
		И Объект.ВидКорректировки <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара") Тогда
		
		Для Каждого СтрокаТЧ Из Объект[ДополнительныеПараметры.ИмяТЧ] Цикл
			
			Если (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
				И СтрокаТЧ.КоличествоУпаковок > 0
				И НЕ СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СтрокаТЧ.ВариантОтражения = ВариантОтражения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, "ВариантОтраженияУвеличениеКоличестваБезИнвентаризации");
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу(Результат, ДополнительныеПараметры) Экспорт
	
	СписокВариантовОтражения = Новый СписокЗначений;
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации"));
	
	СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
	
	ОткрытьФорму(
		"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		Новый ОписаниеОповещения("УстановитьВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладуЗавершение(ВариантОтражения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВариантОтражения) Тогда
		
		Для Каждого СтрокаТЧ Из Объект[ДополнительныеПараметры.ИмяТЧ] Цикл
			
			Если (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
				И (СтрокаТЧ.КоличествоУпаковок < 0 Или Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
				И СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
				СтрокаТЧ.ВариантОтражения = ВариантОтражения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, "ВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУменьшениеКоличестваБезИнвентаризации(Результат, ДополнительныеПараметры) Экспорт
	
	СписокВариантовОтражения = Новый СписокЗначений;
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
	СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки"));
	
	СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
	
	ОткрытьФорму(
		"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		Новый ОписаниеОповещения("УстановитьВариантОтраженияУменьшениеКоличестваБезИнвентаризацииЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантОтраженияУменьшениеКоличестваБезИнвентаризацииЗавершение(ВариантОтражения, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВариантОтражения) Тогда
		
		Для Каждого СтрокаТЧ Из Объект[ДополнительныеПараметры.ИмяТЧ] Цикл
			
			Если (СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
				Или СтрокаТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
				И (СтрокаТЧ.КоличествоУпаковок < 0 Или Объект.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара"))
				И (НЕ СтрокаТЧ.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач) Тогда
				СтрокаТЧ.ВариантОтражения = ВариантОтражения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, "ВариантОтраженияУменьшениеКоличестваБезИнвентаризации");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаЗавершение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = "ВвестиКорректировку" Тогда
		ОткрытьФорму("Документ.КорректировкаРеализации.ФормаОбъекта", Новый Структура("Основание", Объект.ДокументОснование));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьСозданияТранспортнойНакладнойВопрос(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Результат = Истина;
	
	Если КодОтвета = КодВозвратаДиалога.ОК И ПроверитьЗаполнение() Тогда
		Попытка
			Результат = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИсходнымДаннымЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПоИсходнымДаннымСервер();
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		Если ИспользуетсяКоличествоУпаковок Тогда
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		Иначе
			ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
		КонецЕсли;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РасхожденияАктуальны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасхожденияЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьРасхожденияСервер();
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	РассчитатьИтоговыеПоказателиРеализации(ЭтаФорма);
	СформироватьНадписьВалюты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАктуПриемкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПоАктуПриемкиСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	Элементы.РасхожденияСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
	ДанныеВыбораСкладов = ДанныеВыбораСкладов(Объект.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка", ДанныеВыбораСкладов);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.РасхожденияСклад, "Ссылка", ДанныеВыбораСкладов);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьХозяйственнуюОперациюДокументаОснования()
	
	Операция = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ХозяйственнаяОперация");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ТоварыСтатьяДоходовПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
		СтрокаТаблицы.СтатьяДоходов, Объект, Объект.Подразделение);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура РасхожденияСтатьяДоходовПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.Расхождения.НайтиПоИдентификатору(Элементы.Расхождения.ТекущаяСтрока);
	
	АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
		СтрокаТаблицы.СтатьяДоходов, Объект, Объект.Подразделение);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаДоходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти
