#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	СуммаДокумента = ПолучитьСуммуДокумента();
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Курс,Кратность);
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект, "Расхождения" , СтруктураКурса);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Расхождения", СтруктураКурса);
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактурыПередЗаписьюОснования(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			Для Каждого Строка Из Товары Цикл
				Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
					Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Строка Из Расхождения Цикл
				Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
					Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			ВидКорректировки,
			Склад,
			Подразделение,
			Партнер);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("Произвольный", "Склад");
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Расхождения,
			МестаУчета,
			ИменаПолей);
		
		РегистрыСведений.АналитикаУчетаНаборов.ЗаполнитьВКоллекции(Расхождения);
		
		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Расхождения);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасовКорректировкаВыручки);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасовОприходование);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасовСписание);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ВидыЗапасовКорректировкаВыручки.Очистить();
		ВидыЗапасовОприходование.Очистить();
		ВидыЗапасовСписание.Очистить();
		
	КонецЕсли;
	
	// Очистим не используемые реквизиты документа.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.КорректировкаРеализации.ЗаполнитьИменаРеквизитовПоОснованию(
		ДокументОснование,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
															НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект,
																										Документы.КорректировкаРеализации));
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если ВидКорректировки <> Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
			И ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
			
			СтрокаТЧ.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка();

		КонецЕсли;
	КонецЦикла;
	
	ОтразитьНаПрочихДоходах = Ложь;
	СписатьНаРасходы  = Ложь;
	Для Каждого СтрокаТЧ Из Расхождения Цикл
		Если СтрокаТЧ.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах Тогда
			ОтразитьНаПрочихДоходах = Истина;
		ИначеЕсли СтрокаТЧ.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы Тогда
			СписатьНаРасходы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтразитьНаПрочихДоходах Тогда
		ПодразделениеДоходы	= Справочники.СтруктураПредприятия.ПустаяСсылка();
		СтатьяДоходов		= ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
		АналитикаДоходов	= Неопределено;
	КонецЕсли;
	
	Если НЕ СписатьНаРасходы Тогда
		ПодразделениеРасходы	= Справочники.СтруктураПредприятия.ПустаяСсылка();
		СтатьяРасходов			= ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
		АналитикаРасходов		= Неопределено;
	КонецЕсли;
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ЗаполнитьВариантОформленияПродажи();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ЗаполнитьПоАктуВыполненныхРабот(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		ЗаполнитьПоРеализацииУслугПрочихАктивов(ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("АктОРасхождениях")
		И ДанныеЗаполнения.Свойство("Реализация")
		И ДанныеЗаполнения.Свойство("Операция") Тогда
		
		ЗаполнитьПоАктуОРасхожденияхПослеОтгрузки(ДанныеЗаполнения, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.КорректировкаРеализации.ЗаполнитьИменаРеквизитовПоОснованию(
		ДокументОснование,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.СтавкаНДС");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаРеализации);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
												
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Расхождения";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПроверитьЗаполнениеПоРасхождениям(МассивНепроверяемыхРеквизитов, Отказ);
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		КорректировкаПрошлогоПериода = НачалоГода(ДатаДокумента) > НачалоГода(ДатаОснования);
		КорректировкаУслугПрочихАктивов = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов");
	
		Если КорректировкаУслугПрочихАктивов И Не КорректировкаПрошлогоПериода Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеДоходы");
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
			МассивНепроверяемыхРеквизитов.Добавить("АналитикаДоходов");
			МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеРасходы");
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
			МассивНепроверяемыхРеквизитов.Добавить("АналитикаРасходов");
			
			ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
					ЭтотОбъект,Новый Структура("Товары"), МассивНепроверяемыхРеквизитов, Отказ);
					
			ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
					ЭтотОбъект,Новый Структура("Расхождения"), МассивНепроверяемыхРеквизитов, Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Соглашение) ИЛИ НЕ ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	Если НЕ ПродажаПоЗаказам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ЗаказКлиента");
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.ЗаказКлиента");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,, МассивНепроверяемыхРеквизитов, Отказ);
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,, МассивНепроверяемыхРеквизитов, Отказ);
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.КорректировкаРеализации.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьУслугиКОформлениюОтчетовПринципалу(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПереданнуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);	

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Истина, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Ложь, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Товары.Очистить();
	Расхождения.Очистить();
	
	ДатаПлатежа = Дата(1,1,1);
	Согласован = Ложь;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен,
		ЭтотОбъект.ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
		
	Документы.ТранспортнаяНакладная.АктуализироватьТранспортныеНакладные(Ссылка, Проведен, ПометкаУдаления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Инициализация_и_Заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("ВалютаВзаиморасчетов") Тогда
		ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ВалютаВзаиморасчетов);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") ИЛИ НЕ ЗначениеЗаполнено(ВариантОформленияПродажи) Тогда
		ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	КонецЕсли;
	
	РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию(Курс, Кратность, Валюта, ВалютаВзаиморасчетов);

КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваровУслуг(Знач ДокументОснование, ДанныеЗаполнения)
	
	МетаданныеДокументОснование = ДокументОснование.Метаданные();
	Если НЕ ПравоДоступа("Изменение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						   КАК ДокументОснование,
	|	ДанныеДокумента.Партнер						   КАК Партнер,
	|	ДанныеДокумента.Контрагент					   КАК Контрагент,
	|	ДанныеДокумента.Соглашение					   КАК Соглашение,
	|	ДанныеДокумента.Соглашение.ГрафикОплаты		   КАК ГрафикОплаты,
	|	ДанныеДокумента.Организация					   КАК Организация,
	|	ДанныеДокумента.Договор						   КАК Договор,
	|	ДанныеДокумента.Склад						   КАК Склад,
	|	ДанныеДокумента.Статус						   КАК Статус,
	|	ДанныеДокумента.Валюта						   КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов		   КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС			   КАК НалогообложениеНДС,
	|	ДанныеДокумента.Подразделение				   КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности		   КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Сделка						   КАК Сделка,
	|	ДанныеДокумента.ЦенаВключаетНДС				   КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.РеализацияПоЗаказам			   КАК ПродажаПоЗаказам,
	|	ДанныеДокумента.Отпустил					   КАК Отпустил,
	|	ДанныеДокумента.ОтпустилДолжность			   КАК ОтпустилДолжность,
	|	ДанныеДокумента.Грузополучатель				   КАК Грузополучатель,
	|	ДанныеДокумента.Грузоотправитель			   КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации	   КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента	   КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки 				   КАК АдресДоставки,
	|	ДанныеДокумента.ДоверенностьНомер			   КАК ДоверенностьНомер,
	|	ДанныеДокумента.ДоверенностьДата			   КАК ДоверенностьДата,
	|	ДанныеДокумента.ДоверенностьВыдана			   КАК ДоверенностьВыдана,
	|	ДанныеДокумента.ДоверенностьЛицо			   КАК ДоверенностьЛицо,
	|	ДанныеДокумента.ФормаОплаты					   КАК ФормаОплаты,
	|	ДанныеДокумента.ПорядокРасчетов				   КАК ПорядокРасчетов,
	|	ДанныеДокумента.ВариантОформленияПродажи       КАК ВариантОформленияПродажи,
	|	
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|	
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияОснования
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку реализации на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для реализации с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.Статус,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Склад, Валюта, ВалютаВзаиморасчетов, ВариантОформленияПродажи");
	
	ДанныеЗаполнения.Вставить("ДатаПлатежа", ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДатаСеанса(), Выборка.ГрафикОплаты, Выборка.Соглашение));
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(Выборка.ДокументОснование, Товары);
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаРеализации);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Знач ДокументОснование, ДанныеЗаполнения)
	
	МетаданныеДокументОснование = ДокументОснование.Метаданные();
	Если НЕ ПравоДоступа("Изменение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК ДокументОснование,
	|	ДанныеДокумента.Партнер					КАК Партнер,
	|	ДанныеДокумента.Контрагент				КАК Контрагент,
	|	ДанныеДокумента.Соглашение				КАК Соглашение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Соглашение.ГрафикОплаты	КАК ГрафикОплаты,
	|	ДанныеДокумента.Организация				КАК Организация,
	|	ДанныеДокумента.Договор					КАК Договор,
	|	ДанныеДокумента.Валюта					КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС		КАК НалогообложениеНДС,
	|	ДанныеДокумента.Подразделение			КАК Подразделение,
	|	ДанныеДокумента.Сделка					КАК Сделка,
	|	ДанныеДокумента.ЦенаВключаетНДС			КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.АктПоЗаказам			КАК ПродажаПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты				КАК ФормаОплаты,
	|	ДанныеДокумента.ПорядокРасчетов			КАК ПорядокРасчетов,
	|	НЕ ДанныеДокумента.Проведен				КАК ЕстьОшибкиПроведен
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		, // Статус
		Выборка.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Валюта, ВалютаВзаиморасчетов");
	
	ДанныеЗаполнения.Вставить("ДатаПлатежа", ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДатаСеанса(), Выборка.ГрафикОплаты, Выборка.Соглашение));
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(Выборка.ДокументОснование, Товары);
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуОРасхожденияхПослеОтгрузки(Знач СтруктураПараметров, ДанныеЗаполнения)
	
	ДокументОснованиеРеализация       = СтруктураПараметров.Реализация;
	ДокументОснованиеАктОРасхождениях = СтруктураПараметров.АктОРасхождениях;
	ВидКорректировки             = СтруктураПараметров.Операция;
	
	МетаданныеДокументОснование = ДокументОснованиеРеализация.Метаданные();
	Если НЕ ПравоДоступа("Изменение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснованиеРеализация)
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОснованиеАктОРасхождениях) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснованиеРеализация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.ГрафикОплаты КАК ГрафикОплаты,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Сделка КАК Сделка,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.РеализацияПоЗаказам КАК ПродажаПоЗаказам,
	|	ДанныеДокумента.Отпустил КАК Отпустил,
	|	ДанныеДокумента.ОтпустилДолжность КАК ОтпустилДолжность,
	|	ДанныеДокумента.Грузополучатель КАК Грузополучатель,
	|	ДанныеДокумента.Грузоотправитель КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ДанныеДокумента.ДоверенностьДата КАК ДоверенностьДата,
	|	ДанныеДокумента.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ДанныеДокумента.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияОснования,
	|	АктОРасхожденияхПослеОтгрузки.СпособОтраженияРасхождений КАК СпособОтраженияРасхождений,
	|	АктОРасхожденияхПослеОтгрузки.Ссылка КАК АктОРасхожденияхПослеОтгрузкиОснование,
	|	ВЫБОР
	|		КОГДА АктОРасхожденияхПослеОтгрузки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатусАктОРасхождениях,
	|	НЕ АктОРасхожденияхПослеОтгрузки.Проведен КАК ЕстьОшибкиПроведенАктОРасхождениях,
	|	АктОРасхожденияхПослеОтгрузки.Статус КАК СтатусАктОРасхождениях
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхожденияхПослеОтгрузки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|	И АктОРасхожденияхПослеОтгрузки.Ссылка = &АктОРасхожденияхПослеОтгрузкиОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснованиеРеализация);
	Запрос.УстановитьПараметр("АктОРасхожденияхПослеОтгрузкиОснование", ДокументОснованиеАктОРасхождениях);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку реализации на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для реализации с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.СпособОтраженияРасхождений = Перечисления.СпособыОтраженияРасхожденийАктПриемкиКлиента.ИсправлениеПервичныхДокументов Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для акта со способом отражения расхождений ""%1"" не требуется вводить корректировку.'"),
			Выборка.СпособОтраженияРасхождений);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыАктаОРасхождениях.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыАктаОРасхождениях.Отработано);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.АктОРасхожденияхПослеОтгрузкиОснование,
		Выборка.СтатусАктОРасхождениях,
		Выборка.ЕстьОшибкиПроведенАктОРасхождениях,
		Выборка.ЕстьОшибкиСтатусАктОРасхождениях,
		МассивДопустимыхСтатусов);
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.Статус,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Склад, Валюта, ВалютаВзаиморасчетов, ДокументОснование, АктОРасхожденияхПослеОтгрузкиОснование, ЦенаВключаетНДС, НалогообложениеНДС");
	
	ДанныеЗаполнения.Вставить("ДатаПлатежа", ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДатаСеанса(), Выборка.ГрафикОплаты, Выборка.Соглашение));
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоАктуПриемки(ЭтотОбъект);
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.КорректировкаРеализации);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииУслугПрочихАктивов(Знач ДокументОснование, ДанныеЗаполнения)
	
	МетаданныеДокументОснование = ДокументОснование.Метаданные();
	Если НЕ ПравоДоступа("Изменение", МетаданныеДокументОснование) Тогда
		ТекстОшибки = НСтр("ru='У пользователя недостаточно прав на корректировку документа ""'")
			+ МетаданныеДокументОснование.Синоним + """.";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК ДокументОснование,
	|	ДанныеДокумента.Партнер					КАК Партнер,
	|	ДанныеДокумента.Контрагент				КАК Контрагент,
	|	ДанныеДокумента.Соглашение				КАК Соглашение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Соглашение.ГрафикОплаты	КАК ГрафикОплаты,
	|	ДанныеДокумента.Организация				КАК Организация,
	|	ДанныеДокумента.Договор					КАК Договор,
	|	ДанныеДокумента.Валюта					КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.НалогообложениеНДС		КАК НалогообложениеНДС,
	|	ДанныеДокумента.Подразделение			КАК Подразделение,
	|	ДанныеДокумента.ЦенаВключаетНДС			КАК ЦенаВключаетНДС,
	|	Ложь									КАК ПродажаПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты				КАК ФормаОплаты,
	|	ДанныеДокумента.ПорядокРасчетов			КАК ПорядокРасчетов,
	|	НЕ ДанныеДокумента.Проведен				КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиОперация,
	|	
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияОснования
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку реализации на основании документа %1.'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиОперация Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для реализации с операцией ""%1"" не требуется вводить корректировку.'"),
			Выборка.ХозяйственнаяОперацияОснования);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		, // Статус
		Выборка.ЕстьОшибкиПроведен);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация, Валюта, ВалютаВзаиморасчетов");
	
	ДанныеЗаполнения.Вставить("ДатаПлатежа", ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(ТекущаяДатаСеанса(), Выборка.ГрафикОплаты, Выборка.Соглашение));
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(Выборка.ДокументОснование, Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот")
	 ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	// Виды запасов к оприходованию
	Если ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара Тогда
		ВидыЗапасовОприходование.Очистить();
	Иначе
		МассивВариантовОтражения = Новый Массив;
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации);
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки);
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы);
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокументаОприходование(МассивВариантовОтражения);
		
		ИзмененыРеквизитыДокумента = ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц);
		
		Если Не Проведен
			ИЛИ ПерезаполнитьВидыЗапасов
			ИЛИ ИзмененыРеквизитыДокумента
			ИЛИ ПроверитьИзменениеТоваровОприходование(МенеджерВременныхТаблиц) Тогда
			
			ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
			ПараметрыЗаполнения.ИмяТаблицыОстатков = "РеализованныеТовары";
			ПараметрыЗаполнения.ИмяТЧВидыЗапасов = "ВидыЗапасовОприходование";
			ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию = Ложь;
			ПараметрыЗаполнения.БезОтбораПоНомерамГТД = Истина;
			ЗапасыСервер.ЗаполнитьВидыЗапасовПоОстаткамКОформлению(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
			ВидыЗапасовОприходование.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Склад, СкладОтгрузки, ВидЗапасовОтгрузки, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
			ЗаполнитьДопКолонкиВидовЗапасов(ВидыЗапасовОприходование, МассивВариантовОтражения, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Виды запасов к списанию
	Если ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		ВидыЗапасовСписание.Очистить();
	Иначе
		МассивВариантовОтражения = Новый Массив;
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах);
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокументаСписание(МассивВариантовОтражения);
		
		ВидЗапасовПоУмолчанию = Справочники.ВидыЗапасов.ПустаяСсылка();
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, Неопределено, ВидЗапасовПоУмолчанию);
		
		ИзмененыТоварыОтразитьНаПрочихДоходах = Ложь;
		Если ПроверитьИзменениеТоваровОтразитьНаПрочихДоходах(МенеджерВременныхТаблиц) Тогда
			ИзмененыТоварыОтразитьНаПрочихДоходах = Истина;
		КонецЕсли;
		
		МассивВариантовОтражения = Новый Массив;
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации);
		МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки);
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокументаСписание(МассивВариантовОтражения);
		
		ИзмененыРеквизитыДокумента = ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц);
		
		Если Не Проведен
			ИЛИ ПерезаполнитьВидыЗапасов
			ИЛИ ИзмененыРеквизитыДокумента
			ИЛИ ИзмененыТоварыОтразитьНаПрочихДоходах
			ИЛИ ПроверитьИзменениеТоваровСписание(МенеджерВременныхТаблиц) Тогда
			
			ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
			ПараметрыЗаполнения.ИмяТЧВидыЗапасов = "ВидыЗапасовСписание";
			ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
			ПараметрыЗаполнения.БезОтбораПоНомерамГТД = Истина;
			УчетНДСУТ.ПараметрыЗаполненияВидовЗапасовПоНалогообложению(ПараметрыЗаполнения.ОтборыВидовЗапасов, НалогообложениеНДС);
			ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
			
			СтрокиОтразитьНаПрочихДоходах = Расхождения.НайтиСтроки(
				Новый Структура("ВариантОтражения", Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах));
				
			Если СтрокиОтразитьНаПрочихДоходах.Количество() Тогда
				Для Каждого Стр Из СтрокиОтразитьНаПрочихДоходах Цикл
					ВидыЗапасовСписаниеСтр = ВидыЗапасовСписание.Добавить();
					ЗаполнитьЗначенияСвойств(ВидыЗапасовСписаниеСтр, Стр);
					ВидыЗапасовСписаниеСтр.ВидЗапасов = ВидЗапасовПоУмолчанию;
				КонецЦикла;
				МассивВариантовОтражения.Добавить(Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах);
			КонецЕсли;
			
			ВидыЗапасовСписание.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Склад, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
			ЗаполнитьДопКолонкиВидовЗапасов(ВидыЗапасовСписание, МассивВариантовОтражения);
		КонецЕсли;
	КонецЕсли;
	
	// Виды запасов к корректировке выручки (без изменения количества)
	Если ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
		ИЛИ ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		ВидыЗапасовКорректировкаВыручки.Очистить();
	Иначе
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокументаКорректировкаВыручки();
		ИзмененыРеквизитыДокумента = ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц);
		Если Не Проведен
			ИЛИ ПерезаполнитьВидыЗапасов
			ИЛИ ИзмененыРеквизитыДокумента
			ИЛИ ПроверитьИзменениеТоваровКорректировкаВыручки(МенеджерВременныхТаблиц) Тогда
			ЗаполнитьВидыЗапасовКорректировкаВыручки(МенеджерВременныхТаблиц);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.НалогообложениеНДС,
	|	ДанныеДокумента.Дата КАК Дата,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.НалогообложениеНДС <> СохраненныеДанные.НалогообложениеНДС ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Процедура ЗаполнитьДопКолонкиВидовЗапасов(ВидыЗапасов, МассивВариантовОтражения, ЗаполнятьВидЗапасовОтгрузки = Ложь) Экспорт
	
	ТаблицаТовары = Расхождения.ВыгрузитьКолонки("АналитикаУчетаНоменклатуры, АналитикаУчетаНаборов, Склад, Упаковка, ЗаказКлиента, КодТНВЭД, Количество, КоличествоУпаковок, СуммаВзаиморасчетов");
	ТаблицаТовары.Колонки.Добавить("НаДоходыРасходы");
	Для Каждого СтрокаРасхождений Из Расхождения Цикл
		
		УчитыватьСтроку = Ложь;
		Для Каждого ВариантОтражения Из МассивВариантовОтражения Цикл
			Если СтрокаРасхождений.ВариантОтражения = ВариантОтражения Тогда
				УчитыватьСтроку = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УчитыватьСтроку Тогда
			СтрокаТоваров = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаРасхождений);
			Если СтрокаРасхождений.КоличествоУпаковок < 0 Тогда
				СтрокаТоваров.КоличествоУпаковок = -СтрокаРасхождений.КоличествоУпаковок;
				СтрокаТоваров.Количество = -СтрокаРасхождений.Количество;
				СтрокаТоваров.СуммаВзаиморасчетов = -СтрокаРасхождений.СуммаВзаиморасчетов;
			КонецЕсли;
			СтрокаТоваров.НаДоходыРасходы = СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы
				ИЛИ СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах;
			СтрокаТоваров.АналитикаУчетаНаборов = СтрокаРасхождений.АналитикаУчетаНаборов;
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, АналитикаУчетаНаборов, Склад, Упаковка, ЗаказКлиента, КодТНВЭД, НаДоходыРасходы", "Количество, КоличествоУпаковок, СуммаВзаиморасчетов");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваров = СтрокаТоваров.Количество;
		КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
		СуммаВзаиморасчетовТоваров = СтрокаТоваров.СуммаВзаиморасчетов;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Упаковка = СтрокаТоваров.Упаковка;
			НоваяСтрока.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
			НоваяСтрока.КодТНВЭД = СтрокаТоваров.КодТНВЭД;
			НоваяСтрока.НаДоходыРасходы = СтрокаТоваров.НаДоходыРасходы;
			НоваяСтрока.АналитикаУчетаНаборов = СтрокаТоваров.АналитикаУчетаНаборов;
			НоваяСтрока.КоличествоУпаковок = ?(КоличествоТоваров <> 0, КоличествоУпаковок * Количество / КоличествоТоваров, 0);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.СуммаСНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаСНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаВзаиморасчетов = ?(СтрокаЗапасов.Количество <> 0, СуммаВзаиморасчетовТоваров * Количество / КоличествоТоваров, 0);
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС = СтрокаЗапасов.СуммаСНДС - НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС = СтрокаЗапасов.СуммаНДС - НоваяСтрока.СуммаНДС;
			
			// для новых видов запасов ВидЗапасовОтгрузки = ВидЗапасов
			// поле оставлено для обратной совместимости со старыми документами
			Если ЗаполнятьВидЗапасовОтгрузки И Не ЗначениеЗаполнено(НоваяСтрока.ВидЗапасовОтгрузки) Тогда
				НоваяСтрока.ВидЗапасовОтгрузки = СтрокаЗапасов.ВидЗапасов;
			КонецЕсли;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			КоличествоУпаковок = КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			СуммаВзаиморасчетовТоваров = СуммаВзаиморасчетовТоваров - НоваяСтрока.СуммаВзаиморасчетов;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Списание

Функция ВременныеТаблицыДанныхДокументаСписание(МассивВариантовОтражения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата														КАК Дата,
	|	&Организация												КАК Организация,
	|	Неопределено												КАК Партнер,
	|	Неопределено												КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)		КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	|	&НалогообложениеНДС											КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация										КАК ХозяйственнаяОперация,
	|	Ложь														КАК ЕстьСделкиВТабличнойЧасти,
	|	&ДеятельностьОблагаетсяЕНВД									КАК ДеятельностьОблагаетсяЕНВД,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ														КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ														КАК Менеджер,
	|
	|	ВЫБОР КОГДА СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		&Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ														КАК Сделка,
	|	НЕОПРЕДЕЛЕНО												КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)					КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|	ПО
	|		СделкиСКлиентами.Ссылка = &Сделка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки											КАК НомерСтроки,
	|	ТаблицаТоваров.ВариантОтражения										КАК ВариантОтражения,
	|	ТаблицаТоваров.Номенклатура											КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика										КАК Характеристика,
	|	ТаблицаТоваров.Серия												КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий									КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Назначение											КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры							КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество											КАК Количество,
	|	ТаблицаТоваров.Склад												КАК Склад,
	|	ТаблицаТоваров.КодТНВЭД												КАК КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС											КАК СтавкаНДС,
	|	ТаблицаТоваров.Сумма + (ТаблицаТоваров.СуммаНДС * &ЦенаВключаетНДС)	КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС												КАК СуммаНДС,
	|	&Сделка																КАК Сделка,
	|	ТаблицаТоваров.ЗаказКлиента											КАК ЗаказКлиента,
	|	ТаблицаТоваров.КодСтроки											КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ВариантОтражения В (&МассивВариантовОтражения)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение	КАК Назначение
	|	
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&ПродажаПоЗаказам
	|	И ТаблицаТоваров.ЗаказКлиента <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение	КАК Назначение
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&ПродажаПоЗаказам
	|	И ТаблицаТоваров.ЗаказКлиента <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаТоваров.ВариантОтражения				КАК ВариантОтражения,
	|	ТаблицаТоваров.Номенклатура					КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика				КАК Характеристика,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Серия						КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий			КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Количество					КАК Количество,
	|	ТаблицаТоваров.Склад						КАК Склад,
	|	ТаблицаТоваров.ЗаказКлиента					КАК ЗаказКлиента,
	|	ТаблицаТоваров.КодТНВЭД						КАК КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС					КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС					КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС						КАК СуммаНДС,
	|	0											КАК СуммаВознаграждения,
	|	0											КАК СуммаНДСВознаграждения,
	|	&Сделка										КАК Сделка,
	|	ТаблицаТоваров.Назначение					КАК Назначение,
	|	ИСТИНА										КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы				КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД						КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)		КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад						КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|	&Сделка											КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС						КАК СуммаНДС,
	|	Ложь											КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	99999 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента КАК ЗаказКлиента,
	|	&Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовОприходование
	|ИЗ
	|	&ВидыЗапасовОприходование КАК ТаблицаВидыЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы				КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура							КАК Номенклатура,
	|	Аналитика.Характеристика						КАК Характеристика,
	|	Аналитика.Серия									КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД						КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.СкладОтгрузки				КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад						КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|	ТаблицаВидыЗапасов.Сделка						КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС						КАК СуммаНДС,
	|	ЛОЖЬ											КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы				КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура							КАК Номенклатура,
	|	Аналитика.Характеристика						КАК Характеристика,
	|	Аналитика.Серия									КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД						КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.СкладОтгрузки				КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад						КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|	ТаблицаВидыЗапасов.Сделка						КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС						КАК СуммаНДС,
	|	ИСТИНА											КАК ВидыЗапасовУказаныВручную
	|ИЗ
	|	ВтВидыЗапасовОприходование КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ТекущийВидЗапасов,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ВернутьМногооборотнуюТару
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	ТаблицаДанныхДокумента.Организация КАК Организация,
	|	ТаблицаДанныхДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДанныхДокумента.ТипЗапасов КАК ТипЗапасов,
	|	ТаблицаДанныхДокумента.Соглашение КАК Соглашение,
	|	ТаблицаДанныхДокумента.Валюта КАК Валюта,
	|	ТаблицаДанныхДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|	ТаблицаДанныхДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДанныхДокумента.Договор КАК Договор
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО (ИСТИНА)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",								Ссылка);
	Запрос.УстановитьПараметр("Дата",								Дата);
	Запрос.УстановитьПараметр("Организация",						Организация);
	Запрос.УстановитьПараметр("Менеджер",							Менеджер);
	Запрос.УстановитьПараметр("Подразделение",						Подразделение);
	Запрос.УстановитьПараметр("Сделка",								Сделка);
	Запрос.УстановитьПараметр("НалогообложениеНДС",					НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",					?(ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ПродажаПоЗаказам",					ПродажаПоЗаказам);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",				Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Запрос.УстановитьПараметр("ДеятельностьОблагаетсяЕНВД",			(НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",	ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",						Расхождения);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",					ВидыЗапасовСписание);
	Запрос.УстановитьПараметр("МассивВариантовОтражения",			МассивВариантовОтражения);
	Запрос.УстановитьПараметр("ВидыЗапасовОприходование",			ВидыЗапасовОприходование);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", 			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ВернутьМногооборотнуюТару"));
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПроверитьИзменениеТоваровСписание(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Склад							КАК Склад,
	|		ТаблицаТоваров.ЗаказКлиента						КАК ЗаказКлиента,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.КодТНВЭД							КАК КодТНВЭД,
	|		ТаблицаТоваров.СтавкаНДС						КАК СтавкаНДС,
	|		ТаблицаТоваров.Количество						КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС						КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС							КАК СуммаНДС
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Склад						КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.КодТНВЭД						КАК КодТНВЭД,
	|		ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|		-ТаблицаВидыЗапасов.Количество					КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС					КАК СуммаНДС
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		НЕ ТаблицаВидыЗапасов.НаДоходыРасходы
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Функция ПроверитьИзменениеТоваровОтразитьНаПрочихДоходах(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Склад							КАК Склад,
	|		ТаблицаТоваров.ЗаказКлиента						КАК ЗаказКлиента,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.СтавкаНДС						КАК СтавкаНДС,
	|		ТаблицаТоваров.Количество						КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС						КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС							КАК СуммаНДС
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Склад						КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|		-ТаблицаВидыЗапасов.Количество					КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС					КАК СуммаНДС
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ГДЕ
	|		ТаблицаВидыЗапасов.НаДоходыРасходы
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Оприходование

Функция ВременныеТаблицыДанныхДокументаОприходование(МассивВариантовОтражения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата														КАК Дата,
	|	&Организация												КАК Организация,
	|	&Партнер													КАК Партнер,
	|	&Контрагент													КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)		КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	|	&НалогообложениеНДС											КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация										КАК ХозяйственнаяОперация,
	|	Ложь														КАК ЕстьСделкиВТабличнойЧасти,
	|	&ДеятельностьОблагаетсяЕНВД									КАК ДеятельностьОблагаетсяЕНВД,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ														КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ														КАК Менеджер,
	|
	|	ВЫБОР КОГДА СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		&Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ														КАК Сделка,
	|	&ДокументРеализации											КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)					КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|	ПО
	|		СделкиСКлиентами.Ссылка = &Сделка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки												КАК НомерСтроки,
	|	ТаблицаТоваров.ВариантОтражения											КАК ВариантОтражения,
	|	ТаблицаТоваров.Номенклатура												КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика											КАК Характеристика,
	|	ТаблицаТоваров.Серия													КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий										КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры								КАК АналитикаУчетаНоменклатуры,
	|	-ТаблицаТоваров.Количество												КАК Количество,
	|	ТаблицаТоваров.Склад													КАК Склад,
	|	&ДокументРеализации														КАК ДокументРеализации,
	|	ТаблицаТоваров.ЗаказКлиента												КАК ЗаказКлиента,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)						КАК Сделка,
	|	ТаблицаТоваров.Назначение												КАК Назначение,
	|	ТаблицаТоваров.КодТНВЭД													КАК КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС												КАК СтавкаНДС,
	|	-(ТаблицаТоваров.Сумма + (ТаблицаТоваров.СуммаНДС * &ЦенаВключаетНДС))	КАК СуммаСНДС,
	|	-ТаблицаТоваров.СуммаНДС												КАК СуммаНДС,
	|	0																		КАК СуммаВознаграждения,
	|	0																		КАК СуммаНДСВознаграждения,
	|	ЛОЖЬ																	ПодбиратьВидыЗапасов,
	|	ТаблицаТоваров.КодСтроки												КАК КодСтроки
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ВариантОтражения В (&МассивВариантовОтражения)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение	КАК Назначение
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&ПродажаПоЗаказам
	|	И ТаблицаТоваров.ЗаказКлиента <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки		КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение	КАК Назначение
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.ЗаказКлиента = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&ПродажаПоЗаказам
	|	И ТаблицаТоваров.ЗаказКлиента <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки					 КАК НомерСтроки,
	|	ТаблицаТоваров.ВариантОтражения				 КАК ВариантОтражения,
	|	ТаблицаТоваров.Номенклатура					 КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика				 КАК Характеристика,
	|	ТаблицаТоваров.Назначение				 	КАК Назначение,
	|	ТаблицаТоваров.Серия				         КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий			 КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	 КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество					 КАК Количество,
	|	ТаблицаТоваров.Склад						 КАК Склад,
	|	ТаблицаТоваров.ДокументРеализации			 КАК ДокументРеализации,
	|	ТаблицаТоваров.ЗаказКлиента					 КАК ЗаказКлиента,
	|	ТаблицаТоваров.КодТНВЭД						 КАК КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС					 КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС					 КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС						 КАК СуммаНДС,
	|	0											 КАК СуммаВознаграждения,
	|	0											 КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.Сделка						 КАК Сделка,
	|	ТаблицаТоваров.ПодбиратьВидыЗапасов			 КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	 КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы					КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД							КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС						КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.СкладОтгрузки					КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад							КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента						КАК ЗаказКлиента,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)	КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество						КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС						КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС							КАК СуммаНДС,
	|	ЛОЖЬ												КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки						КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.НаДоходыРасходы					КАК НаДоходыРасходы,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура								КАК Номенклатура,
	|	Аналитика.Характеристика							КАК Характеристика,
	|	Аналитика.Серия										КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 										КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД							КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС						КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.СкладОтгрузки					КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад							КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента						КАК ЗаказКлиента,
	|	ТаблицаВидыЗапасов.Сделка							КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество						КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС						КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС							КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную		КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",								Ссылка);
	Запрос.УстановитьПараметр("Дата",								Дата);
	Запрос.УстановитьПараметр("Организация",						Организация);
	Запрос.УстановитьПараметр("Партнер",							Партнер);
	Запрос.УстановитьПараметр("Контрагент",							Контрагент);
	Запрос.УстановитьПараметр("Менеджер",							Менеджер);
	Запрос.УстановитьПараметр("Подразделение",						Подразделение);
	Запрос.УстановитьПараметр("Сделка",								Сделка);
	Запрос.УстановитьПараметр("Склад",								Склад);
	Запрос.УстановитьПараметр("НалогообложениеНДС",					НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",					?(ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",				ВидКорректировки);
	Запрос.УстановитьПараметр("ДеятельностьОблагаетсяЕНВД",			(НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам",	ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",						Расхождения);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",					ВидыЗапасовОприходование);
	Запрос.УстановитьПараметр("МассивВариантовОтражения",			МассивВариантовОтражения);
	Запрос.УстановитьПараметр("ДокументРеализации",					ДокументОснование);
	Запрос.УстановитьПараметр("ПродажаПоЗаказам",					ПродажаПоЗаказам);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПроверитьИзменениеТоваровОприходование(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА ТаблицаТоваров.ВариантОтражения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы),
	|													   ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах)) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ											КАК НаДоходыРасходы,
	|		ТаблицаТоваров.Склад							КАК Склад,
	|		ТаблицаТоваров.ЗаказКлиента						КАК ЗаказКлиента,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.КодТНВЭД							КАК КодТНВЭД,
	|		ТаблицаТоваров.СтавкаНДС						КАК СтавкаНДС,
	|		ТаблицаТоваров.Количество						КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС						КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС							КАК СуммаНДС
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.НаДоходыРасходы				КАК НаДоходыРасходы,
	|		ТаблицаВидыЗапасов.СкладОтгрузки				КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказКлиента					КАК ЗаказКлиента,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.КодТНВЭД						КАК КодТНВЭД,
	|		ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|		-ТаблицаВидыЗапасов.Количество					КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС					КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС					КАК СуммаНДС
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	ТаблицаТоваров.НаДоходыРасходы,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Корректировка выручки

Функция ВременныеТаблицыДанныхДокументаКорректировкаВыручки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|				И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|			ТОГДА &Менеджер
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.КодСтроки = 0
	|			ТОГДА ТаблицаТоваров.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС * &ЦенаВключаетНДС КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	(ТаблицаТоваров.ВариантОтражения = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьВыручку)
	|			ИЛИ ТаблицаТоваров.ВариантОтражения = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьВыручку))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ЛОЖЬ КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ?(ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров", Расхождения);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ВидыЗапасовКорректировкаВыручки);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПроверитьИзменениеТоваровКорректировкаВыручки(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.ЗаказКлиента КАК ЗаказКлиента,
	|		ТаблицаТоваров.КодТНВЭД КАК КодТНВЭД,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.ЗаказКлиента КАК ЗаказКлиента,
	|		ТаблицаВидыЗапасов.КодТНВЭД КАК КодТНВЭД,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|		-ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ЗаказКлиента,
	|	ТаблицаТоваров.КодТНВЭД,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура ЗаполнитьВидыЗапасовКорректировкаВыручки(МенеджерВременныхТаблиц)
	
	ВидыЗапасовКорректировкаВыручки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.ВидКорректировки КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка = &Ссылка
	|;";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст = Документы.КорректировкаРеализации.ТекстЗапросаВтВидыЗапасов();
	
	Документы.КорректировкаРеализации.УстановитьПараметрыВтВидыЗапасов(
		Запрос,
		Ложь, // ПересчитыватьВВалютуРегл
		Ложь, // ВключаяДоКорректировки
		ДокументОснование);
	
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНаборов,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента
	|ПОМЕСТИТЬ ТаблицаТоваровИтог
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНаборов,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНаборов,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС
	|;
	|ВЫБРАТЬ
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	СУММА(ВидыЗапасов.Количество)
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровИтог КАК ТаблицаТоваров
	|	ПО
	|		ВидыЗапасов.АналитикаУчетаНоменклатуры = ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|		И ВидыЗапасов.АналитикаУчетаНаборов = ТаблицаТоваров.АналитикаУчетаНаборов
	|		И ВидыЗапасов.Упаковка = ТаблицаТоваров.Упаковка
	|		И ВидыЗапасов.СтавкаНДС = ТаблицаТоваров.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД,
	|	ВидыЗапасов.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВидыЗапасов.Количество) > 0
	|
	|ИТОГИ ПО
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНаборов,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	СУММА(ТаблицаТоваров.СуммаСНДС),
	|	СУММА(ТаблицаТоваров.СуммаНДС),
	|	СУММА(ТаблицаТоваров.СуммаВзаиморасчетов)
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНаборов,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента
	|;
	|";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДеревоВидовЗапасов = МассивРезультатов[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаРасхождений = МассивРезультатов[2].Выгрузить();
	
	ДеревоВидовЗапасов.Колонки.Добавить("СуммаСНДС");
	ДеревоВидовЗапасов.Колонки.Добавить("СуммаНДС");
	ДеревоВидовЗапасов.Колонки.Добавить("СуммаВзаиморасчетов");
	
	СтруктураОтбора = Новый Структура("АналитикаУчетаНоменклатуры, АналитикаУчетаНаборов, Упаковка, СтавкаНДС, ЗаказКлиента");
	
	Для Каждого СтрокиПоНоменклатуре Из ДеревоВидовЗапасов.Строки Цикл
		Для Каждого СтрокиПоНоменклатуреНабора Из СтрокиПоНоменклатуре.Строки Цикл
			Для Каждого СтрокиПоУпаковкам Из СтрокиПоНоменклатуреНабора.Строки Цикл
				Для Каждого СтрокиПоСтавкамНДС Из СтрокиПоУпаковкам.Строки Цикл
					Для Каждого СтрокиПоСкладам Из СтрокиПоСтавкамНДС.Строки Цикл
						Для Каждого СтрокиПоЗаказам Из СтрокиПоСкладам.Строки Цикл
								
							БазаРаспределения = СтрокиПоЗаказам.Строки.ВыгрузитьКолонку("Количество");
							
							ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокиПоЗаказам);
							СтрокиРасхождений = ТаблицаРасхождений.НайтиСтроки(СтруктураОтбора);
							Если СтрокиРасхождений.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Если СтрокиРасхождений[0].СуммаСНДС <> 0 Тогда
								РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокиРасхождений[0].СуммаСНДС, БазаРаспределения);
								СтрокиПоЗаказам.Строки.ЗагрузитьКолонку(РаспределенныеСуммы, "СуммаСНДС");
							КонецЕсли;
							
							Если СтрокиРасхождений[0].СуммаНДС <> 0 Тогда
								РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокиРасхождений[0].СуммаНДС, БазаРаспределения);
								СтрокиПоЗаказам.Строки.ЗагрузитьКолонку(РаспределенныеСуммы, "СуммаНДС");
							КонецЕсли;
							
							Если СтрокиРасхождений[0].СуммаВзаиморасчетов <> 0 Тогда
								РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокиРасхождений[0].СуммаВзаиморасчетов, БазаРаспределения);
								СтрокиПоЗаказам.Строки.ЗагрузитьКолонку(РаспределенныеСуммы, "СуммаВзаиморасчетов");
							КонецЕсли;
							
							Для Каждого ДанныеВидовЗапасов Из СтрокиПоЗаказам.Строки Цикл
								НоваяСтрока = ВидыЗапасовКорректировкаВыручки.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеВидовЗапасов);
							КонецЦикла;
								
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.РасчетыСКлиентами);
		Массив.Добавить(Движения.ПереданнаяВозвратнаяТара);
	КонецЕсли;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоРасхождениям(МассивНепроверяемыхРеквизитов, Отказ)
	
	ШаблонОшибки = НСтр("ru = 'Не заполнена колонка ""Распоряжение на инвентаризацию"" в строке %1 списка ""%2""'");
	
	СуммаНаПрочиеДоходы		  = 0;
	СуммаНаПрочиеРасходы 	  = 0;
	
	ТребуетсяДатаПлатежа = Ложь;
	
	Для Каждого СтрокаРасхождений Из Расхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах Тогда
			СуммаНаПрочиеДоходы = СуммаНаПрочиеДоходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		ИначеЕсли СтрокаРасхождений.ВариантОтражения = Перечисления.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы Тогда
			СуммаНаПрочиеРасходы = СуммаНаПрочиеРасходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		КонецЕсли;
		
		Если СтрокаРасхождений.КодСтроки = 0 ИЛИ СтрокаРасхождений.СуммаСНДС >= 0 Тогда
			ТребуетсяДатаПлатежа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидКорректировки = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара
		ИЛИ ВидКорректировки = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.ВариантОтражения");
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ВариантОтражения");
		
	КонецЕсли;
	
	Если СуммаНаПрочиеДоходы = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеДоходы");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
	КонецЕсли;
	
	Если СуммаНаПрочиеРасходы = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПодразделениеРасходы");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
	КонецЕсли;
	
	Если НЕ ТребуетсяДатаПлатежа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуДокумента()
	
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ВернутьМногооборотнуюТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ВернутьМногооборотнуюТару");
		ТребуетсяЗалогЗаТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование,"ТребуетсяЗалогЗаТару");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.СуммаСНДС КАК СуммаСНДС
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|		И (НЕ &ВернутьМногооборотнуюТару ИЛИ &ТребуетсяЗалогЗаТару))
		|");
		
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС"));
		Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
		Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		СуммаИтого = Выгрузка[0].СуммаСНДС;
		
	Иначе
		
		СуммаИтого = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС)
		
	КонецЕсли;
	
	Возврат СуммаИтого;
	
КонецФункции

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(ВЫБРАТЬ
	|			ТоварыДокумента.ЗаказКлиента
	|		ИЗ
	|			Документ.КорректировкаРеализации.Товары КАК ТоварыДокумента
	|		ГДЕ
	|			ТоварыДокумента.Ссылка = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(ВЫБРАТЬ
	|			ТоварыДокумента.ЗаказКлиента
	|		ИЗ
	|			Документ.КорректировкаРеализации.Товары КАК ТоварыДокумента
	|		ГДЕ
	|			ТоварыДокумента.Ссылка = &Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.Ссылка
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.Товары.ВыгрузитьКолонку("ЗаказКлиента"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЗависимыхЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Функция ТребуетсяСчетФактураВыданный()
	
	Возврат (ЭтотОбъект.ВидКорректировки <> Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара);
	
КонецФункции

Процедура ЗаполнитьВариантОформленияПродажи()
	
	Если НЕ ЗначениеЗаполнено(ВариантОформленияПродажи) Тогда
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
			ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ
			|	ВтТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура.Ссылка
			|ИЗ
			|	ВтТовары КАК Товары
			|ГДЕ
			|	Товары.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)");
			
			Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура"));
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			КонецЕсли;
			
			Если РезультатЗапроса.Выгрузить().Количество() = Товары.Количество() Тогда
				ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВариантОформленияПродажи) Тогда
			ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
