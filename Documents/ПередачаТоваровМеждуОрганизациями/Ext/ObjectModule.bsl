#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ВидыЗапасов.Количество() > 0 Тогда
		ВидыЗапасов.Очистить();
	КонецЕсли;
	ПоТоварамКОформлению = Ложь;
	ИдентификаторПлатежа   = Неопределено;
	
	РасшифровкаПлатежаСКлиентом.Очистить();
	РасшифровкаПлатежаСПоставщиком.Очистить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("ЗаполнятьПоСхеме") Тогда
	   
		Организация				= ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель	= ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад					= ДанныеЗаполнения.Склад;
		НачалоПериода			= ДанныеЗаполнения.НачалоПериода;
		Дата					= ДанныеЗаполнения.ДатаОформления;
		Если Не ЗначениеЗаполнено(Дата)
			И ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
			И ДанныеЗаполнения.КонецПериода < ТекущаяДатаСеанса() Тогда
			Дата = ДанныеЗаполнения.КонецПериода;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Договор") Тогда
			Договор = ДанныеЗаполнения.Договор;
			
			ИменаПолей = "НаправлениеДеятельности, НаименованиеДляПечати, ПорядокРасчетов, Номер, Дата, ВалютаВзаиморасчетов";
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаПолей);
			НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
			ПорядокРасчетов = РеквизитыДоговора.ПорядокРасчетов;
			Основание = РеквизитыДоговора.НаименованиеДляПечати;
			ОснованиеНомер = РеквизитыДоговора.Номер;
			ОснованиеДата = РеквизитыДоговора.Дата;
			ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ВидЦены") Тогда
			ВидЦены = ДанныеЗаполнения.ВидЦены;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Валюта")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
			Валюта = ДанныеЗаполнения.Валюта;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ВалютаВзаиморасчетов")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = ДанныеЗаполнения.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
			Или ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОформления) Тогда
			КонецПериода = ДанныеЗаполнения.КонецПериода;
		Иначе
			КонецПериода = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТипЗапасов") Тогда
			Если ДанныеЗаполнения.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
				ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию;
			Иначе
				ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
			КонецЕсли;
		Иначе
			ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ПередачаПодДеятельность) Тогда
			ПередачаПодДеятельность = ДанныеЗаполнения.ПередачаПодДеятельность;
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
				НалогообложениеНДС = ПередачаПодДеятельность;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЭтоПередачаВозврат21") Тогда
			ЭтоПередача21 = ДанныеЗаполнения.ЭтоПередачаВозврат21;
		Иначе
			ЭтоПередача21 = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОформления) Тогда
			ЗаполнитьКПередачеПоДатеОформления(ЭтоПередача21);
		Иначе
			ЗаполнитьПоОстаткамТоваровКПередаче(ЭтоПередача21);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЗаполнятьПоОтрицательнымОстаткам") Тогда
		
		Организация = ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель = ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад = ДанныеЗаполнения.Склад;
		Дата = ДанныеЗаполнения.Дата;
		
		ЗаполнитьПоОтрицательнымОстаткамТоваровОрганизаций(ДанныеЗаполнения.Дата);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
		ЗаполнитьПоПеремещениюТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ПроверитьОрганизации(Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПередачаТоваровМеждуОрганизациями.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
			
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	ПроверитьБанковскиеСчета(Отказ);
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
		ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
	КонецЕсли;
	КомиссионнаяТорговляСервер.ПроверитьКорректностьПериода(ЭтотОбъект, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаТоваровМеждуОрганизациями),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	ПроверитьУслуги(Отказ);
	ПроверитьЗаполнениеСумм(Отказ);
	ПроверитьВариантОформленияПродажи(МассивНепроверяемыхРеквизитов);
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
	 И УказыватьНомераГТД Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект, Новый Структура("Товары"), МассивНепроверяемыхРеквизитов, Отказ);
		
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	ПроверитьКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(Отказ);
																								
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
														НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаТоваровМеждуОрганизациями));
	
	РасчетСуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	Если СуммаДокумента <> РасчетСуммаДокумента Тогда
		СуммаДокумента = РасчетСуммаДокумента;
	КонецЕсли;
	
	СтруктураКурса = РаботаСКурсамиВалютУТ.СтруктураКурсаВалюты(Курс,Кратность);
	
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект, , СтруктураКурса);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураКурса);
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	
	Если Не ЗначениеЗаполнено(ПередачаПодДеятельность) Тогда
		ПередачаПодДеятельность = Справочники.Организации.ЗакупкаПодДеятельность(ОрганизацияПолучатель, Склад, Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов)
		И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
		ВалютаВзаиморасчетов = Валюта;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьАналитикиУчетаНоменклатуры();
		ЗаполнитьВидыЗапасов(Отказ);
		
		Если СуммаДокумента > 0 Тогда
			Если НЕ РасчетыЧерезОтдельногоКонтрагента И НЕ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				РасчетыПоНакладнойКлиент    = Истина;
				РасчетыПоНакладнойПоставщик = Истина;
			ИначеЕсли РасчетыЧерезОтдельногоКонтрагента Тогда
				Если НЕ ЗначениеЗаполнено(ДоговорПродажи)
					ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорПродажи,"ПорядокРасчетов") = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					РасчетыПоНакладнойКлиент    = Истина;
				Иначе
					РасчетыПоНакладнойКлиент    = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДоговорПокупки)
					ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорПокупки,"ПорядокРасчетов") = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					РасчетыПоНакладнойПоставщик    = Истина;
				Иначе
					РасчетыПоНакладнойПоставщик    = Ложь;
				КонецЕсли;
			Иначе
				РасчетыПоНакладнойКлиент    = Ложь;
				РасчетыПоНакладнойПоставщик = Ложь;
			КонецЕсли;
		Иначе
			РасчетыПоНакладнойКлиент    = Ложь;
			РасчетыПоНакладнойПоставщик = Ложь;
		КонецЕсли;
		
		Если РасчетыПоНакладнойКлиент Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежаСКлиентом);
		Иначе
			Если РасшифровкаПлатежаСКлиентом.Количество() <> 0 Тогда
				РасшифровкаПлатежаСКлиентом.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетыПоНакладнойПоставщик Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммыРасшифровкиНакладной(СуммаДокумента, СуммаВзаиморасчетов, РасшифровкаПлатежаСПоставщиком);
		Иначе
			Если РасшифровкаПлатежаСПоставщиком.Количество() <> 0 Тогда
				РасшифровкаПлатежаСПоставщиком.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактурыПередЗаписьюОснования(ЭтотОбъект);
	
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, ОрганизацияПолучатель);
	
	Если РасчетыЧерезОтдельногоКонтрагента Тогда
		Если Не ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			ДатаВходящегоДокумента = НачалоДня(Дата);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
			ДатаВходящегоДокумента = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
			НомерВходящегоДокумента = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПередачаТоваровМеждуОрганизациями.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	// Очистим номера ГТД, если они не указываются.
	Если Не УказыватьНомераГТД Тогда
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
				СтрокаТаблицы.НомерГТД = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗаполняемыйВариантОформленияПродажи") Тогда
		ВариантОформленияПродажи = ЭтотОбъект.ДополнительныеСвойства.ЗаполняемыйВариантОформленияПродажи;
	КонецЕсли; 
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ПередачаТоваровМеждуОрганизациями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьУслугиКОформлениюОтчетовПринципалу(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияКонтрагентДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПараметрыЗаполненения = ПараметрыЗаполненияВидовЗапасов("ОрганизацияПолучатель");
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение, ПараметрыЗаполненения);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполненения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Истина, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();
	
	ПараметрыЗаполненения = ПараметрыЗаполненияВидовЗапасов("ОрганизацияПолучатель");
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения, ПараметрыЗаполненения);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнененияРезервовПоОтправителю = ПараметрыЗаполненияВидовЗапасов("Организация");
	ПараметрыЗаполнененияРезервовПоОтправителю.ДоступныеВидыЗапасовУжеСформированы = ПараметрыЗаполненения.ДоступныеВидыЗапасовУжеСформированы;
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнененияРезервовПоОтправителю);
	
	ПараметрыЗаполнененияРезервовПоПолучателю = ПараметрыЗаполненияВидовЗапасов("ОрганизацияПолучатель");
	ПараметрыЗаполнененияРезервовПоПолучателю.ДоступныеВидыЗапасовУжеСформированы = ПараметрыЗаполнененияРезервовПоОтправителю.ДоступныеВидыЗапасовУжеСформированы;
	ПараметрыЗаполнененияРезервовПоПолучателю.НалогообложениеНДС = ПередачаПодДеятельность;
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнененияРезервовПоПолучателю);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Ложь, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСчетФактураПолученный =
		((ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
			И РасчетыЧерезОтдельногоКонтрагента);
	
	ТребуетсяСчетФактураНалоговыйАгент = 
		(НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя);
	
	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен, ТребуетсяСчетФактураПолученный, ТребуетсяСчетФактураНалоговыйАгент);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ОбщегоНазначенияУТПовтИсп.ДополнительныйПрефиксНумератораДокументыРеализацииТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Менеджер = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= ОрганизацияПолучатель;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизацииПолучателя;

	БанковскийСчетОрганизацииПолучателя = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь(), Подразделение);
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, Новый Структура("ИспользоватьПриПередачеМеждуОрганизациями", Истина));
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			Реквизиты = Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВидЦены);
			Валюта = Реквизиты.ВалютаЦены;
			ЦенаВключаетНДС = Реквизиты.ЦенаВключаетНДС;
		Иначе
			
			Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
				Валюта    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = Валюта;
	КонецЕсли;
	
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, НалогообложениеНДС);
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты, ХозяйственнаяОперация);
	ГруппаФинансовогоУчетаПолучателя = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты, ХозяйственнаяОперация, Истина);
	
	ВариантОформленияПродажи = ВариантОформленияПродажиПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(ДатаПлатежа) Тогда
		ДатаПлатежа = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Отпустил = СтруктураОтветственного.Ответственный;
		ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	РаботаСКурсамиВалютУТ.ЗаполнитьКурсКратностьПоУмолчанию(Курс, Кратность, Валюта, ВалютаВзаиморасчетов);
	
	ВалютаОплаты  = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты,?(ЗначениеЗаполнено(БанковскийСчетОрганизации),БанковскийСчетОрганизации,БанковскийСчетОрганизацииПолучателя));
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаВзаиморасчетов,НалогообложениеНДС,ВалютаОплаты);

КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти()
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
		Организация,
		Неопределено, // Склад
		Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПередачаПодДеятельность) Тогда
		ПередачаПодДеятельность = Справочники.Организации.НалогообложениеНДС(
			ОрганизацияПолучатель,
			Неопределено, // Склад
			Дата);
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  НалогообложениеНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, КэшированныеЗначения);

	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены, Новый Структура("ИспользоватьПриПередачеМеждуОрганизациями", Истина));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		Реквизиты = Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВидЦены);
		Если Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
			Валюта = Реквизиты.ВалютаЦены;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = Реквизиты.ВалютаЦены;
		КонецЕсли;
		ЦенаВключаетНДС = Реквизиты.ЦенаВключаетНДС;
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("Дата", Дата);
		ПараметрыЗаполнения.Вставить("Валюта", Валюта);
		ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦены);
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		
		ПродажиСервер.ЗаполнитьЦены(Товары, , ПараметрыЗаполнения, СтруктураДействий);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоПеремещениюТоваров(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.СкладПолучатель КАК Склад,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Организация = ДанныеЗаполнения.Организация;
		
	КонецЕсли;
	
	// Заполним данные табличной части "Товары" документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоОстаткамТоваровКПередаче(ЭтоПередача21) Экспорт
	
	Запрос = Новый Запрос();
	Если ЭтоПередача21 Тогда
		Запрос.Текст = ТекстЗапросаОстаткиТоваровКПередаче();
	Иначе
		Запрос.Текст = ТекстЗапросаОстаткиРезервовКОформлению();
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПередачаПодДеятельность", ПередачаПодДеятельность);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(Договор));
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
		ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
	Иначе
		ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	ДатаНачала = ?(ЗначениеЗаполнено(НачалоПериода), НачалоДня(НачалоПериода), '00010101');
	ДатаОкончания = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), ТекущаяДатаСеанса());
	
	Если ДатаНачала > ДатаОкончания Тогда
		ВызватьИсключение НСтр("ru = 'Дата начала периода не может быть больше даты окончания периода'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);

	Товары.Очистить();
	ТаблицаТовары = Товары.Выгрузить();
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрокаТоваров = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
		НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.Количество;
		НоваяСтрокаТоваров.ПоТоварамКОформлению = ЭтоПередача21;
		
		Если ЗначениеЗаполнено(Выборка.НомерГТД) Тогда
			УказыватьНомераГТД = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТовары.Свернуть(
		"Номенклатура, Характеристика, Назначение, Серия, НомерГТД, СтавкаНДС, ПоТоварамКОформлению, ВидЗапасов",
		"Количество, КоличествоУпаковок");
	Товары.Загрузить(ТаблицаТовары);
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
				
КонецПроцедуры

Процедура ЗаполнитьКПередачеПоДатеОформления(ЭтоПередача21) Экспорт
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Потребления.ДатаОформления,
	|	Потребления.Отправитель,
	|	Потребления.Получатель,
	|	Потребления.АналитикаУчетаНоменклатуры, 
	|	Потребления.Склад,
	|	Потребления.Период,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.ТипЗапасов,
	|	Потребления.НалогообложениеНДС,
	|	Потребления.НомерГТД,
	|	Потребления.Потреблено
	|ПОМЕСТИТЬ Потребления
	|ИЗ &ТоварыКПередаче КАК Потребления
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Потребления.АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Назначение,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.НомерГТД,
	|	СУММА(Потребления.Потреблено) КАК Количество
	|ИЗ
	|	Потребления КАК Потребления
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Потребления.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|СГРУППИРОВАТЬ ПО
	|	Потребления.АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Назначение,
	|	Потребления.ВидЗапасов,
	|	Потребления.ВидЗапасовПолучателя,
	|	Потребления.НомерГТД
	|");
	
	Если ЭтоПередача21 Тогда
		Отборы = РегистрыНакопления.ТоварыОрганизацийКПередаче.ОтборыТоваровКПередаче();
		
		Отборы.НачалоПериода = НачалоДня(НачалоПериода);
		Отборы.КонецПериода = КонецДня(?(ЗначениеЗаполнено(КонецПериода), КонецПериода, '39991231'));
		Отборы.Склад = Склад;
		Отборы.Организация = Организация;
		Отборы.ОрганизацияПолучатель = ОрганизацияПолучатель;
		Отборы.НалогообложениеНДС = ПередачаПодДеятельность;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
			Отборы.ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
		Иначе
			Отборы.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТоварыКПередаче", РегистрыНакопления.ТоварыОрганизацийКПередаче.ТоварыКПередаче(Отборы));
	Иначе
		Отборы = РегистрыНакопления.РезервыТоваровОрганизаций.ОтборыТоваровКПередаче();
		
		Отборы.НачалоПериода = НачалоДня(НачалоПериода);
		Отборы.КонецПериода = КонецДня(?(ЗначениеЗаполнено(КонецПериода), КонецПериода, '39991231'));
		Отборы.Склад = Склад;
		Отборы.Организация = Организация;
		Отборы.ОрганизацияПолучатель = ОрганизацияПолучатель;
		Отборы.НалогообложениеНДС = ПередачаПодДеятельность;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию Тогда
			Отборы.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи);
			Отборы.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.Товар);
		Иначе
			Отборы.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.КомиссионныйТовар);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТоварыКПередаче", РегистрыНакопления.РезервыТоваровОрганизаций.ТоварыКПередаче(Отборы));
	КонецЕсли;
		
	Товары.Очистить();
	ВидыЗапасов.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗапасов = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасов, Выборка);
		СтрокаЗапасов.КоличествоУпаковок = СтрокаЗапасов.Количество;
		
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, Выборка);
		СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество;
		СтрокаТоваров.ПоТоварамКОформлению = ЭтоПередача21;
		
	КонецЦикла;
	
	Товары.Свернуть(
		"АналитикаУчетаНоменклатуры, Номенклатура, Характеристика, Серия, Назначение, СтавкаНДС, ПоТоварамКОформлению",
		"Количество, КоличествоУпаковок");
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
КонецПроцедуры

Процедура ЗаполнитьПоОтрицательнымОстаткамТоваровОрганизаций(КонецПериода)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиНаДатуАктуальности
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(,
	|		Организация = &ОрганизацияОтправитель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток > 0
	|	И Аналитика.Склад = &Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	НомерГТД
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	Аналитика.Назначение КАК Назначение,
	|	СУММА(ВЫБОР КОГДА ТоварыОрганизаций.КоличествоОстаток < ОстаткиНаДатуАктуальности.КоличествоОстаток ТОГДА
	|		ТоварыОрганизаций.КоличествоОстаток
	|	ИНАЧЕ
	|		ОстаткиНаДатуАктуальности.КоличествоОстаток
	|	КОНЕЦ) КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиОтправителя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница,
	|		Организация = &ОрганизацияОтправитель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиНаДатуАктуальности КАК ОстаткиНаДатуАктуальности
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ОстаткиНаДатуАктуальности.АналитикаУчетаНоменклатуры
	|		И ТоварыОрганизаций.НомерГТД = ОстаткиНаДатуАктуальности.НомерГТД
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток > 0
	|	И Аналитика.Склад = &Склад
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	Аналитика.Назначение КАК Назначение,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ОстаткиПолучателя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница,
	|		Организация = &ОрганизацияПолучатель
	|	) КАК ТоварыОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток < 0
	|	И Аналитика.Склад = &Склад
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.Серия КАК Серия,
	|	ТоварыОрганизаций.Назначение КАК Назначение,
	|
	|	ВЫБОР КОГДА (-ТоварыОрганизаций.КоличествоОстаток) < ОстаткиОтправителя.КоличествоОстаток ТОГДА
	|		-ТоварыОрганизаций.КоличествоОстаток
	|	ИНАЧЕ
	|		ОстаткиОтправителя.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ОстаткиПолучателя КАК ТоварыОрганизаций
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиОтправителя КАК ОстаткиОтправителя
	|	ПО
	|		ТоварыОрганизаций.Номенклатура = ОстаткиОтправителя.Номенклатура
	|		И ТоварыОрганизаций.Характеристика = ОстаткиОтправителя.Характеристика
	|		И ТоварыОрганизаций.Серия = ОстаткиОтправителя.Серия
	|		И ТоварыОрганизаций.Назначение = ОстаткиОтправителя.Назначение
	|");
	Запрос.УстановитьПараметр("ОрганизацияОтправитель", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ДатаЗаполнения = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), ТекущаяДатаСеанса());
	Граница = Новый Граница(ДатаЗаполнения, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	
	Товары.Очистить();
	ТаблицаТовары = Товары.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаТоваров = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
		НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.Количество;
		
	КонецЦикла;
	
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Серия, Назначение, СтавкаНДС", "Количество, КоличествоУпаковок");
	Товары.Загрузить(ТаблицаТовары);
	
	ЗаполнитьРеквизитыПоУмолчаниюВТабличнойЧасти();
				
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента(ПоТоварамКОформлению = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Организация КАК Партнер,
	|	&Организация КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	&Валюта КАК Валюта,
	|	&ПередачаПодДеятельность КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЛОЖЬ КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	&Организация КАК Партнер,
	|	&Организация КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	&Валюта КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЛОЖЬ КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокументаОтправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов,
	|	ВЫБОР
	|		КОГДА &УказыватьНомераГТД
	|			ТОГДА ТаблицаТоваров.НомерГТД
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	КОНЕЦ КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	Аналитика.Назначение КАК Назначение,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаВидыЗапасов.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ТаблицаВидыЗапасов.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидЗапасов
	|		ПО ТаблицаВидыЗапасов.ВидЗапасов = СпрВидЗапасов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК СпрВидЗапасовПолучателя
	|		ПО ТаблицаВидыЗапасов.ВидЗапасовПолучателя = СпрВидЗапасовПолучателя.Ссылка
	|ГДЕ
	|	СпрВидЗапасов.Организация = &Организация
	|	И (ЕСТЬNULL(СпрВидЗапасовПолучателя.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &ОрганизацияПолучатель
	|			ИЛИ ТаблицаВидыЗапасов.ВидЗапасовПолучателя = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ТекущийВидЗапасов,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	РеквизитыВидаЗапасов.Организация КАК Организация,
	|	РеквизитыВидаЗапасов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ РеквизитыВидаЗапасов.ТипЗапасов
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеквизитыВидаЗапасов.ВладелецТовара КАК ВладелецТовара,
	|	РеквизитыВидаЗапасов.Соглашение КАК Соглашение,
	|	РеквизитыВидаЗапасов.Контрагент КАК Контрагент,
	|	РеквизитыВидаЗапасов.Договор КАК Договор,
	|	РеквизитыВидаЗапасов.Валюта КАК Валюта,
	|	РеквизитыВидаЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РеквизитыВидаЗапасов.НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка) КАК ВидЦены
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			&ОрганизацияПолучатель КАК Организация,
	|			&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|			НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|			ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|			НЕОПРЕДЕЛЕНО КАК Контрагент,
	|			НЕОПРЕДЕЛЕНО КАК Договор,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|			&ПередачаПодДеятельность КАК НалогообложениеНДС,
	|			&НалогообложениеОрганизации КАК НалогообложениеОрганизации
	|		ГДЕ
	|			&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			И НЕ &ПоТоварамКОформлению
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			&ОрганизацияПолучатель,
	|			&ХозяйственнаяОперация,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар),
	|			&Организация,
	|			ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка),
	|			&Организация,
	|			&Договор,
	|			&ВалютаВзаиморасчетов,
	|			&НалогообложениеНДС,
	|			&НалогообложениеОрганизации
	|		ГДЕ
	|			&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			И НЕ &ПоТоварамКОформлению) КАК РеквизитыВидаЗапасов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|				И НЕ &ПоТоварамКОформлению
	|			ИЛИ &ПерезаполнитьВидыЗапасов)";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ПередачаПодДеятельность", ПередачаПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("УказыватьНомераГТД", УказыватьНомераГТД);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПоТоварамКОформлению", ПоТоварамКОформлению);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению)));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению)));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	Запрос.УстановитьПараметр("Проведен", Проведен);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект, Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|");
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Партнер);
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);

КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов(ПоТоварамКОформлению)
	
	ТаблицаТовары = Товары.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению));
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, Упаковка, ВидЗапасов, ПоТоварамКОформлению", "Количество, КоличествоУпаковок, СуммаВзаиморасчетов, СуммаНДСВзаиморасчетов");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры, ПоТоварамКОформлению");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваровВСтроке		= СтрокаТоваров.Количество;
		КоличествоУпаковокВСтроке		= СтрокаТоваров.КоличествоУпаковок;
		СуммаВзаиморасчетовВСтроке		= СтрокаТоваров.СуммаВзаиморасчетов;
		СуммаНДСВзаиморасчетовВСтроке	= СтрокаТоваров.СуммаНДСВзаиморасчетов;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваровВСтроке, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			Если Не ПоТоварамКОформлению Тогда
				НоваяСтрока.ВидЗапасовПолучателя = СтрокаТоваров.ВидЗапасов;
			КонецЕсли;
			
			НоваяСтрока.Упаковка				= СтрокаТоваров.Упаковка;
			НоваяСтрока.КоличествоУпаковок		= ?(КоличествоТоваровВСтроке <> 0, КоличествоУпаковокВСтроке * Количество / КоличествоТоваровВСтроке, 0);
			НоваяСтрока.Количество				= Количество;
			НоваяСтрока.СуммаСНДС				= ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаСНДС			/ СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС				= ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаНДС			/ СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаВзаиморасчетов		= ?(КоличествоТоваровВСтроке <> 0, Количество * СуммаВзаиморасчетовВСтроке		/ КоличествоТоваровВСтроке, 0);
			НоваяСтрока.СуммаНДСВзаиморасчетов	= ?(КоличествоТоваровВСтроке <> 0, Количество * СуммаНДСВзаиморасчетовВСтроке	/ КоличествоТоваровВСтроке, 0);
			
			СтрокаЗапасов.Количество			= СтрокаЗапасов.Количество	- НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС				= СтрокаЗапасов.СуммаСНДС	- НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС				= СтрокаЗапасов.СуммаНДС	- НоваяСтрока.СуммаНДС;
			
			КоличествоТоваровВСтроке			= КоличествоТоваровВСтроке		- НоваяСтрока.Количество;
			КоличествоУпаковокВСтроке			= КоличествоУпаковокВСтроке		- НоваяСтрока.КоличествоУпаковок;
			СуммаВзаиморасчетовВСтроке			= СуммаВзаиморасчетовВСтроке	- НоваяСтрока.СуммаВзаиморасчетов;
			СуммаНДСВзаиморасчетовВСтроке		= СуммаНДСВзаиморасчетовВСтроке	- НоваяСтрока.СуммаНДСВзаиморасчетов;
			
			Если КоличествоТоваровВСтроке = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокиПоТоварамКОформлению = Товары.НайтиСтроки(Новый Структура("ПоТоварамКОформлению", Истина));
	
	ЕстьПоТоварамКОформлению = СтрокиПоТоварамКОформлению.Количество() > 0;
	ЕстьПоРезервам           = СтрокиПоТоварамКОформлению.Количество() <> Товары.Количество();
	ВидыЗапасовПерезаполнены = Ложь;
	
	Если ЕстьПоРезервам Тогда
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента(Ложь);
		ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, Товары);
		
		ПереформироватьТаблицуДанныхДокументаПоОтправителю(МенеджерВременныхТаблиц);
		
		Если Не Проведен
		 ИЛИ ПерезаполнитьВидыЗапасов
		 ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		 ИЛИ ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		 
		 	ВидыЗапасовПерезаполнены = Истина;
			
			Если ЕстьПоТоварамКОформлению Тогда
				ВидыЗапасовПоКОформлению = ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", Истина));
				ВидыЗапасов.Очистить();
			КонецЕсли;
			
			ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов("Организация");
				
			ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
			ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС,ПоТоварамКОформлению", "Количество, СуммаСНДС, СуммаНДС");
			ЗаполнитьДопКолонкиВидовЗапасов(Ложь);
			
			Если ЕстьПоТоварамКОформлению Тогда
				ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВидыЗапасов, ВидыЗапасовПоКОформлению);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЕстьПоТоварамКОформлению Тогда
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента(Истина);
		ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
		
		ПереформироватьТаблицуДанныхДокументаПоОтправителю(МенеджерВременныхТаблиц);
		
		Если Не Проведен
			ИЛИ ПерезаполнитьВидыЗапасов
			ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
			ИЛИ ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
			
			ВидыЗапасовПерезаполнены = Истина;
			
			ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
			ПараметрыЗаполнения.ДоступныеВидыЗапасовУжеСформированы = Истина;
			ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию = Ложь;
			ПараметрыЗаполнения.ИмяТаблицыОстатков = "ТоварыОрганизацийКПередаче";
			
			ВтДоступныеВидыЗапасовПоТоварамКПередаче(МенеджерВременныхТаблиц);
			
			Если ЕстьПоРезервам Тогда
				ВидыЗапасовНеПоКОформлению = ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", Ложь));
				ВидыЗапасов.Очистить();
			КонецЕсли;
			
			ЗапасыСервер.ЗаполнитьВидыЗапасовПоОстаткамКОформлению(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
			
			Для Каждого СтрТабл из ВидыЗапасов Цикл
				СтрТабл.ПоТоварамКОформлению = Истина;
			КонецЦикла;
			
			ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС,ПоТоварамКОформлению", "Количество, СуммаСНДС, СуммаНДС");
			ЗаполнитьДопКолонкиВидовЗапасов(Истина);
			
			Если ЕстьПоРезервам Тогда
				ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВидыЗапасов, ВидыЗапасовНеПоКОформлению);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВидыЗапасовПерезаполнены
		И ВидыЗапасов.Найти(Справочники.ВидыЗапасов.ПустаяСсылка(), "ВидЗапасовПолучателя") <> Неопределено Тогда
		
		ТекстИсключения = "ru = 'Не заполнены дополнительные колонки в табличной части ""Виды запасов"".'";
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ПодакцизныйТовар
		|	И &ПередачаПодДеятельностьОблагаемуюЕНВД
		|
		|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,НомерСтроки"));
	Запрос.УстановитьПараметр("ПередачаПодДеятельностьОблагаемуюЕНВД", (ПередачаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
	
		Выборка = РезультатЗапроса[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = НСтр("ru='При передаче под деятельность, облагаемую ЕНВД, запрещено выбирать подакцизный товар в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьБанковскиеСчета(Отказ)
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации)
	   И ЗначениеЗаполнено(БанковскийСчетОрганизацииПолучателя)
	Тогда
		
		ВалютаОтправителя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизации).Валюта;
		ВалютаПолучателя = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизацииПолучателя).Валюта;
		Если ВалютаОтправителя <> ВалютаПолучателя Тогда
			Текст = НСтр("ru = 'Валюта счета получателя не соответствует валюте счета отправителя'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчетОрганизацииПолучателя",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации)
	   И ЗначениеЗаполнено(БанковскийСчетКонтрагента)
	Тогда
		
		ВалютаОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчетОрганизации).Валюта;
		ВалютаКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).Валюта;
		Если ВалютаОрганизации <> ВалютаКонтрагента Тогда
			Текст = НСтр("ru = 'Валюта банковского счета контрагента не соответствует валюте счета отправителя'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчетКонтрагента",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУслуги(Отказ)
	
	ЭтоКомиссия = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.СтатьяРасходов,
	|	ТоварыОбъекта.СписатьНаРасходы,
	|	ТоварыОбъекта.Подразделение
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	(СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) И &ЭтоКомиссия)
	|	ИЛИ (СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) И &ЭтоКомиссия)
	|	ИЛИ (Товары.СписатьНаРасходы И Товары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) И &ИспользоватьУчетПрочихДоходовРасходов И Не &ЭтоКомиссия)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|		И Товары.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) И Не &ЭтоКомиссия
	|;
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"Номенклатура, НомерСтроки, СтатьяРасходов, СписатьНаРасходы, Подразделение"));
	Запрос.УстановитьПараметр("ЭтоКомиссия", ЭтоКомиссия);
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОшибокСтатей = Результат[1].Выбрать();
	
	Пока ВыборкаОшибокСтатей.Следующий() Цикл
		Если ЭтоКомиссия Тогда
			ТекстОшибки = НСтр("ru='В документе вида ""%Хозоперация%"" нельзя указывать услуги и работы. Необходимо удалить номенклатуру ""%Номенклатура%"" из строки %НомерСтроки% списка ""Товары"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Хозоперация%", Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
			ИмяПоля = "Номенклатура";
		Иначе
			ТекстОшибки = НСтр("ru='Необходимо заполнить статью расходов для позиции ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""'");
			ИмяПоля = "СтатьяРасходов";
		КонецЕсли;	
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаОшибокСтатей.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  ВыборкаОшибокСтатей.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВыборкаОшибокСтатей.НомерСтроки, ИмяПоля), , Отказ);
	КонецЦикла;
	
	ВыборкаОшибокПодразделений = Результат[2].Выбрать();
	
	Пока ВыборкаОшибокПодразделений.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Необходимо заполнить подразделение-получатель для позиции ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""'");
		ИмяПоля = "Подразделение";
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаОшибокСтатей.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  ВыборкаОшибокСтатей.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ВыборкаОшибокПодразделений.НомерСтроки, ИмяПоля), , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСумм(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.Цена,
	|	ТоварыОбъекта.Сумма,
	|	ТоварыОбъекта.СуммаСНДС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|
	|	ВЫБОР КОГДА Товары.Цена = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаЦена,
	|
	|	ВЫБОР КОГДА Товары.Сумма = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСумма,
	|
	|	ВЫБОР КОГДА Товары.СуммаСНДС = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСуммаСНДС
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И (Товары.Цена = 0 ИЛИ Товары.Сумма = 0 ИЛИ Товары.СуммаСНДС = 0)
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Цена, Сумма, СуммаСНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонТекстаОшибки = НСтр("ru='Не заполнена ""%ИмяКолонки%"" в строке %НомерСтроки% списка ""Товары""'");
		ШаблонТекстаОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		Если Выборка.НеЗаполненаЦена Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Цена", НСтр("ru='Цена'"), Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСумма Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Сумма", НСтр("ru='Сумма'"), Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСуммаСНДС Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "СуммаСНДС", НСтр("ru='Сумма с НДС'"), Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, НомерСтроки, ИмяПоля, ЗаголовокПоля, Отказ)
	ТекстОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%ИмяКолонки%", ЗаголовокПоля);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки, ЭтотОбъект,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, ИмяПоля), , Отказ);
КонецПроцедуры

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		
		Если Организация = ОрганизацияПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
			
			Текст = НСтр("ru = 'Организация-получатель не должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ОрганизацияПолучатель",
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры

Функция ТребуетсяСчетФактураВыданный()
	
	Возврат (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	
КонецФункции

Процедура ПроверитьВариантОформленияПродажи(МассивНепроверяемыхРеквизитов)
	
	Если НЕ ЗначениеЗаполнено(ВариантОформленияПродажи) Тогда
		
		ЗаполняемыйВариантОформленияПродажи = ВариантОформленияПродажиПоУмолчанию();
		Если ЗначениеЗаполнено(ЗаполняемыйВариантОформленияПродажи) Тогда
			ЭтотОбъект.ДополнительныеСвойства.Вставить("ЗаполняемыйВариантОформленияПродажи", ЗаполняемыйВариантОформленияПродажи);
			МассивНепроверяемыхРеквизитов.Добавить("ВариантОформленияПродажи");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВариантОформленияПродажиПоУмолчанию()
	
	ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") Тогда
		ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ
		|	ВтТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	Товары.Номенклатура.Ссылка
		|ИЗ
		|	ВтТовары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав)");
		
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура"));
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		ИначеЕсли РезультатЗапроса.Выгрузить().Количество() = Товары.Количество() Тогда
			ЗаполняемыйВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаполняемыйВариантОформленияПродажи;
	
КонецФункции

// Возвращает текст запроса, который используется в методе ЗаполнитьПоОстаткамТоваровКПередаче(),
// если в документе не установлен флаг ПоТоварамКОформлению.
//
// ВозвращаемоеЗначение:
//	Строка - Текст запроса.
Функция ТекстЗапросаОстаткиРезервовКОформлению()
	Возврат "
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.Организация					КАК ОрганизацияПродавец,
	|	ПроданныеТовары.ВидЗапасов					КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	СУММА(ПроданныеТовары.Количество)			КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ПроданныеТовары
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК ПроданныеТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Ссылка = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ПроданныеТовары.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПроданныеТовары.КорОрганизация = &Организация
	|	И ПроданныеТовары.Организация = &ОрганизацияПолучатель
	|	И ПроданныеТовары.ВидЗапасов.ТипЗапасов = &ТипЗапасов
	|	И &Склад В (Аналитика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	И (ПроданныеТовары.НалогообложениеНДС = &ПередачаПодДеятельность
	|		ИЛИ ПроданныеТовары.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	И ПроданныеТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (ПроданныеТовары.ВидЗапасов.Договор = &Договор
	|		ИЛИ НЕ &ОтборПоДоговору)
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.Организация,
	|	ПроданныеТовары.ВидЗапасов,
	|	ПроданныеТовары.НомерГТД
	|ИМЕЮЩИЕ
	|	СУММА(ПроданныеТовары.Количество) > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.Организация					КАК ОрганизацияПродавец,
	|	ПроданныеТовары.ВидЗапасов					КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	СУММА(ПроданныеТовары.Количество)			КАК КоличествоОстаток
	|ПОМЕСТИТЬ ПроданныеТоварыОстатки
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК ПроданныеТовары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|	ПО Аналитика.Ссылка = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ПроданныеТовары.Период >= &НачалоПериода
	|	И ПроданныеТовары.КорОрганизация = &Организация
	|	И ПроданныеТовары.Организация = &ОрганизацияПолучатель
	|	И ПроданныеТовары.ВидЗапасов.ТипЗапасов = &ТипЗапасов
	|	И &Склад В (Аналитика.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|	И (ПроданныеТовары.НалогообложениеНДС = &ПередачаПодДеятельность
	|		ИЛИ ПроданныеТовары.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	И ПроданныеТовары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (ПроданныеТовары.ВидЗапасов.Договор = &Договор
	|		ИЛИ НЕ &ОтборПоДоговору)
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.Организация,
	|	ПроданныеТовары.ВидЗапасов,
	|	ПроданныеТовары.НомерГТД
	|ИМЕЮЩИЕ
	|	СУММА(ПроданныеТовары.Количество) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасовПродавца,
	|	НомерГТД
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	Аналитика.Назначение КАК Назначение,
	|	ПроданныеТовары.ВидЗапасовПродавца КАК ВидЗапасов,
	|	ПроданныеТовары.НомерГТД КАК НомерГТД,
	|	ВЫБОР КОГДА ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) < ПроданныеТовары.КоличествоОстаток ТОГДА
	|		ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0)
	|	ИНАЧЕ
	|		ПроданныеТовары.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ПроданныеТовары КАК ПроданныеТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПроданныеТоварыОстатки КАК ПроданныеТоварыОстатки
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = ПроданныеТоварыОстатки.АналитикаУчетаНоменклатуры
	|		И ПроданныеТовары.ВидЗапасовПродавца = ПроданныеТоварыОстатки.ВидЗапасовПродавца
	|		И ПроданныеТовары.НомерГТД = ПроданныеТоварыОстатки.НомерГТД
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД
	|";
КонецФункции

Функция ТекстЗапросаОстаткиТоваровКПередаче()
	Возврат "
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.ВидЗапасовПродавца			КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	ПроданныеТовары.КоличествоОборот			КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ПроданныеТовары
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, ,
	|		ОрганизацияВладелец = &Организация
	|		И ВидЗапасовПродавца.Организация = &ОрганизацияПолучатель
	|		И ВидЗапасовПродавца.ТипЗапасов = &ТипЗапасов
	|		И &Склад В (АналитикаУчетаНоменклатуры.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|		И (ВидЗапасовПродавца.НалогообложениеНДС = &ПередачаПодДеятельность
	|			ИЛИ ВидЗапасовПродавца.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	) КАК ПроданныеТовары
	|ГДЕ
	|	ПроданныеТовары.КоличествоОборот > 0
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.ВидЗапасовПродавца			КАК ВидЗапасовПродавца,
	|	ПроданныеТовары.НомерГТД					КАК НомерГТД,
	|	ПроданныеТовары.КоличествоОстаток			КАК КоличествоОстаток
	|
	|ПОМЕСТИТЬ ПроданныеТоварыОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(,
	|		ОрганизацияВладелец = &Организация
	|		И ВидЗапасовПродавца.Организация = &ОрганизацияПолучатель
	|		И ВидЗапасовПродавца.ТипЗапасов = &ТипЗапасов
	|		И &Склад В (АналитикаУчетаНоменклатуры.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|		И (ВидЗапасовПродавца.НалогообложениеНДС = &ПередачаПодДеятельность
	|			ИЛИ ВидЗапасовПродавца.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|	) КАК ПроданныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасовПродавца,
	|	НомерГТД
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	Аналитика.Назначение КАК Назначение,
	|	ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца КАК ВидЗапасов,
	|	ПроданныеТовары.ВидЗапасовПродавца КАК ВидЗапасовПолучателя,
	|	ПроданныеТовары.НомерГТД КАК НомерГТД,
	|	ВЫБОР КОГДА ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) < ПроданныеТовары.КоличествоОстаток ТОГДА
	|		ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0)
	|	ИНАЧЕ
	|		ПроданныеТовары.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ПроданныеТовары КАК ПроданныеТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПроданныеТоварыОстатки КАК ПроданныеТоварыОстатки
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = ПроданныеТоварыОстатки.АналитикаУчетаНоменклатуры
	|		И ПроданныеТовары.ВидЗапасовПродавца = ПроданныеТоварыОстатки.ВидЗапасовПродавца
	|		И ПроданныеТовары.НомерГТД = ПроданныеТоварыОстатки.НомерГТД
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ПроданныеТовары.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|ГДЕ
	|	ЕСТЬNULL(ПроданныеТоварыОстатки.КоличествоОстаток, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Назначение,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.ВидЗапасовПродавца.ВидЗапасовВладельца,
	|	ПроданныеТовары.НомерГТД
	|";
КонецФункции

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, Дата, НалогообложениеНДС, Склад, ХозяйственнаяОперация";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТоваров.НомерГТД КАК НомерГТД,
	|		ТаблицаТоваров.Количество КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		ТаблицаТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &УказыватьНомераГТД
	|				ТОГДА ТаблицаВидыЗапасов.НомерГТД
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|		КОНЕЦ КАК НомерГТД,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|		-ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|		-ТаблицаВидыЗапасов.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.СтавкаНДС,
	|	ТаблицаТоваров.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаВзаиморасчетов) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДСВзаиморасчетов) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УказыватьНомераГТД", УказыватьНомераГТД);

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура ПереформироватьТаблицуДанныхДокументаПоОтправителю(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|УНИЧТОЖИТЬ ТаблицаДанныхДокумента
	|;
	|//////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Дата КАК Дата,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Склад КАК Склад,
	|	Таблица.Партнер КАК Партнер,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Соглашение КАК Соглашение,
	|	Таблица.Договор КАК Договор,
	|	Таблица.Валюта КАК Валюта,
	|	Таблица.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Таблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Таблица.ЕстьСделкиВТабличнойЧасти КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ ТаблицаДанныхДокументаОтправителя КАК Таблица
	|;
	|//////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДанныхДокументаОтправителя
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

Функция ПараметрыЗаполненияВидовЗапасов(ИмяПоляОрганизация)
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
	ПараметрыЗаполнения.ИмяПоляОрганизация = ИмяПоляОрганизация;
	Если ИмяПоляОрганизация = "Организация" Тогда
		ПараметрыЗаполнения.НалогообложениеНДС = НалогообложениеНДС;
		ПараметрыЗаполнения.КорВидыЗапасов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Товары.ВыгрузитьКолонку("ВидЗапасов"));
		ПараметрыЗаполнения.ПриПодбореПоИнтеркампаниИсключатьОрганизации = ОрганизацияПолучатель;
		УчетНДСУТ.ПараметрыЗаполненияВидовЗапасовПоНалогообложению(ПараметрыЗаполнения.ОтборыВидовЗапасов, НалогообложениеНДС);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

Процедура ВтДоступныеВидыЗапасовПоТоварамКПередаче(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Отправитель КАК ДляОрганизации,
	|	ВозможныеВидыЗапасов.Ссылка КАК ВидЗапасов
	|ПОМЕСТИТЬ ДоступныеВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВозможныеВидыЗапасов
	|ГДЕ
	|	ВозможныеВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВозможныеВидыЗапасов.Организация = &Получатель
	|	И ВозможныеВидыЗапасов.ВидЗапасовВладельца.Организация = &Отправитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасов";
	
	Запрос.УстановитьПараметр("Получатель", ОрганизацияПолучатель);	
	Запрос.УстановитьПараметр("Отправитель", Организация);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
