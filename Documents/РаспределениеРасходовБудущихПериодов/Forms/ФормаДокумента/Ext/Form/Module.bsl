
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ОтветПередЗаписью;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ВариантУказанияСуммыУпр.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма в валюте управленческого учета (%1)'"),
		ВалютаУправленческогоУчета);
	Элементы.РаспределениеРасходовСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Упр. учет с НДС (%1)'"),
		ВалютаУправленческогоУчета);
	Элементы.РаспределениеРасходовСуммаУпр.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Упр. учет без НДС (%1)'"),
		ВалютаУправленческогоУчета);
		
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	Элементы.ВариантУказанияСуммыРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма в валюте регламентированного учета (%1)'"),
		ВалютаРегламентированногоУчета);
	Элементы.РаспределениеРасходовСуммаРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бухгалтерский учет (%1)'"),
		ВалютаРегламентированногоУчета);
	Элементы.РаспределениеРасходовСуммаНУ.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Налоговый учет (%1)'"),
		ВалютаРегламентированногоУчета);
	Элементы.РаспределениеРасходовПостояннаяРазница.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Постоянная разница (%1)'"),
		ВалютаРегламентированногоУчета);
	Элементы.РаспределениеРасходовВременнаяРазница.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Временная разница (%1)'"),
		ВалютаРегламентированногоУчета);	
	
	СуммаДокументаДоКорректировки = Объект.СуммаДокумента;
	СуммаДокументаРеглДоКорректировки = Объект.СуммаДокументаРегл;
	СуммаДокументаПРДоКорректировки = Объект.СуммаДокументаПР;
	СуммаДокументаВРДоКорректировки = Объект.СуммаДокументаВР;
	Объект.СуммаДокумента = Объект.СуммаДокумента + ?(Параметры.Свойство("Сумма"), Параметры.Сумма, 0);
	Объект.СуммаДокументаРегл = Объект.СуммаДокументаРегл + ?(Параметры.Свойство("СуммаРегл"), Параметры.СуммаРегл, 0);
	Объект.СуммаДокументаПР = Объект.СуммаДокументаПР + ?(Параметры.Свойство("ПостояннаяРазница"), Параметры.ПостояннаяРазница, 0);
	Объект.СуммаДокументаВР = Объект.СуммаДокументаВР + ?(Параметры.Свойство("ВременнаяРазница"), Параметры.ВременнаяРазница, 0);
	Если СуммаДокументаДоКорректировки <> Объект.СуммаДокумента
		   ИЛИ СуммаДокументаРеглДоКорректировки <> Объект.СуммаДокументаРегл
		   ИЛИ СуммаДокументаПРДоКорректировки <> Объект.СуммаДокументаПР
		   ИЛИ СуммаДокументаВРДоКорректировки <> Объект.СуммаДокументаВР Тогда
		Модифицированность = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СуммаДокументаНУ = Объект.СуммаДокументаРегл - Объект.СуммаДокументаПР - Объект.СуммаДокументаВР;
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РаспределениеРасходов);
		СтатьяРасходовПриИзмененииНаСервере();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
	СтрокаШаблона.Дата = НачалоДня(Объект.Дата);
	СтрокаШаблона.Раздел = "РегламентныеОперации";
	Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных) Тогда
		Элементы.Номер.ТолькоПросмотр = Истина;
		Элементы.Дата.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.НаправлениеДеятельности.ТолькоПросмотр = Истина;
		Элементы.СтатьяРасходов.ТолькоПросмотр = Истина;
		Элементы.АналитикаРасходов.ТолькоПросмотр = Истина;
		Элементы.ПравилоРаспределения.ТолькоПросмотр = Истина;
		Элементы.КоличествоМесяцев.ТолькоПросмотр = Истина;
		Элементы.НачалоПериода.ТолькоПросмотр = Истина;
		Элементы.КонецПериода.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		
		Элементы.РаспределениеРасходовЗаполнитьРаспределение.Доступность = Ложь;
		Элементы.РаспределениеРасходовЗаполнитьСтатьиРасходов.Доступность = Ложь;
		Элементы.РаспределениеРасходовЗаполнитьПодразделение.Доступность = Ложь;
	КонецЕсли;
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РаспределениеРасходов);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РаспределениеРасходов);
	СтатьяРасходовПриИзмененииНаСервере();
	ЗаполнитьРеквизитыВТабличнойЧасти();
	СуммаДокументаНУ = Объект.СуммаДокументаРегл - Объект.СуммаДокументаПР - Объект.СуммаДокументаВР;
	ПравилоРаспределения = Объект.ПравилоРаспределения;
	КоличествоМесяцев = Объект.КоличествоМесяцев;
	НачалоПериода = Объект.НачалоПериода;
	КонецПериода = Объект.КонецПериода;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		Объект.СуммаДокументаРегл = ТабличнаяЧасть.Итог("СуммаРегл");
		Объект.СуммаДокументаПР = ТабличнаяЧасть.Итог("ПостояннаяРазница");
		Объект.СуммаДокументаВР = ТабличнаяЧасть.Итог("ВременнаяРазница");
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РаспределениеРасходов);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РаспределениеРасходов);
	ЗаполнитьРеквизитыВТабличнойЧасти();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РаспределениеРасходовБудущихПериодов", ПараметрыЗаписи, Объект.Ссылка);
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	ОтветПередЗаписью = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеЭлементамиФормыНаКлиенте();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	СтатьяРасходовПриИзмененииНаСервере();
	УправлениеЭлементамиФормыНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере()
	
	ИменаРеквизитов = "КонтролироватьЗаполнениеАналитики, АналитикаРасходовЗаказРеализация,
		|ВариантРаспределенияРасходовУпр, ВариантРаспределенияРасходовРегл";
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтатьяРасходов, ИменаРеквизитов);
	
	АналитикаРасходовОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И Реквизиты.КонтролироватьЗаполнениеАналитики;
		
	АналитикаРасходовЗаказРеализация = 
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И Реквизиты.АналитикаРасходовЗаказРеализация;
		
	Если ЗначениеЗаполнено(Реквизиты.ВариантРаспределенияРасходовУпр) Тогда
		ВариантРаспределенияРасходовУпр = Реквизиты.ВариантРаспределенияРасходовУпр;
	Иначе
		ВариантРаспределенияРасходовУпр = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.ВариантРаспределенияРасходовРегл) Тогда
		ВариантРаспределенияРасходовРегл = Реквизиты.ВариантРаспределенияРасходовРегл;
	Иначе
		ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.АналитикаРасходов = ВыбранноеЗначение.АналитикаРасходов;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) И АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантУказанияСуммыУпрПриИзменении(Элемент)
	УправлениеЭлементамиФормыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВариантУказанияСуммыРеглПриИзменении(Элемент)
	УправлениеЭлементамиФормыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияПриИзменении(Элемент)
	ПерезаполнитьТабличнуюЧасть();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевПриИзменении(Элемент)
	ЗаполнитьКонецПериода();
	ПерезаполнитьТабличнуюЧасть();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	Перем ТекстПредупреждения;
	Если ПроверитьЗапретИзмененияДанных(Объект.НачалоПериода, ТекстПредупреждения) Тогда
		Объект.НачалоПериода = Дата(1,1,1);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ЗаполнитьКонецПериода();
		ПерезаполнитьТабличнуюЧасть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Перем ТекстПредупреждения;
	Если ПроверитьЗапретИзмененияДанных(Объект.КонецПериода, ТекстПредупреждения) Тогда
		Объект.КонецПериода = Дата(1,1,1);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ПерезаполнитьТабличнуюЧасть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаРеглПриИзменении(Элемент)
	СуммаДокументаНУ = Объект.СуммаДокументаРегл - Объект.СуммаДокументаПР;
	СуммаДокументаНУПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаНУПриИзменении(Элемент)
	Объект.СуммаДокументаВР = Объект.СуммаДокументаРегл - СуммаДокументаНУ - Объект.СуммаДокументаПР;
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПРПриИзменении(Элемент)
	СуммаДокументаРеглПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеРасходов

&НаКлиенте
Процедура РаспределениеРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		СуммаОстаток = Объект.СуммаДокумента - Объект.РаспределениеРасходов.Итог("Сумма");
		СуммаОстатокУпр = Объект.СуммаДокументаУпр - Объект.РаспределениеРасходов.Итог("СуммаУпр");
		СуммаОстатокРегл = Объект.СуммаДокументаРегл - Объект.РаспределениеРасходов.Итог("СуммаРегл");
		СуммаОстатокНУ = СуммаДокументаНУ - Объект.РаспределениеРасходов.Итог("СуммаНУ");
		СуммаОстатокПР = Объект.СуммаДокументаПР - Объект.РаспределениеРасходов.Итог("ПостояннаяРазница");
		СуммаОстатокВР = Объект.СуммаДокументаВР - Объект.РаспределениеРасходов.Итог("ВременнаяРазница");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СуммаУпр = СуммаОстатокУпр;
		Элемент.ТекущиеДанные.СуммаРегл = СуммаОстатокРегл;
		Элемент.ТекущиеДанные.СуммаНУ = СуммаОстатокНУ;
		Элемент.ТекущиеДанные.ПостояннаяРазница = СуммаОстатокПР;
		Элемент.ТекущиеДанные.ВременнаяРазница = СуммаОстатокВР;
		
		КоличествоСтрок = Объект.РаспределениеРасходов.Количество();
		Если КоличествоСтрок > 1 Тогда
			Дата = ДобавитьМесяц(НачалоМесяца(Объект.РаспределениеРасходов[КоличествоСтрок - 2].Дата), 1);
			Элемент.ТекущиеДанные.Дата = Дата;
		Иначе
			Элемент.ТекущиеДанные.Дата = Объект.НачалоПериода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовСтатьяРасходовПриИзменении(Элемент)
	
	РаспределениеРасходовСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеРасходовСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.РаспределениеРасходов.НайтиПоИдентификатору(Элементы.РаспределениеРасходов.ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РаспределениеРасходов.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РаспределениеРасходов.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовДатаПриИзменении(Элемент)
	Перем ТекстПредупреждения;
	СтрокаТаблицы = Элементы.РаспределениеРасходов.ТекущиеДанные;
	Если ПроверитьЗапретИзмененияДанных(СтрокаТаблицы.Дата, ТекстПредупреждения) Тогда
		СтрокаТаблицы.Дата = Дата(1,1,1);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовСуммаРеглПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.РаспределениеРасходов.ТекущиеДанные;
	СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.СуммаРегл - СтрокаТаблицы.ПостояннаяРазница;
	РаспределениеРасходовСуммаНУПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовСуммаНУПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.РаспределениеРасходов.ТекущиеДанные;
	СтрокаТаблицы.ВременнаяРазница = СтрокаТаблицы.СуммаРегл - СтрокаТаблицы.СуммаНУ - СтрокаТаблицы.ПостояннаяРазница;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасходовПостояннаяРазницаПриИзменении(Элемент)
	РаспределениеРасходовСуммаРеглПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРаспределение(Команда)
	Перем ТекстПредупреждения;
	Если ПроверитьЗапретИзмененияДанных(Объект.НачалоПериода, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПравилоРаспределения", НСтр("ru='Распределить'"));
	СтруктураРеквизитов.Вставить("НачалоПериода", НСтр("ru='Начиная с'"));
	СтруктураРеквизитов.Вставить("КонецПериода", НСтр("ru='По'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьРаспределениеЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Объект.РаспределениеРасходов, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да
	 ИЛИ Результат = Истина Тогда
		РаспределитьРасходы();
		ПравилоРаспределения = Объект.ПравилоРаспределения;
		КоличествоМесяцев = Объект.КоличествоМесяцев;
		НачалоПериода = Объект.НачалоПериода;
		КонецПериода = Объект.КонецПериода;
	Иначе
		Если Объект.ПравилоРаспределения <> ПравилоРаспределения
		 И ЗначениеЗаполнено(ПравилоРаспределения) Тогда
			Объект.ПравилоРаспределения = ПравилоРаспределения;
		КонецЕсли;
		Если Объект.КоличествоМесяцев <> КоличествоМесяцев
		 И ЗначениеЗаполнено(КоличествоМесяцев) Тогда
			Объект.КоличествоМесяцев = КоличествоМесяцев;
		КонецЕсли;
		Если Объект.НачалоПериода <> НачалоПериода
		 И ЗначениеЗаполнено(НачалоПериода) Тогда
			Объект.НачалоПериода = НачалоПериода;
		КонецЕсли;
		Если Объект.КонецПериода <> КонецПериода
		 И ЗначениеЗаполнено(КонецПериода) Тогда
			Объект.КонецПериода = КонецПериода;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходов(Команда)
	
	ЗаполнитьСтатьиРасходовВТабличнойЧасти(Элементы.РаспределениеРасходов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ЗаполнитьПодразделениеВТабличнойЧасти(Элементы.РаспределениеРасходов.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьКонецПериода()
	Если Объект.КоличествоМесяцев > 0 И ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.КонецПериода = ДобавитьМесяц(Объект.НачалоПериода, Объект.КоличествоМесяцев)-1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТабличнуюЧасть()
	Если Объект.РаспределениеРасходов.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена и перезаполнена. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ЗаполнитьРаспределениеЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПравилоРаспределения = Объект.ПравилоРаспределения;
		КоличествоМесяцев = Объект.КоличествоМесяцев;
		НачалоПериода = Объект.НачалоПериода;
		КонецПериода = Объект.КонецПериода;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить("СтатьяРасходов, АналитикаРасходов");
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("РаспределениеРасходов"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, РеквизитыПроверкиАналитик);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовДата.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовСтатьяРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовАналитикаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовДоляСтоимости.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовСумма.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовСуммаУпр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовСуммаНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовПостояннаяРазница.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределениеРасходовВременнаяРазница.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РаспределениеРасходов.ИзменениеЗапрещено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаСервере
Функция РазностьДатВДнях(Знач Дата1, Знач Дата2)
	
	ДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / ДлинаСуток);
	
КонецФункции

&НаСервере
Процедура РаспределитьРасходы()
	
	Объект.РаспределениеРасходов.Очистить();
	
	РаспределениеОтрицательнойСуммы = Объект.СуммаДокумента < 0;
	РаспределениеОтрицательнойСуммыУпр = Объект.СуммаДокументаУпр < 0;
	РаспределениеОтрицательнойСуммыРегл = Объект.СуммаДокументаРегл < 0;
	РаспределениеОтрицательнойСуммыПР = Объект.СуммаДокументаПР < 0;
	РаспределениеОтрицательнойСуммыВР = Объект.СуммаДокументаВР < 0;
	
	СуммаКРаспределению = Объект.СуммаДокумента;
	СуммаКРаспределениюУпр = Объект.СуммаДокументаУпр;
	СуммаКРаспределениюРегл = Объект.СуммаДокументаРегл;
	СуммаКРаспределениюПР = Объект.СуммаДокументаПР;
	СуммаКРаспределениюВР = Объект.СуммаДокументаВР;
	Если Объект.НачалоПериода = НачалоМесяца(Объект.НачалоПериода) Тогда
		Если Объект.ПравилоРаспределения = Перечисления.ПравилаРаспределенияРБП.ПоМесяцам
		 И Объект.КоличествоМесяцев <> 0 Тогда
			ВсегоМесяцев = Объект.КоличествоМесяцев - 1;
		Иначе
			ТекущийМесяц = НачалоМесяца(Объект.НачалоПериода);
			ВсегоМесяцев = 0;
			Пока КонецМесяца(ТекущийМесяц) < КонецМесяца(Объект.КонецПериода) Цикл
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
				ВсегоМесяцев = ВсегоМесяцев + 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Объект.ПравилоРаспределения = Перечисления.ПравилаРаспределенияРБП.ПоМесяцам
		 И Объект.КоличествоМесяцев <> 0 Тогда
			ВсегоМесяцев = Объект.КоличествоМесяцев;
		Иначе
			ТекущийМесяц = НачалоМесяца(Объект.НачалоПериода);
			ВсегоМесяцев = 0;
			Пока КонецМесяца(ТекущийМесяц) < КонецМесяца(Объект.КонецПериода) Цикл
				ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
				ВсегоМесяцев = ВсегоМесяцев + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаСписания = НачалоДня(Объект.НачалоПериода);
	ДатаОкончанияСписания = КонецДня(Объект.КонецПериода);
	
	СтатьяРасходовРаспределение = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьРеквизитыСтатьиРасходов(Объект.СтатьяРасходов).СтатьяРасходов;
	
	ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / День(КонецМесяца(ДатаОкончанияСписания));
	
	Для Счетчик = 0 По ВсегоМесяцев Цикл
		
		Если Счетчик <> 0 Тогда
			ДатаНачалаСписания = НачалоМесяца(ДобавитьМесяц(ДатаНачалаСписания, 1));
		КонецЕсли;
		
		Если Объект.ПравилоРаспределения = Перечисления.ПравилаРаспределенияРБП.ПоКалендарнымДням Тогда
			КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
			ЦенаДня = СуммаКРаспределению / КоличествоДней;
			ЦенаДняУпр = СуммаКРаспределениюУпр / КоличествоДней;
			ЦенаДняРегл = СуммаКРаспределениюРегл / КоличествоДней;
			ЦенаДняПР = СуммаКРаспределениюПР / КоличествоДней;
			ЦенаДняВР = СуммаКРаспределениюВР / КоличествоДней;
			Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
				КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания);
				КоличествоДней = КоличествоДнейТекущегоМесяца;
				СуммаСписания = СуммаКРаспределению;
				СуммаСписанияУпр = СуммаКРаспределениюУпр;
				СуммаСписанияРегл = СуммаКРаспределениюРегл;
				СуммаСписанияПР = СуммаКРаспределениюПР;
				СуммаСписанияВР = СуммаКРаспределениюВР;
			Иначе	
				КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1;
				СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
				СуммаСписанияУпр = ЦенаДняУпр * КоличествоДнейТекущегоМесяца;
				СуммаСписанияРегл = ЦенаДняРегл * КоличествоДнейТекущегоМесяца;
				СуммаСписанияПР = ЦенаДняПР * КоличествоДнейТекущегоМесяца;
				СуммаСписанияВР = ЦенаДняВР * КоличествоДнейТекущегоМесяца;
			КонецЕсли;
			ДоляТекущегоМесяца = КоличествоДнейТекущегоМесяца;
			
		Иначе
			Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
				ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
				КоличествоМесяцевРасчета  = ДоляПоследнегоМесяца;
			Иначе
				ДоляТекущегоМесяца = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1) / День(КонецМесяца(ДатаНачалаСписания));
				КоличествоМесяцевСередины = 0;
				ТекущаяДата = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
				Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата Цикл
					КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
					ТекущаяДата = ДобавитьМесяц(ТекущаяДата, 1);
				КонецЦикла;
				КоличествоМесяцевРасчета = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
			КонецЕсли;
			СуммаСписания = ?(КоличествоМесяцевРасчета = 0, 0, Окр(СуммаКРаспределению * ДоляТекущегоМесяца / КоличествоМесяцевРасчета, 2, 1));
			СуммаСписанияУпр = ?(КоличествоМесяцевРасчета = 0, 0, Окр(СуммаКРаспределениюУпр * ДоляТекущегоМесяца / КоличествоМесяцевРасчета, 2, 1));
			СуммаСписанияРегл = ?(КоличествоМесяцевРасчета = 0, 0, Окр(СуммаКРаспределениюРегл * ДоляТекущегоМесяца / КоличествоМесяцевРасчета, 2, 1));
			СуммаСписанияПР = ?(КоличествоМесяцевРасчета = 0, 0, Окр(СуммаКРаспределениюПР * ДоляТекущегоМесяца / КоличествоМесяцевРасчета, 2, 1));
			СуммаСписанияВР = ?(КоличествоМесяцевРасчета = 0, 0, Окр(СуммаКРаспределениюВР * ДоляТекущегоМесяца / КоличествоМесяцевРасчета, 2, 1));
		КонецЕсли;
		
		НоваяСтрока = Объект.РаспределениеРасходов.Добавить();
		НоваяСтрока.Дата = ДатаНачалаСписания;
		НоваяСтрока.ДоляСтоимости = ДоляТекущегоМесяца;
		
		Если НЕ РаспределениеОтрицательнойСуммы Тогда
			НоваяСтрока.Сумма = Мин(СуммаСписания, СуммаКРаспределению);
		Иначе
			НоваяСтрока.Сумма = Макс(СуммаСписания, СуммаКРаспределению);
		КонецЕсли;
		Если НЕ РаспределениеОтрицательнойСуммыУпр Тогда
			НоваяСтрока.СуммаУпр = Мин(СуммаСписанияУпр, СуммаКРаспределениюУпр);
		Иначе
			НоваяСтрока.СуммаУпр = Макс(СуммаСписанияУпр, СуммаКРаспределениюУпр);
		КонецЕсли;
		Если НЕ РаспределениеОтрицательнойСуммыРегл Тогда
			НоваяСтрока.СуммаРегл = Мин(СуммаСписанияРегл, СуммаКРаспределениюРегл);
		Иначе
			НоваяСтрока.СуммаРегл = Макс(СуммаСписанияРегл, СуммаКРаспределениюРегл);
		КонецЕсли;
		Если НЕ РаспределениеОтрицательнойСуммыПР Тогда
			НоваяСтрока.ПостояннаяРазница = Мин(СуммаСписанияПР, СуммаКРаспределениюПР);
		Иначе
			НоваяСтрока.ПостояннаяРазница = Макс(СуммаСписанияПР, СуммаКРаспределениюПР);
		КонецЕсли;
		Если НЕ РаспределениеОтрицательнойСуммыВР Тогда
			НоваяСтрока.ВременнаяРазница = Мин(СуммаСписанияВР, СуммаКРаспределениюВР);
		Иначе
			НоваяСтрока.ВременнаяРазница = Макс(СуммаСписанияВР, СуммаКРаспределениюВР);
		КонецЕсли;
		НоваяСтрока.СуммаНУ = НоваяСтрока.СуммаРегл - НоваяСтрока.ПостояннаяРазница - НоваяСтрока.ВременнаяРазница;
		
		НоваяСтрока.Подразделение = Объект.Подразделение;
		Если ЗначениеЗаполнено(СтатьяРасходовРаспределение) Тогда
			НоваяСтрока.СтатьяРасходов = СтатьяРасходовРаспределение;
			НоваяСтрока.АналитикаРасходов = Объект.АналитикаРасходов;
		КонецЕсли;
		
		СуммаКРаспределению = СуммаКРаспределению - НоваяСтрока.Сумма;
		СуммаКРаспределениюУпр = СуммаКРаспределениюУпр - НоваяСтрока.СуммаУпр;
		СуммаКРаспределениюРегл = СуммаКРаспределениюРегл - НоваяСтрока.СуммаРегл;
		СуммаКРаспределениюПР = СуммаКРаспределениюПР - НоваяСтрока.ПостояннаяРазница;
		СуммаКРаспределениюВР = СуммаКРаспределениюВР - НоваяСтрока.ВременнаяРазница;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧасти(ВыделенныеСтроки)
	
	Если Объект.РаспределениеРасходов.Количество() > 0 Тогда
	
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить("НаНаправленияДеятельности");
		МассивВариантов.Добавить("НаПрочиеАктивы");
		МассивВариантов.Добавить("НаРасходыБудущихПериодов");
		МассивВариантов.Добавить("НеРаспределять");

		ОткрытьФорму(
			"ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики",
			Новый Структура("ВариантыРаспределенияРасходов", МассивВариантов),
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение",
				ЭтотОбъект,
				Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиРасходовВТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	Структура = Результат;
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	Если ЗначениеЗаполнено(Структура) Тогда
		Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
			Для Каждого Строка Из ВыделенныеСтроки Цикл
				СтрокаТаблицы = Объект.РаспределениеРасходов.НайтиПоИдентификатору(Строка);
				Если СтрокаТаблицы <> Неопределено Тогда
					СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
					СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
					ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из Объект.РаспределениеРасходов Цикл
				СтрокаТаблицы.СтатьяРасходов = Структура.СтатьяРасходов;
				СтрокаТаблицы.АналитикаРасходов = Структура.АналитикаРасходов;
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормыНаКлиенте()
	
	РаспределитьУпр = (ВариантРаспределенияРасходовУпр
		= ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	Элементы.ГруппаСуммыУпр.Видимость = РаспределитьУпр;
		
	УказатьСуммуУпрВручную =
		(Объект.ВариантУказанияСуммыУпр = ПредопределенноеЗначение("Перечисление.ВариантыУказанияСуммыРБП.УказываетсяВручную"));
	Элементы.СуммаДокумента.Видимость = УказатьСуммуУпрВручную И РаспределитьУпр;
	Элементы.СуммаДокументаУпр.Видимость = УказатьСуммуУпрВручную И РаспределитьУпр;
	Элементы.НадписьРаспределениеСуммыУпр.Видимость = НЕ УказатьСуммуУпрВручную И РаспределитьУпр;
		
	Элементы.РаспределениеРасходовСумма.Видимость = УказатьСуммуУпрВручную И РаспределитьУпр;
	Элементы.РаспределениеРасходовСуммаУпр.Видимость = УказатьСуммуУпрВручную И РаспределитьУпр;
		
	РаспределитьРегл = (ВариантРаспределенияРасходовРегл
		= ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	Элементы.ГруппаСуммыРегл.Видимость = РаспределитьРегл;
	
	УказатьСуммуРеглВручную =
		(Объект.ВариантУказанияСуммыРегл = ПредопределенноеЗначение("Перечисление.ВариантыУказанияСуммыРБП.УказываетсяВручную"));
	Элементы.СуммаДокументаРегл.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.СуммаДокументаНУ.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.СуммаДокументаПР.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.СуммаДокументаВР.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.НадписьРаспределениеСуммыРегл.Видимость = НЕ УказатьСуммуРеглВручную И РаспределитьРегл;
	
	Элементы.РаспределениеРасходовСуммаРегл.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.РаспределениеРасходовСуммаНУ.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.РаспределениеРасходовПостояннаяРазница.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	Элементы.РаспределениеРасходовВременнаяРазница.Видимость = УказатьСуммуРеглВручную И РаспределитьРегл;
	
	Элементы.РаспределениеРасходовДоляСтоимости.Видимость =
		(НЕ УказатьСуммуУпрВручную И РаспределитьУпр)
		ИЛИ (НЕ УказатьСуммуРеглВручную И РаспределитьРегл);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеВТабличнойЧасти(ВыделенныеСтроки)
	
	Если Объект.РаспределениеРасходов.Количество() > 0 Тогда
	
		ОтборПоОрганизации = Новый Структура;
		ОтборПоОрганизации.Вставить("Организация", Объект.Организация);
		ОткрытьФорму(
			"Справочник.СтруктураПредприятия.Форма.ФормаВыбора",
			ОтборПоОрганизации,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("ЗаполнитьПодразделениеВТабличнойЧастиЗавершение",
				ЭтотОбъект,
				Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеВТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	Если ЗначениеЗаполнено(Результат) Тогда
		Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
			Для Каждого Строка Из ВыделенныеСтроки Цикл
				СтрокаТаблицы = Объект.РаспределениеРасходов.НайтиПоИдентификатору(Строка);
				Если СтрокаТаблицы <> Неопределено Тогда
					СтрокаТаблицы.Подразделение = Результат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из Объект.РаспределениеРасходов Цикл
				СтрокаТаблицы.Подразделение = Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыВТабличнойЧасти()
	ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
	СтрокаШаблона.Раздел = "РегламентныеОперации";
	Для Каждого Строка Из Объект.РаспределениеРасходов Цикл
		СтрокаШаблона.Дата = НачалоДня(Строка.Дата);
		Строка.ИзменениеЗапрещено = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных);
		Строка.СуммаНУ = Строка.СуммаРегл - Строка.ПостояннаяРазница - Строка.ВременнаяРазница;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗапретИзмененияДанных(Знач Дата, ТекстПредупреждения)
	ТекстПредупреждения = "";
	
	ШаблонЗапретаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	СтрокаШаблона = ШаблонЗапретаДанных.Добавить();
	СтрокаШаблона.Дата = НачалоДня(Дата);
	СтрокаШаблона.Раздел = "РегламентныеОперации";
	
	Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ШаблонЗапретаДанных) Тогда
		УстановленаДатаЗапрета = Истина;
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На %1 установлена дата запрета редактирования. Укажите другую дату'"),
			Формат(Дата, "ДЛФ=Д"));
	Иначе
		УстановленаДатаЗапрета = Ложь;
	КонецЕсли;
	Возврат УстановленаДатаЗапрета;
КонецФункции

#КонецОбласти
