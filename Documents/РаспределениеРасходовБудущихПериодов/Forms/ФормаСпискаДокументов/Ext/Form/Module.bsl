
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Организация") Тогда
		 Организация = Параметры.Организация;
		 ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление;
		 УстановитьОтборДинамическихСписков();
	КонецЕсли;
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		 ДатаНачала.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		 ДатаНачала.Дата = КонецМесяца(Параметры.ПериодРегистрации);
	КонецЕсли;
	УстановитьПараметрыДинамическихСписков();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.РасходыКРаспределениюГруппаКРаспределениюУпр.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'К распределения в упр. учете (%1)'"),
		ВалютаУправленческогоУчета);
		
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	Элементы.РасходыКРаспределениюГруппаКРаспределениюРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'К распределения в регл. учете (%1)'"),
		ВалютаРегламентированногоУчета);
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);
	
	ИспользоватьУчетПрочихДоходовРасходовРегл = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходовРегл");
	Элементы.РасходыКРаспределениюГруппаКРаспределениюРегл.Видимость = ИспользоватьУчетПрочихДоходовРасходовРегл;
	Элементы.РасходыКРаспределениюСуммаРегл.Видимость = ИспользоватьУчетПрочихДоходовРасходовРегл;
	
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.РасходыКРаспределениюСуммаНУ.Видимость = ИспользоватьРеглУчет;
	Элементы.РасходыКРаспределениюПостояннаяРазница.Видимость = ИспользоватьРеглУчет;
	
	ПоддержкаПБУ18 = Ложь;
	Элементы.РасходыКРаспределениюВременнаяРазница.Видимость = ПоддержкаПБУ18;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РаспределениеРасходовБудущихПериодов" Тогда
		Элементы.РасходыКРаспределению.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("Организация") Тогда
		 Организация = Параметры.Организация;
	Иначе 
		 Организация = Настройки.Получить("Организация");
	КонецЕсли;
	УстановитьОтборДинамическихСписков();
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		 ДатаНачала.Дата = КонецМесяца(Параметры.ПериодРегистрации);
		 ДатаНачала.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
	Иначе 
		Вариант = Настройки.Получить("ДатаНачала.Вариант");
		Если Вариант <> Неопределено Тогда
			ДатаНачала.Вариант = Вариант;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВариантПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДатаПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРаспоряженияНаОформление Тогда
		Элементы.РасходыКРаспределению.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРаспределениеРасходов(Команда)
	
	Строка = Элементы.РасходыКРаспределению.ТекущиеДанные;
		Если Строка <> Неопределено Тогда
		СтруктураОснование = Новый Структура("Дата, Организация, Подразделение",
			ДатаНачала.Дата,
			Строка.Организация,
			Строка.Подразделение);
		СтруктураОснование.Вставить("СтатьяРасходов", Строка.СтатьяРасходов);
		СтруктураОснование.Вставить("АналитикаРасходов", Строка.АналитикаРасходов);
		СтруктураОснование.Вставить("НаправлениеДеятельности", Строка.НаправлениеДеятельности);
		СтруктураОснование.Вставить("СуммаДокумента", Строка.Сумма);
		СтруктураОснование.Вставить("СуммаДокументаУпр", Строка.СуммаУпр);
		СтруктураОснование.Вставить("СуммаДокументаРегл", Строка.СуммаРегл);
		СтруктураОснование.Вставить("СуммаДокументаПР", Строка.ПостояннаяРазница);
		СтруктураОснование.Вставить("СуммаДокументаВР", Строка.ВременнаяРазница);
		
		ПараметрыСтатьи = Новый Структура;
		ПараметрыСтатьи.Вставить("ДатаОкончания", ДатаНачала.Дата);
		ПараметрыСтатьи.Вставить("Организация",
			?(ЗначениеЗаполнено(Строка.Организация),
				Строка.Организация,
				ОрганизацияПоУмолчанию));
		ПараметрыСтатьи.Вставить("Подразделение", Строка.Подразделение);
		ПараметрыСтатьи.Вставить("СтатьяРасходов", Строка.СтатьяРасходов);
		ПараметрыСтатьи.Вставить("АналитикаРасходов", Строка.АналитикаРасходов);
		ПараметрыСтатьи.Вставить("НаправлениеДеятельности", Строка.НаправлениеДеятельности);
		ДокументРаспределения = ДокументРаспределенияСтатьи(ПараметрыСтатьи);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДокументРаспределения", ДокументРаспределения);
		ДополнительныеПараметры.Вставить("Сумма", Строка.Сумма);
		ДополнительныеПараметры.Вставить("СуммаУпр", Строка.СуммаУпр);
		ДополнительныеПараметры.Вставить("СуммаРегл", Строка.СуммаРегл);
		ДополнительныеПараметры.Вставить("ПостояннаяРазница", Строка.ПостояннаяРазница);
		ДополнительныеПараметры.Вставить("ВременнаяРазница", Строка.ВременнаяРазница);
		ДополнительныеПараметры.Вставить("СтруктураОснование", СтруктураОснование);
		Если ДокументРаспределения <> Неопределено Тогда
			ТекстВопроса = НСтр("ru = 'Для данной статьи расходов существует документ распределения в периоде с %1 по %2.'");;
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, 
				Формат(НачалоМесяца(ДатаНачала.Дата), "ДЛФ=Д"),
				Формат(ДатаНачала.Дата, "ДЛФ=Д"));
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Открыть существующий документ'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Создать новый'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьРаспределениеРасходовЗавершение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, СписокКнопок);
		Иначе
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("Основание", СтруктураОснование);
			ОткрытьФорму("Документ.РаспределениеРасходовБудущихПериодов.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	ДатаОкончания = ?(ЗначениеЗаполнено(ДатаНачала.Дата), ДатаНачала.Дата, Дата(2399, 1, 1));
	РасходыКРаспределению.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МассивДинамическихСписков()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(Список);
	МассивСписков.Добавить(РасходыКРаспределению);
	
	Возврат МассивСписков;

КонецФункции

&НаСервереБезКонтекста
Функция ДокументРаспределенияСтатьи(Параметры)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РаспределениеРасходовБудущихПериодов КАК Т
		|ГДЕ
		|	Т.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Т.Организация = &Организация
		|	И Т.Подразделение = &Подразделение
		|	И Т.СтатьяРасходов = &СтатьяРасходов
		|	И Т.АналитикаРасходов = &АналитикаРасходов
		|	И Т.НаправлениеДеятельности = &НаправлениеДеятельности
		|	И Т.Проведен");
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Параметры.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Параметры.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	Запрос.УстановитьПараметр("СтатьяРасходов", Параметры.СтатьяРасходов);
	Запрос.УстановитьПараметр("АналитикаРасходов", Параметры.АналитикаРасходов);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Параметры.НаправлениеДеятельности);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат ?(Результат.Следующий(), Результат.Ссылка, Неопределено);
	
КонецФункции

&НаКлиенте
Процедура СоздатьРаспределениеРасходовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДополнительныеПараметры.ДокументРаспределения);
		ПараметрыФормы.Вставить("Сумма", ДополнительныеПараметры.Сумма);
		ПараметрыФормы.Вставить("СуммаУпр", ДополнительныеПараметры.СуммаУпр);
		ПараметрыФормы.Вставить("СуммаРегл", ДополнительныеПараметры.СуммаРегл);
		ПараметрыФормы.Вставить("ПостояннаяРазница", ДополнительныеПараметры.ПостояннаяРазница);
		ПараметрыФормы.Вставить("ВременнаяРазница", ДополнительныеПараметры.ВременнаяРазница);
		ОткрытьФорму("Документ.РаспределениеРасходовБудущихПериодов.ФормаОбъекта", ПараметрыФормы);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Основание", ДополнительныеПараметры.СтруктураОснование);
		ОткрытьФорму("Документ.РаспределениеРасходовБудущихПериодов.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюСумма.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюСуммаУпр.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасходыКРаспределению.ВариантРаспределенияРасходовУпр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",  НСтр("ru = '<Не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюСуммаНУ.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюПостояннаяРазница.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыКРаспределениюВременнаяРазница.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасходыКРаспределению.ВариантРаспределенияРасходовРегл");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",  НСтр("ru = '<Не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
