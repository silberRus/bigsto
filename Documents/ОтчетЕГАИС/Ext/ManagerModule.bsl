
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ОтчетЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2 Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОтчетаЕГАИС.КПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2 Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеОтчета);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2 Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ПолученОтчет;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ПолученОтчет;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения);
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("СтатусОбработки") Тогда
			СтатусОбработки = ДополнительныеПараметры.СтатусОбработки;
		Иначе
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			СтатусОбработки,
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ОбрабатываетсяЕГАИС;
		СтатусыБазовыйПроцесс.Ошибка         = Перечисления.СтатусыОбработкиОтчетаЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет);
		СтатусыБазовыйПроцесс.КвитанцияПроведенЕГАИС          = Ложь;
		СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			СтатусыБазовыйПроцесс, Истина);
		
	Иначе
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиОтчетаЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидДокумента");
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовЕГАИС.Входящий;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2 Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1 Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2 Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3 Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2 Тогда
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Операция, ДокументСсылка, Ложь, Ложь);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОтчетаЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаЕГАИС.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы() Экспорт
	
	Статусы = Новый Массив;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	КонецЕсли;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	МассивДействий = Новый Массив;
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС") Тогда
		МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеОтчета);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетЕГАИС КАК ОтчетЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ОтчетЕГАИС.Ссылка
	|ГДЕ
	|	ОтчетЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ОтчетЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ОтчетЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ОтчетЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетЕГАИС КАК ОтчетЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ОтчетЕГАИС.Ссылка
	|ГДЕ
	|	ОтчетЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ОтчетЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ОтчетЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ОтчетЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет Тогда
		
		Возврат ЗапросОтчетЕГАИСXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возвращает Истина в случае наличия расхождений между полученными данными и данными ИБ. Ложь - в противном случае.
//
Функция ЕстьРасхожденияВПолученныхДанных(ВидДокумента, ДокументСсылка) Экспорт
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами Тогда
		
		Возврат Отчеты.ДвиженияМеждуРегистрамиЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2 Тогда
		
		Возврат Отчеты.ДвиженияПоСправке2ЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН Тогда
		
		Возврат Отчеты.НеобработанныеТТНЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки Тогда
		
		Возврат Отчеты.ОбработанныеЧекиЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1
		Или ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2 Тогда
		
		Возврат Отчеты.ОстаткиАлкогольнойПродукцииЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации Тогда
		
		Возврат Отчеты.ИнформацияОбОрганизацииЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3 Тогда
		
		Возврат Отчеты.ОстаткиАкцизныхМарокЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2 Тогда
		
		Возврат Отчеты.ИсторияСправок2ЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументСсылка);
		
	Иначе
		
		ВызватьИсключение ИнтеграцияЕГАИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, ВидДокумента);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция ЗапросОтчетЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетЕГАИС КАК Шапка
	|		ПО Шапка.Ссылка       = &Ссылка
	|		 И Шапка.ВидДокумента = ЕГАИСПрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка       = ЕГАИСПрисоединенныеФайлы.Документ
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	
	|	Шапка.ВидДокумента                  КАК Операция,
	|	Шапка.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС,
	|	Шапка.ОрганизацияЕГАИС.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ОрганизацияЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	Шапка.Ответственный                 КАК Ответственный,
	|
	|	// Параметры отчета
	|	Шапка.Период                        КАК Период,
	|	Шапка.АлкогольнаяПродукция.Код      КАК КодАлкогольнойПродукции,
	|	Шапка.Справка2.РегистрационныйНомер КАК НомерСправки2,
	|	ВЫБОР
	|		КОГДА Шапка.КодФСРАР ССЫЛКА Справочник.КлассификаторОрганизацийЕГАИС
	|			ТОГДА Шапка.КодФСРАР.Код
	|		ИНАЧЕ Шапка.КодФСРАР
	|	КОНЕЦ КАК КодФСРАР
	|ИЗ
	|	Документ.ОтчетЕГАИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Шапка.Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Шапка.Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияМеждуРегистрами Тогда
	
	#Область ЗапросОтчетаДвиженияМеждуРегистрами
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "АЛККОД",                      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.КодАлкогольнойПродукции, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "МЕСЯЦ",                       СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Формат(Шапка.Период, "ДФ=MM"), СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "ГОД",                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Формат(Шапка.Период, "ДФ=гггг"), СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаДвиженияПоСправке2 Тогда
	
	#Область ЗапросОтчетаДвиженияПоСправке2
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "RFB",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.НомерСправки2, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИнформацияОбОрганизации Тогда
	
	#Область ЗапросОтчетаИнформацияОбОрганизации
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "СИО",          СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.КодФСРАР, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "ДАТА",       СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.Период, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаНеобработанныеТТН Тогда
	
	#Область ЗапросОтчетаНеобработанныеТТН
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "КОД",                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.ИдентификаторФСРАР, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОбработанныеЧеки Тогда
	
	#Область ЗапросОтчетаОбработанныеЧеки
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "АЛККОД",                      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.КодАлкогольнойПродукции, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "МЕСЯЦ",                                   СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Формат(Шапка.Период, "ДФ=MM"), СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "ГОД",                                       СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Формат(Шапка.Период, "ДФ=гггг"), СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре1 Тогда
	
	#Область ЗапросОтчетаОстаткиВРегистре1
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре2 Тогда
	
	#Область ЗапросОтчетаОстаткиВРегистре2
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3 Тогда
	
	#Область ЗапросОтчетаОстаткиВРегистре3
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Если ЗначениеЗаполнено(Шапка.НомерСправки2) Тогда
		Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "ФОРМА2",            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.НомерСправки2, СообщениеXML);
		Parameters.Parameter.Добавить(Parameter);
	Иначе
		Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "КОД",                         СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.КодАлкогольнойПродукции, СообщениеXML);
		Parameters.Parameter.Добавить(Parameter);
	КонецЕсли;
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаИсторияСправок2 Тогда
	
	#Область ЗапросОтчетаИсторияСправок2
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	
	Parameter  = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  "PF2",               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", Шапка.НомерСправки2, СообщениеXML);
	Parameters.Parameter.Добавить(Parameter);
	
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Шапка.Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли