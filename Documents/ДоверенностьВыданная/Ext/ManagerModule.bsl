#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Доверенность".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДоверенностьВыданная.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ДоверенностьВыданная);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьДоверенностиНаПолучениеТМЦ";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

// Возвращает срок действия последней введенной ответственным в систему доверенности
//
// Возвращаемое значение:
//	Число - срок действия последней доверенности
//
Функция ПолучитьСрокДействияПоследнейДоверенности() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Доверенность.СрокДействия КАК СрокДействия
		|ИЗ
		|	Документ.ДоверенностьВыданная КАК Доверенность
		|ГДЕ
		|	НЕ Доверенность.ПометкаУдаления
		|	И Доверенность.Ответственный = &Ответственный
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СрокДействия;
	КонецЕсли;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ИСТИНА КАК Проведен, // Для документа доверенности свойство <Проведенение> установлено в <Запретить>
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки для доверенности отсутствуют
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ДоверенностиПоЗаказам(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.ДокументОснование В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная) Тогда
		// М-2 (Доверенность)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "М2";
		КомандаПечати.Представление = НСтр("ru = 'Доверенность (М-2)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ДоверенностьМ2");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// М-2а (Доверенность)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "М2";
		КомандаПечати.Представление = НСтр("ru = 'Доверенность (М-2а)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ДоверенностьМ2а");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М2", НСтр("ru = 'Доверенность на получение ТМЦ (М-2)'"), СформироватьПечатнуюФорму(ПараметрыПечати["Тип"], МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
			КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		КонецЕсли;
		Если КомплектПечатныхФорм.Количество()>0 Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КомплектДокументов", НСтр("ru = 'Комплект документов'"), СформироватьПечатнуюФорму(КомплектПечатныхФорм[0].Имя, МассивОбъектов, ОбъектыПечати));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФорму(Тип, МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Доверенность.ФизЛицо КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|		Номенклатура.НаименованиеПолное КАК Номенклатура,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ Доверенность.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияПредставление,
	|		КоличествоУпаковок КАК КоличествоУпаковок
	|	),
	|	Доверенность.МатериальныеЦенности.(
	|		НомерСтроки КАК Номер,
	|		МатериальнаяЦенность КАК МатериальнаяЦенность,
	|		Количество КАК Количество,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.МатериальныеЦенности.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи,
	|	Доверенность.СуммаДокумента КАК СуммаДокумента,
	|	Представление(Доверенность.Валюта) КАК ВалютаПредставление
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Доверенность.Товары.Упаковка",
			"Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Доверенность.Товары.Упаковка",
			"Доверенность.Товары.Номенклатура"));
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ПФ_MXL_М2");
	
	Если Тип = "ДоверенностьМ2" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2";
	ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2а";
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ФамилияИмяОтчествоДоверенного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ФизЛицо, ДанныеПечати.ДатаДокумента);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны");
			
		КодПоОКУД = "";
		Если Тип = "ДоверенностьМ2" тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			
			СтруктураДанныхОтрез = Новый Структура;
			СтруктураДанныхОтрез.Вставить("НомерДокумента", НомерДокументаНаПечать);
			СтруктураДанныхОтрез.Вставить("ФИОДоверенного", ?(ПустаяСтрока(ДанныеПечати.Должность), "", ДанныеПечати.Должность + " ") + ФамилияИмяОтчествоДоверенного);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхОтрез);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2'");
			КодПоОКУД = "0315001";
			
		ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2а'");
			КодПоОКУД = "0315002";
			
		КонецЕсли;
		
		// Заполнить реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("НазваниеФормы", НазваниеФормы);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ДанныеПечати.ДатаДокумента,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("СрокДействия", Формат(ДанныеПечати.СрокДействия,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("ФамилияИмяОтчествоДоверенного", ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ДолжностьДоверенного", ДанныеПечати.Должность);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПотребителя", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПлательщика", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		СтруктураДанныхШапка.Вставить("КодПоОКУД", КодПоОКУД);
		
		СтруктураДанныхШапка.Вставить("РеквизитыСчета", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НомерСчета,Банк,БИК,КоррСчет,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		ВыборкаСтрокМатериальныеЦенности = ДанныеПечати.МатериальныеЦенности.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПоставщика) Тогда
				
				МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПоставщика;
				
			Иначе
				
				МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.Номенклатура,
					ВыборкаСтрокТовары.Характеристика);
				
			КонецЕсли;
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокМатериальныеЦенности.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериальныеЦенности);
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = ВыборкаСтрокМатериальныеЦенности.Номер + КоличествоСтрок;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокМатериальныеЦенности.Количество = 0,
				"",
				Строка(ВыборкаСтрокМатериальныеЦенности.Количество) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокМатериальныеЦенности.Количество) + ")"));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		Если НЕ ДанныеПечати.СуммаДокумента = 0 Тогда
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", НСтр("ru = 'Наличные денежные средства'"));
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ДанныеПечати.СуммаДокумента = 0,
				"",
				Строка(ДанныеПечати.СуммаДокумента) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ДанныеПечати.СуммаДокумента) + ")"));
			СтруктураДанныхСтрокаТаблицы.Вставить("ЕдиницаИзмеренияПредставление", ДанныеПечати.ВалютаПредставление);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Заполнить реквизиты подвала
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураДанныхПодвал.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "М2", НСтр("ru = 'Доверенность на получение ТМЦ (М-2)'"), 1);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	ИспользованиеДоверенностей = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ");
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ДоверенностьВыданная))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная))
		И ИспользованиеДоверенностей;
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРаспоряженийТовары = ИспользованиеДоверенностей
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		
	ДоступностьРаспоряженийДС = ИспользованиеДоверенностей
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	// Документы.
	ЧтениеЗаказПоставщику = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику);
	ЧтениеЗаказКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ЧтениеЗаявкаНаВозвратТоваровОтКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЧтениеАктВыполненныхРабот = ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот)
		И ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот);
	ЧтениеРеализацияУслугПрочихАктивов = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов)
		И ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ЧтениеОтчетКомиссионера = ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетКомиссионера);
	ЧтениеРеализацияТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг)
		И ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг);
		
	
	
	ЧтениеВозвратТоваровПоставщику = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	// Справочники.
	ЧтениеДоговорыКонтрагентов = ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доверенности.Ссылка,
	|	Доверенности.ДокументОснование,
	|	Доверенности.ТипДоверенности,
	|	Доверенности.Статус,
	|	Доверенности.ДатаОкончанияДействия,
	|	Доверенности.Ответственный
	|ПОМЕСТИТЬ ВыданныеДоверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыданныеДоверенности.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДоверенностейНаТовар
	|ИЗ
	|	ВыданныеДоверенности КАК ВыданныеДоверенности
	|ГДЕ
	|	НЕ ВыданныеДоверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыданныеДоверенности.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДоверенностейНаДС
	|ИЗ
	|	ВыданныеДоверенности КАК ВыданныеДоверенности
	|ГДЕ
	|	ВыданныеДоверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС);";
	
	Если ДоступностьРаспоряженийТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаРаспоряженийПоступление.ЗаказПоставщику КАК Ссылка
		|ПОМЕСТИТЬ РаспоряженияПоступление
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказПоставщику) В (&ТипыДокументов)) КАК ТаблицаРаспоряженийПоступление
		|ГДЕ
		|	ТаблицаРаспоряженийПоступление.КОформлениюОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(ТаблицаРаспоряженийПоступление.ЗаказПоставщику) В (&ТипыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ТИПЗНАЧЕНИЯ(ЗаявкаНаВозвратТоваровОтКлиента) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)) КАК ТаблицаРаспоряженийВозврат
		|ГДЕ
		|	&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ТаблицаРаспоряженийВозврат.КОформлениюОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРаспоряженийВозвратН.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаРаспоряженийВозвратН
		|ГДЕ
		|	НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	И ТаблицаРаспоряженийВозвратН.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаспоряженияПоступление.Ссылка) КАК КоличествоПоступление
		|ПОМЕСТИТЬ РаспоряженияНаДоставку
		|ИЗ
		|	РаспоряженияПоступление КАК РаспоряженияПоступление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияДоверенностейНаТовар КАК ОснованияДоверенностейНаТовар
		|		ПО (ОснованияДоверенностейНаТовар.ДокументОснование = РаспоряженияПоступление.Ссылка)
		|ГДЕ
		|	ОснованияДоверенностейНаТовар.ДокументОснование ЕСТЬ NULL;";
		
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
			
		ТипыДокументов = Новый Массив;
		Если ЧтениеЗаказПоставщику Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		КонецЕсли;
		
		
		
		Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	КонецЕсли;
	
	Если ДоступностьРаспоряженийДС Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКлиентами.ЗаказКлиента КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДолга
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказКлиента) В (&ТипыДокументовРасчеты)) КАК РасчетыСКлиентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
		|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентами.ЗаказКлиента) В (&ТипыДокументовРасчеты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ВозвратТоваровПоставщику)) КАК РасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
		|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыДолга.Ссылка) КАК ДокументовКОплате
		|ПОМЕСТИТЬ ДокументыКОплате
		|ИЗ
		|	ДокументыДолга КАК ДокументыДолга
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияДоверенностейНаДС КАК ОснованияДоверенностейНаДС
		|		ПО (ОснованияДоверенностейНаДС.ДокументОснование = ДокументыДолга.Ссылка)
		|ГДЕ
		|	ОснованияДоверенностейНаДС.ДокументОснование ЕСТЬ NULL;";
		
		ТипыДокументов = Новый Массив;
		Если ЧтениеЗаказКлиента Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
		КонецЕсли;
		Если ЧтениеРеализацияТоваровУслуг Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		КонецЕсли;
		Если ЧтениеЗаявкаНаВозвратТоваровОтКлиента Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		КонецЕсли;
		Если ЧтениеАктВыполненныхРабот Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		КонецЕсли;
		Если ЧтениеРеализацияУслугПрочихАктивов Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
		КонецЕсли;
		Если ЧтениеВозвратТоваровПоставщику Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		КонецЕсли;
		Если ЧтениеОтчетКомиссионера Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		КонецЕсли;
		Если ЧтениеДоговорыКонтрагентов Тогда
			ТипыДокументов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("ТипыДокументовРасчеты", ТипыДокументов);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеДС,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия <= &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия < &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиПросроченные
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	ВыданныеДоверенности КАК ДокументДоверенность
	|ГДЕ
	|	ДокументДоверенность.Ответственный = &Пользователь
	|";
	
	Если ДоступностьРаспоряженийТовары Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.КоличествоПоступление,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ РаспоряженияНаДоставку";
	КонецЕсли;
	
	Если ДоступностьРаспоряженийДС Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ДокументыКОплате.ДокументовКОплате,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ ДокументыКОплате";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|//%Д1 	СУММА(ТаблицаПоказателей.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров) КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,
	|//%Д2 	СУММА(ТаблицаПоказателей.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС) КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеДС,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенности) КАК ВыданныеДоверенности,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиИстекающиеНаСегодня) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиПросроченные) КАК ВыданныеДоверенностиПросроченные
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей";
	
	// Уберем служебные коментарии из текста запроса - "разблокируем" строки запроса
	Если ДоступностьРаспоряженийТовары Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Д1", "     ");
	КонецЕсли;
	Если ДоступностьРаспоряженийДС Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Д2", "     ");
	КонецЕсли;
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос);
	
	// Заполнение дел.
	// ДоверенностиНаПолучениеТМЦ
	// РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров
	ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Ложь;
	Если ДоступностьРаспоряженийТовары Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.НеВыдана);
		ПараметрыОтбора.Вставить("Актуальность", "");
		ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
		ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ТребуетсяДоверенность", Истина);
		ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
		ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
		ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
		
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ДоверенностиНаПолучениеТМЦ";
		ДелоРодитель.Представление  = НСтр("ru = 'Доверенности на получение ТМЦ'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров";
		Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров > 0;
		Дело.Представление  = НСтр("ru = 'Основания для оформления (получение товаров)'");
		Дело.Количество     = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Владелец       = "ДоверенностиНаПолучениеТМЦ";
		
		ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Дело.ЕстьДела;
		ДелоРодитель.ЕстьДела = Дело.ЕстьДела;
	КонецЕсли;
	
	// РаспоряженияНаОформлениеДоверенностиНаПолучениеДС
	ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеДС = Ложь;
	Если ДоступностьРаспоряженийДС Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.НеВыдана);
		ПараметрыОтбора.Вставить("Актуальность", "");
		ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
		ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ТребуетсяДоверенность", Истина);
		ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
		ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
		ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформлениеДС");
		
		// ДоверенностиНаПолучениеТМЦ
		ДелоРодительПродажи = ТекущиеДела.Добавить();
		ДелоРодительПродажи.Идентификатор  = "ДоверенностиНаПолучениеДС";
		ДелоРодительПродажи.Представление  = НСтр("ru = 'Доверенности на получение наличных ДС'");
		ДелоРодительПродажи.Владелец       = Метаданные.Подсистемы.Продажи;
	
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "РаспоряженияНаОформлениеДоверенностиНаПолучениеДС";
		Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС > 0;
		Дело.Представление  = НСтр("ru = 'Основания для оформления (получение наличных ДС)'");
		Дело.Количество     = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Владелец       = "ДоверенностиНаПолучениеДС";
		
		ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеДС = Дело.ЕстьДела;
		ДелоРодительПродажи.ЕстьДела = Дело.ЕстьДела;
	КонецЕсли;
	
	ДелоРодительФинансы = ТекущиеДела.Добавить();
	ДелоРодительФинансы.Идентификатор  = "ВыданныеДоверенностиРодитель";
	ДелоРодительФинансы.Представление  = НСтр("ru = 'Выданные доверенности'");
	ДелоРодительФинансы.Владелец       = Метаданные.Подсистемы.Казначейство;
	
	// ВыданныеДоверенности
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенности";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенности > 0;
	Дело.Представление  = НСтр("ru = 'Выданные доверенности'");
	Дело.Количество     = Результат.ВыданныеДоверенности;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиИстекающиеНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиИстекающиеНаСегодня";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0;
	Дело.Представление  = НСтр("ru = 'Доверенности, истекающие сегодня'");
	Дело.Количество     = Результат.ВыданныеДоверенностиИстекающиеНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Просрочен", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиПросроченные";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные доверенности'");
	Дело.Количество     = Результат.ВыданныеДоверенностиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	Если Результат.ВыданныеДоверенности > 0
		Или Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0
		Или Результат.ВыданныеДоверенностиПросроченные > 0 Тогда
		ДелоРодительФинансы.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 2.4.3
// Вспомогательная процедура для обработчика обновления КоличествоПозиций
// заполняет реквизит "Количество позиций" документа "ДоверенностьВыданная".
// Параметры:
//  Параметры - Структура - параметры отложенной обработки данных 
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДоверенностьМатериальныеЦенности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьМатериальныеЦенности
	|ГДЕ
	|	НЕ ДоверенностьМатериальныеЦенности.ПометкаУдаления
	|	И ДоверенностьМатериальныеЦенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей)
	|	И ДоверенностьМатериальныеЦенности.КоличествоПозиций = 0
	|	И НЕ ДоверенностьМатериальныеЦенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.НеВыдана)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ДоверенностьВыданная.МатериальныеЦенности КАК МатериальныеЦенностиТЧ
	|			ГДЕ
	|				МатериальныеЦенностиТЧ.Ссылка = ДоверенностьМатериальныеЦенности.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоверенностьТовары.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьТовары
	|ГДЕ
	|	НЕ ДоверенностьТовары.ПометкаУдаления
	|	И ДоверенностьТовары.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров)
	|	И ДоверенностьТовары.КоличествоПозиций = 0
	|	И НЕ ДоверенностьТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.НеВыдана)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ДоверенностьВыданная.Товары КАК ТоварыТЧ
	|			ГДЕ
	|				ТоварыТЧ.Ссылка = ДоверенностьТовары.Ссылка)");
	
	Результат = Запрос.Выполнить().Выгрузить();
	Ссылки = Результат.ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Ссылки);
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ДоверенностьВыданная";
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
		
			ДокументОбъект.КоличествоПозиций = ДокументОбъект.Товары.Количество() + ДокументОбъект.МатериальныеЦенности.Количество();
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
КонецПроцедуры

#КонецОбласти


#Область Прочее

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаРаспоряженийНаТовары(НетДоверенности = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановоеПоступление.Распоряжение.Ссылка КАК Ссылка,
	|	ПлановоеПоступление.Распоряжение.ПометкаУдаления КАК ПометкаУдаления,
	|	ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) КАК ТипРаспоряжения,
	|	ПлановоеПоступление.Распоряжение.Дата КАК Дата,
	|	ПлановоеПоступление.Распоряжение.Номер КАК Номер,
	|	ПлановоеПоступление.Распоряжение.Партнер КАК Партнер,
	|	ПлановоеПоступление.Распоряжение.Контрагент КАК Контрагент,
	|	ПлановоеПоступление.Распоряжение.Организация КАК Организация,
	|	ПлановоеПоступление.Распоряжение.Склад КАК Склад,
	|	ПлановоеПоступление.Распоряжение.Валюта КАК Валюта,
	|	ПлановоеПоступление.Распоряжение.Менеджер КАК Менеджер,
	|	ПлановоеПоступление.Распоряжение.СуммаДокумента КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПРЕДСТАВЛЕНИЕ(ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация) КАК ХозяйственнаяОперацияПредставление,
	|	ПлановоеПоступление.Распоряжение.Комментарий КАК Комментарий,
	|	ВЫБОР
	|		КОГДА Доверенности.СозданаДоверенность ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	#ТекстЗапросаПлановоеПоступление КАК ПлановоеПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МИНИМУМ(Доверенности.Ссылка) КАК СозданаДоверенность,
	|			Доверенности.ДокументОснование КАК ДокументОснование
	|		ИЗ
	|			Документ.ДоверенностьВыданная КАК Доверенности
	|		ГДЕ
	|			НЕ Доверенности.ПометкаУдаления
	|			И НЕ Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Доверенности.ДокументОснование) КАК Доверенности
	|		ПО ПлановоеПоступление.Распоряжение = Доверенности.ДокументОснование
	|ГДЕ
	|	НЕ ПлановоеПоступление.Распоряжение.Ссылка ЕСТЬ NULL 
	|	И (ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаказПоставщику)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|	И &УсловиеОтбора";
	
	ТекстЗапросаПлановоеПоступление = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|ВЫБРАТЬ
		|		ЗаказыПоставщикам.ЗаказПоставщику КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыПоставщикам.ЗаказПоставщику
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаказыПоставщикам.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		&ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаявкиНаВозврат.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.Ссылка КАК Распоряжение
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
		|		И ЗаявкиНаВозврат.Проведен");
	КонецЕсли;
	Если ТекстЗапросаПлановоеПоступление.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'У пользователя недостаточно прав для исполнения операции над базой данных'");
	КонецЕсли;
	ТекстЗапросаПлановоеПоступление = СтрСоединить(ТекстЗапросаПлановоеПоступление,"
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	ТекстЗапросаПлановоеПоступление = "("+ТекстЗапросаПлановоеПоступление+")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТекстЗапросаПлановоеПоступление",ТекстЗапросаПлановоеПоступление);
	
	УсловиеОтбора = "";
	
	Если ЗначениеЗаполнено(НетДоверенности) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "Доверенности.СозданаДоверенность ЕСТЬ NULL");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Параметры.Свойство("ТипДоверенности") И Параметры.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ") Тогда
			
			Возврат Неопределено
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаДоверенностиНаПолучениеДС();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		
	Иначе
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
				И ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
				И (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
					Или ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов)
						И ИспользоватьРасширенныеВозможностиЗаказаКлиента
					Или ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
						И Не ИспользоватьРасширенныеВозможностиЗаказаКлиента)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаРаспоряженийНаТовары(Истина);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
				ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	КонецЕсли;
	ТекстГиперссылки = НСтр("ru = 'Доверенности'");
	
	ИмяФормыРабочееМестоДоверенности = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоДоверенности);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоДоверенности);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРаспоряженийНаДС() Экспорт
	
	// Регистры.
	ЧтениеРасчетыСКлиентами = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
	ЧтениеРасчетыСПоставщиками = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
	
	// Документы.
	ЧтениеЗаказКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ЧтениеЗаявкаНаВозвратТоваровОтКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЧтениеАктВыполненныхРабот = ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот);
	ЧтениеРеализацияУслугПрочихАктивов = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ЧтениеОтчетКомиссионера = ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетКомиссионера);
	ЧтениеРеализацияТоваровУслуг = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг);
	
	
	ЧтениеВозвратТоваровПоставщику = ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	// Справочники.
	ЧтениеДоговорыКонтрагентов = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	ТекстЗапроса = "";
	
	ТекстШаблона = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетов.Ссылка КАК Ссылка,
	|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументРасчетов.Дата КАК Дата,
	|	ДокументРасчетов.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
	|	Расчеты.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.%1) КАК ХозяйственнаяОперация,
	|	%2 КАК ХозяйственнаяОперацияПредставление,
	|	КлючиАналитики.Партнер КАК Партнер,
	|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
	|	КлючиАналитики.Контрагент КАК Контрагент,
	|	КлючиАналитики.Организация КАК Организация,
	|	ДокументРасчетов.Менеджер КАК Менеджер,
	|	ДокументРасчетов.Менеджер КАК Ответственный,
	|	ДокументРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
	|	ПОМЕСТИТЬ ДокументыРасчетов
	|ИЗ
	|	Документ.%3 КАК ДокументРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.%4.Остатки(
	|				,
	|				НЕ %5 = НЕОПРЕДЕЛЕНО
	|					И %5 ССЫЛКА Документ.%3) КАК Расчеты
	|		ПО (Расчеты.%5 = ДокументРасчетов.Ссылка)
	|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)";
		
	Если ЧтениеРасчетыСКлиентами Тогда
		
		ТекстХО = "ПоступлениеОплатыОтКлиента";
		ТекстХОПредставление = НСтр("ru = '""Поступление оплаты от клиента""'");
		ТекстРасчеты = "РасчетыСКлиентами";
		ТекстИзмерениеРасчеты = "ЗаказКлиента";
		// Заказ клиента.
		Если ЧтениеЗаказКлиента Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ЗаказКлиента", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Заявка на возврат товаров от клиента.
		Если ЧтениеЗаявкаНаВозвратТоваровОтКлиента Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ЗаявкаНаВозвратТоваровОтКлиента", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Акт выполненных работ.
		Если ЧтениеАктВыполненныхРабот Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "АктВыполненныхРабот", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Реализация услуг прочих активов.
		Если ЧтениеРеализацияУслугПрочихАктивов Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "РеализацияУслугПрочихАктивов", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Отчет комиссионера.
		Если ЧтениеОтчетКомиссионера Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ОтчетКомиссионера", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		// Реализация товаров услуг.
		Если ЧтениеРеализацияТоваровУслуг Тогда
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "РеализацияТоваровУслуг", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
		
		
		Если ЧтениеДоговорыКонтрагентов Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументРасчетов.Ссылка КАК Ссылка,
			|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
			|	ДокументРасчетов.Дата КАК Дата,
			|	ДокументРасчетов.Номер КАК Номер,
			|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
			|	Расчеты.Валюта КАК Валюта,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
			|	" + ТекстХОПредставление + " КАК ХозяйственнаяОперацияПредставление,
			|	КлючиАналитики.Партнер КАК Партнер,
			|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
			|	КлючиАналитики.Контрагент КАК Контрагент,
			|	КлючиАналитики.Организация КАК Организация,
			|	ДокументРасчетов.Менеджер КАК Менеджер,
			|	ДокументРасчетов.Менеджер КАК Ответственный,
			|	0 КАК СуммаДокумента,
			|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
			|	ПОМЕСТИТЬ ДокументыРасчетов
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДокументРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				НЕ ЗаказКлиента = НЕОПРЕДЕЛЕНО
			|					И ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК Расчеты
			|		ПО (Расчеты.ЗаказКлиента = ДокументРасчетов.Ссылка)
			|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
			|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)";
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтениеРасчетыСПоставщиками Тогда
		
		ТекстРасчеты = "РасчетыСПоставщиками";
		ТекстИзмерениеРасчеты = "ЗаказПоставщику";
		// Возврат товаров поставщику.
		Если ЧтениеВозвратТоваровПоставщику Тогда
			ТекстХО = "ВозвратДенежныхСредствОтПоставщика";
			ТекстХОПредставление = НСтр("ru = '""Возврат от поставщика""'");
			
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ТекстШаблона,
				ТекстХО, ТекстХОПредставление, "ВозвратТоваровПоставщику", ТекстРасчеты, ТекстИзмерениеРасчеты);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СокрЛП(Сред(ТекстЗапроса, 25));
	ТекстВТ = СтрНайти(ТекстЗапроса, "ПОМЕСТИТЬ ДокументыРасчетов");
	
	ТекстЗапросаНачало = Лев(ТекстЗапроса, ТекстВТ + 27);
	ТекстЗапросаКонец = Сред(ТекстЗапроса, ТекстВТ + 28);
	ТекстЗапросаКонец = СтрЗаменить(ТекстЗапросаКонец, "ПОМЕСТИТЬ ДокументыРасчетов", "");
	ТекстЗапроса = ТекстЗапросаНачало + ТекстЗапросаКонец + ";";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенности.ДокументОснование
	|ПОМЕСТИТЬ ВыданныеДоверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|	И Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыРасчетов.Ссылка КАК Ссылка,
	|	ДокументыРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументыРасчетов.Дата КАК Дата,
	|	ДокументыРасчетов.Номер КАК Номер,
	|	ДокументыРасчетов.ТипРаспоряжения КАК ТипРаспоряжения,
	|	ДокументыРасчетов.Валюта КАК Валюта,
	|	ДокументыРасчетов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыРасчетов.ХозяйственнаяОперацияПредставление КАК ХозяйственнаяОперацияПредставление,
	|	ДокументыРасчетов.Партнер КАК Партнер,
	|	ДокументыРасчетов.Партнер.Наименование КАК ПартнерПредставление,
	|	ДокументыРасчетов.Контрагент КАК Контрагент,
	|	ДокументыРасчетов.Организация КАК Организация,
	|	ДокументыРасчетов.Менеджер КАК Менеджер,
	|	ДокументыРасчетов.Ответственный КАК Ответственный,
	|	ДокументыРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ДокументыРасчетов.КОплатеОстаток КАК КОплатеОстаток,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДоверенность,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	ДокументыРасчетов КАК ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыданныеДоверенности КАК ВыданныеДоверенности
	|		ПО ДокументыРасчетов.Ссылка = ВыданныеДоверенности.ДокументОснование";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДоверенностиНаПолучениеДС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоверенностьВыданная.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьВыданная
	|ГДЕ
	|	ДоверенностьВыданная.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьВыданная.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана),ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.НеВыдана))";
	
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
