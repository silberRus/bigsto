
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.ДоступностьРаспоряженийТовары И Не Параметры.ДоступностьРаспоряженийДС Тогда
		Параметры.ДоступностьРаспоряженийТовары = Истина;
		Параметры.ДоступностьРаспоряженийДС = Истина;
	КонецЕсли;
	
	Если Параметры.ДоступностьРаспоряженийТовары Тогда
		ДоступностьРаспоряженийТовары = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
			И (ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
				Или ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов"))
			И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
			И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов)
			И ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная);
	КонецЕсли;
	Если Параметры.ДоступностьРаспоряженийДС Тогда
		ДоступностьРаспоряженийДС = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная);
	КонецЕсли;
	
	Если Не ДоступностьРаспоряженийДС И Не ДоступностьРаспоряженийТовары Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗаголовокФормы", Заголовок) Тогда
		Заголовок = НСтр("ru = 'Доверенности'");
	КонецЕсли;
	УстановитьУсловноеОформление();
	УстановитьУсловноеОформлениеДС();
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИнициализироватьСписокОпераций();
	
	СписокДоверенности.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДатаСеанса()));
	СписокДоверенности.Параметры.УстановитьЗначениеПараметра("Позиций", НСтр("ru = 'поз.'"));

	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	Параметры.Свойство("НаличиеДоверенности", НаличиеДоверенности);
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
			"ПометкаУдаления", Ложь,,, Истина);
	КонецЕсли;
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборСрокВыполнения.СписокВыбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности,
		"Состояние", Состояние, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности,
		"Ответственный", Ответственный, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности,
		"ФизЛицо", ФизЛицо, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(СписокДоверенности,
		Актуальность, ДатаСобытия, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление,
		"ЕстьДоверенность", Ложь, СтруктураБыстрогоОтбора, НаличиеДоверенности);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформлениеДС,
		"ЕстьДоверенность", Ложь, СтруктураБыстрогоОтбора, НаличиеДоверенности);
	Если ДоступностьРаспоряженийТовары И ДоступностьРаспоряженийДС Тогда
		ТипДоверенности = "";
	Иначе
		Если ДоступностьРаспоряженийТовары Тогда
			ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров;
		КонецЕсли;
		Если ДоступностьРаспоряженийДС Тогда
			ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС;
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
		"ТипДоверенности", ТипДоверенности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТипДоверенности));
	
	УстановитьТекущуюСтраницу();
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокРаспоряженияНаОформлениеВалюта", "Видимость", ИспользоватьНесколькоВалют);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокРаспоряженияНаОформлениеДСВалюта", "Видимость", ИспользоватьНесколькоВалют);
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(Элементы.Ответственный.СписокВыбора,
		СписокВыбораОтбораПоОтветственномуСервер());
	СтатусДоступен = ПраваПользователяПовтИсп.ЗаписьВыданнойДоверенностиВОкончательномСтатусе();
	Элементы.ГруппаУстановитьСтатус.Видимость = СтатусДоступен;
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказПоставщику" Или ИмяСобытия = "Запись_ДоверенностьНаПолучениеТоваров" Тогда
		Элементы.СписокДоверенности.Обновить();
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	Если ИмяСобытия = "Запись_ЗаказКлиента" Или ИмяСобытия = "Запись_ДоверенностьНаПолучениеДС" Тогда
		Элементы.СписокДоверенности.Обновить();
		Элементы.СписокРаспоряженияНаОформлениеДС.Обновить();
	КонецЕсли;
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Настройки.Удалить("СостояниеРаспоряжения");
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		НаличиеДоверенности = Настройки.Получить("НаличиеДоверенности");
	Иначе
		Настройки.Удалить("НаличиеДоверенности");
	КонецЕсли;
	Если СтруктураБыстрогоОтбора = Неопределено ИЛИ Не СтруктураБыстрогоОтбора.Свойство("Ответственный") Тогда
		ЗначениеИзНастройки = Настройки.Получить("Ответственный");
		Если ЗначениеЗаполнено(ЗначениеИзНастройки) Тогда
			Ответственный = ЗначениеИзНастройки;
		КонецЕсли;
	КонецЕсли;
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(СписокДоверенности,
		Актуальность, ДатаСобытия, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокДоверенности,
		"Ответственный", Ответственный, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокДоверенности,
		"ФизЛицо", ФизЛицо, СтруктураБыстрогоОтбора, Настройки);
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние,
		СтруктураБыстрогоОтбора, Настройки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
			"Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
			"ПометкаУдаления",,,, Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
			"ПометкаУдаления", Ложь,,, Истина);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"ЕстьДоверенность" ,Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформлениеДС,
		"ЕстьДоверенность" ,Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	Если НЕ ЗначениеЗаполнено(ТипДоверенности) Тогда
		ТипДоверенности = Настройки.Получить("ТипДоверенности");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности,
		"ТипДоверенности", ТипДоверенности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТипДоверенности));
	Иначе
		Настройки.Удалить("ТипДоверенности");
	КонецЕсли;
	Если НЕ Настройки.Получить("ПолнотаИсполнения") = Неопределено Тогда
		Настройки.Удалить("ПолнотаИсполнения");
	КонецЕсли;
	
	// Фильтр по хоз.операциям
	СписокОперацийДляДС = Настройки.Получить("СписокОперацийДС");
	СписокОперацийДляТоваров = Настройки.Получить("СписокОперацийТовары");
	
	ИнициализироватьСписокОпераций();
	
	Если СписокОперацийДляДС <> Неопределено Тогда
		Для каждого Операция Из СписокОперацийДляДС Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийДС.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ХозяйственнаяОперацияПредставление = СписокОперацийПредставление(СписокОперацийДС);
	
	УстановитьОтборДинамическогоСпискаПоХозОперации(СписокРаспоряженияНаОформлениеДС, СписокОперацийДС);
	
	Если СписокОперацийДляТоваров <> Неопределено Тогда
		Для каждого Операция Из СписокОперацийДляТоваров Цикл
			Если Операция.Пометка Тогда
				ОперацияСписка = СписокОперацийТовары.НайтиПоЗначению(Операция.Значение);
				Если ОперацияСписка <> Неопределено Тогда
					ОперацияСписка.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ХозяйственнаяОперацияТоварыПредставление = СписокОперацийПредставление(СписокОперацийТовары);
	
	УстановитьОтборДинамическогоСпискаПоХозОперации(СписокРаспоряженияНаОформление, СписокОперацийТовары);
	
	УстановитьВидимостьДоступностьКолонокРаспоряжений();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности, "ФизЛицо", ФизЛицо, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ФизЛицо));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности, "ПометкаУдаления",,,, Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности, "ПометкаУдаления", Ложь,,, Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДоверенности, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияПриИзменении(Элемент)

	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(СписокДоверенности, Актуальность, ДатаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение, 
		СтандартнаяОбработка, 
		ЭтаФорма,
		СписокДоверенности, 
		"Актуальность", 
		"ДатаСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(СписокДоверенности, Актуальность, ДатаСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеДоверенностиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"ЕстьДоверенность", Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформлениеДС,
		"ЕстьДоверенность", Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
КонецПроцедуры

&НаКлиенте
Процедура НаличиеДоверенностиДСПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"ЕстьДоверенность", Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформлениеДС,
		"ЕстьДоверенность", Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДоверенности, "ТипДоверенности", ТипДоверенности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТипДоверенности));
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОчистка(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДоверенности, "ТипДоверенности", ТипДоверенности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ТипДоверенности));
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПредставлениеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", СписокОперацийДС), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПредставлениеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийДС.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформлениеДС,
		"ХозяйственнаяОперация",
		Неопределено,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПредставлениеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийДС = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийДС Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	ХозяйственнаяОперацияПредставление = СписокОперацийПредставление(СписокОперацийДС);
	
	УстановитьОтборДинамическогоСпискаПоХозОперации(СписокРаспоряженияНаОформлениеДС, СписокОперацийДС);
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияТоварыПредставлениеОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Перечисление.ХозяйственныеОперации.Форма.ФормаВыбораОперации",
		Новый Структура("СписокОпераций", СписокОперацийТовары), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияТоварыПредставлениеОтборОчистка(Элемент, СтандартнаяОбработка)
	
	СписокОперацийТовары.ЗаполнитьПометки(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРаспоряженияНаОформление,
		"ХозяйственнаяОперация",
		Неопределено,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияТоварыПредставлениеОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		СписокОперацийТовары = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
		
		Для Каждого ЭлементСписка Из СписокОперацийТовары Цикл
			ЭлементСписка.Пометка = (ЭлементСписка.Значение = ВыбранноеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	ХозяйственнаяОперацияТоварыПредставление = СписокОперацийПредставление(СписокОперацийТовары);
	
	УстановитьОтборДинамическогоСпискаПоХозОперации(СписокРаспоряженияНаОформление, СписокОперацийТовары);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналЗакупкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияФормы", "");
	Если НавигационнаяСсылкаФорматированнойСтроки = "ДокументыЗакупки" Тогда
		ОткрытьФорму("Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов", ПараметрыФормы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДокументыПродажи" Тогда
		ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДоверенности

&НаКлиенте
Процедура СписокДоверенностиПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокДоверенности

&НаКлиенте
Процедура СписокДоверенностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДоверенности.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.ДоверенностьВыданная.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка), ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокРаспоряженияНаОформление

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписокРаспоряженияНаОформлениеДС

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СписокРаспоряженияНаОформлениеДС.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элементы.СписокРаспоряженияНаОформлениеДС.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусВыдана(Команда)
	
	ВыделенныеСсылки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Выдана"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусВыданаЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВыданаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Выдана");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных,
    ВыделенныеСсылки.Количество(), НСтр("ru='Выдана'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусИспользована(Команда)
	
	ВыделенныеСсылки =ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Использована"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусИспользованаЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусИспользованаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
    Элементы.СписокДоверенности.ВыделенныеСтроки, "Использована");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных,
    ВыделенныеСсылки.Количество(), НСтр("ru='Использована'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеИспользована(Команда)
	
	ВыделенныеСсылки =ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса =
		НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Не использована"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусНеИспользованаЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеИспользованаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
    Элементы.СписокДоверенности.ВыделенныеСтроки, "НеИспользована");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных,
    ВыделенныеСсылки.Количество(), НСтр("ru='Не использована'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАннулирована(Команда)
	
	ВыделенныеСсылки =ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Аннулирована"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусАннулированаЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСсылки", ВыделенныеСсылки)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАннулированаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСсылки = ДополнительныеПараметры.ВыделенныеСсылки;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    ОчиститьСообщения();
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
    Элементы.СписокДоверенности.ВыделенныеСтроки, "Аннулирована");
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных,
    ВыделенныеСсылки.Количество(), НСтр("ru='Аннулирована'"));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоверенностьНаПолучениеТоваров(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите распоряжение для формирования доверенности'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("ДокументОснование", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Документ.ДоверенностьВыданная.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснование));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоверенностьНаПолучениеДС(Команда)
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформлениеДС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите распоряжение для формирования доверенности'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураОснование = Новый Структура("ДокументОснование, НаДенежныеСредства",ТекущиеДанные.Ссылка, Истина);
	ОткрытьФорму("Документ.ДоверенностьВыданная.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснование));
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокДоверенности);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокДоверенности, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокДоверенности);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда,
		ЭтаФорма, Элементы.СписокДоверенности);
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСписокОпераций()
	
	Операции = Перечисления.ХозяйственныеОперации;
	
	СписокОперацийДС.Очистить();
	СписокОперацийДС.Добавить(Операции.ПоступлениеОплатыОтКлиента,
		НСтр("ru = 'Поступление оплаты от клиента'"));
	СписокОперацийДС.Добавить(Операции.ВозвратДенежныхСредствОтПоставщика,
		НСтр("ru = 'Возврат денежных средств от поставщика'"));
	
	Элементы.ХозяйственнаяОперацияПредставлениеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийДС Цикл
		Элементы.ХозяйственнаяОперацияПредставлениеОтбор.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
	СписокОперацийТовары.Очистить();
	СписокОперацийТовары.Добавить(Операции.ПланированиеПоЗаказуПоставщику);
	СписокОперацийТовары.Добавить(Операции.ВозвратТоваровОтКлиента, НСтр("ru = 'Возврат товаров от клиента'"));
	СписокОперацийТовары.Добавить(Операции.ЗакупкаУПоставщика, НСтр("ru = 'Закупка у поставщика'"));
	
	
	Элементы.ХозяйственнаяОперацияТоварыПредставлениеОтбор.СписокВыбора.Очистить();
	Для каждого Операция Из СписокОперацийТовары Цикл
		Элементы.ХозяйственнаяОперацияТоварыПредставлениеОтбор.СписокВыбора.Добавить(Операция.Значение,
			Операция.Представление);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокОперацийПредставление(СписокОпераций)
	
	СписокОперацийПредставление = "";
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокОперацийПредставление = СписокОперацийПредставление
				+ ?(ЗначениеЗаполнено(СписокОперацийПредставление), ", ", "")
				+ ?(ЗначениеЗаполнено(ЭлементСписка.Представление), ЭлементСписка.Представление, ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОперацийПредставление;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьКолонокРаспоряжений()
	
	НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	НесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ПартнерыКакКонтрагенты = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Элементы.СписокРаспоряженияНаОформлениеКонтрагент.Видимость = 
		Элементы.СписокРаспоряженияНаОформлениеКонтрагент.Видимость И НЕ ПартнерыКакКонтрагенты;
	Элементы.СписокРаспоряженияНаОформлениеДСКонтрагент.Видимость = 
		Элементы.СписокРаспоряженияНаОформлениеДСКонтрагент.Видимость И НЕ ПартнерыКакКонтрагенты;
		
	Элементы.СписокРаспоряженияНаОформлениеОрганизация.Видимость = 
		Элементы.СписокРаспоряженияНаОформлениеОрганизация.Видимость И НесколькоОрганизаций;
	Элементы.СписокРаспоряженияНаОформлениеДСОрганизация.Видимость = 
		Элементы.СписокРаспоряженияНаОформлениеДСОрганизация.Видимость И НесколькоОрганизаций;
		
	Элементы.СписокРаспоряженияНаОформлениеСклад.Видимость = 
		Элементы.СписокРаспоряженияНаОформлениеСклад.Видимость И НесколькоСкладов;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборДинамическогоСпискаПоХозОперации(ДинамическийСписок, СписокХозОпераций)
	
	ВыбранныеОперации = Новый Массив;
	Для Каждого ЭлементСписка Из СписокХозОпераций Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеОперации.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ДинамическийСписок,
		"ХозяйственнаяОперация",
		ВыбранныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		ВыбранныеОперации.Количество());
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ТекстЗапроса = Документы.ДоверенностьВыданная.ТекстЗапросаРаспоряженийНаТовары();
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		СписокРаспоряженияНаОформление.ТекстЗапроса = ТекстЗапроса;
		Если СписокРаспоряженияНаОформление.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИспользоватьРасширенныеВозможностиЗаказаКлиента")) <> Неопределено Тогда
			СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
				ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
		КонецЕсли;
	Иначе
		ДоступностьРаспоряженийДС = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаРаспоряженияНаОформление.Видимость = ДоступностьРаспоряженийТовары;
	Если НЕ ДоступностьРаспоряженийТовары Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление динамического списка "СписокРаспоряженияНаОформление"
	СписокУсловноеОформление = СписокРаспоряженияНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	// По документу оформлена доверенность
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Есть доверенность'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьДоверенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформление.Дата", Элементы.СписокРаспоряженияНаОформлениеДата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДС()
	
	ТекстЗапроса = Документы.ДоверенностьВыданная.ТекстЗапросаРаспоряженийНаДС();
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		СписокРаспоряженияНаОформлениеДС.ТекстЗапроса = ТекстЗапроса;
	Иначе
		ДоступностьРаспоряженийДС = Ложь;
	КонецЕсли;
	
	Элементы.СтраницаРаспоряженияНаОформлениеДС.Видимость = ДоступностьРаспоряженийДС;
	Если НЕ ДоступностьРаспоряженийДС Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление динамического списка "СписокРаспоряженияНаОформлениеДС"
	СписокУсловноеОформление = СписокРаспоряженияНаОформлениеДС.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	// По документу оформлена доверенность
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Есть доверенность'");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьДоверенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженияНаОформлениеДС.Дата", Элементы.СписокРаспоряженияНаОформлениеДСДата.Имя);
КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ДоверенностьВыданная.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформление;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ДоверенностьВыданная") Тогда
			Элементы.СписокДоверенности.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаДоверенностиНаПолучениеТоваров;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Элементы.СписокРаспоряженияНаОформлениеДС.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформлениеДС;
		КонецЕсли;
		ПоказатьЗначение(Неопределено, Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция СписокВыбораОтбораПоОтветственномуСервер()
	
	Возврат ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ДоверенностьВыданная);
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДоверенности.Дата", Элементы.СписокДата.Имя);
КонецПроцедуры

#КонецОбласти


#КонецОбласти
