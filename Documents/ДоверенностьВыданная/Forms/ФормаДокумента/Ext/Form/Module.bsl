&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЕстьПравоНаДобавлениеДокументов = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДокументыФизическихЛиц); 
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.ФизЛицо.Заголовок = НСтр("ru = 'Сотрудник'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "Артикул")));
	КонецЕсли;
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		Оповестить("Запись_ДоверенностьНаПолучениеДС", ПараметрыЗаписи, Объект.Ссылка);
	Иначе
		Оповестить("Запись_ДоверенностьНаПолучениеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика =
		Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьДоступКНоменклатуреПоставщика Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(
			Объект,
			Новый ОписаниеОповещения("ПередЗаписьюПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументФизЛица" Тогда
		ОчиститьДанныеПаспорта(ЭтаФорма);
		ЗаполнитьСпискокУдостоверенийЛичности();
		Объект.ПредставлениеДокументаФизЛица = Параметр.Представление;
		Объект.ВидДокументаФизЛица = Параметр.ВидДокумента;
		Объект.СерияДокументаФизЛица = Параметр.ПаспортСерия;
		Объект.НомерДокументаФизЛица = Параметр.ПаспортНомер;
		Объект.КемВыданДокументФизлица = Параметр.ПаспортВыдан;
		Объект.ДатаВыдачиДокументаФизЛица = Параметр.ПаспортДатаВыдачи;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснование1ПриИзменении(Элемент)
	
	ДокументОснованиеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииСервер()
	
	ВалютаДокументОснование = "";
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбъектДоверенность = РеквизитФормыВЗначение("Объект");
		ОбъектДоверенность.Заполнить(Объект.ДокументОснование);
		ОбъектДоверенность.ДокументОснование = Объект.ДокументОснование;
		ЗначениеВРеквизитФормы(ОбъектДоверенность, "Объект");
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект.ДокументОснование, "Валюта") Тогда
			ВалютаДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Валюта");
		Иначе
			ВалютаДокументОснование = Объект.Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров") Тогда
		Объект.Валюта = "";
		Объект.СуммаДокумента = 0;
		Объект.МатериальныеЦенности.Очистить();
	ИначеЕсли Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		Объект.Валюта = ВалютаДокументОснование;
		Объект.Товары.Очистить();
		Объект.МатериальныеЦенности.Очистить();
	Иначе
		Объект.Валюта = "";
		Объект.СуммаДокумента = 0;
		Объект.Товары.Очистить();
	КонецЕсли;
	Элементы.Валюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	УстановитьВидимостьПоТипуДоверенности();
КонецПроцедуры

&НаКлиенте
Процедура ТипДоверенностиПриИзменении(Элемент)
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров") Тогда
		Объект.Валюта = "";
		Объект.СуммаДокумента = 0;
		Объект.МатериальныеЦенности.Очистить();
	ИначеЕсли Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		Объект.Валюта = ВалютаДокументОснование;
		Объект.Товары.Очистить();
		Объект.МатериальныеЦенности.Очистить();
	Иначе
		Объект.Валюта = "";
		Объект.СуммаДокумента = 0;
		Объект.Товары.Очистить();
	КонецЕсли;
	Если НЕ ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Объект.ДокументОснование = "";
	КонецЕсли;
	УстановитьВидимостьПоТипуДоверенности();
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПриИзмененииФизЛицаСервер();
	Иначе
		Элементы.Должность.СписокВыбора.Очистить();
		Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
		СписокДолжностейЗагружен = Истина;
		Объект.ПредставлениеДокументаФизЛица = "";
		ОчиститьДанныеПаспорта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	Объект.ДатаОкончанияДействия = РассчитатьДатуОкончанияДействия(НачалоДня(Объект.Дата), Объект.СрокДействия);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	Объект.СрокДействия = РассчитатьСрокДействия(Объект.Дата, Объект.ДатаОкончанияДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииПартнераСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ФизЛицо", Объект.ФизЛицо);
		ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПредставлениеДокументаФизЛица", ВыбранноеЗначение);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденныйДокумент = НайденныеСтроки.Получить(0);
			ЗаполнитьЗначенияСвойств(Объект, НайденныйДокумент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьДанныеПаспорта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
	ПараметрыПодбора.СтрокаПоиска = Текст;
	ПараметрыПодбора.ФизЛицо = Объект.ФизЛицо;
	ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
	Если ЕстьПравоНаДобавлениеДокументов Тогда
		ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
		ПараметрыПодбора.СтрокаПоиска = Текст;
		ПараметрыПодбора.ФизЛицо = Объект.ФизЛицо;
		ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
		Если ЕстьПравоНаДобавлениеДокументов Тогда
			ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураПоставщика" Тогда
		Если ЕстьДоступКНоменклатуреПоставщика Тогда
			ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер,
				Элементы.Товары.ТекущиеДанные,
				Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЦенности

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка =
		НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(
		Новый ОписаниеОповещения("ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение", ЭтотОбъект),
		АдресТоваровВХранилище,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьТоварыИзВременногоХранилищаСервер(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Сообщение = НСтр("ru = 'Укажите основание для заполнения по расчетам.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.ДокументОснование");
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СуммаДокумента = 0 Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru='Сумма к получению по доверенности
		|будет перезаполнена по расчетам по основанию %1. Продолжить?'"), СокрЛП(Объект.ДокументОснование));
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Отменить'"));
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьНаличныеДСЗавершение", ЭтотОбъект),
			ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнение суммы к получению'"));
		Возврат;
	КонецЕсли;
	ЗаполнитьНаличныеДСФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаличныеДСФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДСФрагмент()
	
	Перем ТекстСообщения;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьНаличныеДСНаСервере();
	КонецЕсли;
	
	Если Объект.СуммаДокумента = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отсутствует задолженность по расчетам по основанию %1'"),
			СокрЛП(Объект.ДокументОснование));
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ Объект.Товары.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Список товаров к получению по доверенности будет перезаполнен по основанию. Продолжить?'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Отменить'"));
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнение товаров к получению'"));
        Возврат;
	КонецЕсли;
	ЗаполнитьПоОснованиюСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоОснованиюСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
КонецПроцедуры

//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыЕдиницаИзмерения");
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПоставщика.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите поставщика>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииФизЛицаСервер()
	
	МассивДолжностейСотрудника = ДолжностиСотрудника(Объект.ФизЛицо);
	Если МассивДолжностейСотрудника.Количество() > 0 Тогда
		Объект.Должность = МассивДолжностейСотрудника[0];
	КонецЕсли;
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	ПолучитьПоследниеПаспортныеДанныеСтрокой();
	ЗаполнитьСписокВыбораДолжность();
	ЗаполнитьСпискокУдостоверенийЛичности();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(Объект.Товары, Объект.Партнер);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Объект.Организация;
	СтруктураПараметров.БанковскийСчет = Объект.БанковскийСчет;
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьВидимостьПоТипуДоверенности();
	ЗаполнитьСписокВыбораДолжность();
	ЗаполнитьСпискокУдостоверенийЛичности();
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "Артикул")));
	КонецЕсли;
	УстановитьВидимостьДоступностьПоСтатусуДоверенности();
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект.ДокументОснование, "Валюта") Тогда
			ВалютаДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Валюта");
		Иначе
			ВалютаДокументОснование = Объект.Валюта;
		КонецЕсли;
	КонецЕсли;
	Элементы.Валюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	УстановитьСостояниеДоверенности();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПоСтатусуДоверенности()
	
	СтатусДоступен = ПраваПользователяПовтИсп.ЗаписьВыданнойДоверенностиВОкончательномСтатусе();
	ВыданнаяДоверенность = НЕ Объект.Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
	ТолькоПросмотр = (ВыданнаяДоверенность И НЕ СтатусДоступен);
	Элементы.Статус.Видимость = СтатусДоступен;
	Элементы.Статус.Доступность = СтатусДоступен;
	Если ВыданнаяДоверенность Тогда
		СтатусНеВыдана = Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыДоверенностей.НеВыдана);
		Если НЕ СтатусНеВыдана = Неопределено Тогда
			Элементы.Статус.СписокВыбора.Удалить(СтатусНеВыдана);
		КонецЕсли;
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.ДокументОснование1.Видимость = Ложь;
	Иначе
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ДокументОснование1.Видимость = Истина;
	КонецЕсли;
	Элементы.Ответственный.Видимость = ВыданнаяДоверенность;
	Если Объект.ПометкаУдаления Тогда
		СтатусНеВыдана = Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыДоверенностей.НеВыдана);
		Если СтатусНеВыдана = Неопределено Тогда
			Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыДоверенностей.НеВыдана);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДоступКНоменклатуреПоставщика = ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураПоставщиков);
	Элементы.ТоварыЗаполнитьНоменклатуруПоНоменклатуреПоставщика.Видимость = ЕстьДоступКНоменклатуреПоставщика;
	Элементы.ТоварыНоменклатураПоставщика.ТолькоПросмотр = НЕ ЕстьДоступКНоменклатуреПоставщика;
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДоверенности()
	
	СостояниеДоверенности = "";
	Если Объект.Статус = Перечисления.СтатусыДоверенностей.НеВыдана Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНетПоступленияДС = НСтр("ru = 'Нет поступления ДС'");
	ТекстНетПоступленияТоваров = НСтр("ru = 'Нет поступления товаров (МЦ)'");
	ТекстЕстьПоступленияТоваров = НСтр("ru = 'Есть поступления товаров (МЦ)'");
	ТекстПолноеПоступлениеДС = НСтр("ru = 'ДС поступили полностью'");
	ТекстЧастичноеПоступлениеДС = НСтр("ru = 'ДС поступили частично: %1'");
	
	ДоверенностьНаДС = Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Если ДоверенностьНаДС Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ДокументыКассы.СуммаДокумента), 0) КАК СуммаОплат
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДокументыКассы
		|ГДЕ
		|	ДокументыКассы.Проведен
		|	И ДокументыКассы.ДоверенностьВыданная = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|ГДЕ
		|	РасчетыСПоставщиками.ЗаказПоставщику = &ДокументОснование
		|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВИдДвиженияНакопления.Расход)
		|	И НЕ РасчетыСПоставщиками.КПоступлению = 0";
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ДоверенностьНаДС Тогда
			СостояниеДоверенности = ТекстНетПоступленияДС;
		Иначе
			СостояниеДоверенности = ТекстНетПоступленияТоваров;
		КонецЕсли;
	Иначе
		Если ДоверенностьНаДС Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СуммаОплат = Выборка.СуммаОплат;
			Если СуммаОплат = 0 Тогда
				СостояниеДоверенности = ТекстНетПоступленияДС;
			ИначеЕсли СуммаОплат = Объект.СуммаДокумента Тогда
				СостояниеДоверенности = ТекстПолноеПоступлениеДС;
			Иначе
				СостояниеДоверенности = СтрШаблон(ТекстЧастичноеПоступлениеДС, Формат(СуммаОплат, "ЧЦ=15; ЧДЦ=2; ЧРГ="));
			КонецЕсли;
		Иначе
			СостояниеДоверенности = ТекстЕстьПоступленияТоваров;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДолжностиСотрудника(ФизЛицо)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенность.Должность КАК Должность,
	|	МАКСИМУМ(Доверенность.Дата) КАК Дата
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	Доверенность.ФизЛицо = &ФизЛицо
	|	И Доверенность.Должность <> """"
	|	И НЕ Доверенность.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Доверенность.Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияДействия(ДатаНачалаДействия, СрокДействия)
	
	ДатаОкончанияДействия = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		Если СрокДействия > 0 Тогда
			ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
			Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
				ДатаОкончанияДействия = 
					КалендарныеГрафики.ДатаПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, СрокДействия);
			Иначе
				ДатаОкончанияДействия = ДатаНачалаДействия + СрокДействия * 86400;
			КонецЕсли;
			Возврат ДатаОкончанияДействия;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСрокДействия(ДатаНачалаДействия, ДатаОкончанияДействия)
	
	СрокДействия = 0;
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия >= ДатаНачалаДействия Тогда
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				СрокДействия = КалендарныеГрафики.РазностьДатПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, ДатаОкончанияДействия);
			Исключение
				СрокДействия = 0;
			КонецПопытки;
		Иначе
			СрокДействия = (НачалоДня(ДатаОкончанияДействия) - НачалоДня(ДатаНачалаДействия)) / 86400;
		КонецЕсли;
	КонецЕсли;
	Возврат СрокДействия;
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоследниеПаспортныеДанныеСтрокой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ ПаспортРФ
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ ДокументУдостоверяющийЛичность
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|	И ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыФизическихЛицСрезПоследних.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПаспортРФ.ВидДокументаФизЛица ЕСТЬ NULL 
	|			ТОГДА ДокументУдостоверяющийЛичность.ВидДокументаФизЛица
	|		ИНАЧЕ ПаспортРФ.ВидДокументаФизЛица
	|	КОНЕЦ КАК ВидДокументаФизЛица
	|ПОМЕСТИТЬ ВыбранныйВидДокумента
	|ИЗ
	|	ПаспортРФ КАК ПаспортРФ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДокументУдостоверяющийЛичность КАК ДокументУдостоверяющийЛичность
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	ВыбранныйВидДокумента КАК ВыбранныйВидДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ВыбранныйВидДокумента.ВидДокументаФизЛица = ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаДетальныеЗаписи);
	Иначе
		ОчиститьДанныеПаспорта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискокУдостоверенийЛичности()
	
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	СписокДокументов.Очистить();
	СписокДокументов.Загрузить(ДокументыФизЛица(Элементы.УдостоверениеЛичности,Объект.ФизЛицо));
	Для каждого Документ Из СписокДокументов Цикл
		Элементы.УдостоверениеЛичности.СписокВыбора.Добавить(Документ.ПредставлениеДокументаФизЛица,
			Документ.ПредставлениеДокументаФизЛица);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ДокументыФизЛица(ЭлементУдостоверениеЛичности, ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачиДокументаФизЛица УБЫВ";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ТаблицаДокументовФизЛица = Новый ТаблицаЗначений;
	ТаблицаДокументовФизЛица.Колонки.Добавить("ВидДокументаФизЛица",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("СерияДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("НомерДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("КемВыданДокументФизлица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ДатаВыдачиДокументаФизЛица", Новый ОписаниеТипов("Дата"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ПредставлениеДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйДокумент = ТаблицаДокументовФизЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйДокумент,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	Возврат ТаблицаДокументовФизЛица;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПаспорта(Форма)
	
	Форма.Объект.ВидДокументаФизЛица = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	Форма.Объект.КемВыданДокументФизлица = "";
	Форма.Объект.ДатаВыдачиДокументаФизЛица = "";
	Форма.Объект.НомерДокументаФизЛица = "";
	Форма.Объект.ПредставлениеДокументаФизЛица = "";
	Форма.Объект.СерияДокументаФизЛица = "";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДокумента(Параметры)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокумента
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
			|ГДЕ
			|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо
			|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
			|	И ДокументыФизическихЛицСрезПоследних.Представление ПОДОБНО &СтрокаПоиска";
		Запрос.УстановитьПараметр("Физлицо", Параметры.Физлицо);
		Запрос.УстановитьПараметр("СтрокаПоиска","%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбора.Добавить(ВыборкаДетальныеЗаписи.ПредставлениеДокумента,ВыборкаДетальныеЗаписи.ПредставлениеДокумента);
		КонецЦикла;
	КонецЕсли;
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораДолжность()
	
	Если Не СписокДолжностейЗагружен И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		МассивДолжностейСотрудника = ДолжностиСотрудника(Объект.ФизЛицо);
		Элементы.Должность.СписокВыбора.Очистить();
		Для Каждого ДолжностьСотрудника Из МассивДолжностейСотрудника Цикл
			Элементы.Должность.СписокВыбора.Добавить(ДолжностьСотрудника);
		КонецЦикла;
		СписокДолжностейЗагружен = Истина;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьНаличныеДСНаСервере()
	
	РеализацияТоваров = Объект.ДокументОснование;
	РасшифровкаПлатежа = Документы.ПриходныйКассовыйОрдер.ПустаяСсылка().РасшифровкаПлатежа.ВыгрузитьКолонки();
	Если НЕ ТипЗнч(РеализацияТоваров) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Если ТипЗнч(РеализацияТоваров) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Ссылка.РеализацияПоЗаказам
			|");
			Запрос.УстановитьПараметр("Ссылка", РеализацияТоваров);
			РезультатЗапросаПоЗаказам = Запрос.Выполнить();
			Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
				ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
				ЗаказыКлиента.Добавить(РеализацияТоваров);
			Иначе
				ЗаказыКлиента = РеализацияТоваров;
			КонецЕсли;
		Иначе
			ЗаказыКлиента = РеализацияТоваров;
		КонецЕсли;
		Если ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			РеквизитыОснования = Новый Структура("Договор, Валюта", Объект.ДокументОснование, Объект.Валюта);
		Иначе
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваров, "Договор, Валюта");
		КонецЕсли;
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ЗаказыКлиента;
		ПараметрыЗаполненияРасшифровки.Договор          = РеквизитыОснования.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = РеквизитыОснования.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Объект.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = РеализацияТоваров;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		Объект.Валюта = РеквизитыОснования.Валюта;
	Иначе
		
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваров, "СпособКомпенсации, Договор, Валюта, СуммаДокумента");
		ОбъектыРасчетов = Новый Массив;
		Если РеквизитыОснования.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
			ОбъектыРасчетов.Добавить(РеализацияТоваров);
		Иначе
			ОбъектыРасчетов.Добавить(Неопределено);
		КонецЕсли;
		ОбъектыРасчетов.Добавить(РеквизитыОснования.Договор);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ЗаказПоставщику В (&ОбъектыРасчетов)
		|	) КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.СуммаОстаток > 0
		|");
		Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
		ВыборкаПоРасчетам = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоРасчетам.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоРасчетам);
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(РеквизитыОснования.Валюта,
			ВыборкаПоРасчетам.ВалютаВзаиморасчетов, ТекущаяДатаСеанса());
			СуммаПоСтроке = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
			НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если СуммаПоСтроке <= РеквизитыОснования.СуммаДокумента Тогда
				НоваяСтрока.Сумма = СуммаПоСтроке;
			Иначе
				НоваяСтрока.Сумма = РеквизитыОснования.СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = РеквизитыОснования.СуммаДокумента;
		КонецЕсли;
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		Объект.Валюта = РеквизитыОснования.Валюта;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоТипуДоверенности()
	
	Если Не ЗначениеЗаполнено(Объект.ТипДоверенности) Тогда
		Если Объект.Товары.Количество()>0 Тогда
			Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров;
		ИначеЕсли Объект.МатериальныеЦенности.Количество()>0 Тогда
			Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей;
		Иначе
			Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС;
		КонецЕсли;
	КонецЕсли;
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		Элементы.ГруппаДС.Видимость                          = Ложь;
		Элементы.СтраницаТовары.Видимость                    = Истина;
		Элементы.СтраницаДенежныеСредства.Видимость          = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость      = Ложь;
		Элементы.Страницы.ТекущаяСтраница                    = Элементы.СтраницаТовары;
		Элементы.Страницы.ОтображениеСтраниц                 = ОтображениеСтраницФормы.ЗакладкиСверху;
		
	ИначеЕсли Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Элементы.ГруппаДС.Видимость                          = Истина;
		Элементы.СтраницаТовары.Видимость                    = Ложь;
		Элементы.СтраницаДенежныеСредства.Видимость          = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость      = Ложь;
		Элементы.Страницы.ОтображениеСтраниц                 = ОтображениеСтраницФормы.Нет;
		
	Иначе
		Элементы.ГруппаДС.Видимость                          = Ложь;
		Элементы.СтраницаТовары.Видимость                    = Ложь;
		Элементы.СтраницаДенежныеСредства.Видимость          = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость      = Истина;
		Элементы.Страницы.ТекущаяСтраница                    = Элементы.СтраницаМатериальныеЦенности;
		Элементы.Страницы.ОтображениеСтраниц                 = ОтображениеСтраницФормы.ЗакладкиСверху;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) ТОгда
		Возврат;
	КонецЕсли;
	ДанныеЗаполнения = Объект.ДокументОснование;
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПоставщику(Знач ДокументОснование)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	ЗаказТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказыПоставщикам.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование) КАК ЗаказыПоставщикам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказТовары.Ссылка КАК Ссылка,
	|			ЗаказТовары.Номенклатура КАК Номенклатура,
	|			ЗаказТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|			ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЗаказТовары.Характеристика КАК Характеристика,
	|			ЗаказТовары.Упаковка КАК Упаковка,
	|			ЗаказТовары.КодСтроки КАК КодСтроки
	|		ИЗ
	|			Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
	|		ГДЕ
	|			ЗаказТовары.Ссылка = &ДокументОснование) КАК ЗаказТовары
	|		ПО ЗаказыПоставщикам.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	ЗаказыПоставщикам.КОформлениюОстаток > 0
	|	И ЗаказыПоставщикам.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.Выполнить();
	Объект.Товары.Загрузить(РезультатыЗапроса.Выгрузить());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаявкеНаВозвратТоваров(Знач ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураПоставщика,
	|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаявкаНаВозврат.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента = &ДокументОснование) КАК ЗаявкаНаВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказТовары.Ссылка КАК Ссылка,
	|			ЗаказТовары.Номенклатура КАК Номенклатура,
	|			ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ЗаказТовары.Характеристика КАК Характеристика,
	|			ЗаказТовары.Упаковка КАК Упаковка,
	|			ЗаказТовары.КодСтроки КАК КодСтроки
	|		ИЗ
	|			Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|		ГДЕ
	|			ЗаказТовары.Ссылка = &ДокументОснование) КАК ЗаказТовары
	|		ПО ЗаявкаНаВозврат.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	&ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|	И ЗаявкаНаВозврат.КОформлениюОстаток > 0
	|	И ЗаявкаНаВозврат.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.Упаковка,
	|	ЗаказТовары.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|ГДЕ
	|	НЕ &ИспользоватьРасширенныеВозможностиЗаказаКлиента
	|	И ЗаказТовары.Ссылка = &ДокументОснование
	|	И ЗаказТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	РезультатыЗапроса = Запрос.Выполнить();
	Объект.Товары.Загрузить(РезультатыЗапроса.Выгрузить());
КонецПроцедуры



#КонецОбласти

#КонецОбласти
