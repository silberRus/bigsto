
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	КоэффициентПересчетаИзВалютыУпрВРегл = КоэффициентПересчета(ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	ВалютаСтр = Строка(ВалютаУправленческогоУчета);
	ЕстьСчетаФактурыПоОснованию = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Объект.Ссылка).Количество() <> 0;
	ИспользоватьПартнеровКакКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");

	СтрокаЗаголовка = "%1 (%2)";
	ЗаголовокЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, НСтр("ru = 'Цена'"), ВалютаСтр);
	ЗаголовокСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, НСтр("ru = 'Сумма'"), ВалютаСтр);
	ЗаголовокНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, НСтр("ru = 'НДС'"), ВалютаСтр);

	Элементы.СобственныеТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.СобственныеТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.СобственныеТоварыСуммаНДС.Заголовок = ЗаголовокНДС;

	Элементы.ПринятаяТараЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПринятаяТараСумма.Заголовок = ЗаголовокСумма;

	Элементы.ПереданнаяТараЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПереданнаяТараСумма.Заголовок = ЗаголовокСумма;

	Элементы.ПолученныеНаКомиссиюЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПолученныеНаКомиссиюСумма.Заголовок = ЗаголовокСумма;
	Элементы.ПолученныеНаКомиссиюСуммаНДС.Заголовок = ЗаголовокНДС;
	
	Элементы.ПереданныеНаКомиссиюЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПереданныеНаКомиссиюСумма.Заголовок = ЗаголовокСумма;
	Элементы.ПереданныеНаКомиссиюСуммаНДС.Заголовок = ЗаголовокНДС;
	
	Элементы.ПереданныеПереработчикамТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПереданныеПереработчикамТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.ПереданныеПереработчикамТоварыСуммаНДС.Заголовок = ЗаголовокНДС;
	
	Элементы.ПереданныеВПроизводствоТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.ПереданныеВПроизводствоТоварыСуммаНДС.Заголовок = ЗаголовокНДС;
	
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	Элементы.ГруппаВводОстатковПо.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковНаКомиссию.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковПереданныеНаКомиссию.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковПринятаяТара.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковПереданнаяТара.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковПереданныеПереработчикам.Видимость = ИспользоватьРеглУчет;
	Элементы.ГруппаВводОстатковПереданныеВПроизводство.Видимость = ИспользоватьРеглУчет;
	
	УстановитьЗаголовок();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Объект.ЦенаВключаетНДС = Истина;
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	МенеджерОбязателенКЗаполнению = (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ВПодразделенииВедетсяОбособленныйУчетПоМенеджерам(Объект.Подразделение));
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(
		ЭтаФорма, "СобственныеТовары,ПолученныеНаКомиссию,ПереданныеНаКомиссию,ПринятаяТара,ПереданнаяТара,ПереходНаАдресноеХранение,ПереданныеВПроизводствоТовары");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
		ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров") Тогда
		ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НастроитьПредставлениеСчетаФактуры(Ложь);

	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
											Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
	ЗаполнитьПризнакЕстьДетализацияПартий();
	
	УстановитьЗаголовок();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, КэшированныеЗначения);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента" Тогда
		НастроитьПредставлениеСчетаФактуры(Ложь);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		ТекущиеДанные = Элементы[ИмяТекущейТаблицыФормы].ДанныеСтроки(ВыбранноеЗначение.ИдентификаторТекущейСтроки);
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Назначения.Форма.ФормаВыбора" Тогда
		Элементы.ПереходНаАдресноеХранениеТовары.ТекущиеДанные.Назначение = ВыбранноеЗначение;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ВводОстатков.Форма.ФормаПодбораТоваровИзЗаказаПереработчику" Тогда
		ОбработкаПодбораТоваровИзЗаказаПереработчику(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
	
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
	
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
	
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров") Тогда
		ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам ИЛИ НЕ ПоЗаказу  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗаказПереработчику");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВОперативномУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУиНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказуПриИзменении(Элемент)
	
	Возврат; // чтобы метод не был пустым в УТ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСобственныеТовары

&НаКлиенте
Процедура СобственныеТоварыДатаПриИзменении(Элемент)

	ДатаПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров") Тогда
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПодразделениеПриИзменении(Элемент)
	
	МенеджерОбязателенКЗаполнению = ВПодразделенииВедетсяОбособленныйУчетПоМенеджерам(Объект.Подразделение);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыКонтрагентПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСкладПриИзменении(Элемент)

	СкладПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПомещениеПриИзменении(Элемент)

	ПомещениеПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыНоменклатураПриИзменении(Элемент)

	НоменклатураПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыКоличествоУпаковокПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыЦенаПриИзменении(Элемент)

	ЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСуммаПриИзменении(Элемент)

	СуммаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСтавкаНДСПриИзменении(Элемент)

	СтавкаНДСПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПослеУдаления(Элемент)

	ТаблЧастьПослеУдаления(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
				
	Если НоваяСтрока ИЛИ Копирование Тогда
		Элемент.ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		ЗаполнитьПризнакЕстьДетализацияПартийПоСтроке(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТаблЧастьПриОкончанииРедактирования(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.СобственныеТовары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.СобственныеТовары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТекущиеДанные = Элементы.СобственныеТовары.ТекущиеДанные;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СобственныеТоварыДетализацияПартий" Тогда;
		
		ОткрытьФормаДетализацияПартий(ВыбраннаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПринятаяТара

&НаКлиенте
Процедура ПринятаяТараДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараСкладПриИзменении(Элемент)

	СкладПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПомещениеПриИзменении(Элемент)

	ПомещениеПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараНоменклатураПриИзменении(Элемент)

	ВозвратнаяТараНоменклатураПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараКоличествоУпаковокПриИзменении(Элемент)

	ВозвратнаяТараКоличествоПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараУпаковкаПриИзменении(Элемент)

	ВозвратнаяТараУпаковкаПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараЦенаПриИзменении(Элемент)

	ВозвратнаяТараЦенаПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараСуммаПриИзменении(Элемент)

	ВозвратнаяТараСуммаПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСуммаРеглПриИзменении(Элемент)
	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереданнаяТара

&НаКлиенте
Процедура ПереданнаяТараДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараНоменклатураПриИзменении(Элемент)

	ВозвратнаяТараНоменклатураПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараКоличествоУпаковокПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараУпаковкаПриИзменении(Элемент)

	ВозвратнаяТараУпаковкаПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараЦенаПриИзменении(Элемент)

	ВозвратнаяТараЦенаПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараСуммаПриИзменении(Элемент)

	ВозвратнаяТараСуммаПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолученныеНаКомиссию

&НаКлиенте
Процедура ПолученныеНаКомиссиюДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСкладПриИзменении(Элемент)

	СкладПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСоглашениеСКомитентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтруктураДополнительногоОтбора = Новый Структура;
	СтруктураДополнительногоОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(Элемент,
													СтандартнаяОбработка,
													Объект.Партнер,
													Объект.СоглашениеСКомитентом,
													Объект.Дата,
													СтруктураДополнительногоОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПомещениеПриИзменении(Элемент)

	ПомещениеПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСоглашениеСКомитентомПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.СоглашениеСКомитентом) Тогда
		ЗаполнитьПоСоглашениюСервер();
	КонецЕсли;
	Элементы.ПолученныеНаКомиссиюВалюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);
	Элементы.ПолученныеНаКомиссиюНалогообложениеНДС.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюНоменклатураПриИзменении(Элемент)

	НоменклатураПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСуммаПриИзменении(Элемент)
	
	СуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПослеУдаления(Элемент)
	
	ТаблЧастьПослеУдаления(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТаблЧастьПриОкончанииРедактирования(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПолученныеНаКомиссию.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Стр.СуммаБезНДС = Стр.Сумма;
		КонецЦикла;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПолученныеНаКомиссию.ТекущиеДанные;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Стр.СуммаБезНДС = Стр.Сумма;
		КонецЦикла;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСерияПриИзменении(Элемент)	
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПолученныеНаКомиссию.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПолученныеНаКомиссию.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТекущиеДанные = Элементы.ПолученныеНаКомиссию.ТекущиеДанные;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереданныеНаКомиссию

&НаКлиенте
Процедура ПереданныеНаКомиссиюДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСоглашениеСКомиссионеромНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.СоглашениеСКомиссионером;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация       = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюНоменклатураПриИзменении(Элемент)

	НоменклатураПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюКоличествоУпаковокПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюЦенаПриИзменении(Элемент)

	ЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСуммаПриИзменении(Элемент)

	СуммаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСтавкаНДСПриИзменении(Элемент)

	СтавкаНДСПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПереданныеНаКомиссиюДетализацияПартий" Тогда;
		
		ОткрытьФормаДетализацияПартий(ВыбраннаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереходНаАдресноеХранениеТовары

&НаКлиенте
Процедура ПереходНаАдресноеХранениеДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеСкладПриИзменении(Элемент)

	СкладПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеПомещениеПриИзменении(Элемент)

	ПомещениеПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыНоменклатураПриИзменении(Элемент)

	НоменклатураПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыУпаковкаПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТаблЧастьПриОкончанииРедактирования(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыПослеУдаления(Элемент)

	ТаблЧастьПослеУдаления(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаАдресноеХранениеТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПереходНаАдресноеХранениеТовары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПереходНаАдресноеХранениеТовары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТекущиеДанные = Элементы.ПереходНаАдресноеХранениеТовары.ТекущиеДанные;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереданныеПереработчикамТовары

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.ЗаказПереработчику) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
	Исключение
		ПоказатьПредупреждение(, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(Объект.ЗаказПереработчику) Тогда
			
			КодСтрокиЗаказа = Новый Структура("КодСтроки, ЗаказПереработчику", СтрокаТЧ.КодСтроки, Объект.ЗаказПереработчику);
			МассивКодовСтрок.Добавить(КодСтрокиЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗаказПереработчику", Объект.ЗаказПереработчику);
	ПараметрыПодбора.Вставить("ВалютаДокумента",    ВалютаУправленческогоУчета);
	ПараметрыПодбора.Вставить("ДокументВводаОстатков",           Объект.Ссылка);
	ПараметрыПодбора.Вставить("Склад",              Объект.Склад);
	ПараметрыПодбора.Вставить("Дата",               Объект.Дата);
	ПараметрыПодбора.Вставить("МассивКодовСтрок",   МассивКодовСтрок);
	
	ФормаПодбораТоваровИзЗаказа = "Документ.ВводОстатков.Форма.ФормаПодбораТоваровИзЗаказаПереработчику";
	ОткрытьФорму(ФормаПодбораТоваровИзЗаказа, ПараметрыПодбора, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзменении(Элемент)
	
	Если ЗаказПереработчику = Объект.ЗаказПереработчику Тогда 
		Возврат;
	КонецЕсли;
		
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список переданных переработчику товаров будет очищен. Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзмененииЗавершение", 
										ЭтотОбъект, Новый Структура("ОчищатьСтроки", Ложь));
										
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
			
	КонецЕсли;
	
	ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзмененииФрагмент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыПартнерПриИзменении(Элемент)

	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОчищатьСтроки = ДополнительныеПараметры.ОчищатьСтроки;
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        ЗаказПереработчику = Объект.ЗаказПереработчику;
        Возврат;
    Иначе
        ОчищатьСтроки = Истина;
    КонецЕсли;
    
    ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзмененииФрагмент(ОчищатьСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПоЗаказуПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        ПоЗаказу = Ложь;
		Элементы.ПереданныеПереработчикамТоварыЗаказПереработчику.ТолькоПросмотр = Истина;
    Иначе
        Объект.Товары.Очистить();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыЗаказПереработчикуПриИзмененииФрагмент(Знач ОчищатьСтроки)
    
    ЗаказПереработчикуПриИзмененииСервер(ОчищатьСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыКоличествоУпаковокПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыЦенаПриИзменении(Элемент)

	ЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыСуммаПриИзменении(Элемент)

	СуммаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыНоменклатураПриИзменении(Элемент)

	НоменклатураПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеПереработчикамТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПереданныеПереработчикамТоварыДетализацияПартий" Тогда;
		
		ОткрытьФормаДетализацияПартий(ВыбраннаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПереданныеВПроизводствоТовары

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыПодразделениеПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТаблЧастьПриОкончанииРедактирования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыПослеУдаления(Элемент)
	
	ТаблЧастьПослеУдаления(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыУпаковкаПриИзменении(Элемент)
	
	УпаковкаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыСуммаПриИзменении(Элемент)
	
	СуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыКоличествоУпаковокПриИзменении(Элемент)

	КоличествоПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПереданныеВПроизводствоТовары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПереданныеВПроизводствоТовары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТекущиеДанные = Элементы.ПереданныеВПроизводствоТовары.ТекущиеДанные;
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеВПроизводствоТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПереданныеВПроизводствоТоварыДетализацияПартий" Тогда;
		
		ОткрытьФормаДетализацияПартий(ВыбраннаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УказатьСерии(Команда)

	ОткрытьПодборСерий();

КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииПолученныхНаКомиссию(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииПереходНаАдресноеХранение(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)

	ТаблицаФормы  = Элементы[ИмяТекущейТаблицыФормы];
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ВводОстатков.ФормаТовары.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;

	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'ввод остатков'"));
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",		Объект.СоглашениеСКомиссионером);
	ПараметрыФормы.Вставить("Валюта",			ВалютаУправленческогоУчета);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",	Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", ЭтоОстаткиПринятыхНаКомиссиюТоваров);
	Если ЭтоОстаткиПереданнойТары ИЛИ ЭтоОстаткиПринятойТары Тогда
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	Иначе
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если ЭтоОстаткиПереданныхВПроизводствоТоваров Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	КонецЕсли;	
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Ложь);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Ложь);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("ПоказыватьПодобранныеТовары", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);

	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.СобственныеТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.СобственныеТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровНеВЯчейках(Команда)
	ЗаполнитьОстаткамиТоваровНеВЯчейкахСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиТоваровНаПустомПомещении(Команда)
	ЗаполнитьОстаткамиТоваровНаПустомПомещенииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЗагружатьГТД", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	МассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТипов);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереходНаАдресноеХранениеТоварыУпаковка"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "ИспользоватьАдресноеХранение", Истина);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.Товары.Упаковка", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.Товары.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереходНаАдресноеХранениеТоварыУпаковка"].Имя);

	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ИспользоватьАдресноеХранение", Ложь);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.Товары.ТипНоменклатуры", 
		Перечисления.ТипыНоменклатуры.Товар, ВидСравненияКомпоновкиДанных.НеРавно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.Товары.ТипИзмеряемойВеличины",
		Перечисления.ТипыИзмеряемыхВеличин.КоличествоШтук, ВидСравненияКомпоновкиДанных.НеРавно);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Снимает отметку проверки заполнения у реквизита "Упаковка"
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеНаКомиссиюУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданнаяТараУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеПереработчикамТоварыУпаковка"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеВПроизводствоТоварыУпаковка"].Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "СобственныеТоварыХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПолученныеНаКомиссиюХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПереданныеНаКомиссиюХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПринятаяТараХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПереданнаяТараХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПереходНаАдресноеХранениеТоварыХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПереданныеПереработчикамТоварыХарактеристика");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ПереданныеВПроизводствоТоварыХарактеристика");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "СобственныеТоварыНомерГТД");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ПолученныеНаКомиссиюНомерГТД");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ПереданныеНаКомиссиюНомерГТД");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ПринятаяТараНомерГТД");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ПереданнаяТараНомерГТД");
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма, "ПереданныеПереработчикамТоварыНомерГТД");

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "СобственныеТоварыНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПолученныеНаКомиссиюНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПереданныеНаКомиссиюНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПринятаяТараНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПереданнаяТараНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПереходНаАдресноеХранениеТоварыНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПереданныеПереработчикамТоварыНоменклатураЕдиницаИзмерения");
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ПереданныеВПроизводствоТоварыНоменклатураЕдиницаИзмерения");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыПартнер"].Имя);
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.ТипОперации", СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке);

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыПартнер"].Имя);

	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.ТипОперации", СписокЗначений, ВидСравненияКомпоновкиДанных.ВСписке);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ПартнерыИКонтрагентыРаздельно", Ложь);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.Партнер", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьСчетаФактурыПоОснованию", Истина);

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыКонтрагент"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеНаКомиссиюКонтрагент"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюКонтрагент"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараКонтрагент"].Имя);

	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	СписокЗначений.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.ТипОперации", СписокЗначений, ВидСравненияКомпоновкиДанных.НеВСписке);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "ЕстьСчетаФактурыПоОснованию", Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыКонтрагент"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюКонтрагент"].Имя);
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.ТипОперации",
		Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию,
		ВидСравненияКомпоновкиДанных.Равно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию, ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь, "СобственныеТоварыСерия");	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь, "ПолученныеНаКомиссиюСерия");	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь, "ПереходНаАдресноеХранениеТоварыСерия");	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, Ложь, "ПереданныеВПроизводствоТоварыСерия");	
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь, "СобственныеТоварыСтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь, "ПолученныеНаКомиссиюСтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь, "ПереходНаАдресноеХранениеТоварыСтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма, Ложь, "ПереданныеВПроизводствоТоварыСтатусУказанияСерий");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараЦена"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараСумма"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараСуммаРегл"].Имя);

	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.Товары.ПредусмотренЗалогЗаТару", Ложь);

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПринятаяТараЦена"].Имя);

	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(Элемент.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.Товары.ПредусмотренЗалогЗаТару", Истина);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаОтбора, "Объект.Товары.Цена", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюЦена"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюСумма"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюСуммаРегл"].Имя);

	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.ТипОперации", Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыПодразделение"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеНаКомиссиюПодразделение"].Имя);

	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.ТипОперации",
		Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство, ВидСравненияКомпоновкиДанных.НеРавно);

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма, "ПереходНаАдресноеХранениеТоварыНазначение");
																		  
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыСуммаСНДС"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПолученныеНаКомиссиюСуммаСНДС"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеНаКомиссиюСуммаСНДС"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеПереработчикамТоварыСуммаСНДС"].Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["ПереданныеВПроизводствоТоварыСуммаСНДС"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.ЦенаВключаетНДС", Истина);

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы["СобственныеТоварыМенеджер"].Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "МенеджерОбязателенКЗаполнению", Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СобственныеТоварыПартия.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ПолученныеНаКомиссиюПартия.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ПереданныеНаКомиссиюПартия.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ПринятаяТараПартия.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ПереданныеПереработчикамПартия.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.ПереданныеВПроизводствоТоварыПартия.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "МетодОценкиСтоимости", Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка, ВидСравненияКомпоновкиДанных.НеРавно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, "Объект.НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию, ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	//

КонецПроцедуры

#Область ОбщиеОбработчикиСобытийТабличныхЧастей

&НаКлиенте
Процедура НоменклатураПриИзменении(ИдентификаторТекущейСтроки = Неопределено)
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Объект[ПараметрыУказанияСерий.ИмяПоляСклад], ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТекущейТаблицыФормы)); 
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) ИЛИ ИдентификаторТекущейСтроки = Неопределено Тогда
		ТекущаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры(ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	УпаковкаПриИзменении(ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении()

	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(ИдентификаторТекущейСтроки = Неопределено)

	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;
	КонецЕсли;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));

	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;

	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении()

	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении()

	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении()

	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТаблЧастьПриОкончанииРедактирования(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда

		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();

		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблЧастьПослеУдаления(Элемент)

	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда

		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбщиеОбработчикиСобытийТабличныхЧастейВозвратнойТары

&НаКлиенте
Процедура ВозвратнаяТараНоменклатураПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ТаблЧасть.Имя));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараКоличествоПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Стр.СуммаБезНДС = Стр.Сумма;
		КонецЦикла;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараУпаковкаПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;

	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараЦенаПриИзменении(ТаблЧасть)

	ЦенаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ВозвратнаяТараСуммаПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервереБезКонтекста
Функция КоэффициентПересчета(ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Возврат РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
											ВалютаУправленческогоУчета,
											ВалютаРегламентированногоУчета,
											?(ДатаДокумента = Дата(1,1,1), ТекущаяДатаСеанса(), ДатаДокумента));
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		НастроитьПредставлениеСчетаФактуры(Ложь);
		АктуализироватьВидДеятельностиНДС();
		ЗаполнитьНалогообложениеНДС();
		ПолучитьМетодОценкиСтоимостиТоваров();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	КоэффициентПересчетаИзВалютыУпрВРегл = КоэффициентПересчета(ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	УстановитьВидимость();
	АктуализироватьВидДеятельностиНДС();
	ЗаполнитьНалогообложениеНДС();
	ПолучитьМетодОценкиСтоимостиТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	НастроитьПредставлениеСчетаФактуры(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()

	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	АктуализироватьВидДеятельностиНДС();
	
	Если ЭтоПереходНаАдресноеХранение 
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		
		Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Объект.Склад, Объект.Помещение, Объект.ЗонаПриемки);
		
	КонецЕсли;
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата, Истина);
	
	УстановитьВидимость();
	УстановитьВидимостьЗоныПриемки();
	
КонецПроцедуры

&НаСервере
Процедура ПомещениеПриИзмененииСервер()

	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	
	Если ЭтоПереходНаАдресноеХранение
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		
		Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Объект.Склад, Объект.Помещение, Объект.ЗонаПриемки);
		
	КонецЕсли;
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата, Истина);
	
	УстановитьВидимостьЗоныПриемки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСоглашениюСервер()

	Реквизиты = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.СоглашениеСКомитентом);

	Если Реквизиты.Склад <> Объект.Склад Тогда
		Объект.Склад = Реквизиты.Склад;
		Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию;
		УстановитьПараметрыВыбораСкладаПомещения();
		УстановитьВидимость();
		СкладПриИзмененииСервер();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, Реквизиты,, "Склад");

КонецПроцедуры

&НаСервере
Процедура ЗаказПереработчикуПриИзмененииСервер(ОчищатьСтроки)
	
	Объект.ЗаказПереработчику = ЗаказПереработчику;
	
	Если Объект.Товары.Количество() > 0 И ОчищатьСтроки Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Т.Партнер КАК Партнер,
	|	Т.Контрагент КАК Контрагент,
	|	Т.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС,
	|	Т.Подразделение КАК Подразделение,
	|	Т.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Т
	|ГДЕ Т.Ссылка = &Заказ
	|");
	
	Запрос.УстановитьПараметр("Заказ", Объект.ЗаказПереработчику);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Выборка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтавкаНДСНоменклатуры(Номенклатура)

	Возврат Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(Номенклатура).СтавкаНДС;

КонецФункции

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	СтруктураДействий = Новый Структура;
	Если Не Объект.ЦенаВключаетНДС Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Стр.СуммаБезНДС = Стр.Сумма;
		КонецЦикла;
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
	СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)

	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСПоНоменклатуре");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));

	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, ЭтаФорма);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, ЭтаФорма);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды								 = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий				 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество 					 = Истина;
	ДобавитьПроверкуВозможностиДобавленияНоменклатуры(СтруктураДействий);
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);

	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;

	Если СтруктураДействий.Свойство("ТекущаяСтрока") И СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы[ИмяТекущейТаблицыФормы].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)

	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроверкуВозможностиДобавленияНоменклатуры(СтруктураДействий)

	Если ЭтоОстаткиСобственныхТоваров ИЛИ ЭтоОстаткиПереданныхНаКомиссиюТоваров
		ИЛИ ЭтоОстаткиПринятыхНаКомиссиюТоваров Тогда
		СтруктураДействий.ТолькоТовары = Истина;
	КонецЕсли;
	Если ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары Тогда
		СтруктураДействий.ТолькоТара = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	ТабличноеПоле = Элементы[ИмяТекущейТаблицыФормы];
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст,ТекущиеДанные) Тогда
		
		ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);

		ЗначениеВозврата = Неопределено;


		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)

	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);

КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЭтаФорма);
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий);

КонецПроцедуры

#КонецОбласти

#Область Счетфактура

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры
	
&НаСервере
Процедура НастроитьПредставлениеСчетаФактуры(НеТребуетсяВводСчетаФактуры = Неопределено)
			
		ЭтаФорма.ТекстСчетФактура = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
			Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
		ЕстьСчетаФактурыПоОснованию = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Объект.Ссылка).Количество() <> 0;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.СобственныеТовары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок");
		ТекущаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры(ТекущаяСтрока.Номенклатура);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины", Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполнения);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СобственныеТоварыВставитьСтроки");
	МассивЭлементов.Добавить("СобственныеТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СобственныеТоварыВставитьСтроки");
	МассивЭлементов.Добавить("СобственныеТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата, Истина);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВводОстатков));
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство  Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Подразделение", Объект.Подразделение));
	Иначе
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
	КонецЕсли; 

	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
		И (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
			ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
			ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	
	ЭтоОстаткиПринятойТары = (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	ЭтоОстаткиПереданнойТары = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам;
	
	ЭтоОстаткиСобственныхТоваров = (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	
	ЭтоОстаткиПереданныхНаКомиссиюТоваров = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию;
	
	ЭтоОстаткиПринятыхНаКомиссиюТоваров = (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
	
	ЭтоОстаткиПереданныхПереработчикамТоваров =  Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам;
	ЭтоОстаткиПереданныхВПроизводствоТоваров = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство;
	ЭтоПереходНаАдресноеХранение   = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеАдресногоХраненияОстатков;
	
	ЭтоПереходНаСкладскиеПомещения = Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений;
	
	ЗаказПереработчику = Объект.ЗаказПереработчику;
	ПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПереработчику);
	Элементы.ПереданныеПереработчикамТоварыЗаказПереработчику.ТолькоПросмотр = НЕ ПоЗаказу;
	ИспользуютсяОрдерныеСклады = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	УстановитьВидимость();
	УстановитьПараметрыВыбораСкладаПомещения();
	УстановитьПараметрыВыбораВидаЗапасов();
	УстановитьПараметрыВыбораПартнера();
	УстановитьПараметрыВыбораНоменклатуры();
	
	Элементы.ПолученныеНаКомиссиюВалюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);
	Элементы.ПолученныеНаКомиссиюНалогообложениеНДС.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
											Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
	НастроитьПредставлениеСчетаФактуры(Ложь);
	
	ЗаполнитьПризнакЕстьДетализацияПартий();
	
	ИспользуютсяОрдерныеСклады = ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады");
	
	АктуализироватьВидДеятельностиНДС(Ложь);
	ПолучитьМетодОценкиСтоимостиТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, КэшированныеЗначения)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Цена");
		ТекущаяСтрока.СтавкаНДС = СтавкаНДСНоменклатуры(ТекущаяСтрока.Номенклатура);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

		СтруктураДействий = Новый Структура;
		Если Не Объект.ЦенаВключаетНДС Тогда
			Для Каждого Стр из Объект.Товары Цикл
				ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
			КонецЦикла;
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
		Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
			СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
		КонецЕсли;
	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
											Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	Элементы.ГруппаСобственныеТовары.Видимость		= ЭтоОстаткиСобственныхТоваров;
	Если Элементы.ГруппаСобственныеТовары.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.СобственныеТовары.Имя;
	КонецЕсли;
															
	Элементы.ГруппаПолученныеНаКомиссию.Видимость		= ЭтоОстаткиПринятыхНаКомиссиюТоваров;
	Если Элементы.ГруппаПолученныеНаКомиссию.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПолученныеНаКомиссию.Имя;
	КонецЕсли;
																
	Элементы.ГруппаПереданныеНаКомиссию.Видимость		= ЭтоОстаткиПереданныхНаКомиссиюТоваров;
	Если Элементы.ГруппаПереданныеНаКомиссию.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПереданныеНаКомиссию.Имя;
	КонецЕсли;
	
	Элементы.ГруппаПереданныеПереработчикамТовары.Видимость		= ЭтоОстаткиПереданныхПереработчикамТоваров;
	Если Элементы.ГруппаПереданныеПереработчикамТовары.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПереданныеПереработчикамТовары.Имя;
	КонецЕсли;
	
	Элементы.ГруппаПереданныеВПроизводствоТовары.Видимость		= ЭтоОстаткиПереданныхВПроизводствоТоваров;
	Если Элементы.ГруппаПереданныеВПроизводствоТовары.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПереданныеВПроизводствоТовары.Имя;
	КонецЕсли;
	
	Элементы.ГруппаПринятаяТара.Видимость		= ЭтоОстаткиПринятойТары;
	Если Элементы.ГруппаПринятаяТара.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПринятаяТара.Имя;
	КонецЕсли;
														
	Элементы.ГруппаПереданнаяТара.Видимость		= ЭтоОстаткиПереданнойТары;
	Если Элементы.ГруппаПереданнаяТара.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПереданнаяТара.Имя;
	КонецЕсли;
	
	Элементы.ГруппаПереходНаАдресноеХранение.Видимость = ЭтоПереходНаАдресноеХранение Или ЭтоПереходНаСкладскиеПомещения;
	Если Элементы.ГруппаПереходНаАдресноеХранение.Видимость Тогда
		ИмяТекущейТаблицыФормы = Элементы.ПереходНаАдресноеХранениеТовары.Имя;
		Элементы.ПереходНаАдресноеХранениеЗонаПриемки.Видимость                                      = ЭтоПереходНаАдресноеХранение;
		Элементы.ПереходНаАдресноеХранениеТоварыЗаполнитьОстаткамиТоваровНаСкладе.Видимость          = ЭтоПереходНаАдресноеХранение;
		Элементы.ПереходНаАдресноеХранениеТоварыЗаполнитьОстаткамиТоваровНаПустомПомещении.Видимость = ЭтоПереходНаСкладскиеПомещения;
	КонецЕсли;
	
	Элементы.СобственныеТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.СобственныеТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.СобственныеТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПолученныеНаКомиссиюУказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПолученныеНаКомиссиюСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПолученныеНаКомиссиюСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПереходНаАдресноеХранениеТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПереходНаАдресноеХранениеТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПереходНаАдресноеХранениеТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПереданныеВПроизводствоТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПереданныеВПроизводствоТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ПереданныеВПроизводствоТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	ЗаполнениеПоОстаткам = НЕ Объект.ОтражатьВОперативномУчете И (Объект.ОтражатьВБУиНУ ИЛИ Объект.ОтражатьВУУ);
	Элементы.СобственныеТоварыЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	Элементы.ПолученныеНаКомиссиюЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	Элементы.ПереданныеНаКомиссиюЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	Элементы.ПринятаяТараЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	Элементы.ПереданныеПереработчикамТоварыЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	Элементы.ПереданныеВПроизводствоТоварыЗаполнитьПоОстаткам.Видимость = ЗаполнениеПоОстаткам;
	
	ВидимостьРеквизитовРегл = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВБУиНУ;
	Элементы.СобственныеТоварыСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.СобственныеТоварыНДСРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.СобственныеТоварыСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.СобственныеТоварыСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПолученныеНаКомиссиюСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПолученныеНаКомиссиюНДСРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПолученныеНаКомиссиюСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПолученныеНаКомиссиюСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПереданныеНаКомиссиюСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеНаКомиссиюНДСРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеНаКомиссиюСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеНаКомиссиюСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПринятаяТараСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПринятаяТараСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПринятаяТараСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПринятаяТараСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПринятаяТараСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПринятаяТараСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПереданнаяТараСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданнаяТараСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданнаяТараСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПереданныеПереработчикамТоварыСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеПереработчикамТоварыНДСРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеПереработчикамТоварыСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеПереработчикамТоварыСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	Элементы.ПереданныеВПроизводствоТоварыСуммаРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеВПроизводствоТоварыНДСРегл.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеВПроизводствоТоварыСуммаПР.Видимость = ВидимостьРеквизитовРегл;
	Элементы.ПереданныеВПроизводствоТоварыСуммаВР.Видимость = ВидимостьРеквизитовРегл;
	
	ВидимостьРеквизитовУпр = Объект.ОтражатьВОперативномУчете ИЛИ Объект.ОтражатьВУУ;
	Элементы.СобственныеТоварыЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.СобственныеТоварыСумма.Видимость = ВидимостьРеквизитовУпр;
	Элементы.СобственныеТоварыСуммаБезНДС.Видимость = ВидимостьРеквизитовУпр;
	Элементы.СобственныеТоварыСуммаНДС.Видимость = ВидимостьРеквизитовУпр;

	Элементы.ПолученныеНаКомиссиюЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПолученныеНаКомиссиюСумма.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПолученныеНаКомиссиюСуммаБезНДС.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПолученныеНаКомиссиюСуммаНДС.Видимость = ВидимостьРеквизитовУпр;
	
	Элементы.ПереданныеНаКомиссиюЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеНаКомиссиюСумма.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеНаКомиссиюСуммаБезНДС.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеНаКомиссиюСуммаНДС.Видимость = ВидимостьРеквизитовУпр;
	
	Элементы.ПринятаяТараЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПринятаяТараСумма.Видимость = ВидимостьРеквизитовУпр;
	
	Элементы.ПереданнаяТараЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданнаяТараСумма.Видимость = ВидимостьРеквизитовУпр;
	
	Элементы.ПереданныеПереработчикамТоварыЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеПереработчикамТоварыСумма.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеПереработчикамТоварыСуммаБезНДС.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеПереработчикамТоварыСуммаНДС.Видимость = ВидимостьРеквизитовУпр;
	
	Элементы.ПереданныеВПроизводствоТоварыЦена.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеВПроизводствоТоварыСумма.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеВПроизводствоТоварыСуммаБезНДС.Видимость = ВидимостьРеквизитовУпр;
	Элементы.ПереданныеВПроизводствоТоварыСуммаНДС.Видимость = ВидимостьРеквизитовУпр;
	
	ИспользоватьВводОстатковВерсии24 = ПолучитьФункциональнуюОпцию("ИспользоватьВводОстатковВерсии24");
	Элементы.ГруппаПартнер.Видимость = НЕ ИспользоватьВводОстатковВерсии24;
	Элементы.ГруппаКонтрагент.Видимость = НЕ ИспользоватьВводОстатковВерсии24;
	
	Элементы.ПринятаяТараКонтрагент.Видимость = НЕ ИспользоватьВводОстатковВерсии24;
	
	УстановитьВидимостьЗоныПриемки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = Документы.ВводОстатков.ЗаголовокДокументаПоТипуОперации(Объект.Ссылка,
																						  Объект.Номер,
																						  Объект.Дата,
																						  Объект.ТипОперации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗоныПриемки()
	
	ЗонаПриемкиВидимость = Ложь;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
	
		ЗонаПриемкиВидимость = ИспользоватьАдресноеХранение;
			
	КонецЕсли;
	
	Если Элементы.ГруппаСобственныеТовары.Видимость Тогда
		Элементы.СобственныеТоварыЗонаПриемки.Видимость = ЗонаПриемкиВидимость;
	ИначеЕсли Элементы.ГруппаПолученныеНаКомиссию.Видимость Тогда
		Элементы.ПолученныеНаКомиссиюЗонаПриемки.Видимость = ЗонаПриемкиВидимость;
	ИначеЕсли Элементы.ГруппаПринятаяТара.Видимость Тогда
		Элементы.ПринятаяТараЗонаПриемки.Видимость = ЗонаПриемкиВидимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Форма)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);

	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Форма.Объект.ТипОперации));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
	СтруктураДействий.Вставить("ПересчитатьСуммуРегл", Форма.КоэффициентПересчетаИзВалютыУпрВРегл);
	Если НЕ (Форма.ЭтоОстаткиПринятойТары ИЛИ Форма.ЭтоОстаткиПереданнойТары) Тогда
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСкладаПомещения()

	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		
		Возврат;
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ПереходНаИспользованиеСкладскихПомещений Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ИспользоватьСкладскиеПомещения",Истина);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
	Иначе
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения);
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.НастройкаАдресногоХранения",Новый ФиксированныйМассив(МассивНастроек));
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
	КонецЕсли;

	Элементы.СобственныеТоварыСклад.ПараметрыВыбора             = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПолученныеНаКомиссиюСклад.ПараметрыВыбора          = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СобственныеТоварыПомещение.ПараметрыВыбора         = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПолученныеНаКомиссиюПомещение.ПараметрыВыбора      = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПринятаяТараСклад.ПараметрыВыбора                  = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПринятаяТараПомещение.ПараметрыВыбора              = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПереходНаАдресноеХранениеСклад.ПараметрыВыбора     = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПереходНаАдресноеХранениеПомещение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЗапасов()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ТипОперации"));

	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.СобственныеТовары.ТекущиеДанные.Номенклатура"));
	КонецЕсли;
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Партнер"));
	КонецЕсли;
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
	 ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Комитент", "Объект.Партнер"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Договор", "Объект.Договор"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Соглашение", "Объект.СоглашениеСКомитентом"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.НалогообложениеНДС", "Объект.НалогообложениеНДС"));
	КонецЕсли;

	Элементы.СобственныеТоварыВидЗапасов.СвязиПараметровВыбора		= Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПолученныеНаКомиссиюВидЗапасов.СвязиПараметровВыбора	= Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПереданныеНаКомиссиюВидЗапасов.СвязиПараметровВыбора	= Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам Тогда
		МассивПараметров = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.ПереданныеПереработчикамТоварыПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если ЭтоОстаткиПереданнойТары ИЛИ ЭтоОстаткиПринятойТары Тогда
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивЗначений)));
		ПараметрыВыбораНоменклатуры = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПринятаяТараНоменклатура.ПараметрыВыбора = ПараметрыВыбораНоменклатуры;
		Элементы.ПереданнаяТараНоменклатура.ПараметрыВыбора = ПараметрыВыбораНоменклатуры;
	ИначеЕсли ЭтоОстаткиПереданныхВПроизводствоТоваров Тогда
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		МассивЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивЗначений.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивЗначений)));
		ПараметрыВыбораНоменклатуры = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПереданныеВПроизводствоТоварыНоменклатура.ПараметрыВыбора = ПараметрыВыбораНоменклатуры;
	Иначе
		МассивПараметров = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ТипНоменклатуры",Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.СобственныеТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПолученныеНаКомиссиюНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПереданныеНаКомиссиюНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиТоваровНеВЯчейкахСервер()
	
	Объект.Товары.Очистить();
	Объект.Серии.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазницаВОстатках.Номенклатура КАК Номенклатура,
	|	РазницаВОстатках.Характеристика КАК Характеристика,
	|	РазницаВОстатках.Назначение КАК Назначение,
	|	РазницаВОстатках.Серия,
	|	СУММА(РазницаВОстатках.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(РазницаВОстатках.Количество) КАК Количество
	|ПОМЕСТИТЬ РазницаВОстаткахДляЗапроса
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУпаковок,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ДатаОстатков,
	|				Склад = &Склад
	|					И Помещение = &Помещение) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Номенклатура,
	|		ТоварыВЯчейкахОстатки.Характеристика,
	|		ТоварыВЯчейкахОстатки.Назначение,
	|		ТоварыВЯчейкахОстатки.Серия,
	|		-ТоварыВЯчейкахОстатки.ВНаличииОстаток * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1),
	|		-ТоварыВЯчейкахОстатки.ВНаличииОстаток * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				&ДатаОстатков,
	|				Ячейка.Владелец = &Склад
	|					И Ячейка.Помещение = &Помещение) КАК ТоварыВЯчейкахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыВЯчейках.Номенклатура,
	|		ТоварыВЯчейках.Характеристика,
	|		ТоварыВЯчейках.Назначение,
	|		ТоварыВЯчейках.Серия,
	|		ТоварыВЯчейках.ВНаличии,
	|		ТоварыВЯчейках.ВНаличии
	|	ИЗ
	|		РегистрНакопления.ТоварыВЯчейках КАК ТоварыВЯчейках
	|	ГДЕ
	|		ТоварыВЯчейках.Регистратор = &Ссылка
	|		И ТоварыВЯчейках.Ячейка.Владелец = &Склад
	|		И ТоварыВЯчейках.Ячейка.Помещение = &Помещение) КАК РазницаВОстатках
	|
	|СГРУППИРОВАТЬ ПО
	|	РазницаВОстатках.Номенклатура,
	|	РазницаВОстатках.Характеристика,
	|	РазницаВОстатках.Назначение,
	|	РазницаВОстатках.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазницаВОстаткахДляЗапроса.Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЕдиничныхУпаковок
	|ПОМЕСТИТЬ ТаблицаКоличествЕдиничныхУпаковок
	|ИЗ
	|	РазницаВОстаткахДляЗапроса КАК РазницаВОстаткахДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА РазницаВОстаткахДляЗапроса.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА РазницаВОстаткахДляЗапроса.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				КОГДА РазницаВОстаткахДляЗапроса.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА РазницаВОстаткахДляЗапроса.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (&ТекстЗапросаКоэффициентУпаковки2 = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазницаВОстаткахДляЗапроса.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазницаВОстатках.Номенклатура,
	|	РазницаВОстатках.Характеристика,
	|	РазницаВОстатках.Назначение,
	|	РазницаВОстатках.Серия,
	|	РазницаВОстатках.КоличествоУпаковок,
	|	РазницаВОстатках.Количество,
	|	ТаблицаКоличествЕдиничныхУпаковок.КоличествоЕдиничныхУпаковок
	|ПОМЕСТИТЬ РазницаВОстатках
	|ИЗ
	|	РазницаВОстаткахДляЗапроса КАК РазницаВОстатках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКоличествЕдиничныхУпаковок КАК ТаблицаКоличествЕдиничныхУпаковок
	|		ПО РазницаВОстатках.Номенклатура = ТаблицаКоличествЕдиничныхУпаковок.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазницаВОстатках.Номенклатура КАК Номенклатура,
	|	РазницаВОстатках.Характеристика КАК Характеристика,
	|	РазницаВОстатках.Назначение КАК Назначение,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	РазницаВОстатках.Серия,
	|	РазницаВОстатках.КоличествоУпаковок,
	|	РазницаВОстатках.Количество
	|ИЗ
	|	РазницаВОстатках КАК РазницаВОстатках
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(РазницаВОстатках.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА РазницаВОстатках.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				КОГДА ВЫРАЗИТЬ(РазницаВОстатках.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА ВЫРАЗИТЬ(РазницаВОстатках.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (&ТекстЗапросаКоэффициентУпаковки2 = 1)
	|			И (РазницаВОстатках.КоличествоЕдиничныхУпаковок = 1)
	|ГДЕ
	|	РазницаВОстатках.КоличествоУпаковок <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазницаВОстатках.Номенклатура.Наименование,
	|	РазницаВОстатках.Характеристика.Наименование,
	|	РазницаВОстатках.Назначение.Наименование";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыВЯчейкахОстатки.Упаковка",
		"ТоварыВЯчейкахОстатки.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяНоменклатура   = Неопределено;
	ТекущаяХарактеристика = Неопределено;
	ТекущееНазначение	  = Неопределено;

	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяНоменклатура <> Выборка.Номенклатура
			ИЛИ ТекущаяХарактеристика <> Выборка.Характеристика
			ИЛИ ТекущееНазначение <> Выборка.Назначение Тогда	
			НоваяСтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
			
			ТекущаяНоменклатура   = Выборка.Номенклатура;
			ТекущаяХарактеристика = Выборка.Характеристика;
			ТекущееНазначение	  = Выборка.Назначение;
		Иначе
			НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.КоличествоУпаковок + Выборка.КоличествоУпаковок;
			НоваяСтрокаТоваров.Количество         = НоваяСтрокаТоваров.КоличествоУпаковок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Серия) Тогда
			НоваяСтрокаСерий = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
											Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткамиТоваровНаПустомПомещенииСервер()
	
	Объект.Товары.Очистить();
	Объект.Серии.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДляЗапроса.Номенклатура,
	|	ТоварыДляЗапроса.Характеристика,
	|	ТоварыДляЗапроса.Назначение,
	|	ТоварыДляЗапроса.Серия,
	|	СУММА(ТоварыДляЗапроса.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыДляЗапроса.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ДатаОстатков,
	|				Склад = &Склад
	|					И Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладахОбороты.Номенклатура,
	|		ТоварыНаСкладахОбороты.Характеристика,
	|		ТоварыНаСкладахОбороты.Назначение,
	|		ТоварыНаСкладахОбороты.Серия,
	|		ТоварыНаСкладахОбороты.ВНаличииПриход
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Обороты(, , Регистратор, ) КАК ТоварыНаСкладахОбороты
	|	ГДЕ
	|		ТоварыНаСкладахОбороты.Регистратор = &Ссылка) КАК ТоварыДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДляЗапроса.Номенклатура,
	|	ТоварыДляЗапроса.Характеристика,
	|	ТоварыДляЗапроса.Назначение,
	|	ТоварыДляЗапроса.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыДляЗапроса.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДляЗапроса.Номенклатура.Наименование,
	|	ТоварыДляЗапроса.Характеристика.Наименование,
	|	ТоварыДляЗапроса.Назначение.Наименование,
	|	ТоварыДляЗапроса.Серия.Наименование";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущаяНоменклатура   = Неопределено;
	ТекущаяХарактеристика = Неопределено;
	ТекущееНазначение	  = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущаяНоменклатура <> Выборка.Номенклатура
			ИЛИ ТекущаяХарактеристика <> Выборка.Характеристика
			ИЛИ ТекущееНазначение <> Выборка.Назначение Тогда	
			НоваяСтрокаТоваров = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, Выборка);
			
			ТекущаяНоменклатура   = Выборка.Номенклатура;
			ТекущаяХарактеристика = Выборка.Характеристика;
			ТекущееНазначение	  = Выборка.Назначение;
		Иначе
			НоваяСтрокаТоваров.КоличествоУпаковок = НоваяСтрокаТоваров.КоличествоУпаковок + Выборка.КоличествоУпаковок;
			НоваяСтрокаТоваров.Количество         = НоваяСтрокаТоваров.КоличествоУпаковок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Серия) Тогда
			НоваяСтрокаСерий = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
		СтруктураДействийПоОбновлениюВспомРевизитовСтроки());
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьВидДеятельностиНДС(Перезаполнять = Истина)
	
	ИспользоватьРаздельныйУчетНДС = Константы.ИспользоватьРаздельныйУчетПоНалогообложению.Получить();
	
	Если ЭтоОстаткиСобственныхТоваров Тогда
		
		ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, Объект.Дата);
		Если Перезаполнять Тогда
			Объект.ВидДеятельностиНДС = ВидДеятельностиНДСОрганизации;
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПоступления(
			Элементы.СобственныеТоварыВидДеятельностиНДС,  
			Объект.Дата,
			ВидДеятельностиНДСОрганизации,
			Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
		
	ИначеЕсли ЭтоОстаткиПринятойТары Тогда
		
		ВидДеятельностиНДСОрганизации = Справочники.Организации.ЗакупкаПодДеятельность(Объект.Организация, Объект.Склад, Объект.Дата);
		Если Перезаполнять Тогда
			Объект.ВидДеятельностиНДС = ВидДеятельностиНДСОрганизации;
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПоступления(
			Элементы.ПринятаяТараВидДеятельностиНДС,  
			Объект.Дата,
			ВидДеятельностиНДСОрганизации,
			Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
		
	ИначеЕсли ЭтоОстаткиПереданныхВПроизводствоТоваров Тогда
		
		Если Перезаполнять Тогда
			Объект.ВидДеятельностиНДС = Справочники.Организации.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
			Элементы.ПереданныеВПроизводствоТоварыВидДеятельностиНДС, 
			Объект.Организация,
			Объект.Дата);;
			
	ИначеЕсли ЭтоОстаткиПереданныхПереработчикамТоваров Тогда
		
		Если Перезаполнять Тогда
			Объект.ВидДеятельностиНДС = Справочники.Организации.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);
		КонецЕсли;
		
		УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
			Элементы.ПереданныеПереработчикамТоварыВидДеятельностиНДС, 
			Объект.Организация,
			Объект.Дата);;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДС()
	
	Если ЭтоОстаткиПереданныхНаКомиссиюТоваров Тогда
		Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
				Объект.Организация,
				Неопределено,
				Объект.Дата);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище, КэшированныеЗначения)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;

	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);

		СтруктураДействий = Новый Структура;
		Если Не Объект.ЦенаВключаетНДС Тогда
			Для Каждого Стр из Объект.Товары Цикл
				СтрокаТЧТовары.СуммаБезНДС = СтрокаТЧТовары.Сумма;
			КонецЦикла;
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
		Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
			СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
		КонецЕсли;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказаПереработчику(АдресТоваровВХранилище)
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваров = Новый Структура("КодСтроки");
	
	Для Каждого СтрокаТоваров Из СтруктураТаблиц.Товары Цикл
		
		// Обработка ТЧ товары.
		СтруктураПоискаТоваров.КодСтроки          = СтрокаТоваров.КодСтроки;
		
		МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваров);
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				Объект.Товары.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.СтавкаНДС = СтавкаНДСНоменклатуры(СтрокаТЧТовары.Номенклатура);

		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
		СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
		Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
			СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
		КонецЕсли;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,
		СтруктураДействийПоОбновлениюВспомРевизитовСтроки());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДействийПоОбновлениюВспомРевизитовСтроки()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",            Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",                    Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",           Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",      Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы[ИмяТекущейТаблицыФормы].ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц(Объект.ТипОперации));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС");
		СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
		Если НЕ (ЭтоОстаткиПринятойТары ИЛИ ЭтоОстаткиПереданнойТары) Тогда
			СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
		КонецЕсли;
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор; 
		ЗаполнитьПризнакЕстьДетализацияПартийПоСтроке(НоваяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВПодразделенииВедетсяОбособленныйУчетПоМенеджерам(Подразделение)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Т
		|ГДЕ
		|	Т.Ссылка = &Подразделение
		|	И Т.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
		|");
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПересчетаКоличестваЕдиниц(ТипОперации)

	НужноОкруглятьКоличество = Истина;
	
	Если ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство") Тогда
		НужноОкруглятьКоличество = Ложь;
	КонецЕсли; 
	
	Если НЕ НужноОкруглятьКоличество Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Возврат ПараметрыПересчета;
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции


&НаКлиенте
Процедура ФормаДетализацияПартийПриЗакрытии(АдресВременногоХранилища, ДопПараметры) Экспорт
	
	Если АдресВременногоХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеДетализацииПартий(ДопПараметры.Строка, АдресВременногоХранилища)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДетализацииПартий(Строка, АдресВременногоХранилища)
	
	Модифицированность = Истина;
	
	ДанныеСтрокиТовары = Объект.Товары.НайтиПоИдентификатору(Строка);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторСтроки", ДанныеСтрокиТовары.ИдентификаторСтроки);
	СтрокиДетализацииПартийКУдалению = Объект.ДетализацияПартий.НайтиСтроки(Отбор);
	Для каждого СтрокаДетализацииПартий Из СтрокиДетализацииПартийКУдалению Цикл
		Объект.ДетализацияПартий.Удалить(СтрокаДетализацииПартий);
	КонецЦикла;
	
	СтрокиДетализацииПартийКДобавлению = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Для каждого СтрокаДетализацииПартий Из СтрокиДетализацииПартийКДобавлению Цикл
		НоваяСтрока = Объект.ДетализацияПартий.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ДанныеСтрокиТовары.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДетализацииПартий);
	КонецЦикла;
	
	ЗаполнитьПризнакЕстьДетализацияПартийПоСтроке(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМетодОценкиСтоимостиТоваров()
	
	Период = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	МетодОценкиСтоимости = УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.МетодОценкиСтоимостиТоваровОрганизации(Объект.Организация, Период);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДокументыПоступления(Команда)
	
	ТекущаяСтрока = Неопределено;
	Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров") Тогда
		ТекущаяСтрока = Элементы.СобственныеТовары.ТекущаяСтрока;
	ИначеЕсли Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию") Тогда 
		ТекущаяСтрока = Элементы.ПереданныеНаКомиссию.ТекущаяСтрока;
	ИначеЕсли Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков") Тогда 
		ТекущаяСтрока = Элементы.ПринятаяТара.ТекущаяСтрока;
	ИначеЕсли Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхВПроизводство") Тогда 
		ТекущаяСтрока = Элементы.ПереданныеВПроизводствоТовары.ТекущаяСтрока;
	ИначеЕсли Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиМатериаловПереданныхПереработчикам") Тогда 
		ТекущаяСтрока = Элементы.ПереданныеПереработчикамТовары.ТекущаяСтрока;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормаДетализацияПартий(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормаДетализацияПартий(Строка)
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СуммаРегл", ДанныеСтроки.СуммаРегл);
	ПараметрыФормы.Вставить("НДСРегл", ДанныеСтроки.НДСРегл);
	
	АдресВременногоХранилища =  ПоместитьДетализациюПартийВоВременноеХранилище(ДанныеСтроки.ИдентификаторСтроки);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ФормаДетализацияПартийПриЗакрытии", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ВводОстатков.Форма.ФормаДетализацияПартий", ПараметрыФормы, ЭтаФорма, ,  , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДетализациюПартийВоВременноеХранилище(ИдентификаторСтроки)
	
	ДанныеПартий = Объект.ДетализацияПартий.Выгрузить(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПартий, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЗаполнитьПризнакЕстьДетализацияПартийПоСтроке(Строка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Строка); 
	
	Отбор = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
	СтрокиДетализацииПартий = Объект.ДетализацияПартий.НайтиСтроки(Отбор);
	ТекущаяСтрока.ДетализацияПартий = СтрокиДетализацииПартий.Количество() > 0;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПризнакЕстьДетализацияПартий()
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		ЗаполнитьПризнакЕстьДетализацияПартийПоСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецОбласти
