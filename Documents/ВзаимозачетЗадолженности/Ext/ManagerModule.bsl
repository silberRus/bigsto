#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Взаимозачет задолженности".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВзаимозачетЗадолженности) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ВзаимозачетЗадолженности.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ВзаимозачетЗадолженности);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Процедура заполняет массивы реквизитов, зависимых от вида операции документа.
//
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийВзаимозачетаЗадолженности - Выбранный вид операции.
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от вида операции.
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранного вида операции.
//
Процедура ЗаполнитьИменаРеквизитовПоВидуОперации(ВидОперации, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ОрганизацияКредитор");
	МассивВсехРеквизитов.Добавить("КонтрагентКредитор");
	МассивВсехРеквизитов.Добавить("ТипДебитора");
	МассивВсехРеквизитов.Добавить("ТипКредитора");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента Тогда
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами Тогда
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияКредитор");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика Тогда
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками Тогда
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияКредитор");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
	Иначе //произвольный
		МассивРеквизитовОперации.Добавить("КонтрагентКредитор");
		МассивРеквизитовОперации.Добавить("ТипДебитора");
		МассивРеквизитовОперации.Добавить("ТипКредитора");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление реквизитов в заивисимости от вида операции взаимозачета.
//
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийВзаимозачетаЗадолженности - Выбранный вид операции
//
// Возвращаемое значение:
// Структура - cодержит структуру с ключами:
//     * Организация         - Строка - Представление организации.
//     * ОрганизацияКредитор - Строка - Представление организации-кредитора.
//     * КонтрагентДебитор   - Строка - Представление контрагента-дебитора.
//     * КонтрагентКредитор  - Строка - Представление контрагента-кредитора.
Функция ПредставлениеРекизитовПоВидуОперации(ВидОперации) Экспорт
	
	СтруктураПредставлений = Новый Структура;
	
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация, выполнившая отгрузку'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация, получившая аванс'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("Организация",         НСтр("ru='Организация, уплатившая аванс'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация, оформившая поступление'"));
		
	Иначе
		
		СтруктураПредставлений.Вставить("Организация", НСтр("ru='Организация'"));
		СтруктураПредставлений.Вставить("ОрганизацияКредитор", НСтр("ru='Организация'"));
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
		Или ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Клиент'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Клиент-дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Клиент-кредитор'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
		Или ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Поставщик'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Поставщик'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Поставщик-дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Поставщик-кредитор'"));
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Контрагент'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Контрагент'"));
		
	Иначе
	
		СтруктураПредставлений.Вставить("КонтрагентДебитор", НСтр("ru='Дебитор'"));
		СтруктураПредставлений.Вставить("КонтрагентКредитор", НСтр("ru='Кредитор'"));
		
	КонецЕсли;
	
	Возврат СтруктураПредставлений;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	МассивТиповОрганизаций = Новый Массив;
	МассивТиповОрганизаций.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент);
	МассивТиповОрганизаций.Добавить(Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик);
	Запрос.УстановитьПараметр("ТипыОрганизаций", МассивТиповОрганизаций);
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями);
	Запрос.УстановитьПараметр("ОперацииВзаимозачетаМеждуОрганизациями", МассивОпераций);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата               КАК Период,
	|	ДанныеДокумента.Номер              КАК Номер,
	|	ДанныеДокумента.Организация        КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВидОперации В (&ОперацииВзаимозачетаМеждуОрганизациями)
	|			ТОГДА ДанныеДокумента.ОрганизацияКредитор
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ                              КАК ОрганизацияКредитор,
	|	ДанныеДокумента.КонтрагентДебитор  КАК КонтрагентДебитор,
	|	ДанныеДокумента.КонтрагентКредитор КАК КонтрагентКредитор,
	|	ДанныеДокумента.УдалитьВалюта      КАК Валюта,
	|	ДанныеДокумента.ТипДебитора        КАК ТипДебитора,
	|	ДанныеДокумента.ТипКредитора       КАК ТипКредитора,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВидОперации В (&ОперацииВзаимозачетаМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                              КАК РасчетыМежду2Организациями,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипДебитора В (&ТипыОрганизаций)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                              КАК РасчетыМеждуОрганизациямиДебитор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ТипКредитора В (&ТипыОрганизаций)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                              КАК РасчетыМеждуОрганизациямиКредитор,
	|	ДанныеДокумента.Подразделение      КАК Подразделение,
	|	ДанныеДокумента.ОбъектРасчетовИнтеркампани КАК ОбъектРасчетовИнтеркампани,
	|	ЕСТЬNULL(
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.ОбъектРасчетовИнтеркампани) = ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
	|			ДанныеДокумента.ОбъектРасчетовИнтеркампани
	|		ИНАЧЕ
	|			ДанныеДокумента.ОбъектРасчетовИнтеркампани.Договор
	|		КОНЕЦ,
	|		ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|	)                                          КАК ДоговорИнтеркампани
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности  КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                           Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",                      Реквизиты.Организация);
	Запрос.УстановитьПараметр("ПараметрОрганизацияКредитор",      Реквизиты.ОрганизацияКредитор);
	Запрос.УстановитьПараметр("Валюта",                           Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ТипДебитора",                      Реквизиты.ТипДебитора);
	Запрос.УстановитьПараметр("ТипКредитора",                     Реквизиты.ТипКредитора);
	Запрос.УстановитьПараметр("КонтрагентДебитор",                Реквизиты.КонтрагентДебитор);
	Запрос.УстановитьПараметр("КонтрагентКредитор",               Реквизиты.КонтрагентКредитор);
	Запрос.УстановитьПараметр("РасчетыМежду2Организациями",       Реквизиты.РасчетыМежду2Организациями);
	Запрос.УстановитьПараметр("РасчетыМеждуОрганизациямиДебитор", Реквизиты.РасчетыМеждуОрганизациямиДебитор);
	Запрос.УстановитьПараметр("РасчетыМеждуОрганизациямиКредитор",Реквизиты.РасчетыМеждуОрганизациямиКредитор);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",   Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",       Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Подразделение",                    Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ТипРасчетовСПоставщиком",          Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Запрос.УстановитьПараметр("ОбъектРасчетовИнтеркампани",       Реквизиты.ОбъектРасчетовИнтеркампани);
	Запрос.УстановитьПараметр("ДоговорИнтеркампани",              Реквизиты.ДоговорИнтеркампани);
	
	
КонецПроцедуры

Процедура СформироватьКлючиАналитикиПоДокументу(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиПоДокументуИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	
	ТекстЗапроса = ТекстЗапросаКлючиАналитикПоПартнерам();
	ТекстЗапроса = ДополнитьТекстЗапросаСоединениемСКлючамиАналитики(ТекстЗапроса);
	
	ЗапросАналитик = Новый Запрос(ТекстЗапроса);
	ЗапросАналитик.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация",                       Запрос.Параметры.Организация);
	ЗапросАналитик.УстановитьПараметр("ПараметрОрганизацияКредитор",       Запрос.Параметры.ПараметрОрганизацияКредитор);
	ЗапросАналитик.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросАналитик.УстановитьПараметр("КонтрагентДебитор",                 Запрос.Параметры.КонтрагентДебитор);
	ЗапросАналитик.УстановитьПараметр("КонтрагентКредитор",                Запрос.Параметры.КонтрагентКредитор);
	ЗапросАналитик.УстановитьПараметр("РасчетыМежду2Организациями",        Запрос.Параметры.РасчетыМежду2Организациями);
	ЗапросАналитик.УстановитьПараметр("РасчетыМеждуОрганизациямиДебитор",  Запрос.Параметры.РасчетыМеждуОрганизациямиДебитор);
	ЗапросАналитик.УстановитьПараметр("РасчетыМеждуОрганизациямиКредитор", Запрос.Параметры.РасчетыМеждуОрганизациямиКредитор);
	ЗапросАналитик.УстановитьПараметр("ТипРасчетовСПоставщиком", Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	ЗапросАналитик.УстановитьПараметр("ДоговорИнтеркампани",               Запрос.Параметры.ДоговорИнтеркампани);
	ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	РезультатЗапроса = ЗапросАналитик.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиПоДокументуИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта,
	                                                                         Неопределено, // ВалютаВзаиморасчетов
	                                                                         Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",           Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос)
	
	Если Запрос.Параметры.Свойство("ВтДебиторскаяКредиторскаяЗадолженностьИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВременныхТаблиц = Новый Запрос;
	ЗапросВременныхТаблиц.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВременныхТаблиц.Текст = ТекстЗапросаВтДебиторскаяЗадолженность() + ОбщегоНазначения.РазделительПакетаЗапросов()
								+ ТекстЗапросаВтКредиторскаяЗадолженность();
	
	ЗапросВременныхТаблиц.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросВременныхТаблиц.УстановитьПараметр("Организация",                       Запрос.Параметры.Организация);
	ЗапросВременныхТаблиц.УстановитьПараметр("ПараметрОрганизацияКредитор",       Запрос.Параметры.ПараметрОрганизацияКредитор);
	ЗапросВременныхТаблиц.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросВременныхТаблиц.УстановитьПараметр("КонтрагентДебитор",                 Запрос.Параметры.КонтрагентДебитор);
	ЗапросВременныхТаблиц.УстановитьПараметр("КонтрагентКредитор",                Запрос.Параметры.КонтрагентКредитор);
	ЗапросВременныхТаблиц.УстановитьПараметр("РасчетыМежду2Организациями",        Запрос.Параметры.РасчетыМежду2Организациями);
	ЗапросВременныхТаблиц.УстановитьПараметр("РасчетыМеждуОрганизациямиДебитор",  Запрос.Параметры.РасчетыМеждуОрганизациямиДебитор);
	ЗапросВременныхТаблиц.УстановитьПараметр("РасчетыМеждуОрганизациямиКредитор", Запрос.Параметры.РасчетыМеждуОрганизациямиКредитор);
	ЗапросВременныхТаблиц.УстановитьПараметр("ТипРасчетовСПоставщиком",           Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	Результат = ЗапросВременныхТаблиц.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("ВтДебиторскаяКредиторскаяЗадолженностьИнициализированы", Истина);

КонецПроцедуры

Процедура ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, ВидЗадолженности = Неопределено)
	
	ЗапросВременнойТаблицы = Новый Запрос;
	ЗапросВременнойТаблицы.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросВременнойТаблицы.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросВременнойТаблицы.УстановитьПараметр("Организация",                       Запрос.Параметры.Организация);
	ЗапросВременнойТаблицы.УстановитьПараметр("ПараметрОрганизацияКредитор",       Запрос.Параметры.ПараметрОрганизацияКредитор);
	ЗапросВременнойТаблицы.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросВременнойТаблицы.УстановитьПараметр("КонтрагентДебитор",                 Запрос.Параметры.КонтрагентДебитор);
	ЗапросВременнойТаблицы.УстановитьПараметр("КонтрагентКредитор",                Запрос.Параметры.КонтрагентКредитор);
	ЗапросВременнойТаблицы.УстановитьПараметр("РасчетыМежду2Организациями",        Запрос.Параметры.РасчетыМежду2Организациями);
	ЗапросВременнойТаблицы.УстановитьПараметр("РасчетыМеждуОрганизациямиДебитор",  Запрос.Параметры.РасчетыМеждуОрганизациямиДебитор);
	ЗапросВременнойТаблицы.УстановитьПараметр("РасчетыМеждуОрганизациямиКредитор", Запрос.Параметры.РасчетыМеждуОрганизациямиКредитор);
	ЗапросВременнойТаблицы.УстановитьПараметр("ТипРасчетовСПоставщиком",           Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	ЗапросВременнойТаблицы.УстановитьПараметр("ОбъектРасчетовИнтеркампани",        Запрос.Параметры.ОбъектРасчетовИнтеркампани);
	ЗапросВременнойТаблицы.УстановитьПараметр("ДоговорИнтеркампани",               Запрос.Параметры.ДоговорИнтеркампани);
	
	ТекстЗапроса = "";
	Если (ВидЗадолженности = "Клиенты" ИЛИ ВидЗадолженности = Неопределено)
		И НЕ Запрос.Параметры.Свойство("ВтРасчетовПоКлиентамИнициализирована") Тогда
		Запрос.УстановитьПараметр("ВтРасчетовПоКлиентамИнициализирована", Истина);
		ТекстЗапроса = ТекстЗапросаВтРасчетовПоКлиентам();
	КонецЕсли;
	
	Если (ВидЗадолженности = "Поставщики" ИЛИ ВидЗадолженности = Неопределено)
		И НЕ Запрос.Параметры.Свойство("ВтРасчетовПоПоставщикамИнициализирована") Тогда
		Запрос.УстановитьПараметр("ВтРасчетовПоПоставщикамИнициализирована", Истина);
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВтРасчетовПоПоставщиками();
	КонецЕсли;
	
	Если ВидЗадолженности = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВтРасчетыПоЗадолженности();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ЗапросВременнойТаблицы.Текст = ТекстЗапроса;
		Результат = ЗапросВременнойТаблицы.ВыполнитьПакет();
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, "Клиенты");
	СформироватьКлючиАналитикиПоДокументу(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = ТекстЗапросаРасчетыСКлиентами();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос, "Поставщики");
	СформироватьКлючиАналитикиПоДокументу(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = ТекстЗапросаРасчетыСПоставщиками();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки          КАК НомерСтроки,
	|	&Период                               КАК Период,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаДокумента.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СуммаВзаиморасчетов  КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО                          КАК СтавкаНДС,
	|	0                                     КАК СуммаНДС,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.СуммаРегл <> 0 Тогда 
	|			ТаблицаДокумента.СуммаРегл
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                 КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.СуммаУпр <> 0 Тогда 
	|			ТаблицаДокумента.СуммаУпр
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                 КАК СуммаБезНДСУпр,
	|	
	|	0                                     КАК СуммаНДСРегл,
	|	0                                     КАК СуммаНДСУпр,
	|	НЕОПРЕДЕЛЕНО                          КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТаблицаДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ)) КАК КурсыВалютВзаиморасчетов
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалютВзаиморасчетов.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ)) КАК КурсыВалютРегл
	|	ПО
	|		КурсыВалютРегл.Валюта = &ВалютаРегламентированногоУчета
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки          КАК НомерСтроки,
	|	&Период                               КАК Период,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаДокумента.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.СуммаВзаиморасчетов  КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО                          КАК СтавкаНДС,
	|	0                                     КАК СуммаНДС,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.СуммаРегл <> 0 Тогда 
	|			ТаблицаДокумента.СуммаРегл
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                 КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаДокумента.СуммаУпр <> 0 Тогда 
	|			ТаблицаДокумента.СуммаУпр
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаДокумента.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                 КАК СуммаБезНДСУпр,
	|	
	|	0                                     КАК СуммаНДСРегл,
	|	0                                     КАК СуммаНДСУпр,
	|	НЕОПРЕДЕЛЕНО                          КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТаблицаДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ)) КАК КурсыВалютВзаиморасчетов
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалютВзаиморасчетов.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ)) КАК КурсыВалютРегл
	|	ПО
	|		КурсыВалютРегл.Валюта = &ВалютаРегламентированногоУчета
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует движения по регистру ДвиженияКонтрагентКонтрагент на временных таблиц дебиторской и кредиторской задолженности.
//
Процедура ПодготовитьТаблицуДвиженияКонтрагентКонтрагент(Запрос)
	
	Если Запрос.Параметры.Свойство("ДвиженияКонтрагентКонтрагентПодготовлены") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВтДебиторскаяКредиторскаяЗадолженность(Запрос);
	ИнициализироватьВременныеТаблицыПоРасчетам(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ЗапросЗадолженостей = Новый Запрос;
	ЗапросЗадолженостей.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросЗадолженостей.УстановитьПараметр("Ссылка",                            Запрос.Параметры.Ссылка);
	ЗапросЗадолженостей.УстановитьПараметр("Период",                            Запрос.Параметры.Период);
	ЗапросЗадолженостей.УстановитьПараметр("Подразделение",                     Запрос.Параметры.Подразделение);
	ЗапросЗадолженостей.УстановитьПараметр("Валюта",                            Запрос.Параметры.Валюта);
	ЗапросЗадолженостей.УстановитьПараметр("ВалютаУправленческогоУчета",        Запрос.Параметры.ВалютаУправленческогоУчета);
	ЗапросЗадолженостей.УстановитьПараметр("ВалютаРегламентированногоУчета",    Запрос.Параметры.ВалютаРегламентированногоУчета);
	ЗапросЗадолженостей.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",    Запрос.Параметры.КоэффициентПересчетаВВалютуУпр);
	ЗапросЗадолженостей.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",   Запрос.Параметры.КоэффициентПересчетаВВалютуРегл);
	ЗапросЗадолженостей.УстановитьПараметр("КонтрагентДебитор",                 Запрос.Параметры.КонтрагентДебитор);
	ЗапросЗадолженостей.УстановитьПараметр("КонтрагентКредитор",                Запрос.Параметры.КонтрагентКредитор);
	ЗапросЗадолженостей.УстановитьПараметр("РасчетыМеждуОрганизациямиДебитор",  Запрос.Параметры.РасчетыМеждуОрганизациямиДебитор);
	ЗапросЗадолженостей.УстановитьПараметр("РасчетыМеждуОрганизациямиКредитор", Запрос.Параметры.РасчетыМеждуОрганизациямиКредитор);
	ЗапросЗадолженостей.Текст = 
	"ВЫБРАТЬ
	|	&Период                                                КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация,
	|	Задолженность.Организация                              КАК Организация,
	|	&Подразделение                                         КАК Подразделение,
	|	
	|	Задолженность.Партнер                                  КАК Партнер,
	|	Задолженность.Контрагент                               КАК Контрагент,
	|	Задолженность.Договор                                  КАК Договор,
	|	Задолженность.НаправлениеДеятельности                  КАК НаправлениеДеятельности,
	|	Задолженность.Заказ                                    КАК ОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК КорПартнер,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорКонтрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК КорДоговор,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорНаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ТипСуммы,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорТипСуммы,
	|	
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			ТОГДА Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 
	|			ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ Задолженность.СуммаУпр
	|	КОНЕЦ                                                  КАК Сумма,
	|	0                                                      КАК СуммаБезНДС,
	|	ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0
	|			ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ Задолженность.СуммаРегл
	|	КОНЕЦ                                                  КАК СуммаРегл,
	|	0                                                      КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК Валюта,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалюте,
	|	0                                                      КАК СуммаБезНДСВВалюте,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК ВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА Задолженность.СуммаВзаиморасчетов = 0 
	|		ТОГДА 1
	|		ИНАЧЕ (ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					ТОГДА Задолженность.СуммаВзаиморасчетов 
	|					КОГДА Задолженность.Сумма <> 0
	|						ТОГДА ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ Задолженность.СуммаРегл
	|				КОНЕЦ) / Задолженность.СуммаВзаиморасчетов
	|	КОНЕЦ                                                  КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК КорВалютаВзаиморасчетов,
	|	0                                                      КАК КорСуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	Задолженность.Заказ                                    КАК ИсточникГФУРасчетов,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорИсточникГФУРасчетов
	|ИЗ
	|	ВтРасчетыПоЗадолженности КАК Задолженность
	|ГДЕ
	|	Задолженность.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Сумма УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период                                                КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация,
	|	Задолженность.Организация                              КАК Организация,
	|	&Подразделение                                         КАК Подразделение,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                                           КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                           КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                           КАК ОбъектРасчетов,
	|	
	|	Задолженность.Партнер                                  КАК КорПартнер,
	|	Задолженность.Контрагент                               КАК КорКонтрагент,
	|	Задолженность.Договор                                  КАК КорДоговор,
	|	Задолженность.НаправлениеДеятельности                  КАК КорНаправлениеДеятельности,
	|	Задолженность.Заказ                                    КАК КорОбъектРасчетов,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ТипСуммы,
	|	НЕОПРЕДЕЛЕНО                                           КАК КорТипСуммы,
	|	
	|	ВЫБОР 
	|		КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 ТОГДА
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			Задолженность.СуммаУпр
	|	КОНЕЦ                                                  КАК Сумма,
	|	0                                                      КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			Задолженность.СуммаВзаиморасчетов
	|		КОГДА Задолженность.Сумма <> 0 ТОГДА
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			Задолженность.СуммаРегл
	|	КОНЕЦ                                                  КАК СуммаРегл,
	|	0                                                      КАК СуммаРеглБезНДС,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК Валюта,
	|	Задолженность.СуммаВзаиморасчетов                      КАК СуммаВВалюте,
	|	0                                                      КАК СуммаБезНДСВВалюте,
	|	
	|	НЕОПРЕДЕЛЕНО                                           КАК ВалютаВзаиморасчетов,
	|	0                                                      КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	Задолженность.ВалютаВзаиморасчетов                     КАК КорВалютаВзаиморасчетов,
	|	ВЫБОР КОГДА Задолженность.СуммаВзаиморасчетов = 0 
	|		ТОГДА 1
	|		ИНАЧЕ (ВЫБОР КОГДА Задолженность.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					ТОГДА Задолженность.СуммаВзаиморасчетов
	|					КОГДА Задолженность.Сумма <> 0 ТОГДА
	|						ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ Задолженность.СуммаРегл
	|				КОНЕЦ) / Задолженность.СуммаВзаиморасчетов
	|	КОНЕЦ                                                  КАК КурсВалютыВзаиморасчетов,
	|	Задолженность.СуммаВзаиморасчетов                      КАК КорСуммаВВалютеВзаиморасчетов,
	|	0                                                      КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО                                           КАК ИсточникГФУРасчетов,
	|	Задолженность.Заказ                                    КАК КорИсточникГФУРасчетов
	|ИЗ
	|	ВтРасчетыПоЗадолженности КАК Задолженность
	|ГДЕ
	|	Задолженность.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Сумма УБЫВ";
	
	Результат = ЗапросЗадолженостей.ВыполнитьПакет();
	
	ТаблицаДвиженияКонтрагентКонтрагент = Неопределено;
	ВзаиморасчетыСервер.ПровестиВзаимозачет(
		Результат[0].Выгрузить(),
		Результат[1].Выгрузить(),
		ТаблицаДвиженияКонтрагентКонтрагент);
	
	ЗапросЗадолженостей.УстановитьПараметр("ТаблицаДвиженияКонтрагентКонтрагент", ТаблицаДвиженияКонтрагентКонтрагент);
	ЗапросЗадолженостей.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДвиженияКонтрагентКонтрагент.Период,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Регистратор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НомерСтроки,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Активность,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Организация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Подразделение,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Партнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Контрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Договор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.ОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорПартнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорКонтрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорДоговор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорОбъектРасчетов,
	
	|	ТаблицаДвиженияКонтрагентКонтрагент.ТипСуммы,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорТипСуммы,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Сумма,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДС,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРегл,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРеглБезНДС,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Валюта,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалюте,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалюте,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ИсточникГФУРасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорИсточникГФУРасчетов
	|ПОМЕСТИТЬ ВтДвиженияКонтрагентКонтрагент
	|ИЗ
	|	&ТаблицаДвиженияКонтрагентКонтрагент КАК ТаблицаДвиженияКонтрагентКонтрагент";
	
	ЗапросЗадолженостей.ВыполнитьПакет();
	
	Запрос.УстановитьПараметр("ДвиженияКонтрагентКонтрагентПодготовлены", Истина);

КонецПроцедуры

Функция ТекстЗапросаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентКонтрагент";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ПодготовитьТаблицуДвиженияКонтрагентКонтрагент(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДвиженияКонтрагентКонтрагент.Период,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Регистратор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НомерСтроки,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Активность,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ХозяйственнаяОперация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Организация,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Подразделение,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Партнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Контрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.Договор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.НаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.ОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорПартнер,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорКонтрагент,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорДоговор,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорНаправлениеДеятельности,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорОбъектРасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ТипСуммы,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорТипСуммы,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Сумма,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДС,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРегл,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаРеглБезНДС,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.Валюта,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалюте,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалюте,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорВалютаВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаВВалютеВзаиморасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорСуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ТаблицаДвиженияКонтрагентКонтрагент.ИсточникГФУРасчетов,
	|	ТаблицаДвиженияКонтрагентКонтрагент.КорИсточникГФУРасчетов
	|ИЗ
	|	ВтДвиженияКонтрагентКонтрагент КАК ТаблицаДвиженияКонтрагентКонтрагент";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаКлючиАналитикПоПартнерам()
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ // аналитика {Организация, Дебитор-партнер, Дебитор-контрагент}
	|		ДанныеДокумента.Организация КАК Организация,
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ) КАК Партнер,
	|		&КонтрагентДебитор КАК Контрагент,
	|		ДанныеДокумента.Договор КАК Договор,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Организация, Кредитор-партнер, Кредитор-контрагент}
	|		ДанныеДокумента.Организация КАК Организация,
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ) КАК Партнер,
	|		&КонтрагентКредитор КАК Контрагент,
	|		ДанныеДокумента.Договор КАК Договор,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Дебитор-организация, Кредитор-партнер, Кредитор-контрагент}
	|		&КонтрагентДебитор КАК Организация,
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ) КАК Партнер,
	|		&КонтрагентКредитор КАК Контрагент,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор 
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ КАК Договор,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка И &РасчетыМеждуОрганизациямиДебитор И &КонтрагентКредитор <> &КонтрагентДебитор
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Кредитор-организация, Дебитор-партнер, Дебитор-контрагент}
	|		&КонтрагентКредитор КАК Организация,
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ) КАК Партнер,
	|		&КонтрагентДебитор КАК Контрагент,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор 
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ КАК Договор,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка И &РасчетыМеждуОрганизациямиКредитор И &КонтрагентКредитор <> &КонтрагентДебитор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Дебитор-организация, Предприятие-партнер, Организация}
	|		&КонтрагентДебитор КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация КАК Контрагент,
	|		ДанныеДокумента.Договор КАК Договор,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиДебитор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Кредитор-организация, Предприятие-партнер, Организация}
	|		&КонтрагентКредитор КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация КАК Контрагент,
	|		ДанныеДокумента.Договор КАК Договор,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиКредитор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Организация, Предприятие-партнер, Организация-кредитор}
	|		ДанныеДокумента.Организация КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		&ПараметрОрганизацияКредитор КАК Контрагент,
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(&ПараметрОрганизацияКредитор) = ТИП(Справочник.Организации)
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ КАК Договор,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМежду2Организациями
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // аналитика {Организация-кредитор, Предприятие-партнер, Организация}
	|		&ПараметрОрганизацияКредитор КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация КАК Контрагент,
	|		&ДоговорИнтеркампани КАК Договор,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМежду2Организациями
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДебиторскаяЗадолженность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.Заказ                           КАК Заказ,
	|	ДанныеДокумента.Партнер                         КАК Партнер,
	|	ДанныеДокумента.Сумма                           КАК Сумма,
	|	ДанныеДокумента.СуммаВзаиморасчетов             КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаРегл                       КАК СуммаРегл,
	|	ДанныеДокумента.СуммаУпр                        КАК СуммаУпр,
	|	ДанныеДокумента.НомерСтроки                     КАК НомерСтроки,
	
	|	ЕСТЬNULL(
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Справочник.ДоговорыМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Справочник.ДоговорыМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).Комиссионер
	|		ИНАЧЕ
	|			ДанныеДокумента.Заказ.Организация
	|		КОНЕЦ,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|			&Организация
	|		ИНАЧЕ
	|			ДанныеДокумента.Организация
	|		КОНЕЦ
	|	) КАК Организация,
	
	|	ЕСТЬNULL(
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (ТИП(Справочник.ДоговорыКонтрагентов), ТИП(Справочник.ДоговорыМеждуОрганизациями)) ТОГДА
	|			ДанныеДокумента.Заказ
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ДанныеДокумента.Заказ.Договор = Неопределено 
	|					ТОГДА
	|						ВЫБОР 
	|							КОГДА &РасчетыМеждуОрганизациямиКредитор
	|								ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР 
	|						КОГДА ЕСТЬNULL(ДанныеДокумента.Заказ.РасчетыЧерезОтдельногоКонтрагента, ЛОЖЬ) = ИСТИНА
	|							ТОГДА
	|								ВЫБОР 
	|									КОГДА ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком 
	|										ТОГДА ЕСТЬNULL(ДанныеДокумента.Заказ.ДоговорПокупки,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|									ИНАЧЕ ЕСТЬNULL(ДанныеДокумента.Заказ.ДоговорПродажи,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|								КОНЕЦ
	|						ИНАЧЕ ДанныеДокумента.Заказ.Договор
	|					КОНЕЦ
	|			КОНЕЦ
	|		КОНЕЦ,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ
	|	) КАК Договор,
	
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.Подразделение, &Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтДебиторскаяЗадолженность
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКредиторскаяЗадолженность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                          КАК Ссылка,
	|	ДанныеДокумента.ТипРасчетов                     КАК ТипРасчетов,
	|	ДанныеДокумента.Заказ                           КАК Заказ,
	|	ДанныеДокумента.Партнер                         КАК Партнер,
	|	ДанныеДокумента.Сумма                           КАК Сумма,
	|	ДанныеДокумента.СуммаВзаиморасчетов             КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов            КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаРегл                       КАК СуммаРегл,
	|	ДанныеДокумента.СуммаУпр                        КАК СуммаУпр,
	|	ДанныеДокумента.НомерСтроки                     КАК НомерСтроки,
	
	|	ЕСТЬNULL(
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Документ.ПередачаТоваровМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Справочник.ДоговорыМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Справочник.ДоговорыМеждуОрганизациями).ОрганизацияПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) = ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями) И ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком ТОГДА
	|			ВЫРАЗИТЬ(ДанныеДокумента.Заказ КАК Документ.ОтчетПоКомиссииМеждуОрганизациями).Комиссионер
	|		ИНАЧЕ
	|			ДанныеДокумента.Заказ.Организация
	|		КОНЕЦ,
	|		ВЫБОР КОГДА ДанныеДокумента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|			&ПараметрОрганизацияКредитор
	|		ИНАЧЕ
	|			ДанныеДокумента.Организация
	|		КОНЕЦ
	|	) КАК Организация,
	
	|	ЕСТЬNULL(
	|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Заказ) В (ТИП(Справочник.ДоговорыКонтрагентов), ТИП(Справочник.ДоговорыМеждуОрганизациями)) ТОГДА
	|			ДанныеДокумента.Заказ
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ДанныеДокумента.Заказ.Договор = Неопределено 
	|					ТОГДА
	|						ВЫБОР 
	|							КОГДА &РасчетыМеждуОрганизациямиКредитор
	|								ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|						КОНЕЦ
	|				ИНАЧЕ 
	|					ВЫБОР 
	|						КОГДА ЕСТЬNULL(ДанныеДокумента.Заказ.РасчетыЧерезОтдельногоКонтрагента, ЛОЖЬ) = ИСТИНА
	|							ТОГДА
	|								ВЫБОР 
	|									КОГДА ДанныеДокумента.ТипРасчетов = &ТипРасчетовСПоставщиком 
	|										ТОГДА ЕСТЬNULL(ДанныеДокумента.Заказ.ДоговорПокупки,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|									ИНАЧЕ ЕСТЬNULL(ДанныеДокумента.Заказ.ДоговорПродажи,ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|								КОНЕЦ
	|						ИНАЧЕ ДанныеДокумента.Заказ.Договор
	|					КОНЕЦ
	|			КОНЕЦ
	|		КОНЕЦ,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ
	|	) КАК Договор,
	
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.Подразделение, &Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Заказ.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтКредиторскаяЗадолженность
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности)        КАК Регистратор,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Дата   КАК Период,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Дата   КАК ДатаРегистратора,
	|	ТабличнаяЧасть.ВидДвижения                     КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	ТабличнаяЧасть.Заказ                           КАК ЗаказКлиента,
	|	ТабличнаяЧасть.ВалютаВзаиморасчетов            КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов.
	|	ТабличнаяЧасть.СуммаВзаиморасчетов             КАК Сумма,
	|	ТабличнаяЧасть.СуммаВзаиморасчетов             КАК КОплате,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		КОГДА ТабличнаяЧасть.Сумма <> 0 Тогда 
	|			ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаРегл
	|	КОНЕЦ                                          КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		КОГДА ТабличнаяЧасть.Сумма <> 0 Тогда 
	|			ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаУпр
	|	КОНЕЦ                                          КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет) КАК ФормаОплаты
	|	
	|ИЗ
	|	ВтРасчетовПоКлиентам КАК ТабличнаяЧасть
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		ТабличнаяЧасть.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И ТабличнаяЧасть.Партнер     = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И ТабличнаяЧасть.Контрагент  = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ТабличнаяЧасть.Договор     = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И ТабличнаяЧасть.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетовПоКлиентам()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ВидДвижения КАК ВидДвижения,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Заказ КАК Заказ,
	|	Задолженность.Договор КАК Договор,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ВтРасчетовПоКлиентам
	|ИЗ
	// Расчеты по основной организации
	|	(ВЫБРАТЬ // дебиторская задолженность дебитора-клиента перед организацией считается оплаченной
	|		ДанныеДокумента.Ссылка                   КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|		ДанныеДокумента.Организация              КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                    КАК Партнер,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор КАК Контрагент,
	|		ДанныеДокумента.Заказ                    КАК Заказ,
	|		ДанныеДокумента.Договор                  КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов     КАК ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Сумма                    КАК Сумма,
	|		ДанныеДокумента.СуммаВзаиморасчетов      КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки              КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|		ДанныеДокумента.СуммаРегл                КАК СуммаРегл,
	|		ДанныеДокумента.СуммаУпр                 КАК СуммаУпр
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // кредиторская задолженность организации перед кредитором-клиентом сторнируется
	|		ДанныеДокумента.Ссылка                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)    КАК ВидДвижения,
	|		ДанныеДокумента.Организация               КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                     КАК Партнер,
	|		ДанныеДокумента.Ссылка.КонтрагентКредитор КАК Контрагент,
	|		ДанныеДокумента.Заказ                     КАК Заказ,
	|		ДанныеДокумента.Договор                   КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов      КАК ВалютаВзаиморасчетов,
	|		-ДанныеДокумента.Сумма                    КАК Сумма,
	|		-ДанныеДокумента.СуммаВзаиморасчетов      КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки               КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|		-ДанныеДокумента.СуммаРегл                КАК СуммаРегл,
	|		-ДанныеДокумента.СуммаУпр                 КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСКлиентом, Кредитор-Организация)
	|	ВЫБРАТЬ // перенос дебиторки по клиентам у организации на дебиторку по клиентам у кредитора-организации
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                    КАК ВидДвижения,
	|		ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).КонтрагентКредитор  КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                                     КАК Партнер,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор                  КАК Контрагент,
	|		Неопределено                                              КАК Заказ,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор 
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ                                                     КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		-СУММА(ДанныеДокумента.Сумма)                             КАК Сумма,
	|		-СУММА(ДанныеДокумента.СуммаВзаиморасчетов)               КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		-СУММА(ДанныеДокумента.СуммаРегл)                         КАК СуммаРегл,
	|		-СУММА(ДанныеДокумента.СуммаУпр)                          КАК СуммаУпр
	|	ИЗ 
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиКредитор И ДанныеДокумента.Ссылка.КонтрагентКредитор <> ДанныеДокумента.Ссылка.КонтрагентДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ,
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСПоставщиком, Дебитор-Организация)
	|	ВЫБРАТЬ // сторно кредиторки по клиенту у дебитора-организации перед организацией
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор      КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация                   КАК Контрагент,
	|		ДанныеДокумента.Заказ                         КАК Заказ,
	|		ДанныеДокумента.Договор                       КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|		-ДанныеДокумента.Сумма                        КАК Сумма,
	|		-ДанныеДокумента.СуммаВзаиморасчетов          КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки                   КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|		-ДанныеДокумента.СуммаРегл                    КАК СуммаРегл,
	|		-ДанныеДокумента.СуммаУпр                     КАК СуммаУпр
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСПоставщиком, Кредитор-Организация)
	|	ВЫБРАТЬ // зачет (оплата) дебиторской задолженности организации перед кредитором-организацией
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)        КАК ВидДвижения,
	|		ДанныеДокумента.Ссылка.КонтрагентКредитор     КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация                   КАК Контрагент,
	|		ДанныеДокумента.Заказ                         КАК Заказ,
	|		ДанныеДокумента.Договор                       КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Сумма                         КАК Сумма,
	|		ДанныеДокумента.СуммаВзаиморасчетов           КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки                   КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|		ДанныеДокумента.СуммаРегл                     КАК СуммаРегл,
	|		ДанныеДокумента.СуммаУпр                      КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиКредитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // перенос кредиторки по клиенту у дебитора-организации на кредиторку поставщику перед кредитором-клиентом
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                    КАК ВидДвижения,
	|		&КонтрагентДебитор                                        КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                                     КАК Партнер,
	|		&КонтрагентКредитор                                       КАК Контрагент,
	|		Неопределено                                              КАК Заказ,
	|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)    КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		СУММА(ДанныеДокумента.Сумма)                              КАК Сумма,
	|		СУММА(ДанныеДокумента.СуммаВзаиморасчетов)                КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		СУММА(ДанныеДокумента.СуммаРегл)                          КАК СуммаРегл,
	|		СУММА(ДанныеДокумента.СуммаУпр)                           КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиДебитор И ДанныеДокумента.Ссылка.КонтрагентКредитор <> ДанныеДокумента.Ссылка.КонтрагентДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	СГРУППИРОВАТЬ ПО
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ), ДанныеДокумента.ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (МеждуОрганизациями)
	|	ВЫБРАТЬ // перенос дебиторки по клиентам у организации на организацию-кредитора
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                    КАК ВидДвижения,
	|		&ПараметрОрганизацияКредитор                              КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)             КАК Партнер,
	|		ДанныеДокумента.Организация                               КАК Контрагент,
	|		&ОбъектРасчетовИнтеркампани                               КАК Заказ,
	|		&ДоговорИнтеркампани                                      КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		СУММА(ДанныеДокумента.Сумма)                              КАК Сумма,
	|		СУММА(ДанныеДокумента.СуммаВзаиморасчетов)                КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		СУММА(ДанныеДокумента.СуммаРегл)                          КАК СуммаРегл,
	|		СУММА(ДанныеДокумента.СуммаУпр)                           КАК СуммаУпр
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМежду2Организациями
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка,
	|		ДанныеДокумента.Организация,
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|) КАК Задолженность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности)        КАК Регистратор,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Дата   КАК Период,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Дата   КАК ДатаРегистратора,
	|	ТабличнаяЧасть.ВидДвижения                     КАК ВидДвижения,
	|	
	|	// Измерения
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	ТабличнаяЧасть.Заказ                           КАК ЗаказПоставщику,
	|	ТабличнаяЧасть.ВалютаВзаиморасчетов            КАК Валюта,
	|	
	|	// Ресурсы
	|	// Сумма в валюте взаиморассчетов
	|	ТабличнаяЧасть.СуммаВзаиморасчетов             КАК Сумма,
	|	ТабличнаяЧасть.СуммаВзаиморасчетов             КАК КОплате,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		КОГДА ТабличнаяЧасть.Сумма <> 0 Тогда 
	|			ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаРегл
	|	КОНЕЦ                                          КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			ТабличнаяЧасть.СуммаВзаиморасчетов
	|		КОГДА ТабличнаяЧасть.Сумма <> 0 Тогда 
	|			ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ
	|			ТабличнаяЧасть.СуммаУпр
	|	КОНЕЦ                                          КАК СуммаУпр,
	|	
	|	// Реквизиты
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет) КАК ФормаОплаты
	|	
	|ИЗ
	|	ВтРасчетовПоПоставщикам КАК ТабличнаяЧасть
	|	
	|	// Определим Ключи аналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		  ТабличнаяЧасть.Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И ТабличнаяЧасть.Партнер     = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И ТабличнаяЧасть.Контрагент  = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ТабличнаяЧасть.Договор     = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И ТабличнаяЧасть.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Ссылка КАК Документ.ВзаимозачетЗадолженности).Проведен
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетовПоПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ВидДвижения КАК ВидДвижения,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Заказ КАК Заказ,
	|	Задолженность.Договор КАК Договор,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр КАК СуммаУпр
	|
	|ПОМЕСТИТЬ ВтРасчетовПоПоставщикам
	|ИЗ
	// Расчеты по основной организации
	|	(ВЫБРАТЬ // дебиторская задолженность дебитора-поставщика перед организацией сторнируется
	|		ДанныеДокумента.Ссылка                  КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|		ДанныеДокумента.Организация             КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                   КАК Партнер,
	|		&КонтрагентДебитор                      КАК Контрагент,
	|		ДанныеДокумента.Заказ                   КАК Заказ,
	|		ДанныеДокумента.Договор                 КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		-ДанныеДокумента.Сумма                  КАК Сумма,
	|		-ДанныеДокумента.СуммаВзаиморасчетов    КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки             КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		-ДанныеДокумента.СуммаРегл              КАК СуммаРегл,
	|		-ДанныеДокумента.СуммаУпр               КАК СуммаУпр
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // кредиторская задолженность организации перед кредитором-поставщиком считается оплаченной
	|		ДанныеДокумента.Ссылка                  КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|		ДанныеДокумента.Организация             КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                   КАК Партнер,
	|		&КонтрагентКредитор                     КАК Контрагент,
	|		ДанныеДокумента.Заказ                   КАК Заказ,
	|		ДанныеДокумента.Договор                 КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Сумма                   КАК Сумма,
	|		ДанныеДокумента.СуммаВзаиморасчетов     КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки             КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ДанныеДокумента.СуммаРегл               КАК СуммаРегл,
	|		ДанныеДокумента.СуммаУпр                КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСКлиентом, Дебитор-Организация)
	|	ВЫБРАТЬ // зачет (оплата) кредиторской задолженности дебитора-организации перед организацией 
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|		&КонтрагентДебитор                            КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация                   КАК Контрагент,
	|		ДанныеДокумента.Заказ                         КАК Заказ,
	|		ДанныеДокумента.Договор                       КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Сумма                         КАК Сумма,
	|		ДанныеДокумента.СуммаВзаиморасчетов           КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки                   КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|		ДанныеДокумента.СуммаРегл                     КАК СуммаРегл,
	|		ДанныеДокумента.СуммаУпр                      КАК СуммаУпр
	|	ИЗ 
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСКлиентом, Кредитор-Организация)
	|	ВЫБРАТЬ // сторно дебиторки по поставщику у кредитора-организации
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|		&КонтрагентКредитор                           КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|		ДанныеДокумента.Организация                   КАК Контрагент,
	|		ДанныеДокумента.Заказ                         КАК Заказ,
	|		ДанныеДокумента.Договор                       КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов          КАК ВалютаВзаиморасчетов,
	|		-ДанныеДокумента.Сумма                        КАК Сумма,
	|		-ДанныеДокумента.СуммаВзаиморасчетов          КАК СуммаВзаиморасчетов,
	|		ДанныеДокумента.НомерСтроки                   КАК НомерСтроки,
	|		ДанныеДокумента.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|		-ДанныеДокумента.СуммаРегл                    КАК СуммаРегл,
	|		-ДанныеДокумента.СуммаУпр                     КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиКредитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (РасчетыСПоставщиком, Дебитор-Организация)
	|	ВЫБРАТЬ // перенос кредиторки по поставщику у дебитора-организации на кредиторку по поставщику перед кредитором-поставщиком
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                    КАК ВидДвижения,
	|		&КонтрагентДебитор                                        КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                                     КАК Партнер,
	|		&КонтрагентКредитор                                       КАК Контрагент,
	|		Неопределено                                              КАК Заказ,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор 
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ                                                     КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		-СУММА(ДанныеДокумента.Сумма)                             КАК Сумма,
	|		-СУММА(ДанныеДокумента.СуммаВзаиморасчетов)               КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		-СУММА(ДанныеДокумента.СуммаРегл)                         КАК СуммаРегл,
	|		-СУММА(ДанныеДокумента.СуммаУпр)                          КАК СуммаУпр
	|	ИЗ
	|		ВтКредиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиДебитор И ДанныеДокумента.Ссылка.КонтрагентКредитор <> ДанныеДокумента.Ссылка.КонтрагентДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиКредитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ,
	|		ДанныеДокумента.ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // добавление дебиторской задолженности по клиентам у организации-кредитора
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                    КАК ВидДвижения,
	|		&КонтрагентКредитор                                       КАК Организация,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер
	|		КОНЕЦ                                                     КАК Партнер,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор                  КАК Контрагент,
	|		Неопределено                                              КАК Заказ,
	|		ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор
	|			ТОГДА &ДоговорИнтеркампани
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОНЕЦ                                                     КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		СУММА(ДанныеДокумента.Сумма)                              КАК Сумма,
	|		СУММА(ДанныеДокумента.СуммаВзаиморасчетов)                КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		СУММА(ДанныеДокумента.СуммаРегл)                          КАК СуммаРегл,
	|		СУММА(ДанныеДокумента.СуммаУпр)                           КАК СуммаУпр
	|	ИЗ
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМеждуОрганизациямиКредитор И ДанныеДокумента.Ссылка.КонтрагентКредитор <> ДанныеДокумента.Ссылка.КонтрагентДебитор
	|		И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка,
	|		ДанныеДокумента.Ссылка.КонтрагентДебитор,
	|		(ВЫБОР КОГДА &РасчетыМеждуОрганизациямиДебитор ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|			ИНАЧЕ ДанныеДокумента.Партнер КОНЕЦ), ДанныеДокумента.ВалютаВзаиморасчетов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// (МеждуОрганизациями)
	|	ВЫБРАТЬ // перенос дебиторки по клиентам у организации на организацию-кредитора
	|		ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                    КАК ВидДвижения,
	|		ДанныеДокумента.Организация                               КАК Организация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)             КАК Партнер,
	|		&ПараметрОрганизацияКредитор                              КАК Контрагент,
	|		&ОбъектРасчетовИнтеркампани                               КАК Заказ,
	|		&ДоговорИнтеркампани                                      КАК Договор,
	|		ДанныеДокумента.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
	|		СУММА(ДанныеДокумента.Сумма)                              КАК Сумма,
	|		СУММА(ДанныеДокумента.СуммаВзаиморасчетов)                КАК СуммаВзаиморасчетов,
	|		МАКСИМУМ(ДанныеДокумента.НомерСтроки)                     КАК НомерСтроки,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|		СУММА(ДанныеДокумента.СуммаРегл)                          КАК СуммаРегл,
	|		СУММА(ДанныеДокумента.СуммаУпр)                           КАК СуммаУпр
	|	ИЗ 
	|		ВтДебиторскаяЗадолженность КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыМежду2Организациями
	|		//И ДанныеДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Организация,
	|		ДанныеДокумента.ВалютаВзаиморасчетов,
	|		ДанныеДокумента.Ссылка
	|
	|) КАК Задолженность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРасчетыПоЗадолженности()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.ВидДвижения КАК ВидДвижения,
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Партнер КАК Партнер,
	|	Задолженность.Контрагент КАК Контрагент,
	|	Задолженность.Заказ КАК Заказ,
	|	Задолженность.Договор КАК Договор,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр КАК СуммаУпр,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВтРасчетыПоЗадолженности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаВзаиморасчетов < 0
	|			ТОГДА ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				КОНЕЦ
	|			ИНАЧЕ РасчетыСКлиентами.ВидДвижения
	|		КОНЕЦ                                     КАК ВидДвижения,
	|		РасчетыСКлиентами.Организация             КАК Организация,
	|		РасчетыСКлиентами.Партнер                 КАК Партнер,
	|		РасчетыСКлиентами.Контрагент              КАК Контрагент,
	|		РасчетыСКлиентами.Заказ                   КАК Заказ,
	|		РасчетыСКлиентами.Договор                 КАК Договор,
	|		РасчетыСКлиентами.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасчетыСКлиентами.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		ВЫБОР КОГДА РасчетыСКлиентами.Сумма < 0
	|			ТОГДА -РасчетыСКлиентами.Сумма
	|			ИНАЧЕ РасчетыСКлиентами.Сумма
	|		КОНЕЦ                                     КАК Сумма,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаРегл < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаРегл
	|			ИНАЧЕ РасчетыСКлиентами.СуммаРегл
	|		КОНЕЦ                                     КАК СуммаРегл,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаУпр < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаУпр
	|			ИНАЧЕ РасчетыСКлиентами.СуммаУпр
	|		КОНЕЦ                                     КАК СуммаУпр,
	|		ВЫБОР КОГДА РасчетыСКлиентами.СуммаВзаиморасчетов < 0
	|			ТОГДА -РасчетыСКлиентами.СуммаВзаиморасчетов
	|			ИНАЧЕ РасчетыСКлиентами.СуммаВзаиморасчетов
	|		КОНЕЦ                                     КАК СуммаВзаиморасчетов,
	|		РасчетыСКлиентами.НомерСтроки             КАК НомерСтроки
	|	ИЗ
	|		ВтРасчетовПоКлиентам КАК РасчетыСКлиентами
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаВзаиморасчетов < 0
	|			ТОГДА ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|						ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				КОНЕЦ
	|			ИНАЧЕ РасчетыСПоставщиками.ВидДвижения
	|		КОНЕЦ                                        КАК ВидДвижения,
	|		РасчетыСПоставщиками.Организация             КАК Организация,
	|		РасчетыСПоставщиками.Партнер                 КАК Партнер,
	|		РасчетыСПоставщиками.Контрагент              КАК Контрагент,
	|		РасчетыСПоставщиками.Заказ                   КАК Заказ,
	|		РасчетыСПоставщиками.Договор                 КАК Договор,
	|		РасчетыСПоставщиками.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		РасчетыСПоставщиками.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.Сумма < 0
	|			ТОГДА -РасчетыСПоставщиками.Сумма
	|			ИНАЧЕ РасчетыСПоставщиками.Сумма
	|		КОНЕЦ                                        КАК Сумма,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаРегл < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаРегл
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаРегл
	|		КОНЕЦ                                        КАК СуммаРегл,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаУпр < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаУпр
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаУпр
	|		КОНЕЦ                                        КАК СуммаУпр,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.СуммаВзаиморасчетов < 0
	|			ТОГДА -РасчетыСПоставщиками.СуммаВзаиморасчетов
	|			ИНАЧЕ РасчетыСПоставщиками.СуммаВзаиморасчетов
	|		КОНЕЦ                                        КАК СуммаВзаиморасчетов,
	|		РасчетыСПоставщиками.НомерСтроки             КАК НомерСтроки
	|	ИЗ
	|		ВтРасчетовПоПоставщикам КАК РасчетыСПоставщиками
	|
	|	) КАК Задолженность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнитьТекстЗапросаСоединениемСКлючамиАналитики(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросТабличныеЧасти = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ТекстЗапросаТабличныеЧасти = ЗапросТабличныеЧасти.ПолучитьТекстЗапроса();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличныеЧасти.Организация КАК Организация,
	|	ТабличныеЧасти.Партнер     КАК Партнер,
	|	ТабличныеЧасти.Контрагент  КАК Контрагент,
	|	ТабличныеЧасти.Договор     КАК Договор,
	|	ТабличныеЧасти.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Организация КАК Организация,
	|		ВложенныйЗапрос.Партнер КАК Партнер,
	|		ВложенныйЗапрос.Контрагент КАК Контрагент,
	|		ВложенныйЗапрос.Договор КАК Договор,
	|		ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности
	|	ИЗ
	|		ВложенныйЗапрос
	|	) КАК ТабличныеЧасти
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТабличныеЧасти.Организация = Аналитика.Организация
	|		И ТабличныеЧасти.Партнер = Аналитика.Партнер
	|		И ТабличныеЧасти.Контрагент = Аналитика.Контрагент
	|		И ТабличныеЧасти.Договор = Аналитика.Договор
	|		И ТабличныеЧасти.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК НеобработаннаяАналитика
	|	ПО
	|		ТабличныеЧасти.Организация = Аналитика.Организация
	|		И ТабличныеЧасти.Партнер = Аналитика.Партнер
	|		И ТабличныеЧасти.Контрагент = Аналитика.Контрагент
	|		И ТабличныеЧасти.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И Аналитика.Договор = НЕОПРЕДЕЛЕНО
	|		И ТабличныеЧасти.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК НеобработаннаяАналитикаИнтеркампани
	|	ПО
	|		ТабличныеЧасти.Организация = Аналитика.Организация
	|		И ТабличныеЧасти.Партнер = Аналитика.Партнер
	|		И ТабличныеЧасти.Контрагент = Аналитика.Контрагент
	|		И ТабличныеЧасти.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
	|		И Аналитика.Договор = НЕОПРЕДЕЛЕНО
	|		И ТабличныеЧасти.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|	И НеобработаннаяАналитика.КлючАналитики ЕСТЬ NULL
	|	И НеобработаннаяАналитикаИнтеркампани.КлючАналитики ЕСТЬ NULL
	|";
	
	СхемаЗапросаАналитик = Новый СхемаЗапроса;
	СхемаЗапросаАналитик.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапросаАналитик.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.УстановитьТекстЗапроса(ТекстЗапросаТабличныеЧасти);
	
	ЗапросТабличныеЧасти.УстановитьТекстЗапроса(СхемаЗапросаАналитик.ПолучитьТекстЗапроса());
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Процедура ДополнитьТекстЗапросаПроведенияДляПроверки(
	РезультирующийЗапрос,
	ПолноеИмяРегистра,
	ПолноеИмяДокумента)
	
	ТекстЗапросаФормированияДвижений = РезультирующийЗапрос.Текст;
	ЗначенияПараметров = Новый Структура;
	
	ТекстРезультирующегоЗапроса = "";
	
	ЧастиИмениРегистра = СтрРазделить(ПолноеИмяРегистра, ".", Ложь);
	ТипРегистра = ЧастиИмениРегистра[0];
	ИмяРегистра = ЧастиИмениРегистра[1];
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяРегистра);
	
	ТекстРегистра = 
	"ВЫБРАТЬ";
	
	ТекстВыборкиСуммирующегоЗапроса =
	"ВЫБРАТЬ";
	ТекстГруппировкиСуммирующиегоЗапроса = "
	|СГРУППИРОВАТЬ ПО";
	ТекстУсловияСуммирующиегоЗапроса = "
	|ИМЕЮЩИЕ
	|	ЛОЖЬ";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаФормированияДвижений);
	Запрос = СхемаЗапроса.ПакетЗапросов[0];
	
	ВсеКолонки = Новый Массив;
	КолонкиКУдалению = Новый Массив;
	
	Для Каждого Колонка Из Запрос.Колонки Цикл
		Если МетаданныеРегистра.Реквизиты.Найти(Колонка.Псевдоним) <> Неопределено Тогда
			КолонкиКУдалению.Добавить(Колонка);
		КонецЕсли;
	КонецЦикла;
	Для каждого КолонкаКУдалению Из КолонкиКУдалению Цикл
		Запрос.Колонки.Удалить(Запрос.Колонки.Индекс(КолонкаКУдалению));
	КонецЦикла;
	
	ТекстЗапросаФормированияДвижений = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого Колонка Из Запрос.Колонки Цикл
		
		ВсеКолонки.Добавить(Колонка.Псевдоним);
		
		Если ТипРегистра = "РегистрНакопления"
			И МетаданныеРегистра.Ресурсы.Найти(Колонка.Псевдоним) <> Неопределено Тогда
			
			ТекстРегистра = ТекстРегистра + "
			|	-ТаблицаРегистра." + Колонка.Псевдоним + ",";
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") КАК " + Колонка.Псевдоним + ",";
			ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
			|	ИЛИ СУММА(ВложенныйЗапрос." + Колонка.Псевдоним + ") <> 0";
			
		ИначеЕсли Не Колонка.Псевдоним = "КонтрольноеПолеОбновлениеИБ" Тогда
			ТекстРегистра = ТекстРегистра + "
			|	ТаблицаРегистра." + Колонка.Псевдоним + ",";
			
			ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
			|	ВложенныйЗапрос." + Колонка.Псевдоним + " КАК " + Колонка.Псевдоним + ",";
			
			ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
			|	ВложенныйЗапрос." + Колонка.Псевдоним + ",";
		КонецЕсли;
	КонецЦикла;
	
	ТекстВставкиЗапросФормирующийДвижения = "";
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		Если ВсеКолонки.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	ТаблицаРегистра." + Измерение.Имя + ",";
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	ВложенныйЗапрос." + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		ТекстГруппировкиСуммирующиегоЗапроса = ТекстГруппировкиСуммирующиегоЗапроса + " 
		|	ВложенныйЗапрос." + Измерение.Имя + ",";
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	&ПустоеЗначение" + Измерение.Имя + " КАК " + Измерение.Имя + ",";
		ЗначенияПараметров.Вставить("ПустоеЗначение" + Измерение.Имя, Измерение.Тип.ПривестиЗначение());
		
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ВсеКолонки.Найти(Ресурс.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРегистра = ТекстРегистра + "
		|	-ТаблицаРегистра." + Ресурс.Имя + ",";
		ТекстВыборкиСуммирующегоЗапроса = ТекстВыборкиСуммирующегоЗапроса + "
		|	СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") КАК " + Ресурс.Имя + ",";
		ТекстУсловияСуммирующиегоЗапроса = ТекстУсловияСуммирующиегоЗапроса + "
		|	ИЛИ СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0";
		ТекстВставкиЗапросФормирующийДвижения = ТекстВставкиЗапросФормирующийДвижения + "
		|	0 КАК " + Ресурс.Имя + ",";
	КонецЦикла;
	
	ТекстРегистра = Лев(ТекстРегистра, СтрДлина(ТекстРегистра) - 1);
	ТекстВыборкиСуммирующегоЗапроса = Лев(ТекстВыборкиСуммирующегоЗапроса, СтрДлина(ТекстВыборкиСуммирующегоЗапроса) - 1);
	ТекстГруппировкиСуммирующиегоЗапроса = Лев(ТекстГруппировкиСуммирующиегоЗапроса, СтрДлина(ТекстГруппировкиСуммирующиегоЗапроса) - 1);
	
	Если Не ПустаяСтрока(ТекстВставкиЗапросФормирующийДвижения) Тогда
		ТекстВставкиЗапросФормирующийДвижения = Лев(ТекстВставкиЗапросФормирующийДвижения, СтрДлина(ТекстВставкиЗапросФормирующийДвижения) - 1);
		ТекстЗапросаФормированияДвижений = СтрЗаменить(ТекстЗапросаФормированияДвижений,
											"ИЗ",
											",
											|" +ТекстВставкиЗапросФормирующийДвижения + "
											|ИЗ");
	КонецЕсли;
			
	ТекстРегистра = ТекстРегистра + "
	|ИЗ
	|	" + ПолноеИмяРегистра + " КАК ТаблицаРегистра";
	
	ТекстРегистра = ТекстРегистра + "
	|ГДЕ
	|	ТаблицаРегистра.Регистратор ССЫЛКА " + ПолноеИмяДокумента;
	
	ТекстРезультирующегоЗапроса = ТекстРезультирующегоЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеправильныеДвижения.Регистратор КАК Регистратор
	|ИЗ
	|(" + ТекстВыборкиСуммирующегоЗапроса + "
	|ИЗ
	|	("
	+ ТекстЗапросаФормированияДвижений 
	+ "
	|ОБЪЕДИНИТЬ ВСЕ
	|" 
	+ ТекстРегистра
	+ ") КАК ВложенныйЗапрос "
	+ ТекстГруппировкиСуммирующиегоЗапроса
	+ ТекстУсловияСуммирующиегоЗапроса + ") КАК НеправильныеДвижения";
	
	Для Каждого Параметр Из ЗначенияПараметров Цикл
		РезультирующийЗапрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	РезультирующийЗапрос.Текст = ТекстРезультирующегоЗапроса;
	
КонецПроцедуры

Функция ПереопределенныеПараметрыЗапроса()
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("ПараметрОрганизацияКредитор", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями)
		|			)
		|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ОрганизацияКредитор
		|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).Организация
		|	КОНЕЦ");
	ПараметрыЗапроса.Вставить("РасчетыМежду2Организациями", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ВидОперации В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями)
		|			)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПараметрыЗапроса.Вставить("РасчетыМеждуОрганизациямиДебитор", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ТипДебитора В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
		|			)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПараметрыЗапроса.Вставить("РасчетыМеждуОрганизациямиКредитор", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ТипКредитора В (
		|			ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияКлиент),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик)
		|			)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
	ПараметрыЗапроса.Вставить("ДоговорИнтеркампани", "
		|	ЕСТЬNULL(
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ОбъектРасчетовИнтеркампани) 
		|				= ТИП(Справочник.ДоговорыМеждуОрганизациями) ТОГДА
		|			ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ОбъектРасчетовИнтеркампани
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ОбъектРасчетовИнтеркампани.Договор
		|		КОНЕЦ,
		|		ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка))");
	ПараметрыЗапроса.Вставить("ОбъектРасчетовИнтеркампани", "
		|	ВЫРАЗИТЬ(ДанныеДокумента.Ссылка КАК Документ.ВзаимозачетЗадолженности).ОбъектРасчетовИнтеркампани");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаФормированияКлючейАналитикПоПартнерам()
	
	ПолноеИмяДокумента = "Документ.ВзаимозачетЗадолженности";
	СинонимТаблицыДокумента = "ДанныеДокумента";
	
	ТекстЗапроса = 
		ТекстЗапросаВтДебиторскаяЗадолженность() + "
		|;" +
		ТекстЗапросаВтКредиторскаяЗадолженность() + "
		|;" +
		ТекстЗапросаКлючиАналитикПоПартнерам();
	ПараметрыЗапроса = ПереопределенныеПараметрыЗапроса();
	ПараметрыЗапроса.Вставить("ТипРасчетовСПоставщиком", "ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)");
	
	АдаптированныйТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПараметрыЗапроса);
	
	Возврат ДополнитьТекстЗапросаСоединениемСКлючамиАналитики(АдаптированныйТекстЗапроса);
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ВзаимозачетЗадолженности) Тогда
		// Акт взаимозачета (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаВзаимозачетаЗадолженностиMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "АктВзаимозачетаMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Акт взаимозачета (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;

		// Акт переуступки долга (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "АктПереуступкиДолгаMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		
		// Акт переуступки долга между организациями (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "АктПереуступкиДолгаМеждуОрганизациямиMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Акт переуступки долга между организациями (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьНесколькоОрганизаций";
	КонецЕсли;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = Новый Структура("Данные, Макеты",
		ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
		ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
				
	Возврат Структура;
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МассивРезультатов = ПолучитьДанныеВзаимозачетЗадолженности(МассивДокументов);
	
	Выборка = МассивРезультатов[0].Выбрать();
	ВыборкаДебиторскаяЗадолженность = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаКредиторскаяЗадолженность = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("Организация",                               Выборка.Организация);
		ДанныеОбъекта.Вставить("ДолжностьРуководителя",                     Выборка.ДолжностьРуководителя);
		ДанныеОбъекта.Вставить("Руководитель",                              Выборка.Руководитель);
		ДанныеОбъекта.Вставить("ОрганизацияКредитор",                       Выборка.ОрганизацияКредитор);
		ДанныеОбъекта.Вставить("ДолжностьРуководителяОрганизацииКредитора", Выборка.ДолжностьРуководителяОрганизацииКредитора);
		ДанныеОбъекта.Вставить("РуководительОрганизацииКредитора",          Выборка.РуководительОрганизацииКредитора);
		ДанныеОбъекта.Вставить("Дата",                                      Формат(Выборка.Дата, "ДЛФ=ДД"));
		ДанныеОбъекта.Вставить("АдресОрганизации",                          ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Выборка.ОрганизацияСсылка, "Юридический", Выборка.Дата));
		ДанныеОбъекта.Вставить("АдресОрганизацииКредитора",                 ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Выборка.ОрганизацияКредиторСсылка, "Юридический", Выборка.Дата));
		ДанныеОбъекта.Вставить("Взаимозачет",                               Выборка.Взаимозачет);
		ДанныеОбъекта.Вставить("ВзаимозачетМеждуОрганизациями",             Выборка.ВзаимозачетМеждуОрганизациями);
		ДанныеОбъекта.Вставить("Сумма", ФормированиеПечатныхФорм.ФорматСумм(Выборка.СуммаРегл, ВалютаРегламентированногоУчета));
		
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Выборка.СуммаРегл, ВалютаРегламентированногоУчета);
		ДанныеОбъекта.Вставить("СуммаПрописью", СуммаПрописью);

		ДанныеОбъекта.Вставить("ДебиторскаяЗадолженность", Новый Массив);
		ДанныеОбъекта.Вставить("КредиторскаяЗадолженность", Новый Массив);
		
		ДанныеОбъекта.Вставить("КонтрагентДебитор",  Справочники.Контрагенты.СокрЮрНаименованиеНаДату(Выборка.КонтрагентДебитор, Выборка.Дата));
		ДанныеОбъекта.Вставить("КонтрагентКредитор",  Справочники.Контрагенты.СокрЮрНаименованиеНаДату(Выборка.КонтрагентКредитор, Выборка.Дата));
		
		АдресКонтрагентаДебитора = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Выборка.КонтрагентДебитор, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,, Выборка.Дата);
		ДанныеОбъекта.Вставить("АдресКонтрагентаДебитора", АдресКонтрагентаДебитора);
		
		АдресОрганизацииКредитора = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Выборка.КонтрагентКредитор, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,, Выборка.Дата);
		ДанныеОбъекта.Вставить("АдресОрганизацииКредитора", АдресОрганизацииКредитора);
		
		Если ВыборкаДебиторскаяЗадолженность.НайтиСледующий(Выборка.Ссылка, "Ссылка") Тогда 
			СформироватьТаблицуЗадолженности(ВыборкаДебиторскаяЗадолженность, Выборка, ДанныеОбъекта.ДебиторскаяЗадолженность);
		КонецЕсли;
		Если ВыборкаКредиторскаяЗадолженность.НайтиСледующий(Выборка.Ссылка, "Ссылка") Тогда 
			СформироватьТаблицуЗадолженности(ВыборкаКредиторскаяЗадолженность, Выборка, ДанныеОбъекта.КредиторскаяЗадолженность);
		КонецЕсли;

		ДанныеОбъектаПоМакетам = Новый Структура;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(Выборка.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_АктВзаимозачета" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктВзаимозачета");
		ИначеЕсли ИмяМакета = "ПФ_DOC_АктПереуступкиДолга" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктПереуступкиДолга");
		ИначеЕсли ИмяМакета = "ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейВзаимозачетЗадолженности();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВзаимозачетЗадолженности.ПФ_DOC_АктПереуступкиДолгаМеждуОрганизациями");
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = Новый Структура("ОписаниеСекций, ДвоичныеДанныеМакетов",
		ОписаниеСекций,
	    ДвоичныеДанныеМакетов);
	
	Возврат Структура;
	
КонецФункции

Процедура СформироватьТаблицуЗадолженности(РезультатЗапроса, ВыборкаДокумент, МассивСтрок)
	
	НомерСтроки = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы = Новый Структура;
		СтрокаТаблицы.Вставить("НомерСтроки", НомерСтроки);
		СтрокаТаблицы.Вставить("Сумма", Формат(Выборка.СуммаВзаиморасчетов, "ЧДЦ=2"));
		СтрокаТаблицы.Вставить("Валюта", Выборка.ВалютаВзаиморасчетов);
		
		ТекстДокумент = "";
		Если ЗначениеЗаполнено(Выборка.НаименованиеДляПечати) Тогда
			ТекстДокумент = Выборка.НаименованиеДляПечати;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ТипДокумента) Тогда
			ТекстДокумент = ТекстДокумент
				+ ?(Не ПустаяСтрока(ТекстДокумент), ", " + Символы.ПС, "")
				+ ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Выборка, Строка(Выборка.ТипДокумента));
		КонецЕсли;
		Если ПустаяСтрока(ТекстДокумент) Тогда
			ТекстДокумент = НСтр("ru = 'Без документа'");
		КонецЕсли;
	
		СтрокаТаблицы.Вставить("Документ", ТекстДокумент);
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеВзаимозачетЗадолженности(МассивДокументов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивДокументов,
		МенеджерВременныхТаблиц);
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивДокументов,
		МенеджерВременныхТаблиц,
		"ОрганизацияКредитор", 
		Новый Структура("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель),
		"ТаблицаОтветственныеЛицаОрганизацииКредитора");
		
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияСсылка,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ОрганизацияКредитор.НаименованиеСокращенное КАК ОрганизацияКредитор,
	|	ДанныеДокумента.ОрганизацияКредитор КАК ОрганизацияКредиторСсылка,
	|	ТаблицаОтветственныеЛицаОрганизацииКредитора.РуководительНаименование КАК РуководительОрганизацииКредитора,
	|	ТаблицаОтветственныеЛицаОрганизацииКредитора.РуководительДолжность КАК ДолжностьРуководителяОрганизацииКредитора,
	|	ДанныеДокумента.КонтрагентДебитор КАК КонтрагентДебитор,
	|	ДанныеДокумента.КонтрагентКредитор КАК КонтрагентКредитор,
	|	ВЫБОР КОГДА (НЕ (ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями)) И ДанныеДокумента.КонтрагентДебитор = ДанныеДокумента.КонтрагентКредитор)
	|			ИЛИ (ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями) И ДанныеДокумента.Организация = ДанныеДокумента.ОрганизацияКредитор) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Взаимозачет,
	|	ВЫБОР КОГДА ДанныеДокумента.ВидОперации В (&ВидыОперацийМеждуОрганизациями) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВзаимозачетМеждуОрганизациями,
	|	ДанныеДокумента.СуммаРегл КАК СуммаРегл
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛицаОрганизацииКредитора КАК ТаблицаОтветственныеЛицаОрганизацииКредитора
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛицаОрганизацииКредитора.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ТипРасчетов КАК ТипРасчетов,
	|	ВЫБОР КОГДА Задолженность.Заказ = НЕОПРЕДЕЛЕНО ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТИПЗНАЧЕНИЯ(Задолженность.Заказ)
	|	КОНЕЦ КАК ТипДокумента,
	|	Задолженность.Заказ.Дата КАК Дата,
	|	Задолженность.Заказ.Номер КАК Номер,
	|	ВЫБОР КОГДА Задолженность.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Задолженность.Заказ.НаименованиеДляПечати
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаименованиеДляПечати,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка В (&МассивДокументов)
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задолженность.Ссылка КАК Ссылка,
	|	Задолженность.ТипРасчетов КАК ТипРасчетов,
	|	ВЫБОР КОГДА Задолженность.Заказ = НЕОПРЕДЕЛЕНО ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТИПЗНАЧЕНИЯ(Задолженность.Заказ)
	|	КОНЕЦ КАК ТипДокумента,
	|	Задолженность.Заказ.Дата КАК Дата,
	|	Задолженность.Заказ.Номер КАК Номер,
	|	ВЫБОР КОГДА Задолженность.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Задолженность.Заказ.НаименованиеДляПечати
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаименованиеДляПечати,
	|	Задолженность.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	Задолженность.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка В (&МассивДокументов)
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями);
	МассивОпераций.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями);
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВидыОперацийМеждуОрганизациями", МассивОпераций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
		
	Возврат МассивРезультатов;

КонецФункции

Функция ПолучитьОписаниеОбластейВзаимозачетЗадолженности()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул","ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул","НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Заголовок", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДебиторскаяЗадолженность", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "КредиторскаяЗадолженность", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицы", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицы", "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Итог", "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подвал", "Общая");
	
	Возврат Секции;

КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы

// Формирует перечень документов с отличающимися от эталонных движениями
//
// Параметры
//    ИмяРегистра - Строка - Проверяемый регистр.
//
// Возвращаемое значение
//    Массив - Документы для перепроведения по регистру.
//
Функция РегистраторыДляПерепроведенияПриОбновлении(ИмяРегистра) Экспорт
	
	Регистраторы = Новый Массив;
	
	Если ИмяРегистра = "РасчетыСКлиентами"
		Или ИмяРегистра = "РасчетыСПоставщиками" Тогда
	
		ПолноеИмяДокумента = "Документ.ВзаимозачетЗадолженности";
		МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЗапросАналитик = Новый Запрос(АдаптированныйТекстЗапросаФормированияКлючейАналитикПоПартнерам());
		ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		РезультатЗапроса = ЗапросАналитик.ВыполнитьПакет();
		
		Если ИмяРегистра = "РасчетыСКлиентами" Тогда
			ТекстЗапросаВТ = ТекстЗапросаВтРасчетовПоКлиентам();
			ТекстЗапроса = ТекстЗапросаРасчетыСКлиентами();
		ИначеЕсли ИмяРегистра = "РасчетыСПоставщиками" Тогда
			ТекстЗапросаВТ = ТекстЗапросаВтРасчетовПоПоставщиками();
			ТекстЗапроса = ТекстЗапросаРасчетыСПоставщиками();
		КонецЕсли;
		
		ПереопределениеРасчетаПараметров = ПереопределенныеПараметрыЗапроса();
		
		Запрос.Текст = ТекстЗапросаВТ;
		ПараметрыЗапроса = Запрос.НайтиПараметры();
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			ТекстЗамены = Неопределено;
			Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Имя) Тогда
				ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Имя];
			ИначеЕсли Параметр.Имя = "Период" Тогда
				ТекстЗамены = "";
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Имя) <> Неопределено Тогда
				ТекстЗамены = "ВЫРАЗИТЬ(" + СинонимТаблицыДокумента + ".Ссылка КАК " + ПолноеИмяДокумента + ")." + Параметр.Имя;
			КонецЕсли;
		
			Если ТекстЗамены <> Неопределено Тогда
				ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ, "&" + Параметр.Имя, ТекстЗамены);
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапросаВТ = ТекстЗапросаВТ + ";
		|УНИЧТОЖИТЬ ВтДебиторскаяЗадолженность;
		|УНИЧТОЖИТЬ ВтКредиторскаяЗадолженность;";
		
		ЗапросВТ = Новый Запрос(ТекстЗапросаВТ);
		ЗапросВТ.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		РезультатЗапроса = ЗапросВТ.ВыполнитьПакет();
		
		Запрос.Текст = ТекстЗапроса;
		ДополнитьТекстЗапросаПроведенияДляПроверки(Запрос, "РегистрНакопления." + ИмяРегистра, ПолноеИмяДокумента);
		Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат Регистраторы;
	
КонецФункции

// Заполняет сумму управленческого и регламентирвоанного учета в табличных частях документа.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.ДебиторскаяЗадолженность КАК ТЧДебиторскаяЗадолженность
	|			ПО ТЧДебиторскаяЗадолженность.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ТЧДебиторскаяЗадолженность.СуммаУпр = 0
	|	И ТЧДебиторскаяЗадолженность.СуммаРегл = 0
	|	И ТЧДебиторскаяЗадолженность.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВзаимозачетЗадолженности КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВзаимозачетЗадолженности.КредиторскаяЗадолженность КАК ТЧКредиторскаяЗадолженность
	|			ПО ТЧКредиторскаяЗадолженность.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ТЧКредиторскаяЗадолженность.СуммаУпр = 0
	|	И ТЧКредиторскаяЗадолженность.СуммаРегл = 0
	|	И ТЧКредиторскаяЗадолженность.Сумма <> 0

	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ВзаимозачетЗадолженности";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь,
					ПолноеИмяОбъекта,
					МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка                     КАК Ссылка,
	|	СсылкиДляОбработки.Ссылка.ВерсияДанных        КАК ВерсияДанных,
	|	СсылкиДляОбработки.Ссылка.Проведен            КАК Проведен,
	|	СсылкиДляОбработки.Ссылка.ВидОперации         КАК ВидОперации,
	|	СсылкиДляОбработки.Ссылка.Организация         КАК Организация,
	|	СсылкиДляОбработки.Ссылка.ОрганизацияКредитор КАК ОрганизацияКредитор,
	|	СсылкиДляОбработки.Ссылка.КонтрагентДебитор   КАК КонтрагентДебитор,
	|	СсылкиДляОбработки.Ссылка.КонтрагентКредитор  КАК КонтрагентКредитор
	|ИЗ
	|	&ВТДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка                                                                        КАК Ссылка,
	|	ЕСТЬNULL(КонтрагентКонтрагент.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))        КАК Организация,
	|
	|	ЕСТЬNULL(КонтрагентКонтрагент.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))               КАК Партнер,
	|	ЕСТЬNULL(КонтрагентКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))         КАК Контрагент,
	|	ЕСТЬNULL(КонтрагентКонтрагент.ОбъектРасчетов, Неопределено)                                      КАК ОбъектРасчетов,
	|	ЕСТЬNULL(КонтрагентКонтрагент.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))    КАК ВалютаВзаиморасчетов,
	|
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорПартнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))            КАК КорПартнер,
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорКонтрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))      КАК КорКонтрагент,
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорОбъектРасчетов, Неопределено)                                   КАК КорОбъектРасчетов,
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК КорВалютаВзаиморасчетов,
	|
	|	СУММА(ЕСТЬNULL(КонтрагентКонтрагент.Сумма,0))                                                    КАК СуммаУпр,
	|	СУММА(ЕСТЬNULL(КонтрагентКонтрагент.СуммаВВалютеВзаиморасчетов,0))                               КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ЕСТЬNULL(КонтрагентКонтрагент.КорСуммаВВалютеВзаиморасчетов,0))                            КАК КорСуммаВВалютеВзаиморасчетов,
	|	СУММА(ЕСТЬNULL(КонтрагентКонтрагент.СуммаРегл,0))                                                КАК СуммаРегл
	|
	|ИЗ
	|	&ВТДляОбработки КАК СсылкиДляОбработки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК КонтрагентКонтрагент
	|	ПО
	|		СсылкиДляОбработки.Ссылка = КонтрагентКонтрагент.Регистратор
	|СГРУППИРОВАТЬ ПО
	|	СсылкиДляОбработки.Ссылка,
	|	ЕСТЬNULL(КонтрагентКонтрагент.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.ОбъектРасчетов, Неопределено),
	|	ЕСТЬNULL(КонтрагентКонтрагент.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорПартнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорКонтрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорОбъектРасчетов, Неопределено),
	|	ЕСТЬNULL(КонтрагентКонтрагент.КорВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	ТЗКонтрагентКонтрагент = Результат[1].Выгрузить();
	
	ТЗКонтрагентКонтрагент.Индексы.Добавить("Ссылка, Организация, Контрагент");
	СтруктураПоискаСтрок       = Новый Структура("Ссылка, Организация, Контрагент");
	СтруктураПоискаСтрокКор    = Новый Структура("Ссылка, Организация, КорКонтрагент");
	СтруктураПоискаСтрок       = Новый Структура("Ссылка, Контрагент");
	СтруктураПоискаСтрокКор    = Новый Структура("Ссылка, КорКонтрагент");
	СтруктуруПоискаПоДокументу = Новый Структура("Партнер, Заказ, ВалютаВзаиморасчетов");
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВзаимозачетЗадолженности");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Если НЕ Выборка.Проведен Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями 
				ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
				
				//Дебиторская задолженность
				СтруктураПоискаСтрок.Ссылка      = Выборка.Ссылка;
				СтруктураПоискаСтрок.Контрагент  = Выборка.КонтрагентДебитор;
				
				СтрокиККДебиторка = ТЗКонтрагентКонтрагент.НайтиСтроки(СтруктураПоискаСтрок);
				
				Для Каждого СтрокаККДт Из СтрокиККДебиторка Цикл
					СтруктуруПоискаПоДокументу.Партнер              = СтрокаККДт.Партнер;
					СтруктуруПоискаПоДокументу.Заказ                = СтрокаККДт.ОбъектРасчетов;
					СтруктуруПоискаПоДокументу.ВалютаВзаиморасчетов = СтрокаККДт.ВалютаВзаиморасчетов;
					
					СтрокиДт = ДокументОбъект.ДебиторскаяЗадолженность.НайтиСтроки(СтруктуруПоискаПоДокументу);
					
					РаспределитьСтрокуККНаСтрокиДокумента(СтрокаККДт, СтрокиДт, Ложь);
				КонецЦикла;
				
				//Кредиторская задолженность
				СтруктураПоискаСтрок.Ссылка      = Выборка.Ссылка;
				СтруктураПоискаСтрок.Контрагент  = Выборка.Организация;
				
				СтрокиКККредиторка = ТЗКонтрагентКонтрагент.НайтиСтроки(СтруктураПоискаСтрок);
				
				Для Каждого СтрокаКККт Из СтрокиКККредиторка Цикл
					СтруктуруПоискаПоДокументу.Партнер              = СтрокаКККт.КорПартнер;
					СтруктуруПоискаПоДокументу.Заказ                = СтрокаКККт.КорОбъектРасчетов;
					СтруктуруПоискаПоДокументу.ВалютаВзаиморасчетов = СтрокаКККт.КорВалютаВзаиморасчетов;
					
					СтрокиКт = ДокументОбъект.КредиторскаяЗадолженность.НайтиСтроки(СтруктуруПоискаПоДокументу);
					
					РаспределитьСтрокуККНаСтрокиДокумента(СтрокаКККт, СтрокиКт, Истина);
				КонецЦикла;
				
			Иначе
				
				//Дебиторская задолженность
				СтруктураПоискаСтрок.Ссылка      = Выборка.Ссылка;
				СтруктураПоискаСтрок.Контрагент  = Выборка.КонтрагентДебитор;
				
				СтрокиККДебиторка = ТЗКонтрагентКонтрагент.НайтиСтроки(СтруктураПоискаСтрок);
				
				Для Каждого СтрокаККДт Из СтрокиККДебиторка Цикл
					
					СтруктуруПоискаПоДокументу.Партнер              = СтрокаККДт.Партнер;
					СтруктуруПоискаПоДокументу.Заказ                = СтрокаККДт.ОбъектРасчетов;
					СтруктуруПоискаПоДокументу.ВалютаВзаиморасчетов = СтрокаККДт.ВалютаВзаиморасчетов;
					
					СтрокиДт = ДокументОбъект.ДебиторскаяЗадолженность.НайтиСтроки(СтруктуруПоискаПоДокументу);
					
					РаспределитьСтрокуККНаСтрокиДокумента(СтрокаККДт, СтрокиДт, Ложь);
				КонецЦикла;
				
				//Кредиторская задолженность
				Если Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
					ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
					ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
					ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
					ИЛИ Выборка.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
					Контрагент  = Выборка.КонтрагентДебитор;
				Иначе;
					Контрагент  = Выборка.КонтрагентКредитор;
				КонецЕсли;
				
				СтруктураПоискаСтрокКор.КорКонтрагент = Контрагент;
				СтруктураПоискаСтрокКор.Ссылка        = Выборка.Ссылка;
				СтрокиКККредиторка = ТЗКонтрагентКонтрагент.НайтиСтроки(СтруктураПоискаСтрокКор);
				
				Для Каждого СтрокаКККт Из СтрокиКККредиторка Цикл
					СтруктуруПоискаПоДокументу.Партнер              = СтрокаКККт.КорПартнер;
					СтруктуруПоискаПоДокументу.Заказ                = СтрокаКККт.КорОбъектРасчетов;
					СтруктуруПоискаПоДокументу.ВалютаВзаиморасчетов = СтрокаКККт.КорВалютаВзаиморасчетов;
					
					СтрокиКт = ДокументОбъект.КредиторскаяЗадолженность.НайтиСтроки(СтруктуруПоискаПоДокументу);
					
					РаспределитьСтрокуККНаСтрокиДокумента(СтрокаКККт, СтрокиКт, Истина);
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументОбъект.СуммаРегл = ДокументОбъект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
			ДокументОбъект.СуммаУпр = ДокументОбъект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , ,РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %ВзаимозачетЗадолженности% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВзаимозачетЗадолженности%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВзаимозачетЗадолженности, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "Документ.ВзаимозачетЗадолженности");
	
КонецПроцедуры

Процедура РаспределитьСтрокуККНаСтрокиДокумента(СтрокаКК, СтрокиДокумента, ЭтоКредит)
	
	Если ЭтоКредит Тогда
		СуммаРасчетовПервоначальная = СтрокаКК.КорСуммаВВалютеВзаиморасчетов;
	Иначе
		СуммаРасчетовПервоначальная = СтрокаКК.СуммаВВалютеВзаиморасчетов;
	КонецЕсли;
	
	СуммаРегл = СтрокаКК.СуммаРегл;
	СуммаУпр  = СтрокаКК.СуммаУпр;
	СуммаВВалютеВзаиморасчетов = СуммаРасчетовПервоначальная;
	
	Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
		
		Если СуммаВВалютеВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДокумента.СуммаВзаиморасчетов < СуммаВВалютеВзаиморасчетов Тогда
			СтрокаДокумента.СуммаРегл = СтрокаКК.СуммаРегл * (СтрокаДокумента.СуммаВзаиморасчетов / СуммаРасчетовПервоначальная);
			СтрокаДокумента.СуммаУпр  = СтрокаКК.СуммаУпр * (СтрокаДокумента.СуммаВзаиморасчетов / СуммаРасчетовПервоначальная);
		Иначе
			СтрокаДокумента.СуммаРегл = СтрокаДокумента.СуммаРегл + СуммаРегл;
			СтрокаДокумента.СуммаУпр = СтрокаДокумента.СуммаУпр + СуммаУпр;
		КонецЕсли;
		
		СуммаВВалютеВзаиморасчетов = СуммаВВалютеВзаиморасчетов - СтрокаДокумента.СуммаВзаиморасчетов;
		СуммаРегл = СуммаРегл - СтрокаДокумента.СуммаРегл;
		СуммаУпр = СуммаУпр - СтрокаДокумента.СуммаУпр;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецЕсли
