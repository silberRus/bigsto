
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидОперации = Параметры.ВидОперации;
	
	ИспользоватьШаблон = ЗначениеЗаполнено(ВидОперации)
		И ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный;
		
	Если ИспользоватьШаблон Тогда
		
		ТипыРасчетов = Новый Соответствие;
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента,                      0);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами,               0);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями,    0);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика,                   1);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками,            1);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями, 1);
		ТипыРасчетов.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер,                       2);
		
		ТипРасчетов = ТипыРасчетов[ВидОперации];
		
		ВариантыУчастия = Новый Соответствие;
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента,                      0);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами,               1);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями,    2);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика,                   0);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками,            1);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями, 2);
		ВариантыУчастия.Вставить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер,                       0);
		
		ВариантУчастия = ВариантыУчастия[ВидОперации];
		
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ВыполняетсяЗакрытие И Модифицированность И НЕ СохранитьПараметры Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		Отказ = Истина;
		
		Оповещение   = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Настройка не будет изменена. Закрыть форму без сохранения результата?'");
		
		ПоказатьВопрос(Оповещение,ТекстВопроса, СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Закрыть" Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьШаблонПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетовПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Если ИспользоватьШаблон Тогда
		
		Если ТипРасчетов = 0 Тогда
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Клиента");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями");
			КонецЕсли;
		ИначеЕсли ТипРасчетов = 1 Тогда
			Если ВариантУчастия = 0 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Поставщика");
			ИначеЕсли ВариантУчастия = 1 Тогда
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками");
			Иначе
				ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями");
			КонецЕсли;
		Иначе
			ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Бартер");
		КонецЕсли;
		
	Иначе
		
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный");
		
	КонецЕсли;
	
	СохранитьПараметры = Истина;
	
	Закрыть(ВидОперации);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ПараметрыШаблона.Доступность    = ИспользоватьШаблон;
	Элементы.ДекорацияПояснение.Доступность  = ИспользоватьШаблон;
	
	ЭтоБартер = (ТипРасчетов = 2);
	
	Элементы.ВРамкахКонтрагента.Видимость = Не ЭтоБартер;
	Элементы.МеждуКонтрагентами.Видимость = Не ЭтоБартер;
	Элементы.МеждуОрганизациями.Видимость = Не ЭтоБартер И ИспользоватьНесколькоОрганизаций;
	Элементы.ДекорацияВРамкахКонтрагента.Видимость = ЭтоБартер;
	
	Если ТипРасчетов = 0 Тогда //клиент
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет отгрузок выбранному клиенту (дебиторская задолженность) и его авансов (кредиторская задолженность).'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет отгрузок одному клиенту (дебиторская задолженность) и авансов другого клиента (кредиторская задолженность).'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет отгрузок клиенту от одной организации и его авансов другой организации.'");
		КонецЕсли;
	ИначеЕсли ТипРасчетов = 1 Тогда //поставщик
		Если ВариантУчастия = 0 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет поступлений от выбранного поставщика (кредиторская задолженность) и авансов ему (дебиторская задолженность).'");
		ИначеЕсли ВариантУчастия = 1 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет поступлений от одного поставщика (кредиторская задолженность) и авансов другому поставщику (дебиторская задолженность).'");
		ИначеЕсли ВариантУчастия = 2 Тогда
			Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет поступлений от поставщика одной организации и авансов ему от другой организации.'");
		КонецЕсли;
	Иначе //бартер
		Элементы.ДекорацияПояснение.Заголовок = НСтр("ru = 'Взаимозачет кредиторской задолженности организации перед контрагентом как поставщиком и дебиторской задолженности контрагента как клиента перед организацией.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
