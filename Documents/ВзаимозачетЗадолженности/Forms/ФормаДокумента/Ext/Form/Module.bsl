
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПараметрыОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	СписаниеДебиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	СписаниеКредиторскойЗадолженности = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаПодвал.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьБазоваяВерсия();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		Если РезультатВыбора.ХозяйственнаяОперация = СписаниеДебиторскойЗадолженности Тогда
			ПолучитьДебиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
			
			ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			ЗаполняемаяТЧ = "ДебиторскаяЗадолженность";
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
			Если АналитикаКРасчету.Количество() > 0 Тогда
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
				Возврат;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			АвтоТест_РассчитатьВзаимозачетЗавершение(,ДополнительныеПараметры);
			
		Иначе
			ПолучитьКредиторскуюЗадолженностиИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
			
			ПараметрыЗадолженностиКредитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			ЗаполняемаяТЧ = "КредиторскаяЗадолженность";
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиКредитор);
			Если АналитикаКРасчету.Количество() > 0 Тогда
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
				Возврат;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			АвтоТест_РассчитатьВзаимозачетЗавершение(,ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами	
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_ВзаимозачетЗадолженности", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СуммаДебиторкиРегл  = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		СуммаКредиторкиРегл = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
		СуммаДебиторкиУпр   = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		СуммаКредиторкиУпр  = Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
		
		Если Объект.КредиторскаяЗадолженность.Итог("Сумма")<>0 Тогда
			Для Каждого Строка Из Объект.КредиторскаяЗадолженность Цикл
				Строка.Сумма = 0;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.ДебиторскаяЗадолженность.Итог("Сумма")<>0 Тогда
			Для Каждого Строка Из Объект.ДебиторскаяЗадолженность Цикл
				Строка.Сумма = 0;
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаДебиторкиРегл = СуммаКредиторкиРегл Тогда
			Объект.СуммаРегл = СуммаДебиторкиРегл;
		КонецЕсли;
		Если СуммаДебиторкиУпр = СуммаКредиторкиУпр Тогда
			Объект.СуммаУпр = СуммаДебиторкиРегл;
		КонецЕсли;
		
		Если СуммаДебиторкиРегл <> СуммаКредиторкиРегл ИЛИ СуммаДебиторкиУпр <> СуммаКредиторкиУпр Тогда
			
			Отказ = Истина;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", 
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПересчитатьСуммыРеглУпр(ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПереключательДебиторскаяЗадолженность = 0 ИЛИ ПереключательКредиторскаяЗадолженность = 0 Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("ДебиторскаяБезРазбиения", ПереключательДебиторскаяЗадолженность = 0);
		ДокументОбъект.ДополнительныеСвойства.Вставить("КредиторскаяБезРазбиения", ПереключательКредиторскаяЗадолженность = 0);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("ВидОперации", Объект.ВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("ВидОперацииНачалоВыбораЗавершение", ЭтаФорма);
		
		ОткрытьФорму(
			"Документ.ВзаимозачетЗадолженности.Форма.ВыборВидаОперации",
			ПараметрыФормы,
			ЭтаФорма,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Объект.ВидОперации <> Результат Тогда
		Объект.ВидОперации = Результат;
		Модифицированность = Истина;
		ВидОперацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ВидОперацииПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзменении(Элемент)
	
	СтруктураПоиска = Новый Структура("Партнер",ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ЕстьСтроки = Объект.ДебиторскаяЗадолженность.НайтиСтроки(СтруктураПоиска).Количество() = 0;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДебитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ТипДебитораПриИзмененииНаСервере(ОчиститьТЧ = КодВозвратаДиалога.Да);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.КонтрагентДебитор);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.КредиторскаяЗадолженность.Количество() > 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	Оповещение = Новый ОписаниеОповещения(
		"ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НужноОчищатьТЧ(Оповещение, ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКредитораПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ТипКредитораПриИзмененииНаСервере(ОчиститьТЧ = КодВозвратаДиалога.Да);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.КонтрагентКредитор);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.ДебиторскаяЗадолженность.Количество() > 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентДебиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПартнераДебитора(ОчиститьТЧ = КодВозвратаДиалога.Да);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДополнительныеПараметры.Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	ЕстьСтроки = Объект.КредиторскаяЗадолженность.Количество() > 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ЕстьСтроки", ЕстьСтроки);
	
	НужноОчищатьТЧ(
		Новый ОписаниеОповещения("КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ЕстьСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКредиторПриИзмененииНужноОчищатьТЧЗавершение(ОчиститьТЧ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПартнераКредитора(ОчиститьТЧ = КодВозвратаДиалога.Да);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Поставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями") Тогда
		ЗаполнитьПартнераДебитора(ОчиститьТЧ = КодВозвратаДиалога.Да);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДополнительныеПараметры.Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	МассивОрганизаций.Добавить(Объект.ОрганизацияКредитор);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", МассивОрганизаций);
	ЗначенияОтбора.Вставить("Контрагент", МассивОрганизаций);
	ЗначенияОтбора.Вставить("ЭтоИнтеркампани", Истина);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = РасчетыСКлиентамиДебитор;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовИнтеркампаниОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.ОбъектРасчетовИнтеркампани = ВыбранноеЗначение.Заказ;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДебиторскаяЗадолженность И Не ПереключательДебиторскаяЗадолженность Тогда
		ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаКредиторскаяЗадолженность И Не ПереключательКредиторскаяЗадолженность Тогда
		КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДебиторскаяЗадолженностьПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Не ПереключательДебиторскаяЗадолженность Тогда
		Если Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДебиторскаяЗадолженность.Добавить();
			Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
			Если Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = Неопределено Тогда
				Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = Объект.ДебиторскаяЗадолженность[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательДебиторскаяЗадолженность = 1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательКредиторскаяЗадолженностьПриИзменении(Элемент)
	
	Если Не ПереключательКредиторскаяЗадолженность Тогда
		Если Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
			НоваяСтрока = Объект.КредиторскаяЗадолженность.Добавить();
			Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() = 1 Тогда
			Если Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = Неопределено Тогда
				Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = Объект.КредиторскаяЗадолженность[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательКредиторскаяЗадолженность = 1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияОбъектРасчетовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	ОчиститьСуммы("КредиторскаяЗадолженность", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетовПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	ОчиститьСуммы("ДебиторскаяЗадолженность", Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебиторскаяЗадолженность

&НаКлиенте
Процедура ДебиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не (РасчетыМеждуОрганизациямиДебитор Или ЗначениеЗаполнено(ПартнерДебитор)) Тогда
			ЗаполнитьПартнераДебитора();
		КонецЕсли;
		
		СтрокаТаблицы.Партнер = ПартнерДебитор;
		
		СуммаОстатокРегл = Объект.СуммаРегл - Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		Элемент.ТекущиеДанные.СуммаРегл = СуммаОстатокРегл;
		
		СуммаОстатокУпр = Объект.СуммаУпр - Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		Элемент.ТекущиеДанные.СуммаУпр = СуммаОстатокУпр;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	Если ТипЗнч(ПараметрыЗадолженности.Контрагент.Значение) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("ЭтоИнтеркампани", Истина);
	Иначе
		ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	КонецЕсли;
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = РасчетыСКлиентамиДебитор;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
		СтрокаТаблицы.СуммаРегл = 0;
		СтрокаТаблицы.СуммаУпр = 0;
		УстановитьВидимостьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.СуммаРегл = 0;
	СтрокаТаблицы.СуммаУпр = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДебиторскаяЗадолженность.ТекущиеДанные;
	
	ТекущиеДанные.СуммаУпр  = 0;
	ТекущиеДанные.СуммаРегл = 0;
	
	ЗаполнитьСуммыУпрРегл(СтруктураПараметровЗадолженности(ЭтаФорма, Ложь), Истина);
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаРегл = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаРегл = ПересчитатьВСуммуРегл(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов)
	КонецЕсли;
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
		ТекущиеДанные.СуммаУпр = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаУпр = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаУпр = ПересчитатьВСуммуУпр(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредиторскаяЗадолженность

&НаКлиенте
Процедура КредиторскаяЗадолженностьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не (РасчетыМеждуОрганизациямиКредитор Или ЗначениеЗаполнено(ПартнерКредитор)) Тогда
			ЗаполнитьПартнераКредитора();
		КонецЕсли;
		
		СтрокаТаблицы.Партнер = ПартнерКредитор;
		
		СуммаОстатокРегл = Объект.СуммаРегл - Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
		СтрокаТаблицы.СуммаРегл = СуммаОстатокРегл;
		
		СуммаОстатокУпр = Объект.СуммаУпр - Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
		СтрокаТаблицы.СуммаУпр = СуммаОстатокУпр;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", ПараметрыЗадолженности.Организация.Значение);
	ЗначенияОтбора.Вставить("Контрагент", ПараметрыЗадолженности.Контрагент.Значение);
	Если ТипЗнч(ПараметрыЗадолженности.Контрагент.Значение) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("ЭтоИнтеркампани", Истина);
	Иначе
		ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	КонецЕсли;
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами  = РасчетыСКлиентамиКредитор;
	НастройкиВыбора.УчитыватьФилиалы      = ПараметрыЗадолженности.УчитыватьФилиалы;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
		СтрокаТаблицы.СуммаРегл = 0;
		СтрокаТаблицы.СуммаУпр = 0;
		УстановитьВидимостьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.СуммаРегл = 0;
	СтрокаТаблицы.СуммаУпр = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	
	ТекущиеДанные.СуммаУпр  = 0;
	ТекущиеДанные.СуммаРегл = 0;
	
	ЗаполнитьСуммыУпрРегл(СтруктураПараметровЗадолженности(ЭтаФорма, Истина), Ложь);
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаРегл = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаРегл = ПересчитатьВСуммуРегл(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета Тогда
		ТекущиеДанные.СуммаУпр = ТекущиеДанные.СуммаВзаиморасчетов;
	ИначеЕсли ТекущиеДанные.СуммаУпр = 0 И ЗначениеЗаполнено(ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		ТекущиеДанные.СуммаУпр = ПересчитатьВСуммуУпр(ТекущиеДанные.СуммаВзаиморасчетов,
			ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// Функция используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачет(Команда) Экспорт
	
	ЕстьСтрокиДтЗадолженности = НЕ Объект.ДебиторскаяЗадолженность.Количество() = 0
		И НЕ (Объект.ДебиторскаяЗадолженность.Количество() = 1 И Не ЗначениеЗаполнено(Объект.ДебиторскаяЗадолженность[0].Заказ));
		
	ЕстьСтрокиКтЗадолженности = НЕ Объект.КредиторскаяЗадолженность.Количество() = 0
		И НЕ (Объект.КредиторскаяЗадолженность.Количество() = 1 И Не ЗначениеЗаполнено(Объект.КредиторскаяЗадолженность[0].Заказ));
	
	Если ЕстьСтрокиДтЗадолженности ИЛИ ЕстьСтрокиКтЗадолженности Тогда
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьВзаимозачетЗавершение", ЭтотОбъект), 
			НСтр("ru='При выполнении операции табличные части дебиторской и кредиторской задолженности будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	Иначе
		РассчитатьВзаимозачет();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВзаимозачетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		РассчитатьВзаимозачет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВзаимозачет()
	
	Объект.СуммаРегл = 0;
	Объект.СуммаУпр = 0;
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	Объект.КредиторскаяЗадолженность.Очистить();
	
	ПараметрыДебиторки = СтруктураПараметровЗадолженности(ЭтаФорма);
	ПараметрыКредиторки = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(
		ПараметрыДебиторки.Организация.ИмяРеквизита,
		ПараметрыДебиторки.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыДебиторки.Контрагент.ИмяРеквизита,
		ПараметрыДебиторки.Контрагент.Представление);
	
	Если ПараметрыДебиторки.Организация.ИмяРеквизита <> ПараметрыКредиторки.Организация.ИмяРеквизита Тогда
		СтруктураРеквизитов.Вставить(
			ПараметрыКредиторки.Организация.ИмяРеквизита,
			ПараметрыКредиторки.Организация.Представление);
	КонецЕсли;
	
	Если ПараметрыДебиторки.Контрагент.ИмяРеквизита <> ПараметрыКредиторки.Контрагент.ИмяРеквизита Тогда
		СтруктураРеквизитов.Вставить(
			ПараметрыКредиторки.Контрагент.ИмяРеквизита,
			ПараметрыКредиторки.Контрагент.Представление);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("АвтоТест_РассчитатьВзаимозачетЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженность(Команда)
	
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Организация.ИмяРеквизита,
		ПараметрыЗадолженности.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженности.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженности.Контрагент.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДебиторскойЗадолженности(Команда)
	
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженностиКредитор.Организация.ИмяРеквизита,
		ПараметрыЗадолженностиКредитор.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженностиКредитор.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженностиКредитор.Контрагент.Представление);
		
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДебиторскойЗадолженностиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДебиторскойЗадолженностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	АналитикаКРасчету = ЕстьЗаданияКРаспределению(, ПараметрыЗадолженностиКредитор);
		
	Если АналитикаКРасчету.Количество() > 0 Тогда
		ЗаполняемаяТЧ = "КредиторскаяЗадолженность";
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СуммаРеглДт = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Если СуммаРеглДт = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Дебиторская задолженность не заполнена!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор);
	Объект.СуммаРегл = СуммаРеглДт;
	
	РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКредиторскойЗадолженности(Команда)
	
	ПараметрыЗадолженностиДебитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженностиДебитор.Организация.ИмяРеквизита,
		ПараметрыЗадолженностиДебитор.Организация.Представление);
	СтруктураРеквизитов.Вставить(
		ПараметрыЗадолженностиДебитор.Контрагент.ИмяРеквизита,
		ПараметрыЗадолженностиДебитор.Контрагент.Представление);
		
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКредиторскойЗадолженностиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКредиторскойЗадолженностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
	АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
	
	Если АналитикаКРасчету.Количество() > 0 Тогда
		ЗаполняемаяТЧ = "ДебиторскаяЗадолженность";
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	СуммаРеглКт = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
	Если СуммаРеглКт = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Кредиторская задолженность не заполнена!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор);
	Объект.СуммаРегл = СуммаРеглКт;
	РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоВидуОперации()
	
	ПроизвольнаяОперация = (Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный);
	
	Элементы.ТипДебитора.Видимость  = ПроизвольнаяОперация;
	Элементы.ТипКредитора.Видимость = ПроизвольнаяОперация;
	
	СтруктураПредставлений = Документы.ВзаимозачетЗадолженности.ПредставлениеРекизитовПоВидуОперации(Объект.ВидОперации);
	Элементы.Организация.Заголовок = СтруктураПредставлений.Организация;
	Элементы.ОрганизацияКредитор.Заголовок = СтруктураПредставлений.ОрганизацияКредитор;
	Элементы.ТипДебитора.Заголовок = СтруктураПредставлений.КонтрагентДебитор;
	Элементы.ТипКредитора.Заголовок = СтруктураПредставлений.КонтрагентКредитор;
	
	Элементы.КонтрагентДебитор.Заголовок = СтруктураПредставлений.КонтрагентДебитор;
	Элементы.КонтрагентКредитор.Заголовок = СтруктураПредставлений.КонтрагентКредитор;
	
	Если ПроизвольнаяОперация Тогда
		Элементы.КонтрагентДебитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.КонтрагентКредитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элементы.КонтрагентДебитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.КонтрагентКредитор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;
	
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	Элементы.ОрганизацияКредитор.Видимость          = МеждуОрганизациями;
	
	ВидимостьЭлемента = ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации);
	Элементы.ВыборКредитора.Видимость    = ВидимостьЭлемента;
	
	Если ВыбранВидОперацииСКлиентом() Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Отгрузки (дебиторская задолженность)'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Полученные авансы (кредиторская задолженность)'");
		
	ИначеЕсли ВыбранВидОперацииСПоставщиком() Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Уплаченные авансы (дебиторская задолженность)'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Поступления (кредиторская задолженность)'");
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер Тогда
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Отгрузки'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Поступления'");
		
	Иначе
		
		Элементы.ГруппаДебиторскаяЗадолженность.Заголовок = НСтр("ru='Дебиторская задолженность'");
		Элементы.ГруппаКредиторскаяЗадолженность.Заголовок = НСтр("ru='Кредиторская задолженность'");
		
	КонецЕсли;
	
	Если НЕ ПереключательДебиторскаяЗадолженность Тогда
		Элементы.СтраницыДебиторскаяЗадолженность.ТекущаяСтраница = Элементы.ДебиторскаяЗадолженностьБезРазбиения;
		УстановитьВидимостьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения();
	Иначе
		Элементы.СтраницыДебиторскаяЗадолженность.ТекущаяСтраница = Элементы.ДебиторскаяЗадолженностьСписком;
	КонецЕсли;
	
	Если НЕ ПереключательКредиторскаяЗадолженность Тогда
		Элементы.СтраницыКредиторскаяЗадолженность.ТекущаяСтраница = Элементы.КредиторскаяЗадолженностьБезРазбиения;
		УстановитьВидимостьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения();
	Иначе
		Элементы.СтраницыКредиторскаяЗадолженность.ТекущаяСтраница = Элементы.КредиторскаяЗадолженностьСписком;
	КонецЕсли;
	
	УстановитьВидимостьФилиалов();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДебиторскуюЗадолженность()
	
	Если Объект.ДебиторскаяЗадолженность.Количество() = 0 Тогда
		НоваяСтрока = Объект.ДебиторскаяЗадолженность.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ПереключательДебиторскаяЗадолженность = 0;
	ИначеЕсли Объект.ДебиторскаяЗадолженность.Количество() = 1 Тогда
		Элементы.ДебиторскаяЗадолженность.ТекущаяСтрока = Объект.ДебиторскаяЗадолженность[0].ПолучитьИдентификатор();
		ПереключательДебиторскаяЗадолженность = 0;
	Иначе
		ПереключательДебиторскаяЗадолженность = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКредиторскуюЗадолженность()
	
	Если Объект.КредиторскаяЗадолженность.Количество() = 0 Тогда
		НоваяСтрока = Объект.КредиторскаяЗадолженность.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ПереключательКредиторскаяЗадолженность = 0;
	ИначеЕсли Объект.КредиторскаяЗадолженность.Количество() = 1 Тогда
		Элементы.КредиторскаяЗадолженность.ТекущаяСтрока = Объект.КредиторскаяЗадолженность[0].ПолучитьИдентификатор();
		ПереключательКредиторскаяЗадолженность = 0;
	Иначе
		ПереключательКредиторскаяЗадолженность = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовДебиторскаяЗадолженностьБезРазбиения()
	
	Если Объект.ДебиторскаяЗадолженность.Количество() Тогда
		
		ТекСтрока = Объект.ДебиторскаяЗадолженность[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ);
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияПартнер.ТолькоПросмотр              = ТолькоПросмотрПартнераВалюты;
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовКредиторскаяЗадолженностьБезРазбиения()
	
	Если Объект.КредиторскаяЗадолженность.Количество() Тогда
		
		ТекСтрока = Объект.КредиторскаяЗадолженность[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ);
		Элементы.КредиторскаяЗадолженностьБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.КредиторскаяЗадолженностьБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаУпр.Доступность = ТекСтрока.ВалютаВзаиморасчетов <> ВалютаУправленческогоУчета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьВалютаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьВалютаВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьСуммаРегл.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаРегламентированногоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Валюта расчетов = ВалютаУпр
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьСуммаУпр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДебиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КредиторскаяЗадолженностьСуммаУпр.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаУпр.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КредиторскаяЗадолженность.ВалютаВзаиморасчетов");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВалютаУправленческогоУчета");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьФилиалов()
	
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	МеждуОрганизациями = ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации);
	
	Элементы.ДебиторскаяЗадолженностьОрганизация.Видимость  = ЕстьФилиалы;
	Элементы.ДебиторскаяЗадолженностьБезРазбиенияОрганизация.Видимость  = ЕстьФилиалы;
	Элементы.КредиторскаяЗадолженностьОрганизация.Видимость = ЕстьФилиалы И Не МеждуОрганизациями;
	Элементы.КредиторскаяЗадолженностьБезРазбиенияОрганизация.Видимость = ЕстьФилиалы И Не МеждуОрганизациями;
	Элементы.ОбъектРасчетовИнтеркампани.Видимость = МеждуОрганизациями;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборВидаОперации()
	
	Если Не Пользователи.ЭтоПолноправныйПользователь()
		И Пользователи.РолиДоступны("ДобавлениеИзменениеДокументовКорректировкиЗадолженностиЗачетОплаты") Тогда
		
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента);
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика);
		
		Если Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
			Элементы.ВидОперации.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ВидОперации.РежимВыбораИзСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура АвтоТест_РассчитатьВзаимозачетЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ТолькоСуммы = ДополнительныеПараметры.Свойство("ТолькоСуммы");
	Иначе
		ТолькоСуммы = Ложь;
	КонецЕсли;
	
	ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
	ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	Если НЕ ТолькоСуммы Тогда
		
		АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
		
		Если АналитикаКРасчету.Количество() > 0 Тогда
			ЗаполняемаяТЧ = "";
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьПоОстаткамДебиторскуюКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
		РассчитатьСуммыВзаимозачета(Объект.СуммаРегл);
		
		Элементы.ДебиторскаяЗадолженность.Обновить();
		Элементы.КредиторскаяЗадолженность.Обновить();
		УстановитьСвойстваЭлементовФормыПоВидуОперации();
	Иначе
		
		Если ЗаполняемаяТЧ = "" Тогда
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиДебитор, Истина);
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиКредитор, Ложь);
		ИначеЕсли ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиДебитор, Истина);
		Иначе
			ЗаполнитьСуммыУпрРегл(ПараметрыЗадолженностиКредитор, Ложь);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамДебиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Дебиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.ДебиторскаяЗадолженность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Кредиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.КредиторскаяЗадолженность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамДебиторскуюКредиторскуюЗадолженностьСервер(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор)
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиДебитор.Организация.Значение,
		ПараметрыЗадолженностиДебитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Дебиторская,
		ПараметрыЗадолженностиДебитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.ДебиторскаяЗадолженность);
	
	ВзаиморасчетыСервер.ЗаполнитьЗадолженностьПоОстаткамВзаиморасчетов(
		ПараметрыЗадолженностиКредитор.Организация.Значение,
		ПараметрыЗадолженностиКредитор.Контрагент.Значение,
		Перечисления.ТипыЗадолженности.Кредиторская,
		ПараметрыЗадолженностиКредитор.ТипРасчетов,
		Объект.Дата,
		ВалютаРегламентированногоУчета,
		Объект.КредиторскаяЗадолженность);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодборПоОстаткамДебиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.ДебиторскаяЗадолженность);
	ПараметрыЗадолженности  = СтруктураПараметровЗадолженности(ЭтаФорма);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Валюта"                 , ВалютаРегламентированногоУчета);
	ПараметрыПодбора.Вставить("Организация"            , ПараметрыЗадолженности.Организация.Значение);
	ПараметрыПодбора.Вставить("Контрагент"             , ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыПодбора.Вставить("СуммаДокумента"         , 0);
	ПараметрыПодбора.Вставить("ДатаДокумента"          , Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация"  , СписаниеДебиторскойЗадолженности);
	ПараметрыПодбора.Вставить("ТипРасчетов"            , ПараметрыЗадолженности.ТипРасчетов);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамКредиторскуюЗадолженностьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище(Объект.КредиторскаяЗадолженность);
	ПараметрыЗадолженности = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Валюта"                 , ВалютаРегламентированногоУчета);
	ПараметрыПодбора.Вставить("Организация"            , ПараметрыЗадолженности.Организация.Значение);
	ПараметрыПодбора.Вставить("Контрагент"             , ПараметрыЗадолженности.Контрагент.Значение);
	ПараметрыПодбора.Вставить("СуммаДокумента"         , 0);
	ПараметрыПодбора.Вставить("ДатаДокумента"          , Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация"  , СписаниеКредиторскойЗадолженности);
	ПараметрыПодбора.Вставить("ТипРасчетов"            , ПараметрыЗадолженности.ТипРасчетов);
	ПараметрыПодбора.Вставить("УчитыватьФилиалы"       , ПараметрыЗадолженности.УчитыватьФилиалы);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераВТабличнойЧасти(ОбъектТабличнаяЧасть, ПартнерСсылка, РасчетыМеждуОрганизациями)
	Для Каждого СтрокаТаблицы Из ОбъектТабличнаяЧасть Цикл
		Если РасчетыМеждуОрганизациями Тогда
			СтрокаТаблицы.Партнер = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
			СтрокаТаблицы.Партнер = ПартнерСсылка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераДебитора(ОчиститьТЧ = Ложь)

	Если Не РасчетыМеждуОрганизациямиДебитор И ЗначениеЗаполнено(Объект.КонтрагентДебитор) Тогда
		ПартнерДебитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентДебитор);
	КонецЕсли;
	
	Если ОчиститьТЧ Тогда
		ОчиститьСуммыДокумента(ЭтаФорма);
	Иначе
		ЗаполнитьПартнераВТабличнойЧасти(Объект.ДебиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиДебитор);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Бартер
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями Тогда
			ЗаполнитьПартнераВТабличнойЧасти(Объект.КредиторскаяЗадолженность, ПартнерДебитор, РасчетыМеждуОрганизациямиКредитор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераКредитора(ОчиститьТЧ = Ложь)
	
	Если Не РасчетыМеждуОрганизациямиКредитор И ЗначениеЗаполнено(Объект.КонтрагентКредитор) Тогда
		ПартнерКредитор = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.КонтрагентКредитор);
	КонецЕсли;
	
	Если ОчиститьТЧ Тогда
		ОчиститьСуммыДокумента(ЭтаФорма);
	Иначе
		ЗаполнитьПартнераВТабличнойЧасти(Объект.КредиторскаяЗадолженность, ПартнерКредитор, РасчетыМеждуОрганизациямиКредитор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ЗаполнитьСписокОрганизаций();
	
	УстановитьВидимостьФилиалов();
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()
	
	ОчиститьСуммыДокумента(ЭтаФорма);
	
	ИнициализироватьДебиторскуюЗадолженность();
	ИнициализироватьКредиторскуюЗадолженность();
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Произвольный Тогда
		
		Если ВыбранВидОперацииСКлиентом() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
		ИначеЕсли ВыбранВидОперацииСПоставщиком() Тогда
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		Иначе //Бартер
			ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент;
			ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Поставщик;
		КонецЕсли;
		
		Если Объект.ТипДебитора <> ТипДебитора Тогда
			Объект.ТипДебитора = ТипДебитора;
			УстановитьТипДебитора();
		КонецЕсли;
		
		Если Объект.ТипКредитора <> ТипКредитора Тогда
			Объект.ТипКредитора = ТипКредитора;
			УстановитьТипКредитора();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КонтрагентКредитор) И НЕ ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации) Тогда
		Объект.КонтрагентКредитор = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияКредитор) И НЕ ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Объект.ОрганизацияКредитор = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Объект.ОбъектРасчетовИнтеркампани = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокОрганизаций();
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
КонецПроцедуры

&НаСервере
Процедура ТипДебитораПриИзмененииНаСервере( ОчиститьТЧ = Ложь)
	
	УстановитьТипДебитора();
	
	ЗаполнитьПартнераДебитора(ОчиститьТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ТипКредитораПриИзмененииНаСервере(ОчиститьТЧ = Ложь)
	
	УстановитьТипКредитора();
	
	ЗаполнитьПартнераКредитора(ОчиститьТЧ);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	
	ЗаполнитьСписокОрганизаций();
	УстановитьТипДебитора();
	УстановитьТипКредитора();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ИнициализироватьДебиторскуюЗадолженность();
	ИнициализироватьКредиторскуюЗадолженность();
	
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	ОграничитьВыборВидаОперации();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа)
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьДебиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	ДебиторскаяЗадолженность = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	ДебиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для Каждого СтрокаЗадолженности Из ДебиторскаяЗадолженность Цикл
		СтрокаЗадолженности.СуммаВзаиморасчетов = СтрокаЗадолженности.НашДолг + СтрокаЗадолженности.ДолгПартнера;
	КонецЦикла;
	Объект.ДебиторскаяЗадолженность.Загрузить(ДебиторскаяЗадолженность);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКредиторскуюЗадолженностиИзХранилища(АдресПлатежейВХранилище)

	КредиторскаяЗадолженность = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	
	КредиторскаяЗадолженность.Колонки.Добавить("СуммаВзаиморасчетов");
	
	Для Каждого СтрокаЗадолженности Из КредиторскаяЗадолженность Цикл
		СтрокаЗадолженности.СуммаВзаиморасчетов = СтрокаЗадолженности.НашДолг + СтрокаЗадолженности.ДолгПартнера;
	КонецЦикла;
	Объект.КредиторскаяЗадолженность.Загрузить(КредиторскаяЗадолженность);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДебитора()
	
	РасчетыМеждуОрганизациямиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
	
	РасчетыСКлиентамиДебитор =
		Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипДебитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиДебитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентДебитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентДебитор.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.ДебиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиДебитор;
	Элементы.ДебиторскаяЗадолженностьБезРазбиенияПартнер.Видимость = Не РасчетыМеждуОрганизациямиДебитор;
	
	Элементы.КонтрагентДебитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиДебитор;
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентДебитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипКредитора()
	
	РасчетыМеждуОрганизациямиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияПоставщик;
		
	РасчетыСКлиентамиКредитор =
		Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.Клиент
		Или Объект.ТипКредитора = Перечисления.ТипыУчастниковВзаимозачета.ОрганизацияКлиент;
		
	ОграничениеТипа = ?(РасчетыМеждуОрганизациямиКредитор, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
	
	Если Элементы.КонтрагентКредитор.ОграничениеТипа <> ОграничениеТипа Тогда
		Элементы.КонтрагентКредитор.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
	Элементы.КредиторскаяЗадолженностьПартнер.Видимость = Не РасчетыМеждуОрганизациямиКредитор;
	Элементы.КредиторскаяЗадолженностьБезРазбиенияПартнер.Видимость = Не РасчетыМеждуОрганизациямиКредитор;
	
	Элементы.КонтрагентКредитор.РежимВыбораИзСписка = РасчетыМеждуОрганизациямиКредитор;
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		МассивОрганизация = ОрганизацииДляВыбора.ВыгрузитьЗначения();
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизация);
	Иначе
		Элементы.КонтрагентКредитор.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыВзаимозачетаСервер(ЗНАЧ СуммаВзаимозачета)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ИсходнаяТаблицаДокумента КАК ИсходнаяТаблицаДокумента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*,
	|	ТаблицаДокумента.Заказ.Дата КАК Дата,
	|	ТаблицаДокумента.Заказ.Номер КАК Номер
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|");
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
	
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
		
		СуммаДокумента = СуммаВзаимозачета;
		
		ТаблицаДокумента = Объект[ТабличнаяЧасть].Выгрузить(,);
		Запрос.УстановитьПараметр("ИсходнаяТаблицаДокумента", ТаблицаДокумента);
		
		Объект[ТабличнаяЧасть].Очистить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СуммаРегл = Мин(Выборка.СуммаРегл, СуммаДокумента);
			Если СуммаРегл > 0 Тогда
			
				СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
				Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
					СтрокаТаблицы.СуммаУпр = СуммаРегл;
				ИначеЕсли СуммаРегл = СуммаДокумента И НЕ СтрокаТаблицы.СуммаРегл = 0 И НЕ СтрокаТаблицы.СуммаУпр = 0 Тогда
					СтрокаТаблицы.СуммаУпр = СуммаРегл / (СтрокаТаблицы.СуммаРегл / СтрокаТаблицы.СуммаУпр);
				КонецЕсли;
				
				Если СуммаРегл = СуммаДокумента Тогда
					
					ВзаиморасчетыСервер.СписатьСуммуПропорционально(
						СтрокаТаблицы.СуммаВзаиморасчетов,
						СтрокаТаблицы.СуммаРегл - СуммаРегл,
						СтрокаТаблицы.СуммаРегл);
						
				КонецЕсли;
				
				СтрокаТаблицы.СуммаРегл = СуммаРегл;
				СуммаДокумента = СуммаДокумента - СтрокаТаблицы.СуммаРегл;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	СуммаВзаимозачетаУпрДт = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
	СуммаВзаимозачетаУпрКт = Объект.КредиторскаяЗадолженность.Итог("СуммаУпр");
	СуммаВзаимозачетаУпр = Мин(СуммаВзаимозачетаУпрДт,СуммаВзаимозачетаУпрКт);
	Если СуммаВзаимозачетаУпрДт <> СуммаВзаимозачетаУпрКт Тогда
		
		Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
			
			СуммаДокумента = СуммаВзаимозачетаУпр;
			
			ТаблицаДокумента = Объект[ТабличнаяЧасть].Выгрузить(,);
			Запрос.УстановитьПараметр("ИсходнаяТаблицаДокумента", ТаблицаДокумента);
			
			Объект[ТабличнаяЧасть].Очистить();
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СуммаУпр = Мин(Выборка.СуммаУпр, СуммаДокумента);
				Если СуммаУпр > 0 Тогда
				
					СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
					СтрокаТаблицы.СуммаУпр = СуммаУпр;
					СуммаДокумента = СуммаДокумента - СтрокаТаблицы.СуммаУпр;
				Иначе
					СтрокаТаблицы = Объект[ТабличнаяЧасть].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
					СтрокаТаблицы.СуммаУпр = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Объект.СуммаРегл = СуммаВзаимозачета;
	Объект.СуммаУпр  = СуммаВзаимозачетаУпр;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачета(Знач СуммаДокументаРегл = 0)
	
	Дебиторская  = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Кредиторская = Объект.КредиторскаяЗадолженность.Итог("СуммаРегл");
	Если СуммаДокументаРегл <> 0 Тогда
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская, СуммаДокументаРегл);
	Иначе
		СуммаВзаимозачета = Мин(Дебиторская, Кредиторская);
	КонецЕсли;
	
	Если СуммаВзаимозачета = 0 Тогда
		Объект.ДебиторскаяЗадолженность.Очистить();
		Объект.КредиторскаяЗадолженность.Очистить();
		ИнициализироватьДебиторскуюЗадолженность();
		ИнициализироватьКредиторскуюЗадолженность();
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СуммаВзаимозачета", СуммаВзаимозачета);
	Оповещение = Новый ОписаниеОповещения("РассчитатьСуммыВзаимозачетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СуммаВзаимозачета < СуммаДокументаРегл Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Взаимозачет возможен на сумму %1 %2, скорректировать сумму?'"),
			СуммаВзаимозачета,
			ВалютаРегламентированногоУчета);
		КодОтвета = Неопределено;
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьСуммыВзаимозачетаФрагмент(ДополнительныеПараметры.СуммаВзаимозачета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыВзаимозачетаФрагмент(Знач СуммаВзаимозачета)
	
	РассчитатьСуммыВзаимозачетаСервер(СуммаВзаимозачета);
	
	ИнициализироватьДебиторскуюЗадолженность();
	ИнициализироватьКредиторскуюЗадолженность();
	УстановитьСвойстваЭлементовФормыПоВидуОперации();
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассчитан взаимозачет на сумму %1'"), 
		СуммаВзаимозачета);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Рассчитан взаимозачет'"),, Текст, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура НужноОчищатьТЧ(ОписаниеОповещения, ЕстьСтроки)
	
	Если ЕстьСтроки Тогда
		
		ТекстВопроса = НСтр("ru='Суммы взаимозачета могут стать неактуальным.
		                        |Очистить списки задолженностей?'");
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСуммы(ИмяТЧ, ТолькоВТекущейСтроке = ЛОЖЬ)
	
	Если НЕ ТолькоВТекущейСтроке Тогда
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(
			Объект[ИмяТЧ],
			0,
			"СуммаРегл,СуммаУпр,СуммаВзаиморасчетов");
	Иначе
		Если Объект[ИмяТЧ].Количество() Тогда
			ТекСтрока = Объект[ИмяТЧ][0];
			ТекСтрока.СуммаРегл = 0;
			ТекСтрока.СуммаУпр = 0;
			ТекСтрока.СуммаВзаиморасчетов = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСуммыДокумента(Форма)
	
	Объект = Форма.Объект;
	
	Объект.ДебиторскаяЗадолженность.Очистить();
	НовСтр = Объект.ДебиторскаяЗадолженность.Добавить();
	НовСтр.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета;
	Объект.КредиторскаяЗадолженность.Очистить();
	НовСтр = Объект.КредиторскаяЗадолженность.Добавить();
	НовСтр.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета;
	Объект.УдалитьСуммаДокумента = 0;
	Объект.СуммаРегл = 0;
	Объект.СуммаУпр = 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОрганизаций()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)
	|	И Организации.Ссылка НЕ В (
	|		ВЫБРАТЬ
	|			Организации.ГоловнаяОрганизация КАК Ссылка
	|		ИЗ
	|			Справочник.Организации КАК Организации
	|		ГДЕ
	|			Организации.Ссылка = &ЭтаОрганизация)
	|");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", Объект.Организация);
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОрганизацииДляВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	
	Если ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		Элементы.ОрганизацияКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиДебитор Тогда
		Элементы.КонтрагентДебитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
	Если РасчетыМеждуОрганизациямиКредитор Тогда
		Элементы.КонтрагентКредитор.СписокВыбора.ЗагрузитьЗначения(МассивОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровЗадолженности(Форма, ЭтоКредиторскаяЗадолженность = Ложь)
	
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УчитыватьФилиалы", Истина);
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуОрганизациями(Объект.ВидОперации) Тогда
		ИмяРеквизита = "ОрганизацияКредитор";
		СтруктураПараметров.УчитыватьФилиалы = Ложь;
	Иначе
		ИмяРеквизита = "Организация";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Организация", СтруктураЗначения);
	
	Если ЭтоКредиторскаяЗадолженность И ВыбранВидОперацииМеждуКонтрагентами(Объект.ВидОперации) Тогда
		ИмяРеквизита = "КонтрагентКредитор";
	Иначе
		ИмяРеквизита = "КонтрагентДебитор";
	КонецЕсли;
	
	СтруктураЗначения = Новый Структура(
		"ИмяРеквизита, Значение, Представление",
		ИмяРеквизита,
		Объект[ИмяРеквизита],
		Форма.СтруктураПредставлений[ИмяРеквизита]);
		
	СтруктураПараметров.Вставить("Контрагент", СтруктураЗначения);
	
	Если (Форма.РасчетыСКлиентамиДебитор И Не ЭтоКредиторскаяЗадолженность)
	 Или (Форма.РасчетыСКлиентамиКредитор И ЭтоКредиторскаяЗадолженность) Тогда
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом"));
	Иначе
		СтруктураПараметров.Вставить("ТипРасчетов", 
			ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком"));
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСПоставщиком()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Поставщика
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями;
	
КонецФункции

&НаСервере
Функция ВыбранВидОперацииСКлиентом()
	
	Возврат Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.Клиента
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами
		Или Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуОрганизациями(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.КлиентаМеждуОрганизациями")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.ПоставщикаМеждуОрганизациями");
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранВидОперацииМеждуКонтрагентами(ВидОперации)
	
	Возврат Не ЗначениеЗаполнено(ВидОперации)
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуКлиентами")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.МеждуПоставщиками")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачетаЗадолженности.Произвольный");
		
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор = Неопределено, ПараметрыЗадолженностиКредитор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	" + ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор),"(ЛОЖЬ","((АналитикаПоПартнерам.Организация В (&ОрганизацияДт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентДт
	|		И &ТипРасчетовДт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом))")+"
	|	ИЛИ
	|	" + ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор),"ЛОЖЬ","(АналитикаПоПартнерам.Организация В (&ОрганизацияКт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентКт
	|		И &ТипРасчетовКт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом))")+")
	|	И Задания.Месяц <= &ТекущийМесяц
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	" + ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор),"(ЛОЖЬ","((АналитикаПоПартнерам.Организация В (&ОрганизацияДт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентДт
	|		И &ТипРасчетовДт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком))")+"
	|	ИЛИ
	|	" + ?(НЕ ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор),"ЛОЖЬ","(АналитикаПоПартнерам.Организация В (&ОрганизацияКт)
	|		И АналитикаПоПартнерам.Контрагент = &КонтрагентКт
	|		И &ТипРасчетовКт = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком))")+")
	|	И Задания.Месяц <= &ТекущийМесяц";
	
	ЗапросОрганизаций = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В (&Организация)
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиДебитор) Тогда
		Если ПараметрыЗадолженностиДебитор.УчитыватьФилиалы Тогда
			ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыЗадолженностиДебитор.Организация.Значение);
			ДоступныеОрганизации = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			ДоступныеОрганизации.Добавить(ПараметрыЗадолженностиДебитор.Организация.Значение);
			Запрос.УстановитьПараметр("ОрганизацияДт", ДоступныеОрганизации);
		Иначе
			Запрос.УстановитьПараметр("ОрганизацияДт", ПараметрыЗадолженностиДебитор.Организация.Значение);
		КонецЕсли;
		Запрос.УстановитьПараметр("КонтрагентДт",  ПараметрыЗадолженностиДебитор.Контрагент.Значение);
		Запрос.УстановитьПараметр("ТипРасчетовДт", ПараметрыЗадолженностиДебитор.ТипРасчетов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадолженностиКредитор) Тогда
		Если ПараметрыЗадолженностиКредитор.УчитыватьФилиалы Тогда
			ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыЗадолженностиКредитор.Организация.Значение);
			ДоступныеОрганизации = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			ДоступныеОрганизации.Добавить(ПараметрыЗадолженностиКредитор.Организация.Значение);
			Запрос.УстановитьПараметр("ОрганизацияКт", ДоступныеОрганизации);
		Иначе
			Запрос.УстановитьПараметр("ОрганизацияКт", ПараметрыЗадолженностиКредитор.Организация.Значение);
		КонецЕсли;
		Запрос.УстановитьПараметр("КонтрагентКт",  ПараметрыЗадолженностиКредитор.Контрагент.Значение);
		Запрос.УстановитьПараметр("ТипРасчетовКт", ПараметрыЗадолженностиКредитор.ТипРасчетов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийМесяц",  НачалоМесяца(Объект.Дата));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСуммыУпрРегл(ПараметрыСтруктура, ЭтоДебет)
	
	Если ЭтоДебет Тогда
		ТабличнаяЧасть = Объект.ДебиторскаяЗадолженность;
	Иначе
		ТабличнаяЧасть = Объект.КредиторскаяЗадолженность;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Заказ, Партнер");
	
	МассивЗаказов = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если МассивЗаказов.Найти(СтрокаТЧ.Заказ) = Неопределено
			И СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			МассивЗаказов.Добавить(СтрокаТЧ.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	ОстаткиЗадолженности = ОстаткиЗадолженностиПоОбъектамРасчетов(ПараметрыСтруктура, МассивЗаказов);
	ОстаткиЗадолженности.Индексы.Добавить("Заказ, Партнер");
	
	Для Каждого СтрокаТЧ  Из ТабличнаяЧасть Цикл
		Если СтрокаТЧ.СуммаВзаиморасчетов <> 0 Тогда
			СтруктураПоиска.Заказ = СтрокаТЧ.Заказ;
			СтруктураПоиска.Партнер = СтрокаТЧ.Партнер;
			
			СтрокиОстатков = ОстаткиЗадолженности.НайтиСтроки(СтруктураПоиска);
			Если СтрокиОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиОстатков[0].СуммаВзаиморасчетов > 0 Тогда
				СтрокаТЧ.СуммаУпр = СтрокиОстатков[0].СуммаУпр * (СтрокаТЧ.СуммаВзаиморасчетов / СтрокиОстатков[0].СуммаВзаиморасчетов);
				СтрокаТЧ.СуммаРегл = СтрокиОстатков[0].СуммаРегл * (СтрокаТЧ.СуммаВзаиморасчетов / СтрокиОстатков[0].СуммаВзаиморасчетов);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаРегл = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
	Объект.СуммаУпр  = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
	
КонецПроцедуры

&НаСервере
Функция ОстаткиЗадолженностиПоОбъектамРасчетов(ПараметрыАналитики, МассивЗаказов)
	
	ТекстВтАналитика = "
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|ГДЕ
	|	РегистрАналитикаУчетаПоПартнерам.Организация В (&Организация)
	|	И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстРасчетыСКлиентами = "
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	Остатки.ЗаказКлиента КАК Заказ,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток < 0 
	|			ТОГДА -(Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток)
	|		ИНАЧЕ Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток < 0 
	|			ТОГДА -(Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток)
	|		ИНАЧЕ Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток < 0 
	|			ТОГДА -(Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток)
	|		ИНАЧЕ Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток
	|	КОНЕЦ КАК СуммаУпр
	|ИЗ РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&Граница, ЗаказКлиента В (&МассивЗаказов) И АналитикаУчетаПоПартнерам В (
	|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
	|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
	|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
	|";
	
	ТекстРасчетыСПоставщками = "
	|ВЫБРАТЬ
	|	Аналитика.Партнер       КАК Партнер,
	|	Остатки.ЗаказПоставщику КАК Заказ,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток < 0 
	|			ТОГДА -(Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток)
	|		ИНАЧЕ Остатки.ДолгОстаток + Остатки.ПредоплатаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток < 0 
	|			ТОГДА -(Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток)
	|		ИНАЧЕ Остатки.ДолгРеглОстаток + Остатки.ПредоплатаРеглОстаток
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток < 0 
	|			ТОГДА -(Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток)
	|		ИНАЧЕ Остатки.ДолгУпрОстаток + Остатки.ПредоплатаУпрОстаток
	|	КОНЕЦ КАК СуммаУпр
	|ИЗ РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(&Граница, ЗаказПоставщику В (&МассивЗаказов) И АналитикаУчетаПоПартнерам В (
	|																ВЫБРАТЬ Аналитика.АналитикаУчетаПоПартнерам
	|																ИЗ ВтАналитика КАК Аналитика)) КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитика КАК Аналитика
	|			ПО Аналитика.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
	|";
	
	ТекстЗапроса = "";
	
	Если Не ЗначениеЗаполнено(ПараметрыАналитики.ТипРасчетов) Тогда
		
		ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстРасчетыСПоставщками;
		
	ИначеЕсли ПараметрыАналитики.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСКлиентами;
	Иначе
		ТекстЗапроса = ТекстВтАналитика + ТекстРасчетыСПоставщками;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ЗапросОрганизаций = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В (&Организация)
	|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию");
	Если ПараметрыАналитики.УчитыватьФилиалы Тогда
		ЗапросОрганизаций.УстановитьПараметр("Организация", ПараметрыАналитики.Организация.Значение);
		ДоступныеОрганизации = ЗапросОрганизаций.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ДоступныеОрганизации.Добавить(ПараметрыАналитики.Организация.Значение);
		Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	Иначе
		Запрос.УстановитьПараметр("Организация", ПараметрыАналитики.Организация.Значение);
	КонецЕсли;
	
	МоментВремени = КонецДня(Объект.Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Контрагент", ПараметрыАналитики.Контрагент.Значение);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыРеглУпр(ОписаниеОповещения)
	
	ТекстВопроса = НСтр("ru = 'Суммы регламентированного и управленческого учёта по строкам в табличной части не равны суммам документам, пересчитать суммы документа?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтаФорма);
	ДопПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьСуммыДокументаПоРасшифровкеПлатежаЗавершение",ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыДокументаПоРасшифровкеПлатежаЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Объект.СуммаРегл = Объект.ДебиторскаяЗадолженность.Итог("СуммаРегл");
		Объект.СуммаУпр = Объект.ДебиторскаяЗадолженность.Итог("СуммаУпр");
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СостояниеФоновогоЗаданияВзаиморасчетов()
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Ключ);
	ЗаданияРасчетовСКлиентами = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Ключ);
	ЗаданияРасчетовСПоставщиками = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ЗаданияРасчетовСКлиентами.Количество() = 0 И ЗаданияРасчетовСПоставщиками.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Если ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСКлиентами.Количество() > 0 И ЗаданияРасчетовСКлиентами[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			КлиентЗавершено = Ложь;
		Иначе
			КлиентЗавершено = Истина;
		КонецЕсли;
		
		Если ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Возврат "Ошибка";
		ИначеЕсли ЗаданияРасчетовСПоставщиками.Количество() > 0 И ЗаданияРасчетовСПоставщиками[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ПоставщикЗавершено = Ложь;
		Иначе
			ПоставщикЗавершено = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ КлиентЗавершено ИЛИ НЕ ПоставщикЗавершено Тогда
		Возврат "Активно";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	Состояние = СостояниеФоновогоЗаданияВзаиморасчетов();
	
	Если Состояние = Неопределено Тогда
		
		Если ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
			ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		ИначеЕсли ЗаполняемаяТЧ = "КредиторскаяЗадолженность" Тогда
			ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(,ПараметрыЗадолженностиКредитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		Иначе
			ПараметрыЗадолженностиДебитор  = СтруктураПараметровЗадолженности(ЭтаФорма);
			ПараметрыЗадолженностиКредитор = СтруктураПараметровЗадолженности(ЭтаФорма, Истина);
			АналитикаКРасчету = ЕстьЗаданияКРаспределению(ПараметрыЗадолженностиДебитор, ПараметрыЗадолженностиКредитор);
			РаспределятьРасчетыСКлиентами = 
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом")
				ИЛИ ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом");
			РаспределятьРасчетыСПоставщиком =
				ПараметрыЗадолженностиДебитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")
				ИЛИ ПараметрыЗадолженностиКредитор.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком");
		КонецЕсли;
		
		РасчетыРаспределены = АналитикаКРасчету.Количество() = 0;
		
		Если НЕ РасчетыРаспределены Тогда
			
			Ключ = Новый УникальныйИдентификатор();
			СтруктураРасчетов = Новый Структура("АналитикиУчетаПоПартнерам, Организации", АналитикаКРасчету, Неопределено);
			
			Если ФормаДлительнойОперации = Неопределено Тогда
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификатор);
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжидания);
				ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'")+Символы.ПС+
					НСтр("ru = 'Выполняется распределение расчетов по документам.'");
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжидания);
			КонецЕсли;
			
			Если РаспределятьРасчетыСКлиентами Тогда
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСКлиентами",
					РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСКлиентами()+Строка(Ключ));
			КонецЕсли;
			
			Если РаспределятьРасчетыСПоставщиком Тогда
				РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(,СтруктураРасчетов,"РасчетыСПоставщиками",
					РаспределениеВзаиморасчетовВызовСервера.ИмяФоновогоЗаданияРасчетовСПоставщиками()+Строка(Ключ));
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 0.1, Истина);
		Иначе
			
			Ключ = Неопределено;
			
			Если ФормаДлительнойОперации <> Неопределено Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура("ТолькоСуммы");
			Если ЗаполняемаяТЧ = "ДебиторскаяЗадолженность" Тогда
				АвтоТест_РассчитатьВзаимозачетЗавершение(,ДополнительныеПараметры);
			ИначеЕсли ЗаполняемаяТЧ = "КредиторскаяЗадолженность" Тогда
				АвтоТест_РассчитатьВзаимозачетЗавершение(,ДополнительныеПараметры);
			Иначе
				АвтоТест_РассчитатьВзаимозачетЗавершение(null,null);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Состояние = "Активно" Тогда
		
		Если ФормаДлительнойОперации = Неопределено Тогда
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, УникальныйИдентификатор);
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОжидания);
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = НСтр("ru = 'Пожалуйста, подождите...'")+Символы.ПС+
				НСтр("ru = 'Выполняется распределение расчетов по документам.'");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОжидания);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОжидания.ТекущийИнтервал, Истина);
		
	Иначе
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ТекстСообщения = НСтр("ru = 'Во время распределения расчетов по документам произошла ошибка. Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПересчитатьВСуммуРегл(Сумма,Валюта)
	Возврат РаботаСКурсамиВалют.ПересчитатьВВалюту(Сумма,
				Валюта,
				ВалютаРегламентированногоУчета,
				Объект.Дата);
КонецФункции

&НаСервере
Функция ПересчитатьВСуммуУпр(Сумма,Валюта)
	Возврат РаботаСКурсамиВалют.ПересчитатьВВалюту(Сумма,
				Валюта,
				ВалютаУправленческогоУчета,
				Объект.Дата);
КонецФункции

&НаСервере
Процедура УстановитьВидимостьБазоваяВерсия()
	
	ЭтоНеБазовая = ПолучитьФункциональнуюОпцию("НеБазоваяВерсия");
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДекорацияСуммаУпрПодвал");
	МассивЭлементов.Добавить("ДебиторскаяЗадолженностьИтогСуммаУпр");
	МассивЭлементов.Добавить("КредиторскаяЗадолженностьИтогСуммаУпр");
	МассивЭлементов.Добавить("ПолеВалютаУпрУчета");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ЭтоНеБазовая);
	Если НЕ ЭтоНеБазовая Тогда
		Элементы.ДебиторскаяЗадолженностьБезРазбиенияСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.КредиторскаяЗадолженностьБезРазбиенияСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.ДекорацияСуммаРеглПодвал.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.КредиторскаяЗадолженностьСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
		Элементы.ДебиторскаяЗадолженностьСуммаРегл.Заголовок = НСтр("ru = 'Сумма'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
