#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапросаРаспоряжения =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Ссылка.Договор КАК Договор,
	|	ДанныеДокумента.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|	И ДанныеДокумента.Ссылка.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|	И НЕ ДанныеДокумента.Отменено
	|	И ДанныеДокумента.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Ссылка.Договор,
	|	ДанныеДокумента.Склад";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИсточникДанныхДоставки.Номер             КАК Номер,
	|	ИсточникДанныхДоставки.Проведен          КАК Проведен,
	|	ИсточникДанныхДоставки.Ссылка            КАК Ссылка,
	|	ИсточникДанныхДоставки.Дата              КАК Дата,
	|	ИсточникДанныхДоставки.Партнер           КАК ПолучательОтправитель,
	|	ИсточникДанныхДоставки.ПеревозчикПартнер КАК Перевозчик,
	|	ИсточникДанныхДоставки.СпособДоставки    КАК СпособДоставки,
	|	ИсточникДанныхДоставки.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА ИсточникДанныхДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА ИсточникДанныхДоставки.АдресДоставкиПеревозчика
	|		ИНАЧЕ ИсточникДанныхДоставки.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА ИсточникДанныхДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
	|		ТОГДА ИсточникДанныхДоставки.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ИсточникДанныхДоставки.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	ИсточникДанныхДоставки.ВремяДоставкиС    КАК ВремяС,
	|	ИсточникДанныхДоставки.ВремяДоставкиПо   КАК ВремяПо,
	|	ИсточникДанныхДоставки.ДополнительнаяИнформацияПоДоставке
	|	                        КАК ДополнительнаяИнформация,
	|	Распоряжения.Склад                       КАК Склад,
	|	ИСТИНА КАК ДоставитьПолностью,
	|	ИсточникДанныхДоставки.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	ИсточникДанныхДоставки.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|ИЗ
	|	&ВтРаспоряжения КАК Распоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ИсточникДанныхДоставки
	|		ПО ИсточникДанныхДоставки.Ссылка = Распоряжения.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорКонтрагента
	|		ПО ДоговорКонтрагента.Ссылка = Распоряжения.Договор
	|
	|ГДЕ
	|	ДоговорКонтрагента.Ссылка ЕСТЬ NULL
	|	ИЛИ НЕ ДоговорКонтрагента.СпособДоставки В (&ИспользуемыеСпособыДоставки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.Ссылка В (&ДоговораРаспоряженияНаПоступление)
	|			ТОГДА ИсточникДанныхДоставки.Номер
	|		ИНАЧЕ
	|			Распоряжения.Ссылка.Номер
	|	КОНЕЦ                                       КАК Номер,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.Ссылка В (&ДоговораРаспоряженияНаПоступление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			Распоряжения.Ссылка.Проведен
	|	КОНЕЦ                                       КАК Проведен,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.Ссылка В (&ДоговораРаспоряженияНаПоступление)
	|			ТОГДА ИсточникДанныхДоставки.Ссылка
	|		ИНАЧЕ
	|			Распоряжения.Ссылка
	|	КОНЕЦ                                       КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.Ссылка В (&ДоговораРаспоряженияНаПоступление)
	|			ТОГДА ИсточникДанныхДоставки.Дата
	|		ИНАЧЕ
	|			Распоряжения.Ссылка.Дата
	|	КОНЕЦ                                       КАК Дата,
	|	ИсточникДанныхДоставки.Партнер				КАК ПолучательОтправитель,
	|	ИсточникДанныхДоставки.ПеревозчикПартнер	КАК Перевозчик,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|				И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ ИсточникДанныхДоставки.СпособДоставки
	|	КОНЕЦ										КАК СпособДоставки,
	|	ИсточникДанныхДоставки.ЗонаДоставки			КАК Зона,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|			ТОГДА ИсточникДанныхДоставки.АдресДоставкиПеревозчика
	|		ИНАЧЕ ИсточникДанныхДоставки.АдресДоставки
	|	КОНЕЦ										КАК Адрес,
	|	ВЫБОР
	|		КОГДА ИсточникДанныхДоставки.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|			ТОГДА ИсточникДанныхДоставки.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ ИсточникДанныхДоставки.АдресДоставкиЗначенияПолей
	|	КОНЕЦ										КАК АдресЗначенияПолей,
	|	ИсточникДанныхДоставки.ВремяДоставкиС		КАК ВремяС,
	|	ИсточникДанныхДоставки.ВремяДоставкиПо		КАК ВремяПо,
	|	ИсточникДанныхДоставки.ДополнительнаяИнформацияПоДоставке	КАК ДополнительнаяИнформация,
	|	Распоряжения.Склад							КАК Склад,
	|	ЛОЖЬ										КАК ДоставитьПолностью,
	|	ЛОЖЬ										КАК ОсобыеУсловияПеревозки,
	|	""""										КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ										КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|ИЗ
	|	&ВтРаспоряжения КАК Распоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ИсточникДанныхДоставки
	|		ПО ИсточникДанныхДоставки.Ссылка = Распоряжения.Договор
	|ГДЕ
	|	ИсточникДанныхДоставки.СпособДоставки В (&ИспользуемыеСпособыДоставки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВтРаспоряжения", "(" + ТекстЗапросаРаспоряжения + ")");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса получения товаров к доставке по распоряжению
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТоварыКДоставке() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	Т.Назначение,
	|	СУММА(Т.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Ссылки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Склад,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Назначение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПриобретениеТоваровУслуг.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	КомандаСоздатьНаОсновании = Документы.РегистрацияЦенНоменклатурыПоставщика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если КомандаСоздатьНаОсновании <> Неопределено Тогда
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Регистрация цен поставщика'");
	КонецЕсли; 
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.УстановкаЦенНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	Если ПравоДоступа("Добавление", Метаданные.БизнесПроцессы.СогласованиеЗакупки) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.БизнесПроцессы.СогласованиеЗакупки.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Согласование заказа поставщику'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСогласованиеЗаказовПоставщикам";
	   
	КонецЕсли;
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.УпаковочныйЛист.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	ТорговыеПредложенияПереопределяемый.ДобавитьКомандуПоискаТорговыхПредложений(КомандыСозданияНаОсновании);
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ поставщику".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказПоставщику.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказПоставщику);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыПоставщикам";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Заказ поставщику".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииПоГруппеСкладов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказПоставщику.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказПоставщикуНаОснованииПоГруппеСкладов";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказПоставщику);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыПоставщикам";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Заказ поставщику".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказыПоставщикам(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СозданиеЗаказовПоставщикамНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СозданиеЗаказовПоставщикамНаОсновании";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказы поставщикам'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыПоставщикам";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Возвращает параметры создания документа на основании по группе складов
//
// Параметры:
// 		ПараметрКоманды - ДокументСсылка.ЗаказПереработчику, Массив - Массив или ссылка на документ основание
//
// Возвращаемое значение:
// 		Структура - Структура параметров создания на основании
//
Функция ПараметрыСозданияПоГруппеСкладов(ПараметрКоманды) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&Заказ)
	|	И НЕ Товары.Отменено
	|	И Товары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|";
	
	Запрос.УстановитьПараметр("Заказ", ПараметрКоманды);
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
	НесколькоСкладов = Ложь;
	Если Склады.Количество() > 1 Тогда
		НесколькоСкладов = Истина;
	ИначеЕсли Склады.Количество() = 0 Тогда
		Склады.Добавить(Справочники.Склады.ПустаяСсылка());
	КонецЕсли;
	
	ПараметрыСозданияПоГруппеСкладов = Новый Структура();
	ПараметрыСозданияПоГруппеСкладов.Вставить("СписокСкладов", Склады);
	ПараметрыСозданияПоГруппеСкладов.Вставить("НесколькоСкладов", НесколькоСкладов);
	
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуРезультатыСогласованияЗакупкиПоДокументу(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента,СписокДокументов";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияДокументЗакупки(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийЗакупок(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализПричинОтмены(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 3;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ЗакупкаПодДеятельность");
	МассивВсехРеквизитов.Добавить("НалогообложениеНДС");
	МассивВсехРеквизитов.Добавить("ВернутьМногооборотнуюТару");
	МассивВсехРеквизитов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивВсехРеквизитов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивВсехРеквизитов.Добавить("Товары.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("Товары.АналитикаРасходов");
	
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.Цена");
	МассивВсехРеквизитов.Добавить("Товары.Сумма");
	МассивВсехРеквизитов.Добавить("Товары.СуммаСНДС");
	МассивВсехРеквизитов.Добавить("Товары.ВидЦеныПоставщика");
	
	ХозОперацииЗакупкаУПоставщика = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	
	ХозОперацииЗакупкаВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозОперацииЗакупкаУПоставщика.Найти(ХозяйственнаяОперация) <> Неопределено
		Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		МассивРеквизитовОперации.Добавить("ЗакупкаПодДеятельность");
		МассивРеквизитовОперации.Добавить("НалогообложениеНДС");
		МассивРеквизитовОперации.Добавить("ВернутьМногооборотнуюТару");
		МассивРеквизитовОперации.Добавить("СрокВозвратаМногооборотнойТары");
		МассивРеквизитовОперации.Добавить("ТребуетсяЗалогЗаТару");
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		МассивРеквизитовОперации.Добавить("Товары.ВидЦеныПоставщика");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда	
		МассивРеквизитовОперации.Добавить("НалогообложениеНДС");
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		МассивРеквизитовОперации.Добавить("Товары.ВидЦеныПоставщика");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи Тогда	
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		МассивРеквизитовОперации.Добавить("Товары.ВидЦеныПоставщика");
		
	ИначеЕсли ХозОперацииЗакупкаПоИмпорту.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		
		МассивРеквизитовОперации.Добавить("ЗакупкаПодДеятельность");
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		МассивРеквизитовОперации.Добавить("Товары.ВидЦеныПоставщика");
		
	ИначеЕсли ХозОперацииЗакупкаВСтранахЕАЭС.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		
		МассивРеквизитовОперации.Добавить("ЗакупкаПодДеятельность");
		МассивРеквизитовОперации.Добавить("ВернутьМногооборотнуюТару");
		МассивРеквизитовОперации.Добавить("СрокВозвратаМногооборотнойТары");
		МассивРеквизитовОперации.Добавить("ТребуетсяЗалогЗаТару");
		
		МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
		
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		
		МассивРеквизитовОперации.Добавить("Товары.Цена");
		МассивРеквизитовОперации.Добавить("Товары.Сумма");
		МассивРеквизитовОперации.Добавить("Товары.СуммаСНДС");
		МассивРеквизитовОперации.Добавить("Товары.ВидЦеныПоставщика");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|
	|	ДанныеДокумента.СуммаДокумента
	|	+ ЕСТЬNULL(ТаблицаСуммСверхЗаказа.СуммаВзаиморасчетов, 0)
	|		КАК СуммаВзаиморасчетов,
	|
	|	ДанныеДокумента.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
	|		ИЗ
	|			Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
	|		ГДЕ
	|			ТаблицаТовары.Ссылка.Проведен
	|			И ТаблицаТовары.ЗаказПоставщику = &ДокументСсылка
	|			И ТаблицаТовары.КодСтроки = 0
	|	) КАК ТаблицаСуммСверхЗаказа
	|	ПО
	|		Истина
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса = ЗакупкиСервер.ТекстЗапросаКонтрольЗаказаПослеПроведения();
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказПоставщику
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	ИспользоватьСтатусы       = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("КонтролироватьПоступление", КонтролироватьПоступление);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты",     КонтролироватьРасчеты);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",       ИспользоватьСтатусы);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

//Определяет право доступа на добавление документов типа Заказ поставщику
//
// Возвращаемое значение:
// Булево - Истина если право есть.
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику);
	
КонецФункции

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заказа поставщику
//
// Параметры:
//	ЗаказПоставщику         - ДокументСсылка.ЗаказПоставщику - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаказПоставщику, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказПоставщику.Проведен)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ПустаяСсылка)
			|		ИНАЧЕ
			|			ЕСТЬNULL(СостоянияЗаказовПоставщикам.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт))
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказПоставщику.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И &ИспользоватьСтатусы)
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовПоставщикам.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.СуммаПоступления,0) КАК СуммаПоступления,
			|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентПоступления,0) КАК ПроцентПоступления,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.Проведен И
			|		((ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0) ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ЕСТЬNULL(СостоянияЗаказовПоставщикам.ПроцентДолга,0) КАК ПроцентДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ТОГДА
			|		ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.КОплатеОстаток,0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
			|ПО
			|	СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка
			|ГДЕ
			|	ДокументЗаказПоставщику.Ссылка = &ЗаказПоставщику
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказПоставщику));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("ИспользоватьСтатусы", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказПоставщику                        КАК ЗаказПоставщику,
		|	СУММА(ЗаказыОстатки.КОформлениюКонечныйОстаток)      КАК КОформлениюОстаток,
		|	СУММА(ЗаказыОстатки.ЗаказаноКонечныйОстаток)         КАК ЗаказаноОстаток
		|	
		|ПОМЕСТИТЬ ВТЗаказыПоставщикамОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|		ЗаказыПоставщикамОстатки.Номенклатура    КАК Номенклатура,
		|		ЗаказыПоставщикамОстатки.Характеристика  КАК Характеристика,
		|		ЗаказыПоставщикамОстатки.Склад           КАК Склад,
		|		ВЫБОР
		|			КОГДА ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыПоставщикамОстатки.КОформлениюКонечныйОстаток <= ЗаказыПоставщикамОстатки.КОформлениюПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыПоставщикамОстатки.КОформлениюКонечныйОстаток >= -(ЗаказыПоставщикамОстатки.КОформлениюПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК КОформлениюКонечныйОстаток,
		|	
		|		ВЫБОР
		|			КОГДА ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ЗаказыПоставщикамОстатки.ЗаказаноКонечныйОстаток <= ЗаказыПоставщикамОстатки.КОформлениюПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ЗаказыПоставщикамОстатки.ЗаказаноКонечныйОстаток >= -(ЗаказыПоставщикамОстатки.КОформлениюПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноКонечныйОстаток, 0)
		|		КОНЕЦ                                                   КАК ЗаказаноКонечныйОстаток
		|		
		|	ИЗ РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,,,,
		|		ЗаказПоставщику В (&МассивЗаказов)) КАК ЗаказыПоставщикамОстатки) КАК ЗаказыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОстатки.ДокументПоступления        КАК ДокументПоступления,
		|	СУММА(ТоварыОстатки.КПоступлениюОстаток) КАК КПоступлениюКонечныйОстаток,
		|	СУММА(ТоварыОстатки.КПоступлениюРасход)  КАК КПоступлениюРасход,
		|	СУММА(ТоварыОстатки.КОформлениюПоступленийПоОрдерамКонечныйОстаткок) <> 0  КАК ЕстьРасхожденияОрдерНакладная
		|
		|ПОМЕСТИТЬ ВТТоварыКПоступлениюОстатки
		|
		|ИЗ (ВЫБРАТЬ
		|		ТоварыКПоступлениюОстатки.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлениюОстатки.Номенклатура        КАК Номенклатура,
		|		ТоварыКПоступлениюОстатки.Характеристика      КАК Характеристика,
		|		ТоварыКПоступлениюОстатки.Склад               КАК Склад,
		|		ТоварыКПоступлениюОстатки.Серия               КАК Серия,
		|		ВЫБОР
		|			КОГДА ТоварыКПоступлениюОстатки.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыВеличин)
		|				ТОГДА ВЫБОР
		|						КОГДА ТоварыКПоступлениюОстатки.КОформлениюОрдеровКонечныйОстаток <= ТоварыКПоступлениюОстатки.КОформлениюОрдеровПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)
		|							И ТоварыКПоступлениюОстатки.КОформлениюОрдеровКонечныйОстаток >= -(ТоварыКПоступлениюОстатки.КОформлениюОрдеровПриход
		|								* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
		|							ТОГДА 0 
		|						ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КОформлениюОрдеровКонечныйОстаток, 0)
		|					КОНЕЦ
		|			ИНАЧЕ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КОформлениюОрдеровКонечныйОстаток, 0)
		|		КОНЕЦ                                         КАК КПоступлениюОстаток,
		|		ТоварыКПоступлениюОстатки.КОформлениюОрдеровРасход  КАК КПоступлениюРасход,
		|		ТоварыКПоступлениюОстатки.КОформлениюПоступленийПоОрдерамКонечныйОстаток  КАК КОформлениюПоступленийПоОрдерамКонечныйОстаткок
		|
		|ИЗ РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(,,,,
		|		ДокументПоступления В (&МассивЗаказов)) КАК ТоварыКПоступлениюОстатки) КАК ТоварыОстатки
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОстатки.ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказПоставщику.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ПОДТВЕРЖДЕНИЯ /////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения)
		|// ОЖИДАЕТСЯ ПОДТВЕРЖДЕНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ //////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам ИЛИ 
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)) И
		|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления)
		|// ГОТОВ К ПОСТУПЛЕНИЮ //////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) <> 0
		|		И ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюРасход,0) = 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению)
		|// ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ //////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|		 ИЛИ ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) <> 0
		|		ИЛИ ЕСТЬNULL(ТоварыКПоступлениюОстатки.КПоступлениюКонечныйОстаток,0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)
		|// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
		|		И ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
		|		И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
		|		И ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) = 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И &КонтролироватьЗакрытиеЗаказа
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт),ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказПоставщику.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	ТОГДА
		|		ДокументЗаказПоставщику.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПЕРВОГО ПОСТУПЛЕНИЯ ////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ДокументЗаказПоставщику.ДатаПервогоПоступления
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ
		|		&НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И 
		|		ЕСТЬNULL(ЗаказыПоставщикамОстатки.ЗаказаноОстаток, 0) <> 0 ИЛИ ЕСТЬNULL(ЗаказыПоставщикамОстатки.КОформлениюОстаток, 0) <> 0
		|	ТОГДА
		|		
		|		ЕСТЬNULL(ДатыПоступленияЗаказовПоставщикам.МинимальнаяДатаПоступления, ДокументЗаказПоставщику.ДатаПервогоПоступления)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ПОСТУПЛЕНИЯ ///////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
		|		ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаПоступления,
		|// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентПоступления,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.Проведен И
		|		((ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0) ИЛИ
		|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказПоставщику.Проведен И
		|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
		|		ДокументЗаказПоставщику.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ((ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|		КОНЕЦ
		|		* 100
		|		/ ДокументЗаказПоставщику.СуммаДокумента) КАК ЧИСЛО(20, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|	ЕСТЬNULL(ТоварыКПоступлениюОстатки.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ) КАК ЕстьРасхожденияОрдерНакладная,
		|	ДокументЗаказПоставщику.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику В (&МассивЗаказов)) КАК РасчетыСПоставщикамиОстатки
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТЗаказыПоставщикамОстатки КАК ЗаказыПоставщикамОстатки
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТТоварыКПоступлениюОстатки КАК ТоварыКПоступлениюОстатки
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ТоварыКПоступлениюОстатки.ДокументПоступления
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовПоставщикам КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыПоступленияЗаказовПоставщикам КАК ДатыПоступленияЗаказовПоставщикам
		|ПО
		|	ДокументЗаказПоставщику.Ссылка = ДатыПоступленияЗаказовПоставщикам.ЗаказПоставщику
		|ГДЕ
		|	ДокументЗаказПоставщику.Ссылка В (&МассивЗаказов)
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//  Структура - структура с необходимыми полями
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуЗаказано", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 4);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиПоступления", Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыПоступления", ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам"));
	
	Возврат СтруктураСостояние
	
КонецФункции

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	
	// Потребности в товарах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Товары.Склад";
	
	// Потребности в работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Товары.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Товары.Подразделение";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата                         КАК Период,
	|	ЗаказПоставщику.Валюта                       КАК Валюта,
	|	ЗаказПоставщику.Соглашение.Валюта            КАК ВалютаСоглашения,
	|	ЗаказПоставщику.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДССоглашения,
	|	ЗаказПоставщику.Статус                       КАК Статус,
	|	ЗаказПоставщику.Партнер                      КАК Партнер,
	|	ЗаказПоставщику.Контрагент                   КАК Контрагент,
	|	ЗаказПоставщику.Организация                  КАК Организация,
	|	ЗаказПоставщику.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ЗаказПоставщику.Соглашение                   КАК Соглашение,
	|	ЗаказПоставщику.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ЗаказПоставщику.ВариантПриемкиТоваров        КАК ВариантПриемкиТоваров,
	|	ЗаказПоставщику.Договор                      КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Договор)       КАК ДоговорПредставление,
	|	ЗаказПоставщику.ВернутьМногооборотнуюТару    КАК ВернутьМногооборотнуюТару,
	|	ЗаказПоставщику.ТребуетсяЗалогЗаТару         КАК ТребуетсяЗалогЗаТару,
	|	
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                        КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                        КАК РасчетыПоНакладным,
	|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ЗаказПоставщику.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ                                        КАК ГрафикИсполненияВДоговоре,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ЗаказПоставщику.Договор.ВариантОформленияЗакупок ЕСТЬ NULL
	|				И ЗаказПоставщику.Договор.ВариантОформленияЗакупок <> ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеРазделять)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                        КАК ИспользуетсяДокументПоступлениеТоваров,
	|	ЗаказПоставщику.Склад                        КАК Склад,
	|	ЗаказПоставщику.Номер                        КАК Номер,
	|	ЗаказПоставщику.Менеджер                     КАК Менеджер,
	|	ЗаказПоставщику.Комментарий                  КАК Комментарий,
	|	ЗаказПоставщику.СуммаДокумента               КАК СуммаДокумента,
	|	ЗаказПоставщику.Проведен                     КАК Проведен,
	|	ЗаказПоставщику.ПометкаУдаления              КАК ПометкаУдаления,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика       КАК ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика      КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.Подразделение                КАК Подразделение
	|
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                       Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                       Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",                       Реквизиты.Статус);
	Запрос.УстановитьПараметр("ЗаказПоставщику",              ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",              Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",        Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика", Реквизиты.РегистрироватьЦеныПоставщика);
	Запрос.УстановитьПараметр("Валюта",                       Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаСоглашения",             Реквизиты.ВалютаСоглашения);
	Запрос.УстановитьПараметр("Соглашение",                   Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("Договор",                      Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",           Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",           Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ЦенаВключаетНДССоглашения",    Реквизиты.ЦенаВключаетНДССоглашения);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару",    Реквизиты.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару",         Реквизиты.ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("Партнер",                      Реквизиты.Партнер);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",    Реквизиты.ГрафикИсполненияВДоговоре);
	
	Запрос.УстановитьПараметр("Склад",                        Реквизиты.Склад);
	Запрос.УстановитьПараметр("Номер",                        Реквизиты.Номер);
	Запрос.УстановитьПараметр("Менеджер",                     Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Комментарий",                  Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("СуммаДокумента",               Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",      Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Проведен",                     Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",              Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ДатаПоДаннымПоставщика",       Реквизиты.ДатаПоДаннымПоставщика);
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика",      Реквизиты.НомерПоДаннымПоставщика);
	Запрос.УстановитьПараметр("Подразделение",                Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Контрагент",                   Реквизиты.Контрагент);
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	
	ИнформацияПоСделке = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоСделке, "%Договор%", Реквизиты.ДоговорПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору",  ИнформацияПоДоговору);
	Запрос.УстановитьПараметр("ВариантПриемкиТоваров", Реквизиты.ВариантПриемкиТоваров);
	Запрос.УстановитьПараметр("ИспользуетсяДокументПоступлениеТоваров", Реквизиты.ИспользуетсяДокументПоступлениеТоваров);
	
КонецПроцедуры

Процедура УстановитьПараметрАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры

Процедура ИнициализироватьВспомогательныеПараметрыДокумента(Запрос)
	
	Если Запрос = Неопределено
		Или Запрос.Параметры.Свойство("Распоряжение") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(Запрос.Параметры.ВариантПриемкиТоваров)
		И ЕстьОрдерныеСкладыВТЧТовары(Запрос.Параметры.Ссылка)
		И Запрос.Параметры.ВариантПриемкиТоваров <> Перечисления.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных Тогда
		
		// Документ нужен если есть хотя бы 1 ордерный склад.
		// Если приемка по договорам после накладных, то приход по договору сделает накладная.
		Запрос.УстановитьПараметр("ДокументПоступления", Запрос.Параметры.Договор);
		Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", Ложь);
		
	ИначеЕсли Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(Запрос.Параметры.ВариантПриемкиТоваров)
		И ЕстьОрдерныеСкладыВТЧТовары(Запрос.Параметры.Ссылка)
		И Запрос.Параметры.ВариантПриемкиТоваров <> Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоНакладным Тогда
		
		// Поддержка перепроведения созданных заказов с указанным соглашением по приемке
		
		// Документ нужен если есть хотя бы 1 ордерный склад.
		// Если приемка не разделена по накладным, то приход по соглашению сделает накладная.
		Запрос.УстановитьПараметр("ДокументПоступления", Запрос.Параметры.Соглашение);
		Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", Ложь);
		
	ИначеЕсли ЗакупкиСервер.РаспоряжениеНаПриемкуТовараЗаказ(Запрос.Параметры.ВариантПриемкиТоваров) Тогда
		Запрос.УстановитьПараметр("ДокументПоступления", Запрос.Параметры.Ссылка);
		Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", Ложь);
	ИначеЕсли ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Запрос.Параметры.ВариантПриемкиТоваров) Тогда
		Запрос.УстановитьПараметр("ДокументПоступления", Неопределено);
		Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", Истина);
	Иначе
		Запрос.УстановитьПараметр("ДокументПоступления", Неопределено);
		Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	ВЫБОР КОГДА  (НЕ ТаблицаТовары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)) ТОГДА
	|			ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	0                                                                 КАК КОформлению,
	|	-ТаблицаТовары.Количество                                         КАК Заказано,
	|	ТаблицаТовары.ПричинаОтмены                                       КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК Период,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
	|	&Период                                            КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.Ссылка
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	ЭтапыГрафикаОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	
	|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
	|		ЭтапыГрафикаОплаты.СуммаПлатежа + ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.СуммаПлатежа
	|	КОНЕЦ КАК КОплате,
	|	
	|	0                                                  КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|	И НЕ &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи))
	|	И ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
	|		ЭтапыГрафикаОплаты.СуммаПлатежа + ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.СуммаПлатежа
	|	КОНЕЦ > 0
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)                КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)  КАК Период,
	|	Неопределено                                       КАК ДатаПлатежа,
	|	Неопределено                                       КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	Неопределено                                       КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	0                                                  КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                     КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)
	|	И Не ТаблицаТовары.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|		)
	|	И НЕ &РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ &ТребуетсяЗалогЗаТару
	|		ИЛИ НЕ &ВернутьМногооборотнуюТару)
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВспомогательныеПараметрыДокумента(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТаблицаТовары.ДатаПоступления <> ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА
	|		ТаблицаТовары.ДатаПоступления
	|	КОГДА ТаблицаТовары.Ссылка.ЖелаемаяДатаПоступления <> ДАТАВРЕМЯ(1,1,1,0,0,0) ТОГДА
	|		ТаблицаТовары.Ссылка.ЖелаемаяДатаПоступления
	|	ИНАЧЕ
	|		&Период
	|	КОНЕЦ                         КАК Период,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|					И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|					И &ВариантПриемкиТоваров
	|						В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоНакладным),
	// Соглашение может быть распоряжением в графике поступления только на ордерных складах.
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных)) ТОГДА
	|				ЕСТЬNULL(ДокументРегистраторГрафикаПоСоглашению.Ссылка, НЕОПРЕДЕЛЕНО)
	|		  КОГДА ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|					И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|					И &ВариантПриемкиТоваров
	|						В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеНакладных)) ТОГДА
	// Договор может быть распоряжением в графике поступления только на ордерных складах.
	|				ЕСТЬNULL(ДокументРегистраторГрафикаПоДоговору.Ссылка, НЕОПРЕДЕЛЕНО)
	|			ИНАЧЕ
	|				&Ссылка
	|		КОНЕЦ                     КАК Распоряжение,
	|	
	|	ТаблицаТовары.Склад           КАК Склад,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Назначение      КАК Назначение,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступление,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступлениеПодЗаказ,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                     КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаРаспоряжения,
	|	ЛОЖЬ КАК Корректировка
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистраторГрафикаДвиженияТоваров КАК ДокументРегистраторГрафикаПоСоглашению
	|		ПО ТаблицаТовары.Ссылка.Соглашение = ДокументРегистраторГрафикаПоСоглашению.Распоряжение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистраторГрафикаДвиженияТоваров КАК ДокументРегистраторГрафикаПоДоговору
	|		ПО ТаблицаТовары.Ссылка.Договор = ДокументРегистраторГрафикаПоДоговору.Распоряжение
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьВспомогательныеПараметрыДокумента(Запрос);
	
	ТекстЗапроса = "
	// Оформление закупок по заказу
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюПоступленийПоРаспоряжению,
	|	0                                      КАК КОформлениюОрдеров,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|						ТОГДА ТаблицаТовары.Назначение
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА &ДокументПоступления <> НЕОПРЕДЕЛЕНО
	|			ТОГДА
	|				&ДокументПоступления
	|			ИНАЧЕ
	|				ТаблицаТовары.Ссылка
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	ТаблицаТовары.Количество               КАК КОформлениюПоступленийПоРаспоряжению,
	|	0                                      КАК КОформлениюОрдеров,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|						ТОГДА ТаблицаТовары.Назначение
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ (&ИспользуетсяДокументПоступлениеТоваров
	|			И &НакладнаяЯвляетсяРаспоряжением)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Оформление закупок по заказу/соглашению
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	&ДокументПоступления                   КАК ДокументПоступления,
	|	0                                      КАК КОформлениюНакладныхПоРаспоряжению,
	|	0                                      КАК КОформлениюПоступленийПоРаспоряжению,
	|	ТаблицаТовары.Количество               КАК КОформлениюОрдеров,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам
	|						ТОГДА ТаблицаТовары.Назначение
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ДокументПоступления <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|		И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|	И НЕ &НакладнаяЯвляетсяРаспоряжением
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период) КАК КурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаТовары";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Номенклатура           КАК Номенклатура,
	|	Товары.Характеристика         КАК Характеристика,
	|	Товары.ВидЦеныПоставщика      КАК ВидЦеныПоставщика,
	|	Товары.Упаковка               КАК Упаковка,
	|	Товары.СтавкаНДС              КАК СтавкаНДС,
	|	Товары.Цена                   КАК Цена
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &РегистрироватьЦеныПоставщика
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ТоварыСРазличнымиУпаковкамиЦенами";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(
	|		Товары.Цена / ВЫБОР
	|				КОГДА
	|					Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА
	|					&ТекстЗапросаКоэффициентУпаковки
	|				ИНАЧЕ
	|					1
	|			КОНЕЦ
	|	) КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка)  КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ
	|	ТоварыСРазличнымиУпаковкамиЦенами
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦеныПоставщика
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВременнаяТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТоварыСРазличнымиУпаковкамиЦенами", ТекстыЗапроса) Тогда
		ТекстЗапросаТоварыСРазличнымиУпаковкамиЦенами(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.ВидЦеныПоставщика                КАК ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта         КАК Валюта,
	|	&Период                                 КАК Период,
	|	&Партнер                                КАК Партнер,
	|	МИНИМУМ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ИНАЧЕ
	|					Товары.Упаковка
	|				КОНЕЦ
	|			) КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(ВЫБОР
	|				КОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
	|				ТОГДА
	|					ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
	|				ИНАЧЕ
	|					Товары.Цена
	|				КОНЕЦ
	|				* ВЫБОР
	|					КОГДА
	|						&ЦенаВключаетНДС И НЕ Товары.ВидЦеныПоставщика.ЦенаВключаетНДС
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|							ТОГДА
	|								100/118
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|							ТОГДА
	|								100/110
	|						КОНЕЦ
	|					КОГДА
	|						НЕ &ЦенаВключаетНДС И Товары.ВидЦеныПоставщика.ЦенаВключаетНДС
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|							ТОГДА
	|								1
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|							ТОГДА
	|								1.18
	|							КОГДА
	|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|							ТОГДА
	|								1.10
	|						КОНЕЦ
	|					ИНАЧЕ
	|						1
	|				КОНЕЦ
	|			* ВЫБОР
	|				КОГДА
	|					&Валюта <> Товары.ВидЦеныПоставщика.Валюта
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|						ТОГДА 
	|							(КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|							/ (КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				ИНАЧЕ 
	|					1
	|			КОНЕЦ) КАК Число(15,2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
	|ПО
	|	Товары.Номенклатура = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
	|	И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
	|	И Товары.ВидЦеныПоставщика = ТоварыСРазличнымиУпаковкамиЦенами.ВидЦеныПоставщика
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|ПО
	|	КурсыВалюты.Валюта = &Валюта
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|ПО
	|	КурсыВалютыЦены.Валюта = Товары.ВидЦеныПоставщика.Валюта
	|ГДЕ
	|	Не Товары.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ВидЦеныПоставщика,
	|	Товары.ВидЦеныПоставщика.Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	-ТаблицаТовары.Количество              КАК КЗаказу
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТовары.Подразделение            КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	ТаблицаТовары.Количество               КАК КОбеспечению
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказПоставщику";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ВариантПриемкиТоваровКонстанта", Константы.ВариантПриемкиТоваров.Получить());
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",    """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерПоДаннымПоставщика", """""");
	ПереопределениеРасчетаПараметров.Вставить("ДокументПоступления",
		"ВЫБОР
		|КОГДА ЕСТЬNULL(ТаблицаТовары.Ссылка.Договор.ВариантПриемкиТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
		|				И &ВариантПриемкиТоваровКонстанта В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|													ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных))
		|			ИЛИ ТаблицаТовары.Ссылка.Договор.ВариантПриемкиТоваров  В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамБезЗаказовИНакладных),
		|													ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПоДоговорамПослеЗаказовИлиНакладных))
		|ТОГДА
		|	ТаблицаТовары.Ссылка.Договор
		|КОГДА ЕСТЬNULL(ТаблицаТовары.Ссылка.Договор.ВариантПриемкиТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
		|				И &ВариантПриемкиТоваровКонстанта = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ИЛИ ТаблицаТовары.Ссылка.Договор.ВариантПриемкиТоваров  = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|ТОГДА
		|	ТаблицаТовары.Ссылка
		|
		|КОГДА ЕСТЬNULL(ТаблицаТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
		|				И &ВариантПриемкиТоваровКонстанта В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|													ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|			ИЛИ ТаблицаТовары.Ссылка.Соглашение.ВариантПриемкиТоваров  В (ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным),
		|													ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных))
		|ТОГДА
		|	ТаблицаТовары.Ссылка.Соглашение
		|КОГДА ЕСТЬNULL(ТаблицаТовары.Ссылка.Соглашение.ВариантПриемкиТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
		|				И &ВариантПриемкиТоваровКонстанта = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|			ИЛИ ТаблицаТовары.Ссылка.Соглашение.ВариантПриемкиТоваров  = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|ТОГДА
		|	ТаблицаТовары.Ссылка
		|
		|ИНАЧЕ
		|	НЕОПРЕДЕЛЕНО
		|КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	ПереопределениеРасчетаПараметров.Вставить("ВариантПриемкиТоваров",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров");
	ПереопределениеРасчетаПараметров.Вставить("ИспользуетсяДокументПоступлениеТоваров", 
		"ВЫБОР
		|	КОГДА ТаблицаТовары.Ссылка.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ТОГДА ЛОЖЬ
		|	КОГДА НЕ ТаблицаТовары.Ссылка.Договор.ВариантОформленияЗакупок ЕСТЬ NULL
		|			И ТаблицаТовары.Ссылка.Договор.ВариантОформленияЗакупок <> ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеРазделять)
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ");
	
	Если ИмяРегистра = "ЗаказыПоставщикам" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ДвижениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвижениеТоваров(Неопределено, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Неопределено, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Склад                                  КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	&Статус                                 КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&ДатаПоДаннымПоставщика                 КАК ДатаПервичногоДокумента,
	|	&НомерПоДаннымПоставщика                КАК НомерПервичногоДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам") Тогда
		
		// Заказ поставщику
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПоставщику";
		КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщику");
		
	КонецЕсли;

	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам")
		 И ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		 
		 // Заказ поставщику по данным поставщика
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПоставщику";
		КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику по данным поставщика'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщикуПоДаннымПоставщика");
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаТоварыУслуги(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Заказчик,
	|
	|	ВЫБОР КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК УчитыватьНДС,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Исполнитель,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо						КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	ВЫБОР Документы.СпособДоставки
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада) ТОГДА
	|			Документы.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада) ТОГДА
	|			Документы.АдресДоставкиДляПоставщика
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи) ТОГДА
	|			Документы.АдресДоставкиПеревозчика
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ													КАК АдресДоставки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ИСТИНА													КАК ИспользоватьАвтоСкидки,
	|	&Тип													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документы
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.НоменклатураПоставщика.Наименование				КАК НаименованиеНоменклатурыИсполнителя,
	|	Товары.НоменклатураПоставщика.Код						КАК КодИсполнителя,
	|	Товары.НоменклатураПоставщика.Артикул					КАК АртикулИсполнителя,
	|	Товары.ВидЦеныПоставщика								КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	Товары.СуммаРучнойСкидки								КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки					КАК СуммаБезСкидки,
	|	Товары.Сумма											КАК Сумма,
	|	Товары.СтавкаНДС										КАК СтавкаНДС,
	|	Товары.СуммаНДС											КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ВЫБОР КОГДА Товары.Ссылка.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("Тип",					ПараметрыПечати["Тип"]);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru='Заказ поставщику'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru='заказа поставщику'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Функция ЕстьОрдерныеСкладыВТЧТовары(ЗаказСсылка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаказСсылка
	|	И Товары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И Товары.ДатаПоступления >= Товары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении");
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовПоставщикам.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка                       КАК ЗаказПоставщику,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.Назначение                   КАК Назначение,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.Цена                         КАК Цена,
	|	Таблица.Сумма                        КАК Сумма,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.Склад                        КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|	ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
	|	И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|ГДЕ
	|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
	|//&Отбор";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ КлючЗначение.Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику))
		И ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.РасчетыСПоставщиками)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаказПоставщику.Ссылка) КАК ЗаказыПоставщикамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности >= СостоянияЗаказовПоставщикам.ДатаСобытия ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|				И СостоянияЗаказовПоставщикам.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)) ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченаОплата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|				И СостоянияЗаказовПоставщикам.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)) ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ПО (СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка)}
	|ГДЕ
	|	(НЕ (СостоянияЗаказовПоставщикам.Заказ ЕСТЬ NULL) ИЛИ НЕ ДокументЗаказПоставщику.Проведен)
	|	И ДокументЗаказПоставщику.Менеджер = &Пользователь
	|	И СостоянияЗаказовПоставщикам.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
	|	И (НЕ ДокументЗаказПоставщику.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыПоставщикам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаказыПоставщикам";
	ДелоРодитель.Представление  = НСтр("ru = 'Заказы поставщикам'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// ЗаказыПоставщикамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Всего заказов в работе'");
	Дело.Количество     = Результат.ЗаказыПоставщикамВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамНаСегодня";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамНаСегодня > 0;
	Дело.Представление  = НСтр("ru = 'На сегодня'");
	Дело.Количество     = Результат.ЗаказыПоставщикамНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамПросроченаОплата
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеОплаты");
	ПараметрыОтбора.Вставить("Актуальность", "Просрочен");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамПросроченаОплата";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамПросроченаОплата > 0;
	Дело.Представление  = НСтр("ru = 'Просрочена оплата по заказам'");
	Дело.Количество     = Результат.ЗаказыПоставщикамПросроченаОплата;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамПросроченоИсполнение
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеИсполнения");
	ПараметрыОтбора.Вставить("Актуальность", "Просрочен");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамПросроченоИсполнение";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамПросроченоИсполнение > 0;
	Дело.Представление  = НСтр("ru = 'Просрочено исполнение заказов'");
	Дело.Количество     = Результат.ЗаказыПоставщикамПросроченоИсполнение;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	Если Результат.ЗаказыПоставщикамВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что заказ является распоряжением на приемку товаров
//
// Параметры:
//  ЗаказПоставщику	 - ДокументСсылка.ЗаказПоставщику - Проверяемый заказ
// 
// Возвращаемое значение:
//  Булево - Результат проверки
//
Функция ЗаказЯвляетсяРаспоряжениемНаПриемкуТоваров(ЗаказПоставщику) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВариантПриемкиТоваровЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ВариантПриемкиТоваров");
	
	Результат = Ложь;
	Если Не ЗначениеЗаполнено(ВариантПриемкиТоваровЗаказа) Тогда
		Результат = Константы.ВариантПриемкиТоваров.Получить() = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	ИначеЕсли ВариантПриемкиТоваровЗаказа = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаЗаказыПоставщикуВРаботе()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияЗаказовПоставщикам.Заказ,
	|	СостоянияЗаказовПоставщикам.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|ГДЕ
	|	СостоянияЗаказовПоставщикам.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияЗаказовПоставщикам)
			И ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПоставщику)
			И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Заказы поставщикам'");
	Запрос = Новый Запрос(ТекстЗапросаЗаказыПоставщикуВРаботе());
	
	ИмяФормыРабочееМестоЗаказПоставщику = "Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоЗаказПоставщику);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоЗаказПоставщику);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказПоставщику";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорСПоставщиком
	|	ПО ТаблицаДокумента.Договор = ДоговорСПоставщиком.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ХозяйственнаяОперация В (&ОперацииОдноходовки)
	|	И ДоговорСПоставщиком.ВариантОформленияЗакупок В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	(ЗаказПоставщику.АдресДоставки <> """"
	|		И ВЫРАЗИТЬ(ЗаказПоставщику.АдресДоставкиЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ЗаказПоставщику.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ
	|	(ЗаказПоставщику.АдресДоставкиПеревозчика <> """"
	|		И ВЫРАЗИТЬ(ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ЗаказПоставщику.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	|	И ЗаказПоставщикуТовары.Отменено = ЛОЖЬ
	|	И ЗаказПоставщикуТовары.Ссылка.Статус В
	|		(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|		)
	|	И (ЗаказПоставщикуТовары.ДатаПоступления = &ПустаяДата
	|		ИЛИ
	|		(ЗаказПоставщикуТовары.Ссылка.ПоступлениеОднойДатой
	|			И ЗаказПоставщикуТовары.ДатаПоступления = &ПустаяДата))";
	
	ОперацииОдноходовки = Новый Массив();
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Запрос.УстановитьПараметр("ОперацииОдноходовки", ОперацииОдноходовки);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказПоставщику";
	
	ИмяДокумента = СтрРазделить(ПолноеИмяОбъекта,".")[1];
	МетаданныеДокумента = Метаданные.Документы.ЗаказПоставщику;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ВариантПриемкиКонстанта = Константы.ВариантПриемкиТоваров.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка                       КАК Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных          КАК ВерсияДанных,
	|	ОбъектыДляОбработки.Ссылка.Проведен              КАК Проведен,
	|	ОбъектыДляОбработки.Ссылка.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор,
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
	|	ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставки         КАК АдресДоставки,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ОбъектыДляОбработки.Ссылка.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей
	|ПОМЕСТИТЬ ТаблицаСсылок
	|ИЗ
	|	ВТДокументыДляОбработки КАК ОбъектыДляОбработки
	|;
	|ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка                КАК Ссылка,
	|	ОбъектыДляОбработки.ВерсияДанных          КАК ВерсияДанных,
	|	ОбъектыДляОбработки.Проведен              КАК Проведен,
	|	ВЫБОР КОГДА
	|		ОбъектыДляОбработки.ВариантПриемкиТоваров <> ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	КАК                                       ТребуетсяУказаниеВариантаПриемки,
	|	ВЫБОР
	|		КОГДА ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|			И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки)
	|			И ЕСТЬNULL(ОбъектыДляОбработки.Соглашение.ВариантПриемкиТоваров, &ВариантПриемкиКонстанта) = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
	|			ИНАЧЕ
	|				ЕСТЬNULL(ОбъектыДляОбработки.Соглашение.ВариантПриемкиТоваров, &ВариантПриемкиКонстанта)
	|		КОНЕЦ
	|	КАК РассчитанныйВариантПриемки,
	|	ВЫБОР КОГДА
	|		ОбъектыДляОбработки.ХозяйственнаяОперация В (&ОперацииОдноходовки)
	|		И ДоговорСПоставщиком.ВариантОформленияЗакупок В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки)
	|			)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ
	|	КАК                                       ТребуетсяПеревыборХозОперации,
	|	ВЫБОР
	|		КОГДА
	|			ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|				И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
	|		КОГДА
	|			ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|				И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|		КОГДА
	|			ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|				И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.ТоварыВПути)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
	|		КОГДА
	|			ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|				И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
	|		КОГДА
	|			ОбъектыДляОбработки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|				И ОбъектыДляОбработки.Договор.ВариантОформленияЗакупок = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияЗакупок.НеотфактурованныеПоставки)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|		КОНЕЦ
	|	КАК                                       НоваяХозяйственнаяОперация,
	|	(ОбъектыДляОбработки.АдресДоставки <> """"
	|	И ВЫРАЗИТЬ(ОбъектыДляОбработки.АдресДоставкиЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ОбъектыДляОбработки.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ (ОбъектыДляОбработки.АдресДоставкиПеревозчика <> """"
	|		И ВЫРАЗИТЬ(ОбъектыДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ОбъектыДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	КАК                                       ТребуетсяПересчетЗначенийПолейАдреса
	|ИЗ
	|	ТаблицаСсылок КАК ОбъектыДляОбработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорСПоставщиком
	|	ПО ОбъектыДляОбработки.Договор = ДоговорСПоставщиком.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	ОперацииОдноходовки = Новый Массив();
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииОдноходовки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВариантПриемкиКонстанта", ВариантПриемкиКонстанта);
	Запрос.УстановитьПараметр("ОперацииОдноходовки", ОперацииОдноходовки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Выборка.ТребуетсяУказаниеВариантаПриемки Тогда
				ДокументОбъект.ВариантПриемкиТоваров = Выборка.РассчитанныйВариантПриемки;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Выборка.ТребуетсяПеревыборХозОперации Тогда
				ДокументОбъект.ХозяйственнаяОперация = Выборка.НоваяХозяйственнаяОперация;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Выборка.ТребуетсяПересчетЗначенийПолейАдреса Тогда
				Если Не ПустаяСтрока(ДокументОбъект.АдресДоставкиЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(ДокументОбъект.АдресДоставки, НовыеЗначенияПолей);
					ДокументОбъект.АдресДоставкиЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
				Если Не ПустаяСтрока(ДокументОбъект.АдресДоставкиПеревозчикаЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(ДокументОбъект.АдресДоставкиПеревозчика, НовыеЗначенияПолей);
					ДокументОбъект.АдресДоставкиПеревозчикаЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
				Или ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
				
				ПараметрыПоиска = Новый Структура();
				ПараметрыПоиска.Вставить("ДатаПоступления", Дата(1, 1, 1));
				ПараметрыПоиска.Вставить("Отменено", Ложь);
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
				
				ДатаПоступления = Неопределено;
				
				Если ДокументОбъект.ПоступлениеОднойДатой
					И Не ЗначениеЗаполнено(ДокументОбъект.ДатаПоступления) Тогда
					
					ДатаПоступления = ПолучитьДатуПоступления(ДатаПоступления, ДокументОбъект);
					ДокументОбъект.ДатаПоступления = ДатаПоступления;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					ДатаПоступления = ПолучитьДатуПоступления(ДатаПоступления, ДокументОбъект);
					
					Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
						Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
							СтрокаТЧ.ДатаПоступления = ДатаПоступления;
							ОбъектИзменен = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ПолучитьДатуПоступления(Знач ДатаПоступления, ДокументОбъект)
	
	Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.ЖелаемаяДатаПоступления) И ДокументОбъект.ЖелаемаяДатаПоступления >= ДокументОбъект.Дата Тогда
			ДатаПоступления = ДокументОбъект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаПоступления;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
