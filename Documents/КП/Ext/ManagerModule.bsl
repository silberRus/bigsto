#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуАнализЦенПоставщиковПоДокументу(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияОтУсловийПродаж(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОценкаРентабельностиПродажи(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПримененныеСкидки(КомандыОтчетов);

КонецПроцедуры


// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ГрафикОплаты");
	МассивВсехРеквизитов.Добавить("ФормаОплаты");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентАвтоматическойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаАвтоматическойСкидки");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МассивРеквизитовОперации.Добавить("ГрафикОплаты");
		МассивРеквизитовОперации.Добавить("ФормаОплаты");
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.ПроцентАвтоматическойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаАвтоматическойСкидки");
	КонецЕсли;
	
КонецПроцедуры

// Осуществялет вычисление текущего состояния коммерческого предложения
//
// Параметры:
//	КоммерческоеПредложение - ДокументСсылка.КоммерческоеПредложение - Документ, состояние которого необходимо вычислить
//	Состояние - Строка - Реквизит, в который будет помещено рассчитанное состояние
//	СостояниеПросрочено - Булево - Реквизит, в который будет помещен признак просроченности состояния
//
Процедура РассчитатьСостояние(Знач КоммерческоеПредложение, Состояние, СостояниеПросрочено) Экспорт
	
	Если ЗначениеЗаполнено(КоммерческоеПредложение) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|ВЫБОР
			|	// НЕ ПРОВЕДЕНО ///////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ КоммерческоеПредложениеКлиенту.Проведен
			|	ТОГДА
			|		НЕОПРЕДЕЛЕНО
			|	// ОТМЕНЕНО ///////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Отменено)
			|	// ДЕЙСТВУЕТ //////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Действует)
			|	// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|	// СОГЛАСОВАНИЕ ПРОСРОЧЕНО ////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	// СРОК ДЕЙСТВИЯ ИСТЕК ////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен
			|ИЗ
			|	Документ.КП КАК КоммерческоеПредложениеКлиенту
			|ГДЕ
			|	КоммерческоеПредложениеКлиенту.Ссылка = &КоммерческоеПредложение
			|");
			
		Запрос.УстановитьПараметр("КоммерческоеПредложение", КоммерческоеПредложение);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Состояние           = Выборка.Состояние;
		СостояниеПросрочено = Выборка.Просрочен;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыКоммерческихПредложенийКлиентам[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.КП КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "КоммерческоеПредлоениеКлиенту" отсутствуют дополнительные проверки
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	//// Коммерческое предложение (Microsoft Word)
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКоммерческоеПредложениеMicrosoftWord";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КоммерческоеПредложениеMicrosoftWord";
	//КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение (Microsoft Word)'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	//// Коммерческое предложение (OpenOffice.org Writer)
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКоммерческоеПредложениеOpenOfficeOrgWriter";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КоммерческоеПредложениеOpenOfficeOrgWriter";
	//КомандаПечати.Представление = НСтр("ru = 'Коммерческое предложение (OpenOffice.org Writer)'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	Если ПолучитьФункциональнуюОпцию("НеВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		// Коммерческое предложение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "КП";
		КомандаПечати.Представление = НСтр("ru = 'КП'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		// Коммерческое предложение (не выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "КП";
		КомандаПечати.Представление = НСтр("ru = 'КП (не выводить скидки)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Ложь);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		// Коммерческое предложение (выводить скидки)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "КП";
		КомандаПечати.Представление = НСтр("ru = 'КП (выводить скидки)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьСкидки", Истина);
	КонецЕсли;

	//// Комплект документов на принтер
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КомплектДокументов";
	//КомандаПечати.СразуНаПринтер = Истина;
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 1;
	//
	//// Комплект документов с настройкой...
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
	//КомандаПечати.МенеджерПечати = "";
	//КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
	//КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...'");
	//КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//КомандаПечати.Порядок = 2;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КП", НСтр("ru = 'Коммерческое предложение (перекуп)'"), СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, Неопределено, ПараметрыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	Возврат Новый Структура("Данные,Макеты",
				ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
				ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
	
КонецФункции

Функция ПолучитьОписаниеОбластейКоммерческоеПредложение()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул",				"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул",				"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Заголовок",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "КонтактноеЛицо",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Предложение",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицаТовары",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТовары",						"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыНабор",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыКомплектующие",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыКомплектующиеКонец",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицаТоварыБезСкидки",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыБезСкидки",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыБезСкидкиНабор",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыБезСкидкиКомплектующие",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыБезСкидкиКомплектующиеКонец",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ИтоговаяСтрока",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СрокДействия",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ЗаголовокДопИнформации",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ГрафикОплаты",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ФормаОплаты",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Склад",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформация",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подвал",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ТелефонОрганизации",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "АдресЭлектроннойПочтыМенеджера",	"Общая");
	
	Возврат Секции;

КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(Знач МассивДокументов, Знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивДокументов, Неопределено);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	Пока ДанныеПечати.Следующий() Цикл
		ДанныеОбъектаПоМакетам = Новый Структура;
		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, Товары);
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ДанныеПечати.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(Знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_КоммерческоеПредложение" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейКоммерческоеПредложение();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КП.ПФ_DOC_КоммерческоеПредложение");
		ИначеЕсли ИмяМакета = "ПФ_ODT_КоммерческоеПредложение" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейКоммерческоеПредложение();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КП.ПФ_ODT_КоммерческоеПредложение");
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура(
						"ОписаниеСекций,ДвоичныеДанныеМакетов",
						ОписаниеСекций,
						ДвоичныеДанныеМакетов);
	
КонецФункции

Функция СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, КомплектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, Товары);
		ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабличныйДокумент, ДанныеОбъекта);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати)
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
			<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	КонецЕсли; 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	
	|	ВариантыКомплектацииНоменклатуры.Ссылка                                    КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	
	|	Таблица.НомерСтроки КАК НомерСтроки,
	//|	Таблица.Номенклатура КАК Номенклатура,
	// silber {
	|	ВЫБОР КОГДА Таблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА ТекстовоеОписание ИНАЧЕ Номенклатура КОНЕЦ КАК Номенклатура,
	// } silber
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Цена
	|		ИНАЧЕ Таблица.Сумма/Таблица.КоличествоУпаковок 
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			СуммаРучнойСкидки + СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСкидки,
	|	Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Активность КАК Активность,
	|	ВЫБОР
	|		КОГДА
	|			Таблица.Ссылка.ВернутьМногооборотнуюТару
	|			И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.КП.Товары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|
	|ГДЕ
	|	Таблица.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)           КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)        КАК СуммаНДС,
	|	СУММА(Таблица.СуммаСкидки)     КАК СуммаСкидки,
	|	СУММА(Таблица.СуммаБезСкидки)  КАК СуммаБезСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	// silber {
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	// } silber
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	// silber {
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	// } silber
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	NULL КАК СтавкаНДС,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Товары КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.СтавкаНДС
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|	
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|	
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|	
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                                 КАК Сумма,
	|	Таблица.СуммаНДС                              КАК СуммаНДС,
	|	Таблица.СуммаСкидки                           КАК СуммаСкидки,
	|	Таблица.СуммаБезСкидки                        КАК СуммаБезСкидки,
	|	ВременнаяТаблицаНаборыДополнительно.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка,
	|	КоммерческоеПредложениеКлиенту.Номер КАК Номер,
	|	КоммерческоеПредложениеКлиенту.Дата КАК Дата,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
	|	КоммерческоеПредложениеКлиенту.Организация.НаименованиеСокращенное КАК ОрганизацияСокращенноеНаименование,
	|	КоммерческоеПредложениеКлиенту.Организация.Наименование КАК ОрганизацияНаименование,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ КоммерческоеПредложениеКлиенту.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	КоммерческоеПредложениеКлиенту.Организация.Префикс КАК Префикс,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	ЕСТЬNULL(КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо.Наименование, КоммерческоеПредложениеКлиенту.Менеджер.Наименование) КАК Менеджер,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ПочтаМенеджера.Представление КАК АдресЭлектроннойПочтыМенеджера,
	|	КоммерческоеПредложениеКлиенту.ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.Склад
	|ИЗ
	|	Документ.КП КАК КоммерческоеПредложениеКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица))
	|			И КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо = ПочтаМенеджера.Ссылка
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора                        КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
	|	Товары.ЭтоНабор         КАК ЭтоНабор,
	|	Товары.ЭтоКомплектующие КАК ЭтоКомплектующие,
	|	
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.СуммаСкидки КАК СуммаСкидки,
	|	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Товары.Активность КАК Активность,
	|	Товары.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара
	|	
	|ИЗ (
	|	
	|	ВЫБРАТЬ
	|		Таблица.Ссылка КАК Ссылка,
	|		
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|		
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Цена,
	|		Таблица.Сумма,
	|		Таблица.СтавкаНДС,
	|		Таблица.СуммаНДС,
	|		Таблица.Характеристика,
	|		Таблица.Упаковка,
	|		Таблица.СуммаСкидки,
	|		Таблица.СуммаБезСкидки,
	|		Таблица.Активность,
	|		Таблица.ЭтоВозвратнаяТара
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|			 И ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|	
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                              ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВЫБОР
	|			КОГДА &ОтображатьСкидки ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|					(ВременнаяТаблицаНаборы.СуммаБезСкидки) / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|			ИНАЧЕ
	|				ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|					(ВременнаяТаблицаНаборы.Сумма) / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|		КОНЕЦ КАК Цена,
	|		ВременнаяТаблицаНаборы.Сумма КАК Сумма,
	|		ВременнаяТаблицаНаборы.СтавкаНДС,
	|		ВременнаяТаблицаНаборы.СуммаНДС,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		ВременнаяТаблицаНаборы.СуммаСкидки,
	|		ВременнаяТаблицаНаборы.СуммаБезСкидки,
	|		Истина,
	|		Ложь
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                           ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ЭтоНабор УБЫВ
	|
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[6]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоВыборке(Выборка, Товары)
	
	ДанныеОбъекта = Новый Структура;
	
	СведенияОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
	
	Если ЗначениеЗаполнено(Выборка.ОрганизацияСокращенноеНаименование) Тогда
		ПредставлениеОрганизации = Выборка.ОрганизацияСокращенноеНаименование;
	Иначе
		ПредставлениеОрганизации = Выборка.ОрганизацияНаименование;
	КонецЕсли;
	
	ТаблицаТовары = Товары.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
	
	ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, Истина);
	
	ИспользоватьНаборы = Ложь;
	Если Товары.Колонки.Найти("ЭтоНабор") <> Неопределено Тогда
		ИспользоватьНаборы = Истина;
	КонецЕсли;
	ПустыеДанные = НаборыСервер.ПустыеДанные();
	
	ДанныеОбъекта.Вставить("Ссылка",                            Выборка.Ссылка);
	ДанныеОбъекта.Вставить("Организация",                       Выборка.Организация);
	ДанныеОбъекта.Вставить("ПредставлениеОрганизации",          ПредставлениеОрганизации);
	ДанныеОбъекта.Вставить("Партнер",                           Выборка.Партнер);
	ДанныеОбъекта.Вставить("КонтактноеЛицо",                    Выборка.КонтактноеЛицо);
	ДанныеОбъекта.Вставить("Менеджер",                          Выборка.Менеджер);
	ДанныеОбъекта.Вставить("Номер",                             ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер, Ложь, Истина));
	ДанныеОбъекта.Вставить("Дата",                              Формат(Выборка.Дата,"ДЛФ=D"));
	ДанныеОбъекта.Вставить("СрокДействия",                      Формат(Выборка.СрокДействия,"ДЛФ=D"));
	ДанныеОбъекта.Вставить("ДополнительнаяИнформация",          Выборка.ДополнительнаяИнформация);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",                СведенияОрганизации.Телефоны);
	ДанныеОбъекта.Вставить("АдресОрганизации",                  СведенияОрганизации.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("АдресЭлектроннойПочтыМенеджера",    Выборка.АдресЭлектроннойПочтыМенеджера);
	ДанныеОбъекта.Вставить("ГрафикОплаты",                      Выборка.ГрафикОплаты);
	ДанныеОбъекта.Вставить("ФормаОплаты",                       Выборка.ФормаОплаты);
	ДанныеОбъекта.Вставить("Склад",                             Выборка.Склад);
	ДанныеОбъекта.Вставить("ЕстьСкидки",                        ЗаголовокСкидки.ЕстьСкидки);
	ДанныеОбъекта.Вставить("ЗаголовокСкидки",                   ЗаголовокСкидки.Скидка);
	ДанныеОбъекта.Вставить("ТолькоНаценка",                     ЗаголовокСкидки.ТолькоНаценка);
	ДанныеОбъекта.Вставить("ИспользоватьНаборы",                ИспользоватьНаборы);
	
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	СуммаВсего    = 0;
	СуммаВсегоНДС = 0;
	КоличествоТоваров = 0;
	
	НомерСтроки = 0;
	
	Для Каждого ВыборкаТовары из ТаблицаТовары Цикл
		
		Если НЕ ВыборкаТовары.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыТовары = Новый Структура;
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(ВыборкаТовары, ИспользоватьНаборы) Тогда
			СтрокаТаблицыТовары.Вставить("НомерСтроки",          Неопределено);
		Иначе
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицыТовары.Вставить("НомерСтроки",          НомерСтроки);
		КонецЕсли;
		
		ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(ВыборкаТовары, ИспользоватьНаборы);
		
		ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
		ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = ВыборкаТовары.ЭтоВозвратнаяТара;		
		
		НаименованиеТовара = ПрефиксИПостфикс.Префикс + НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ВыборкаТовары.НаименованиеПолное,
			ВыборкаТовары.Характеристика,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати) + ПрефиксИПостфикс.Постфикс;
		
		СтрокаТаблицыТовары.Вставить("Номенклатура",         НаименованиеТовара);
		СтрокаТаблицыТовары.Вставить("Количество",           ВыборкаТовары.Количество);
		СтрокаТаблицыТовары.Вставить("ЕдиницаИзмерения",     ВыборкаТовары.ЕдиницаИзмерения);
		СтрокаТаблицыТовары.Вставить("Цена",                 Формат(ВыборкаТовары.Цена,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыТовары.Вставить("СуммаСкидки",          ВыборкаТовары.СуммаСкидки);
		СтрокаТаблицыТовары.Вставить("Сумма",                Формат(ВыборкаТовары.Сумма,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыТовары.Вставить("ЭтоНабор",             ВыборкаТовары.ЭтоНабор);
		СтрокаТаблицыТовары.Вставить("ЭтоКомплектующие",     ВыборкаТовары.ЭтоКомплектующие);
		СтрокаТаблицыТовары.Вставить("ВариантПредставленияНабораВПечатныхФормах", ВыборкаТовары.ВариантПредставленияНабораВПечатныхФормах);
		СтрокаТаблицыТовары.Вставить("ВариантРасчетаЦеныНабора",                  ВыборкаТовары.ВариантРасчетаЦеныНабора);
		
		Если ДанныеОбъекта.ЕстьСкидки Тогда
			СтрокаТаблицыТовары.СуммаСкидки = ?(ДанныеОбъекта.ТолькоНаценка,- СтрокаТаблицыТовары.СуммаСкидки,СтрокаТаблицыТовары.СуммаСкидки);
			СтрокаТаблицыТовары.СуммаСкидки = Формат(СтрокаТаблицыТовары.СуммаСкидки,"ЧДЦ=2; ЧРД=,");
		КонецЕсли; 
		
		Если НаборыСервер.ВыводитьТолькоЗаголовок(ВыборкаТовары, ИспользоватьНаборы) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, ПустыеДанные);
		КонецЕсли;
		
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
		
		Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(ВыборкаТовары, ИспользоватьНаборы) Тогда
			
			СуммаВсего        = СуммаВсего + ВыборкаТовары.Сумма;
			СуммаВсегоНДС     = СуммаВсегоНДС + ВыборкаТовары.СуммаНДС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеВалюты = ?(ЗначениеЗаполнено(Выборка.Валюта), СокрЛП(Выборка.Валюта), "");
	
	СуммаКПрописи = СуммаВсего + ?(Выборка.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.Валюта);
	
	ИтоговаяСтрока = "";
	Если Выборка.УчитыватьНДС И НЕ Выборка.ЦенаВключаетНДС Тогда
		ИтоговаяСтрока = НСтр("ru='Итого: %СуммаВсего% %ПредставлениеВалюты%, сумма НДС: %СуммаНДС% %ПредставлениеВалюты%'") + Символы.ПС;
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаВсего%", Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%ПредставлениеВалюты%", ПредставлениеВалюты);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Выборка.Валюта));
	
	Если Выборка.УчитыватьНДС И Выборка.ЦенаВключаетНДС Тогда
		
		СтрокаНДС = НСтр("ru='в том числе НДС %СуммаНДС% %ПредставлениеВалюты%'");
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%ПредставлениеВалюты%", ПредставлениеВалюты);
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;
		
	КонецЕсли;
	
	Если НЕ Выборка.УчитыватьНДС Тогда
		
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + НСтр("ru='Без налога (НДС)'");
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ИтоговаяСтрока",    ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СтоимостьПрописью", СуммаПрописью);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабличныйДокумент, ДанныеОбъекта)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КП.ПФ_MXL_КоммерческоеПредложение");
	
	ДатаСведений = ДанныеОбъекта.Дата;
	
	СведенияОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеОбъекта.Организация, ДатаСведений);
	
	// Вывод заголовка
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьЗаголовок, "Заголовок", ДанныеОбъекта.Организация);
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеОбъекта);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеОбъекта.Ссылка);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Вывод области контактного лица
	Если ЗначениеЗаполнено(ДанныеОбъекта.КонтактноеЛицо) Тогда
		ОбластьКонтактноеЛицо = Макет.ПолучитьОбласть("КонтактноеЛицо");
		ОбластьКонтактноеЛицо.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьКонтактноеЛицо);
	КонецЕсли;
	
	// Вывод области предложения
	ОбластьПредложение = Макет.ПолучитьОбласть("Предложение");
	ОбластьПредложение.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПредложение);
	
	Если ДанныеОбъекта.ЕстьСкидки Тогда
		ПостфиксСтрок = "";
	Иначе
		ПостфиксСтрок = "БезСкидки";
	КонецЕсли;
	
	ОбластьСтрокаТаблицыТоварыСтандарт    = Макет.ПолучитьОбласть("СтрокаТаблицыТовары" + ПостфиксСтрок);
	ОбластьШапкаТаблицыТовары             = Макет.ПолучитьОбласть("ШапкаТаблицыТовары"  + ПостфиксСтрок);
	ОбластьПодвалТаблицыТовары            = Макет.ПолучитьОбласть("ПодвалТаблицыТовары");
	ОбластьСрокДействия                   = Макет.ПолучитьОбласть("СрокДействия");
	ОбластьГрафикОплаты                   = Макет.ПолучитьОбласть("ГрафикОплаты");
	ОбластьФормаОплаты                    = Макет.ПолучитьОбласть("ФормаОплаты");
	ОбластьДопИнформацияЗаголовок         = Макет.ПолучитьОбласть("ДопИнформацияЗаголовок");
	ОбластьСклад                          = Макет.ПолучитьОбласть("Склад");
	ОбластьДополнительнаяИнформация       = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьПодвал                         = Макет.ПолучитьОбласть("Подвал");
	ОбластьАдресЭлектроннойПочтыМенеджера = Макет.ПолучитьОбласть("АдресЭлектроннойПочтыМенеджера");
	ОбластьТелефонОрганизации             = Макет.ПолучитьОбласть("ТелефонОрганизации");
	
	Если ДанныеОбъекта.ИспользоватьНаборы Тогда
		ОбластьСтрокаТаблицыТоварыНабор         = Макет.ПолучитьОбласть("СтрокаТаблицыТовары" + ПостфиксСтрок + "Набор");
		ОбластьСтрокаТаблицыТоварыКомплектующие = Макет.ПолучитьОбласть("СтрокаТаблицыТовары" + ПостфиксСтрок + "Комплектующие");
	КонецЕсли;
	
	// Вывод шапки таблицы товаров
	Если ДанныеОбъекта.ЕстьСкидки Тогда
		СтруктураДанныхТаблицыТовары = Новый Структура("Скидка",ДанныеОбъекта.ЗаголовокСкидки);
		ОбластьШапкаТаблицыТовары.Параметры.Заполнить(СтруктураДанныхТаблицыТовары);
	КонецЕсли; 
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыТовары);
	
	// Вывод строк таблицы товаров
	Для Каждого Товар Из ДанныеОбъекта.Товары Цикл
		
		Если НаборыСервер.ИспользоватьОбластьНабор(Товар, ДанныеОбъекта.ИспользоватьНаборы) Тогда
			ОбластьСтрокаТаблицыТовары   = ОбластьСтрокаТаблицыТоварыНабор;
		ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(Товар, ДанныеОбъекта.ИспользоватьНаборы) Тогда
			ОбластьСтрокаТаблицыТовары   = ОбластьСтрокаТаблицыТоварыКомплектующие;
		Иначе
			ОбластьСтрокаТаблицыТовары   = ОбластьСтрокаТаблицыТоварыСтандарт;
		КонецЕсли;
		
		ОбластьСтрокаТаблицыТовары.Параметры.Заполнить(Товар);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыТовары);
	КонецЦикла;
	
	// Вывод подвала таблицы товров
	ОбластьПодвалТаблицыТовары.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыТовары);
	
	// Вывод срока действия коммерческого предложения
	Если ЗначениеЗаполнено(ДанныеОбъекта.СрокДействия) Тогда
		
		ОбластьСрокДействия.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСрокДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты)
		Или ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты)
		Или ЗначениеЗаполнено(ДанныеОбъекта.Склад)
		Или ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		
		ТабличныйДокумент.Вывести(ОбластьДопИнформацияЗаголовок);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты) Тогда
		ОбластьГрафикОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьГрафикОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты) Тогда
		ОбластьФормаОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьФормаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Склад) Тогда
		ОбластьСклад.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСклад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
	КонецЕсли;
	
	ОбластьПодвал.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТелефонОрганизации) Тогда
		ОбластьТелефонОрганизации.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера) Тогда
		ОбластьАдресЭлектроннойПочтыМенеджера.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьАдресЭлектроннойПочтыМенеджера);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.КП.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
	
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//ИмяМакета = "КоммерческоеПредложение";
	//ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	//Если ТекущийКомплект.Количество() > 0 Тогда
	//	Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
	//		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
	//		ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
	//		ТаблицаСсылок.Свернуть("Ссылка");
	//		ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
	//	Иначе
	//		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
	//		ТекущийМассивОбъектов = МассивОбъектов
	//	КонецЕсли;
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		ИмяМакета,
	//		ТекущийКомплект[0].Представление,
	//		СформироватьПечатнуюФормуКоммерческогоПредложения(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	//КонецЕсли;
	//
	//ИмяМакета = "КоммерческоеПредложениеБезСкидок";
	//ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	//Если ТекущийКомплект.Количество() > 0 Тогда
	//	Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
	//		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
	//		ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
	//		ТаблицаСсылок.Свернуть("Ссылка");
	//		ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
	//	Иначе
	//		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
	//		ТекущийМассивОбъектов = МассивОбъектов
	//	КонецЕсли;
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		ИмяМакета,
	//		ТекущийКомплект[0].Представление,
	//		СформироватьПечатнуюФормуКоммерческогоПредложения(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект, Новый Структура("ОтображатьСкидки", Ложь)));
	//КонецЕсли;
	
	ИмяМакета = "КоммерческоеПредложение";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущийМассивОбъектов = МассивОбъектов
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			СформироватьПечатнуюФормуКП(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект));
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.КП",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	Если ПолучитьФункциональнуюОпцию("ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение (выводить скидки)'"), 1);
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "КоммерческоеПредложениеБезСкидок", НСтр("ru = 'Коммерческое предложение (не выводить скидки)'"), 0);
	Иначе
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "КоммерческоеПредложение", НСтр("ru = 'Коммерческое предложение'"), 1);
	КонецЕсли;
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции
Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов)
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
			<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо, 
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА Документы.БанковскийСчет.ИностранныйБанк
	|		ИЛИ Документы.БанковскийСчет.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|		ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчет.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчет.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	Документы.БанковскийСчет.АдресБанка КАК АдресБанка,
	|	Документы.БанковскийСчет.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчет.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанковРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
 	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	//|	Документы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	"""" КАК НазначениеПлатежа,
	
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	//|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	"""" КАК Грузоотправитель,
	
	//|	Документы.Грузополучатель КАК Грузополучатель,
	|	"""" КАК Грузополучатель,
	
	//|	Документы.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.КП КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
	|		ПО Документы.БанковскийСчет.Банк = КлассификаторБанковРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы
	|		ПО Истина
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1														КАК Порядок,
	|	ЭтапыГрафикаОплаты.Ссылка								КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки							КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа							КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа						КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа							КАК СуммаПлатежа,
	|	ЛОЖЬ													КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка.ДокументОснование В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2														КАК Порядок,
	|	ЭтапыГрафикаОплаты.Ссылка								КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки							КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа							КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару					КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару					КАК СуммаПлатежа,
	|	ИСТИНА													КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка.ДокументОснование В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.Ссылка.ТребуетсяЗалогЗаТару
	|	И ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                              КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                            КАК ХарактеристикаНабора,
	|
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Таблица.Цена
	|		ИНАЧЕ Таблица.Сумма/Таблица.КоличествоУпаковок 
	|	КОНЕЦ КАК Цена,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	//|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА
	|			Таблица.Ссылка.ВернутьМногооборотнуюТару
	|			И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки ТОГДА
	|			Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСкидки,
	|	Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаБезСкидки
	//|	Таблица.Содержание КАК Содержание
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.КП.Товары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|
	|ГДЕ
	|	Таблица.Ссылка В(&МассивОбъектов)
	//|	И Таблица.Отменено = ЛОЖЬ
	|	И Таблица.Активность = ИСТИНА
	
	|	И (Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И (НЕ Таблица.Ссылка.ВернутьМногооборотнуюТару ИЛИ Таблица.Ссылка.ТребуетсяЗалогЗаТару))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)           КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)        КАК СуммаНДС,
	//|	МАКСИМУМ(Таблица.ДатаОтгрузки) КАК ДатаОтгрузки,
	|	СУММА(Таблица.СуммаСкидки)     КАК СуммаСкидки,
	|	СУММА(Таблица.СуммаБезСкидки)  КАК СуммаБезСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                    КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры           КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|		И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка                                                                                КАК Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец                                  КАК НоменклатураНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика                            КАК ХарактеристикаНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура   КАК Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ОсновнаяКомплектующая,
	|	NULL КАК СтавкаНДС,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество) КАК КоличествоПоУмолчанию,
	|	0 КАК Количество
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Товары КАК Т) КАК Т
	|		ПО ИСТИНА
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ВариантКомплектацииНоменклатуры ИЗ Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.СтавкаНДС) КАК СтавкаНДС,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.СтавкаНДС
	|			ИНАЧЕ null
	|		КОНЕЦ) КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|			КОГДА Результат.КоличествоПоУмолчанию <> 0 И Результат.ОсновнаяКомплектующая
	|				ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|			ИНАЧЕ null
	|		КОНЕЦ) + 0.5 КАК Число(10,0)) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВЫБОР КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		ВЫБОР КОГДА
	|			ВЫБОР КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			ИНАЧЕ
	|				ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|			И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям)) ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|		ИНАЧЕ
	|			ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                                 КАК Сумма,
	|	Таблица.СуммаНДС                              КАК СуммаНДС,
	//|	Таблица.ДатаОтгрузки                          КАК ДатаОтгрузки,
	|	Таблица.СуммаСкидки                           КАК СуммаСкидки,
	|	Таблица.СуммаБезСкидки                        КАК СуммаБезСкидки,
	|	ВременнаяТаблицаНаборыДополнительно.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора								КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора								КАК ХарактеристикаНабора,
	|	Товары.ЭтоНабор КАК ЭтоНабор,
	|	Товары.ЭтоКомплектующие КАК ЭтоКомплектующие,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения				КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок                                КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма                                             КАК Сумма,
	|	Товары.СтавкаНДС                                         КАК СтавкаНДС,
	|	Товары.СуммаНДС                                          КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО                                             КАК ВидЦеныИсполнителя,
	//|	Товары.ДатаОтгрузки                                      КАК ДатаОтгрузки,
	|	ЕСТЬNULL(Товары.Характеристика.НаименованиеПолное, """") КАК Характеристика,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ                                                    КАК Упаковка,
	|
	|	Товары.СуммаСкидки                                       КАК СуммаСкидки,
	|	Товары.СуммаБезСкидки                                    КАК СуммаБезСкидки,
	|	Товары.Содержание                                        КАК Содержание,
	|	Товары.ЭтоВозвратнаяТара                                 КАК ЭтоВозвратнаяТара	
	|
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Таблица.Ссылка,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Цена,
	|		Таблица.Сумма,
	|		Таблица.СтавкаНДС,
	|		Таблица.СуммаНДС,
	//|		Таблица.ДатаОтгрузки,
	|		Таблица.Характеристика,
	|		Таблица.Упаковка,
	|		Таблица.СуммаСкидки,
	|		Таблица.СуммаБезСкидки,
	//|		Таблица.Содержание,
	|		"""" Содержание,
	
	|		Таблица.ЭтоВозвратнаяТара
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|			 И ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка
	|
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                              ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВЫБОР
	|			КОГДА &ОтображатьСкидки ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|					(ВременнаяТаблицаНаборы.СуммаБезСкидки) / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|			ИНАЧЕ
	|				ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0 ТОГДА
	|					(ВременнаяТаблицаНаборы.Сумма) / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|		КОНЕЦ КАК Цена,
	|		ВременнаяТаблицаНаборы.Сумма КАК Сумма,
	|		ВременнаяТаблицаНаборы.СтавкаНДС,
	|		ВременнаяТаблицаНаборы.СуммаНДС,
	//|		ВременнаяТаблицаНаборы.ДатаОтгрузки,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		ВременнаяТаблицаНаборы.СуммаСкидки,
	|		ВременнаяТаблицаНаборы.СуммаБезСкидки,
	|		"""",
	|		Ложь
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                                        ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ЭтоНабор УБЫВ
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка",
			"Товары.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Товары.Упаковка",
			"Товары.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции



#Область КП_

Процедура ВывестиОбласти(ТабличныйДокумент, Области)
	
	Для Каждого Область Из Области Цикл ТабличныйДокумент.Вывести(Область) КонецЦикла;
	
КонецПроцедуры
Процедура ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластиНиз) Экспорт
	
	// Проверим войдет ли с подвалом и колонтитулом если вывести эту строку
	
	ОбластиПроверки = Новый Массив;
	ОбластиПроверки.Добавить(ОбластьПустаяСтрока);
	КонвертацияТипов.ДобавитьМассивВКонецМассива(ОбластиПроверки, ОбластиНиз);
	
	Пока Истина Цикл
		
		Если ТабличныйДокумент.ПроверитьВывод(ОбластиПроверки) Тогда 
			ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
			
		Иначе 
			ВывестиОбласти(ТабличныйДокумент, ОбластиНиз);
			Прервать;  КонецЕсли;  КонецЦикла;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуКП(МассивОбъектов, ОбъектыПечати, КомплектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары       = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, Товары);
		ЗаполнитьТабличныйДокументКП(ТабличныйДокумент, ДанныеОбъекта);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
Процедура ЗаполнитьТабличныйДокументКП(ТабличныйДокумент, ДанныеДляПечати)
	
	// Иницилизация переменных
	
	Таблица = ДанныеДляПечати.РезультатПоТабличнойЧасти;
	ПараметрПечати = ДанныеДляПечати.РезультатПоШапке;
	
	Макет 			= ПолучитьМакет("Коммерческое");
	СтруктураШапки  = ДанныеДляПечати.Шапка;
	Таблица 		= ДанныеДляПечати.Товары;
	ЕстьСкидка 		= Булево(Таблица.Итог("Скидка"));
	//ПечатьСНаличием	= СтруктураШапки.Свойство("ПечатьСНаличием") И СтруктураШапки.ПечатьСНаличием И Макет.Области.Найти("СтрокаНаличие") <> Неопределено;
	ПечатьСНаличием = Ложь;
	СоСкидками = Ложь;
	ИмяДопИмениОбластей = "";
	ЦенаОтСуммы = Ложь;
	
	КонвертацияТипов.ВыполнитьВыражениеВКаждойСтрокеТаблицы(Таблица, "
	|Строка.НомерСтроки = Инд + 1; 
	|Если Не Строка.Всего Тогда Строка.Всего = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС,""," + Строка.СуммаНДС") + " КонецЕсли;
	|Строка.СуммаБезНДС = Строка.Сумма" + ?(СтруктураШапки.СуммаВключаетНДС," - Строка.СуммаНДС", ""));
	
	СтруктураПодвала = Новый Структура("ТекстИтогоБезНДС, ВсегоНаименований, СуммаПрописью, Сумма, СуммаНДС, Скидка, Итого, СуммаБезНДС",
						"Итого без НДС" + ?(ЕстьСкидка, " (с учетом скидки)", ""),
						"Всего наименований " + Таблица.Количество() + ", на сумму " + Таблица.Итог("Всего") + " " + СтруктураШапки.Валюта,
						РаботаСКурсамиВалют.СформироватьСуммуПрописью(Таблица.Итог("Всего"), СтруктураШапки.Валюта, Истина),
						Таблица.Итог("Сумма") , Таблица.Итог("СуммаНДС"), Таблица.Итог("Скидка"), Таблица.Итог("Всего"), Таблица.Итог("СуммаБезНДС"));
						
	// Подготовим переменные
	
	//ТабличныйДокумент.ОриентацияСтраницы = ПараметрПечати.ОриентацияСтраницы;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ДобСуффикс = ?(ЕстьСкидка И СоСкидками И НЕ СтруктураШапки.НеВыводьКолонкуСкидкаВПечатнойФорме, "Скидка", "");
	
	ОбластьВКолонтитул 	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	ОбластьВКолонтитул2	= Макет.ПолучитьОбласть("ВерхнийКолонтитул2");
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда ОбластьУсловия = Макет.ПолучитьОбласть("Условия") 
	КонецЕсли;
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" 	+ ?(ПечатьСНаличием, "Наличие", "") + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
	ОбластьСтрока 		= Макет.ПолучитьОбласть("Строка" 		+ ?(ПечатьСНаличием, "Наличие", "") + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал		= Макет.ПолучитьОбласть("ПодвалТаблицы" + ?(ПараметрПечати.СкидкаВТаблице, ДобСуффикс, ""));
		
	ОбластьПодпись		= Макет.ПолучитьОбласть("Подпись" + ИмяДопИмениОбластей);
	
	Если СокрЛП(ИмяДопИмениОбластей)<>"" Тогда
		ОбластьПодпись.Параметры.ФИОРуководителя = ФормированиеПечатныхФорм.ФамилияИнициалыФизЛица(ДанныеДляПечати.Шапка.ФизическоеЛицо);
	КонецЕсли;
		
	ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураШапки);
	ОбластьШапка.Параметры.Заполнить(СтруктураШапки); 
	ОбластьПодвал.Параметры.Заполнить(СтруктураПодвала);
	
	// Пдоготви набор областей
	
	ОбластиПоследнейСтраницы = Новый Массив; 
	ОбластиПоследнейСтраницы.Добавить(ОбластьПодвал); 
	ОбластиПоследнейСтраницы.Добавить(ОбластьПодпись);
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда ОбластьМеждуПодписьюИУсловиями = Новый Массив; ОбластьМеждуПодписьюИУсловиями.Добавить(ОбластьУсловия) 
	КонецЕсли;
	
	// Рассчитаем и заполним параметры
	
	КолСтрок = Таблица.Количество();
	
	// Расчитаем текстовые переменные
	
	//СтруктураОтветвенного = ПолучитьИнфуПоОтветвенному(СтруктураШапки.Ответственный);
	//СтруктураШапки.Вставить("КонтактОтветвенного", "тел.: " + ?(СтруктураОтветвенного.Свойство("Телефон"), СтруктураОтветвенного.Телефон, "8 (812) 620-80-07") + 
	//	?(СтруктураОтветвенного.Свойство("Почта"), "; e-mail: " + СтруктураОтветвенного.Почта, ""));
	//	
	//ТекстДляКолонтитула = ПолучитьТекстовыеДанныеПоЮрЛицу(?(СтруктураШапки.Свойство("Грузоотправитель") И ЗначениеЗаполнено(СтруктураШапки.Грузоотправитель), СтруктураШапки.Грузоотправитель, СтруктураШапки.Организация), ПараметрПечати.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт);
	
	
	
	// Выведем колонтитул
	
	ДатаСтрокой = Формат(СтруктураШапки.Дата, "ДЛФ=DD");
	ОбластьВКолонтитул.Параметры.Заполнить(СтруктураШапки);
	ОбластьВКолонтитул.Параметры.Дата = ДатаСтрокой;
	
	ОбластьВКолонтитул2.Параметры.Заполнить(СтруктураШапки);
	ОбластьВКолонтитул2.Параметры.Дата = ДатаСтрокой;
	
	ОбластьПодпись.Параметры.Заполнить(СтруктураШапки);
	
	// Считаем информацию об ответвенном
		
	ТабличныйДокумент.Вывести(ОбластьВКолонтитул);
	
	// Выведем шапку
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ЕстьНомКартинки = Таблица.Колонки.Найти("НоменклатураКартинки") <> Неопределено;
	
	// Выведем строки
	
	текСтраница = 1; ПозНаЛисте = 0;
	счетчикСтрок=0;
	Для Каждого Строка Из Таблица Цикл ПозНаЛисте = ПозНаЛисте + 1;
		
		СчетчикСтрок=СчетчикСтрок+1;
		
		ОбластьСтрока.Параметры.Заполнить(Строка);
		Если ЦенаОтСуммы Тогда
			 ОбластьСтрока.Параметры.Цена = Окр(Строка.Сумма/Строка.Количество, 2); 
		 КонецЕсли;
		 
		// Картинка
		
		//СсылкаКартинки = Картинки.ПолучитьСсылкуОсновногоИзображения(?(ЕстьНомКартинки И Не Строка.НоменклатураКартинки.Пустая(), Строка.НоменклатураКартинки, Строка.Номенклатура));
		Если ЗначениеЗаполнено(Строка.Номенклатура.ФайлКартинки) Тогда
		//Если СсылкаКартинки <> Неопределено Тогда
			//+Андриянов 09.07.2017 добавляем ещё один вид картинки
			//Карт = Картинки.ПолучитьВариантКартинки(СсылкаКартинки, Ложь);
			//Карт = ?(СсылкаКартинки.КопияКартинки.Пустая(), ?(СсылкаКартинки.Аватар.Получить()=Неопределено, СсылкаКартинки.Картинка.Получить(), СсылкаКартинки.Аватар.Получить()), ?(СсылкаКартинки.КопияКартинки.Аватар.Получить()=Неопределено,СсылкаКартинки.КопияКартинки.Картинка.Получить(),СсылкаКартинки.КопияКартинки.Аватар.Получить()));
			//Карт = ?(СсылкаКартинки.КопияКартинки.Пустая(), ?(СсылкаКартинки.Аватар.Получить()=Неопределено, СсылкаКартинки.Картинка.Получить(), СсылкаКартинки.Аватар.Получить()), СсылкаКартинки.КопияКартинки.Аватар.Получить());
			//-Андриянов
			//Карт = ?(СсылкаКартинки.КопияКартинки.Пустая(), СсылкаКартинки.Аватар.Получить(), СсылкаКартинки.КопияКартинки.Аватар.Получить());
			
			Попытка
				КартинкаНоменклатуры = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Строка.Номенклатура.ФайлКартинки);
			Исключение
				КартинкаНоменклатуры = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаНоменклатуры) Тогда
				
				Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
					ОбластьСтрока.Область("R1C2").Картинка = КартинкаНоменклатуры;
				ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
					ОбластьСтрока.Область("R1C2").Картинка = Новый Картинка(КартинкаНоменклатуры);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Вывод
		
		ТабличныйДокумент.Вывести(ОбластьСтрока); 
		Если 	(текСтраница = 1 И Строка.НомерСтроки = ПараметрПечати.НаПервомНеБолее) Или 
				(Строка.НомерСтроки > 1 И Строка.НомерСтроки = ПараметрПечати.НаВторомНеБолее * (текСтраница - 1) + ПараметрПечати.НаПервомНеБолее) Тогда 
			текСтраница = текСтраница + 1;
			ПозНаЛисте 	= 0;
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьВКолонтитул2); 
			Если Строка.НомерСтроки <> КолСтрок Тогда
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		
	Если ПозНаЛисте > ПараметрПечати.ВКонцеНеБолее Или (ПараметрПечати._1ЛистТолькоКогдаДо < КолСтрок И КолСтрок <= ПараметрПечати.НаПервомНеБолее) Тогда ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
	КонецЕсли;
		
	// Выведем подвал
	
	ВывестиОбласти(ТабличныйДокумент, ОбластиПоследнейСтраницы);
	Если ПараметрПечати.СтрокаУсловиеПоставки Тогда
		ДобитьПустымиСтрокамиДоКонцаСтраницы(ТабличныйДокумент, ОбластьПустаяСтрока, ОбластьМеждуПодписьюИУсловиями); 
	КонецЕсли;
	
	// Нижний колонтитул
	
	//ТабличныйДокумент.НижнийКолонтитул.ТекстСлева = "Исполнитель: " + ТекстДляКолонтитула;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] Из [&СтраницВсего]";
	ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Arial", 8);
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.КП.Форма.ФормаСписка";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.КП))
		И ПравоДоступа("Изменение", Метаданные.Документы.КП)
		И ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА (КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует))
	|					И КоммерческоеПредложениеКлиенту.СрокДействия < &ДатаАктуальности
	|					И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И КоммерческоеПредложениеКлиенту.Проведен
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамПросроченные
	|ИЗ
	|	Документ.КП КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|	И КоммерческоеПредложениеКлиенту.Менеджер = &Пользователь
	|	И (НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// КоммерческиеПредложенияКлиентам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "КоммерческиеПредложенияКлиентам";
	ДелоРодитель.Представление  = НСтр("ru = 'Коммерческие предложения клиентам'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	
	// КоммерческиеПредложенияКлиентамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеВРаботе");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "КоммерческиеПредложенияКлиентамВсегоВРаботе";
	Дело.ЕстьДела       = Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Всего предложений в работе'");
	Дело.Количество     = Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "КоммерческиеПредложенияКлиентам";
	
	// КоммерческиеПредложенияКлиентамПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Неопределено);
	ПараметрыОтбора.Вставить("Актуальность", "Просроченные");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "КоммерческиеПредложенияКлиентамПросроченные";
	Дело.ЕстьДела       = Результат.КоммерческиеПредложенияКлиентамПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные предложения'");
	Дело.Количество     = Результат.КоммерческиеПредложенияКлиентамПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "КоммерческиеПредложенияКлиентам";
	
	Если Результат.КоммерческиеПредложенияКлиентамВсегоВРаботе > 0
		Или Результат.КоммерческиеПредложенияКлиентамПросроченные > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

// silber {

Функция СтатусыКоторыеРезервируют() Экспорт
	
	// Возвращает массив статусов КП которые делают движения по таблице резервов
	
	Возврат КонвертацияТипов.ПолучитьМассивЗначенийперечислений("СтатусыКП", 
				"Вработе, Актуальное, Согласовано")
КонецФункции

Функция ПолучитьТаблицуТоваровПоДокументам(Ссылка, Параметры = Неопределено) Экспорт
	
	// Возвращает табличную часть (подтвержденных товаров) для разных видов документов 
	// - заказ поставщику
	// - заказ клиента
	// - заказ на перемещение
	// и в разрезе складов
	
	// Параметры, структура может быть:
	//		ВидДокумента фильтр по виду документа
	//		Склад фильтр по складу
	//		Поставщик фильтр по поставщику
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	опрВидаДокумента = "
	|ВЫБОР 
	|	КОГДА ЭтоПерекуп ТОГДА 						""ЗаказПоставщику""
	|	КОГДА 	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) И 
	|			Склад <> Тов.Ссылка.Склад ТОГДА 	""ЗаказНаПеремещение""
	|	ИНАЧЕ 										""ЗаказКлиента""
	|КОНЕЦ
	|";
	
	Запрос = Новый Запрос(СтрШаблон("
	|ВЫБРАТЬ 	
	|	ЕСТЬNULL(ВЫБОР КОГДА Вар.Номенклатура = &ПустаяНоменклатура ТОГДА Тов.Номенклатура ИНАЧЕ Вар.Номенклатура КОНЕЦ, Тов.Номенклатура) Номенклатура, 
	|	ЕСТЬNULL(Вар.Количество, Тов.КоличествоУпаковок)	Количество,
	|	ЕСТЬNULL(Вар.Количество, Тов.КоличествоУпаковок)	КоличествоУпаковок,
	|	ЕСТЬNULL(Вар.Сумма, Тов.Сумма) 				Сумма,
	|	ЕСТЬNULL(Вар.Цена, Тов.Цена) 				Цена,
	|	Тов.Упаковка 								Упаковка,
	|	ВидЦены,
	|	ВЫБОР КОГДА Тов.Склад = &ПустойСклад ТОГДА Тов.Ссылка.Склад ИНАЧЕ Тов.Склад КОНЕЦ Склад,
	|	Поставщик,
	|	Тов.Сумма,
	|	Тов.СтавкаНДС,
	|	Тов.СуммаНДС,
	|	Тов.СуммаСНДС,
	|	Тов.СуммаРучнойСкидки,
	|	Тов.СуммаАвтоматическойСкидки,
	|	%1 ВидДокумента
	|ИЗ 
	|	Документ.КП.Товары Тов
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.КП.ВариантыЗакупки Вар
	|ПО 
	|	Вар.КлючСтроки <> &ПустойГуид И
	|	Вар.Ссылка = &Ссылка И
	|	Тов.КлючСтроки = Вар.КлючСтроки
	|
	|ГДЕ
	|	Тов.Ссылка = &Ссылка И
	|	Активность
	|	%2 %3 %4
	|", 
	опрВидаДокумента,
	?(Параметры.Свойство("ВидДокумента"), СтрШаблон(" И %1 = ""%2""", опрВидаДокумента, Параметры.ВидДокумента), ""),
	?(Параметры.Свойство("Склад"), 		" И ВЫБОР КОГДА Тов.Склад = &ПустойСклад ТОГДА Тов.Ссылка.Склад ИНАЧЕ Тов.Склад КОНЕЦ = &Склад", ""),
	?(Параметры.Свойство("Поставщик"), 	" И Поставщик 	= &Поставщик", "")));
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура",Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСклад",Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("Склад", 		АТ_ОбщегоНазначения.Параметр(Параметры, "Склад"));
	Запрос.УстановитьПараметр("Поставщик", 	АТ_ОбщегоНазначения.Параметр(Параметры, "Поставщик"));
	Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
	Запрос.УстановитьПараметр("ПустойГуид", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Для Каждого Элемент Из Параметры Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицыДляПроведения(Ссылка) Экспорт
	
	// Возвращает структуру таблиц для проведения
	// где ключ имя регистра в движениях
	// значение таблица значений которая будут записано во время проведения
	
	Запрос = Новый Запрос("
	
	// оборты по КП
	
	|ВЫБРАТЬ
	|	&Ссылка				Регистратор,
	|	Ссылка.Дата			Период,
	|	Ссылка.Статус 		Статус,
	|	Ссылка.Партнер 		Партнер,
	|	Ссылка.Менеджер 	Менеджер,
	|						Номенклатура,
	|	СУММА(Количество) 	Количество,
	|	СУММА(Сумма) 		Сумма
	|ИЗ
	|	Документ.КП.Товары
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка, Номенклатура;
	
	// Свободные остатки
	
	|ВЫБРАТЬ
	|	&Ссылка				Регистратор,
	|	Ссылка.Дата			Период,
	|						Номенклатура,
	|						Характеристика,
	|						Склад,
	|	СУММА(Количество) 	ВРезервеСоСклада
	|ИЗ
	|	Документ.КП.Товары
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	Ссылка.Статус В(&СтатусыРезерва) И
	|	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) И
	|	Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка, Номенклатура, Характеристика, Склад;
	
	// Резервы по товарам
	
	|ВЫБРАТЬ
	|	&Ссылка				Регистратор,
	|	Ссылка				ДокументОтгрузки,
	|	Ссылка.Дата			Период,
	|	Ссылка.Партнер		Получатель,
	|						Номенклатура,
	|						Характеристика,
	|						Склад,
	|	СУММА(Количество) 	ВРезерве
	|ИЗ
	|	Документ.КП.Товары
	|ГДЕ
	|	Ссылка = &Ссылка И
	|	Ссылка.Статус В(&СтатусыРезерва) И
	|	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) И
	|	Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка, Номенклатура, Характеристика, Склад
	|");
	
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.УстановитьПараметр("СтатусыРезерва", СтатусыКоторыеРезервируют());
	
	Пакет = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("ТоварыКП, СвободныеОстатки, ТоварыКОтгрузке", 
						Пакет[0].Выгрузить(),
						Пакет[1].Выгрузить(),
						Пакет[2].Выгрузить());
КонецФункции

Функция НайтиЗаказКП(СсылкаКП)
	
	// Возвращает связанный заказ с КП
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 СвязанныйДокумент ИЗ РегистрСведений.АТ_СвязьОбъектовКП ГДЕ КП = &Ссылка И СвязанныйДокумент ССЫЛКА Документ.ЗаказКлиента");
	Запрос.УстановитьПараметр("Ссылка", СсылкаКП);
	
	Выполнение = Запрос.Выполнить();
	Если Выполнение.Пустой() Тогда
		Возврат Документы.ЗаказКлиента.ПустаяСсылка();
	Иначе
		Выборка = Выполнение.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СвязанныйДокумент;
	КонецЕсли;
	
КонецФункции
Процедура ВвестиСчетФактуру(РеализацияСсылка)
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("ДокументОснование", РеализацияСсылка);
	ДанныеСчетаФактуры.Вставить("Организация",       РеализацияСсылка.Организация);
	
	СчФаткраОб = Документы.СчетФактураВыданный.СоздатьДокумент();
	СчФаткраОб.Заполнить(ДанныеСчетаФактуры);
	
	СчФаткраОб.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
Функция СформироватьРеализацию(СсылкаКП, ЗаказСсылка = Неопределено) Экспорт
	
	// Создает реализацию товаров по КП и счет фактуру если это безнал
	//	а также прописывает реализацию в регистре связанных документов
	//
	// Возвращает ссылку на созданную реализацию если удалось создать ее
	// 				или пустую реализацию если не удалось
	// ЗаказСсылка - если прислыать ссылку на заказ тогда не будет искать заказ в связанных документах
	//					если не уазать тода будет искать заказ
	
	РеализацияСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	
	Если ЗаказСсылка = Неопределено Тогда
		ЗаказСсылка = НайтиЗаказКП(СсылкаКП);
	КонецЕсли;
	
	Если Не ЗаказСсылка.Пустая() Тогда
		
		НачатьТранзакцию();
		
		ЗаказСсылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение); // без этой строки реализация не проводилась, так как заказ формировал движения по которым реализация не могла заполнить товары
		
		РеализацияСсылка = АТ_Сервер.ЗаполнитьИПровестиДокОснование(
				Документы.РеализацияТоваровУслуг, 
				Новый Структура("Склад, Основание", СсылкаКП.Склад),
				ЗаказСсылка,,
				Новый Структура("Комментарий, Основание", СсылкаКП.КомментарийРеализации, СтрШаблон("Заказ №%1; КП №%2;", ЗаказСсылка.Номер, АТ_Сервер.СрезатьНулиСлева(СсылкаКП.Номер))),
				"ЗаказКлиента");
				
		Если РеализацияСсылка.Товары.Количество() = 0 Тогда
			ОтменитьТранзакцию();
		Иначе
			
			Если СсылкаКП.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
				ВвестиСчетФактуру(РеализацияСсылка);
			КонецЕсли;
			
			РегСвязи = РегистрыСведений.АТ_СвязьОбъектовКП.СоздатьНаборЗаписей();
			РегСвязи.Отбор.КП.Установить(СсылкаКП);
			РегСвязи.Прочитать();
			
			Найден = Ложь;
			Для каждого Запись Из РегСвязи Цикл
				Если Запись.СвязанныйДокумент = ЗаказСсылка Тогда
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не Найден Тогда
				Запись = РегСвязи.Добавить();
				Запись.КП 					= СсылкаКП;
				Запись.СвязанныйДокумент 	= ЗаказСсылка;
			КонецЕсли;
				
			Запись.ДокументРезультат 	= РеализацияСсылка;
			Запись.Завершено 			= Истина;
			
			РегСвязи.Записать();
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
	КонецЕсли;

	Возврат РеализацияСсылка;
	
КонецФункции

Функция СформироватьКПИзЗаказа(СсылкиЗаказов) Экспорт
	
	// Помечает на удаление заказы и из них формирует новое КП и записывает его
	// Возвращает ссылку на новое КП
	// или пустую ссылку если создать КП не удалось
	//
	// Сформировать можно если заказы не помечены на удаление и реквизиты основание заказа пустые
	//	если заказов больше 1 тогда у них жолжны быть одинаковые соглашения и контрагенты
	
	Ошибка 		= Ложь;
	СсылкаКП 	= Документы.КП.ПустаяСсылка();
	Контра		= Справочники.Контрагенты.ПустаяСсылка();
	Согл		= Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	
	#Область Проверка
	
	Для Каждого СсылкаЗаказ Из СсылкиЗаказов Цикл
		
		Если СсылкаЗаказ.ПометкаУдаления Тогда
			Ошибка = Истина;
			Сообщить(СтрШаблон("Заказ %1 помечен на удаление", СсылкаЗаказ));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаЗаказ.ДокументОснование) Тогда
			Ошибка = Истина;
			Сообщить(СтрШаблон("Заказ %1 был создан на основании другого документа %2", СсылкаЗаказ, СсылкаЗаказ.ДокументОснование));
		КонецЕсли;
		
		Если Не Контра.Пустая() И СсылкаЗаказ.Контрагент <> Контра Тогда
			Ошибка = Истина;
			Сообщить(СтрШаблон("Заказ %1 отличается контрагент %2 != %3", СсылкаЗаказ, Контра, СсылкаЗаказ.Контрагент));
		КонецЕсли;
		
		Если Не Согл.Пустая() И СсылкаЗаказ.Соглашение <> Согл Тогда
			Ошибка = Истина;
			Сообщить(СтрШаблон("Заказ %1 отличается соглашение %2 != %3", СсылкаЗаказ, Согл, СсылкаЗаказ.Соглашение));
		КонецЕсли;
		
		Контра 	= СсылкаЗаказ.Контрагент;
		Согл 	= СсылкаЗаказ.Соглашение;
		
	КонецЦикла;
	
	#КонецОбласти
	
	Если Не Ошибка Тогда
		
		ДокКП = Документы.КП.СоздатьДокумент();
		ДокКП.Заполнить(СсылкиЗаказов);
		
		// ЗаполнитьСкладШушарыЕслиНужно(ДокКП); уже не нужно
		
		НачатьТранзакцию();
		
			Для Каждого СсылкаЗаказ Из СсылкиЗаказов Цикл
				ЗакДок = СсылкаЗаказ.ПолучитьОбъект();
				ЗакДок.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			
			ДокКП.Записать(РежимЗаписиДокумента.Проведение);
			СсылкаКП = ДокКП.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат СсылкаКП;
	
КонецФункции
Процедура ЗаполнитьСкладШушарыЕслиНужно(ДокКП)
	
	// Это очень умная хитрая процедура, даже не вникайте в нее
	
	СкладСпБ 		= Справочники.Склады.НайтиПоНаименованию("Санкт-Петербург");
	ЗонаПригород 	= Справочники.ЗоныДоставки.НайтиПоНаименованию("Пригород");
	ЗонаНовгород 	= Справочники.ЗоныДоставки.НайтиПоНаименованию("Великий Новгород");
	
	Если 	ДокКП.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз И 
			ДокКП.СпособДоставки <> Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу И
			ДокКП.Склад = СкладСпБ И
			ДокКП.ЗонаДоставки <> ЗонаПригород Тогда
		
		Склады = КонвертацияТипов.ПолучитьМассивУникальныхЗначений(ДокКП.Товары, "Склад");
		Если Склады.Количество() = 1 И Склады[0] = СкладСпБ Тогда
			ДокКП.Склад = Справочники.Склады.НайтиПоНаименованию("Шушары");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКПИзЗаказаПоОснованию(СсылкаЗаказ) Экспорт
	
	// Возвращает КП у которого в заказе основании есть заказ
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Документ.КП.Товары ГДЕ ЗаказОснование = &Заказ");
	Запрос.УстановитьПараметр("Заказ", СсылкаЗаказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.КП.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПартнераИЗДокументРезультат(ДокРезультат) Экспорт

	Партнер = Справочники.Партнеры.ПустаяСсылка();
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 КП.Партнер Партнер ИЗ РегистрСведений.АТ_СвязьОбъектовКП ГДЕ ДокументРезультат = &Док");
	Запрос.УстановитьПараметр("Док", ДокРезультат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Партнер = Выборка.Партнер;
		
	КонецЕсли;
	
	Возврат Партнер;
		
КонецФункции

//  silber