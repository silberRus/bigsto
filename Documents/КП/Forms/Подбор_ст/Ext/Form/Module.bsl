
&НаСервере
Процедура ОбновитьПараметрыСпискаТоваров()

	Если ВидыЦен.Пустая() Тогда 
		ВидыЦен = Соглашение.ВидЦен;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ТолькоВНаличии", 	ТолькоВНаличии);
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "БизнесРегион",		БизнесРегион);
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Соглашение", 		Соглашение);
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "ВидыЦен", 			ВидыЦен);
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "Валюта", 			Валюта);
	ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТоваров, "СкидкаПоСоглашению",СТ_ОбщегоНазначения.ПолучитьПроцентСкидкиПоСоглашению(Соглашение));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//МодульИнформации.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Валюта, Соглашение, ВидыЦен");
	
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 		ТекущаяДата());
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ВидыЦенРозница",	АТ_ОбщегоНазначения.ПолучитьЭлементНастройки("ОбщиеНастройки", "РозничныйВидЦен"));
	
	Если Не Соглашение.Партнер.Пустая() Тогда
		БизнесРегион = Соглашение.Партнер.БизнесРегион;
	КонецЕсли;
	
	Если Не Параметры.Склад.Пустая() Тогда
		ОбновитьПорядокСкладов(Параметры.Склад);
	КонецЕсли;
	
	ОбновитьЗаголовок();
	ОбновитьПараметрыСпискаТоваров();
	ОбновитьТекстЗапросаПоКроссам();
	ОбновитьТекстЗапросаПоСкладам();
	
КонецПроцедуры
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьПараметрыСпискаТоваров();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененнииПараметра(Элемент)
	
	ОбновитьЗаголовок();
	ОбновитьПараметрыСпискаТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрыватьПриВыборе = Ложь;
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
	//ЗакрепитьСправа после открытия формы;
    ПодключитьОбработчикОжидания("ЗакрепитьСправа",0.1,Истина);
	
КонецПроцедуры
&НаКлиенте
Процедура ЗакрепитьСправа()
	// Мопед не мой
    Если ЭтаФорма.ВводДоступен() Тогда
        WSHShell = Новый COMОбъект("WScript.Shell");
        WSHShell.SendKeys("%");
        WSHShell.SendKeys("{DOWN 5}");
        WSHShell.SendKeys("{RIGHT}");
        WSHShell.SendKeys("{UP 4}");
        WSHShell.SendKeys("{ENTER}");
        ОтключитьОбработчикОжидания("ЗакрепитьСправа");
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СписокТоваров.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОповеститьОВыборе(Новый Структура("Номенклатура, Склад, Количество, КоличествоУпаковок, Цена, ЦенаСоСкидкой, СкидкаПоСоглашению", 
				ТекДанные.Номенклатура, ТекДанные.Склад, 1, 1, ТекДанные.Цена, ТекДанные.ЦенаСоСкидкой, ТекДанные.СкидкаПоСоглашению));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьТекстВставку(Текст, ТекстЗамены, стрНачалоЗамены, стрКонецЗамены)
	
	// вставляет текст вместо начала и окончания блока
	
	НачЗамены = СтрНайти(Текст, стрНачалоЗамены);
	КонЗамены = СтрНайти(Текст, стрКонецЗамены);
	
	Текст = СтрШаблон("%1
	|%2
	|%3
	|%4
	|%5
	|", 
	Лев(Текст, НачЗамены - 1),
	стрНачалоЗамены,
	ТекстЗамены,
	стрКонецЗамены,
	Сред(Текст, КонЗамены + СтрДлина(стрКонецЗамены) + 1));
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьТекстЗапросаПоСкладам()
	
	// Подменяет текст запроса текстом ниже (пример)
	// для того чтобы сортировать склады в динамическом запросе
	// по оперативным данным из списка
	
	//// Начало замены
	//ВЫБРАТЬ &Склад1, 1	ОБЪЕДИНИТЬ ВСЕ 
	//ВЫБРАТЬ &Склад2, 2 	ОБЪЕДИНИТЬ ВСЕ 
	//ВЫБРАТЬ &Склад3, 3 
	//// Конец замены

	стр = Новый Массив;
	Ном = 0;
	Для Каждого Элемент Из Склады Цикл Ном = Ном + 1;
		стр.Добавить(СтрШаблон("ВЫБРАТЬ &Склад%1, %1", Формат(Ном, "ЧГ=")));
	КонецЦикла;
	
	ЗаменитьТекстВставку(СписокТоваров.ТекстЗапроса, ?(Ном, " ОБЪЕДИНИТЬ ВСЕ ", "") + СтрСоединить(стр, " ОБЪЕДИНИТЬ ВСЕ "), "// Начало замены", "// Конец замены");
	
	Ном = 0;
	Для Каждого Элемент Из Склады Цикл Ном = Ном + 1;
		СписокТоваров.Параметры.УстановитьЗначениеПараметра(СтрШаблон("Склад%1", Формат(Ном, "ЧГ=")), Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьТекстЗапросаПоКроссам()
	
	// Подменяет текст запроса текстом ниже соединяя регистр аналогов для поиска
	// либо отключающее моединения
	// сделано для ускарения, иначе без фильтра динамический список может работать очень долго

	Если ПустаяСтрока(СтрокаПоискаАртикула) Тогда 
		
		ЗаменитьТекстВставку(СписокТоваров.ТекстЗапроса, "", "// Начало замены кроссы соединение", "// Конец замены кроссы соединение");
		ЗаменитьТекстВставку(СписокТоваров.ТекстЗапроса, "", "// Начало замены кроссы условие", 	"// Конец замены кроссы условие");
		
	Иначе
		
		ЗаменитьТекстВставку(СписокТоваров.ТекстЗапроса, "
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналогиТоваров.СрезПоследних( ,АртикулДляПоиска ПОДОБНО &СтрокаПоискаАртикула) Кросс
		|ПО	НЕ Кросс.Удалено И
		|	Спр.Ссылка = Кросс.Номенклатура
		|", "// Начало замены кроссы соединение", "// Конец замены кроссы соединение");
		
		ЗаменитьТекстВставку(СписокТоваров.ТекстЗапроса, "
		|И (ПОДСТРОКА(&СтрокаПоискаАртикула, 1, 1) ПОДОБНО &СтрокаПоискаАртикула ИЛИ НЕ Кросс.Номенклатура ЕСТЬ NULL ИЛИ Спр.Артикул ПОДОБНО &СтрокаПоискаАртикула ИЛИ Наименование ПОДОБНО &СтрокаПоискаАртикула)
		|", "// Начало замены кроссы условие", 	"// Конец замены кроссы условие");
		
		СписокТоваров.Параметры.УстановитьЗначениеПараметра("СтрокаПоискаАртикула", ?(ТочноеСоответствие, СтрокаПоискаАртикула, СтрШаблон("%1%2%1", "%", СтрокаПоискаАртикула)));
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьЗаголовок()
	
	Заголовок = ?(Соглашение.Пустая(), "подбор без соглашения?",
					"Подбор (" + Соглашение.Партнер + ")");	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокСкладов(ВыбСклад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Склад ИЗ Справочник.Склады.АТ_Порядок ГДЕ Ссылка = &Ссылка И Склад <> &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ВыбСклад);
	Склады.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
	Склады.Вставить(0, ВыбСклад);
	
	ОбновитьТекстЗапросаПоСкладам();
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбранСкладПорядка(ВыбСклад, ДопПараметры) Экспорт
	
	Если ВыбСклад <> Неопределено Тогда
		
		ОбновитьПорядокСкладов(ВыбСклад);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ГиперсылкаВыбораСкладаПорядкаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора",, ЭтаФорма,,,,Новый ОписаниеОповещения("ВыбранСкладПорядка", ЭтаФорма));
	
КонецПроцедуры
&НаКлиенте
Процедура СкладыПриИзменении(Элемент)
	
	ОбновитьТекстЗапросаПоСкладам();
	
КонецПроцедуры

#Область Laximo

&НаСервере
Процедура ЗапуститьСборДанныхВlaximo()
	
	АдресИнфLaximo = АТ_Поток.ЗапуститьПоток(СтрШаблон("Результат = АТ_Сервер.Laximo_ПолучитьМассивАртикулов(""%1"")", СтрокаПоискаАртикула), УникальныйИдентификатор);
	
КонецПроцедуры
&НаСервере
Функция ИнформацияИзLaximoПолучена()
	
	Структура = ПолучитьИзВременногоХранилища(АдресИнфLaximo);
	Если Структура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Структура.Состояние = АТ_Поток.СостояниеВыполнено() Тогда
		//Сообщить("Информация получена: " + СтрСоединить(Структура.Результат));
	ИначеЕсли Структура.Состояние = АТ_Поток.СостояниеОшибка() Тогда
		//Сообщить(СтрШаблон("Ошибка получения данных в интернете %1", Структура.стрОшибки)); 
	КонецЕсли;
		
	Элементы.ГруппаПоиска.Видимость 		= Истина;
	Элементы.ГруппаОжиданиеLaximo.Видимость = Ложь;
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформациюИзLaximoПостояно()
	
	Если ИнформацияИзLaximoПолучена() Тогда
		ОтключитьОбработчикОжидания("ОбновитьИнформациюИзLaximoПостояно");
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьИнформациюИзLaximoОднократно()
	
	Если ИнформацияИзLaximoПолучена() Тогда
		Элементы.ГруппаПоиска.Видимость 		= Ложь;
		Элементы.ГруппаОжиданиеLaximo.Видимость = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнформациюИзLaximoПостояно", 1, Ложь);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НачатьПоискВlaximo()
	
	ЗапуститьСборДанныхВlaximo();
	ПодключитьОбработчикОжидания("ОбновитьИнформациюИзLaximoОднократно", 0.1, Истина);
				
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискКроссаПриИзменении(Элемент)
	
	Если ИскатьВlaximo Тогда
		НачатьПоискВlaximo();
	КонецЕсли;
	
	ОбновитьТекстЗапросаПоКроссам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьНажатие(Элемент)
	Элементы.ГруппаФильтры.Видимость 		= Истина;
	Элементы.ДекорацияСвернуть.Видимость 	= Истина;
	Элементы.ДекорацияРазвернуть.Видимость 	= Ложь;
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияСвернутьНажатие(Элемент)
	Элементы.ГруппаФильтры.Видимость 		= Ложь;
	Элементы.ДекорацияСвернуть.Видимость 	= Ложь;
	Элементы.ДекорацияРазвернуть.Видимость 	= Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьСуперПодбор" И Источник = ВладелецФормы Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область Информация_о_товаре

&НаКлиенте
Процедура СписокТоваровПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокТоваров.ТекущиеДанные <> Неопределено Тогда
		//ОбработатьОтображениеИнформацииОТоваре(Элементы.СписокТоваров.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбработатьОтображениеИнформацииОТоваре(выбТовар = Неопределено) Экспорт 
	
	МодульИнформации.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма,
			Новый Структура("ТекТовар, ТоварыЭлементы, ТоварыФорма", 
				выбТовар, "СписокТоваров", "СписокТоваров"));
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка,,,"СписокТоваров");
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "СписокТоваров",, "СписокТоваров");
	
КонецПроцедуры
 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	МодульИнформацииКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры
&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	МодульИнформацииКлиент.НастройкаИнфОТоваре(ЭтаФорма, "СписокТоваров", "СписокТоваров");
	
КонецПроцедуры


#КонецОбласти
