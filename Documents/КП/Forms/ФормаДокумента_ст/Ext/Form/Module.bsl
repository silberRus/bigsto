&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// silber {

&НаКлиенте
Перем ИдТовараДляОбнВариантаЗак; // нужно чтобы прекратить зацикливание событийпри активизации строки

// } silber

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// silber {
	ОбновитьИнформациюПоПартнеру();
	// } silber
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		СтатусДокумента = Объект.Статус;

		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
		КонецЕсли;
				
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	УстановитьДоступностьКомандБуфераОбмена();

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	//ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

	// silber {
	
	// информация о товаре
	МодульИнформации.ДобавитьОперативнуюИнформациюОТоваре(ЭтаФорма);

	ОбновитьСтрокуСостоянияАвторов();
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СвязанныеДокументы, "КП", Объект.Ссылка);
	ОбновитьИтогиПоТоварам();
	ИницилизироватьАдресаКартинок();
	УправлениеВидимостьюДоступностью();
	// } silber
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка();
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

	// silber {
	ОбновитьСтрокуСостоянияАвторов();
	// } silber
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_КоммерческоеПредложениеКлиенту", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// silber {
	СохраниьСтрокиВариантаПоТовару();
	// } silber
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	 // Если документ проводится, рассчитаем скидки
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	
	//	ДополнительныеПараметры = Новый Структура;
	//	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	//	ДополнительныеПараметры.Вставить("ЭтотОбъект", ЭтотОбъект);
	//	
	//	Отказ = Истина;
	//	МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
	//		ЭтаФорма,
	//		"Товары",
	//		"Номенклатура,Характеристика,Количество",
	//		Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	//	Возврат;
	//	
	//КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
			СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки(
				Новый ОписаниеОповещения(
					"ПредложитьПользователюРассчитатьСкидкиЗавершение", 
					ЭтотОбъект,
					ДополнительныеПараметры)
			);
			Возврат;
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(ПодключаемоеОборудованиеУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)), Параметр.КартаЛояльности);
        Возврат;
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
        И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
        Если Объект.Согласован Тогда
            Объект.Согласован = Ложь;
        КонецЕсли;
        ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
    КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        ПараметрыКомплекта = Новый Структура;
        ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
        ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
        ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
        ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// silber {
	СохранитьКП_ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// } silber
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;

	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	// silber {
	ОбновитьИнформациюПоПартнеру();
	// } silber
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился ИЛИ НЕ ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		НалогообложениеИзСоглашения = Ложь;
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
	ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		
		ФормаОплаты =ПолучитьФормуОплатыСервер(Объект.ГрафикОплаты);
		
		Если ЗначениеЗаполнено(ФормаОплаты) Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если Не (ИспользоватьСоглашенияСКлиентами И НалогообложениеИзСоглашения) Тогда
		ЗаполнитьНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	
	Если Не НоваяСтрока = Неопределено Тогда
		НоваяСтрока.Активность = Истина;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	// silber {
	ОбновитьВариантыЗакупкиПоТовару();
	// } silber
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
	// silber {
	
	Если Копирование Или Не ЗначениеЗаполнено(ТекущаяСтрока.КлючСтроки) Тогда
		ТекущаяСтрока.КлючСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	// } silber
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
				Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ТоварыВыборФрагмент();

	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
		ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
		
		Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
	
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ТоварыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
    Возврат ТекущиеДанные;

КонецФункции

&НаКлиенте
Процедура ТоварыАктивностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНабора) Тогда
		ТоварыАктивностьПриИзмененииНаСервере();
	Иначе
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары",           Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов",       ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыАктивностьПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ДляВсехСтрок = Ложь;
	
	ПараметрыВариантаКомплектации = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(ТекущиеДанные.НоменклатураНабора, ТекущиеДанные.ХарактеристикаНабора);
	Если ЗначениеЗаполнено(ПараметрыВариантаКомплектации) Тогда
		
		Если (ПараметрыВариантаКомплектации.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
			ИЛИ ПараметрыВариантаКомплектации.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
			ДляВсехСтрок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	Если ДляВсехСтрок Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НоменклатураНабора", ТекущиеДанные.НоменклатураНабора);
		ПараметрыОтбора.Вставить("ХарактеристикаНабора", ТекущиеДанные.ХарактеристикаНабора);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			СтрокиДляОбработки.Добавить(СтрокаТЧ);
			СтрокаТЧ.Активность = ТекущиеДанные.Активность;
		КонецЦикла;
	Иначе
		СтрокиДляОбработки.Добавить(ТекущиеДанные);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из СтрокиДляОбработки Цикл
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = Неопределено;
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары",           Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов",       ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	ЗаполнитьЦеныПоСоглашению(Команда)

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	//ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	// silber {
	Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Закрыть();
	КонецЕсли;
	// } silber	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиАктивностиВыделенныхСтрок(Команда)

	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.КоммерческоеПредложениеКлиенту.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
	Иначе
		ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ОткрытьИнформациюОСкидкахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	//УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Отменено'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Ценообразование.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	//

	Ценообразование.УстановитьУсловноеОформлениеСтавкиНДС(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//
	
	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();
	
	ПараметрыУстановки.Форма                 = ЭтаФорма;
	ПараметрыУстановки.ЭтоПоступление        = Ложь;
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);
	
	//

	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	// silber {
	
	УстановитьУсловноеОформлениеПоВариантамЗаказа();
	
	// } silber
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	//Если ИспользоватьСоглашенияСКлиентами Тогда	silber закоментарил щобы не тормозило (разберусь потом)
	//	ЗаполнитьУсловияПродаж();
	//КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	// silber {
	Объект.Соглашение = АТ_Сервер.ПолучитьСформироватьСоглашение(Объект.Партнер, Новый Структура("ФормаОплаты", Объект.ФормаОплаты));
	// } silber
		
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, Организация, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			Объект.Организация,
			Истина,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, РасчитыватьНаборы, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			Истина,
			"Цена, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		Отказ = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Истина;
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентРучнойСкидки");
			Колонки.Добавить("СуммаРучнойСкидки");
		КонецЕсли;
		Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентАвтоматическойСкидки");
			Колонки.Добавить("СуммаАвтоматическойСкидки");
		КонецЕсли;
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьОпераций();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	Иначе
		НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "Артикул")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Элементы.СпособДоставки.Видимость = Ложь;
	КонецЕсли;
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДСАктивность"),
		КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары"));
	Форма.СуммаНДСАктивныхСтрок = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаНДСАктивность"),
		КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары"));
	Форма.СуммаАвтоСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивность"),
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары"));
	Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивность"),
		КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары"));
	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДС"),
		КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары"));
	
	СуммаАктивныхСтрокБезНДС = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАктивность"),
		КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары"));
	
	Если СуммаАктивныхСтрокБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"Активность, БезВозвратнойТары, АктивностьБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		УстановитьПодписку = Объект.Согласован;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыВидЦены");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыТекстовоеОписание");
	МассивЭлементов.Добавить("ТоварыСумма");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("ТоварыСоставНабора");
	
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.КоммерческоеПредложениеКлиенту.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	//МассивЭлементов.Добавить("ФормаОплаты");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("ДекорацияОтступТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	УчетНДСУТ.ЗаполнитьСписокВыбораНалогообложенияПродажи(Элементы.НалогообложениеНДС, Объект.ХозяйственнаяОперация);
	
	УстановитьВидимостьПоляПартнер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()

	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		КонецЕсли;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
		Если Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	СтруктураДействий = Новый Структура(
		"ЗаполнитьДубликатыЗависимыхРеквизитов",
		ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьФормуОплатыСервер(ГрафикОплаты)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
		|ГДЕ
		|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты", ГрафикОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ФормаОплаты;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеСервер(КоммерческоеПредложение, Состояние, СостояниеПросрочено)
	
	Документы.КоммерческоеПредложениеКлиенту.РассчитатьСостояние(КоммерческоеПредложение, Состояние, СостояниеПросрочено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииСоглашения Тогда
				
				ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%1"". Применить карту лояльности и подставить в документ соглашение ""%1""?'");
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГрафикОплаты");
	//МассивЭлементов.Добавить("ФормаОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость",
		Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И (Не ИспользоватьСоглашенияСКлиентами
			Или Не ЗначениеЗаполнено(Объект.Соглашение)
			Или РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов = Истина
			Или РеквизитыСоглашения.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	НалогообложениеИзСоглашения = ПродажиСервер.НалогообложениеОпределяетсяИзСоглашения(Объект.Соглашение);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДС()
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Дата);
	НалогообложениеНДСПриИзмененииСервер();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("УстановитьАктивность");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	//СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		СтрокаТЧТовары.Активность = Истина;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Не (ИспользоватьСоглашенияСКлиентами И НалогообложениеИзСоглашения) Тогда
		ЗаполнитьНалогообложениеНДС();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ГрафикОплаты" Тогда
		ГрафикОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ФормаОплаты" Тогда
		ФормаОплатыПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыАктивность" Тогда
		ТоварыАктивностьПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	// silber {
	ИначеЕсли Элемент.Имя = "ТоварыЭтоПерекуп" Или Элемент.Имя = "ТоварыТекстовоеОписание" Тогда
		// ничего не делать
	// } silber
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "РазбитьСтроку" Тогда
		РазбитьСтроку(Команда);
	ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
		РассчитатьСкидкиНаценки(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
		НазначитьРучнуюСкидку(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "НазначитьАвтоматическиеСкидки" Тогда
		НазначитьАвтоматическиеСкидки(Команда);
	ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
		СчитатьКартуЛояльности(Команда);
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		СоставНабора(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

#КонецОбласти

#Область Перекуп

// Эта область добавлена к типовому коммерческому предложению
// служит для управления процессом согласования перекупа

#Область Настройки

// тут мы получаем настройки от Евгения
//  а пока нифигаем тупо по поиску

&НаСервереБезКонтекста
Функция НастройкиКП()
	
	Возврат Новый Структура("ЕдиницаИзмерения, СтавкаНДС, рольМенеджер, рольЗакупщик",
						Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("796"),
						Перечисления.СтавкиНДС.НДС18,
						Справочники.РолиИсполнителей.НайтиПоНаименованию("Менеджер"),
						Справочники.РолиИсполнителей.НайтиПоНаименованию("Закупщик"));	
КонецФункции

#КонецОбласти

#Область Формиирование_HTML

&НаКлиенте
Функция ПолучитьНастройкиHTML()
	
	Возврат Новый Структура("Действие, КлассСтрока, Класс, divДобавитьПоле, divУдалитьПоле",
				Новый Структура("ДобавитьТовар", 
								"#ДобавитьТовар"),
				"row",
				Новый Структура("Номенклатура, Цена, Количество, Сумма, Поставщик, СсылкаИнтернет",
						Новый Структура("Имя, Наименование, Тип, Обязательный",
											"name", "Наименование", "text", Истина),
						Новый Структура("Имя, Наименование, Тип, Обязательный",
											"price", "Цена", "number", Истина),
						Новый Структура("Имя, Наименование, Тип, Обязательный", 
											"amount", "Кол-во", "number", Ложь),
						Новый Структура("Имя, Наименование, Тип, Обязательный",
											"sum", "Сумма", "number", Ложь),
						Новый Структура("Имя, Наименование, Тип, Обязательный",
											"provider", "Поставщик", "text", Ложь),
						Новый Структура("Имя, Наименование, Тип, Обязательный",
											"anchor", "Ссылка в интернете", "text", Ложь)),
				"<div class=""products-list__add-field"">+<ul class=""products-list__add-field-inner"">",
				"<div class=""products-list__remove-field"">-");
КонецФункции

&НаКлиенте
Функция ПолучитьВставкуHTMLПоПолям(propHtml, Строка = Неопределено)
	
	СтрокиОтмПолей 		= Новый Массив;
	СтрокиНеОтмПолей	= Новый Массив;
		
	Для Каждого Класс Из propHtml.Класс Цикл
		Если Класс.Значение.Обязательный Или (Строка <> Неопределено И ЗначениеЗаполнено(Строка[Класс.Ключ])) Тогда
			СтрокиОтмПолей.Добавить(СтрШаблон("<input class=""%1"" type=""%2"" placeholder=""%3"" %4>", 
													Класс.Значение.Имя, Класс.Значение.Тип, Класс.Значение.Наименование, 
															?(Строка = Неопределено, "", СтрШаблон("value=""%1""", Строка[Класс.Ключ]))));
		Иначе
			СтрокиНеОтмПолей.Добавить(СтрШаблон("<li class=""%1"">%2</li>", Класс.Значение.Имя, Класс.Значение.Наименование));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Видимые, ВСписке", СтрСоединить(СтрокиОтмПолей), СтрСоединить(СтрокиНеОтмПолей));
	
КонецФункции
&НаКлиенте
Функция ПолучитьКодДанныхHTML(propHtml)
	
	Строки = Новый Массив;
	
	Для Каждого Строка Из ВариантыЗакупки Цикл
		
		ПоляДанных = ПолучитьВставкуHTMLПоПолям(propHtml, Строка);
		
		Строки.Добавить(СтрШаблон("
				|<div class=""%1"">
				// заполненные поля
				|	%2
				// добавление списка начала <div>
				|	%3
				// поля списка
				|		%4
				|	</ul></div>
				// добавления удаления поля <div>
				|	%5
				|	</div>
				|</div>",
			propHtml.КлассСтрока,
			ПоляДанных.Видимые,
			propHtml.divДобавитьПоле,
			ПоляДанных.ВСписке,
			propHtml.divУдалитьПоле));
	КонецЦикла;
	
	Возврат СтрСоединить(строки, Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтиль()
	
	Возврат "
	|	<style>
	// silber {
	|	body {
	|	background: #FFFFFF;
	|	background: -moz-linear-gradient(45deg, #FFFFFF 0%, #DCD5F2 100%, #FFFFFF 100%);
	|	background: -webkit-linear-gradient(45deg, #FFFFFF 0%, #DCD5F2 100%, #FFFFFF 100%);
	|	background: linear-gradient(45deg, #FFFFFF 0%, #DCD5F2 100%, #FFFFFF 100%);
	// } silber
	|}
	|		.products-list{
	|			font-size: 14px;
	|			font-family: sans-serif;
	|		}
	|		.products-list__add-broduct{
	|			display: inline-block;
	|			font-size: 1em;
	|			text-transform: uppercase;
	|			font-weight: bold;
	|			padding: 1em 2.2em;
	|			background: rgb(17, 181, 14);
	|			color: #fff;
	|			cursor: pointer;
	|			border: 2px solid rgb(17, 181, 14);
	|			transition: .3s linear;
	|			text-decoration: none;
	|		}
	|		.products-list__add-broduct a{text-decoration: none; color: #eee;}
	|		.products-list__add-broduct:hover{
	|			background: transparent;
	|			color: rgb(17, 181, 14);
	|		}
	|		.products-list__add-field{
	|			position: relative;
	|			display: inline-block;
	|			width: 1em;
	|			height: 1em;
	|			line-height: 1em;
	|			background: rgb(17, 181, 14);
	|			color: #fff;
	|			border-radius: 50%;
	|			cursor: pointer;
	|			text-align: center;
	|			padding: .3em;
	|			margin: 0 1em;
	|		}
	|		.products-list__add-field-inner{
	|			position: absolute;
	|			display: block;
	|			width: auto;
	|			height: auto;
	|			white-space: nowrap;
	|			top: 0;
	|			left: 0;
	|			background: #ccc;
	|			margin: 0;
	|			opacity: 0;
	|			visibility: hidden;
	|		}
	|		.products-list__add-field:hover .products-list__add-field-inner{
	|			opacity: 1;
	|			visibility: visible;
	|			z-index: 10;
	|			list-style: none;
	|			padding: 1em;
	|			text-align: left;
	|		}
	|		.products-list__add-field-inner li{
	|			line-height: 2em;
	|		}
	|		.products-list__add-field-inner li:hover{
	|			text-decoration: underline;
	|		}
	|		.products-list__remove-field {
	|			position: relative;
	|			display: inline-block;
	|			width: 1em;
	|			height: 1em;
	|			line-height: 1em;
	|			background: red;
	|			color: #fff;
	|			border-radius: 50%;
	|			cursor: pointer;
	|			text-align: center;
	|			font-weight: bold;
	|			padding: .3em;
	|		}
	|		.products-list input{
	|			line-height: 1.4em;
	|			box-shadow: none;
	|			margin-right: 1em;
	|			font-size: 1.2em;
	|			padding-left: 1em;
	|			padding-top: .1em;
	|			margin-bottom: 1em;
	// silber {
	|	-webkit-box-shadow: inset 5px 5px 5px 0px rgba(95,13,117,0.26); 
	|box-shadow: inset 5px 5px 5px 0px rgba(95,13,117,0.26);
	// } silber
	|		}
	|	</style>";
	
КонецФункции
&НаКлиенте
Функция ПолучитьHTMLПоТовару()
	
	propHtml = ПолучитьНастройкиHTML();
	ПоляДанных = ПолучитьВставкуHTMLПоПолям(propHtml);
	
	Возврат СтрШаблон("
	|<html lang=""ru"">
	|<head>
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=10"">
	|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
	|<meta name=""GENERATOR"" content=""MSHTML 11.00.9600.18860"">
	|%1
	|</head>
	|<body>
	|	<div class=""products-list"">
	|		%2
	|		<div class=""row"">
	|			<div class=""products-list__add-broduct"">
	|				<a href=""%3"">
	|					Добавить предложение
	|				</a>
	|			</div>
	|		</div>
	|	</div>
	|	<script>
	|		'use strict';
	|		document.addEventListener(""DOMContentLoaded"", function(event) {
	|			var btnRow = document.querySelector('.row');
	|			var btn = document.querySelector('.products-list__add-broduct');
	|			var removeBtns = document.querySelectorAll('.products-list__remove-field');
	|			
	|			function addRow() {
	|				var newDiv = document.createElement('div');
	|				
	|				newDiv.className = 'row';
	|				newDiv.innerHTML = '%4%5%6</ul></div>%7</div>';
	|				
	|				return newDiv;
	|			}
	|			
	|			//add click listener for add new fields
	|function liAddClick(fieldAddBtns){
	|	for(var i = 0; fieldAddBtns.length - 1 >= i; i++){
	|		
	|		fieldAddBtns[i].addEventListener('click', function (e) {
	|			
	|			var target = e.target;
	|			target.style.display = 'none';
	|			var newInput = document.createElement('input');
	|			newInput.className = target.className;
	|			newInput.setAttribute('type','text');
	|			newInput.setAttribute('placeholder',target.innerHTML);
	|			target.parentNode.parentNode.parentNode.insertBefore(newInput,target.parentNode.parentNode);
	|		})
	|	}
	|}

	|//add click listener for field remove button
	|function removeBtnAddClick(fieldRemoveBtn){
	|	fieldRemoveBtn.addEventListener('click', function (e) {
	|		
	|		var target = e.target;
	|		var removedElem = target.previousElementSibling.previousElementSibling;
	|		
	|		if(target.parentNode.querySelectorAll('input').length > 2) {
	|			
	|			target.previousElementSibling.querySelector('.' + removedElem.className).style.display = 'block';
	|			
	|			target.parentNode.removeChild(removedElem);
	|		}
	|	});
	|}

	|//first init
	|for(var i = 0; removeBtns.length - 1 >= i; i++){
	|	removeBtnAddClick(removeBtns[i]);
	|}

	|
	|//first init
	|liAddClick(document.querySelectorAll('li'));

	|btn.addEventListener('click', function () {
	|	
	|	var parent = document.querySelector('.products-list');
	|	var elem = addRow();
	|	var fieldAddBtns = elem.querySelectorAll('li');
	|	var fieldRemoveBtn = elem.querySelector('.products-list__remove-field');
	|	
	|	parent.insertBefore(elem, btnRow);
	|	
	|	removeBtnAddClick(fieldRemoveBtn);
	|	liAddClick(fieldAddBtns);
	|});
	|			
	|		});
	|	</script>
	|</body>
	|</html>
	|", 
		ПолучитьСтиль(),
		ПолучитьКодДанныхHTML(propHtml),
		propHtml.Действие.ДобавитьТовар,
		
		ПоляДанных.Видимые,
		propHtml.divДобавитьПоле,
		ПоляДанных.ВСписке,
		propHtml.divУдалитьПоле);
	
КонецФункции

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Перем Href;
	
	СтандартнаяОбработка = Ложь;
	ДанныеСобытия.Свойство("Href", Href);
	
	Если Href <> Неопределено Тогда
		
		propHtml = ПолучитьНастройкиHTML();
		
		Если СтрЗаканчиваетсяНа(Href, propHtml.Действие.ДобавитьТовар) Тогда
			НовСтрока = ВариантыЗакупки.Добавить();
			ПривязатьСтрокуЗакупщикаКТоварам(НовСтрока);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область _1с

&НаСервере
Процедура УстановитьОформлениеЭлемента(ИмяПоля, Элемент, Путь, ВидСравнения, Значение, Параметр)
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Путь);
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
	
КонецПроцедуры
&НаСервере
Процедура УстановитьЦветОформленияСтрокиТовара(Цвет, ИмяПоля, Значение, ВидСравнения)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары." + ИмяПоля);
	ОтборЭлемента.ВидСравнения 		= ВидСравнения;
	ОтборЭлемента.ПравоеЗначение 	= Значение;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Активность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЭтоПерекуп");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Цвет);
	
КонецПроцедуры
&НаСервере
Процедура УстановитьУсловноеОформлениеПоВариантамЗаказа()
	
	// Покрасим темно синем если закупщики заказали больше чем нужно
	// и темно желтым если закупщики заказали меньше чем нужно
	
	УстановитьЦветОформленияСтрокиТовара(WebЦвета.ТемноЗолотистый, 	"РазностьВарианта", 0, ВидСравненияКомпоновкиДанных.Меньше);
	УстановитьЦветОформленияСтрокиТовара(WebЦвета.ТемноСиний, 		"РазностьВарианта", 0, ВидСравненияКомпоновкиДанных.Больше);
	
	УстановитьОформлениеЭлемента(
			Элементы.ВариантыЗакупки.Имя,
			УсловноеОформление.Элементы.Добавить(), 
			"ВариантыЗакупки.Согласовано", 
			ВидСравненияКомпоновкиДанных.Равно, 
			Истина, 
			Новый Структура("Ключ, Значение", "Шрифт", Новый Шрифт(,,Истина)));
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеОкончанияЗагрузкиКартинки()
	
	Возврат Новый ОписаниеОповещения("ПолученыКартинки", ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПолученыКартинки(ПомещаемыеФайлы, ДопПарметры) Экспорт
	
	Если ПомещаемыеФайлы <> Неопределено Тогда
		
		текСтрока = Элементы.ВариантыЗакупки.ТекущиеДанные;
		
		Для Каждого Файл Из ПомещаемыеФайлы Цикл
			
			Если ПустаяСтрока(текСтрока.АдресКартинки) Тогда
				текСтрока.АдресКартинки = Файл.Хранение;
			КонецЕсли;
			
			НовСтрока = КартинкиВариантов.Добавить();
			НовСтрока.КлючВарианта 	= текСтрока.КлючВарианта;
			НовСтрока.АдресКартинки = Файл.Хранение;
			
			текСтрока.АдресКартинки = Файл.Хранение;
			Модифицированность = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура СохранитьКП_ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("СтатусСтр") Тогда
		ТекущийОбъект.Статус = Перечисления.СтатусыКП[ПараметрыЗаписи.СтатусСтр];
	КонецЕсли;
	
	СохранитьКартинки(ТекущийОбъект);
	
КонецПроцедуры

#Область БизнесПроцессы

&НаСервере
Функция ВсеГотовоКСозданиюДокументов()
	
	// Возвращает ИСТИНА если заполнены все товары и известно откуда отгружать
	
	Склады = Объект.Товары.Выгрузить(,"Склад");
	Склады.Свернуть("Склад");
	ЕстьПустойСклад = Склады.Найти(Справочники.Склады.ПустаяСсылка(), "Склад") <> Неопределено;
	
	Возврат
		Не Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())).Количество() И
		(	Объект.Склад.Пустая() И Не ЕстьПустойСклад ИЛИ НЕ Объект.Склад.Пустая());	
		
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	НастройкиКП = НастройкиКП();
	ЭтоМенеджер = АТ_Кэш.ДоступнаРоль(НастройкиКП.РольМенеджер);
	ЭтоЗакупщик = АТ_Кэш.ДоступнаРоль(НастройкиКП.РольЗакупщик);
	Кнопки 		= Новый Структура("ВРаботе,Актуальное,Согласовано,Сборка,Закрыто", 
														Ложь, Ложь, Ложь, Ложь, Ложь);
	Если Объект.Товары.Количество() Тогда
		Если (Объект.Статус.Пустая() Или Объект.Статус = Перечисления.СтатусыКП.Новый) И ЭтоМенеджер Тогда
			
			Кнопки.Вработе = Истина;
			Кнопки.Закрыто = Истина;
			
		ИначеЕсли Объект.Статус = Перечисления.СтатусыКП.Вработе И ЭтоМенеджер Тогда
			
			Кнопки.Актуальное 	= ЕстьНесогласованныеПозиции();
			Кнопки.Закрыто 		= Истина;
			Кнопки.Сборка		= Не ЕстьНесогласованныеПозиции();
			
		ИначеЕсли Объект.Статус = Перечисления.СтатусыКП.Закрыто И ЭтоМенеджер Тогда
			
			Кнопки.Вработе = Истина;
			
		ИначеЕсли Объект.Статус = Перечисления.СтатусыКП.Актуальное И ЭтоЗакупщик Тогда
			
			Кнопки.Вработе 		= Истина;
			Кнопки.Согласовано 	= Не ЕстьНесогласованныеПозиции();
			
		ИначеЕсли Объект.Статус = Перечисления.СтатусыКП.Согласовано И ЭтоМенеджер Тогда
			
			Кнопки.ВРаботе 	= Истина;
			Кнопки.Сборка 	= Истина;
			Кнопки.Закрыто 	= Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Товары.ТолькоПросмотр 			= Не (Объект.Статус = Перечисления.СтатусыКП.Вработе Или Объект.Статус = Перечисления.СтатусыКП.Новый Или Объект.Статус.Пустая());
	Элементы.ВариантыЗакупки.ТолькоПросмотр = Не (Объект.Статус = Перечисления.СтатусыКП.Вработе Или Объект.Статус = Перечисления.СтатусыКП.Актуальное);	
	
	Для Каждого Элемент Из Кнопки Цикл
		Элементы["ФормаБП_" + Элемент.Ключ].Видимость = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры
									

&НаКлиенте
Процедура УстановитьСтатусИЗакрыть(СтатусСтр)
	
	ПринудительноЗакрытьФорму = Истина;
	Записать(Новый Структура("РежимЗаписи, СтатусСтр", РежимЗаписиДокумента.Проведение, СтатусСтр));
	
КонецПроцедуры
&НаКлиенте
Процедура БП_Действие(Команда)
	
	ИмяСтатуса = Сред(Команда.Имя, 4);
	
	Если ИмяСтатуса = "Сборка" Тогда
		
		БП_СформироватьДокументы();
		
	Иначе
	
		УстановитьСтатусИЗакрыть(ИмяСтатуса);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБП(Ответ, ДопПараметры) Экспорт
	
	Если 	Ответ = КодВозвратаДиалога.Да И
			СоздатьНаОснованииДокументыПоКП() Тогда
			
		УстановитьСтатусИЗакрыть("Сборка");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БП_СформироватьДокументы()
	
	Если Объект.ДатаОтгрузки = '00010101' Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена дата отгрузки.", Объект.Ссылка, "ДатаОтгрузки", "Объект");
		
	ИначеЕсли ЕстьНеПустыеСогласовнныеПоставщики() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не установлен поставщик согласованного товара.");
		
	ИначеЕсли ЕстьНесогласованныеПозиции() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть не согласованные позиции по перекупу.");
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьБП", ЭтаФорма), "Сформировать заказы покупателей, поставщиков, заказы на перемещение?
				|после этого КП менять будет запрещено", РежимДиалогаВопрос.ДаНет,,,"Завершение формирования КП");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСтрокуСостоянияАвторов()
	
	// Обновляет ифнормационную строку по авторам
	
	ЦветЮзера 	= WebЦвета.ТемноСиний;
	ЦветСтатуса = WebЦвета.ТемноФиолетовый;
	
	Строки = Новый Массив;
	Если Объект.Автор.Пустая() Тогда
		Строки.Добавить(новый ФорматированнаяСтрока("Вы станете автором этого КП"));
	Иначе
		Строки.Добавить(новый ФорматированнаяСтрока("Создал: "));
		Строки.Добавить(новый ФорматированнаяСтрока(Строка(Объект.Автор),,ЦветЮзера,,ПолучитьНавигационнуюСсылку(Объект.Автор)));
	КонецЕсли;
	
	Строки.Добавить(новый ФорматированнаяСтрока("  "));
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Период, Автор, Статус, СтатусДо ИЗ РегистрСведений.АТ_ИсторияСтатусовКП ГДЕ Регистратор = &Ссылка УПОРЯДОЧИТЬ ПО Период Убыв");
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Автор = Объект.Автор Тогда			
			Строки.Добавить(новый ФорматированнаяСтрока("и"));			
		Иначе			
			Строки.Добавить(новый ФорматированнаяСтрока(Строка(Выборка.Автор),,ЦветЮзера,,ПолучитьНавигационнуюСсылку(Выборка.Автор)));			
		КонецЕсли;
		
		Если Выборка.СтатусДо.пустая() Тогда
			Строки.Добавить(новый ФорматированнаяСтрока(" установил "));
		Иначе
			Строки.Добавить(новый ФорматированнаяСтрока(" изменил на "));
		КонецЕсли;
			
		Строки.Добавить(новый ФорматированнаяСтрока(Строка(Выборка.Статус),,ЦветСтатуса));
		Строки.Добавить(новый ФорматированнаяСтрока(" "));
		Строки.Добавить(новый ФорматированнаяСтрока(Формат(Выборка.Период, "ДЛФ=DDT")));
		
		Строки.Вставить(0, новый ФорматированнаяСтрока(БиблиотекаКартинок.ИсторияИзменений,,,,"ИсторияСтатусов"));
		Строки.Вставить(1, новый ФорматированнаяСтрока(" "));
		
	КонецЕсли;
	
	СостояниеАвторов = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры
&НаКлиенте
Процедура СостояниеАвторовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсторияСтатусов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.АТ_ИсторияСтатусовКП.Форма.ФормаСпискаДляКП", Новый Структура("Отбор", Новый Структура("Регистратор", Объект.Ссылка)), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНесогласованныеПозиции()
	
	// Если количество товара не равно количеству согласованного товара
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Активность, ЭтоПерекуп", Истина, Истина));
	Для Каждого Строка Из Строки Цикл
		Если Строка.РазностьВарианта Или Не Строка.Количество Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
&НаКлиенте
Функция ЕстьНеПустыеСогласовнныеПоставщики()
	
	// Если стоит перекуп и не выбран поставщик то вернет истина
	
	Возврат Булево(Объект.ВариантыЗакупки.НайтиСтроки(Новый Структура("Согласовано, Поставщик", Истина, ПустойПартнер)).Количество());
	
КонецФункции
&НаСервере
Функция МассивРазличных(Табл, ИмяКолонки)
	
	СвТабл = Табл.Скопировать(,ИмяКолонки);
	СвТабл.Свернуть(ИмяКолонки);
	
	Массив = СвТабл.ВыгрузитьКолонку(ИмяКолонки);
	Инд = -1;
	Для Каждого Значение Из Массив Цикл Инд = Инд + 1;
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Массив.Удалить(Инд);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции
&НаСервере
Процедура ДобавитьСвязанный(РегСвязи, Ссылка)
	
	Если Не Ссылка.Пустая() Тогда
		
		Запись = РегСвязи.Добавить();
		Запись.КП = Объект.Ссылка;
		Запись.СвязанныйДокумент = Ссылка;
		
	КонецЕсли;
		
КонецПроцедуры
&НаСервере
Функция ЗаполнитьИПровестиДокОснование(Менеджер, Свойства, докОснование = Неопределено, ДопСвойства = Неопределено, СвойстваПослеЗаполнения = Неопределено)
	
	Док = менеджер.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Док, Свойства);
	Док.Дата = ТекущаяДата();
	Док.ДокументОснование = ?(докОснование = Неопределено, Объект.Ссылка, докОснование);
	
	Если ТипЗнч(ДопСвойства) = Тип("Структура")Тогда
		Для Каждого Элемент Из ДопСвойства Цикл
			Док.ДополнительныеСвойства.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//Док.Заполнить(Док.ДокументОснование);
	Док.Заполнить(Объект.Ссылка);
	
	Если ТипЗнч(СвойстваПослеЗаполнения) = Тип("Структура")Тогда
		Для Каждого Элемент Из СвойстваПослеЗаполнения Цикл
			Док[Элемент.Ключ] = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;	
		
	Если Док.Товары.Количество() Тогда
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Док.Ссылка;
	Иначе
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции
&НаСервере
Функция ОпределитьСкладПоставщика(текПоставщик)
	
	// Возвращает первый попавшийся склад поставщика
	
	Возврат Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки", 
				Объект.ВариантыЗакупки.НайтиСтроки(Новый Структура("Поставщик", текПоставщик))[0].КлючСтроки))[0].Склад;
	
КонецФункции
&НаСервере
Функция ОпределитьСтруктуруПостащика(Поставщик)
	
	// Возвращает первого попавшего контрагента и договор поставщика
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка Договор, Контрагент, &Партнер Партнер ИЗ Справочник.ДоговорыКонтрагентов ГДЕ Партнер = &Партнер И НЕ ПометкаУдаления И ТипДоговора = &СПоставщиком
	|");
	Запрос.УстановитьПараметр("СПоставщиком", 	Перечисления.ТипыДоговоров.СПоставщиком);
	Запрос.УстановитьПараметр("Партнер", 		Поставщик);
	
	Возврат КонвертацияТипов.ПолучитьСтруктуруИзСТрокиТаблицыЗначений(Запрос.Выполнить().Выгрузить());
	
КонецФункции
&НаСервере
Функция СоздатьНаОснованииДокументыПоКП()
	
	// Формирует необходимые документы по КП
	// Если склад клиента отличается тогда создает заказы на перемещение
	// Если товар перекупной и нужно заказать у поставщика тогда создает заказы поставщикам
	// на остальной товар создается заказ клиента если указан склад отгрузки
	//	если не указан тогда создает столько заказов покупателей сколько складов в таблице
	
	СкладУказан 		= Не Объект.Склад.Пустая();
	СкладКЗаказуКлиента = новый Соответствие;
	
	НачатьТранзакцию();
	
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		РегСвязи = РегистрыСведений.АТ_СвязьОбъектовКП.СоздатьНаборЗаписей();
		РегСвязи.Отбор.КП.Установить(Объект.Ссылка);
		РегСвязи.Прочитать();
		
		Склады = МассивРазличных(Объект.Товары.Выгрузить(,"Склад"), "Склад");
		Если Склады.Найти(Объект.Склад) = Неопределено Тогда
			Склады.Добавить(Объект.Склад);
		КонецЕсли;
			
		Если СкладУказан Тогда
			ЗакСсылка = ЗаполнитьИПровестиДокОснование(Документы.ЗаказКлиента, Новый Структура);
			ДобавитьСвязанный(РегСвязи, ЗакСсылка);
		КонецЕсли;
		
		Для Каждого Склад Из Склады Цикл
			
			Если СкладУказан Тогда
				Если Склад <> Объект.Склад Тогда
					ДобавитьСвязанный(РегСвязи, 
						ЗаполнитьИПровестиДокОснование(
								Документы.ЗаказНаПеремещение, 
								Новый Структура("СкладОтправитель, СкладПолучатель", Склад, Объект.Склад),
								ЗакСсылка,
								новый Структура("ЗаказНазначение, КонтрольОстатковОтключен", ЗакСсылка, Истина)));
				КонецЕсли;		
			ИначеЕсли Не Склад.Пустая() Тогда			
				ЗакСсылка = ЗаполнитьИПровестиДокОснование(Документы.ЗаказКлиента, Новый Структура("Склад", Склад));
				ДобавитьСвязанный(РегСвязи, ЗакСсылка);
				СкладКЗаказуКлиента.Вставить(Склад, ЗакСсылка);
			КонецЕсли;

		КонецЦикла;
		
		СоглВарианты 	= КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Объект.ВариантыЗакупки.Выгрузить(), Новый Структура("Согласовано", Истина));
		Поставщики 		= МассивРазличных(СоглВарианты, "Поставщик");	
			
		Для Каждого текПоставщик Из Поставщики Цикл
			
			СкладПоставщика 	= ОпределитьСкладПоставщика(текПоставщик);
			СтруктураПоставщика = ОпределитьСтруктуруПостащика(текПоставщик);
			СтруктураПоставщика.Вставить("Склад", СкладПоставщика);
			
			ДобавитьСвязанный(РегСвязи,
					ЗаполнитьИПровестиДокОснование(
									Документы.ЗаказПоставщику, 
									СтруктураПоставщика,,
									новый Структура("ЗаказНазначение, КонтрольОстатковОтключен", ?(СкладУказан, ЗакСсылка, СкладКЗаказуКлиента[СкладПоставщика]), Истина),
									Новый Структура("Статус", Перечисления.СтатусыЗаказовПоставщикам.Подтвержден)));
		КонецЦикла;
				
		РегСвязи.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция СоздатьНаОснованииДокументыПоКП_Ст()
	
	//// Формирует необходимые документы по КП
	//
	//
	//НачатьТранзакцию();
	//
	//Записать();
	//
	//Склады = МассивРазличных(Объект.Товары.Выгрузить(,"Склад"), "Склад");
	//Если Склады.Найти(Объект.Склад) = Неопределено Тогда
	//	Склады.Добавить(Объект.Склад);
	//КонецЕсли;
	//
	//Для Каждого Склад Из Склады Цикл
	//
	//	ЗакПокуп = Документы.ЗаказКлиента.СоздатьДокумент();
	//	ЗакПокуп.Склад = Склад;
	//	ЗакПокуп.Заполнить(Объект.Ссылка);
	//	ЗакПокуп.Дата = ТекущаяДата();
	//	ЗакПокуп.Записать(РежимЗаписиДокумента.Проведение);
	//	
	//	СоглВарианты 	= КонвертацияТипов.ПолучитьТаблицуИзНайденныхСтрокТаблицыЗначений(Объект.ВариантыЗакупки.Выгрузить(), Новый Структура("Согласовано", Истина));
	//	Поставщики 		= МассивРазличных(СоглВарианты, "Поставщик");
	//	
	//	Для Каждого текПоставщик Из Поставщики Цикл
	//		
	//		ЗакПост = Документы.ЗаказПоставщику.СоздатьДокумент();
	//		ЗакПост.Склад = Склад;
	//		ЗакПост.Заполнить(ЗакПокуп.Ссылка);
	//		ЗакПост.Дата = ТекущаяДата();
	//		
	//		ЗакПост.Товары.Очистить();
	//		Строки = СоглВарианты.НайтиСтроки(Новый Структура("Поставщик", текПоставщик));
	//		Для Каждого Строка Из Строки Цикл
	//			
	//			СтрокаТовара = Объект.Товары.НайтиСтроки(Новый Структура("КлючСтроки", Строка.КлючСтроки))[0];
	//			НовСтрока = ЗакПост.Товары.Добавить();
	//			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТовара);
	//			
	//			НовСтрока.Цена 	= Строка.Цена;
	//			НовСтрока.Склад = Склад;
	//						
	//		КонецЦикла;
	//		
	//		ЗакПост.Записать(РежимЗаписиДокумента.Проведение);
	//		
	//	КонецЦикла;
	//КонецЦикла;
	//
	//ЗафиксироватьТранзакцию();
	//
	//Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьКартинки(ТекущийОбъект)
	
	// Сохраняет картинки из временного хранилища в базу
	
	Инд = -1;
	Для Каждого Строка Из Объект.КартинкиТоваров Цикл Инд = Инд + 1;
		Если ЭтоАдресВременногоХранилища(Строка.АдресКартинки) Тогда
			
			ТекущийОбъект.КартинкиТоваров[Инд].Картинка = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Строка.АдресКартинки));
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ИницилизироватьАдресаКартинок()
	
	// Вытаскивает картинки из базы для отображения
	
	Инд = -1;
	Для Каждого Строка ИЗ Объект.КартинкиТоваров Цикл Инд = Инд + 1;
		Строка.АдресКартинки = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "КартинкиТоваров.Картинка", Инд);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСтрокуЗакупки(ИдСтрокиТовара)
	
	// Сохраняет строки таблицы формы закупщика 
	// в таблицу документа закупщика
	
	Если ИдСтрокиТовара <> Неопределено И ИдСтрокиТовара < Объект.Товары.Количество() Тогда
		
		стСтроки = Объект.ВариантыЗакупки.НайтиСтроки(Новый Структура("КлючСтроки", Объект.Товары[ИдСтрокиТовара].КлючСтроки));
		Для Каждого стСтрока Из стСтроки Цикл
			
			стСтрокиКартинок = Объект.КартинкиТоваров.НайтиСтроки(Новый Структура("КлючВарианта", стСтрока.КлючВарианта));
			Для Каждого стСтрокаКартинки Из стСтрокиКартинок Цикл
				Объект.КартинкиТоваров.Удалить(стСтрокаКартинки);
			КонецЦикла;
			
			Объект.ВариантыЗакупки.Удалить(стСтрока);
			
		КонецЦикла;
		
		Для Каждого Строка Из ВариантыЗакупки Цикл
			ЗаполнитьЗначенияСвойств(Объект.ВариантыЗакупки.Добавить(), Строка);
		КонецЦикла;
		
		Для Каждого Строка Из КартинкиВариантов Цикл
			ЗаполнитьЗначенияСвойств(Объект.КартинкиТоваров.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПрочитатьСтрокуЗакупки(ТекСтрока)
	
	//Если ИдТовараДляОбнВариантаЗак <> Неопределено Тогда
	//	
	//	ТекСтрока = ВариантыЗакупки.НайтиПоИдентификатору(ИдТовараДляОбнВариантаЗак);
		
		ВариантыЗакупки.Очистить();
		КартинкиВариантов.Очистить();
		
		НайдСтроки = Объект.ВариантыЗакупки.НайтиСтроки(Новый Структура("КлючСтроки", ТекСтрока.КлючСтроки));
		
		Для Каждого Строка Из НайдСтроки Цикл
			
			НовСтрока = ВариантыЗакупки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			
			НадКартинки = Объект.КартинкиТоваров.НайтиСтроки(Новый Структура("КлючВарианта", Строка.КлючВарианта));
			Для Каждого СтрокаКартинки Из НадКартинки Цикл
				ЗаполнитьЗначенияСвойств(КартинкиВариантов.Добавить(), СтрокаКартинки);
				НовСтрока.АдресКартинки = СтрокаКартинки.АдресКартинки;
			КонецЦикла;
			
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьСтрокуЗакупки(ТекСтрока)
	
	ПрочитатьСтрокуЗакупки(ТекСтрока);
	ТекстHTML = ПолучитьHTMLПоТовару();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоПартнеру()
	
	МодульИнформацииКлиент.ОбновитьИнформациюОпартнере(
		Объект.Партнер,
		ЭтаФорма,
		Новый Структура("ИнформацияОПартнереHTML, НадписьЭтаповОплат", "ИнформацияОПартнере", "НадписьЭтаповОплат"),
		Новый Структура("Соглашение", Объект.Соглашение));
	
КонецПроцедуры

#Область Обработчики_Товаров

&НаКлиенте
Функция ПолучитьИнфСтрокуПоТекСтрокеТовара(текСтрока)
	
	Если текСтрока = Неопределено Или (ПустаяСтрока(текСтрока.ТекстовоеОписание) И текСтрока.Номенклатура.Пустая()) Тогда
		
		Возврат Новый ФорматированнаяСтрока("товар не выбран");
		
	Иначе
		
		ЕстьТекст = Не ПустаяСтрока(текСтрока.ТекстовоеОписание);
		ЕстьТовар = Не текСтрока.Номенклатура.Пустая();
		ШрифтТовара = Новый Шрифт();
		
		ФормТекст = Новый Массив;
		ФормТекст.Добавить(Новый ФорматированнаяСтрока(ТекСтрока.ТекстовоеОписание,,WebЦвета.ТемноСиний));
		Если ЕстьТекст И ЕстьТовар Тогда
			ФормТекст.Добавить(Новый ФорматированнаяСтрока(" ",,WebЦвета.ТемноСиний));
			ШрифтТовара = Новый Шрифт(,,,,,,Истина);
		КонецЕсли;
		ФормТекст.Добавить(Новый ФорматированнаяСтрока(Строка(ТекСтрока.Номенклатура), ШрифтТовара));
		
		Возврат Новый ФорматированнаяСтрока(ФормТекст);
		
	КонецЕсли; 
	
КонецФункции
&НаКлиенте
Процедура ОбновитьВариантыЗакупкиПоТовару()
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ОбновитьСтрокуЗакупки(ТекСтрока);
	КонецЕсли;
	ИнформацияТекТовар = ПолучитьИнфСтрокуПоТекСтрокеТовара(текСтрока);
	ИнфТекТоварЗаголовок = Строка(ИнформацияТекТовар);
	
	ОбновитьИнформациюПоВариантамЗакупки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	//текДанные = Элементы.Товары.ТекущиеДанные;	
	//Если стКлючстрокиСтроки <> текДанные.КлючСтроки Тогда
		ОбновитьВариантыЗакупкиПоТовару();
	//КонецЕсли;
		
	// информация о товаре
	ОбработатьОтображениеИнформацииОТоваре();
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	текДанные = Элементы.Товары.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		ОбновитьЗначенияСтрокВариантовЗакупок();
		ИнформацияТекТовар = ПолучитьИнфСтрокуПоТекСтрокеТовара(Элементы.Товары.ТекущиеДанные);
		ИнфТекТоварЗаголовок = Строка(ИнформацияТекТовар);
		ОбновитьРазницуИтогаВариантаСТоваром(Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные));
		ОбновитьИнформациюПоВариантамЗакупки();
		
		УправлениеВидимостьюДоступностью();
		
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Процедура ТоварыЭтоПерекупПриИзменении(Элемент)
	
	//Если Элементы.Товары.ТекущиеДанные.ЭтоПерекуп И Элементы.ГруппаПоТовару.Свернута Тогда
	//КонецЕсли;
	
	
	
КонецПроцедуры



&НаКлиенте
Процедура ПривязатьСтрокуЗакупщикаКТоварам(текСтрокаВарианта)
	
	текДанные = Элементы.Товары.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		текСтрокаВарианта.КлючСтроки = текДанные.КлючСтроки;
		Если Не ЗначениеЗаполнено(текСтрокаВарианта.КлючВарианта) Тогда
			текСтрокаВарианта.КлючВарианта = Новый УникальныйИдентификатор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиПоТоварам()
	
	Для Инд = 0 По Объект.Товары.Количество() - 1 Цикл
		ОбновитьРазницуИтогаВариантаСТоваром(Инд);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРазницуИтогаВариантаСТоваром(ИндСтрокиТовара)
	
	// Обновляет разницу между количеством товара и количествм (итоги) вариантова закупки
	// считаются количество в вариантах у которых стоит признак "Согласовано"
	
	СтрокаТовара 	= Объект.Товары[ИндСтрокиТовара];
	Итог 			= 0;
	Строки 			= Объект.ВариантыЗакупки.НайтиСтроки(Новый Структура("КлючСтроки, Согласовано", СтрокаТовара.КлючСтроки, Истина));
	
	Для Каждого Строка Из Строки Цикл
		Итог = Итог + Строка.Количество;
	КонецЦикла;
	
	СтрокаТовара.РазностьВарианта = СтрокаТовара.Количество - Итог;
	
КонецПроцедуры

#КонецОбласти

#Область Обработчики_ВариантовЗакупки

&НаКлиенте
Процедура УСтановить(Строка, Колонка, Значение, Изменилось)
	
	Если Строка[Колонка] <> Значение Тогда
		
		Строка[Колонка] = Значение;
		Изменилось = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗначенияСтрокВариантовЗакупок()

	// Обновляет описание и номенклатуру у строк по текущей строки товара
	// если будут изменения тогда будет также сохранены варианты закупок
	
	текТовары = Элементы.Товары.ТекущиеДанные;
	
	Если текТовары <> Неопределено Тогда
		
		Изменилось = Ложь;
		
		Для Каждого Строка Из ВариантыЗакупки Цикл
			
			УСтановить(Строка, "Номенклатура", 		текТовары.Номенклатура, 		Изменилось);
			УСтановить(Строка, "ТекстовоеОписание", текТовары.ТекстовоеОписание, 	Изменилось);
			
		КонецЦикла;
		
		Если Изменилось Тогда
			СохраниьСтрокиВариантаПоТовару();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ВариантыЗакупкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	текСтрока = Элементы.ВариантыЗакупки.ТекущиеДанные;
	текТовар = Элементы.Товары.ТекущиеДанные;
	ПривязатьСтрокуЗакупщикаКТоварам(Элементы.ВариантыЗакупки.ТекущиеДанные);
	
	Если НоваяСтрока Тогда
		
		текСтрока.ТекстовоеОписание = текТовар.ТекстовоеОписание;
		текСтрока.Номенклатура 		= текТовар.Номенклатура;
		//текСтрока.Артикул 			= ПолучитьЗначенияОтбораЖурналаРегистрации(текТовар.Номенклатура.Артикул;
		//текСтрока.Производитель 	= текТовар.Номенклатура.Производитель;
		
		КолУтв = КолУтвержденных();
		Недост = текТовар.Количество - КолУтв;
		текСтрока.Количество = ?(Недост > 0, Недост, КолУтв);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыЗакупкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	Если Поле.Имя = "КартинкаЗакупки" И Элементы.ВариантыЗакупки.ТекущиеДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДВ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДВ.Фильтр = "Картинки png|*.png|Картинки jpg|*.jpg";
		
		НачатьПомещениеФайлов(ОповещениеОкончанияЗагрузкиКартинки(),, ДВ, Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиКоличествоПриИзменении(Элемент)
	
	текДанные = Элементы.ВариантыЗакупки.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		текДанные.Сумма = текДанные.Цена * текДанные.Количество;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиЦенаПриИзменении(Элемент)
	
	текДанные = Элементы.ВариантыЗакупки.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		
		текДанные.Сумма = текДанные.Цена * текДанные.Количество;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиСуммаПриИзменении(Элемент)
	
	текДанные = Элементы.ВариантыЗакупки.ТекущиеДанные;
	Если текДанные <> Неопределено И текДанные.Количество Тогда
		
		текДанные.Цена = текДанные.Сумма / текДанные.Количество;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиПоставщикПриИзменении(Элемент)
	
	//текДанные = Элементы.ВариантыЗакупки.ТекущиеДанные;
	//Если текДанные <> Неопределено Тогда
	//	
	//	ЗаполнитьСпискиВыбораАдресовДоставкиВариантаЗакупки(текДанные.Поставщик);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохраниьСтрокиВариантаПоТовару()
	
	текСтрокаТовара = Элементы.Товары.ТекущиеДанные;
	
	Если текСтрокаТовара <> Неопределено Тогда
		ИндТовара = Объект.Товары.Индекс(текСтрокаТовара);
		СохранитьСтрокуЗакупки(ИндТовара);
		ОбновитьРазницуИтогаВариантаСТоваром(ИндТовара);
		ОбновитьИнформациюПоВариантамЗакупки();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиПриИзменении(Элемент)
	
	СохраниьСтрокиВариантаПоТовару();
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаКлиенте
Процедура ВариантыЗакупкиПослеУдаления(Элемент)
	
	СохраниьСтрокиВариантаПоТовару();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыЗакупкиПриАктивизацииСтроки(Элемент)
	
	Если ИдТовараДляОбнВариантаЗак = Неопределено Тогда
	
		//текДанные = Элементы.ВариантыЗакупки.ТекущиеДанные;
		//Если текДанные <> Неопределено Тогда
		//	
		//	ИдТовараДляОбнВариантаЗак = текДанные.ПолучитьИдентификатор();
		//	ЗаполнитьСпискиВыбораАдресовДоставкиВариантаЗакупки(текДанные.Поставщик);
		//	
		//КонецЕсли;
			
		ОбновитьИнформациюПоВариантамЗакупки();
		
		ИдТовараДляОбнВариантаЗак = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВсеПоляДляНовойНоменклатурыЗаполнены()
	
	// Возвращает истина если все требуемы поля для создания новой номенклатуры заполнены
	
	текСтрока = Элементы.ВариантыЗакупки.ТекущиеДанные;
	Если текСтрока <> Неопределено Тогда
		
		Возврат 	текСтрока.Номенклатура.Пустая() И
					Не ПустаяСтрока(текСтрока.Артикул) И
					Не ПустаяСтрока(текСтрока.ТекстовоеОписание) И
					текСтрока.Цена И
					Не текСтрока.Производитель.Пустая();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция КолУтвержденных()
	
	УтвКол = 0;
	
	Для Каждого Строка Из ВариантыЗакупки Цикл
		УтвКол = УтвКол + Строка.Согласовано * Строка.Количество;
	КонецЦикла;
	
	Возврат УтвКол;
	
КонецФункции
&НаКлиенте
Процедура ОбновитьИнформациюПоВариантамЗакупки()

	ФормСтрока 	= Новый Массив;
	СтрРазд		= Новый ФорматированнаяСтрока("  ");
	УтвКол		= КолУтвержденных();
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		ЭтоПерекуп 	= Ложь;
		КолТовара 	= 0;
	Иначе
		ЭтоПерекуп 	= Элементы.Товары.ТекущиеДанные.ЭтоПерекуп;
		КолТовара 	= Элементы.Товары.ТекущиеДанные.Количество;
	КонецЕсли;
	
	Элементы.СтраницыЗакупок.Видимость 	= ЭтоПерекуп;
	Элементы.Картинка.Видимость 		= ЭтоПерекуп;
	
	// Сколько утверждено
	
	Если Не ЭтоПерекуп Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("Выберите "));
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("""перекуп""",,WebЦвета.СинеСерый));
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока(" чтобы продолжить"));		
	ИначеЕсли КолТовара И УтвКол = КолТовара Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("Достаточно!",,WebЦвета.ТемноЗеленый));
	ИначеЕсли КолТовара < УтвКол Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("Перебор! (%1 выбрано из %2)", УтвКол, КолТовара),,WebЦвета.Коричневый));
	ИначеЕсли УтвКол И КолТовара > УтвКол Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("Нужно ещё: "));
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока(Строка(КолТовара - УтвКол), Новый Шрифт(,,Истина)));
	ИначеЕсли Не ВариантыЗакупки.Количество() Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("Нажмите "));
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("""добавить""",,WebЦвета.СинеСерый));		
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока(" для предложения"));		
	ИначеЕсли ВариантыЗакупки.НайтиСтроки(Новый Структура("Согласовано", Истина)).Количество() Тогда
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("не выбрано"));
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока(" количество",,WebЦвета.СинеСерый));
	Иначе
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("не выбрано"));
	КонецЕсли;
	
	// Формирование новой номенклатуры, если все обязательные поля заполнены
	
	Если ВсеПоляДляНовойНоменклатурыЗаполнены() Тогда
		ФормСтрока.Добавить(СтрРазд);
		ФормСтрока.Добавить(Новый ФорматированнаяСтрока("[создать товар]",,,,"СоздатьТовар"));
	КонецЕсли;
	
	// Переход на сайт если есть ссылка
	
	ТекСтрока = Элементы.ВариантыЗакупки.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		
		//Элементы.Картинка.ТекстНевыбраннойКартинки = ?(ПустаяСтрока(ТекСтрока.ТекстовоеОписание), "выбрать картинку", ТекСтрока.ТекстовоеОписание);
		
		Если Не ПустаяСтрока(ТекСтрока.СсылкаИнтернет) Тогда
			ФормСтрока.Добавить(СтрРазд);
			ФормСтрока.Добавить(Новый ФорматированнаяСтрока("[перейти на сайт]",,,,ТекСтрока.СсылкаИнтернет));
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияТовараПоЗакупке = Новый ФорматированнаяСтрока(ФормСтрока);
	
КонецПроцедуры
&НаКлиенте
Процедура ИнформацияТовараПоЗакупкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьТовар" Тогда
		
		СтандартнаяОбработка = Ложь;
		Инд 	= ВариантыЗакупки.Индекс(Элементы.ВариантыЗакупки.ТекущиеДанные);
		ИндТов 	= Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		Если Инд + ИндТов >= 0 Тогда
		
			ОткрытьФорму("Справочник.Номенклатура.Форма.НовыйТовар", Новый Структура("ЗначенияЗаполнения",
						ПолучитьНастройкиЗаполненияНовогоТовара(Инд, ИндТов))
						,
						ЭтаФорма,,,,
						Новый ОписаниеОповещения("ЗакрытаФормаНовогоТовара", ЭтаФорма), 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗакрытаФормаНовогоТовара(Ответ, ДопПараметры) Экспорт
	
	текСтрока = Элементы.ВариантыЗакупки.ТекущиеДанные;
	текТовар = Элементы.Товары.ТекущиеДанные;
	
	Если текСтрока <> Неопределено Тогда
		Если ТипЗнч(Ответ) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			текСтрока.Номенклатура = Ответ;
			Если текТовар.Номенклатура.Пустая() Тогда
				текТовар.Номенклатура = Ответ;
			КонецЕсли;
			
			СохраниьСтрокиВариантаПоТовару();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ПолучитьНовыйТовар()
	
КонецФункции
&НаСервере
Функция ПолучитьНастройкиЗаполненияНовогоТовара(Инд, ИндТов)
	
	текСтрока 	= ВариантыЗакупки[инд];
	текТовар 	= Объект.Товары[ИндТов];
	НастройкиКП	= НастройкиКП();
	
	Возврат Новый Структура("Наименование, Артикул, Производитель, ИспользованиеХарактеристик, Родитель, ЕдиницаИзмерения, ВидНоменклатуры, СтавкаНДС, ЕдиницаИзмерения",
					СтрШаблон("%1 арт. %2", ТекСтрока.ТекстовоеОписание, ТекСтрока.Артикул),
					ТекСтрока.Артикул,
					ТекСтрока.Производитель,
					Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать,
					Справочники.Номенклатура.НайтиПоНаименованию("Перекуп"),
					текТовар.Упаковка,
					?(текТовар.Номенклатура.Пустая(), 
						Справочники.ВидыНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("f749355f-b55a-11e4-8ed0-001517b9d0ec")),
						текТовар.Номенклатура.ВидыНоменклатуры),
					НастройкиКП.СтавкаНДС,
					НастройкиКП.ЕдиницаИзмерения); 
КонецФункции

&НаКлиенте
Процедура ВариантыЗакупкиНоменклатураПриИзменении(Элемент)
	
	// Если прошлое название товара совпадает с прошлым тестовым описанием значит нужно менять текстовое описание
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.КП.Форма.ВРазработке");
	
КонецПроцедуры
#КонецОбласти

#Область СуперПодбор

&НаСервере
Функция СформироватьСоглашение()
	
	Объект.Соглашение = АТ_Сервер.ПолучитьСформироватьСоглашение(Объект.Партнер, 
			Новый Структура("ФормаОплаты, Организация", Объект.ФормаОплаты, Объект.Организация)); 
			
	Возврат Не Объект.Соглашение.Пустая();
				
КонецФункции
&НаКлиенте
Процедура ВидимостьЭлементовУменьшающийОкно(Видимы)
	
	Элементы.ГруппаПоТовару.Видимость 		= Видимы;
	Элементы.ГруппаАктуальность.Видимость 	= Видимы;
	
	Если Видимы Тогда
		
		Элементы.Товары.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Авто;
		ПоложениеКоманднойПанели 					= ПоложениеКоманднойПанелиФормы.Авто;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.ЗакладкиСверху;
		
	Иначе
		
		Элементы.Товары.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПоложениеКоманднойПанели 					= ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СуперПодбор(Команда)
	
	Если Не Объект.Соглашение.Пустая() Или СформироватьСоглашение() Тогда
		
		ВидимостьЭлементовУменьшающийОкно(Ложь);
		ОткрытьФорму("Документ.КП.Форма.Подбор",Новый Структура("Склад, Валюта, Соглашение", Объект.Склад, Объект.Валюта, Объект.Соглашение), Элементы.Товары,,,,Новый ОписаниеОповещения("ЗакрытСуперПодбор", ЭтаФорма));
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗакрытСуперПодбор(Значение, ДопПараметры) Экспорт
	
	ВидимостьЭлементовУменьшающийОкно(Истина);
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры
&НаСервере
Процедура ОбработкаВыбораТовараНаСервере(ИдентификаторСтроки)
	
	АТ_Сервер.ОбновитьСкидкуНаценкуСтрокиТоваров(Объект, Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Склад", ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Склад));
	Если Строки.Количество() Тогда
		НовСтрока 	= Строки[0];
		стКол 		= НовСтрока.Количество;
	Иначе
		НовСтрока 	= Объект.Товары.Добавить();
		стКол 		= 0;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовСтрока, ВыбранноеЗначение);
	НовСтрока.Активность 			= Истина;
	НовСтрока.Количество 			= стКол + ВыбранноеЗначение.Количество;
	НовСтрока.КоличествоУпаковок 	= стКол + ВыбранноеЗначение.КоличествоУпаковок;
	
	Элементы.Товары.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();
	ТоварыНоменклатураПриИзменении(Элементы.ТоварыНоменклатура);
	
	ОбработкаВыбораТовараНаСервере(НовСтрока.ПолучитьИдентификатор());
	
	Подключаемый_ТоварыЦенаСоСкидкойПриИзменении(Элемент);		
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СвязанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.СвязанныеДокументы.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		текЗначение = текДанные[Сред(Поле.Имя, СтрДлина("СвязанныеДокументы") + 1)];
		Если ЗначениеЗаполнено(текЗначение) Тогда
			ПоказатьЗначение(,текЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ( Storverk ЦенаСоСкидкой
&НаКлиенте
Процедура Подключаемый_ТоварыЦенаСоСкидкойПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ЦенаСоСкидкой = ТекущаяСтрока.ЦенаСоСкидкой;	
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		
		РассчитатьСкидкиНаценкиКлиент();
		
		ТекущаяСтрока.ЦенаСоСкидкой = ЦенаСоСкидкой;	
		
	КонецЕсли; 
	
	//при изменении цены со скидкой - меняем сумму ручной скидки
	ИмяКоличества = "КоличествоУпаковок";
	СуммаБезСкидок	 = ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена;
	СуммаСоСкидками	 = ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.ЦенаСоСкидкой;
	СуммаСкидки = СуммаБезСкидок - СуммаСоСкидками;
	
	ТекущаяСтрока.СуммаРучнойСкидки = СуммаСкидки - ТекущаяСтрока.СуммаАвтоматическойСкидки;
	
	ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	
КонецПроцедуры
// ) Storverk ЦенаСоСкидкой

#КонецОбласти

#Область Информация_о_товаре

&НаКлиенте
Процедура ОбработатьОтображениеИнформацииОТоваре() Экспорт 
	
	МодульИнформацииКлиент.ОбработатьОтображениеИнформацииОТоваре(ЭтаФорма, Новый Структура("ТоварыФорма, ПутьКСоглашению", "Объект.Товары", "Объект.Соглашение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфТовараТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка,,,"Объект.Товары");
	
КонецПроцедуры
&НаКлиенте
Процедура ИнфТовараЗаголовокHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	МодульИнформацииКлиент.ИнфТовараТекстHTMLПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка, "Товары", "Объект.Товары");
	
КонецПроцедуры

 &НаКлиенте
Процедура ПоказатьСкрытьИнфОТоваре(Команда)
	МодульИнформацииКлиент.ПоказатьСкрытьИнфОТоваре(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИнфОТоваре(Команда) 
	
	МодульИнформацииКлиент.НастройкаИнфОТоваре(ЭтаФорма, "Товары", "Объект.Товары");
	
КонецПроцедуры



#КонецОбласти

#Область Стыренная_доставка

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции
&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры
&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
	//Богушевич--------------------------------------------------------------------------------------------------------
	БП_АдресДоставкиОбработкаВыбораКлиент(Элемент,ВыбранноеЗначение);
	//конец-------------------------------------------------------------------------------------------------------------
	
КонецПроцедуры
&НаКлиенте
Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)   
	
	СтандартнаяОбработка = Ложь;
	ДляПеревозчика =  Найти(Элемент.Имя,"Перевозчик") > 0;
	сткПараметров = Новый Структура();
	сткПараметров.Вставить("ДляПеревозчика",ДляПеревозчика);
	Если ДляПеревозчика Тогда
		сткПараметров.Вставить("СсылкаАдреса",Объект.БП_АдресДоставкиПеревозчикаСсылка);
	Иначе
		сткПараметров.Вставить("СсылкаАдреса",Объект.БП_АдресДоставкиСсылка);
	КонецЕсли;
	
	// silber {
	
	Если Элемент.Имя = "ВариантыЗакупкиАдресДоставкиДляПоставщика" Тогда
		сткПараметров.Вставить("ИдентификаторВариантЗакупок", 	Элементы.ВариантыЗакупки.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	// } silber
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОкончаниеОткрытияАдреса",ЭтотОбъект,сткПараметров);
	
	ОткрытьФорму("Справочник.БП_АдресаДоставкиКонтрагентов.ФормаОбъекта",Новый Структура("Ключ",сткПараметров.СсылкаАдреса)
																		 ,ЭтаФорма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
&НаСервере
Процедура ОкончаниеОткрытияАдреса(Результат, ДопПараметры)        Экспорт
	
	Если ДопПараметры.ДляПеревозчика Тогда
		Объект.АдресДоставкиПеревозчика = Объект.БП_АдресДоставкиПеревозчикаСсылка.Представление;
		Объект.АдресДоставкиПеревозчикаЗначенияПолей = Объект.БП_АдресДоставкиПеревозчикаСсылка.ЗначенияПолей;
		БП_ЗаполнитьСписокВыбораАдресаДоставкиПеревозчика();
		Объект.ЗонаДоставки = ПолучитьЗонуДоставкиДляАдреса(Объект.БП_АдресДоставкиПеревозчикаСсылка);
		
	// silber {
	
	ИначеЕсли ДопПараметры.Свойство("ИдентификаторВариантЗакупок") Тогда
		
		Если Результат <> Неопределено Тогда
			текСтрока = ВариантыЗакупки.НайтиПоИдентификатору(ДопПараметры.ИдентификаторВариантЗакупок);
			текСтрока.АдресДоставкиДляПоставщика = Результат.Представление;
		КонецЕсли;
	
	// } silber
	
	Иначе
		Объект.АдресДоставки = Объект.БП_АдресДоставкиСсылка.Представление;
		Объект.АдресДоставкиЗначенияПолей = Объект.БП_АдресДоставкиСсылка.ЗначенияПолей;
		БП_ЗаполнитьСпискиВыбораАдресовДоставкиПолучателей();
		Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
			Объект.ЗонаДоставки = ПолучитьЗонуДоставкиДляАдреса(Объект.БП_АдресДоставкиПеревозчикаСсылка);	
		Иначе
			Объект.ЗонаДоставки = ПолучитьЗонуДоставкиДляАдреса(Объект.БП_АдресДоставкиСсылка);	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


//Богушевич--------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура БП_АдресДоставкиОбработкаВыбораКлиент(Элемент,ВыбранноеЗначение)
	
	Если Найти(Элемент.Имя,"Перевозчик") И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Ссылка") Тогда
		Объект.БП_АдресДоставкиПеревозчикаСсылка = ВыбранноеЗначение.Ссылка
	ИначеЕсли Найти(Элемент.Имя,"Получат") И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Ссылка") Тогда
		Объект.БП_АдресДоставкиСсылка = ВыбранноеЗначение.Ссылка
	КонецЕсли;
	
КонецПроцедуры
//конец-------------------------------------------------------------------------------------------------------------


&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры
&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры

//Богушевич доработка адресов доставки------------------------------------------------------------------------------------------
&НаСервере
Процедура ЗаполнитьСпискиВыбораАдресовДоставкиПолучателей()
	
	ЗаполнитьСписокВыбораАдресаДоставкиПолучателя(Элементы.АдресДоставкиПолучателя);
	ЗаполнитьСписокВыбораАдресаДоставкиПолучателя(Элементы.АдресДоставкиПолучателя1);
	ЗаполнитьСписокВыбораАдресаДоставкиПолучателя(Элементы.АдресДоставкиПолучателя2);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораАдресаДоставкиПеревозчика()
	
	Элементы.АдресДоставкиПеревозчика.СписокВыбора.Очистить();
	Объект.АдресДоставкиПеревозчика = ""; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БП_АдресаДоставкиКонтрагентов.Ссылка,
		|	БП_АдресаДоставкиКонтрагентов.Партнер,
		|	БП_АдресаДоставкиКонтрагентов.Контрагент,
		|	БП_АдресаДоставкиКонтрагентов.ЗначенияПолей,
		|	БП_АдресаДоставкиКонтрагентов.Представление,
		|	БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо,
		|	БП_АдресаДоставкиКонтрагентов.ДополнительнаяИнформация,
		|	БП_АдресаДоставкиКонтрагентов.ЗонаДоставки
		|ИЗ
		|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
		|ГДЕ
		|	БП_АдресаДоставкиКонтрагентов.Партнер = &Партнер
		|	И БП_АдресаДоставкиКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Партнер", Объект.ПеревозчикПартнер);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сткРезультата = Новый Структура(",,,,ДополнительнаяИнформацияПоДоставке,ЗонаДоставки",);
		сткРезультата.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);			
		сткРезультата.Вставить("АдресДоставки",ВыборкаДетальныеЗаписи.Представление);			
		сткРезультата.Вставить("АдресДоставкиЗначенияПолей",ВыборкаДетальныеЗаписи.ЗначенияПолей);			
		сткРезультата.Вставить("ВремяДоставкиС",Дата(1,1,1));			
		сткРезультата.Вставить("ВремяДоставкиПо",Дата(1,1,1));			
		сткРезультата.Вставить("ДополнительнаяИнформацияПоДоставке",ВыборкаДетальныеЗаписи.ДополнительнаяИнформация);			
		сткРезультата.Вставить("КонтактноеЛицо",ВыборкаДетальныеЗаписи.КонтактноеЛицо);			
		сткРезультата.Вставить("ЗонаДоставки",ВыборкаДетальныеЗаписи.ЗонаДоставки);
		
		Элементы.АдресДоставкиПеревозчика.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление+" ("+Строка(ВыборкаДетальныеЗаписи.Контрагент)+")");
	КонецЦикла;
	Если Элементы.АдресДоставкиПеревозчика.СписокВыбора.Количество() Тогда
		текЭлементСписка = Элементы.АдресДоставкиПеревозчика.СписокВыбора.Получить(0);
		Объект.АдресДоставкиПеревозчика = текЭлементСписка.Значение.АдресДоставки;
		Объект.АдресДоставкиПеревозчикаЗначенияПолей = текЭлементСписка.Значение.АдресДоставкиЗначенияПолей;
		Объект.БП_АдресДоставкиПеревозчикаСсылка = текЭлементСписка.Значение.Ссылка;
	Иначе
		Объект.АдресДоставкиПеревозчика = "";
		Объект.АдресДоставкиПеревозчикаЗначенияПолей = "";
		Объект.БП_АдресДоставкиПеревозчикаСсылка = "";
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораАдресаДоставкиПолучателя(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	Объект.АдресДоставки = "";	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БП_АдресаДоставкиКонтрагентов.Ссылка,
		|	БП_АдресаДоставкиКонтрагентов.Партнер,
		|	БП_АдресаДоставкиКонтрагентов.Контрагент,
		|	БП_АдресаДоставкиКонтрагентов.ЗначенияПолей,
		|	БП_АдресаДоставкиКонтрагентов.Представление,
		|	БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо,
		|	БП_АдресаДоставкиКонтрагентов.ДополнительнаяИнформация,
		|	БП_АдресаДоставкиКонтрагентов.ЗонаДоставки
		|ИЗ
		|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
		|ГДЕ
		|	БП_АдресаДоставкиКонтрагентов.Партнер = &Партнер
		//|	И (БП_АдресаДоставкиКонтрагентов.Контрагент = &Контрагент
		//|		ИЛИ БП_АдресаДоставкиКонтрагентов.Контрагент = &ПустойКонтрагент)
		|	И БП_АдресаДоставкиКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	//Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	//Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сткРезультата = Новый Структура(",,,,ДополнительнаяИнформацияПоДоставке,ЗонаДоставки",);
		сткРезультата.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);			
		сткРезультата.Вставить("АдресДоставки",ВыборкаДетальныеЗаписи.Представление);			
		сткРезультата.Вставить("АдресДоставкиЗначенияПолей",ВыборкаДетальныеЗаписи.ЗначенияПолей);			
		сткРезультата.Вставить("ВремяДоставкиС",Дата(1,1,1));			
		сткРезультата.Вставить("ВремяДоставкиПо",Дата(1,1,1));			
		сткРезультата.Вставить("ДополнительнаяИнформацияПоДоставке",ВыборкаДетальныеЗаписи.ДополнительнаяИнформация);			
		сткРезультата.Вставить("КонтактноеЛицо",ВыборкаДетальныеЗаписи.КонтактноеЛицо);			
		сткРезультата.Вставить("ЗонаДоставки",ВыборкаДетальныеЗаписи.ЗонаДоставки);  
		Элемент.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	Если Элемент.СписокВыбора.Количество() Тогда
		текЭлементСписка = Элемент.СписокВыбора.Получить(0);
		Объект.АдресДоставки = текЭлементСписка.Значение.АдресДоставки;
		Объект.АдресДоставкиЗначенияПолей = текЭлементСписка.Значение.АдресДоставкиЗначенияПолей;
		Объект.БП_АдресДоставкиСсылка = текЭлементСписка.Значение.Ссылка;
	Иначе
		Объект.АдресДоставки = "";
		Объект.АдресДоставкиЗначенияПолей = "";
		Объект.БП_АдресДоставкиСсылка = "";
	КонецЕсли;
	

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
	//Богушевич доработка доставки --------------------------------------------------------------------------------------------
	ЗаполнитьСпискиВыбораАдресовДоставкиПолучателей();
	ЗаполнитьСписокВыбораАдресаДоставкиПеревозчика();
	//конец-------------------------------------------------------------------------------------------------------------------
КонецПроцедуры
&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйАдресДоставки(Команда)
	
	сткПараметров= Новый Структура();
	ДляПеревозчика = Ложь;
	Если ЭтаФорма.ТекущийЭлемент = Элементы.НовыйАдресДоставкиПеревозчика Тогда
		ДляПеревозчика = Истина;
		сткПараметров.Вставить("Партнер",Объект.ПеревозчикПартнер);
	Иначе		
		сткПараметров.Вставить("Партнер",Объект.Партнер);
		//сткПараметров.Вставить("Контрагент",Объект.Контрагент);
	КонецЕсли;
	//сткПараметров.Вставить("АдресДоставки",Объект.АдресДоставки);
	
	Оповещение = Новый ОписаниеОповещения("ОкончаниеДобавленияАдреса",ЭтаФорма,Новый Структура("ДляПеревозчика",ДляПеревозчика));
	
	ОткрытьФорму("Справочник.БП_АдресаДоставкиКонтрагентов.ФормаОбъекта",сткПараметров,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


//Богушевич доработка адресов доставки------------------------------------------------------------------------------------------
&НаСервере
Процедура БП_ЗаполнитьСписокВыбораАдресаДоставкиПеревозчика()
	
	Элементы.АдресДоставкиПеревозчика.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БП_АдресаДоставкиКонтрагентов.Ссылка,
		|	БП_АдресаДоставкиКонтрагентов.Партнер,
		|	БП_АдресаДоставкиКонтрагентов.Контрагент,
		|	БП_АдресаДоставкиКонтрагентов.ЗначенияПолей,
		|	БП_АдресаДоставкиКонтрагентов.Представление,
		|	БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо,
		|	БП_АдресаДоставкиКонтрагентов.ДополнительнаяИнформация,
		|	БП_АдресаДоставкиКонтрагентов.ЗонаДоставки
		|ИЗ
		|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
		|ГДЕ
		|	БП_АдресаДоставкиКонтрагентов.Партнер = &Партнер
		|	И БП_АдресаДоставкиКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Партнер", Объект.ПеревозчикПартнер);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сткРезультата = Новый Структура(",,,,ДополнительнаяИнформацияПоДоставке,ЗонаДоставки",);
		сткРезультата.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);			
		сткРезультата.Вставить("АдресДоставки",ВыборкаДетальныеЗаписи.Представление);			
		сткРезультата.Вставить("АдресДоставкиЗначенияПолей",ВыборкаДетальныеЗаписи.ЗначенияПолей);			
		сткРезультата.Вставить("ВремяДоставкиС",Дата(1,1,1));			
		сткРезультата.Вставить("ВремяДоставкиПо",Дата(1,1,1));			
		сткРезультата.Вставить("ДополнительнаяИнформацияПоДоставке",ВыборкаДетальныеЗаписи.ДополнительнаяИнформация);			
		сткРезультата.Вставить("КонтактноеЛицо",ВыборкаДетальныеЗаписи.КонтактноеЛицо);			
		сткРезультата.Вставить("ЗонаДоставки",ВыборкаДетальныеЗаписи.ЗонаДоставки);
		
		Элементы.АдресДоставкиПеревозчика.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление+" ("+Строка(ВыборкаДетальныеЗаписи.Контрагент)+")");
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура БП_ЗаполнитьСпискиВыбораАдресовДоставкиПолучателей()
	
	Элементы.АдресДоставкиПолучателя.СписокВыбора.Очистить();
	Элементы.АдресДоставкиПолучателя1.СписокВыбора.Очистить();
	Элементы.АдресДоставкиПолучателя2.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БП_АдресаДоставкиКонтрагентов.Ссылка,
		|	БП_АдресаДоставкиКонтрагентов.Партнер,
		|	БП_АдресаДоставкиКонтрагентов.Контрагент,
		|	БП_АдресаДоставкиКонтрагентов.ЗначенияПолей,
		|	БП_АдресаДоставкиКонтрагентов.Представление,
		|	БП_АдресаДоставкиКонтрагентов.КонтактноеЛицо,
		|	БП_АдресаДоставкиКонтрагентов.ДополнительнаяИнформация,
		|	БП_АдресаДоставкиКонтрагентов.ЗонаДоставки
		|ИЗ
		|	Справочник.БП_АдресаДоставкиКонтрагентов КАК БП_АдресаДоставкиКонтрагентов
		|ГДЕ
		|	БП_АдресаДоставкиКонтрагентов.Партнер = &Партнер
		//|	И (БП_АдресаДоставкиКонтрагентов.Контрагент = &Контрагент
		//|		ИЛИ БП_АдресаДоставкиКонтрагентов.Контрагент = &ПустойКонтрагент)
		|	И БП_АдресаДоставкиКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
//	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
//	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сткРезультата = Новый Структура(",,,,ДополнительнаяИнформацияПоДоставке,ЗонаДоставки",);
		сткРезультата.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);			
		сткРезультата.Вставить("АдресДоставки",ВыборкаДетальныеЗаписи.Представление);			
		сткРезультата.Вставить("АдресДоставкиЗначенияПолей",ВыборкаДетальныеЗаписи.ЗначенияПолей);			
		сткРезультата.Вставить("ВремяДоставкиС",Дата(1,1,1));			
		сткРезультата.Вставить("ВремяДоставкиПо",Дата(1,1,1));			
		сткРезультата.Вставить("ДополнительнаяИнформацияПоДоставке",ВыборкаДетальныеЗаписи.ДополнительнаяИнформация);			
		сткРезультата.Вставить("КонтактноеЛицо",ВыборкаДетальныеЗаписи.КонтактноеЛицо);			
		сткРезультата.Вставить("ЗонаДоставки",ВыборкаДетальныеЗаписи.ЗонаДоставки);  
		Элементы.АдресДоставкиПолучателя.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление);
		Элементы.АдресДоставкиПолучателя1.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление);
		Элементы.АдресДоставкиПолучателя2.СписокВыбора.Добавить(сткРезультата,ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
	

КонецПроцедуры
// silber {
Процедура ЗаполнитьСпискиВыбораАдресовДоставкиВариантаЗакупки(текПоставщик)
	
	Список = Элементы.ВариантыЗакупкиАдресДоставкиДляПоставщика.СписокВыбора;
	Список.Очистить();
	
	Если Не текПоставщик.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Представление ИЗ Справочник.БП_АдресаДоставкиКонтрагентов ГДЕ Партнер = &Партнер И Не ПометкаУдаления";
		Запрос.УстановитьПараметр("Партнер", текПоставщик);
		
		Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Представление"))

	КонецЕсли;
		
КонецПроцедуры
// } silber

//Богушевич--------------------------------------------------------------------------------------------------------


&НаСервере
Процедура ОкончаниеДобавленияАдреса(Результат,ДопПараметры)         Экспорт
	
	БП_ЗаполнитьСпискиВыбораАдресовДоставкиПолучателей();
	БП_ЗаполнитьСписокВыбораАдресаДоставкиПеревозчика();
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если ДопПараметры.ДляПеревозчика Тогда
			Объект.БП_АдресДоставкиПеревозчикаСсылка = Результат;
			Объект.АдресДоставкиПеревозчика = Результат.Представление;
			Объект.АдресДоставкиПеревозчикаЗначенияПолей = Результат.ЗначенияПолей;
		Иначе
			Объект.БП_АдресДоставкиСсылка = Результат;
			Объект.АдресДоставки = Результат.Представление;
			Объект.АдресДоставкиЗначенияПолей = Результат.ЗначенияПолей;
		КонецЕсли;	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура БП_ЗаполнитьРеквизитыДоставкиПолучателяСервер()
	
	Если Элементы.АдресДоставкиПолучателя.СписокВыбора.Количество() Тогда
		текЭлементСписка = Элементы.АдресДоставкиПолучателя.СписокВыбора.Получить(0);
		Объект.АдресДоставки = текЭлементСписка.Значение.АдресДоставки;
		Объект.АдресДоставкиЗначенияПолей = текЭлементСписка.Значение.АдресДоставкиЗначенияПолей;
		Объект.БП_АдресДоставкиСсылка = текЭлементСписка.Значение.Ссылка;
		Объект.ЗонаДоставки = текЭлементСписка.Значение.Ссылка.ЗонаДоставки;
	Иначе
		Объект.АдресДоставки = "";
		Объект.АдресДоставкиЗначенияПолей = "";
		Объект.БП_АдресДоставкиСсылка = "";
		Объект.ЗонаДоставки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БП_ЗаполнитьРеквизитыДоставкиПеревозчикаСервер()
	
	Если Элементы.АдресДоставкиПеревозчика.СписокВыбора.Количество() Тогда
		текЭлементСписка = Элементы.АдресДоставкиПеревозчика.СписокВыбора.Получить(0);
		Объект.АдресДоставкиПеревозчика = текЭлементСписка.Значение.АдресДоставки;
		Объект.АдресДоставкиПеревозчикаЗначенияПолей = текЭлементСписка.Значение.АдресДоставкиЗначенияПолей;
		Объект.БП_АдресДоставкиПеревозчикаСсылка = текЭлементСписка.Значение.Ссылка;
		Объект.ЗонаДоставки = текЭлементСписка.Значение.Ссылка.ЗонаДоставки;
	Иначе
		Объект.АдресДоставкиПеревозчика = "";
		Объект.АдресДоставкиПеревозчикаЗначенияПолей = "";
		Объект.БП_АдресДоставкиПеревозчикаСсылка = "";
		Объект.ЗонаДоставки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗонуДоставкиДляАдреса(АдресСсылка)
	Возврат  АдресСсылка.ЗонаДоставки;
КонецФункции





#КонецОбласти