&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И Не Параметры.Свойство("Основание") Тогда
			ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
		КонецЕсли;
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьОтметкуНезаполненного();
	
	УточнитьСписокХозяйственныхОпераций();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	ОбновитьНадписьЗеркальныйПлатеж();
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// КомандыЭДО
	ОбменСБанками.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец КомандыЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Объект.ДокументОснование);
		
		ТекущаяДата = Объект.Дата;
		ПрименениеПриказа107н = Объект.Дата >= ДатаНачалаПримененияПриказа107н;
		
		Если ПериодАвансовогоОтчета = "Через неделю" Тогда
			Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборЗаявокВДокументыОплаты" Тогда
		
		ОбработкаПодбораИзЗаявок(РезультатВыбора.АдресЗаявокВХранилище);
		
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РанееСовершенныеПлатежи" Тогда
		
		Если Объект.БанковскийСчет <> РезультатВыбора.БанковскийСчет Тогда
			Объект.БанковскийСчет = РезультатВыбора.БанковскийСчет;
			БанковскийСчетПриИзменении(Элементы.БанковскийСчет);
		КонецЕсли;
		
		ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика" Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора);
		УстановитьНадписьРеквизитыПлательщика();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	Если Не ТекущийОбъект.ПроведеноБанком Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
	КонецЕсли;
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту")
			И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета") Тогда
			
			ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
				ЭтаФорма,
				Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Иначе
			ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СписаниеБезналичныхДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") Тогда 
		Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) И Не СоответствуетЗеркальномуПлатежу Тогда	
			ПоказатьВопрос(Новый ОписаниеОповещения("ПривестиВСоответствиеЗеркальныйПлатежЗавершение", ЭтотОбъект, Ложь), 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Привести в соответствие %1?'"),
					ЗеркальныйПлатежСсылка), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбновитьНадписьЗеркальныйПлатеж();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) 
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		СоответствуетЗеркальномуПлатежу = Документы.СписаниеБезналичныхДенежныхСредств.СоответствуетЗеркальномуПлатежу(
			Объект.Ссылка,ЗеркальныйПлатежСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "ОтправленоDirectBank" Тогда
		ОбработатьЗавершениеВыгрузкиПрямойОбмен(Параметр);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	ДатаПриИзмененииСервер();
	
	ПересчитатьДатуАвансовогоОтчета();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроведенияБанкомПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведеноБанкомПриИзменении(Элемент)
	
	Если Не Объект.ПроведеноБанком Тогда
		Объект.ДатаПроведенияБанком = Неопределено;
		ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ДатаПроведенияБанком) Тогда
			Объект.ДатаПроведенияБанком = Объект.Дата;
		Иначе
			ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
	
	РазрешеныПлатежиБезУказанияЗаявок =
		СтруктураРеквизитов.РазрешитьПлатежиБезУказанияЗаявок
		Или Объект.НеКонтролироватьЗаполнениеЗаявки
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;
	
	Если Не ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		Если Объект.Валюта <> СтруктураРеквизитов.Валюта Тогда
			ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		КонецЕсли;
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
		
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пересчитать суммы в документе в валюту %1?'"),
			СтруктураРеквизитов.Валюта);
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать'"));
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект, Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		Если ТекущаяВалюта <> ДополнительныеПараметры.СтруктураРеквизитов.Валюта Тогда
			ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		КонецЕсли;
		БанковскийСчетПриИзмененииСервер(ДополнительныеПараметры.СтруктураРеквизитов, Истина);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
	Иначе
		
		Объект.БанковскийСчет = ТекущийБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	БанковскийСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	
	СуммаДокументаПриИзмененииФрагмент();
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Для каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаРасшифровка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	СуммаДокументаПриИзмененииСервер();
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда
		РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПолучательПриИзменении(Элемент)
	
	БанковскийСчетПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ВалютаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаКонвертацииПриИзмененииСервер()
	
	УстановитьВозможныеЗначенияСчетаПолучателя();
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПослеКонвертацииПриИзменении(Элемент)
	
	СуммаПослеКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СуммаПослеКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 И Объект.СуммаДокумента = 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации / Объект.КурсКонвертации;
		Иначе
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации * Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = ?(Объект.СуммаДокумента <> 0, Объект.СуммаПослеКонвертации / Объект.СуммаДокумента, 0);
		Иначе
			Объект.КурсКонвертации = ?(Объект.СуммаПослеКонвертации <> 0, Объект.СуммаДокумента / Объект.СуммаПослеКонвертации, 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежногоДокументаПриИзменении(Элемент)
	
	ТипПлатежногоДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТипПлатежногоДокументаПриИзмененииСервер()
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
		
		Объект.НеКонтролироватьЗаполнениеЗаявки = Истина;
		РазрешеныПлатежиБезУказанияЗаявок = Истина;
		
		Объект.ПроведеноБанком = Истина;
		Объект.ДатаПроведенияБанком = Объект.Дата;
	Иначе
		Объект.НеКонтролироватьЗаполнениеЗаявки = Ложь;
		РазрешеныПлатежиБезУказанияЗаявок =
			Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).РазрешитьПлатежиБезУказанияЗаявок
			Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	ПеречислениеВБюджетПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("Почтой");
	ДанныеВыбора.Добавить("Телеграфом");
	ДанныеВыбора.Добавить("Срочно");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСБанкамиКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаявкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокЗаявок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокЗаявок[0].Значение);
	Иначе
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЗаявок,
				НСтр("ru='Заявки на расход ДС (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоЗаявкамПриИзменении(Элемент)
	
	ПриИзмененииОплатыПоНесколькимЗаявкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаПриИзменении(Элемент)
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ДоДаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату отчета по выдаваемому авансу'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") И ВыбранноеЗначение <> "ДоДаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < Объект.Дата Тогда
			ВыбраннаяДата = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ВыбраннаяДата;
		ПериодАвансовогоОтчета = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
		Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(ТекущаяДата(), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	ПараметрыФормы.Вставить("ВидПеречисленияВБюджет", Объект.ВидПеречисленияВБюджет);
	ПараметрыФормы.Вставить("КодБК",                  Объект.КодБК);
	ПараметрыФормы.Вставить("КодОКАТО",               Объект.КодОКАТО);
	ПараметрыФормы.Вставить("ПоказательДаты",         Объект.ПоказательДаты);
	ПараметрыФормы.Вставить("ПоказательНомера",       Объект.ПоказательНомера);
	ПараметрыФормы.Вставить("ПоказательОснования",    Объект.ПоказательОснования);
	ПараметрыФормы.Вставить("ПоказательПериода",      Объект.ПоказательПериода);
	ПараметрыФормы.Вставить("ПоказательТипа",         Объект.ПоказательТипа);
	ПараметрыФормы.Вставить("СтатусСоставителя",      Объект.СтатусСоставителя);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация",  Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("ПрименениеПриказа107н",  ПрименениеПриказа107н);
	ПараметрыФормы.Вставить("ПрименениеПриказа126н",  ПрименениеПриказа126н);
	ПараметрыФормы.Вставить("ТекущаяДата",            ТекущаяДата);
	
	Оповещение = Новый ОписаниеОповещения("НадписьРеквизитыПлатежаВБюджетНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.РеквизитыПлатежаВБюджет",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлатежаВБюджетНажатиеЗавершение(РеквизитыПлатежаВБюджет, ДополнительныеПараметры) Экспорт
	
	Если РеквизитыПлатежаВБюджет <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлатежаВБюджет);
		
		УправлениеПоказателямиПлатежаВБюджет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПлатежаПриИзменении(Элемент)
	
	Если Объект.ПеречислениеВБюджет Тогда
		ОчиститьСообщения();
		ПроверитьРеквизитыБюджетаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПо275ФЗПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРасшифровка И Не ПереключательРасшифровки Тогда
		РасшифровкаПлатежаПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеркальныйПлатежНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ЗеркальныйПлатежСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипНалогаПриИзмененииНаСервере()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	
	УправлениеЭлементамиФормы();
	
	
КонецПроцедуры // ТипНалогаПриИзмененииНаСервере()

&НаКлиенте
Процедура ТипНалогаПриИзменении(Элемент)
	
	ТипНалогаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПоВедомостямПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРеквизитыПлательщикаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("Объект",         Объект);
	СтруктураПараметров.Вставить("ЮрФизЛицо",      ЮрФизЛицо);
	
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.РеквизитыПлательщика", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатие(Элемент)
	
	Модифицированность = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		ПараметрыФормы.Вставить("Контрагент",            ОрганизацияПолучатель);
	Иначе
		ПараметрыФормы.Вставить("Контрагент",            Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ГруппаФинансовогоУчета",  Объект.ГруппаФинансовогоУчета);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("Договор",                 Объект.Договор);
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыФормы.Вставить("ДокументСсылка",          Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьРасшифровкуВоВременноеХранилище());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораРеквизитовОбъектаРасчетовПлатежа", 
		ПараметрыФормы,
		ЭтаФорма, ,
		, ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ГруппаФинансовогоУчета  = Результат.ГруппаФинансовогоУчета;
	Объект.НаправлениеДеятельности = Результат.НаправлениеДеятельности;
	Объект.Договор                 = Результат.Договор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		СтруктураОтбора.Вставить("ВалютаВзаиморасчетов", Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("РежимВыбора", Истина);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") 
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		СтруктураОтбора.Вставить("ОрганизацияПолучатель", ОрганизацияПолучатель);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
		ОткрытьФорму("Справочник.ДоговорыМеждуОрганизациями.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование,
		СтатьяДвиженияДенежныхСредств);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаТаблицы, Объект.ХозяйственнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияЗаказПриИзменении(Элемент)
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	
	ОплатаМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию");
	ВозвратМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	Если ОплатаМеждуОрганизациями Или ВозвратМеждуОрганизациями Тогда
		МассивОрганизаций = Новый Массив();
		МассивОрганизаций.Добавить(Объект.Организация);
		МассивОрганизаций.Добавить(ОрганизацияПолучатель);
		
		ЗначенияОтбора.Вставить("Организация", МассивОрганизаций);
		ЗначенияОтбора.Вставить("Контрагент", МассивОрганизаций);
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	Иначе
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ЭтоРасчетыСклиентами = ВозвратМеждуОрганизациями Или ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами = ЭтоРасчетыСклиентами;
	НастройкиВыбора.Валюта = Объект.Валюта;
	НастройкиВыбора.Сумма = Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сумма;
	
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ИсключаемыеСвойства = "";
		Если ВыбранноеЗначение.Свойство("СтатьяДвиженияДенежныхСредств")
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств) Тогда
			ИсключаемыеСвойства = "СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение, , ИсключаемыеСвойства);
		Модифицированность = Истина;
		
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЭтаСтрока.СуммаВзаиморасчетов = 0;
	ЭтаСтрока.ТипСуммыКредитаДепозита = ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг");
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(ЭтаСтрока.ДоговорКредитаДепозита,
																ЭтаСтрока.ВалютаВзаиморасчетов,
																ЭтаСтрока.СтатьяДвиженияДенежныхСредств,
																Объект.ПлатежиПо275ФЗ);
																
	Если Не ЗначениеЗаполнено(ЭтаСтрока.Партнер) Тогда
		ЭтаСтрока.Партнер = Партнер;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	РасшифровкаПлатежаЗаявкаПриИзмененииСервер(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ЗаявкаНаРасходованиеДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	ОбновитьИнформациюПоЗаявкам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС, ПлатежиПо275ФЗ)

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,
		"ВалютаВзаиморасчетов,ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПоступленияВыдачи,БанковскийСчет.ОтдельныйСчетГОЗ");
	Валюта = Реквизиты.ВалютаВзаиморасчетов;
	Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = Реквизиты.СтатьяДДСОсновногоДолга;
	Иначе
		СтатьяДДС = Реквизиты.СтатьяДДСПоступленияВыдачи;
	КонецЕсли;
	
	ПлатежиПо275ФЗ = Реквизиты.БанковскийСчетОтдельныйСчетГОЗ;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаявкаПриИзмененииСервер(ЗаявкаСсылка)
	
	КонтрагентЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаСсылка, "Контрагент");
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = КонтрагентЗаявки;
	ИначеЕсли ЗначениеЗаполнено(КонтрагентЗаявки) И Объект.Контрагент <> КонтрагентЗаявки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получатель платежа ""%1"" в документе оплаты не соответствует получателю ""%2"" в заявке!'"),
			Объект.Контрагент,
			КонтрагентЗаявки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаявкам();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОплатыПоНесколькимЗаявкам()
	
	Если Не Объект.ОплатаПоЗаявкам Тогда
		
		Для каждого Строка из Объект.РасшифровкаПлатежа Цикл
			Строка.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
		КонецЦикла;
		
		Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
		СписокЗаявок.Очистить();
		
	КонецЕсли;
	
	ИнициализироватьРасшифровкуПлатежа();
	УстановитьВидимость();
	УстановитьОтметкуНеЗаполненного();
	ОбновитьИнформациюПоЗаявкам();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		ИЛИ СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетРеглУчетаАктивовПассивовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
КонецПроцедуры


&НаКлиенте
Процедура РасшифровкаБезРазбиенияВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежаФЗ275ПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ЭтоПеречислениеВДругуюОрганизацию =
		(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчет", "Счет");
	Если ЭтоПеречислениеВДругуюОрганизацию Тогда
		СтруктураРеквизитов.Вставить("БанковскийСчетПолучатель", "Получатель");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", 
		ЭтотОбъект,
		Новый Структура("ЭтоПеречислениеВДругуюОрганизацию", ЭтоПеречислениеВДругуюОрганизацию));
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткам(Команда)
	
	
	Возврат;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзЗаявок(Команда)
	
	ЭтоВыдачаВДругуюОрганизацию = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"))
		Или (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	ЭтоВыдачаПодотчетнику = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
	ЭтоВнутренняяПередача = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
	ЭтоЗаймСотруднику = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику"));
	ЭтоВыплатаЗарплаты = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчет");
	Если ЭтоВыдачаВДругуюОрганизацию Тогда
		СтруктураРеквизитов.Вставить("БанковскийСчетПолучатель");
	ИначеЕсли ЭтоВыдачаПодотчетнику Или ЭтоЗаймСотруднику Тогда
		СтруктураРеквизитов.Вставить("ПодотчетноеЛицо");
	ИначеЕсли Не ЭтоВнутренняяПередача И Не ЭтоВыплатаЗарплаты Тогда
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьИзЗаявокЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлДляОбменаСБанком(Команда)
	
	Возврат // в УТ данный обработчик пустой
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуПлатежу(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",                  Объект.Ссылка);
	ПараметрыФормы.Вставить("БанковскийСчет",          Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("ПрименениеПриказа107н",   ПрименениеПриказа107н);
	ПараметрыФормы.Вставить("ПрименениеПриказа126н",   ПрименениеПриказа126н);
	
	Если ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		ПараметрыФормы.Вставить("ТипНалога", Объект.ТипНалога);
	КонецЕсли; 
	
	ОткрытьФорму(
		"ОбщаяФорма.РанееСовершенныеПлатежи",
		ПараметрыФормы,
		ЭтаФорма,
		);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтражениеВРеглУчете(Команда)
	
	
	Возврат; // В УТ не используется
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСумм(Команда)
	
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймов") Тогда
		ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСчетаФактуры(Команда)
	
	Возврат;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов


&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, Объект.ХозяйственнаяОперация);
	КонецЦикла;
	
	ОплатаПоКредитамДепозитам = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		
	УстановитьВозможныеЗначенияСчетаПолучателя();
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
	Если МассивРеквизитовОперации.Найти("Контрагент") = Неопределено Тогда
		Объект.Контрагент = Неопределено;
		Для каждого ТекСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекСтрокаРасшифровки.Заказ = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.ПодотчетноеЛицо);
	Иначе
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.Контрагент);
	КонецЕсли;
	
	Если Не СчетСоответствуетВладельцу Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер();
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		
		Объект.БанковскийСчетПолучатель = Неопределено;
		Если ТекущийБанковскийСчет <> Объект.БанковскийСчет Тогда
			
			СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
			БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
			ТекущийБанковскийСчет = Объект.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗаполнитьРеквизитыПлательщика();
		УстановитьНадписьРеквизитыПлательщика();
	КонецЕсли;
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	УправлениеЭлементамиФормы();
	
	ОбновитьНадписьЗеркальныйПлатеж();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ИзмениласьОрганизация = (Объект.Организация <> СтруктураРеквизитов.Организация);
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Если ИзмениласьОрганизация Тогда
			Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
		КонецЕсли;
		
		Если ТекущаяВалюта <> СтруктураРеквизитов.Валюта Тогда
			Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
			Объект.БанковскийСчетКонтрагента           = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
			Объект.БанковскийСчетПолучатель            = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			Объект.КассаПолучатель                     = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
		
		Если ИзмениласьОрганизация Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(СтруктураРеквизитов.Организация);
			ЮрФизЛицо = Реквизиты.ЮрФизЛицо;
			Если Объект.ПеречислениеВБюджет ИЛИ Не ПустаяСтрока(Объект.КодОКАТО) Тогда
				Если ПрименениеПриказа107н Тогда
					Объект.КодОКАТО = Реквизиты.КодПоОКТМО;
				Иначе
					Объект.КодОКАТО = Реквизиты.КодПоОКАТО;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИзмениласьОрганизация Тогда
			Если Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				И ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ИсключитьРеквизиты = ?(ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента), "БанковскийСчетКонтрагента", "");
				ЗаполнитьРеквизитыПлатежаВБюджет(ИсключитьРеквизиты);
			КонецЕсли;
		КонецЕсли;
		
		Объект.Организация = СтруктураРеквизитов.Организация;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Если ИзмениласьОрганизация
				Или Не ЗначениеЗаполнено(Объект.ИННПлательщика)
				Или Не ЗначениеЗаполнено(Объект.КПППлательщика) Тогда
				ЗаполнитьРеквизитыПлательщика();
			Иначе
				РеквизитыПлательщика = ДенежныеСредстваСервер.РеквизитыПлательщика(Объект);
				Объект.ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
			КонецЕсли;
			УстановитьНадписьРеквизитыПлательщика();
		КонецЕсли;
		
		ЗаполнятьСчетПоДоговору = ИзмениласьОрганизация Или НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента);
		ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору);
		
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита, Истина);
	КонецЕсли;
	
	Если ПересчитыватьСуммы Тогда
		ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, Объект.Валюта);
		
		СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	УстановитьВозможныеЗначенияСчетаПолучателя();
	
	УстановитьДоступностьОплатыПоЗаявкам();
	УстановитьВидимостьПоОплатеПоЗаявкамНаСервере();
	УстановитьОтметкуНезаполненного();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ТекущаяВалюта <> Объект.Валюта Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
	// Проверим филиалы
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	
	ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость);
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	Элементы.РасшифровкаБезРазбиенияОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПолучательПриИзмененииСервер()
	
	ЗаполнитьОрганизациюПолучателя();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Валюта) Тогда
			Объект.ВалютаКонвертации = СтруктураРеквизитов.Валюта;
			УстановитьВозможныеЗначенияСчетаПолучателя(Ложь);
			ПересчитатьКурсКонвертации();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
		КонецЦикла;
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.Контрагент,
				Объект.Валюта);
		КонецЕсли;
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
		
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		
		Если Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
			И ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗаполнитьРеквизитыПлатежаВБюджет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.ПодотчетноеЛицо,
				Объект.Валюта);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьВозможныеЗначенияСчетаПолучателя();
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.РаспоряжениеНаПеремещениеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеВБюджетПриИзмененииСервер()
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
		УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
		
		Если ПустаяСтрока(Объект.КодОКАТО) Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(Объект.Организация);
			Если ПрименениеПриказа107н Тогда
				Объект.КодОКАТО = Реквизиты.КодПоОКТМО;
			Иначе
				Объект.КодОКАТО = Реквизиты.КодПоОКАТО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПоказателямиПлатежаВБюджет();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду()
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Объект.СтатусСоставителя = "01";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		
		Объект.СтатусСоставителя = "06";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
		
		Объект.СтатусСоставителя = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода = "0";
		Объект.ПоказательНомера = "0";
		Объект.ПоказательДаты = "0";
		Объект.ПоказательТипа = ?(ПрименениеПриказа126н, "", "0");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКассыПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна, 
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация, 
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ДенежныеСредстваСервер.ЗаполнитьСписокПериодовВозникновенияРасходов(
		Элементы.РасшифровкаПлатежаПериодВозникновенияРасхода.СписокВыбора,
		Объект.Дата);
	
	Если Документы.СписаниеБезналичныхДенежныхСредств.ДействуетФедеральныйЗакон345ФЗ(Объект.Дата)
			<> Документы.СписаниеБезналичныхДенежныхСредств.ДействуетФедеральныйЗакон345ФЗ(ТекущаяДата) Тогда
		Объект.ОчередностьПлатежа = 0;
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПриИзмененииПравилПлатежейВБюджет(Объект, ТекущаяДата, Объект.Дата);
	
	ПрименениеПриказа107н = Объект.Дата >= ДатаНачалаПримененияПриказа107н;
	
	ТекущаяДата = Объект.Дата;
	
	ПрименениеПриказа126н = ДатаНачалаПримененияПриказа126н <> '00010101'
		И ТекущаяДата >= ДатаНачалаПримененияПриказа126н;
	
	Если Объект.ПроведеноБанком Тогда
		Объект.ДатаПроведенияБанком = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0],
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств, СтавкаНДС"));
			
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		Неопределено, // ПеречислениеВБюджет
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
		
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		"РасшифровкаПлатежа",
		"РасшифровкаБезРазбиения");
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам);
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.НадписьВалюта.Видимость = Не ИспользоватьНесколькоВалют;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОснование",
			"Видимость",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОснование",
			"Видимость",
			Истина);
	КонецЕсли;
	
	Элементы.СтраницаРасшифровка.Видимость =
		МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено
		И (Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) = Неопределено
			Или Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
			И Объект.ОплатаПоЗаявкам);
	
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Истина);
	КонецЕсли;
	
	УстановитьВидимостьПоОплатеПоЗаявкамНаСервере();
	УправлениеПоказателямиПлатежаВБюджет();
	
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(Объект.ХозяйственнаяОперация) И Не ИспользоватьСинхронизациюДанных Тогда
		Элементы.НомерВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		Элементы.ПодотчетноеЛицо.Заголовок				= НСтр("ru='Работник'");
		Элементы.БанковскийСчетКонтрагента.Заголовок	= НСтр("ru='Лицевой счет'");
	Иначе
		Элементы.БанковскийСчетКонтрагента.Заголовок	= НСтр("ru='Счет получателя'");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Элементы.БанковскийСчетПолучатель.Заголовок = НСтр("ru='Счет конвертации'");
	Иначе
		Элементы.БанковскийСчетПолучатель.Заголовок = НСтр("ru='Счет получатель'");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		Элементы.РасшифровкаБезРазбиенияПодразделение.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.РасшифровкаБезРазбиенияПодразделение.АвтоОтметкаНезаполненного = Неопределено;
	КонецЕсли;
	
	Элементы.ФормаВыгрузитьФайлДляОбменаСБанком.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту И
		ИспользоватьНачислениеЗарплаты И Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;
		
	Если ПереключательРасшифровки Тогда
		ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость);
	Иначе
		ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаБезРазбиенияЗаказ.Видимость);
	КонецЕсли;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	Элементы.РасшифровкаБезРазбиенияОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровкуПлатежа.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ"))
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;
		
	Элементы.ПериодАвансовогоОтчета.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Элементы.ДатаАвансовогоОтчета.Видимость = (Элементы.ПериодАвансовогоОтчета.Видимость И ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	Элементы.ПериодАвансовогоОтчета.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
	ПеречислениеВБюджет = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Элементы.ГруппаОтражениеВРеглУчете.Видимость = ПеречислениеВБюджет И ИспользоватьРеглУчет;
	
	
	Если Не ПеречислениеВБюджет Тогда
		Элементы.ПодобратьСчетаФактуры.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПеречислениеВБюджет.Видимость = Элементы.ПеречислениеВБюджет.Видимость;
	
	Если Элементы.СтраницаРасшифровка.Видимость
		Или (ПоддержкаПлатежей275ФЗ
			И (Не ИспользоватьНачислениеЗарплаты
				И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
					Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)) Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Элементы.НадписьРеквизитыПлательщика.Видимость =
		Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если РазрешеныПлатежиБезУказанияЗаявок И Не Объект.ОплатаПоЗаявкам Тогда
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВходящегоДокумента.ОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОплатыПоЗаявкам()
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) И Не РазрешеныПлатежиБезУказанияЗаявок Тогда
		Объект.ОплатаПоЗаявкам = Истина;
		Элементы.ОплатаПоЗаявкам.Доступность = Ложь;
	Иначе
		Элементы.ОплатаПоЗаявкам.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьДоступностьОплатыПоЗаявкам();
	УстановитьВидимость();
	УстановитьОтметкуНезаполненного();
	УстановитьВозможныеЗначенияСчетаПолучателя(Ложь);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчета(Объект, Элементы.БанковскийСчет);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.ЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаБезРазбиенияЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКонтрагента(Объект, Элементы.Контрагент);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита, Истина);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элементы.РасшифровкаПлатежаСтатьяРасходов);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьиРасходов(Объект, Элементы.РасшифровкаБезРазбиенияСтатьяРасходов);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.СтатьяДвиженияДенежныхСредств);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаПлатежаТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаБезРазбиенияТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаПлатежаСтавкаНДС);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаБезРазбиенияСтавкаНДС);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	Если Документы.СписаниеБезналичныхДенежныхСредств.ДействуетФедеральныйЗакон345ФЗ(Объект.Дата) Тогда
		Элементы.ОчередностьПлатежа.МаксимальноеЗначение = 5;
	Иначе
		Элементы.ОчередностьПлатежа.МаксимальноеЗначение = 6;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
	Элементы.ПроведеноБанком.ТолькоПросмотр =
		Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер;
		
	Элементы.ДатаПроведенияБанком.ТолькоПросмотр =
		Не Объект.ПроведеноБанком
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер;
	
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеПоказателямиПлатежаВБюджет()
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Элементы.НадписьРеквизитыПлатежаВБюджет.Видимость = Объект.ПеречислениеВБюджет;
	Элементы.ЗаполнитьПоПредыдущемуПлатежу.Видимость =
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Если МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Если Объект.ПеречислениеВБюджет Тогда
			Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИН'");
			Элементы.ИдентификаторПлатежа.Подсказка = НСтр("ru = 'Уникальный идентификатор начисления указывается, если предоставлен получателем (администратором) платежа.'");
			ПроверитьРеквизитыБюджетаНаСервере();
		Иначе
			Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИП'");
			Элементы.ИдентификаторПлатежа.Подсказка = НСтр("ru = 'Уникальный идентификатор платежа указывается, если это предусмотрено договором с получателем платежа.'");
		КонецЕсли;
	Иначе
		Элементы.ИдентификаторПлатежа.Заголовок = НСтр("ru = 'УИП'");
		Элементы.ИдентификаторПлатежа.Подсказка = НСтр("ru = 'Уникальный идентификатор платежа указывается, если это предусмотрено договором с получателем платежа.'");
	КонецЕсли;
	
	ПлатежиВБюджет.УстановитьНадписьРеквизитовПлатежаВБюджет(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПеречислениеТаможне(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыБезналичные(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПеречисленияНаДругойСчет(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииОплатаЛизингодателю(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОплатеПоЗаявкамНаСервере()
	
	Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.Видимость = Объект.ОплатаПоЗаявкам;
	Элементы.РасшифровкаБезРазбиенияЗаявкаНаРасходованиеДенежныхСредств.Видимость = Объект.ОплатаПоЗаявкам;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаявкам()
	
	ЕстьСтрокиСНезаполненнойЗаявкой = Ложь;
	СписокЗаявок.Очистить();
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"])
			И СписокЗаявок.НайтиПоЗначению(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]) = Неопределено Тогда
			СписокЗаявок.Добавить(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]);
		ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]) Тогда
			ЕстьСтрокиСНезаполненнойЗаявкой = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) И СписокЗаявок.НайтиПоЗначению(Объект.ЗаявкаНаРасходованиеДенежныхСредств) = Неопределено Тогда
		СписокЗаявок.Добавить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	КонецЕсли;
	
	Если СписокЗаявок.Количество() > 1 Тогда
		НадписьЗаголовокЗаявки = НСтр("ru = 'Всего заявок'") + ": " + СписокЗаявок.Количество();
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявкам'");
	ИначеЕсли СписокЗаявок.Количество() = 1 И Не ЕстьСтрокиСНезаполненнойЗаявкой Тогда
		НадписьЗаголовокЗаявки = СписокЗаявок[0].Значение;
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявке'");
	Иначе
		НадписьЗаголовокЗаявки = "";
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявке'");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ) И ТекСтрока.Заказ <> Объект.Ссылка;
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		ВидимостьАналитикПоХО = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
			);
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Видимость =         (ТекСтрока.ТипСтатьи = 1 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Видимость =  (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Доступность = ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Доступность = ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов)
			И Не ТипЗнч(ТекСтрока.АналитикаАктивовПассивов) = Тип("ПеречислениеСсылка.СтатьиБезАналитики");
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.ОграничениеТипа = 
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ТекСтрока.АналитикаРасходов)));
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.ОграничениеТипа = 
			Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ТекСтрока.АналитикаАктивовПассивов)));
		
		Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете.Видимость = (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО)
																						ИЛИ ОплатаНДСВБюджетПоОтдельнымОперациям;
		
	КонецЕсли;
	
	Элементы.ВалютаНДС.Видимость = Элементы.РасшифровкаБезРазбиенияСтавкаНДС.Видимость;
	
	СуммаНераспределено = ВзаиморасчетыСервер.НераспределенныйОстатокПлатежа(Объект);
	Если СуммаНераспределено = 0 Тогда
		Элементы.Договор.Видимость                               = Ложь;
		Элементы.ГруппаФинансовогоУчета.Видимость                = Ложь;
		Элементы.НаправлениеДеятельности.Видимость               = Ложь;
	Иначе
		УстановитьСвойстваПоляВводаДоговор();
		Элементы.ГруппаФинансовогоУчета.Видимость                = Истина;
		Элементы.НаправлениеДеятельности.Видимость               = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	ИспользоватьУчетПрочихАктивовПассивов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов");
	ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	ИспользоватьДоговорыМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	ИспользоватьДоговорыСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользоватьДоговорыСПоставщиками      = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	
	ОплатаПоКредитамДепозитам = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
		
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	ПрименениеПриказа107н = ТекущаяДата >= ДатаНачалаПримененияПриказа107н;
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	ПрименениеПриказа126н = ДатаНачалаПримененияПриказа126н <> '00010101' И ТекущаяДата >= ДатаНачалаПримененияПриказа126н;
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮрФизЛицо");
	КонецЕсли;
	
	РазрешеныПлатежиБезУказанияЗаявок =
		Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).РазрешитьПлатежиБезУказанияЗаявок
		Или Объект.НеКонтролироватьЗаполнениеЗаявки
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет) Тогда
		ДокументСсылка = Неопределено;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ДокументСсылка = Объект.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ДокументСсылка = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
		ПараметрыВыбораСтатьи = Новый Массив;
		ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
		
		Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не Объект.ПеречислениеВБюджет
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		И Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет().Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		ЗаполнитьРеквизитыПлатежаВБюджет("СтатьяДвиженияДенежныхСредств, БанковскийСчетКонтрагента");
	КонецЕсли;
	
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер(Ложь);
	
	УстановитьДоступностьОплатыПоЗаявкам();
	ИнициализироватьРасшифровкуПлатежа();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
	
	ДенежныеСредстваСервер.ЗаполнитьСписокПериодовВозникновенияРасходов(
		Элементы.РасшифровкаПлатежаПериодВозникновенияРасхода.СписокВыбора,
		Объект.Дата);
		
	ЗаполнитьСписокВыбораПериодов();
	ЗаполнитьОрганизациюПолучателя();
	УстановитьНадписьРеквизитыПлательщика();
	
	УправлениеЭлементамиФормы();
	ОбновитьИнформациюПоЗаявкам();
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, Объект.ПеречислениеВБюджет, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено
		Или Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
			И Не Объект.ОплатаПоЗаявкам Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)
	
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПолучателя()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			ОрганизацияПолучатель = СтруктураРеквизитов.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПлатежаВБюджетПоУмолчаниюСервер()
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
		Периодичность = "МС";
		НомерПериода = Месяц(ТекущаяДата);
		ГодПериода = Год(ТекущаяДата);
		Объект.ПоказательПериода = Периодичность
					+ "." 
					+ ?(СтрДлина(СокрЛП(НомерПериода)) = 1, "0" + НомерПериода, НомерПериода)
					+ "." 
					+ СтрЗаменить(Строка(ГодПериода), Символы.НПП, "");
				
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		Объект.ПоказательПериода = "";
		
	ИначеЕсли МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		
	Иначе
		Объект.ПеречислениеВБюджет = Ложь;
	КонецЕсли;
	
	УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер(ЗаполнятьСчетПоДоговору = Истина)
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора);
		
	Если ЗаполнятьСчетПоДоговору Тогда
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
		Если Объект.Валюта <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ВалютаДенежныхСредств") Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаПоСчетуПолучателя()
	
	Реквизиты = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
		Объект.БанковскийСчетКонтрагента);
	ТекстНазначенияПлатежа = Реквизиты.ТекстНазначения;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Объект.НазначениеПлатежа + "
			|" + ТекстНазначенияПлатежа;
	Иначе
		Объект.НазначениеПлатежа = ТекстНазначенияПлатежа;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет)
	
	Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	МассивПараметровВыбора = ПараметрыВыбораСтатьиДДС(ЭтаСтрока.ДоговорКредитаДепозита);
	Если ЗначениеЗаполнено(МассивПараметровВыбора) Тогда
		Элемент.ПараметрыВыбора = МассивПараметровВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСтатьиДДС(ДоговорКредитаДепозита)
	
	Возврат ДенежныеСредстваСервер.ПолучитьПараметрыВыбораСтатьиДДС(
		Объект,
		Новый Структура("ДоговорКредитаДепозита", ДоговорКредитаДепозита));
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораИзЗаявок(АдресЗаявокВХранилище)
	
	Объект.ОплатаПоЗаявкам = Истина;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств",
		"Видимость",
		Объект.ОплатаПоЗаявкам);
	
	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(АдресЗаявокВХранилище);
	
	ИспользуютсяОбъектыРасчетов = Элементы.РасшифровкаПлатежаПодборПоОстаткам.Видимость;
	СтруктураПоиска = Новый Структура("СтатьяДвиженияДенежныхСредств, ЗаявкаНаРасходованиеДенежныхСредств, Сумма");
	Если ИспользуютсяОбъектыРасчетов Тогда
		СтруктураПоиска.Вставить("Заказ");
	КонецЕсли;
	
	
	Для каждого СтрокаПлатежа из ТаблицаПлатежей Цикл
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			И Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ
		Тогда
			
			Для Каждого ТекСтрокаРасшифровки Из СтрокаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлатежа);
				Строки = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураПоиска);
				
				Если Строки.Количество() = 0 Тогда
					
					Строка = Объект.РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, СтрокаПлатежа);
					
					Если Не ЗначениеЗаполнено(Партнер) Тогда
						ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
					КонецЕсли;
					
					Строка.Партнер = Партнер;
					ПриДобавлениСтрокиРасшифровкиПлатежа(Строка, Объект.ХозяйственнаяОперация);
					Строка.Сумма = ТекСтрокаРасшифровки.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
			
		Иначе
		
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлатежа);
			Строки = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураПоиска);
			
			Если Строки.Количество() = 0 Тогда
				
				Строка = Объект.РасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаПлатежа);
				
				Если Не ЗначениеЗаполнено(Строка.Партнер) Тогда
					Если Не ЗначениеЗаполнено(Партнер) Тогда
						ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
					КонецЕсли;
					Строка.Партнер = Партнер;
				КонецЕсли;
				ПриДобавлениСтрокиРасшифровкиПлатежа(Строка, Объект.ХозяйственнаяОперация);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнформациюПоЗаявкам();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыБюджетаНаСервере()
	
	НомерСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "НомерСчета");
	Ошибка = ПлатежиВБюджетКлиентСервер.ПроверитьУИН(Объект.ИдентификаторПлатежа,
		ПлатежиВБюджетКлиентСервер.АдминистраторНачисленияФедеральныйОрганГосударственнойВласти(НомерСчетаКонтрагента));
		
	Если Не ПустаяСтрока(Ошибка) Тогда
		ШаблонТекста = НСтр("ru = '%1
			|Если УИН достоверно не известен, не указывайте его (очистите поле).'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Ошибка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка, , "ИдентификаторПлатежа", "Объект");
	КонецЕсли;
	
	// Проверяем дубли УИН
	ДублиУИН = ПлатежиВБюджет.ПроверитьДублиУИН(Объект.ИдентификаторПлатежа, Объект.Ссылка);
	
	Если ДублиУИН.Количество() > 0 Тогда
		// Информацию о дублях УИН выводим отдельно
		Для Каждого ОписаниеОшибки Из ДублиУИН Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Описание, , "ИдентификаторПлатежа", "Объект");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРанееСовершенномуПлатежу(РезультатВыбора)
	
	Объект.ПеречислениеВБюджет = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.ТипНалога) Тогда
		Объект.ТипНалога = РезультатВыбора.АналитикаАктивовПассивов;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора,, "БанковскийСчет");
	Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	Для Каждого СтрокаПлатежа Из Объект.РасшифровкаПлатежа Цикл
		СтрокаПлатежа.СтатьяДвиженияДенежныхСредств = РезультатВыбора.СтатьяДвиженияДенежныхСредств;
	КонецЦикла;	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "Подразделение");
	
	УправлениеПоказателямиПлатежаВБюджет();
	УстановитьНадписьРеквизитыПлательщика();
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможныеЗначенияСчетаПолучателя(ИзменятьСчетПолучатель = Истина)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|
	|ГДЕ
	|	(БанковскиеСчета.ВалютаДенежныхСредств = &Валюта ИЛИ НЕ &ОтбиратьПоВалюте)
	|	И (БанковскиеСчета.ВалютаДенежныхСредств <> &Валюта ИЛИ НЕ &ОтбиратьПоВалютеКонвертации)
	|	И (БанковскиеСчета.Владелец В (&Владелец) ИЛИ НЕ &ОтбиратьПоВладельцу)
	|	И БанковскиеСчета.Владелец НЕ В (&ФильтрВладельца)
	|	И БанковскиеСчета.Ссылка <> &БанковскийСчетОтправитель
	|");
	
	Запрос.УстановитьПараметр("БанковскийСчетОтправитель", Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("ОтбиратьПоВалютеКонвертации", Ложь);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			Запрос.УстановитьПараметр("Валюта", Объект.ВалютаКонвертации);
			Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
		Иначе
			Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
			Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
			Запрос.УстановитьПараметр("ОтбиратьПоВалютеКонвертации", Истина);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("Валюта", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты)
		И ЗначениеЗаполнено(Объект.БанковскийСчет)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("Владелец", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФильтрВладельца", Неопределено);
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		
			МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
			МассивВзаимосвязанныхОрганизаций.Добавить(Объект.Организация);
			Запрос.УстановитьПараметр("ФильтрВладельца", МассивВзаимосвязанныхОрганизаций);
		КонецЕсли;
	КонецЕсли;
	
	МассивСчетовПолучателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.БанковскийСчетПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивСчетовПолучателей);
	
	Если ИзменятьСчетПолучатель Тогда
		Если МассивСчетовПолучателей.Количество() = 1 Тогда
			
			Объект.БанковскийСчетПолучатель = МассивСчетовПолучателей[0];
			БанковскийСчетПолучательПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель)
			И МассивСчетовПолучателей.Найти(Объект.БанковскийСчетПолучатель) = Неопределено Тогда
			
			Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			БанковскийСчетПолучательПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("РасшифровкаПлатежа"));
	
	//
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Аналитики

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерВедомостиНаВыплатуЗарплаты.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВедомостиНаВыплатуЗарплаты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьСинхронизациюДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаОснование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОплатаПоЗаявкам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Дата проведения банком обязательна только если есть признак проведения банком

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроведенияБанком.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроведеноБанком");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОпераций;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость статьи расходов

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСтатьяРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьУчетПрочихАктивовПассивов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПодразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаказ.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<этот документ>'"));
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		ТекстСостоянияЭДО = ОбменСБанкамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(ИсключаяРеквизиты = "")
	
	ЗаполнитьПоСтатистике = Истина;
	
	
	Если ЗаполнитьПоСтатистике Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыПлатежа = ТекущийОбъект.ПодобратьРеквизитыПлатежаВБюджет(ИсключаяРеквизиты);
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.СтатьяРасходов) Тогда
				ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаРасшифровки, Объект.ХозяйственнаяОперация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьЗначенияПоказателейПлатежаВБюджетПоВиду();
	УправлениеПоказателямиПлатежаВБюджет();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииЯчейки(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорЛизингаПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация,
		Объект.Контрагент,
		Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(Договор, Ложь, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока, Объект.ХозяйственнаяОперация);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПлательщика()
	
	РеквизитыПлательщика = ДенежныеСредстваСервер.РеквизитыПлательщика(Объект);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлательщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьРеквизитыПлательщика()
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		НадписьРеквизитыПлательщика = ДенежныеСредстваСервер.НадписьРеквизитыПлательщика(
			Объект.ИННПлательщика, Объект.КПППлательщика, Объект.ТекстПлательщика, ЮрФизЛицо, Объект.ХозяйственнаяОперация);
	Иначе
		НадписьРеквизитыПлательщика = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЭтоПеречислениеВДругуюОрганизацию = ДополнительныеПараметры.ЭтоПеречислениеВДругуюОрганизацию;
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", ?(ЭтоПеречислениеВДругуюОрганизацию, ОрганизацияПолучатель, Объект.Контрагент));
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПодобратьИзЗаявокЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"Контрагент,
		|БанковскийСчетПолучатель,
		|ПодотчетноеЛицо,
		|Организация,
		|ХозяйственнаяОперация,
		|ХозяйственнаяОперацияПоЗарплате,
		|Валюта,
		|СуммаДокумента,
		|Дата");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	
	ПараметрыПодбора.Вставить("Ссылка",                              Объект.Ссылка);
	ПараметрыПодбора.Вставить("ФормаОплаты",                         ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная"));
	ПараметрыПодбора.Вставить("БанковскийСчетКасса",                 Объект.БанковскийСчет);
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище",             АдресПлатежейВХранилище);
	
	ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборЗаявокВДокументыОплаты",
		ПараметрыПодбора,
		ЭтаФорма,
		,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	
	СписокВыбораПериода.Добавить("Через неделю",     НСтр("ru='Через неделю'"));
	СписокВыбораПериода.Добавить("Через две недели", НСтр("ru='Через две недели'"));
	СписокВыбораПериода.Добавить("Через месяц",      НСтр("ru='Через месяц'"));
	СписокВыбораПериода.Добавить("ДоДаты",           НСтр("ru='До даты...'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		ПериодАвансовогоОтчета = "Через неделю";
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(НачалоДня(Объект.Дата), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		Иначе
			ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Дата"));
			ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
			
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасшифровкиПлатежа(Строка, ХозОперация)
	
	Если ХозОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет") Тогда
		Строка["СтатьяРасходов"] = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка");
	Иначе
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	КонецЕсли;
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатуАвансовогоОтчета()
	
	Если ПериодАвансовогоОтчета = "Через неделю" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через две недели" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 14 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через месяц" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 30 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "ДоДаты" Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), НСтр("ru = 'Дата отчета по выдаваемому авансу'"), ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
		Если ПериодАвансовогоОтчета < Объект.Дата Тогда
			ПериодАвансовогоОтчета = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ПериодАвансовогоОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
		Элементы.РасшифровкаПлатежаСтатьяРасходов.Заголовок      = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьНадписьЗеркальныйПлатеж()
	
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		Элементы.НадписьЗеркальныйПлатеж.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.НадписьЗеркальныйПлатеж.Видимость = Истина;
	КонецЕсли;
	
	ЗеркальныйПлатежСсылка = Документы.СписаниеБезналичныхДенежныхСредств.НайтиЗеркальныйПлатеж(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ЗеркальныйПлатежСсылка) Тогда
		Элементы.НадписьЗеркальныйПлатеж.Гиперссылка = Истина;
		СоответствуетЗеркальномуПлатежу = Документы.СписаниеБезналичныхДенежныхСредств.СоответствуетЗеркальномуПлатежу(
			Объект.Ссылка,ЗеркальныйПлатежСсылка);
		Если СоответствуетЗеркальномуПлатежу Тогда
			Элементы.НадписьЗеркальныйПлатеж.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			НадписьЗеркальныйПлатеж = ЗеркальныйПлатежСсылка;
		Иначе
			Элементы.НадписьЗеркальныйПлатеж.ЦветТекста = ЦветаСтиля.ЦветТекстаПредупреждение;
			НадписьЗеркальныйПлатеж = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (есть различия)'"),ЗеркальныйПлатежСсылка);
		КонецЕсли;
	Иначе
		Элементы.НадписьЗеркальныйПлатеж.ЦветТекста = ЦветаСтиля.ЦветТекстаПредупреждение; 
		Элементы.НадписьЗеркальныйПлатеж.Гиперссылка = Ложь;
		НадписьЗеркальныйПлатеж = НСтр("ru = '<Поступление безналичных денежных средств не найдено.>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиВСоответствиеЗеркальныйПлатежЗавершение(РезультатВопроса, ЗеркальныйЗачетОплатыМеждуОрганизациями) Экспорт
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		ПривестиВСоответствиеЗеркальныйПлатежНаСервере();
	Иначе
		ОбновитьНадписьЗеркальныйПлатеж();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиВСоответствиеЗеркальныйПлатежНаСервере()
	
	ЗеркальныйПлатежОбъект = ЗеркальныйПлатежСсылка.ПолучитьОбъект();
	Успешно = Документы.СписаниеБезналичныхДенежныхСредств.ПривестиВСоответствиеЗеркальныйПлатеж(Объект.Ссылка,ЗеркальныйПлатежОбъект);
	
	Если Успешно Тогда
		Попытка
			ЗеркальныйПлатежОбъект.Записать(?(ЗеркальныйПлатежОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			ОбновитьНадписьЗеркальныйПлатеж();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Списание безналичных денежных средств, зеркальное изменение связанного документа.'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетКонтрагентаПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ЗаполнитьНазначениеПлатежаПоСчетуПолучателя();
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначениеПлатежа(Команда)
	
	ЗаполнитьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаСервер()
	
	ДенежныеСредстваСервер.ЗаполнитьТекстНазначенияПлатежа(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыгрузкиПрямойОбмен(Платежи)
	
	ДенежныеСредстваСервер.ЗаписатьДатуВыгрузкиПлатежей(Платежи, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить());
КонецФункции

&НаСервере
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов()
	ВзаиморасчетыСервер.СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПоляВводаДоговор()
	
	ЭтоИнтеркампани = ВзаиморасчетыСервер.ХозяйственнаяОперацияИнтеркампани(Объект.ХозяйственнаяОперация);
	
	Если ЭтоИнтеркампани И ИспользоватьДоговорыМеждуОрганизациями 
		ИЛИ ВзаиморасчетыСервер.ХозяйственнаяОперацияСКлиентом(Объект.ХозяйственнаяОперация) И ИспользоватьДоговорыСКлиентами
		ИЛИ ВзаиморасчетыСервер.ХозяйственнаяОперацияСПоставщиком(Объект.ХозяйственнаяОперация) И ИспользоватьДоговорыСПоставщиками Тогда
		Элементы.Договор.Видимость = Истина;
	Иначе
		Элементы.Договор.Видимость = Ложь;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Если ЭтоИнтеркампани Тогда
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка");
			МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
		Иначе
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

#КонецОбласти
