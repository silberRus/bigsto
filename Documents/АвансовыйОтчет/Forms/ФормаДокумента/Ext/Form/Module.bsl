

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ИтогиПоВалютам;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьОплатуПоставщикамИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		РассчитатьСуммуДокумента();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.СтруктураПредприятия.Форма.ФормаВыбора" Тогда
		
		ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
			ДанныеСтроки.Подразделение = РезультатВыбора;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаТаблицы из Объект.КонвертацияВалюты Цикл
		Элементы.КонвертацияВалюты.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		СформироватьКурсТекстом();
	КонецЦикла;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		ДенежныеСредстваСервер.ПереоценитьДенежныеСредстваУПодотчетныхЛиц(Объект.Организация, Объект.Дата, Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_АвансовыйОтчет", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаписьКнигиПокупок" Тогда
		ОбновитьТекстЗаписиКнигиПокупок();
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Не Объект.Мультивалютный Тогда
		
		Если Получено < Объект.СуммаИзрасходовано Тогда
			ОстатокПерерасход = Объект.СуммаИзрасходовано - Получено;
			Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Перерасход'");
		Иначе
			ОстатокПерерасход = Получено - Объект.СуммаИзрасходовано;
			Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Остаток'");
		КонецЕсли;
	Иначе
		
		ИтогиПоВалютам = Новый Соответствие;
		Для каждого СтрокаТЧ из ТаблицаИтоговПоВалютам Цикл
			Если СтрокаТЧ.Получено <> 0 Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Получено, "Получено");
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЧ из Объект.ПрочиеРасходы Цикл
			Если СтрокаТЧ.Отменено Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Отклонено");
			Иначе
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЧ из Объект.ОплатаПоставщикам Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
		КонецЦикла;
		Для каждого СтрокаТЧ из Объект.КонвертацияВалюты Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, -СтрокаТЧ.Сумма, "Конвертировано");
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.ВалютаКонвертации, СтрокаТЧ.СуммаКонвертации, "Конвертировано");
		КонецЦикла;
		
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого КлючИЗначение из ИтогиПоВалютам Цикл
			СтрокаИтогов = КлючИЗначение.Значение;
			Если СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано <= СтрокаИтогов.Израсходовано Тогда
				СтрокаИтогов.Перерасход = СтрокаИтогов.Израсходовано - СтрокаИтогов.Получено - СтрокаИтогов.Конвертировано;
				СтрокаИтогов.Остаток = 0;
			Иначе
				СтрокаИтогов.Перерасход = 0;
				СтрокаИтогов.Остаток = СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано - СтрокаИтогов.Израсходовано;
			КонецЕсли;
			УдалитьСтроку = Истина;
			Для каждого КлючИЗначениеИтогов Из СтрокаИтогов Цикл
				Если КлючИЗначениеИтогов.Значение <> 0 Тогда
					УдалитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УдалитьСтроку Тогда
				УдаляемыеСтроки.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ИтогиПоВалютам.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МультивалютныеСуммы = СтрокаМультивалютныеСуммы();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗадаватьВопрос = Ложь;
	НайденныеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов > 0
			И СтрокаТаблицы.ВалютаВзаиморасчетов <> Объект.Валюта Тогда
			
			ЗадаватьВопрос = Истина;
			НайденныеСтроки.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадаватьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("НайденныеСтроки", НайденныеСтроки));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Очистить суммы взаиморасчетов?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			
		КонецЦикла;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	АктуализироватьЗакупкуПодДеятельность();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ЗаполнитьСуммуПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
	ЗаполнитьСуммуПолучено();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	ЗаполнитьСуммуПолучено();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстЗаписьКнигиПокупокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокЗаписейКнигиПокупок" Тогда
		
		СтруктураОтбор = Новый Структура(
			"ДокументОснование, ПометкаУдаления",
			Объект.Ссылка, Ложь);
		
		ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбор);
		
		ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВвестиНовуюЗаписьКнигиПокупок" Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		
		ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ДобавитьЗаписьКнигиПокупок" Тогда
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ДокументОснование", Объект.Ссылка);
		СтруктураОтбор.Вставить("Организация", Объект.Организация);
		СтруктураОтбор.Вставить("Подразделение", Объект.Подразделение);
		
		ПараметрыФормы = Новый Структура("Основание", СтруктураОтбор);
		
		ОткрытьФорму("Документ.ЗаписьКнигиПокупок.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоВалютПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	НесколькоВалютПриИзмененииНаСервере();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура НесколькоВалютПриИзмененииНаСервере()
	
	Объект.Мультивалютный = (НесколькоВалют = 1);
	
	Если Объект.Мультивалютный Тогда
		Для каждого СтрокаТЧ из Объект.ПрочиеРасходы Цикл
			СтрокаТЧ.Валюта = Объект.Валюта;
		КонецЦикла;
		Для каждого СтрокаТЧ из Объект.ОплатаПоставщикам Цикл
			СтрокаТЧ.Валюта = Объект.Валюта;
		КонецЦикла;
		Объект.Валюта = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСуммуПолучено();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура МультивалютныеСуммыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ТаблицаИтоговПоВалютам.Очистить();
	Для каждого КлючИЗначение из ИтогиПоВалютам Цикл
		НоваяСтрока = ТаблицаИтоговПоВалютам.Добавить();
		НоваяСтрока.Валюта = КлючИЗначение.Ключ;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",              ТолькоПросмотр);
	ПараметрыФормы.Вставить("АдресТаблицыИтоговПоВалютам", АдресТаблицыИтоговПоВалютам());
	
	ОткрытьФорму("Документ.АвансовыйОтчет.Форма.ИтогоПоВалютам",
		ПараметрыФормы,
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаПоставщикам

&НаКлиенте
Процедура ОплатаПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(
		СтрокаТаблицы.Заказ,
		Ложь); // ЭтоРасчетыСКлиентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамПоставщикПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, Ложь);

	Если СтрокаТаблицы = Неопределено
	 ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.Поставщик)
	 ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент)
	Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПоУмолчанию = ПолучитьКонтрагентаПартнераПоУмолчанию(СтрокаТаблицы.Поставщик);
	Если КонтрагентПоУмолчанию <> Неопределено Тогда
		СтрокаТаблицы.Контрагент = КонтрагентПоУмолчанию;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ОплатаПоставщикам);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.ОплатаПоставщикам);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	ЗначенияОтбора.Вставить("Партнер",               СтрокаТаблицы.Поставщик);
	ЗначенияОтбора.Вставить("Контрагент",            СтрокаТаблицы.Контрагент);
	ЗначенияОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"));
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент          = Объект.Ссылка;
	НастройкиВыбора.ИсключитьХозяйственнуюОперацию = Истина;
	НастройкиВыбора.ЗапретитьДоговорыПоДокументам  = Истина;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоставщикамВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Подразделение = Объект.Подразделение;
		ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		ПриДобавлениСтрокиРасходов(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
	СтрокаТаблицы = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна,
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация,
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.ПрочиеРасходы.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.ПрочиеРасходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.ПрочиеРасходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
		Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Сумма",               ТекущиеДанные.Сумма);
	ТекущаяСтрока.Вставить("СтавкаНДС",           ТекущиеДанные.СтавкаНДС);
	ТекущаяСтрока.Вставить("СуммаНДС",            ТекущиеДанные.СуммаНДС);
	ТекущаяСтрока.Вставить("СуммаСНДС",           ТекущиеДанные.СуммаСНДС);
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонвертацияВалюты

&НаКлиенте
Процедура КонвертацияВалютыВалютаПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыСуммаПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыСуммаКонвертацииПриИзменении(Элемент)
	
	СуммаКонвертацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыКурсПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияВалютыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура используется в автотесте процесса продаж.
//
&НаКлиенте
Процедура АвтоТест_ЗаполнитьПолученныеАвансы(Команда) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("АвтоТест_ЗаполнитьПолученныеАвансыЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.ПрочиеРасходы,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	
	Если Не Объект.Мультивалютный Тогда
		СтруктураРеквизитов.Вставить("Валюта");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Неопределено,
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонвертацию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьКонвертациюЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение,
		ЭтаФорма,
		Объект.КонвертацияВалюты,
		Новый Структура);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура ЗаполнитьПодразделение(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюРасходовАктивов(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборДляЗаполненияЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.ПрочиеРасходы.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элементы.ПрочиеРасходыСтатьяРасходов.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборДляЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.ПрочиеРасходы.ВыделенныеСтроки);
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.СтатьяРасходов = Результат;
		Элементы.ПрочиеРасходы.ТекущаяСтрока = Строка;
		ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАналитикуРасходов(Команда)
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В список ""Расходы"" не введено ни одной строки.'"));
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'В списке ""Расходы"" не выделено ни одной строки.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АналитикаВыборДляЗаполненияЗавершение", ЭтотОбъект);
	
	ФормаВыбораАналитики = Неопределено;
	
	Если Элементы.ПрочиеРасходы.ТекущиеДанные.ТипСтатьи = 1 Тогда
		ФормаВыбораАналитики = ФормаВыбораАналитикиАктивовПассивов(ТипЗнч(Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаРасходов));
	ИначеЕсли Элементы.ПрочиеРасходы.ТекущиеДанные.ТипСтатьи = 3 Тогда
		ФормаВыбораАналитики = ФормаВыбораАналитикиАктивовПассивов(ТипЗнч(Элементы.ПрочиеРасходы.ТекущиеДанные.АналитикаАктивовПассивов));
	КонецЕсли;
	
	Если ФормаВыбораАналитики <> Неопределено Тогда
		ОткрытьФорму(ФормаВыбораАналитики, , ЭтаФорма,,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормаВыбораАналитикиАктивовПассивов(ТипАналитики)
	
	МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
	Если МетаданныеАналитики <> Неопределено Тогда
		Возврат МетаданныеАналитики.ПолноеИмя() + ".ФормаВыбора";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура АналитикаВыборДляЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПрочиеРасходы.ВыделенныеСтроки;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.АналитикаРасходов = Результат;
		ДанныеСтроки.АналитикаАктивовПассивов = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ПараметрыРазбиенияСтроки = Новый Структура;
	ПараметрыРазбиенияСтроки.Вставить("ИмяПоляКоличество", "Сумма");
	ПараметрыРазбиенияСтроки.Вставить("Количество", Неопределено);
	ПараметрыРазбиенияСтроки.Вставить("Заголовок", НСтр("ru = 'Введите сумму в новой строке'"));
	ПараметрыРазбиенияСтроки.Вставить("РазрешитьНулевоеКоличество", Истина);
	
	ТаблицаФормы  = Элементы.ПрочиеРасходы;
	ДанныеТаблицы = Объект.ПрочиеРасходы;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтаФорма);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВОплатыПоставщикам(Команда)
	
	ТекущиеДанные = Элементы.ПрочиеРасходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
	
		Объект.ПрочиеРасходы.Удалить(Объект.ПрочиеРасходы.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуВРасходы(Команда)
	
	ТекущиеДанные = Элементы.ОплатаПоставщикам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяСтрока = Объект.ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "НомерСтроки");
		ПриДобавлениСтрокиРасходов(НоваяСтрока);
		
		Объект.ОплатаПоставщикам.Удалить(Объект.ОплатаПоставщикам.Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИспользуетсяОбменСБухгалтериейПредприятия   = ПолучитьФункциональнуюОпцию("ИспользуетсяОбменСБухгалтериейПредприятия");
	ИспользуютсяПодразделения                   = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьНесколькоВалют                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьСтатусыАвансовыхОтчетов         = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	КонтролироватьВыдачуПодОтчетВРазрезеЦелей   = ПолучитьФункциональнуюОпцию("КонтролироватьВыдачуПодОтчетВРазрезеЦелей");
	
	Если ИспользоватьСтатусыАвансовыхОтчетов Тогда
		ПравоУтверждения = ПраваПользователяПовтИсп.УтверждениеАвансовыхОтчетов();
	Иначе
		ПравоУтверждения = Истина;
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	
	Элементы.ОплатаПоставщикамСуммаВзаиморасчетов.Видимость = ИспользоватьНесколькоВалют;
	Элементы.ОднаВалюта.Видимость = ИспользоватьНесколькоВалют;
	Элементы.НесколькоВалют.Видимость = ИспользоватьНесколькоВалют;
	
	НесколькоВалют = Число(Объект.Мультивалютный);
	
	Если НесколькоВалют Тогда
		Для каждого СтрокаТаблицы из Объект.КонвертацияВалюты Цикл
			Элементы.КонвертацияВалюты.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
			СформироватьКурсТекстом();
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаСуммы.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
	ЗаполнитьСуммуПолучено();
	УправлениеФормой();
	ОбновитьТекстЗаписиКнигиПокупок();
	
	АктуализироватьЗакупкуПодДеятельность(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	АктуализироватьЗакупкуПодДеятельность();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиент()
	
	// При смене валюты очистим сумму в валюте взаиморасчетов.
	Если ТекущаяВалюта <> Объект.Валюта
		И Объект.ОплатаПоставщикам.Итог("СуммаВзаиморасчетов") <> 0 Тогда
		Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяВалюта <> Объект.Валюта
		И ЗначениеЗаполнено(ТекущаяВалюта)
		И ЗначениеЗаполнено(Объект.Валюта)
		И Объект.СуммаИзрасходовано <> 0 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пересчитать суммы в документе в валюту %1 ?'"), Объект.Валюта);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаПриИзмененииКлиентЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекущаяВалюта = Объект.Валюта;
		
		ВалютаПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	ЗаполнитьСуммуПолучено();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииКлиентЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПересчетСуммДокументаВВалютуСервер();
		РассчитатьСуммуДокумента();
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Суммы в документе пересчитаны в валюту %1'"), Объект.Валюта);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Суммы пересчитаны'"),, Текст, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");

КонецПроцедуры

&НаСервере
Процедура ПолучитьОплатуПоставщикамИзХранилища(АдресПлатежейВХранилище)

	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		НоваяСтрока = Объект.ОплатаПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Поставщик = СтрокаТаблицы.Партнер;
		Если Объект.Мультивалютный Тогда
			НоваяСтрока.Валюта = СтрокаТаблицы.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Если Не Объект.Мультивалютный Тогда
		
		Объект.СуммаИзрасходовано = 0;
		Объект.СуммаОтклонено = 0;
		
		Для каждого Расход Из Объект.ПрочиеРасходы Цикл
			Если Расход.Отменено Тогда
				Объект.СуммаОтклонено = Объект.СуммаОтклонено + Расход.Сумма;
			Иначе
				Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Расход.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Объект.СуммаИзрасходовано = Объект.СуммаИзрасходовано + Объект.ОплатаПоставщикам.Итог("Сумма");
		
		Если Получено < Объект.СуммаИзрасходовано Тогда
			ОстатокПерерасход = Объект.СуммаИзрасходовано - Получено;
			Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Перерасход'");
		Иначе
			ОстатокПерерасход = Получено - Объект.СуммаИзрасходовано;
			Элементы.ОстатокПерерасход.Заголовок = НСтр("ru = 'Остаток'");
		КонецЕсли;
		
	Иначе
		
		ИтогиПоВалютам = Новый Соответствие;
		
		Для каждого СтрокаТЧ Из ТаблицаИтоговПоВалютам Цикл
			Если СтрокаТЧ.Получено <> 0 Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Получено, "Получено");
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
			Если СтрокаТЧ.Отменено Тогда
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Отклонено");
			Иначе
				ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЧ Из Объект.ОплатаПоставщикам Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, СтрокаТЧ.Сумма, "Израсходовано");
		КонецЦикла;
		Для каждого СтрокаТЧ Из Объект.КонвертацияВалюты Цикл
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.Валюта, -СтрокаТЧ.Сумма, "Конвертировано");
			ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, СтрокаТЧ.ВалютаКонвертации, СтрокаТЧ.СуммаКонвертации, "Конвертировано");
		КонецЦикла;
		
		УдаляемыеСтроки = Новый Массив;
		
		Для каждого КлючИЗначение Из ИтогиПоВалютам Цикл
			СтрокаИтогов = КлючИЗначение.Значение;
			Если СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано <= СтрокаИтогов.Израсходовано Тогда
				СтрокаИтогов.Перерасход = СтрокаИтогов.Израсходовано - СтрокаИтогов.Получено - СтрокаИтогов.Конвертировано;
				СтрокаИтогов.Остаток = 0;
			Иначе
				СтрокаИтогов.Перерасход = 0;
				СтрокаИтогов.Остаток = СтрокаИтогов.Получено + СтрокаИтогов.Конвертировано - СтрокаИтогов.Израсходовано;
			КонецЕсли;
			УдалитьСтроку = Истина;
			Для каждого КлючИЗначениеИтогов Из СтрокаИтогов Цикл
				Если КлючИЗначениеИтогов.Значение <> 0 Тогда
					УдалитьСтроку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УдалитьСтроку Тогда
				УдаляемыеСтроки.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ИтогиПоВалютам.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МультивалютныеСуммы = СтрокаМультивалютныеСуммы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалютуСервер()
	
	СтруктураКурсовТекущейВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущаяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, Объект.Дата);
	
	Для Каждого СтрокаТаблицы Из Объект.ПрочиеРасходы Цикл
		
		СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ТекущаяВалюта,
			Объект.Валюта,
			СтруктураКурсовТекущейВалюты.Курс,
			СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовТекущейВалюты.Кратность,
			СтруктураКурсовНовойВалюты.Кратность);
			
		СтрокаТаблицы.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС, Объект.ЦенаВключаетНДС);
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ОплатаПоставщикам Цикл
		
		СтрокаТаблицы.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ТекущаяВалюта,
			Объект.Валюта,
			СтруктураКурсовТекущейВалюты.Курс,
			СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовТекущейВалюты.Кратность,
			СтруктураКурсовНовойВалюты.Кратность);
	КонецЦикла;
	
	ВалютаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)
	
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Форма.Объект);
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", Форма.НДСпоСтавкам4и2);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	УчетНДСПереопределяемый.УстановитьУсловноеОформлениеДляНДСпоСтавкам4и2(
		УсловноеОформление,
		Элементы.ПрочиеРасходыСтавкаНДС);
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "ПрочиеРасходы", ТипыСтатей);

	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, Новый Структура("ПрочиеРасходы"));
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма,
													"ПрочиеРасходыСтавкаНДС",
													"ПрочиеРасходыСуммаНДС",
													"ПрочиеРасходыСуммаСНДС");
	
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "ПрочиеРасходыСуммаСНДС");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыКонтрагент.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтавкиНДС.БезНДС;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.ПрочиеРасходы,
		Элементы.ПрочиеРасходыОтклонено.Имя,
		Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПричинаОтклонения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрочиеРасходы.ПричинаОтмены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтатьяРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыАналитикаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыПодразделение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСчетРеглУчетаАктивовПассивов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСтавкаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрочиеРасходыСуммаСНДС.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонвертацияВалютыКурс.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если ИспользоватьСтатусыАвансовыхОтчетов Тогда
		
		СтатусУтвержден = (Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден);
		
		ЭлементыВСтатусеУтвержден = Новый Массив;
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаРасходы");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаНДС");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаАналитика");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаСчетРеглУчета");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыГруппаОтклонение");
		ЭлементыВСтатусеУтвержден.Добавить("ПрочиеРасходыЗаполнитьПодразделение");
		ЭлементыВСтатусеУтвержден.Добавить("ГруппаЗаписьКнигиПокупок");
		
		Для каждого Элемент Из ЭлементыВСтатусеУтвержден Цикл
			Элементы[Элемент].Видимость = СтатусУтвержден;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ТекстЗаписьКнигиПокупок.Доступность = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаписьКнигиПокупок);
	
	Элементы.ОплатаПоставщикамЭтоНекорректныйКонтрагент.Видимость = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	
	Элементы.Валюта.Доступность = Не Объект.Мультивалютный;
	
	НеМультивалютныеЭлементы = Новый Массив;
	НеМультивалютныеЭлементы.Добавить(Элементы.Получено);
	НеМультивалютныеЭлементы.Добавить(Элементы.Израсходовано);
	НеМультивалютныеЭлементы.Добавить(Элементы.ОстатокПерерасход);
	НеМультивалютныеЭлементы.Добавить(Элементы.Отклонено);
	НеМультивалютныеЭлементы.Добавить(Элементы.ТекущаяВалюта1);
	НеМультивалютныеЭлементы.Добавить(Элементы.ТекущаяВалюта2);
	
	Для каждого Элемент Из НеМультивалютныеЭлементы Цикл
		Элемент.Видимость = Не Объект.Мультивалютный;
	КонецЦикла;
	
	МультивалютныеЭлементы = Новый Массив;
	МультивалютныеЭлементы.Добавить(Элементы.ПрочиеРасходыВалюта);
	МультивалютныеЭлементы.Добавить(Элементы.ОплатаПоставщикамВалюта);
	МультивалютныеЭлементы.Добавить(Элементы.КонвертацияВалюты);
	МультивалютныеЭлементы.Добавить(Элементы.МультивалютныеСуммы);
	
	Для каждого Элемент Из МультивалютныеЭлементы Цикл
		Элемент.Видимость = Объект.Мультивалютный;
	КонецЦикла;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.АвансовыйОтчет) Тогда
		Элементы.ОднаВалюта.Доступность = Ложь;
		Элементы.НесколькоВалют.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуПолучено()
	
	ВыборкаПолучено = ВыборкаПолучено();
	
	Если Не Объект.Мультивалютный Тогда
		
		Если ВыборкаПолучено.Следующий() Тогда
			Получено = ВыборкаПолучено.Получено;
		Иначе
			Получено = 0;
		КонецЕсли;
	Иначе
		
		ТаблицаИтоговПоВалютам.Очистить();
		
		Пока ВыборкаПолучено.Следующий() Цикл
			СтрокаИтогПоВалюте = ТаблицаИтоговПоВалютам.Добавить();
			СтрокаИтогПоВалюте.Валюта = ВыборкаПолучено.Валюта;
			СтрокаИтогПоВалюте.Получено = ВыборкаПолучено.Получено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуммуВИтогиПоВалютам(ИтогиПоВалютам, Валюта, Сумма, Колонка)
	
	ИтогПоВалюте = ИтогиПоВалютам.Получить(Валюта);
	Если ИтогПоВалюте = Неопределено Тогда
		ИтогПовалюте = ИнициализироватьИтогПоВалюте();
		ИтогиПоВалютам.Вставить(Валюта, ИтогПовалюте);
	КонецЕсли;
	
	ИсходнаяСумма = 0;
	ИтогПоВалюте.Свойство(Колонка, ИсходнаяСумма);
	ИтогПоВалюте.Вставить(Колонка, ИсходнаяСумма + Сумма);
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьИтогПоВалюте()
	
	ИтогПоВалюте = Новый Структура;
	ИтогПоВалюте.Вставить("Получено", 0);
	ИтогПоВалюте.Вставить("Израсходовано", 0);
	ИтогПоВалюте.Вставить("Конвертировано", 0);
	ИтогПоВалюте.Вставить("Отклонено", 0);
	ИтогПоВалюте.Вставить("Остаток", 0);
	ИтогПоВалюте.Вставить("Перерасход", 0);
	
	Возврат ИтогПоВалюте;
	
КонецФункции

&НаСервере
Функция ВыборкаПолучено()
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Проведен
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Статус") = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаНачальныйОстаток КАК Получено,
		|	ДенежныеСредства.Валюта КАК Валюта
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,,
		|		Регистратор,,
		|		Организация = &Организация
		|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
		|		И (Валюта = &Валюта ИЛИ &Мультивалютный)
		|	) КАК ДенежныеСредства
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.АвансовыйОтчет КАК АвансовыйОтчет
		|	ПО
		|		АвансовыйОтчет.Ссылка = ДенежныеСредства.Регистратор
		|		И АвансовыйОтчет.Ссылка = &Ссылка
		|";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаОстаток КАК Получено,
		|	ДенежныеСредства.Валюта КАК Валюта
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&ДатаДокумента,
		|		Организация = &Организация
		|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
		|		И (Валюта = &Валюта ИЛИ &Мультивалютный)
		|	) КАК ДенежныеСредства
		|";
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
		Иначе
			Запрос.УстановитьПараметр("ДатаДокумента", ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("Мультивалютный", Объект.Мультивалютный);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьПолученныеАвансыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПолученныеАвансы();
	
	Если Объект.ПрочиеРасходы.Количество() = 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У подотчетного лица отсутствуют выданные авансы, за которые он не отчитался перед организацией %1 в валюте %2'"),
			Объект.Организация,
			Объект.Валюта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолученныеАвансы()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПолученныеАвансы();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПрочиеРасходы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.АвансовыйОтчет"));
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонвертациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.КонвертацияВалюты.Очистить();
	
	РассчитатьСуммуДокумента();
	
	Для каждого КлючИЗначение из ИтогиПоВалютам Цикл
		Если КлючИЗначение.Значение.Остаток > 0 Тогда
			НоваяСтрока = Объект.КонвертацияВалюты.Добавить();
			НоваяСтрока.Валюта = КлючИЗначение.Ключ;
			НоваяСтрока.Сумма = КлючИЗначение.Значение.Остаток;
		КонецЕсли;
		Если КлючИЗначение.Значение.Перерасход > 0 Тогда
			НоваяСтрока = Объект.КонвертацияВалюты.Добавить();
			НоваяСтрока.ВалютаКонвертации = КлючИЗначение.Ключ;
			НоваяСтрока.СуммаКонвертации = КлючИЗначение.Значение.Перерасход;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.КонвертацияВалюты.Количество() = 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У подотчетного лица отсутствуют денежные средства от организации %1'"),
			Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗаписиКнигиПокупок()
	
	ТекстЗаписьКнигиПокупок = ДенежныеСредстваСервер.ПредставлениеЗаписиКнигиПокупокВАвансовомОтчете(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасходов(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.ПрочиеРасходыСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыИтоговПоВалютам()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаИтоговПоВалютам.Выгрузить());
	
КонецФункции

&НаКлиенте
Функция СтрокаМультивалютныеСуммы()
	
	СтрокаОстаток = Новый Массив;
	СтрокаПерерасход = Новый Массив;
	
	Для каждого КлючИЗначение из ИтогиПоВалютам Цикл
		
		Валюта = Строка(КлючИЗначение.Ключ);
		СтрокаИтогов = КлючИЗначение.Значение;
		
		Если СтрокаИтогов.Остаток <> 0 Тогда
			СтрокаОстаток.Добавить(Строка(СтрокаИтогов.Остаток) + " " + Валюта + " ");
		КонецЕсли;
		Если СтрокаИтогов.Перерасход <> 0 Тогда
			СтрокаПерерасход.Добавить(Строка(СтрокаИтогов.Перерасход) + " " + Валюта + " ");
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокаОстаток.Количество() И Не СтрокаПерерасход.Количество() Тогда
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Итого: Остаток -'"));
	Иначе
		ИтоговаяСтрокаМассив = Новый Массив;
		
		Если СтрокаОстаток.Количество() Тогда
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Остаток'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаОстаток);
		КонецЕсли;
		
		Если СтрокаПерерасход.Количество() Тогда
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Перерасход'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаПерерасход);
		КонецЕсли;
		
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Итого:'"), " ", ИтоговаяСтрокаМассив);
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	
	Если СтрокаТаблицы.Курс <> 0 Тогда
		Если СтрокаТаблицы.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаКонвертации = СтрокаТаблицы.Сумма * СтрокаТаблицы.Курс;
		Иначе
			СтрокаТаблицы.СуммаКонвертации = СтрокаТаблицы.Сумма / СтрокаТаблицы.Курс;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.СуммаКонвертации = 0;
	КонецЕсли;
	
	СформироватьКурсТекстом();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	
	Курс = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		СтрокаТаблицы.Валюта,
		СтрокаТаблицы.ВалютаКонвертации,
		Объект.Дата);
		
	Если Курс <> 0 Тогда
		Если СтрокаТаблицы.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.Курс = Курс;
			Если СтрокаТаблицы.СуммаКонвертации <> 0 И СтрокаТаблицы.Сумма = 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаКонвертации / СтрокаТаблицы.Курс;
			Иначе
				СтрокаТаблицы.СуммаКонвертации = СтрокаТаблицы.Сумма * СтрокаТаблицы.Курс;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Курс = 1 / Курс;
			Если СтрокаТаблицы.СуммаКонвертации <> 0 И СтрокаТаблицы.Сумма = 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаКонвертации * СтрокаТаблицы.Курс;
			Иначе
				СтрокаТаблицы.СуммаКонвертации = СтрокаТаблицы.Сумма / СтрокаТаблицы.Курс;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Курс = 0;
		СтрокаТаблицы.СуммаКонвертации = 0;
	КонецЕсли;
	
	СформироватьКурсТекстом();
	
КонецПроцедуры

&НаСервере
Процедура СуммаКонвертацииПриИзмененииНаСервере()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	
	Если СтрокаТаблицы.Курс <> 0 И СтрокаТаблицы.Сумма = 0 Тогда
		Если СтрокаТаблицы.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаКонвертации / СтрокаТаблицы.Курс;
		Иначе
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаКонвертации * СтрокаТаблицы.Курс;
		КонецЕсли;
	Иначе
		Если СтрокаТаблицы.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.Курс = ?(СтрокаТаблицы.Сумма <> 0, СтрокаТаблицы.СуммаКонвертации / СтрокаТаблицы.Сумма, 0);
		Иначе
			СтрокаТаблицы.Курс = ?(СтрокаТаблицы.СуммаКонвертации <> 0, СтрокаТаблицы.Сумма / СтрокаТаблицы.СуммаКонвертации, 0);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьКурсТекстом();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКурсТекстом()
	
	СтрокаТаблицы = Объект.КонвертацияВалюты.НайтиПоИдентификатору(Элементы.КонвертацияВалюты.ТекущаяСтрока);
	
	ШаблонКурса = "1 %1 = %2 %3";
	
	Если СтрокаТаблицы.Курс <> 0 Тогда
		Если СтрокаТаблицы.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.КурсТекстом = СтрШаблон(
				ШаблонКурса,
				СтрокаТаблицы.Валюта,
				Строка(Формат(СтрокаТаблицы.Курс, "ЧДЦ=4")),
				СтрокаТаблицы.ВалютаКонвертации);
		Иначе
			СтрокаТаблицы.КурсТекстом = СтрШаблон(
				ШаблонКурса,
				СтрокаТаблицы.ВалютаКонвертации,
				Строка(Формат(СтрокаТаблицы.Курс, "ЧДЦ=4")),
				СтрокаТаблицы.Валюта);
		КонецЕсли;
	Иначе
		СтрокаТаблицы.КурсТекстом = "0";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗакупкуПодДеятельность(Заполнить = Истина)
	
	Если Заполнить Тогда
		Объект.ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(
			Объект.Организация,
			Неопределено,
			Объект.Дата);
	КонецЕсли;
	
	УчетНДСУТ.ЗаполнитьСписокВыбораДеятельностиНДСПотребления(
		Элементы.ЗакупкаПодДеятельность,
		Объект.Организация,
		Объект.Дата,
		Неопределено);
	
КонецПроцедуры

#КонецОбласти
