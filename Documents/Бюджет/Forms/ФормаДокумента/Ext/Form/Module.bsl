
&НаКлиенте
Перем стПериод, стМодель;

Функция ПолучитьИменаКолонок()
	
	Состав = ПолучитьСоставКолонок();
	Имена = Новый Массив;
	
	Для Каждого текПериод Из Состав Цикл
		Если ПериодыДо.НайтиПоЗначению(НачалоПериода(текПериод)) = Неопределено Тогда
		
			Имена.Добавить(ИмяПериода(текПериод));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции
&НаСервере
Функция ПолучитьСоставКолонокПоМесячно()
	
	Состав = Новый Массив;
	
	текМесяц 	= НачалоМесяца(Период.ДатаНачала);
	послМесяц 	= НачалоМесяца(Период.ДатаОкончания);
	
	Пока текМесяц <= послМесяц Цикл
		
		Состав.Добавить(Новый СтандартныйПериод(НачалоМесяца(текМесяц), КонецМесяца(текМесяц)));
		текМесяц = ДобавитьМесяц(текМесяц, 1);
		
	КонецЦикла;
	
	Возврат Состав;
	
КонецФункции
&НаСервере
Функция ПолучитьСоставКолонокНаСервере()
	
	Возврат Бюджетирование.ПолучитьСоставПериодов(Объект.Сценарий.Периодичность, Период,,Объект.КолПредПериодов);
	
КонецФункции
Процедура ОпределитьПрошлыепериоды(Состав)
	
	// Проверяем периоды которые меньше даты начала, будут отмечены как прошлые периоды
	
	ПериодыДо.Очистить();
	НачалаПериода = НачалоПериода(Период);
	
	Состав = ПолучитьСоставКолонокНаСервере();
	Для Каждого текПериод Из Состав Цикл
		Если НачалаПериода > НачалоПериода(текПериод) Тогда
			ПериодыДо.Добавить(НачалоПериода(текПериод));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьСоставКолонок()
	
	Состав = Новый Массив;
	
	Если Период.ДатаНачала <> '00010101' И Период.ДатаОкончания <> '00010101' И Не Объект.Сценарий.Периодичность.Пустая() Тогда
		Состав = ПолучитьСоставКолонокНаСервере();
	КонецЕсли;
	
	ОпределитьПрошлыепериоды(Состав);
		
	Возврат Состав;
	
КонецФункции

Функция СуффиксПериода()
	
	Возврат "Период";
	
КонецФункции
Функция СуффиксПоказатели()
	
	Возврат "Показатели";
	
КонецФункции
Функция ИмяПериода(текПериод)
	
	Возврат СтрШаблон("%1%2", СуффиксПериода(), Формат(НачалоПериода(текПериод), "ДФ=ddMMyy"));
	
КонецФункции
Функция ИмяУтверждено(ИмяПериода)
	
	Возврат ИмяПериода + "Утв";
	
КонецФункции
Функция ИмяГруппы(ИмяПериода)
	
	Возврат ИмяПериода + "Группа";
	
КонецФункции
Функция НачалоПериода(текПериод)
	
	Возврат ?(ТипЗнч(текПериод) = Тип("Дата"), текПериод, текПериод.ДатаНачала);
	
КонецФункции

&НаСервере
Функция ЕстьРеквизит(текРеквизиты, Имя)
	
	Для Каждого текРеквизит Из текРеквизиты Цикл
		Если текРеквизит.Имя = Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
&НаСервере
Процедура ОбновитьСоставРеквизитов(Состав)
	
	ТекРеквизиты = ПолучитьРеквизиты("Показатели");
	ДобавляемыеРеквизиты 	= новый Массив;
	УдаляемыеРеквизиты 		= новый Массив;
	УдаляемыеЭлементы 		= новый Массив;
	Существующие 			= Новый Соответствие;
	
	ТипЧисло 	= новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТипБулево 	= новый ОписаниеТипов("Булево");
	
	Для Каждого текПериод Из Состав Цикл
		
		Имя = ИмяПериода(текПериод);
		ИмяУтв = ИмяУтверждено(Имя);
		Существующие.Вставить(Имя, Истина);
		Существующие.Вставить(ИмяУтв, Истина);
		
		Если Не ЕстьРеквизит(ТекРеквизиты, Имя) Тогда
			
			Реквизит = Новый РеквизитФормы(Имя, ТипЧисло, СуффиксПоказатели(), ПредставлениеПериода(текПериод.ДатаНачала, текПериод.ДатаОкончания));
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
			Реквизит = Новый РеквизитФормы(ИмяУтв, ТипБулево, СуффиксПоказатели(), "утв");
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из ТекРеквизиты Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, СуффиксПериода()) И Существующие[Реквизит.Имя] <> Истина Тогда
			УдаляемыеРеквизиты.Добавить(СтрШаблон("%1.%2", Реквизит.Путь, Реквизит.Имя));
			УдаляемыеЭлементы.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьЭлементы(УдаляемыеЭлементы);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
КонецПроцедуры
&НаСервере
Процедура УдалитьЭлементы(УдаляемыеЭлементы)
	
	Для Каждого Имя ИЗ УдаляемыеЭлементы Цикл
		
		Элемент = Элементы.Найти(Имя);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
			
			Группа = Элементы.Найти(ИмяГруппы(Имя));
			Если Группа <> Неопределено Тогда
				Элементы.Удалить(Группа);	
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Функция НайтиЭлементФормыПоздний(текПериод, Состав)
	
	НачалаПериода = НачалоПериода(текПериод);
	Для Каждого СтрокаПериод Из Состав Цикл
		Если НачалоПериода(СтрокаПериод) > НачалаПериода Тогда
			
			Имя 		= ИмяПериода(СтрокаПериод);
			ИмяГруппы 	= ИмяГруппы(Имя);
			
			Элемент = Элементы.Найти(ИмяГруппы);
			Если Элемент = Неопределено Тогда
				Элемент = Элементы.Найти(Имя);
			КонецЕсли;
			
			Если Элемент <> Неопределено Тогда
				Возврат Элемент;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаСервере
Процедура ОбновитьСоставЭлементов(Состав)
	
	// Обновляет элементы формы
	// если это прошлые периоды тогда не отображает галочки утверждать
	// если всего 1 период то утвержать по всей строке становиться не видимым
	
	ЦветПрошлого = Новый Цвет(100, 100, 100);
	ЭлементПоказатели = Элементы[СуффиксПоказатели()];
	СоставОбратный = КонвертацияТипов.ПеревернутьМассив(Состав);
	
	Для Каждого текПериод Из СоставОбратный Цикл
		
		Имя 				= ИмяПериода(текПериод);
		ЭтоПрошлыйПериод 	= ПериодыДо.НайтиПоЗначению(НачалоПериода(текПериод)) <> Неопределено;
		
		ЭлементПосле = НайтиЭлементФормыПоздний(текПериод, Состав);
		Если ЭлементПосле = Неопределено Тогда
			ЭлементПосле = Элементы.ПоказателиСумма;
		КонецЕсли;
		
		Если Элементы.Найти(Имя) = Неопределено Тогда
			
			Если ВидимостьУтверждено Тогда
				
				Группа = Элементы.Вставить(ИмяГруппы(Имя), Тип("ГруппаФормы"), ЭлементПоказатели, ЭлементПосле);
				Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
				Группа.Группировка = ГруппировкаКолонок.ВЯчейке;
				
				Элемент = Элементы.Добавить(Имя, Тип("ПолеФормы"), Группа); 
				
			Иначе
				Элемент = Элементы.Вставить(Имя, Тип("ПолеФормы"), ЭлементПоказатели, ЭлементПосле); 
			КонецЕсли;
			
			Элемент.ПутьКДанным 					= СтрШаблон("%1.%2", СуффиксПоказатели(), Имя);
			Элемент.РежимРедактирования 			= РежимРедактированияКолонки.Непосредственно;
			Элемент.Вид 							= ВидПоляФормы.ПолеВвода;
			Элемент.ГоризонтальноеПоложениеВШапке 	= ГоризонтальноеПоложениеЭлемента.Центр;
			Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			
			Если ЭтоПрошлыйПериод Тогда
				Элемент.ТолькоПросмотр				= Истина;
				Элемент.ЦветТекста 					= ЦветПрошлого;
			КонецЕсли;
			
			Элемент.УстановитьДействие("ПриИзменении", "ПриИзмененииСуммыПериода");
			
			Если ВидимостьУтверждено И НЕ ЭтоПрошлыйПериод Тогда
				
				ИмяУтв = ИмяУтверждено(Имя);
				Элемент = Элементы.Добавить(ИмяУтв, Тип("ПолеФормы"), Группа); 
				Элемент.ОтображатьВШапке = Ложь;
				Элемент.ТолькоПросмотр = Не ФункцияУтверждать;
				
				Элемент.ПутьКДанным 					= СтрШаблон("%1.%2", СуффиксПоказатели(), ИмяУтв);
				Элемент.РежимРедактирования 			= РежимРедактированияКолонки.Непосредственно;
				Элемент.Вид 							= ВидПоляФормы.ПолеФлажка;
				Элемент.ГоризонтальноеПоложениеВШапке 	= ГоризонтальноеПоложениеЭлемента.Центр;
				Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
				
				Элемент.УстановитьДействие("ПриИзменении", "ПриИзмененииУтверждено");
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПрошлыйПериод Тогда
			
			Элемент = Элементы.Найти(Имя);
			Элемент.ТолькоПросмотр 	= Истина;
			Элемент.ЦветТекста 		= ЦветПрошлого;
			
			ЭлементУтверждено = Элементы.Найти(ИмяУтверждено(Имя));
			Если ЭлементУтверждено <> Неопределено Тогда
				ЭлементУтверждено.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПоказателиУтверждено.Видимость = Состав.Количество() - ПериодыДо.Количество() > 1;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьСоставКолонок()
	
	Состав = ПолучитьСоставКолонок();
	
	ОбновитьСоставРеквизитов(Состав);
	ОбновитьСоставЭлементов(Состав);
	
	Для Каждого Строка Из Показатели Цикл
		ОбновитьСуммуСтроки(Строка);
		ОбновитьУтверждениеПоСтроке(Строка);
	КонецЦикла;
	
	ОбновитьИтоги();
		
КонецПроцедуры
Процедура ОбновитьПредставлениеПериода()
	
	ПериодСтр = ПредставлениеПериода(Период.ДатаНачала, КонецДня(Период.ДатаОкончания));
	
КонецПроцедуры

Процедура ОбновитьЗаголовокКомментария()
	
	Элементы.ГруппаКомментарий.Заголовок = ?(ПустаяСтрока(Объект.Комментарий), 
			"комментарий",
			Лев(СокрЛ(СтрЗаменить(Объект.Комментарий, Символы.ПС, " ")), 100));
	
КонецПроцедуры
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ОбновитьЗаголовокКомментария();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИОбновитьСоставКолонок()
	
	Если Показатели.Итог("Сумма") Тогда
		стПериод = Период;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПользовательГотовМенятьКолонки", ЭтаФорма), "Будут удалены текущие данные, продолжить?", РежимДиалогаВопрос.ДаНет)
	Иначе
		ОбновитьСоставКолонок()
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПользовательГотовМенятьКолонки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьСоставКолонок();
	Иначе
		Период = стПериод;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьПериод(текОбъект = Неопределено)
	
	Если текОбъект = Неопределено Тогда
		текОбъект = Объект;
	КонецЕсли;
	
	текОбъект.ДатаНачала 		= Период.ДатаНачала;
	текОбъект.ДатаОкончания 	= Период.ДатаОкончания;
	
КонецПроцедуры
&НаКлиенте
Процедура ВыбранПериод(текпериод, ДопСвойства) Экспорт
	
	Если текПериод <> Неопределено Тогда
		Период = текпериод;
		ЗапомнитьПериод();
		ОбновитьСоставКолонок();
		ОбновитьПредставлениеПериода();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПериодСтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Период;
	Диалог.Показать(Новый ОписаниеОповещения("ВыбранПериод", ЭтаФорма));
	
КонецПроцедуры
&НаКлиенте
Процедура КолПредПериодовПриИзменении(Элемент)
	
	ОбновитьСоставКолонок();
	ОбновитьПредыдущиеПериоды();
	
КонецПроцедуры
&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ОбновитьСоставКолонок();
	
КонецПроцедуры

#Область Модель

&НаКлиенте
Процедура МодельБюджетаПриИзменении(Элемент)
	
	Если Показатели.Количество() Тогда
		стМодель = Объект.МодельБюджета;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПользовательГотовМенятьМодель", ЭтаФорма), "Будут удалены текущие данные, продолжить?", РежимДиалогаВопрос.ДаНет)
	Иначе
		ОбновитьМодель()
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПользовательГотовМенятьМодель(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьМодель();
	Иначе
		Объект.МодельБюджета = стМодель;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьМодель()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ СтатьяБюджета ИЗ Справочник.МоделиБюджетов.Показатели ГДЕ Ссылка = &Ссылка УПОРЯДОЧИТЬ ПО НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", Объект.МодельБюджета);
	
	Показатели.Очистить();
	Показатели.Загрузить(Запрос.Выполнить().Выгрузить()); 
	
	Для Каждого Строка Из Показатели Цикл
		Строка.id = Новый УникальныйИдентификатор;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ПриИзмененииСуммыПериода(Элемент)
	
	ОбновитьСуммуСтроки(Элементы.Показатели.ТекущаяСтрока);
	ОбновитьИтоги();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриИзмененииУтверждено(Элемент)
	
	ОбновитьУтверждениеПоСтроке(Элементы.Показатели.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Или Копирование Тогда
		Элемент.текущиеДанные.id = Новый УникальныйИдентификатор
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказателиПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ФункцияУтверждать Тогда
		
		Имя = ИмяУтверждено(Элемент.ТекущийЭлемент.Имя);
		Если 	Элементы.Найти(Имя) <> Неопределено И
				Элементы.Показатели.ТекущиеДанные[Имя] Тогда
				
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьУтверждениеПоСтроке(СтрокаИлиИдентификатор)
	
	Утв			= 0;
	Колонки 	= ПолучитьИменаКолонок();
	Строка 		= ?(ТипЗнч(СтрокаИлиИдентификатор) = Тип("Число"), Показатели.НайтиПоИдентификатору(СтрокаИлиИдентификатор), СтрокаИлиИдентификатор);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Утв = Утв + Строка[ИмяУтверждено(Колонка)];
		
	КонецЦикла;
	
	Строка.Утверждено = Утв = Колонки.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредыдущиеПериоды()
	
	Если ПериодыДо.Количество() Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ СтатьяБюджета, Период, Сумма * СтатьяБюджета.Коэффициент Сумма
		|ИЗ 		РегистрСведений.Бюджетирование 
		|ГДЕ 	Подразделение = &Подразделение И Сценарий = &Сценарий И СтатьяБюджета В(&Статьи) И
		|		Утверждено И Период >= &ДатаНачала И Период <= &ДатаОкончания");
		
		Запрос.УстановитьПараметр("ДатаНачала", 	ПериодыДо[0].Значение);
		Запрос.УстановитьПараметр("ДатаОкончания", 	ПериодыДо[ПериодыДо.Количество() - 1].Значение);
		Запрос.УстановитьПараметр("Подразделение", 	Объект.Подразделение);
		Запрос.УстановитьПараметр("Сценарий", 		Объект.Сценарий);
		Запрос.УстановитьПараметр("Статьи", 		Показатели.Выгрузить().ВыгрузитьКолонку("СтатьяБюджета"));
		
		ПрошлыеСуммы = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка ИЗ Показатели Цикл
			Для Каждого ПериодДо Из ПериодыДо Цикл
			
				Строки = ПрошлыеСуммы.НайтиСтроки(Новый Структура("СтатьяБюджета, Период", Строка.СтатьяБюджета, ПериодДо.Значение));
				Строка[ИмяПериода(ПериодДо.Значение)] = ?(Строки.Количество(), Строки[0].Сумма, 0);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ОбновитьИтоги()
	
	Колонки = ПолучитьИменаКолонок();
	Итог = 0;
	
	Для Каждого Колонка Из Колонки Цикл
		
		Сумма 	= Показатели.Итог(Колонка);
		Итог 	= Итог + Сумма;
		Элементы[Колонка].ТекстПодвала = Формат(Сумма, "ЧЦ=15; ЧДЦ=2");
		
	КонецЦикла;
	
	Элементы.ПоказателиСумма.ТекстПодвала 			= Формат(Итог, "ЧЦ=15; ЧДЦ=2");
	Элементы.ПоказателиСтатьяБюджета.ТекстПодвала 	= ?(Показатели.Количество(), СтрШаблон("поз. %1", Показатели.Количество()), "");
	
КонецПроцедуры
Процедура ОбновитьСуммуСтроки(СтрокаИлиИдентификатор)
	
	Сумма	= 0;
	Колонки = ПолучитьИменаКолонок();
	Строка 	= ?(ТипЗнч(СтрокаИлиИдентификатор) = Тип("Число"), Показатели.НайтиПоИдентификатору(СтрокаИлиИдентификатор), СтрокаИлиИдентификатор);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Сумма = Сумма + Строка[Колонка];
		
	КонецЦикла;
	
	Строка.Сумма = Сумма;
	
КонецПроцедуры

#Область Утверждение

&НаКлиенте
Процедура УстановитьУтверждение(Утверждение)
	
	Колонки = ПолучитьИменаКолонок();
	
	Для Каждого Строка Из Показатели Цикл
		Для Каждого Колонка Из Колонки Цикл
		
			Строка[ИмяУтверждено(Колонка)] = Утверждение;
			
		КонецЦикла;
		
		Строка.Утверждено = Утверждение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьВсе(Команда)
	
	УстановитьУтверждение(Истина)
	
КонецПроцедуры
&НаКлиенте
Процедура ОтменитьВсе(Команда)
	
	УстановитьУтверждение(Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиУтвержденоПриИзменении(Элемент)
	
	Колонки = ПолучитьИменаКолонок();
	Строка 	= Показатели.НайтиПоИдентификатору(Элементы.Показатели.ТекущаяСтрока);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Строка[ИмяУтверждено(Колонка)] = Строка.Утверждено;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ДопРеквизиты

&НаКлиенте
Процедура ОткрытьДопРеквизиты(Команда)
	
	ОткрытьФорму("Документ.Бюджет.Форма.ФормаДопРеквизитов", 
			новый Структура("Дата, Номер, ЭтоСистемныйДокумент", 
					Объект.Дата, Объект.Номер, Объект.ЭтоСистемныйДокумент), 
			ЭтаФорма,,,,Новый ОписаниеОповещения("ВыборДопРеквизитов", ЭтаФорма));
	
КонецПроцедуры
&НаКлиенте
Процедура ВыборДопРеквизитов(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаСохранение

&НаСервере
Функция ПолучитькомментарийПоID(id)
	
	Строки = Объект.Комментарии.НайтиСтроки(Новый Структура("id", id));
	Если Строки.Количество() Тогда
		Возврат Строки[0].Комментарий;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
&НаСервере
Функция ПолучитьСтрокуПоказателяДляЗаполнения(id)

	Строки = Показатели.НайтиСтроки(Новый Структура("id", id));
	
	Если Строки.Количество() Тогда
		Возврат Строки[0];
	Иначе
		Строка = Показатели.Добавить();
		Строка.id = id;
		Строка.Комментарий = ПолучитькомментарийПоID(id);
		Возврат Строка;
	КонецЕсли;
	
КонецФункции
&НаСервере
Процедура ЗаполнитьДаннымиИзДокумента(СвоеУтверждено = Неопределено)
	
	Показатели.Очистить();
	
	Для Каждого Строка Из Объект.Показатели Цикл
		
		Имя = ИмяПериода(Строка.Период);
		
		НовСтрока = ПолучитьСтрокуПоказателяДляЗаполнения(?(XMLСтрока(Строка.id) = "00000000-0000-0000-0000-000000000000", Новый УникальныйИдентификатор, Строка.id));
		НовСтрока.СтатьяБюджета 		= Строка.СтатьяБюджета;
		НовСтрока[Имя] 					= Строка.Сумма;
		НовСтрока[ИмяУтверждено(Имя)] 	= ?(СвоеУтверждено = Неопределено, Строка.Утверждено, СвоеУтверждено);
		
	КонецЦикла;
	
	Для Каждого Строка Из Показатели Цикл
		ОбновитьСуммуСтроки(Строка);
		ОбновитьУтверждениеПоСтроке(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеВОбъекте(ТекущийОбъект)
	
	Периоды = ПолучитьСоставКолонок();
	ТекущийОбъект.Показатели.Очистить();
	ТекущийОбъект.Комментарии.Очистить();
	
	Для Каждого Строка Из Показатели Цикл
		Для каждого текПериод Из Периоды Цикл
			Если ПериодыДо.НайтиПоЗначению(НачалоПериода(текПериод)) = Неопределено Тогда
			
				Имя = ИмяПериода(текПериод);
				
				НовСтрока = ТекущийОбъект.Показатели.Добавить();
				НовСтрока.id 			= строка.id;
				НовСтрока.СтатьяБюджета = строка.СтатьяБюджета;
				НовСтрока.Период 		= текПериод.ДатаНачала;
				НовСтрока.Сумма 		= Строка[Имя];
				НовСтрока.Утверждено	= Строка[ИмяУтверждено(Имя)];
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(Строка.Комментарий) Тогда
			новКоммент = ТекущийОбъект.Комментарии.Добавить();
			новКоммент.id 			= строка.id;
			новКоммент.комментарий 	= строка.Комментарий;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ЕстьЗапрещенныеСтатьи()
	
	Запрещено = Ложь;
	
	ОтрКш = Новый Соответствие;
	Для Каждого Строка Из Объект.Показатели Цикл
		Если ОтрКш[Строка.СтатьяБюджета] <> Истина Тогда
			Попытка
				Если Строка.СтатьяБюджета.ПолучитьОбъект() = Неопределено Тогда
					Запрещено = Истина;
					Прервать;
				КонецЕсли;
			Исключение
				Запрещено = Истина;
				Прервать;
			КонецПопытки;
			ОтрКш.Вставить(Строка.СтатьяБюджета, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Запрещено;
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	параметрыДоступа 	= Новый Структура("Автор, Сценарий, Подразделение", Объект.Ответственный, Объект.Сценарий, Объект.Подразделение);
	МожетУтверждать 	= Бюджетирование.МожетУтверждать(параметрыДоступа);
	
	ВидимостьУтверждено = Не Объект.ЭтоСистемныйДокумент;
	ФункцияУтверждать 	= ВидимостьУтверждено И МожетУтверждать;
	
	Элементы.ГруппаУтвердитьВсе.Видимость 	= ФункцияУтверждать;
	Элементы.ПоказателиУтверждено.Видимость = ВидимостьУтверждено;
	Элементы.ПоказателиУтверждено.Доступность = ФункцияУтверждать;
	
	Элементы.ГруппаЭтоАвтомат.Видимость = Объект.ЭтоСистемныйДокумент;
	
	Элементы.Ответственный.ТолькоПросмотр = Не МожетУтверждать;
	
	Если Не Объект.Ссылка.Пустая() И Не Бюджетирование.МожетРедактировать(параметрыДоступа) Тогда
		
		ТолькоПросмотр = Истина;
		Элементы.ГруппаДопКнопкиПанели.Видимость 	= Ложь;
		Элементы.ПериодСтр.Доступность 				= Ложь;
		Элементы.Комментарий.ТолькоПросмотр 		= Истина;
		
	ИначеЕсли Не ФункцияУтверждать Тогда
		
		МожетМенятьШапку = Не Объект.Показатели.НайтиСтроки(Новый Структура("Утверждено", Истина)).Количество();
		
		Элементы.МодельБюджета.ТолькоПросмотр = Не МожетМенятьШапку;
		Элементы.ПериодСтр.ТолькоПросмотр 		= Не МожетМенятьШапку;
		Элементы.Сценарий.ТолькоПросмотр 	= Не МожетМенятьШапку;
		Элементы.Отдел.ТолькоПросмотр 		= Не МожетМенятьШапку;
		Элементы.ГруппаДопКнопкиПанели.Видимость = МожетМенятьШапку;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Типовые

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЕстьЗапрещенныеСтатьи() Тогда
		ЕстьЗапрещенныеСтатьи = Истина;
		Возврат;
	КонецЕсли;
	
	Период.ДатаНачала 		= Объект.ДатаНачала;
	Период.ДатаОкончания 	= Объект.ДатаОкончания;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Сценарий = Справочники.СценарииПланирования.НайтиПоНаименованию("План");
		Если Не Бюджетирование.ПолныеПрава() И Не Объект.Сценарий.Пустая() Тогда
			Элементы.Сценарий.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();
	
	Если Не Объект.Ссылка.Пустая() ИЛИ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбновитьСоставКолонок();
		ЗаполнитьДаннымиИзДокумента(?(ЗначениеЗаполнено(Параметры.ЗначениеКопирования), Ложь, Неопределено));
		ОбновитьИтоги();
		ОбновитьПредыдущиеПериоды();
	КонецЕсли;
	
	ОбновитьПредставлениеПериода();
	ОбновитьЗаголовокКомментария();
	
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапомнитьПериод(ТекущийОбъект);
	СохранитьДанныеВОбъекте(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьЗапрещенныеСтатьи Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,"В документе есть статьи, доступ к которым ограничен.",,"настройка безопастности");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаСервере
Функция ЗаполнитьПоказательПоСтатье(ИдСтроки, текПериод)
	
	// Выполняет запрос к регистру
	// 	если запрос выполнился то возвращает 1
	// 	если запроса нет то 0
	
	Сумма 		= 0;
	текСтрока 	= Показатели.НайтиПоИдентификатору(ИдСтроки);
	Факт 		= Бюджетирование.ПолучитьРезультатВыполненияЗапроса(
					Новый Структура("Сценарий, СтатьяБюджета, Период, Подразделение", Объект.Сценарий, текСтрока.СтатьяБюджета, текПериод, Объект.Подразделение));
					
	Если Факт <> Неопределено Тогда
					
		Коллекция = ?(Объект.Подразделение.Пустая(), Факт, Факт.НайтиСтроки(Новый Структура("Подразделение", Объект.Подразделение)));
		
		Для Каждого Строка Из Коллекция Цикл
			Сумма = Сумма + Строка.Сумма;
		КонецЦикла;
		
	КонецЕсли;
	
	текСтрока[ИмяПериода(текПериод)] = Сумма;
	ОбновитьСуммуСтроки(текСтрока);
	ОбновитьУтверждениеПоСтроке(текСтрока);
	Возврат Факт <> Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗаполнениеДаннымиБюджета()
	
	Состав 	= ПолучитьСоставКолонокПоМесячно();
	Кол 	= Состав.Количество() * Показатели.Количество();
	Ном 	= 0;
	Выполнено = 0;
	
	Для Каждого Строка Из Показатели Цикл
		Для Каждого текПериод ИЗ Состав Цикл Ном = Ном + 1;
			
			Состояние("Выполняю запрос к базе", Ном / Кол * 100, СтрШаблон("%1 (%2)", Строка.СтатьяБюджета, ПредставлениеПериода(текПериод.ДатаНачала, текПериод.ДатаОкончания)), БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация48);
			Выполнено = Выполнено + ЗаполнитьПоказательПоСтатье(Строка.ПолучитьИдентификатор(), текПериод);
			
		КонецЦикла;
	КонецЦикла;
	
	Если Не Выполнено Тогда
		ПоказатьПредупреждение(,"Нет ни одной статьи, для которой возможно получение данных из базы.");
	Иначе
		ПоказатьОповещениеПользователя("Данные заполнены",,СтрШаблон("запросов к базе %1", Выполнено), БиблиотекаКартинок.СинхронизацияДанныхПодсистема);
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры
&НаКлиенте
Процедура ОтветАвтоматическиЗаполнять(Ответ, ДопПарметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьЗаполнениеДаннымиБюджета();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьДанными(Команда)
	
	Если Показатели.Итог("Сумма") Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтветАвтоматическиЗаполнять", ЭтаФорма), "Будут перезаписаны данные, продолжить?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьЗаполнениеДаннымиБюджета();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

