Процедура ИницилизироватьДополнительныеДанныеДокумента(Ссылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка.Подразделение 	Подразделение,
	|	Ссылка.Сценарий 		Сценарий, 
	|	Ссылка.МодельБюджета 	МодельБюджета,
	|	СтатьяБюджета,
	|   Период,
	|	Ссылка.ЭтоСистемныйДокумент ЭтоАвтоРасчет,
	|	Сумма * СтатьяБюджета.Коэффициент Сумма,
	|	Утверждено ИЛИ Ссылка.ЭтоСистемныйДокумент Утверждено
	|ИЗ 
	|	Документ.Бюджет.Показатели 
	|ГДЕ 
	|	Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ДополнительныеСвойства.Вставить("Бюджетирование", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	//Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам") Тогда
	//	
	//	// Заказ поставщику
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	//	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	//	КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику'");
	//	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//	КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщику");
	//	
	//КонецЕсли;

	//Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗаказовПоставщикам")
	//	 И ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
	//	 
	//	 // Заказ поставщику по данным поставщика
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	//	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	//	КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику по данным поставщика'");
	//	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//	КомандаПечати.ДополнительныеПараметры.Вставить("Тип", "ЗаказПоставщикуПоДаннымПоставщика");
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	//СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	//
	//СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
	//	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	//КонецЕсли;
	//СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область Расшифровка

Функция ПолучитьЗапросФактРасшифровкаПоУмолчанию() Экспорт
	
	Возврат "ВЫБРАТЬ
	    |Регистратор,
		|Период,
		|СтатьяДДС.СтатьяБюджета КАК СтатьяБюджета,
		|Отдел,
		|ФизЛицоПартнер     ФизлицоПартнер,
		|Неопределено  		Аналитика1,
		|Неопределено  		Аналитика2,
		|Неопределено 		Аналитика3,
		|ВЫБОР КОГДА СуммаУпр<0 ТОГДА -1*СуммаУпр ИНАЧЕ СуммаУпр КОНЕЦ	Сумма
		|
		|ИЗ
		|	РегистрНакопления.ОборотыДенежныхСредств
		|ГДЕ 
		|	Период МЕЖДУ &ДатаНачала И &ДатаОкончания И
		|	СтатьяДДС В (ВЫБРАТЬ Ссылка ИЗ Справочник.СтатьиДвиженияДенежныхСредств ГДЕ СтатьяБюджета = &СтатьяБюджета) 
		|	И Отдел = &Отдел
		|";

КонецФункции

Функция ПолучитьФактическиеДанные(ДатаНачала, ДатаОкончания, Отдел) Экспорт
	
	СтатьиБюджета = Новый Массив;
	
	Запрос = Новый Запрос("Выбрать Ссылка,ЗапросФакт из Справочник.СтатьиБюджета ГДЕ НЕ Выразить(ЗапросФакт КАК Строка(10))="""" И НЕ ПометкаУдаления");
	Рез = Запрос.Выполнить();
	
	//Если Не Рез.Пустой() Тогда 
		Выборка = Рез.Выбрать();
		
		ОбщийЗапрос ="";
		ТекЗапрос 	="";
		Н=1;
		Пока Выборка.Следующий() Цикл СтатьиБюджета.Добавить(Выборка.Ссылка);
			
			Если Н >1 Тогда ОбщийЗапрос = ОбщийЗапрос+Символы.ПС+" ОБЪЕДИНИТЬ ВСЕ "+Символы.ПС; КонецЕсли;	
			
			ТекЗапрос	= Выборка.ЗапросФакт;
			ТекЗапрос	= СтрЗаменить(ТекЗапрос,"&СтатьяБюджета","&СтатьяБюджета"+Н);
			ОбщийЗапрос	= ОбщийЗапрос + ТекЗапрос;
			
			Запрос.УстановитьПараметр("СтатьяБюджета"+Н,Выборка.Ссылка);
			Н=Н+1;
		КонецЦикла;
		
		// добавим запрос-факт для статей бюджета, где явно запрос-факт не прописан: по-умолчанию в качестве фактической суммы берем сумму оборота из регистра ОборотыДенежныхСредств
		
		Если Н >1 Тогда ОбщийЗапрос = ОбщийЗапрос+Символы.ПС+" ОБЪЕДИНИТЬ ВСЕ "+Символы.ПС; КонецЕсли;
		
		ТекЗапрос = "ВЫБРАТЬ
		|Период,
		|Отдел,
		|СтатьяДДС.СтатьяБюджета КАК СтатьяБюджета,
		|Неопределено  		Аналитика1,
		|Неопределено  		Аналитика2,
		|Неопределено 		Аналитика3,
		|ВЫБОР КОГДА СуммаУпрОборот < 0 ТОГДА -1*СуммаУпрОборот ИНАЧЕ СуммаУпрОборот КОНЕЦ	Сумма
		|
		|ИЗ
		|	РегистрНакопления.ОборотыДенежныхСредств.Обороты(&ДатаНачала, &ДатаОкончания, Месяц, СтатьяДДС В (ВЫБРАТЬ Ссылка ИЗ Справочник.СтатьиДвиженияДенежныхСредств ГДЕ СтатьяБюджета <> ЗНАЧЕНИЕ(Справочник.СтатьиБюджета.ПустаяСсылка) И НЕ СтатьяБюджета В (&УстСтатьи)))";
		
		ОбщийЗапрос	= ОбщийЗапрос + ТекЗапрос;
		Запрос.УстановитьПараметр("УстСтатьи", СтатьиБюджета);
		
		//
		
		ОбщийЗапрос="ВЫБРАТЬ Период,Отдел,СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3,Сумма(Сумма) сумма из("+
					ОбщийЗапрос+
					")как вт ГДЕ Отдел=&Отдел 
					|Сгруппировать по Период,Отдел,СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3
					|
					|Упорядочить по Отдел,Период,СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3";
					
		Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
		Запрос.УстановитьПараметр("Отдел",Отдел);
		Запрос.Текст = ОбщийЗапрос;
		Попытка
			Рез=Запрос.Выполнить();
		Исключение
			Сообщить("Некорректный текст запроса в одной или нескольких статьях. "+ОписаниеОшибки());
			Возврат Новый ТаблицаЗначений;
		КонецПопытки;
		
		//Объект.Показатели.Загрузить(Рез.Выгрузить());
		Возврат Рез.Выгрузить();
		
	//КонецЕсли;	
	
КонецФункции
Функция КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, ИмяПараметра, Значение)
	НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
   
	Если НекийПараметр = Неопределено Тогда
		НекийПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Добавить();
		НекийПараметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	КонецЕсли;
	
	НекийПараметр.Использование = Истина;
	НекийПараметр.Значение = Значение;
КонецФункции // КомпоновщикНастроекУстановитьПараметр()

Функция ОбработкаРасшифровкиФактическойСуммыБюджетирования(СтруктураПараметров, Результат, ДанныеРасшифровки, АдресСхемы, ГУИД)	Экспорт
	
	// Возвращает Истина если произошлда расшифровка
	// ложь если не чего было расшифровывать
	
	СтатьяБюджета = СтруктураПараметров.СтатьяБюджета;
	
	//УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Отчеты.ПланФактныйАнализБюджета.ПолучитьМакет("МакетРасшифровки");

	истДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	истДанных.Имя 					= "ИсточникДанных";
	истДанных.ТипИсточникаДанных 	= "Local"; 
		
	Набор = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	
	Набор.Имя 							= "НаборДанных";
	Набор.ИсточникДанных 				= истДанных.Имя;
	
	//Набор.Запрос 						= ?(ПустаяСтрока(СтатьяБюджета.ЗапросФактРасшифровка), ПолучитьЗапросФактРасшифровкаПоУмолчанию(), СтатьяБюджета.ЗапросФактРасшифровка);
	НастройкиЗапроса = Бюджетирование.ПолучитьНастройкиЗапроса(СтруктураПараметров.СтатьяБюджета, Справочники.СценарииПланирования.Факт);
	БылаРасшифровка = НастройкиЗапроса <> Неопределено И Не ПустаяСтрока(НастройкиЗапроса.ТекстРасшифровки);
	
	Если БылаРасшифровка Тогда
		
		Набор.Запрос 						= НастройкиЗапроса.ТекстРасшифровки;
    	Набор.АвтоЗаполнениеДоступныхПолей 	= Истина;  
		
		// Из схемы возьмем настройки по умолчанию
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		// Загрузим пользовтельские настройки которые ввыел пользователь совсем недавно
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		
		Для Каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		    Если ДоступноеПоле.Папка И ДоступноеПоле.Заголовок="Системные поля" Тогда
		            Продолжить;
			ИначеЕсли ДоступноеПоле.Папка И ДоступноеПоле.Заголовок= "Параметры" Тогда Продолжить;
			Иначе
		            ВыбранноеПоле= Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		            ВыбранноеПоле.Использование=Истина;
		            ВыбранноеПоле.Поле=ДоступноеПоле.Поле;
		      КонецЕсли;
		КонецЦикла;	
		
		ПолеРесурса             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	    ПолеРесурса.ПутьКДанным = "Сумма";
	    ПолеРесурса.Выражение   = "Сумма(Сумма)";
	    	  
		//Если СтруктураПараметров.Отдел = Неопределено Тогда
		//	Набор.Запрос = ?(ПустаяСтрока(СтатьяБюджета.ЗапросФактРасшифровка), СтрЗаменить(Набор.Запрос, "И Отдел = &Отдел", ""), СтатьяБюджета.ЗапросФактРасшифровка);
		//КонецЕсли;	
		
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
		//КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(КомпоновщикОтчета.ПользовательскиеНастройки);
		
		КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, "ДатаНачала", 	СтруктураПараметров.ДатаНачала);
		КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, "ДатаОкончания", СтруктураПараметров.ДатаОкончания);
		КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, "СтатьяБюджета", СтруктураПараметров.СтатьяБюджета);
		КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, "Подразделение", СтруктураПараметров.Подразделение);
		
		Для Каждого СтрокаПараметра Из НастройкиЗапроса.Параметры Цикл
			КомпоновщикНастроекУстановитьПараметр(КомпоновщикНастроек, СтрокаПараметра.Ключ, СтрокаПараметра.Значение);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Подразделение) Тогда
			НовЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовЭлемент.Использование 	= Истина;
			НовЭлемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Подразделение");
			НовЭлемент.ПравоеЗначение 	= СтруктураПараметров.Подразделение;
		КонецЕсли;
			
		//Для каждого элементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		//	элементОтбора.Использование = Ложь;
		//КонецЦикла;
	    АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ГУИД); 

		//Формируем макет, с помощью компоновщика макета
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		//Помещаем в переменную данные о расшифровке данных
		НовыеДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		
		//Передаем в макет компоновки схему, настройки и данные расшифровки
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), НовыеДанныеРасшифровки);
		
		//Выполним компоновку с помощью процессора компоновки
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,НовыеДанныеРасшифровки);
		
		ДанныеРасшифровки = ПоместитьВоВременноеХранилище(НовыеДанныеРасшифровки, ГУИД);
		
		//Очищаем поле табличного документа
		Результат.Очистить();
		
		//Выводим результат в табличный документ
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);

		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	//	УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
	ВОзврат БылаРасшифровка;

КонецФункции

#КонецОбласти