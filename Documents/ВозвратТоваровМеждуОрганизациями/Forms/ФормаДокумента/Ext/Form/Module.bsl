&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьПартнеровКакКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма); // Обработчик подсистемы "ВерсионированиеОбъектов" // Обработчик подсистемы "Внешние обработки"
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(Объект);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	УстановитьВидимостьГФУНаправленияДеятельности();
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровМеждуОрганизациями" Тогда
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		Объект.ВидыЗапасовУказаныВручную = (ИсточникВыбора.ВидыЗапасовУказаныВручную = Истина);
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение, "ВидыЗапасов");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		ПолучитьРасшифровкуПлатежаИзХранилища(ВыбранноеЗначение.АдресПлатежейВХранилище);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		ТекстСчетФактура = ВыбранноеЗначение.ПредставлениеСчетаФактуры;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
	 	НастроитьПредставлениеСчетаФактурыПолученного();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ((Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор)
			Или Параметр.СписокОснований.НайтиПоЗначению(Объект.Ссылка) <> Неопределено) Тогда
		ОбновитьТекстСчетаФактуры();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтеграцияЕГАИС
	Если (ИмяСобытия = "Запись_ТТНВходящаяЕГАИС"
		ИЛИ ИмяСобытия = "Запись_ТТНИсходящаяЕГАИС")
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

КонецПроцедуры 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьПрочиеДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	
	НастроитьПредставлениеСчетаФактурыПолученного(НеТребуетсяВводСчетаФактуры);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВозвратТоваровМеждуОрганизациями",ПараметрыЗаписи,Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		ОрганизацияПолучательПриИзмененииСервер();
	КонецЕсли;
	УстановитьПараметрыВыбораДоговора();
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента<>Объект.Валюта И Объект.Товары.Количество()>0 Тогда
		ВалютаПриИзмененииСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента,Объект.Валюта);
	КонецЕсли;
	ВалютаДокумента = Объект.Валюта;
	УстановитьПараметрыВыбораДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидЦены) И Объект.Товары.Количество()>0 Тогда
		ДиалогОтвет = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ВидЦеныПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить цены в табличной части документа?'"),РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДиалогОтвет = РезультатВопроса;
    Если ДиалогОтвет = КодВозвратаДиалога.Да Тогда
        ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены);
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ДокументПоступленияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыЧерезОтдельногоКонтрагентаПриИзменении(Элемент)
	НастроитьЭлементыПосредника();
	УстановитьПараметрыВыбораДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	Объект.ВидыЗапасовУказаныВручную = Объект.ВидыЗапасовУказаныВручную;
	ХозяйственнаяОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	НалогообложениеНДСПриИзмененииСервер();
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	 НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПродажиПриИзменении(Элемент)
	УстановитьВидимостьГФУНаправленияДеятельности();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПокупкиПриИзменении(Элемент)
	УстановитьВидимостьГФУНаправленияДеятельности();
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Поле = Элементы.ТоварыЦена
	 И ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
	ИначеЕсли Поле = Элементы.ТоварыСумма
	 И ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
	 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования суммы необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.Товары.ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия.Вставить("ПроверитьХарактеристикуПоВладельцу",ТекущаяСтрока.Характеристика);
	Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",ТекущаяСтрока.Упаковка);
	Действия.Вставить("ЗаполнитьСтавкуНДС",Объект.НалогообложениеНДС);
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
	Действия.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	Действия.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));

	Действия.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	Действия.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
    Если ТекущаяСтрока.Количество > 0 Тогда
        Действия.Вставить("ПересчитатьЦенуЗаУпаковку",ТекущаяСтрока.Количество);
    ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
        Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    КонецЕсли;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена<>0 Тогда
		ТекущаяСтрока.ВидЦены = Неопределено;
	КонецЕсли;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Действия.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");

	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТаблицы.Сумма = Объект.Товары.Итог("СуммаСНДС")-Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация",           Объект.Организация);
	
	Если Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
		ЗначенияОтбора.Вставить("Партнер",    Объект.Партнер);
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	Иначе
		ЗначенияОтбора.Вставить("Контрагент", Объект.ОрганизацияПолучатель);
	КонецЕсли;
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент         = Объект.Ссылка;
	НастройкиВыбора.ЗапретитьДоговорыПоДокументам = Истина;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры // РасшифровкаПлатежаЗаказОбработкаВыбора()

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов = 0;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов = 0;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	Перем АдресТоваров, АдресВидовЗапасов;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваров, АдресВидовЗапасов, "ВидыЗапасов");
	ФинансыКлиент.ОткрытьВидыЗапасов(Объект, АдресТоваров, АдресВидовЗапасов, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамОтправителя(Команда)
	СтруктураРеквизитов = Новый Структура("Организация, ОрганизацияПолучатель, Склад", "Отправитель", "Получатель");
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамОтправителяЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамПолучателя(Команда)
	СтруктураРеквизитов = Новый Структура("Организация, ОрганизацияПолучатель, Склад", "Отправитель", "Получатель");
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамПолучателяЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,,
			Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамВзаиморасчетов(Команда)
	
	СтруктураРеквизитов = Новый Структура("Организация, Валюта, ХозяйственнаяОперация", "Отправитель", "Валюта", "Операция");
	Если Объект.РасчетыЧерезОтдельногоКонтрагента Тогда	
		СтруктураРеквизитов.Вставить("Партнер","Партнер");
		СтруктураРеквизитов.Вставить("Контрагент","Контрагент");
	Иначе
		СтруктураРеквизитов.Вставить("ОрганизацияПолучатель","Получатель");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамВзаиморасчетовЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	ПараметрыОткрытия.Вставить("Склад",                                Объект.Склад);
	
	ВозвращаемыеПараметры = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВозвращаемыеПараметры = Результат;
    Если ВозвращаемыеПараметры <> Неопределено Тогда
        ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
        Модифицированность = Истина;
        
        ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Ложь);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//
	
	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	ПродажиСервер.ПартнерПриИзменении(Объект);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер()
	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьПоПередачеТоваров(Объект,Объект.ДокументПоступления);
	НастроитьЭлементыПосредника();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Объект.ОрганизацияПолучатель;
	СтруктураПараметров.НаправлениеДеятельности = Объект.НаправлениеДеятельности;

	Объект.БанковскийСчетОрганизацииПолучателя = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Объект.ОрганизацияПолучатель,
		"Фактический", ТекущаяДатаСеанса());
	НовоеНалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Объект.ОрганизацияПолучатель,Неопределено,Объект.Дата);
	Если НовоеНалогообложениеНДС <> Объект.НалогообложениеНДС Тогда
		Объект.НалогообложениеНДС = НовоеНалогообложениеНДС;
		НалогообложениеНДСПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ОбновитьТекстСчетаФактуры();
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьПредставлениеСчетаФактурыПолученного(НеТребуетсяВводСчетаФактуры);
	
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	ПроверитьИОчиститьОрганизациюПолучатель();
	УстановитьПараметрыВыбораДоговора();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(ВалютаНовая)
	
	КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Объект.Дата);
	КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая,Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(Объект.Товары,Объект.ЦенаВключаетНДС,ВалютаДокумента,ВалютаНовая,КурсыСтарые,КурсыНовые);
	ВзаиморасчетыСервер.ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта,Элементы);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура();
	Действия.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, Неопределено);
	НастроитьИтогиФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер,Объект.Контрагент);
	ПродажиСервер.ПартнерПриИзменении(Объект);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ОбновитьТекстСчетаФактуры();
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьПредставлениеСчетаФактурыПолученного(НеТребуетсяВводСчетаФактуры);
	
	ЗаполнитьПрочиеДанныеФормы();
	НастроитьЭлементыВзаиморасчетов();
	УстановитьПараметрыВыбораДоговора();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.НаправлениеДеятельности, "УчетДоходов, УчетЗатрат");
		Если НЕ СтруктураРеквизитов.УчетДоходов ИЛИ НЕ СтруктураРеквизитов.УчетЗатрат Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГФУНаправленияДеятельности()
	
	ПорядокРасчетовПоДоговорам  = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ЗначениеПорядкаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
		Если ЗначениеПорядкаРасчетов = ПорядокРасчетовПоДоговорам Тогда
			Элементы.ГруппаФинансовогоУчета.Видимость = Ложь;
			Элементы.ГруппаФинансовогоУчетаПолучателя.Видимость = Ложь;
			Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Иначе
			Элементы.ГруппаФинансовогоУчета.Видимость = Истина;
			Элементы.ГруппаФинансовогоУчетаПолучателя.Видимость = Истина;
			Элементы.НаправлениеДеятельности.Видимость = Истина;
		КонецЕсли;	
	ИначеЕсли Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
		ДоговораРасчетов = Новый Массив;
		Если ЗначениеЗаполнено(Объект.ДоговорПокупки) Тогда
			ДоговораРасчетов.Добавить(Объект.ДоговорПокупки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДоговорПродажи) Тогда
			ДоговораРасчетов.Добавить(Объект.ДоговорПродажи)
		КонецЕсли;
		Если ДоговораРасчетов.Количество() Тогда
			ЗначенияПорядкаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДоговораРасчетов, "ПорядокРасчетов");
			ПорядокРасчетовПолучателяПоДоговорам = ЗначенияПорядкаРасчетов.Получить(Объект.ДоговорПокупки) = ПорядокРасчетовПоДоговорам;
			ПорядокРасчетовОтправителяПоДоговорам = ЗначенияПорядкаРасчетов.Получить(Объект.ДоговорПродажи) = ПорядокРасчетовПоДоговорам;
			Элементы.ГруппаФинансовогоУчетаПолучателя.Видимость = Не ПорядокРасчетовПолучателяПоДоговорам;
			Элементы.ГруппаФинансовогоУчета.Видимость = Не ПорядокРасчетовОтправителяПоДоговорам;		
		Иначе
			Элементы.ГруппаФинансовогоУчета.Видимость = Истина;
			Элементы.ГруппаФинансовогоУчетаПолучателя.Видимость = Истина;
		КонецЕсли;
		Элементы.НаправлениеДеятельности.Видимость = Истина;
	Иначе
		Элементы.ГруппаФинансовогоУчета.Видимость = Истина;
		Элементы.ГруппаФинансовогоУчетаПолучателя.Видимость = Истина;
		Элементы.НаправлениеДеятельности.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище, НазваниеТЧВидовЗапасов)
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,Объект[НазваниеТЧВидовЗапасов],УникальныйИдентификатор,
		АдресТоваровВХранилище,АдресВидовЗапасовВХранилище);
КонецПроцедуры 

&НаСервере
Функция ПоместитьТоварыВХранилище()
	ТоварыКЗаполнению = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Серия, Назначение, Количество");
	Возврат ПоместитьВоВременноеХранилище(ТоварыКЗаполнению, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
	
	КэшированныеЗначения = Неопределено;
	Действия = Новый Структура("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, КэшированныеЗначения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ПродажиСервер.ЗаполнитьЦены(Объект.Товары, , ПараметрыЗаполнения, СтруктураДействий);
	
	ЗаполнитьДополнительныеПризнакиТоваров();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВХранилище, НазваниеТЧВидовЗапасов)
	Объект[НазваниеТЧВидовЗапасов].Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	Возврат ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(Объект.РасшифровкаПлатежа, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресВХранилище)
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Серия, СтатусУказанияСерий, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, Серия, СтатусУказанияСерий, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
				СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС",   Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект)
	
	ВалютаДокумента = Объект.Валюта;
	ЗаполнитьПрочиеДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	НастроитьЭлементыПосредника();
	НастроитьЭлементыВзаиморасчетов();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	УстановитьПараметрыВыбораДоговора();
	
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
										ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	ОбновитьТекстСчетаФактуры();
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьПредставлениеСчетаФактурыПолученного(НеТребуетсяВводСчетаФактуры);
	
	НастроитьИтогиФормы(ЭтаФорма);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект,
																									Документы.ВозвратТоваровМеждуОрганизациями));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПосредника()
	Элементы.Партнер.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.Контрагент.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ДоговорПродажи.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ДоговорПокупки.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.Договор.Видимость = НЕ Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.НомерВходящегоДокумента.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ДатаВходящегоДокумента.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ГруппаДокументы.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ГруппаСтраницыСчетФактураПосредника.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	
	Если Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
		Объект.Договор = Неопределено;
	Иначе
		Объект.ДоговорПродажи = Неопределено;
		Объект.ДоговорПокупки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыВзаиморасчетов()
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр = Не ЭтоПродажа И ЭтоКомиссия;
	Элементы.РасшифровкаПлатежаПодборПоОстаткам.Доступность = ЭтоПродажа И Не ЭтоКомиссия;
	Элементы.СтраницаВзаиморасчеты.Видимость = ЭтоПродажа И Не ЭтоКомиссия;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьИтогиФормы(Форма)

	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрочиеДанныеФормы()
	ЭтоКомиссия = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	ЭтоПродажа = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеПризнакиТоваров()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
											
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦенЗаполнения, Знач ВыделенныеСтроки = Неопределено)
	
	МассивСтрок = Неопределено;
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Строка);
			Если СтрокаТЧ <> Неопределено Тогда
				МассивСтрок.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрок.Количество() = 0 Тогда
			МассивСтрок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦенЗаполнения);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(Объект.Товары, , ПараметрыЗаполнения, СтруктураДействий);
	
	Возврат ЦеныРассчитаны;
КонецФункции

&НаСервере
Процедура НастроитьПредставлениеСчетаФактурыПолученного(НеТребуетсяВводСчетаФактуры = Неопределено)
	
	Если НеТребуетсяВводСчетаФактуры = Неопределено Тогда
		НеТребуетсяВводСчетаФактуры = Объект.ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями;
	КонецЕсли;
			
	ЭтаФорма.ТекстСчетФактураПосредника = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
		Объект.Ссылка, Объект.ОрганизацияПолучатель, НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизацииПолучателя()
	
	МассивПараметров = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.ОрганизацияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизациюПолучатель()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Неопределено;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресОбъектаВоВременномХранилище()
	
	СтруктураОбъекта = Новый Структура;
	
	Для каждого Реквизит Из Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.Реквизиты Цикл
		
		СтруктураОбъекта.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации(ПоказыватьРеквизитыТТН)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                       Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя",      Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",       Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",           Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",                    Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                     Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",                  Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                    Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",                    Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",                   Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Партнер",                             Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",               Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("ОрганизацияПолучатель",               Объект.ОрганизацияПолучатель);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", Объект.БанковскийСчетОрганизацииПолучателя);
	СтруктураПараметров.Вставить("Контрагент",                          Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                      Ложь);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",              ПоказыватьРеквизитыТТН);
	СтруктураПараметров.Вставить("ТипОбъекта",                          "ВозвратТоваровМеждуОрганизациями");
	СтруктураПараметров.Вставить("АдресОбъектаВоВременномХранилище",    АдресОбъектаВоВременномХранилище());
	СтруктураПараметров.Вставить("РасчетыЧерезОрганизацию",             НЕ Объект.РасчетыЧерезОтдельногоКонтрагента);
	СтруктураПараметров.Вставить("Организация",                         Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                                Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                        Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",                    Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",           Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Отпустил",                            Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",                   Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Основание",                           Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",                       Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",                      Объект.ОснованиеНомер);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Объект.Склад, Объект.Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Объект.Отпустил = СтруктураОтветственного.Ответственный;
		Объект.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект,
																									Документы.ВозвратТоваровМеждуОрганизациями));
																									
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактуры()
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	
	ТекстСчетФактура = ПродажиСервер.ПредставлениеСчетаФактурыВДокументеПродажи(
		Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.ОрганизацияПолучатель));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.Валюта));
	
	МассивТиповДоговораПродажиПартнер = Новый Массив;
	МассивТиповДоговораПокупкиПартнер = Новый Массив;
		
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", Перечисления.ТипыДоговоровМеждуОрганизациями.Комиссионный));
		МассивТиповДоговораПродажиПартнер.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом")));
		МассивТиповДоговораПокупкиПартнер.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером")));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа));
		МассивТиповДоговораПродажиПартнер.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем")));
		МассивТиповДоговораПокупкиПартнер.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком")));
	КонецЕсли;
	
	Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ДоговорПродажи.ПараметрыВыбора = Новый ФиксированныйМассив(МассивТиповДоговораПродажиПартнер);
	Элементы.ДоговорПокупки.ПараметрыВыбора = Новый ФиксированныйМассив(МассивТиповДоговораПокупкиПартнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, Элементы.Товары.ВыделенныеСтроки);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамОтправителяЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресВХранилище = ПоместитьТоварыВХранилище();
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("АдресВХранилище", АдресВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("ОрганизацияПолучатель", Объект.ОрганизацияПолучатель);
	ПараметрыПодбора.Вставить("ЭтоКомиссия", ЭтоКомиссия);
	ПараметрыПодбора.Вставить("ЭтоПродажа", ЭтоПродажа);
	ПараметрыПодбора.Вставить("ЭтоВозврат", Истина);
	ПараметрыПодбора.Вставить("ИспользоватьСерииНоменклатуры", ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры);
	
	ОткрытьФорму("ОбщаяФорма.ПодборТоваровМеждуОрганизациями", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамПолучателяЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресВХранилище = ПоместитьТоварыВХранилище();
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("АдресВХранилище", АдресВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ОрганизацияПолучатель", Объект.ОрганизацияПолучатель);
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("ОтрицательныеОстатки", Истина);
	ПараметрыПодбора.Вставить("ЭтоКомиссия", ЭтоКомиссия);
	ПараметрыПодбора.Вставить("ЭтоПродажа", ЭтоПродажа);
	ПараметрыПодбора.Вставить("ИспользоватьСерииНоменклатуры", ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры);
	
	ОткрытьФорму("ОбщаяФорма.ПодборТоваровМеждуОрганизациями", ПараметрыПодбора,  ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамВзаиморасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Партнер", ?(Объект.РасчетыЧерезОтдельногоКонтрагента, Объект.Партнер, Неопределено));
	ПараметрыПодбора.Вставить("Контрагент", ?(Объект.РасчетыЧерезОтдельногоКонтрагента, Объект.Контрагент, Объект.ОрганизацияПолучатель));
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.Товары.Итог("СуммаСНДС"));
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ОткрытьФорму("ОбщаяФорма.ПодборПоРасчетамСПартнерами", ПараметрыПодбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	РеквизитыКЗаполнению = "
	|ПорядокРасчетов,
	|НаименованиеДляПечати,
	|Номер,
	|Дата,
	|НаправлениеДеятельности,
	|ГруппаФинансовогоУчета,
	|ГруппаФинансовогоУчетаПолучателя
	|";
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, РеквизитыКЗаполнению);
	
	Объект.НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
	
	Объект.Основание = РеквизитыДоговора.НаименованиеДляПечати;
	Объект.ОснованиеНомер = РеквизитыДоговора.Номер;
	Объект.ОснованиеДата = РеквизитыДоговора.Дата;
	
	Объект.ГруппаФинансовогоУчета = РеквизитыДоговора.ГруппаФинансовогоУчета;
	Объект.ГруппаФинансовогоУчетаПолучателя = РеквизитыДоговора.ГруппаФинансовогоУчетаПолучателя;
	
	УстановитьВидимостьГФУНаправленияДеятельности();

КонецПроцедуры

// ИнтеграцияЕГАИС
&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИнтеграцияЕГАИСУТ.СформироватьТекстДокументаЕГАИС(ЭтаФорма);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

#КонецОбласти

#КонецОбласти
