#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьОрганизации(Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	Если ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	КонецЕсли;
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаСНДС");
	КонецЕсли;

	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями Тогда
		СуммаПроверки = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары,ЦенаВключаетНДС);
		ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(ЭтотОбъект,СуммаПроверки,ХозяйственнаяОперация,Отказ);
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВозвратТоваровМеждуОрганизациями),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект,ПроверяемыеРеквизиты,Отказ);

	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ПроверитьЗаполнениеСумм(Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект,РежимЗаписи,РежимПроведения);
	ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи",РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,
														НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВозвратТоваровМеждуОрганизациями));
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары,ЦенаВключаетНДС);
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактурыПередЗаписьюОснования(ЭтотОбъект);
	
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, ОрганизацияПолучатель);
	
	Если Не РасчетыЧерезОтдельногоКонтрагента Тогда
		Партнер = Неопределено;
		Контрагент = Неопределено;
		БанковскийСчетКонтрагента = Неопределено;
		ДатаВходящегоДокумента = Неопределено;
		НомерВходящегоДокумента = "";
	КонецЕсли;
	
	Если РежимЗаписи=РежимЗаписиДокумента.Проведение Тогда
		Если ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
			РасшифровкаПлатежа.Очистить();
		Иначе
			СтрокаРасшифровки = Неопределено;
			Если РасшифровкаПлатежа.Количество()=0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
			ИначеЕсли РасшифровкаПлатежа.Количество()= 1 И Не ЗначениеЗаполнено(РасшифровкаПлатежа[0].Заказ) Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа[0];
			КонецЕсли;
			Если СтрокаРасшифровки <> Неопределено Тогда
				СтрокаРасшифровки.Сумма = СуммаДокумента;
				Если ЗначениеЗаполнено(Договор)
					И Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
					СтрокаРасшифровки.Заказ = Договор;
				Иначе
					СтрокаРасшифровки.Заказ = ДокументПоступления;
				КонецЕсли;
			КонецЕсли;
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта,Дата,РасшифровкаПлатежа);
		КонецЕсли;
		
		ЗаполнитьАналитикиУчетаНоменклатуры();
		
		ВидыЗапасовУказаныВручную = ВидыЗапасовУказаныВручную И ИзмененияВидовЗапасовРазрешены();
		ЗаполнитьВидыЗапасов(Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполненения = ПараметрыЗаполненияВидовЗапасов("Организация");
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполненения);
	
	ПараметрыЗаполненения = ПараметрыЗаполненияВидовЗапасов("ОрганизацияПолучатель");
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполненения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Ложь, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВозвратТоваровМеждуОрганизациями.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства,Движения,Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства,Движения,Отказ);

	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);

	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполненения = ПараметрыЗаполненияВидовЗапасов("ОрганизацияПолучатель");
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполненения);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект, Истина, ТребуетсяСчетФактураВыданный());
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОтразитьНеобходимостьОформленияСчетаФактуры(ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьРеквизитыПоУмолчанию(ЭтотОбъект);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаполнятьПоСхеме") Тогда
		
		Организация				= ДанныеЗаполнения.Организация;
		ОрганизацияПолучатель	= ДанныеЗаполнения.ОрганизацияПолучатель;
		Склад					= ДанныеЗаполнения.Склад;
		ХозяйственнаяОперация	= ДанныеЗаполнения.ХозяйственнаяОперация;
		Если ДанныеЗаполнения.Свойство("Договор")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Договор) Тогда
			Договор = ДанныеЗаполнения.Договор;
			
			ИменаПолей = "НаправлениеДеятельности, НаименованиеДляПечати, Номер, Дата, ВалютаВзаиморасчетов";
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаПолей);
			НаправлениеДеятельности = РеквизитыДоговора.НаправлениеДеятельности;
			Основание = РеквизитыДоговора.НаименованиеДляПечати;
			ОснованиеНомер = РеквизитыДоговора.Номер;
			ОснованиеДата = РеквизитыДоговора.Дата;
			Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ВидЦены") Тогда
			ВидЦены = ДанныеЗаполнения.ВидЦены;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Валюта")
			И ДанныеЗаполнения.Валюта Тогда
			Валюта = ДанныеЗаполнения.Валюта;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Дата)
		 И ЗначениеЗаполнено(ДанныеЗаполнения.КонецПериода)
		 И ДанныеЗаполнения.КонецПериода < ТекущаяДатаСеанса() Тогда
			Дата = ДанныеЗаполнения.КонецПериода;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЭтоПередачаВозврат21") Тогда
			Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьТоварыПоОстаткамКВозврату(
				ЭтотОбъект,
				ДанныеЗаполнения.НачалоПериода,
				ДанныеЗаполнения.КонецПериода);
			Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьНалогобложениеИЦеныПоУмолчанию(ЭтотОбъект);
		Иначе
			НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(ОрганизацияПолучатель, Неопределено, Дата);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда	
		ЗаполнитьПоПередачеТоваров(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСчетФактураПолученный = 
		((ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
			И РасчетыЧерезОтдельногоКонтрагента);

	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен, ТребуетсяСчетФактураПолученный);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПоТоварамКОформлению = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоПередачеТоваров(Знач ДокументОснование)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель               КАК Организация,
	|	ДанныеДокумента.Организация                         КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Склад                               КАК Склад,
	|	ДанныеДокумента.Валюта                              КАК Валюта,
	|	ДанныеДокумента.Договор                             КАК Договор,
	|	ДанныеДокумента.ДоговорПродажи                      КАК ДоговорПокупки,
	|	ДанныеДокумента.ДоговорПокупки                      КАК ДоговорПродажи,
	|	ДанныеДокумента.ВидЦены                             КАК ВидЦены,
	|	ДанныеДокумента.ЦенаВключаетНДС                     КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизации           КАК БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.Подразделение                       КАК Подразделение,
	|	ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента   КАК РасчетыЧерезОтдельногоКонтрагента,
	|	ДанныеДокумента.Партнер                             КАК Партнер,
	|	ДанныеДокумента.Контрагент                          КАК Контрагент,
	|	ДанныеДокумента.БанковскийСчетКонтрагента           КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.Ссылка                              КАК ДокументПоступления,
	|	(ВЫБОР ДанныеДокумента.ХозяйственнаяОперация
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
	|	КОНЕЦ)                                              КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ГруппаФинансовогоУчета              КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Основание                           КАК Основание,
	|	ДанныеДокумента.ОснованиеДата                       КАК ОснованиеДата,
	|	ДанныеДокумента.ОснованиеНомер                      КАК ОснованиеНомер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ЭтотОбъект[Колонка.Имя] = Выборка[Колонка.Имя];
		КонецЦикла
	КонецЕсли;
	
	// Заполним данные табличной части "Товары" документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.ВидЦены,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СуммаСНДС,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.СтатусУказанияСерий,
	|	ТаблицаТовары.Назначение
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаТовары.Номенклатура
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И СпрНоменклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокиПоТоварамКОформлению = Товары.НайтиСтроки(Новый Структура("ПоТоварамКОформлению", Истина));
	ЕстьПоТоварамКОформлению = СтрокиПоТоварамКОформлению.Количество() > 0;
	ЕстьПоРезервам           = СтрокиПоТоварамКОформлению.Количество() <> Товары.Количество();
	ВидыЗапасовПерезаполнены = Ложь;
	
	Если ЕстьПоРезервам Тогда
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента(Ложь);
		ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
		
		Если Не Проведен
		 Или ПерезаполнитьВидыЗапасов
		 Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		 Или ЗапасыСервер.ПроверитьИзменениеТоваровПоКоличествуИСумме(МенеджерВременныхТаблиц) Тогда
		 
				ВидыЗапасовПерезаполнены = Истина;
				
				Если ЕстьПоТоварамКОформлению Тогда
					ВидыЗапасовПоКОформлению = ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", Истина));
					ВидыЗапасов.Очистить();
				КонецЕсли;
				
				ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов("Организация");
				ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
				ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС, СкладОтгрузки",
					"Количество, СуммаСНДС, СуммаНДС");
			
				ЗаполнитьВидЗапасовПолучателя();
				
				ЗаполнитьДопКолонкиВидовЗапасов(Ложь);
				ДополнитьВидыЗапасовДокументомРеализации(ПараметрыЗаполнения);
				
				Если ЕстьПоТоварамКОформлению Тогда
					ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВидыЗапасов, ВидыЗапасовПоКОформлению);
				КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЕстьПоТоварамКОформлению Тогда
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента(Истина);
		ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
		
		Если Не Проведен
			ИЛИ ПерезаполнитьВидыЗапасов
			ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
			Или ЗапасыСервер.ПроверитьИзменениеТоваровПоКоличествуИСумме(МенеджерВременныхТаблиц) Тогда
			
			ВидыЗапасовПерезаполнены = Истина;
			
			ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
			ПараметрыЗаполнения.ДоступныеВидыЗапасовУжеСформированы = Истина;
			ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию = Ложь;
			ПараметрыЗаполнения.ИмяТаблицыОстатков = "ТоварыОрганизацийКВозврату";
			
			ВтДоступныеВидыЗапасовПоТоварамКПередаче(МенеджерВременныхТаблиц);
			
			Если ЕстьПоРезервам Тогда
				ВидыЗапасовНеПоКОформлению = ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", Ложь));
				ВидыЗапасов.Очистить();
			КонецЕсли;
			
			ЗапасыСервер.ЗаполнитьВидыЗапасовПоОстаткамКОформлению(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
			
			Для Каждого СтрТабл из ВидыЗапасов Цикл
				СтрТабл.ПоТоварамКОформлению = Истина;
			КонецЦикла;
			
			ЗаполнитьВидЗапасовПолучателя();
			ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, СтавкаНДС,ПоТоварамКОформлению", "Количество, СуммаСНДС, СуммаНДС");
			ЗаполнитьДопКолонкиВидовЗапасов(Истина);
			
			ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов("Организация");
			ДополнитьВидыЗапасовДокументомРеализации(ПараметрыЗаполнения);
			
			Если ЕстьПоРезервам Тогда
				ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВидыЗапасов, ВидыЗапасовНеПоКОформлению);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВидыЗапасовПерезаполнены
		И ВидыЗапасов.Найти(Справочники.ВидыЗапасов.ПустаяСсылка(), "ВидЗапасовПолучателя") <> Неопределено Тогда
		
		ТекстИсключения = "ru = 'Не заполнены дополнительные колонки в табличной части ""Виды запасов"".'";
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует временную таблицу доступных видов запасов.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос("
		// по товарам к оформлению
		|ВЫБРАТЬ
		|	ВидыЗапасовВладельца.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ПОМЕСТИТЬ
		|	ДоступныеВидыЗапасов
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
		|		ПО ВидыЗапасовВладельца.Ссылка = ВидыЗапасов.ВидЗапасовВладельца
		|ГДЕ
		|	ВидыЗапасов.Организация = &Организация И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И НЕ ВидыЗапасов.ПометкаУдаления
		|	И (
		|		НЕ &ВозвратПоКомиссии И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|		ИЛИ
		|		&ВозвратПоКомиссии И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|	)
		|	И (
		|		ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			И ВидыЗапасовВладельца.НалогообложениеНДС = &НалогообложениеНДС
		|		ИЛИ
		|		ВидыЗапасовВладельца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|			И &НалогообложениеПолучателя = &НалогообложениеНДС
		|	)
		// обычный возврат между организациями
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	НЕ &ВозвратПоКомиссии
		|	И ВидыЗапасов.Организация = &Организация И НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И НЕ ВидыЗапасов.ПометкаУдаления
		|	И (
		|		ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|			И &НалогообложениеПолучателя = &НалогообложениеНДС
		|		ИЛИ
		|		ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|			И ВидыЗапасов.НалогообложениеНДС = &НалогообложениеНДС
		|	)
		// возврат по комиссии
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
		|	ВидыЗапасов.Ссылка КАК ВидЗапасовПродавца
		|ИЗ
		|	Справочник.ВидыЗапасов КАК ВидыЗапасов
		|ГДЕ
		|	&ВозвратПоКомиссии
		|	И ВидыЗапасов.Организация = &Организация И НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации
		|	И НЕ ВидыЗапасов.ПометкаУдаления
		|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
		|	И ВидыЗапасов.НалогообложениеНДС = &НалогообложениеНДС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЗапасов
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВозвратПоКомиссии",
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("НалогообложениеПолучателя",
		Справочники.Организации.НалогообложениеНДС(ОрганизацияПолучатель, Неопределено, Дата));
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ТаблицаТоваров.Сделка КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|");
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Партнер);
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);

КонецПроцедуры

Функция ВременныеТаблицыДанныхДокумента(ПоТоварамКОформлению) Экспорт
	Запрос = Новый Запрос("
		// ТаблицаДанныхДокумента - Реквизиты объекта
		|ВЫБРАТЬ
		|	&Дата КАК Дата,
		|	&Организация КАК Организация,
		|	&Склад КАК Склад,
		|	&НалогообложениеНДС КАК НалогообложениеНДС,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	&ДокументПоступления КАК ДокументПоступления,
		|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
		|	&ОрганизацияПолучатель КАК ОрганизацияПолучатель,
		|	&РасчетыЧерезОтдельногоКонтрагента КАК РасчетыЧерезОтдельногоКонтрагента,
		|	&Партнер КАК Партнер,
		|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	&Контрагент КАК Контрагент,
		|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
		|ПОМЕСТИТЬ ТаблицаДанныхДокумента
		|;
		|/////////////////////////////////////////////////////
		// ВтВидыЗапасов - Табчасть ВидыЗапасов
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаВознаграждения,
		|	0 КАК СуммаНДСВознаграждения,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
		|	&Склад КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) как Сделка,
		|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
		|ПОМЕСТИТЬ ВтВидыЗапасов
		|ИЗ
		|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|//////////////////////////////////////////////////////
		// ТаблицаВидыЗапасов - Табчасть ВидыЗапасов
		|ВЫБРАТЬ
		|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Аналитика.Номенклатура КАК Номенклатура,
		|	Аналитика.Характеристика КАК Характеристика,
		|	Аналитика.Серия КАК Серия,
		|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
		|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасовПолучателя,
		|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
		|	ТаблицаВидыЗапасов.Количество КАК Количество,
		|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
		|	ТаблицаВидыЗапасов.СуммаВознаграждения КАК СуммаВознаграждения,
		|	ТаблицаВидыЗапасов.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
		|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
		|	ТаблицаВидыЗапасов.Склад КАК Склад,
		|	ТаблицаВидыЗапасов.Сделка как Сделка,
		|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
		|ПОМЕСТИТЬ ТаблицаВидыЗапасов
		|ИЗ
		|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|	ПО
		|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры
		|;
		|/////////////////////////////////////////////////////
		// ТаблицаТоваров - Табчасть Товары
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Серия КАК Серия,
		|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТаблицаТоваров.Количество КАК Количество,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
		|	0 КАК СуммаВознаграждения,
		|	0 КАК СуммаНДСВознаграждения,
		|	&Склад КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) как Сделка,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ИСТИНА КАК ПодбиратьВидыЗапасов,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|/////////////////////////////////////////////////////
		|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("РасчетыЧерезОтдельногоКонтрагента", РасчетыЧерезОтдельногоКонтрагента);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению)));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ВидыЗапасов.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению)));
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	Возврат МенеджерВременныхТаблиц;
КонецФункции

Процедура ЗаполнитьДопКолонкиВидовЗапасов(ПоТоварамКОформлению) Экспорт
	
	РеквизитыВидаЗапасов = Новый Структура();
	
	РеквизитыВидаЗапасов.Вставить("Организация", ОрганизацияПолучатель);
	РеквизитыВидаЗапасов.Вставить("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	РеквизитыВидаЗапасов.Вставить("ГруппаФинансовогоУчета", Неопределено);
	РеквизитыВидаЗапасов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	РеквизитыВидаЗапасов.Вставить("ТипЗапасов", Перечисления.ТипыЗапасов.Товар);
	РеквизитыВидаЗапасов.Вставить("ВладелецТовара", Неопределено);
	РеквизитыВидаЗапасов.Вставить("Контрагент", Неопределено);
	РеквизитыВидаЗапасов.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	РеквизитыВидаЗапасов.Вставить("Договор", Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка());
	РеквизитыВидаЗапасов.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	РеквизитыВидаЗапасов.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	
	ТаблицаТовары = Товары.Выгрузить(Новый Структура("ПоТоварамКОформлению", ПоТоварамКОформлению), "АналитикаУчетаНоменклатуры, Упаковка, Количество, КоличествоУпаковок");
	ТаблицаТовары.Свернуть("АналитикаУчетаНоменклатуры, Упаковка", "Количество, КоличествоУпаковок");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваров = СтрокаТоваров.Количество;
		КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Упаковка = СтрокаТоваров.Упаковка;
			НоваяСтрока.КоличествоУпаковок = ?(КоличествоТоваров <> 0, КоличествоУпаковок * Количество / КоличествоТоваров, 0);
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.СуммаСНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаСНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС = ?(СтрокаЗапасов.Количество <> 0, Количество * СтрокаЗапасов.СуммаНДС / СтрокаЗапасов.Количество, 0);
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС = СтрокаЗапасов.СуммаСНДС - НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС = СтрокаЗапасов.СуммаНДС - НоваяСтрока.СуммаНДС;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			КоличествоУпаковок = КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Заполняем ВидыЗапасов.ВидЗапасовПолучателя
Процедура ЗаполнитьВидЗапасовПолучателя()
	Для Каждого Запас Из ВидыЗапасов Цикл
		Если ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
			Запас.ВидЗапасовПолучателя = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	
	Остатки = ОстаткиПереданныхТоваров();
	СтрокОстатков = Остатки.Количество();
	ИндексОстатка = 0;
	
	Пока ИндексОстатка < СтрокОстатков Цикл
		Остаток = Остатки[ИндексОстатка];
		ИндексОстатка = ИндексОстатка + 1;
		Если Отбор.НомерГТД <> Остаток.НомерГТД Или Отбор.ВидЗапасов <> Остаток.ВидЗапасов
			Или Отбор.АналитикаУчетаНоменклатуры <> Остаток.АналитикаУчетаНоменклатуры
		Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Остаток);
			Запасы = ВидыЗапасов.НайтиСтроки(Отбор);
			СтрокЗапасов = Запасы.Количество();
			ИндексЗапаса = 0;
		КонецЕсли;
		
		Распределить = Остаток.Количество;
		Пока ИндексЗапаса < СтрокЗапасов Цикл
			Запас = Запасы[ИндексЗапаса];
			ИндексЗапаса = ИндексЗапаса + 1;
			Если ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Распределить >= Запас.Количество Тогда
				Запас.ВидЗапасовПолучателя = Остаток.ВидЗапасовПолучателя;
				Распределить = Распределить - Запас.Количество;
			ИначеЕсли Распределить > 0. И Распределить < Запас.Количество Тогда
				НовыйЗапас = ВидыЗапасов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЗапас, Запас,
					"АналитикаУчетаНоменклатуры, НомерГТД, СтавкаНДС, ВидЗапасов");
				ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Запас.СтавкаНДС);
				
				НовыйЗапас.Количество = Запас.Количество - Распределить;
				НовыйЗапас.СуммаСНДС = НовыйЗапас.Количество * Запас.СуммаСНДС / Запас.Количество;
				НовыйЗапас.СуммаНДС =
					ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НовыйЗапас.СуммаСНДС, ПроцентНДС, ЦенаВключаетНДС);
				// запаса получателя не хватает, новый запас будет заполнен следующим запасом получателя
				Запасы.Добавить(НовыйЗапас);
				СтрокЗапасов = СтрокЗапасов + 1;
				
				Запас.Количество = Распределить;
				Запас.СуммаСНДС = Запас.СуммаСНДС - НовыйЗапас.СуммаСНДС;
				Запас.СуммаНДС = Запас.СуммаНДС - НовыйЗапас.СуммаНДС;
				Запас.ВидЗапасовПолучателя = Остаток.ВидЗапасовПолучателя;
				
				Распределить = 0.;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВидЗапасовПоУмолчанию =
		Справочники.ВидыЗапасов.ВидЗапасовДокумента(ОрганизацияПолучатель, ХозяйственнаяОперация);
	Для Каждого Запас Из ВидыЗапасов Цикл
		Если Не ЗначениеЗаполнено(Запас.ВидЗапасовПолучателя) Тогда
			Запас.ВидЗапасовПолучателя = ВидЗапасовПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Поля {АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, Период, Количество}
// Порядок {АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период УБЫВ}
Функция ОстаткиПереданныхТоваров()
	Строки = ВидыЗапасов.Выгрузить(, "АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	Строки.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	Запрос = Новый Запрос("
		// полностью подобранные виды запасов отправителя возврата, записи уникальны
		|ВЫБРАТЬ
		|	Строки.АналитикаУчетаНоменклатуры,
		|	Строки.ВидЗапасов,
		|	Строки.НомерГТД
		|ПОМЕСТИТЬ ИсходныеСтроки
		|ИЗ
		|	&Строки КАК Строки
		|;
		|ВЫБРАТЬ
		|	Строки.АналитикаУчетаНоменклатуры,
		|	Аналитика.Номенклатура,
		|	Аналитика.Характеристика,
		|	Аналитика.Назначение,
		|	Аналитика.Серия,
		|	Строки.ВидЗапасов,
		|	Строки.НомерГТД
		|ПОМЕСТИТЬ Строки
		|ИЗ
		|	ИсходныеСтроки КАК Строки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
		|		ПО Аналитика.Ссылка = Строки.АналитикаУчетаНоменклатуры
		|;
		// собираем объем переданных товаров за вычетом возвращенных товаров
		|ВЫБРАТЬ
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.ВидЗапасовПолучателя,
		|	Движения.НомерГТД,
		|	МАКСИМУМ(Движения.Период) КАК Период,
		|	СУММА(Движения.Количество) КАК Количество
		|ИЗ (
		// Для сценария: передача с назначением -> возврат между организациями с назначением
		|	ВЫБРАТЬ
		|		Строки.АналитикаУчетаНоменклатуры,
		|		Движения.КорВидЗапасов КАК ВидЗапасов,
		|		Движения.ВидЗапасов КАК ВидЗапасовПолучателя,
		|		Движения.НомерГТД,
		|		Движения.Период,
		|		Движения.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
		|			ПО Передачи.Ссылка = Движения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ПО Аналитика.КлючАналитики = Движения.АналитикаУчетаНоменклатуры	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Строки КАК Строки
		|			ПО Строки.Номенклатура = Аналитика.Номенклатура
		|			И Строки.Характеристика = Аналитика.Характеристика
		|			И Строки.Назначение = Аналитика.Назначение
		|			И Строки.Серия = Аналитика.Серия
		|			И Строки.ВидЗапасов = Движения.КорВидЗапасов
		|			И Строки.НомерГТД = Движения.НомерГТД
		|	ГДЕ
		|		Движения.Период <= &ДатаОстатков И Движения.Активность
		|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Передачи.Организация = &ОрганизацияПолучатель
		|		И Передачи.ОрганизацияПолучатель = &Организация
		|		И Строки.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		// Для сценария: передача с назначением -> возврат товаров от клиента -> возврат между организациями,
		// т.к. при возврате товаров от клиента не сохраняется назначение.
		|	ВЫБРАТЬ
		|		Строки.АналитикаУчетаНоменклатуры,
		|		Движения.КорВидЗапасов КАК ВидЗапасов,
		|		Движения.ВидЗапасов КАК ВидЗапасовПолучателя,
		|		Движения.НомерГТД,
		|		Движения.Период,
		|		Движения.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передачи
		|			ПО Передачи.Ссылка = Движения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ПО Аналитика.КлючАналитики = Движения.АналитикаУчетаНоменклатуры	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Строки КАК Строки
		|			ПО Строки.Номенклатура = Аналитика.Номенклатура
		|			И Строки.Характеристика = Аналитика.Характеристика
		|			И Строки.Серия = Аналитика.Серия
		|			И Строки.ВидЗапасов = Движения.КорВидЗапасов
		|			И Строки.НомерГТД = Движения.НомерГТД
		|	ГДЕ
		|		Движения.Период <= &ДатаОстатков И Движения.Активность
		|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Передачи.Организация = &ОрганизацияПолучатель
		|		И Передачи.ОрганизацияПолучатель = &Организация
		|		И Строки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Строки.АналитикаУчетаНоменклатуры,
		|		Движения.ВидЗапасов,
		|		Движения.КорВидЗапасов КАК ВидЗапасовПолучателя,
		|		Движения.НомерГТД,
		|		Движения.Период,
		|		- Движения.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыОрганизаций КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возвраты
		|			ПО Возвраты.Ссылка = Движения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|			ПО Аналитика.КлючАналитики = Движения.АналитикаУчетаНоменклатуры		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Строки КАК Строки
		|			ПО Строки.Номенклатура = Аналитика.Номенклатура
		|			И Строки.Характеристика = Аналитика.Характеристика
		|			И Строки.Назначение = Аналитика.Назначение
		|			И Строки.Серия = Аналитика.Серия
		|			И Строки.ВидЗапасов = Движения.ВидЗапасов
		|			И Строки.НомерГТД = Движения.НомерГТД
		|	ГДЕ
		|		Движения.Период <= &ДатаОстатков И Движения.Активность
		|		И Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		И Возвраты.Ссылка <> &Ссылка
		|		И Возвраты.Организация = &Организация
		|		И Возвраты.ОрганизацияПолучатель = &ОрганизацияПолучатель
		|) КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.ВидЗапасовПолучателя,
		|	Движения.НомерГТД
		|ИМЕЮЩИЕ
		|	СУММА(Движения.Количество) > 0
		|УПОРЯДОЧИТЬ ПО
		|	Движения.АналитикаУчетаНоменклатуры,
		|	Движения.ВидЗапасов,
		|	Движения.НомерГТД,
		|	МАКСИМУМ(Движения.Период) УБЫВ
		|");
	Запрос.УстановитьПараметр("Строки", Строки);
	Запрос.УстановитьПараметр("ДатаОстатков", Перечисления.ВидыКонтроляТоваровОрганизаций.ДатаКонтроля(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ВтДоступныеВидыЗапасовПоТоварамКПередаче(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Отправитель КАК ДляОрганизации,
	|	ВозможныеВидыЗапасов.Ссылка КАК ВидЗапасов
	|ПОМЕСТИТЬ ДоступныеВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВозможныеВидыЗапасов
	|ГДЕ
	|	ВозможныеВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВозможныеВидыЗапасов.Организация = &Отправитель
	|	И ВозможныеВидыЗапасов.ВидЗапасовВладельца.Организация = &Получатель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасов";
	
	Запрос.УстановитьПараметр("Получатель", ОрганизацияПолучатель);	
	Запрос.УстановитьПараметр("Отправитель", Организация);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ИзмененияВидовЗапасовРазрешены()
	// Дублирование метода с методом формы сознательное
	Возврат ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями;
КонецФункции

Процедура ПроверитьОрганизации(Отказ)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель) Тогда
		
		Если Организация = ОрганизацияПолучатель Тогда
			
			Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Организация",
				,
				Отказ);
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
			И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
			
			Текст = НСтр("ru = 'Организация-получатель не должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ОрганизацияПолучатель",
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()
	Массив = Новый Массив;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Таблица.ЗаказКлиента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаказКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	) КАК Таблица
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ЗаказПоставщику КАК ЗаказПоставщику
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивЗаказов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПоставщику.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасшифровкаПлатежа.Заказ КАК ЗаказКлиента
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
	|		И ТИПЗНАЧЕНИЯ(РасшифровкаПлатежа.Заказ) = ТИП(Документ.ЗаказПоставщику)
	|		
	|	СГРУППИРОВАТЬ ПО
	|		РасшифровкаПлатежа.Заказ
	|
	|	) КАК Таблица
	|";
	
	Запрос.УстановитьПараметр("МассивЗаказов", ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	МассивЗависимыхЗаказов = Результат[0].Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
	МассивЗависимыхЗаказов = Результат[1].Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовПоставщикам", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

Функция ТребуетсяСчетФактураВыданный()
	
	Возврат (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	
КонецФункции

Процедура ПроверитьЗаполнениеСумм(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТоварыОбъекта.НомерСтроки,
	|	ТоварыОбъекта.Номенклатура,
	|	ТоварыОбъекта.Цена,
	|	ТоварыОбъекта.Сумма,
	|	ТоварыОбъекта.СуммаСНДС
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыОбъекта КАК ТоварыОбъекта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|
	|	ВЫБОР КОГДА Товары.Цена = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаЦена,
	|
	|	ВЫБОР КОГДА Товары.Сумма = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСумма,
	|
	|	ВЫБОР КОГДА Товары.СуммаСНДС = 0 
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСуммаСНДС
	|ИЗ
	|	Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО
	|		Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И (Товары.Цена = 0 ИЛИ Товары.Сумма = 0 ИЛИ Товары.СуммаСНДС = 0)
	|");
	
	Запрос.УстановитьПараметр("ТоварыОбъекта", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Цена, Сумма, СуммаСНДС"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонТекстаОшибки = НСтр("ru='Не заполнена ""%ИмяКолонки%"" в строке %НомерСтроки% списка ""Товары""'");
		ШаблонТекстаОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		Если Выборка.НеЗаполненаЦена Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Цена", "Цена", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСумма Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "Сумма", "Сумма", Отказ);
		КонецЕсли;
		Если Выборка.НеЗаполненаСуммаСНДС Тогда
			СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, Выборка.НомерСтроки, "СуммаСНДС", НСтр("ru='Сумма с НДС'"), Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СообщитьОбОшибкеЗаполненияСумм(ШаблонТекстаОшибки, НомерСтроки, ИмяПоля, ЗаголовокПоля, Отказ)
	ТекстОшибки = СтрЗаменить(ШаблонТекстаОшибки, "%ИмяКолонки%", ЗаголовокПоля);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки, ЭтотОбъект,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НомерСтроки, ИмяПоля), , Отказ);
КонецПроцедуры

Процедура ДополнитьВидыЗапасовДокументомРеализации(ПараметрыЗаполненияВидовЗапасов)
	Если ВидыЗапасов.Найти(Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка(), "ДокументРеализации") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
#Область ТекстЗапроса
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры,
	|	(ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями)
	|			ТОГДА Т.ВидЗапасовПолучателя
	|		ИНАЧЕ Т.ВидЗапасов КОНЕЦ) КАК ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.НомерСтроки
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ВидыЗапасов КАК Т
	|ГДЕ
	|	Т.ДокументРеализации = НЕОПРЕДЕЛЕНО
	|	ИЛИ Т.ДокументРеализации = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	(ВЫБОР
	|		КОГДА ЕСТЬNULL(Возврат.ХозяйственнаяОперация, НЕОПРЕДЕЛЕНО)
	|		 = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА Т.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаПередачи.КлючАналитики КОНЕЦ) КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.НомерСтроки
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.КлючАналитики = Т.АналитикаУчетаНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПередачи
	|		ПО АналитикаПередачи.Номенклатура = Аналитика.Номенклатура
	|		И АналитикаПередачи.Характеристика = Аналитика.Характеристика
	|		И АналитикаПередачи.Назначение = Аналитика.Назначение
	|		И АналитикаПередачи.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		И АналитикаПередачи.Склад = &Организация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ВидыЗапасов.Ссылка = Т.ВидЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями КАК Возврат
	|		ПО Возврат.Ссылка = &Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов,
	|	Товары.НомерГТД,
	|	Товары.СкладОтгрузки,
	|	Товары.ДокументРеализации,
	|	СУММА(Товары.Количество) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ПереданныеТовары
	|ИЗ (
	|	ВЫБРАТЬ // ВидыЗапасов, переданные на комисию
	|		ВЫБОР КОГДА Товары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Товары.ДокументРеализации
	|		ИНАЧЕ
	|			Товары.Регистратор
	|		КОНЕЦ КАК ДокументРеализации,
	|		ЕСТЬNULL(АналитикаОтгрузки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладОтгрузки,
	|		Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Товары.ВидЗапасов КАК ВидЗапасов,
	|		Товары.НомерГТД КАК НомерГТД,
	|		ВЫБОР КОГДА Товары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-Товары.Количество
	|		ИНАЧЕ
	|			Товары.Количество
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЗапасов КАК ВидыЗапасов
	|			ПО Товары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|			И Товары.ВидЗапасов = ВидыЗапасов.ВидЗапасов
	|			И Товары.НомерГТД = ВидыЗапасов.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаОтгрузки
	|			ПО Товары.КорАналитикаУчетаНоменклатуры = АналитикаОтгрузки.КлючАналитики
	|	ГДЕ
	|		НЕ Товары.Регистратор = &Ссылка
	|		И (Товары.ДокументРеализации <> НЕОПРЕДЕЛЕНО ИЛИ Товары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|		И Товары.Период <= &Дата
	|		И Товары.Организация = &Организация
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ВЫБОР КОГДА Товары.Количество < 0 ТОГДА
	|			Товары.ДокументРеализации
	|		ИНАЧЕ
	|			Товары.Регистратор
	|		КОНЕЦ КАК ДокументРеализации,
	|		ЕСТЬNULL(АналитикаОтгрузки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК СкладОтгрузки,
	|		Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Товары.ВидЗапасов КАК ВидЗапасов,
	|		Товары.НомерГТД КАК НомерГТД,
	|		Товары.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЗапасов КАК ВидыЗапасов
	|			ПО Товары.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|			И Товары.ВидЗапасов = ВидыЗапасов.ВидЗапасов
	|			И Товары.НомерГТД = ВидыЗапасов.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаОтгрузки
	|			ПО Товары.КорАналитикаУчетаНоменклатуры = АналитикаОтгрузки.КлючАналитики
	|	ГДЕ
	|		НЕ Товары.Регистратор = &Ссылка
	|		И Товары.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Товары.Период <= &Дата
	|		И Товары.Организация = &Организация
	|		И Товары.Организация = Товары.ОрганизацияОтгрузки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		КПередаче.Регистратор КАК ДокументРеализации,
	|		ЕСТЬNULL(Передача.Склад, ПередачаВозвращено.Склад) КАК СкладОтгрузки,
	|		КПередаче.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КПередаче.ВидЗапасовПродавца КАК ВидЗапасов,
	|		КПередаче.НомерГТД КАК НомерГТД,
	|		КПередаче.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче КАК КПередаче
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЗапасов КАК ВидыЗапасов
	|			ПО КПередаче.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|			И КПередаче.ВидЗапасовПродавца = ВидыЗапасов.ВидЗапасов
	|			И КПередаче.НомерГТД = ВидыЗапасов.НомерГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК Передача
	|			ПО Передача.Ссылка = КПередаче.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаВозвращено
	|			ПО ПередачаВозвращено.Ссылка = КПередаче.ДокументРеализации
	|	ГДЕ
	|		НЕ КПередаче.Регистратор = &Ссылка
	|		И КПередаче.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И КПередаче.Период <= &Дата
	|
	|	) КАК Товары
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Товары.ДокументРеализации) = ТИП(Документ.ПередачаТоваровМеждуОрганизациями)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СкладОтгрузки,
	|	Товары.ДокументРеализации,
	|	Товары.АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов,
	|	Товары.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.СкладОтгрузки,
	|	Т.ДокументРеализации,
	|	Т.КоличествоОстаток
	|ИЗ
	|	ПереданныеТовары КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЗапасов КАК ВидыЗапасов
	|		ПО Т.АналитикаУчетаНоменклатуры = ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		И Т.ВидЗапасов = ВидыЗапасов.ВидЗапасов
	|		И Т.НомерГТД = ВидыЗапасов.НомерГТД
	|УПОРЯДОЧИТЬ ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.ДокументРеализации.МоментВремени УБЫВ,
	|	Т.СкладОтгрузки,
	|	ВидыЗапасов.НомерСтроки ВОЗР
	|ИТОГИ МАКСИМУМ(Т.КоличествоОстаток)
	|ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.ДокументРеализации,
	|	Т.СкладОтгрузки";
#КонецОбласти
	
	СписокПолей = "НомерСтроки, АналитикаУчетаНоменклатуры, ВидЗапасов, ВидЗапасовПолучателя, НомерГТД, ДокументРеализации";
	
	Запрос.УстановитьПараметр("ВидыЗапасов",	ВидыЗапасов.Выгрузить(, СписокПолей));
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Дата",			КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Ресурсы = Новый Массив;
	Ресурсы.Добавить("СуммаСНДС");
	Ресурсы.Добавить("СуммаНДС");
	
	СтрокКПроверке = ВидыЗапасов.Количество();
	
	Выборки = ИнициализироватьВыборки(Запрос, 5);
	ВыборкаБезНомеровСтрок = Неопределено;
	МассивСтрокКУдалению = Новый Массив;
	Пока СледующаяВыборка(Выборки, ВыборкаБезНомеровСтрок, 5) Цикл
		
		Остаток = ВыборкаБезНомеровСтрок.КоличествоОстаток;
		
		Выборка = ВыборкаБезНомеровСтрок.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗапасов = ВидыЗапасов[Выборка.НомерСтроки - 1];
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗапасов.Количество > 0 Тогда
				Количество = Мин(Остаток, СтрокаЗапасов.Количество);
			Иначе
				Количество = Макс(Остаток, СтрокаЗапасов.Количество);
			КонецЕсли;
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.ДокументРеализации = Выборка.ДокументРеализации;
			НоваяСтрока.СкладОтгрузки = Выборка.СкладОтгрузки;
			
			Если Количество <> СтрокаЗапасов.Количество Тогда			
				Для Каждого Ресурс из Ресурсы Цикл
					НоваяСтрока[Ресурс] = ?(СтрокаЗапасов[Ресурс] <> 0, СтрокаЗапасов[Ресурс] * Количество / Остаток, 0);
				КонецЦикла;
				НоваяСтрока.Количество = Количество;
			КонецЕсли;
			
			Для Каждого Ресурс из Ресурсы Цикл
				СтрокаЗапасов[Ресурс] = СтрокаЗапасов[Ресурс] - НоваяСтрока[Ресурс];
			КонецЦикла;
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			Остаток = Остаток - НоваяСтрока.Количество;
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаЗапасов);
			КонецЕсли;
			
			Если Остаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗапасов из МассивСтрокКУдалению Цикл
		ВидыЗапасов.Удалить(СтрокаЗапасов);
	КонецЦикла;
	
#Область Проверка
	ТаблицаОшибок = Новый ТаблицаЗначений;
	БезДокументаРеализации = СтрокКПроверке - МассивСтрокКУдалению.Количество();
	
	Если БезДокументаРеализации > 0 Тогда
		
		МассивСтрокСОшибками = Новый Массив;
		Для Индекс = 0 По БезДокументаРеализации - 1 Цикл
			// В этом диапазоне остались строки, к которым не удалось подобрать соответствующий документ передачи на комиссию
			МассивСтрокСОшибками.Добавить(ВидыЗапасов[Индекс]);
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Количество
		|ПОМЕСТИТЬ ВидыЗапасов
		|ИЗ
		|	&ВидыЗапасов КАК Т
		|ГДЕ
		|	Т.ДокументРеализации = НЕОПРЕДЕЛЕНО
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	А.Номенклатура,
		|	А.Характеристика,
		|	Н.ЕдиницаИзмерения,
		|	СУММА(Т.Количество) КАК Количество
		|ИЗ
		|	ВидыЗапасов КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК А
		|		ПО А.КлючАналитики = Т.АналитикаУчетаНоменклатуры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Н
		|		ПО Н.Ссылка = А.Номенклатура
		|СГРУППИРОВАТЬ ПО
		|	А.Номенклатура,
		|	А.Характеристика,
		|	Н.ЕдиницаИзмерения
		|");
		
		Запрос.УстановитьПараметр(
			"ВидыЗапасов",
			ВидыЗапасов.Выгрузить(МассивСтрокСОшибками, "АналитикаУчетаНоменклатуры, Количество, ДокументРеализации"));
		ТаблицаОшибок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	КонецЕсли;
#КонецОбласти

	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		//Отказ = Истина;
		//ЗапасыСервер.СообщитьОбОшибкахКонтроляТоваровОрганизаций(ЭтотОбъект, ТаблицаОшибок, ПараметрыЗаполненияВидовЗапасов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов =
	"Организация, ХозяйственнаяОперация, Склад, НалогообложениеНДС, ДокументПоступления,
	|ВидыЗапасовУказаныВручную, Партнер, ОрганизацияПолучатель, Контрагент";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПараметрыЗаполненияВидовЗапасов(ИмяПоляОрганизация)                        
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
	ПараметрыЗаполнения.ИмяПоляОрганизация           = ИмяПоляОрганизация;	
	Если ИмяПоляОрганизация = "Организация" Тогда
		
		ПараметрыЗаполнения.ОтборыВидовЗапасов.НалогообложениеНДС = НалогообложениеНДС;
		ПараметрыЗаполнения.КорВидыЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(ОрганизацияПолучатель, ХозяйственнаяОперация);
	
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями Тогда
			
			ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Ложь;
			ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар;
			ПараметрыЗаполнения.ОтборыВидовЗапасов.Организация = Организация;
			ПараметрыЗаполнения.ОтборыВидовЗапасов.ВладелецТовара = ОрганизацияПолучатель;
			
		Иначе
			
			УчетНДСУТ.ПараметрыЗаполненияВидовЗапасовПоНалогообложению(ПараметрыЗаполнения.ОтборыВидовЗапасов);
			
		КонецЕсли;
		
	Иначе
		ПараметрыЗаполнения.ПодбиратьВидыЗапасовПоИнтеркампани = Истина;
		ПараметрыЗаполнения.ПриПодбореПоИнтеркампаниИсключатьОрганизации = ОрганизацияПолучатель;
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

Функция ИнициализироватьВыборки(Запрос, КоличествоГруппировок)
	
	Выборки = Новый Массив(КоличествоГруппировок + 1); // Количество группировок +1 для детальных записей
	Выборки[0] = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат Выборки;
	
КонецФункции

Функция СледующаяВыборка(Выборки, Выборка, ТребуемыйУровень = Неопределено)
	
	Максимум = Выборки.Количество() - 1;
	
	// Приведем необходимый уровень выборки к индексу массива
	СтартовыйИндекс = Максимум - ?(ТребуемыйУровень = Неопределено, Максимум, ТребуемыйУровень - 1);
	
	// Перебираем массивы выборок начиная с самого детального уровня
	Для Индекс = СтартовыйИндекс По Максимум Цикл
		
		ТекИндекс = Максимум - Индекс;
		Если Выборки[ТекИндекс] = Неопределено Или Не Выборки[ТекИндекс].Следующий() Тогда
			Продолжить; // Не удолось выбрать следующую запись из выборки текущего уровня, спустимся ниже
		ИначеЕсли Индекс = СтартовыйИндекс Тогда
			Выборка = Выборки[ТекИндекс];
			Возврат Истина; // Выбрали следующую запись из выборки нужного уровня
		КонецЕсли;
		
		// Инициализируем новую выборку более детального уровня ...
		Выборки[ТекИндекс + 1] = Выборки[ТекИндекс].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// ... и обозначим переход на эту выборку, поднявшись выше
		Индекс = Индекс - 2;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
