#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.СкладПолучатель   КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Шапка.СкладОтправитель  КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказНаПеремещение.Товары КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(ЗНАЧ СписокРаспоряжений) Экспорт
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если МассивРаспоряжений = Неопределено ИЛИ ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ЗаказНаПеремещение КАК Заказ,
	|	ТоварыКПоступлению.Номенклатура       КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика     КАК Характеристика,
	|	ТоварыКПоступлению.Серия              КАК Серия,
	|	СУММА(ТоварыКПоступлению.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Обороты(&НачПериод, &КонПериод,, 
	|		ЗаказНаПеремещение В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.ЗаказНаПеремещение,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Серия";
		
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаПеремещение",
																"ЗаказНаПеремещение В (&МассивРаспоряжений)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Возвращает таблицу превышений оформления по заказу.
//
//	Параметры:
//		ЗаказСсылка - ДокументСсылка.ЗаказНаПеремещение - Заказ, для которого требуется определить превышения.
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* Количество           - Число
//
Функция ПревышенияОформленияПоЗаказу(ЗаказСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Номенклатура        КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика      КАК Характеристика,
	|	ТаблицаОстатки.Серия               КАК Серия,
	|	ТаблицаОстатки.КодСтроки           КАК КодСтроки,
	|	-ТаблицаОстатки.КОформлениюОстаток КАК Количество
	|ИЗ 
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение = &Заказ) КАК ТаблицаОстатки
	|ГДЕ
	|	ТаблицаОстатки.КОформлениюОстаток < 0");
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область РасчетСостояний

// Возвращает структуру параметров для расчета состояния выполнения заказа в списке заказов.
// 
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//    * МодульОстаткиЗаказов         - РегистрНакопленияМенеджер.ЗаказыНаПеремещение - 
//    * КонтролироватьЗакрытиеЗаказа - Булево - 
//    * СтатусВПроцессеПоступления   - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//    * СтатусВПроцессеОтгрузки      - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//    * СтатусГотовКОтгрузке         - ПеречислениеСсылка.СостоянияВнутреннихЗаказов - 
//
Функция ПараметрыДляРасчетаСостояний() Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("МодульОстаткиЗаказов", РегистрыНакопления.ЗаказыНаПеремещение);
	Структура.Вставить("КонтролироватьЗакрытиеЗаказа", ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки"));
	Структура.Вставить("СтатусВПроцессеПоступления", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеПоступления);
	Структура.Вставить("СтатусВПроцессеОтгрузки", Перечисления.СостоянияВнутреннихЗаказов.ВПроцессеОтгрузки);
	Структура.Вставить("СтатусГотовКОтгрузке", Перечисления.СостоянияВнутреннихЗаказов.ГотовКОтгрузке);
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру, содержащую тексты запросов временных таблиц для расчета состояния выполнения заказа в списке заказов.
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ВременныеТаблицыДокументаДляРасчетаСостояний() Экспорт
	
	ТекстЗапросаТовары =
		"ВЫБРАТЬ
		|	Таблица.Ссылка                  КАК Ссылка,
		|	Таблица.НачалоОтгрузки          КАК ДатаОтгрузки,
		|	Таблица.ВариантОбеспечения      КАК ВариантОбеспечения,
		|	Таблица.Ссылка.СкладОтправитель КАК Склад,
		|	Таблица.Номенклатура            КАК Номенклатура,
		|	Таблица.Характеристика          КАК Характеристика,
		|
		|	ВЫБОР КОГДА Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			ИЛИ (Заказ.ОбосабливатьПоНазначениюЗаказа
		|				И Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
		|		ТОГДА Заказ.Назначение
		|		ИНАЧЕ Таблица.Назначение
		|	КОНЕЦ                           КАК Назначение,
		|	
		|	ИСТИНА                          КАК ЭтоТовар,
		|	Таблица.Количество              КАК Количество
		|	
		|ПОМЕСТИТЬ ВтТоварыДокумента
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК Заказ
		|		ПО Таблица.Ссылка = Заказ.Ссылка
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И НЕ Таблица.Отменено";
	
	ТекстЗапросаРеквизиты =
		"ВЫБРАТЬ
		|	Таблица.Ссылка            КАК Ссылка,
		|	Таблица.Проведен          КАК Проведен,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению) ТОГДА
		|				ЛОЖЬ
		|			ИНАЧЕ
		|				ИСТИНА
		|		КОНЕЦ                 КАК СтатусКОтгрузке,
		|	
		|	ВЫБОР КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                 КАК СтатусЗакрыт
		|	
		|ПОМЕСТИТЬ ВтРеквизитыДокумента
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)";
	
	Результат = Новый Структура("ТоварыДокумента, РеквизитыДокумента", ТекстЗапросаТовары, ТекстЗапросаРеквизиты);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Заполняет массив реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - 
//  МассивВсехРеквизитов	 - Массив									 - Массив всех реквизитов, зависимых от хозяйственной операции
//  МассивРеквизитовОперации - Массив									 - Массив имен реквизитов, используемыз в выбранной хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ОрганизацияПолучатель");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ПОМЕСТИТЬ втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (&МассивДокументов)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ЗаказНаПеремещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ПОМЕСТИТЬ втОстаткиПоОтгрузке
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивДокументов)) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|ПОМЕСТИТЬ втОстаткиПоПоступлению
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления В (&МассивДокументов)) КАК ТоварыКПоступлениюОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		//  Если хотя бы один регистр имеет остатки, работа по документу не завершена
		|	ВЫБОР
		|			КОГДА втОстаткиПоЗаказам.ЗаказНаПеремещение ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоОтгрузке.ДокументОтгрузки ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ИЛИ ВЫБОР
		|			КОГДА втОстаткиПоПоступлению.ДокументПоступления ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоЗаказам КАК втОстаткиПоЗаказам
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказНаПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоОтгрузке КАК втОстаткиПоОтгрузке
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоОтгрузке.ДокументОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоПоступлению КАК втОстаткиПоПоступлению
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоПоступлению.ДокументПоступления
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Возврат Не Отказ;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполнен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "СкладОтправитель,СкладПолучатель,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// 
// Возвращаемое значение:
//  Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказНаПеремещение";
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	
	ПараметрыСерийСкладаОтправитель = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.СкладОтправитель, Ложь);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСкладаОтправитель.ИспользоватьСерииНоменклатуры; 
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСкладаОтправитель.УчитыватьСебестоимостьПоСериям;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
	
	ПараметрыУказанияСерий.ИмяПоляСклад = "СкладОтправитель";
	ПараметрыУказанияСерий.ИмяПоляСкладОтправитель = "СкладОтправитель";
	ПараметрыУказанияСерий.ИмяПоляСкладПолучатель  = "СкладПолучатель";
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийОтправитель
	|		ПО (ПолитикиУчетаСерийОтправитель.Склад = &СкладОтправитель)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерийОтправитель.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статусы.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет наличие права доступа "Добавление" к объекту метаданных для текущего пользователя
//
// Возвращаемое значение:
//	Булево - Истина - право доступа к объекту установлено; Ложь - в противном случае.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение);
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
// 
// Возвращаемое значение:
//  Структура - содержит следующие ключи:
//     * ВыводитьТаблицыОбеспечение      - Число - 
//     * ВыводитьТаблицыОтгрузка         - Число - 
//     * ВыводитьТаблицыПоступление      - Число - 
//     * ВыводитьТаблицыОтмененоОтгрузка - Число - 
//     * ЭтоЗаказ                        - Булево - 
//     * СкладВШапке                     - Булево - 
//     * ИмяПоляДатаОтгрузки             - Строка - 
//     * ИмяПоляСклад                    - Строка - 
//     * ИмяПоляСкладПолучатель          - Строка - 
//     * ТекстТоварУслугаОтгрузка        - Строка - 
//     * ТекстТоварУслугаПоступление     - Строка - 
//     * ИмяРегистраПоступлениеУслуг     - Строка - 
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 4);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("СкладВШапке", Истина);
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки",    "НачалоОтгрузки");
	СтруктураСостояние.Вставить("ИмяПоляСклад",           "СкладОтправитель");
	СтруктураСостояние.Вставить("ИмяПоляСкладПолучатель", "СкладПолучатель");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru = 'Товар'"));
	СтруктураСостояние.Вставить("ИмяРегистраПоступлениеУслуг", "ЗаказыНаПеремещение");
	
	СтруктураДопЗапросов = Новый Структура();
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыПоступление",
		ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения());
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ",
		ВременнаяТаблицаТоварыРаспоряженияПоступлениеДляОтчетаСостояниеВыполнения());
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru='Только назначения направления деятельности ""%1""'"));
	
	// Остатки товаров на складе-отправителе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Отправитель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("ВНаличии").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.СкладОтправитель";
	
	// Потребности в товарах на складе-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Товары.Назначение", "Получатель");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.СкладПолучатель";
	
	// Потребности в товарах на складе-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Товары.Назначение", "ВсеСклады");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Товары.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

// Используется для получения данных из заказов на перемещение, используемых в обработке "Состояние обеспечения заказов".
// Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
// Возвращаемое значение:
// 		Строка - Текст запроса - Текст запроса для выборки данных
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                  КАК Заказ,
	|	Т.КодСтроки               КАК КодСтроки,
	|	Т.НомерСтроки             КАК НомерСтроки,
	|	0                         КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО              КАК Продукция,
	|	НЕОПРЕДЕЛЕНО              КАК Этап,
	|	0                         КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура            КАК Номенклатура,
	|	Т.Характеристика          КАК Характеристика,
	|	ТаблицаДокумента.СкладОтправитель КАК Склад,
	|	
	|	ВЫБОР КОГДА Т.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			И НЕ (ОбосабливатьПоНазначениюЗаказа
	|				И Т.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|		ТОГДА Т.Назначение
	|		ИНАЧЕ ТаблицаДокумента.Назначение
	|	КОНЕЦ                     КАК Назначение,
	|	
	|	ТаблицаДокумента.Подразделение КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения      КАК ВариантОбеспечения,
	|	Т.НачалоОтгрузки          КАК ДатаОтгрузки,
	|	Т.Упаковка                КАК Упаковка,
	|	
	|	Т.Количество              КАК Количество,
	|	
	|	ВЫБОР КОГДА ТаблицаДокумента.ЖелаемаяДатаПоступления <=&НачалоТекущегоДня ТОГДА
	|			&НачалоТекущегоДня
	|		КОГДА ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ЖелаемаяДатаПоступления, ДЕНЬ, - ТаблицаДокумента.ДлительностьПеремещения) < &НачалоТекущегоДня ТОГДА
	|			&НачалоТекущегоДня
	|		ИНАЧЕ
	|			ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ЖелаемаяДатаПоступления, ДЕНЬ, - ТаблицаДокумента.ДлительностьПеремещения)
	|	КОНЕЦ                                       КАК ЖелаемаяДатаОтгрузки,
	|	
	|	ЛОЖЬ                                        КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата                       КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                КАК Партнер,
	|	ТаблицаДокумента.Статус                     КАК Статус,
	|	&ИспользоватьСтатусыЗаказовНаПеремещение    КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)
	|
	|{ГДЕ
	|	Т.Ссылка.* КАК Заказ,
	|	ТаблицаДокумента.СкладОтправитель.* КАК Склад,
	|	ТаблицаДокумента.Ответственный.* КАК Менеджер}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");

	ЖелаемаяДата = Объект.ЖелаемаяДатаПоступления - Объект.ДлительностьПеремещения * 86400; // 86400 - длительность суток.
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), ЖелаемаяДата);

	ДлительностьПеремещенияСекунды = Объект.ДлительностьПеремещения * 86400;
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Ложь;
	ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = ЖелаемаяДата;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.Товары.Вставить(Объект.Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		СтарыеЗначения.ДатаОтгрузки = ТекСтрокаТовары.НачалоОтгрузки;
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения");
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;

		Если СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.НачалоОтгрузки = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			ТекСтрокаТовары.ОкончаниеПоступления = ТекСтрокаТовары.НачалоОтгрузки + Объект.ДлительностьПеремещения * 86400; //86400 - длительность суток
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		НовыеЗначения.ДатаОтгрузки = ТекСтрокаТовары.НачалоОтгрузки;
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПеремещение));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Ложь;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	Параметры = Новый Структура("ПутиКДанным, ИмяТабличнойЧасти, СтатусКВыполнению, ИмяМенеджераРегистра");
	Параметры.ИмяТабличнойЧасти    = "Товары";
	Параметры.СтатусКВыполнению    = Истина;
	Параметры.ИмяМенеджераРегистра = "ЗаказыНаПеремещение";
	
	Параметры.ПутиКДанным = Новый Соответствие();
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоОтгрузки");
	Параметры.ПутиКДанным.Вставить("Склад",        "СкладОтправитель");
	
	Возврат Параметры;
	
КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказНаПеремещение - документ, по которому создаются временные таблицы
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.ЗаказНаПеремещение.СкладОтправитель КАК Склад,
	|	Заказы.ЗаказНаПеремещение.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИЛИ (Заказы.ЗаказНаПеремещение.ОбосабливатьПоНазначениюЗаказа
	|				И Товары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|		ТОГДА Заказы.ЗаказНаПеремещение.Назначение
	|		ИНАЧЕ Товары.Назначение
	|	КОНЕЦ КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение = &Заказ) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК Товары
	|		ПО Заказы.ЗаказНаПеремещение = Товары.Ссылка
	|			И Заказы.КодСтроки = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.ЗаказНаПеремещение.СкладОтправитель,
	|	Заказы.ЗаказНаПеремещение.Подразделение,
	|	ВЫБОР КОГДА Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИЛИ (Заказы.ЗаказНаПеремещение.ОбосабливатьПоНазначениюЗаказа
	|				И Товары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|		ТОГДА Заказы.ЗаказНаПеремещение.Назначение
	|		ИНАЧЕ Товары.Назначение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Ссылка.СкладОтправитель КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.СкладОтправитель,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Упаковка,
	|	Товары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ЕстьНазначениеВТЧ = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область Назначения

// Возврашает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаПеремещение, ДанныеФормыСтруктура - заказ на перемещение, по которому необходимо получить шаблон назначения
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияТоваровВПеремещении.Получить();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияТоваровВПеремещении.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);

	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.СкладОтправитель        КАК СкладОтправитель,
	|	ДанныеШапки.СкладПолучатель         КАК СкладПолучатель,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеШапки.СкладОтправитель)    КАК СкладОтправительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеШапки.СкладПолучатель)     КАК СкладПолучательПредставление,
	|	ДанныеШапки.Назначение              КАК Назначение,
	|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам,Ложь) КАК ДвиженияПоСкладскимРегистрам,
	|	ДанныеШапки.Статус                  КАК Статус,
	|	ДанныеШапки.Организация             КАК Организация,
	|	ДанныеШапки.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Подразделение           КАК Подразделение,
	|	ДанныеШапки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеШапки.Номер                   КАК Номер,
	|	ДанныеШапки.Ответственный           КАК Ответственный,
	|	ДанныеШапки.Комментарий             КАК Комментарий,
	|	ДанныеШапки.Проведен                КАК Проведен,
	|	ДанныеШапки.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеШапки.ОбосабливатьПоНазначениюЗаказа КАК ОбосабливатьПоНазначениюЗаказа,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА ДанныеШапки.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеШапки.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И ДанныеШапки.Дата >= ДанныеШапки.СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                               КАК ОрдернаяСхемаПриОтгрузке,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ДанныеШапки.Дата >= ДанныеШапки.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                               КАК ОрдернаяСхемаПриПоступлении,
	|	ДанныеШапки.ВариантПриемкиТоваров   КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	Запрос.УстановитьПараметр("НомерНаПечать",                  ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	
	ИнформацияПоСкладуОтправителю = "";
	Если ЗначениеЗаполнено(Реквизиты.СкладОтправитель) Тогда
		ШаблонСтроки = НСтр("ru='Перемещение с ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоСкладуОтправителю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.СкладОтправительПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоСкладуОтправителю", ИнформацияПоСкладуОтправителю);
	ИнформацияПоСкладуПолучателю = "";
	Если ЗначениеЗаполнено(Реквизиты.СкладПолучатель) Тогда
		ШаблонСтроки = НСтр("ru='Перемещение на ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоСкладуПолучателю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.СкладПолучательПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоСкладуПолучателю", ИнформацияПоСкладуПолучателю);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыНаПеремещение";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|	НачалоПериода(&Период, День) 			КАК Период,
	|	ТаблицаТовары.Ссылка         			КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.Номенклатура   			КАК Номенклатура,
	|	ТаблицаТовары.Характеристика 			КАК Характеристика,
	|	ТаблицаТовары.Серия          			КАК Серия,
	|	ТаблицаТовары.КодСтроки      			КАК КодСтроки,
	|	0                            			КАК КОформлению,
	|	ТаблицаТовары.Количество     			КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 	КАК ВидДвижения,
	|	ТаблицаТовары.НачалоОтгрузки 			КАК Период,
	|	ТаблицаТовары.Ссылка        			КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.Номенклатура   			КАК Номенклатура,
	|	ТаблицаТовары.Характеристика 			КАК Характеристика,
	|	ТаблицаТовары.Серия          			КАК Серия,
	|	ТаблицаТовары.КодСтроки      			КАК КодСтроки,
	|	ТаблицаТовары.Количество     			КАК КОформлению,
	|	0                            			КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка                   КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	0                                      КАК КОформлению,
	|	-ТаблицаТовары.Количество              КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаТовары.ОкончаниеПоступления   КАК Период,
	|	ТаблицаТовары.Ссылка                 КАК Распоряжение,
	|	&СкладПолучатель                     КАК Склад,
	|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
	|	ТаблицаТовары.Характеристика         КАК Характеристика,
	|	ТаблицаТовары.Назначение             КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                            КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                            КАК ПланируемоеПоступлениеПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                            КАК ПланируемоеПоступлениеСНеподтвержденными,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                            КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НачалоОтгрузки           КАК Период,
	|	ТаблицаТовары.НачалоОтгрузки           КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&СкладОтправитель                      КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|
	|			ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ИЛИ (&ОбосабливатьПоНазначениюЗаказа
	|					И ТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)) ТОГДА
	|					&Назначение
	|				ИНАЧЕ
	|					ТаблицаТовары.Назначение
	|			КОНЕЦ
	|
	|		КОНЕЦ                                            КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|				ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                                            КАК КоличествоНеобеспечено
	|
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резервирование товаров
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ,
	|	0                                      КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И(ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка товаров
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Поступление на "Склад-получатель"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладПолучатель                       КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И НЕ ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности на "Складе-отправителе"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ИЛИ (&ОбосабливатьПоНазначениюЗаказа
	|					И ТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)) ТОГДА
	|				&Назначение
	|			ИНАЧЕ
	|				ТаблицаТовары.Назначение
	|		КОНЕЦ                              КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности на "Складе-отправителе"
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&СкладОтправитель                      КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				ИЛИ (&ОбосабливатьПоНазначениюЗаказа
	|					И ТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное)) ТОГДА
	|				&Назначение
	|			ИНАЧЕ
	|				ТаблицаТовары.Назначение
	|		КОНЕЦ                              КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.НачалоОтгрузки КАК Период,
	|	&СкладОтправитель КАК Склад,
	|	&СкладПолучатель КАК Получатель,
	|	&Ссылка КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество КАК ВРезерве,
	|	0 КАК КОтгрузке,
	|	0 КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаТовары.НачалоОтгрузки,
	|	&СкладОтправитель,
	|	&СкладПолучатель,
	|	&Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|				И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ (&ОбосабливатьПоНазначениюЗаказа
	|					И ТаблицаТовары.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|						ТОГДА ТаблицаТовары.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|				И &ДвиженияПоСкладскимРегистрам
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.Серия,
	|	0,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
	|										ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ОкончаниеПоступления     КАК Период,
	|	ТаблицаТовары.Ссылка.СкладПолучатель   КАК Склад,
	|	ТаблицаТовары.Ссылка.СкладОтправитель  КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ТаблицаТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	ВЫБОР
	|		КОГДА (&ОрдернаяСхемаПриПоступлении
	|				И НЕ &НакладнаяЯвляетсяРаспоряжением)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлениюОрдеров,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И ТаблицаТовары.Ссылка.Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЗаказНаПеремещение";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",                 """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоСкладуПолучателю",  """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоСкладуОтправителю", """""");
	ПереопределениеРасчетаПараметров.Вставить("ОрдернаяСхемаПриПоступлении",
		"ВЫБОР
		|	КОГДА ТаблицаТовары.Ссылка.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|			И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаПеремещение" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПеремещение(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Неопределено);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ТипСсылки                КАК ТипСсылки,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Партнер                  КАК Партнер,
	|	ДанныеДокумента.Контрагент               КАК Контрагент,
	|	ДанныеДокумента.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ДополнительнаяЗапись     КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Подразделение            КАК Подразделение,
	|	ДанныеДокумента.МестоХранения            КАК МестоХранения,
	|	ДанныеДокумента.ДатаДокументаИБ          КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Ссылка                   КАК Ссылка,
	|	ДанныеДокумента.НомерДокументаИБ         КАК НомерДокументаИБ,
	|	ДанныеДокумента.Ответственный            КАК Ответственный,
	|	ДанныеДокумента.Комментарий              КАК Комментарий,
	|	ДанныеДокумента.Валюта                   КАК Валюта,
	|	ДанныеДокумента.Сумма                    КАК Сумма,
	|	ДанныеДокумента.Статус                   КАК Статус,
	|	ДанныеДокумента.Проведен                 КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления          КАК ПометкаУдаления,
	|	ДанныеДокумента.Дополнительно            КАК Дополнительно,
	|	ДанныеДокумента.ДатаПервичногоДокумента  КАК ДатаПервичногоДокумента,
	|	ДанныеДокумента.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРеестрДокументов.ТипСсылки                          КАК ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация                        КАК Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер                            КАК Партнер,
	|	ТаблицаРеестрДокументов.Контрагент                         КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРеестрДокументов.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ТаблицаРеестрДокументов.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                      КАК НаправлениеДеятельности,
	|	МИНИМУМ(ТаблицаРеестрДокументов.ДополнительнаяЗапись)      КАК ДополнительнаяЗапись,
	|	ТаблицаРеестрДокументов.Подразделение                      КАК Подразделение,
	|	ТаблицаРеестрДокументов.МестоХранения                      КАК МестоХранения,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ                    КАК ДатаДокументаИБ,
	|	ТаблицаРеестрДокументов.Ссылка                             КАК Ссылка,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерДокументаИБ)         КАК НомерДокументаИБ,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Ответственный)            КАК Ответственный,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Комментарий)              КАК Комментарий,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Валюта)                   КАК Валюта,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Сумма)                    КАК Сумма,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Статус)                   КАК Статус,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Проведен)                 КАК Проведен,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ПометкаУдаления)          КАК ПометкаУдаления,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.Дополнительно)            КАК Дополнительно,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.ДатаПервичногоДокумента)  КАК ДатаПервичногоДокумента,
	|	МАКСИМУМ(ТаблицаРеестрДокументов.НомерПервичногоДокумента) КАК НомерПервичногоДокумента
	|ПОМЕСТИТЬ ВтОснований
	|	ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		&Период                                       КАК ДатаДокументаИБ,
	|		&Номер                                        КАК НомерДокументаИБ,
	|		&ИдентификаторМетаданных                      КАК ТипСсылки,
	|		&Организация                                  КАК Организация,
	|		&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)    КАК Партнер,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|		&СкладОтправитель                             КАК МестоХранения,
	|		&Подразделение                                КАК Подразделение,
	|		&Ответственный                                КАК Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА (100))       КАК Комментарий,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)      КАК Валюта,
	|		0                                             КАК Сумма,
	|		&Статус                                       КАК Статус,
	|		&Проведен                                     КАК Проведен,
	|		&ПометкаУдаления                              КАК ПометкаУдаления,
	|		ЛОЖЬ                                          КАК ДополнительнаяЗапись,
	|		ВЫРАЗИТЬ(&ИнформацияПоСкладуПолучателю КАК СТРОКА (100)) КАК Дополнительно,
	|		&Период                                       КАК ДатаПервичногоДокумента,
	|		&НомерНаПечать                                КАК НомерПервичногоДокумента,
	|		МАКСИМУМ(
	|			ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|		КОЛИЧЕСТВО(
	|			РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности
	|	ИЗ
	|		Документ.ЗаказНаПеремещение КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|			ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка
	|
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка                        КАК Ссылка,
	|		&Период                                       КАК ДатаДокументаИБ,
	|		&Номер                                        КАК НомерДокументаИБ,
	|		&ИдентификаторМетаданных                      КАК ТипСсылки,
	|		&ОрганизацияПолучатель                        КАК Организация,
	|		&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)    КАК Партнер,
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|		&СкладПолучатель                              КАК МестоХранения,
	|		&Подразделение                                КАК Подразделение,
	|		&Ответственный                                КАК Ответственный,
	|		ВЫРАЗИТЬ(&Комментарий КАК СТРОКА (100))       КАК Комментарий,
	|		ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)      КАК Валюта,
	|		0                                             КАК Сумма,
	|		&Статус                                       КАК Статус,
	|		&Проведен                                     КАК Проведен,
	|		&ПометкаУдаления                              КАК ПометкаУдаления,
	|		ИСТИНА                                        КАК ДополнительнаяЗапись,
	|		ВЫРАЗИТЬ(&ИнформацияПоСкладуОтправителю КАК СТРОКА (100)) КАК Дополнительно,
	|		&Период                                       КАК ДатаПервичногоДокумента,
	|		&НомерНаПечать                                КАК НомерПервичногоДокумента,
	|		МАКСИМУМ(
	|			ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|		КОЛИЧЕСТВО(
	|			РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности
	|	ИЗ
	|		Документ.ЗаказНаПеремещение КАК ДанныеДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|			ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|	ГДЕ
	|		ДанныеДокумента.Ссылка = &Ссылка
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеДокумента.Ссылка) КАК ТаблицаРеестрДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРеестрДокументов.ТипСсылки,
	|	ТаблицаРеестрДокументов.Организация,
	|	ТаблицаРеестрДокументов.ХозяйственнаяОперация,
	|	ТаблицаРеестрДокументов.Партнер,
	|	ТаблицаРеестрДокументов.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаРеестрДокументов.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ТаблицаРеестрДокументов.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаРеестрДокументов.Подразделение,
	|	ТаблицаРеестрДокументов.МестоХранения,
	|	ТаблицаРеестрДокументов.ДатаДокументаИБ,
	|	ТаблицаРеестрДокументов.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

// Добавляет команду создания документа "Заказ на перемещение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаПеремещение);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаПеремещение";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПеремещениеТоваров.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.УпаковочныйЛист.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на перемещение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииЗаказаКлиентаПоГруппеСкладов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПеремещениеНаОснованииЗаказаКлиентаПоГруппеСкладов";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаПеремещение);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаПеремещение";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Заказ на перемещение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииПриобретенияТоваровУслугПоГруппеСкладов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладов";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаПеремещение);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаПеремещение";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Заказ на перемещение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладов(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладов";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаПеремещение);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаказыНаПеремещение";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПараметрыСозданияПоГруппеСкладовПоЗаказуКлиента(ПараметрКоманды) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад КАК Склад,
	|	Товары.Склад.Наименование КАК Наименование
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|	И (Товары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|	ИЛИ НЕ &ИспользоватьРасширенныеВозможностиЗаказовКлиента)
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Заказ", ПараметрКоманды);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказовКлиента",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
	НесколькоСкладов = Ложь;
	Если Склады.Количество() > 1 Тогда
		НесколькоСкладов = Истина;
	ИначеЕсли Склады.Количество() = 0 Тогда
		Склады.Добавить(Справочники.Склады.ПустаяСсылка());
	КонецЕсли;
	
	ПараметрыСозданияПоГруппеСкладов = Новый Структура();
	ПараметрыСозданияПоГруппеСкладов.Вставить("СписокСкладов",    Склады);
	ПараметрыСозданияПоГруппеСкладов.Вставить("НесколькоСкладов", НесколькоСкладов);
	
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

Функция ПараметрыСозданияПоГруппеСкладовПоПоступлениюТоваровУслуг(ПараметрКоманды) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Склад КАК Склад,
	|	Товары.Склад.Наименование КАК Наименование
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Заказ
	|	И Товары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Заказ", ПараметрКоманды);
	Склады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
	НесколькоСкладов = Ложь;
	Если Склады.Количество() > 1 Тогда
		НесколькоСкладов = Истина;
	ИначеЕсли Склады.Количество() = 0 Тогда
		Склады.Добавить(Неопределено);
	КонецЕсли;
	
	ПараметрыСозданияПоГруппеСкладов = Новый Структура();
	ПараметрыСозданияПоГруппеСкладов.Вставить("СписокСкладов",    Склады);
	ПараметрыСозданияПоГруппеСкладов.Вставить("НесколькоСкладов", НесколькоСкладов);
	
	Возврат ПараметрыСозданияПоГруппеСкладов;
	
КонецФункции

#КонецОбласти

#Область Печать

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаПеремещение") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаказНаПеремещение",
			НСтр("ru = 'Заказ на перемещение'"),
			СформироватьПечатнуюФормуЗаказНаПеремещение(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой заказа,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция СформироватьПечатнуюФормуЗаказНаПеремещение(МассивОбъектов, ОбъектыПечати)
	
	Колонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(Колонка);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПеремещение";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПеремещение.ПФ_MXL_ЗаказНаПеремещение");
	
	ОбластьЗаголовкаПеремещение         = Макет.ПолучитьОбласть("ЗаголовокПеремещение");
	ОбластьЗаголовкаВнутренняяПередача  = Макет.ПолучитьОбласть("ЗаголовокВнутренняяПередача");
	
	Если ВыводитьКоды Тогда
		
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		
	Иначе
		
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
		
	Иначе
		
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
									  + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
									  + Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
									  
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
		"ВЫБРАТЬ
		|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
		|	ЗаказНаПеремещение.Номер КАК Номер,
		|	ЗаказНаПеремещение.Дата КАК Дата,
		|	ЗаказНаПеремещение.Организация.Префикс КАК Префикс,
		|	ЗаказНаПеремещение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНаПеремещение.СкладОтправитель) КАК ОтправительПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказНаПеремещение.СкладПолучатель) КАК ПолучательПредставление,
		|	ВЫБОР КОГДА ЗаказНаПеремещение.Организация.НаименованиеСокращенное = """" ТОГДА
		|		ЗаказНаПеремещение.Организация.Наименование
		|	ИНАЧЕ
		|		ЗаказНаПеремещение.Организация.НаименованиеСокращенное
		|	КОНЕЦ КАК ОрганизацияПредставление,
		|	ВЫБОР КОГДА ЗаказНаПеремещение.ОрганизацияПолучатель.НаименованиеСокращенное = """" ТОГДА
		|		ЗаказНаПеремещение.ОрганизацияПолучатель.Наименование
		|	ИНАЧЕ
		|		ЗаказНаПеремещение.ОрганизацияПолучатель.НаименованиеСокращенное
		|	КОНЕЦ КАК ОрганизацияПолучательПредставление,
		|	ЗаказНаПеремещение.Ответственный.ФизическоеЛицо КАК Менеджер
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ГДЕ
		|	ЗаказНаПеремещение.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	ЗапросПоШапке.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстЗапросаПоТоварам =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка КАК Ссылка,
		|
		|	СпрНоменклатура.Ссылка                                КАК Товар,
		|	СпрНоменклатура.НаименованиеПолное                    КАК ТоварНаименование,
		|	СпрНоменклатура.Код                                   КАК Код,
		|	СпрНоменклатура.Артикул                               КАК Артикул,
		|	ТаблицаТовары.Характеристика.НаименованиеПолное       КАК Характеристика,
		|	ТаблицаТовары.Серия                                   КАК Серия,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
		|				ПРЕДСТАВЛЕНИЕССЫЛКИ(СпрНоменклатура.ЕдиницаИзмерения)
		|			ИНАЧЕ
		|				ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаТовары.Упаковка)
		|		КОНЕЦ                                             КАК ПредставлениеЕдининицыИзмеренияУпаковки,
		|
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СпрНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
		|
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Количество         КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО СпрНоменклатура.Ссылка = ТаблицаТовары.Номенклатура
		|ГДЕ
		|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
		|	И Не ТаблицаТовары.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|
		|ИТОГИ ПО
		|	Ссылка";
	
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПоТабличнымЧастям = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоШапке.Следующий() Цикл
		
		Шапка = ВыборкаПоШапке;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Вывод шапки заказа
		Если Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров Тогда
		
			ОбластьЗаголовка = ОбластьЗаголовкаПеремещение;
		
		Иначе // Хозяйственная операция - Внутренняя передача товаров
		
			ОбластьЗаголовка = ОбластьЗаголовкаВнутренняяПередача;
		
		КонецЕсли;
			
		НазваниеДокумента = НСтр("ru = 'Заказ на перемещение'");
		ОбластьЗаголовка.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(Шапка,
			НазваниеДокумента);
		ОбластьЗаголовка.Параметры.Заполнить(Шапка);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовка, Шапка.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовка);
		
		ТабДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьКоды Тогда
			
			ТабДокумент.Присоединить(ОбластьКодовШапка);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанныхШапка);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТабДокумент.Присоединить(ОбластьУпаковокШапка);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьКонецСтрокиШапка);
		
		// Выборка товаров
		Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка", Шапка.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаСтрокТовары = ВыборкаПоТабличнымЧастям.Выбрать();
		
		НомерСтроки = 1;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
		
			ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаСтрокТовары[Колонка];
				ТабДокумент.Присоединить(ОбластьКодовСтрока);
				
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаСтрокТовары.ТоварНаименование),
				СокрЛП(ВыборкаСтрокТовары.Характеристика),
				, // Упаковка
				СокрЛП(ВыборкаСтрокТовары.Серия));
			
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабДокумент.Присоединить(ОбластьУпаковокСтрока);
				
			КонецЕсли;
			
			ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьНомераПодвал);
		
		Если ВыводитьКоды Тогда
			
			ТабДокумент.Присоединить(ОбластьКодовПодвал);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанныхПодвал);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТабДокумент.Присоединить(ОбластьУпаковокПодвал);
			
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
		
		// Вывод подписи.
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.ФИОМенеджер = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Менеджер, Шапка.Дата);
		ТабДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПеремещение) Тогда
		// Заказ на перемещение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаказНаПеремещение";
		КомандаПечати.Представление = НСтр("ru = 'Заказ на перемещение'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтчетСостояниеВыполненияДокумента

Функция ВременнаяТаблицаТоварыПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Набор.ДокументПоступления КАК ДокументПоступления,
		|	Набор.Номенклатура        КАК Номенклатура,
		|	Набор.Характеристика      КАК Характеристика,
		|	Набор.Склад               КАК Склад,
		|
		|	СУММА(Набор.Принимается)  КАК Принимается,
		|	СУММА(Набор.Принято)      КАК Принято,
		|	СУММА(Набор.Принять)      КАК Принять,
		|	СУММА(Набор.Поступило)    КАК Поступило,
		|
		|	СУММА(Набор.КПоступлению) КАК КПоступлению,
		|	СУММА(Набор.Оформить)     КАК Оформить,
		|	СУММА(Набор.Оформлено)    КАК Оформлено,
		|
		|	МАКСИМУМ(Набор.ОрдернаяСхемаПриПоступлении) КАК ОрдернаяСхемаПриПоступлении
		|
		|ПОМЕСТИТЬ ВТТоварыПоступление
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|		ТоварыКПоступлению.Номенклатура        КАК Номенклатура,
		|		ТоварыКПоступлению.Характеристика      КАК Характеристика,
		|		ТоварыКПоступлению.Склад               КАК Склад,
		|
		|		ТоварыКПоступлению.ПринимаетсяКонечныйОстаток  КАК Принимается,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Принято,
		|		ТоварыКПоступлению.КОформлениюОрдеровКонечныйОстаток КАК Принять,
		|		ТоварыКПоступлению.КОформлениюОрдеровРасход          КАК Поступило,
		|
		|		0                                              КАК КПоступлению,
		|		0                                              КАК Оформить,
		|		0                                              КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКПоступлению.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКПоступлению.Склад.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|	ИЗ
		|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты( , , , ,
		|				ДокументПоступления В(
		|					ВЫБРАТЬ
		|						ВтДокументы.ДокументСсылка
		|					ИЗ
		|						ВтДокументы КАК ВтДокументы)) КАК ТоварыКПоступлению
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ТоварыКОформлению.ЗаказНаПеремещение КАК ДокументПоступления,
		|		ТоварыКОформлению.Номенклатура       КАК Номенклатура,
		|		ТоварыКОформлению.Характеристика     КАК Характеристика,
		|		ТоварыКОформлению.ЗаказНаПеремещение.СкладПолучатель КАК Склад,
		|
		|		0                                    КАК Принимается,
		|		0                                    КАК Принято,
		|		0                                    КАК Принять,
		|		0                                    КАК Поступило,
		|
		|		ТоварыКОформлению.КОформлениюПриход          КАК КПоступлению,
		|		ТоварыКОформлению.КОформлениюКонечныйОстаток КАК Оформить,
		|		ТоварыКОформлению.КОформлениюРасход          КАК Оформлено,
		|
		|		ВЫБОР КОГДА ТоварыКОформлению.ЗаказНаПеремещение.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении
		|						И &ТекущаяДата >= ТоварыКОформлению.ЗаказНаПеремещение.СкладПолучатель.ДатаНачалаОрдернойСхемыПриПоступлении ТОГДА
		|					ИСТИНА
		|				ИНАЧЕ
		|					ЛОЖЬ
		|			КОНЕЦ                                      КАК ОрдернаяСхемаПриПоступлении
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.ОстаткиИОбороты(, , , ,
		|			ЗаказНаПеремещение В(
		|				ВЫБРАТЬ
		|					ВтДокументы.ДокументСсылка
		|				ИЗ
		|					ВтДокументы КАК ВтДокументы)) КАК ТоварыКОформлению) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.ДокументПоступления,
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВременнаяТаблицаТоварыРаспоряженияПоступлениеДляОтчетаСостояниеВыполнения()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументТовары.Номенклатура           КАК Номенклатура,
		|	ДокументТовары.Характеристика         КАК Характеристика,
		|	СУММА(ДокументТовары.Количество)      КАК Количество,
		|	СУММА(0)                              КАК СуммаСНДС,
		|	ДокументТовары.Ссылка.СкладПолучатель КАК Склад,
		|	ВтДокументы.ДокументСсылка            КАК Ссылка
		|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
		|ИЗ
		|	Документ.ЗаказНаПеремещение.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
		|ГДЕ
		|	НЕ ДокументТовары.Отменено
		|	И ВтДокументы.Проведен
		|	И ДокументТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И ДокументТовары.Ссылка.Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Ссылка.СкладПолучатель,
		|	ВтДокументы.ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	СУММА(ДокументТовары.Количество),
		|	СУММА(0),
		|	ДокументТовары.Ссылка.СкладПолучатель,
		|	ВтДокументы.ДокументСсылка
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ДокументТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
		|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.ЗаказНаПеремещение)
		|ГДЕ
		|	ДокументТовары.Ссылка.Проведен
		|	И ДокументТовары.КодСтроки = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.Ссылка.СкладПолучатель,
		|	ВтДокументы.ДокументСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка                       КАК ЗаказНаПеремещение,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	Таблица.Назначение,
	|	ВЫБОР
	|		КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|				И Таблица.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И НЕ (Таблица.Ссылка.ОбосабливатьПоНазначениюЗаказа
	|					И Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|			ТОГДА Таблица.Назначение
	|		КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|				И (Таблица.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|					ИЛИ (Таблица.Ссылка.ОбосабливатьПоНазначениюЗаказа)
	|						И Таблица.Назначение.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))
	|			ТОГДА Таблица.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК НазначениеОтправителя,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	Таблица.НачалоОтгрузки               КАК ДатаОтгрузки,
	|	Таблица.Ссылка.СкладОтправитель      КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|	ПО Таблица.Ссылка = ДанныеУчета.ЗаказНаПеремещение
	|	И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|ГДЕ
	|	НЕ ДанныеУчета.ЗаказНаПеремещение ЕСТЬ NULL
	|//&Отбор";
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Если КлючЗначение.Ключ = "Склад" Тогда
				КлючЗначение.Ключ = "Таблица.Ссылка.СкладОтправитель";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ КлючЗначение.Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ОтменаНеотработанныхСтрок

Функция ОтменитьНеотработанныеСтроки(ДокументОбъект, ОтменятьТолькоМТВПределахДопустимыхОтклонений = Ложь, 
										СкорректироватьМерныеТовары = Ложь, Модифицированность = Ложь) Экспорт
	
	ПереченьВариантов = Новый Массив();
	ПереченьВариантов.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "НачалоОтгрузки");
	ПутиКДанным.Вставить("Склад", "СкладОтправитель");

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("МенеджерРегистра",  РегистрыНакопления.ЗаказыНаПеремещение);
	ПараметрыЗаполнения.Вставить("ПутиКДанным",       ПутиКДанным);
	ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти", "Товары");

	ВыделенныеСтроки = Новый Массив();
	Для Каждого Строка Из ДокументОбъект.Товары Цикл
		Если Не Строка.Отменено Тогда
			ВыделенныеСтроки.Добавить(Строка.НомерСтроки - 1);
		КонецЕсли;
	КонецЦикла;
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспеченияДокумента(ДокументОбъект, ПереченьВариантов,
																		ПараметрыЗаполнения, ВыделенныеСтроки);
	
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		
		ЕстьПревышениеОбособленнойПотребности = Неопределено <> Таблица.Найти(
			Перечисления.ВариантыОбеспечения.Обособленно,
			"ВариантОбеспечения");
		
		ЗаказыСервер.СократитьТаблицуДоНеОбеспеченныхСтрок(Таблица);
		
		КоличествоСтрокКОтмене = Таблица.Количество();
		
		Если ОтменятьТолькоМТВПределахДопустимыхОтклонений Тогда
			ДопустимыеОтклонения = Документы.ЗаказНаПеремещение.ДопустимыеОтклоненияМерныхТоваров(ДокументОбъект.Ссылка);
			ЗаказыСервер.ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект.Товары, Таблица, ДопустимыеОтклонения);
		Иначе
			ЗаказыСервер.ПеренестиВТаблицуДокументаОтмененныеСтроки(ДокументОбъект.Товары, Таблица);
		КонецЕсли;
		
		Если СкорректироватьМерныеТовары Тогда
			ЗаказыСервер.УвеличитьСтрокиЗаказаНаРазмерПревышенияОтгрузкиМерныхТоваров(ДокументОбъект,
			                                                                            ДокументОбъект.Товары,
			                                                                            КоличествоСтрокКОтмене);
		КонецЕсли;
		
		РезультатОтмены = ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСтрокКОтмене, Модифицированность);
		Если КоличествоСтрокКОтмене = 0 И ЕстьПревышениеОбособленнойПотребности Тогда
			ТекстОповещения = НСтр("ru = 'Строки не отменены, так как все обособленные товары (работы) уже заказаны либо поступили'");
			РезультатОтмены.Вставить("Оповещение", ТекстОповещения);
		КонецЕсли;
		
	Иначе
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(Таблица, "Товары", НСтр("ru = 'Товары'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
		РезультатОтмены = Новый Структура("Оповещение", НСтр("ru = 'Отмена неотработанных строк не выполнена'"));
	КонецЕсли;
	
	Возврат РезультатОтмены;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииНазначений(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ЗаказНаПеремещение.Ссылка = Назначения.Заказ
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(ЗаказНаПеремещение.НаправлениеДеятельности.УчетЗатрат, ИСТИНА)
	|					ТОГДА ЗаказНаПеремещение.НаправлениеДеятельности
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			КОНЕЦ = Назначения.НаправлениеДеятельности)
	|ГДЕ
	|	ЗаказНаПеремещение.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И Назначения.Ссылка ЕСТЬ NULL";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляГенерацииНазначений(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказНаПеремещение";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "Справочник.Назначения") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Назначения");
			ЭлементБлокировки.УстановитьЗначение("НаправлениеДеятельности", Выборка.НаправлениеДеятельности);
			ЭлементБлокировки.УстановитьЗначение("Заказ",                   Выборка.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("Партнер",                 Справочники.Партнеры.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("Договор",                 Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ЭлементБлокировки.УстановитьЗначение("ТипНазначения",           Перечисления.ТипыНазначений.Собственное);
			
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Объект <> Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Назначение) Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Заказ                   = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если Не ЗначениеЗаполнено(Назначение) Тогда
						
						НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(НазначениеОбъект, ШаблонНазначения);
						
						РеквизитыДокумента = Новый Структура("Номер, Дата, Получатель", Объект.Номер, Объект.Дата, Объект.СкладПолучатель);
						НазначениеОбъект.Наименование = Справочники.Назначения.ПредставлениеНазначения(НазначениеОбъект, РеквизитыДокумента);
						НазначениеОбъект.ПометкаУдаления = Объект.ПометкаУдаления;
						
						ОбновлениеИнформационнойБазы.ЗаписатьДанные(НазначениеОбъект, Истина);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	ИЛИ ЗаказНаПеремещение.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ДокументДляОбработки
	|ГДЕ
	|	(ДокументДляОбработки.АдресДоставки <> """"
	|		И ВЫРАЗИТЬ(ДокументДляОбработки.АдресДоставкиЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ДокументДляОбработки.АдресДоставкиЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")
	|	ИЛИ
	|	(ДокументДляОбработки.АдресДоставкиПеревозчика <> """"
	|		И ВЫРАЗИТЬ(ДокументДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА (500)) <> """"
	|		И НЕ ДокументДляОбработки.АдресДоставкиПеревозчикаЗначенияПолей ПОДОБНО ""%</КонтактнаяИнформация>"")";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказНаПеремещение";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДопПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДопПараметры.ИмяВременнойТаблицы = "ВТСсылкиДляОбработки";
	ДопПараметры.ДополнительныеИсточникиДанных.Вставить("НаправлениеДеятельности");
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта,
		МенеджерВременныхТаблиц, ДопПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОбработке.Ссылка КАК Ссылка,
	|	КОбработке.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ЕСТЬNULL(НаправленияДеятельности.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ИЗ
	|	ВТСсылкиДляОбработки КАК КОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|		ПО КОбработке.Ссылка.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|			И (НаправленияДеятельности.УчетЗатрат)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВариантПриемкиКонстанта = Константы.ВариантПриемкиТоваров.Получить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			
			Если Объект <> Неопределено Тогда
				
				ОбъектИзменен = Ложь;
				
				Если Не ЗначениеЗаполнено(Объект.Назначение) Тогда
					
					ШаблонНазначения = Справочники.Назначения.ШаблонНового();
					ШаблонНазначения.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
					ШаблонНазначения.Заказ                   = Объект.Ссылка;
					
					Назначение = Справочники.Назначения.НайтиПоШаблону(ШаблонНазначения);
					
					Если ЗначениеЗаполнено(Назначение) Тогда
						Объект.Назначение = Назначение;
					Иначе
						ВызватьИсключение НСтр("ru = 'В информационной базе не обнаружено нужное назначение'");
					КонецЕсли;
					
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				
				Если Объект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.ПустаяСсылка() Тогда
					Объект.ВариантПриемкиТоваров = ВариантПриемкиКонстанта;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если Не ПустаяСтрока(Объект.АдресДоставкиЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(Объект.АдресДоставки, НовыеЗначенияПолей);
					Объект.АдресДоставкиЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
				Если Не ПустаяСтрока(Объект.АдресДоставкиПеревозчикаЗначенияПолей) Тогда
					НовыеЗначенияПолей = "";
					ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(Объект.АдресДоставкиПеревозчика, НовыеЗначенияПолей);
					Объект.АдресДоставкиПеревозчикаЗначенияПолей = НовыеЗначенияПолей;
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				Если ОбъектИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
