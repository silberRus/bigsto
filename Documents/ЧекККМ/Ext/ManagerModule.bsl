
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокумента";
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокументаРМК";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,Статус,Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - параметры указания серий, см. функцию ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий().
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЧекККМ";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);
	ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	Если СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад) Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Помещение");
	КонецЕсли;
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.ТолькоПросмотр = (Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит);
	ПараметрыУказанияСерий.ФактОтбора = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает статус документа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЧекККМ - Ссылка на чек ККМ.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЧековККМ - Статус чека ККМ.
//
Функция СтатусДокумента(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Статус
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ЕстьПомещения = (ПараметрыУказанияСерий.ПоляСвязи.Найти("Помещение") <> Неопределено);
	Если ЕстьПомещения Тогда
		Возврат ТекстЗапросаЗаполненияСтатусовУказанияСерийСПомещениями();
	Иначе
		Возврат ТекстЗапросаЗаполненияСтатусовУказанияСерийБезПомещений();
	КонецЕсли;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПримененныеСкидки(КомандыОтчетов);
	
КонецПроцедуры

// Получить данные для передачи в ЕГАИС сведений о розничной продаже
//
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ - Документ
// 
// Возвращаемое значение:
//  Массив - Данные о продажах (см. ИнтеграцияЕГАИСКлиентСервер.СтруктураСтрокиЧекаЕГАИС())
//
Функция ДанныеДляЕГАИС(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	Товары.НоменклатураЕГАИС
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.ТипНоменклатуры                    КАК ТипНоменклатуры,
	|	Товары.Номенклатура.ПодакцизныйТовар                   КАК ПодакцизныйТовар,
	|	Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре КАК АлкогольнаяПродукцияВоВскрытойТаре,
	|	
	|	Товары.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименование,
	|	Товары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименование,
	|	Товары.Упаковка.Наименование             КАК УпаковкаНаименование,
	|	
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Штрихкод,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.АлкогольнаяПродукция
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК АлкогольнаяПродукция,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.ВидПродукции.Маркируемый
	|	КОНЕЦ КАК МаркируемаяАлкогольнаяПродукция,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ОбъемДАЛ * 10
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.Объем
	|	КОНЕЦ КАК Объем,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.Крепость
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.Крепость
	|	КОНЕЦ КАК Крепость,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ВидАлкогольнойПродукции
	|	ИНАЧЕ
	|		Товары.НоменклатураЕГАИС.ВидПродукции
	|	КОНЕЦ КАК ВидПродукции,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		Товары.Номенклатура.ПроизводительИмпортерДляДекларацийАлко
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Товары.НоменклатураЕГАИС.Импортер <> ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка) ТОГДА
	|			Товары.НоменклатураЕГАИС.Импортер
	|		ИНАЧЕ
	|			Товары.НоменклатураЕГАИС.Производитель
	|		КОНЕЦ
	|	КОНЕЦ КАК ПроизводительИмпортер,
	|	
	|	ВЫБОР КОГДА Товары.НоменклатураЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК Сопоставлено
	|	
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ТаблицаТовары.Номенклатура = Штрихкоды.Номенклатура
	|			И ТаблицаТовары.Характеристика = Штрихкоды.Характеристика
	|			И (ТаблицаТовары.Упаковка = Штрихкоды.Упаковка
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки1 = 1
	|					И ТаблицаТовары.Номенклатура.ЕдиницаИзмерения = ТаблицаТовары.Упаковка.ЕдиницаИзмерения
	|					И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка,
	|	МАКСИМУМ(Штрихкоды.ПриоритетШтрихКода) КАК ПриоритетШтрихКода
	|ПОМЕСТИТЬ ПриотритетШтрихКода
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриотритетШтрихКода КАК ПриотритетШтрихКода
	|		ПО Штрихкоды.Номенклатура = ПриотритетШтрихКода.Номенклатура
	|			И Штрихкоды.Характеристика = ПриотритетШтрихКода.Характеристика
	|			И Штрихкоды.Упаковка = ПриотритетШтрихКода.Упаковка
	|			И Штрихкоды.ПриоритетШтрихКода = ПриотритетШтрихКода.ПриоритетШтрихКода
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.НомерСтроки,
	|	Товары.НоменклатураЕГАИС,
	|	Товары.Номенклатура,
	|	Товары.ТипНоменклатуры,
	
	|	Товары.ПодакцизныйТовар,
	|	Товары.АлкогольнаяПродукцияВоВскрытойТаре,
	
	|	Товары.НоменклатураНаименование,
	|	Товары.ХарактеристикаНаименование,
	|	Товары.УпаковкаНаименование,
	
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	ВЫБОР КОГДА Товары.Штрихкод <> """" ТОГДА
	|		Товары.Штрихкод
	|	ИНАЧЕ
	|		ШтрихкодыНоменклатуры.Штрихкод
	|	КОНЕЦ КАК Штрихкод,
	|	Товары.АлкогольнаяПродукция,
	|	Товары.Сопоставлено,
	|	Товары.МаркируемаяАлкогольнаяПродукция,
	|	Товары.Объем,
	|	Товары.Крепость,
	|	Товары.ВидПродукции,
	|	Товары.ВидПродукции.Код КАК КодВидаАлкогольнойПродукции,
	|	Товары.ПроизводительИмпортер.ИНН КАК ИНН,
	|	Товары.ПроизводительИмпортер.КПП КАК КПП,
	|	Товары.ПроизводительИмпортер     КАК ПроизводительИмпортерАлкогольнойПродукции
	|ИЗ
	|	Товары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО    ШтрихкодыНоменклатуры.Номенклатура   = Товары.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = Товары.Характеристика
	|			И ШтрихкодыНоменклатуры.Упаковка       = Товары.Упаковка
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	МассивСтрок = Новый Массив;
	
	ТЧ = Объект.АкцизныеМарки.Выгрузить();
	ТЧ.Индексы.Добавить("ИдентификаторСтроки");
	
	ТаблицаТоваровЧека = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
		
		НоваяСтрока = РозничныеПродажиКлиентСервер.СтруктураСтрокиЧекаЕГАИС();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТЧ.НоменклатураНаименование,
			СтрокаТЧ.ХарактеристикаНаименование,
			СтрокаТЧ.УпаковкаНаименование);
		МассивСтрок.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// Процедура заполняет реквизит "Налогообложение" значением "Продажа облагается ЕНВД"
// в документах, для склада которых применяется ЕНВД.
//
Процедура ЗаполнитьНалогообложениеПродажаОблагаетсяЕНВД() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка			КАК Ссылка,
	|	ДанныеДокумента.Организация		КАК Организация,
	|	ДанныеДокумента.Склад			КАК Склад,
	|	МАКСИМУМ(ПримененияЕНВД.Период) КАК ПериодПоследнейЗаписи
	|
	|ПОМЕСТИТЬ ВТ_ПоследниеЗаписиЕНВД
	|
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД КАК ПримененияЕНВД
	|		ПО ДанныеДокумента.Организация = ПримененияЕНВД.Организация
	|			И ДанныеДокумента.Склад    = ПримененияЕНВД.Склад
	|			И ДанныеДокумента.Дата     >= ПримененияЕНВД.Период
	|
	|ГДЕ
	|	ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеЗаписиЕНВД.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ПоследниеЗаписиЕНВД КАК ВТ_ПоследниеЗаписиЕНВД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД КАК ПримененияЕНВД
	|		ПО ВТ_ПоследниеЗаписиЕНВД.ПериодПоследнейЗаписи = ПримененияЕНВД.Период
	|			И ВТ_ПоследниеЗаписиЕНВД.Организация		= ПримененияЕНВД.Организация
	|			И ВТ_ПоследниеЗаписиЕНВД.Склад				= ПримененияЕНВД.Склад
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НоменклатураЕГАИС                                   КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                               КАК Серия,
	|	ТабличнаяЧасть.Количество                                          КАК Количество
	|ПОМЕСТИТЬ
	|	ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция                                КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура                                        КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                                      КАК Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия)                 КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)                    КАК Справка2,
	|	СУММА(ЕСТЬNULL(ТаблицаСерии.Количество,ТабличнаяЧасть.Количество)) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)               КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСерии КАК ТаблицаСерии
	|		ПО ТаблицаСерии.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТабличнаяЧасть.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка

	|ГДЕ
	|	Не СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И СправочникНоменклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Характеристика,
	|	ЕСТЬNULL(ТаблицаСерии.Серия, ТабличнаяЧасть.Серия),
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра     = ЗаполнитьСправки2ИзРегистра;
	
	Возврат Справочники.ШтрихкодыУпаковокТоваров.ШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса);
	
КонецФункции

Функция ОбработатьШтрихкодPDF417(Форма, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок) Экспорт
	
	Результат = АкцизныеМаркиЕГАИС.РезультатОбработкиШтрихкода(ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканированияАкцизныхМарок);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	
	ПараметрыПоискаСтатусаУказанияСерии = Новый Структура;
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	
	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(ПараметрыПоискаСтатусаУказанияСерии);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			НайденныеСтроки[0].СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);
			
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          Справочники.СерииНоменклатуры.ПустаяСсылка());
			
		КонецЕсли;
		
		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			Форма.Объект.Товары, ПараметрыОтбора,
			Неопределено, ДанныеШтрихкода.АлкогольнаяПродукция, ПараметрыЗаполнения);
		
		СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
		
	Иначе
		
		СтрокаТЧ                        = Неопределено;
		СтрокиТЧДляУменьшенияКоличества = Неопределено;
		
	КонецЕсли;
	
	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ = Неопределено Тогда
		
		СтрокаТЧ = Форма.Объект.Товары.Добавить();
		СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;
		
		ПроверитьСериюРассчитатьСтатус = Новый Структура;
		ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  Форма.Объект.Склад);
		ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		
		Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;
		
		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ <> Неопределено Тогда
		
		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
		
	Иначе
		
		Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
			
			Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
				
				Если СтрокаТЧ = Неопределено Тогда
					
					СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;
					
					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
					
				Иначе
					
					Форма.Объект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
					
					Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
					Если Индекс <> Неопределено Тогда
						ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
					КонецЕсли;
					
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
				
			Иначе
				
				СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
				
				Если СтрокаТЧ = Неопределено Тогда
					
					СтрокаТЧ = Форма.Объект.Товары.Вставить(Форма.Объект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
					
					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				Иначе
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	АкцизныеМаркиСтрокаТЧ = Форма.Объект.АкцизныеМарки.Добавить();
	АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
	АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
	АкцизныеМаркиСтрокаТЧ.Справка2            = ДанныеШтрихкода.Справка2;
	
	Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(
		СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
		
		СтруктураПоискаСерий = Новый Структура;
		СтруктураПоискаСерий.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
		СтруктураПоискаСерий.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
		СтруктураПоискаСерий.Вставить("Серия",          ДанныеШтрихкода.Серия);
		
		СтрокиСерии = Форма.Объект.Серии.НайтиСтроки(СтруктураПоискаСерий);
		Если СтрокиСерии.Количество() = 0 Тогда
			
			СтрокаТЧСерии = Форма.Объект.Серии.Добавить();
			СтрокаТЧСерии.Номенклатура   = ДанныеШтрихкода.Номенклатура;
			СтрокаТЧСерии.Характеристика = ДанныеШтрихкода.Характеристика;
			СтрокаТЧСерии.Серия          = ДанныеШтрихкода.Серия;
			СтрокаТЧСерии.Количество     = СтрокаТЧ.Количество;
			
		Иначе
			
			СтрокаТЧСерии = СтрокиСерии[0];
			Если СтрокаТЧСерии.Количество < СтрокаТЧ.Количество Тогда
				СтрокаТЧСерии.Количество = СтрокаТЧ.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьШтрихкодУпаковки(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканированияАкцизныхМарок) Экспорт
	
	Результат = АкцизныеМаркиЕГАИС.РезультатОбработкиШтрихкода(ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканированияАкцизныхМарок);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	
	ЗаполнитьТоварыИАкцизныеМарки(Форма.Объект, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьШтрихкодDataMatrix(Форма, ДанныеШтрихкода, ПараметрыСканированияАкцизныхМарок) Экспорт
	
	Результат = АкцизныеМаркиЕГАИС.РезультатОбработкиШтрихкода(ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

Функция СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СерииУказываютсяВТабличнойЧастиТовары = НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
		                                                                 НайденныеСтроки[0].СтатусУказанияСерий,
		                                                                 ПараметрыЗаполнения.ПараметрыУказанияСерий);
	Иначе
		СерииУказываютсяВТабличнойЧастиТовары = Неопределено;
	КонецЕсли;
	
	Возврат СерииУказываютсяВТабличнойЧастиТовары;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			СерииУказываютсяВТабличнойЧастиТовары = СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения);
			
			ВыполнитьПоискПоНоменклатуре = Истина;
			Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
				
				ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаДерева.ИдентификаторСтроки);
				СтрокиТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиТовары.Количество() > 0 Тогда
					ВыполнитьПоискПоНоменклатуре = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыполнитьПоискПоНоменклатуре Тогда
				
				Если СерииУказываютсяВТабличнойЧастиТовары <> Неопределено
					И СерииУказываютсяВТабличнойЧастиТовары Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
					ПараметрыОтбора.Вставить("Серия",             СтрокаДерева.Серия);
					
				Иначе
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",      СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика",    СтрокаДерева.Характеристика);
					
				КонецЕсли;
				
				РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
					ДокументОбъект.Товары, ПараметрыОтбора,
					Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
				
				СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
				СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
				
			Иначе
				
				СтрокаТЧТовары                  = СтрокиТовары[0];
				СтрокиТЧДляУменьшенияКоличества = Неопределено;
				
			КонецЕсли;
			
			Если СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары = Неопределено Тогда
				
				СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
				
				СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
				СтрокаТЧТовары.Номенклатура      = СтрокаДерева.Номенклатура;
				СтрокаТЧТовары.Характеристика    = СтрокаДерева.Характеристика;
				СтрокаТЧТовары.Серия             = СтрокаДерева.Серия;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
					СтрокаТЧТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				Иначе
					СтрокаТЧТовары.ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
				
				ПроверитьСериюРассчитатьСтатус = Новый Структура;
				ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  ДокументОбъект.Склад);
				ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, Неопределено);
				
				Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
					СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
					СтрокаТЧТовары.Серия = Неопределено;
				КонецЕсли;
				
			ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары <> Неопределено Тогда
				
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
				
			Иначе
				
				Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
					
					Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
						Иначе
							
							ДокументОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
							
							Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
							Если Индекс <> Неопределено Тогда
								ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
							КонецЕсли;
							
						КонецЕсли;
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
						
					Иначе
						
						СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
						ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = ДокументОбъект.Товары.Вставить(ДокументОбъект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
							ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
							АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						Иначе
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(
				СтрокаТЧТовары.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
				
				СтруктураПоискаСерий = Новый Структура;
				СтруктураПоискаСерий.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
				СтруктураПоискаСерий.Вставить("Характеристика", СтрокаДерева.Характеристика);
				СтруктураПоискаСерий.Вставить("Серия",          СтрокаДерева.Серия);
				
				СтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(СтруктураПоискаСерий);
				Если СтрокиСерии.Количество() = 0 Тогда
					
					СтрокаТЧСерии = ДокументОбъект.Серии.Добавить();
					СтрокаТЧСерии.Номенклатура   = СтрокаДерева.Номенклатура;
					СтрокаТЧСерии.Характеристика = СтрокаДерева.Характеристика;
					СтрокаТЧСерии.Серия          = СтрокаДерева.Серия;
					СтрокаТЧСерии.Количество     = СтрокаТЧТовары.Количество;
					
				Иначе
					
					СтрокаТЧСерии = СтрокиСерии[0];
					Если СтрокаТЧСерии.Количество < СтрокаТЧТовары.Количество Тогда
						СтрокаТЧСерии.Количество = СтрокаТЧТовары.Количество;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧТовары.ИдентификаторСтроки) Тогда
				СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			СтрокаТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.Добавить();
			СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
			СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
			СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
			СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровня;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваВКассахККМ(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыПоЭквайрингу(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаПодарочныеСертификаты(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаИсторияПодарочныхСертификатов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаБонусныеБаллы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Архивный                                        КАК Архивный,
	|	ДанныеДокумента.Ссылка                                          КАК Ссылка,
	|	ДанныеДокумента.КассаККМ.Владелец                               КАК Организация,
	|	ДанныеДокумента.Партнер                                         КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)                   КАК Контрагент,
	|	ДанныеДокумента.Дата                                            КАК Период,
	|	ДанныеДокумента.Валюта                                          КАК Валюта,
	|	ДанныеДокумента.Склад                                           КАК Склад,
	|	ДанныеДокумента.ЦенаВключаетНДС                                 КАК ЦенаВключаетНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВРозницу) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента) КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Статус                                                        КАК Статус,
	|	ДанныеДокумента.ОрганизацияЕГАИС                                     КАК ОрганизацияЕГАИС,
	|	ДанныеДокумента.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Архивный",                                 Реквизиты.Архивный);
	Запрос.УстановитьПараметр("Ссылка",                                   ДокументСсылка);
	Запрос.УстановитьПараметр("Склад",                                    Реквизиты.Склад);
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                   Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                          ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                    Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств",            Реквизиты.СтатьяДвиженияДенежныхСредств);
	Запрос.УстановитьПараметр("ЧекПробит",                                Реквизиты.Статус = Перечисления.СтатусыЧековККМ.Пробит);
	Запрос.УстановитьПараметр("ТоварЗарезервирован",                      Реквизиты.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован);
	Запрос.УстановитьПараметр("Партнер",                                  Реквизиты.Партнер);
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности",              Реквизиты.БонуснаяПрограммаЛояльности);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",                         Реквизиты.ОрганизацияЕГАИС);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДенежныеСредстваВКассахККМ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваВКассахККМ";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтСуммаПлатежнымиКартами", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСуммаПлатежнымиКартами(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтСуммаПодарочнымиСертификатами", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСуммаПодарочнымиСертификатами(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.КассаККМ.Владелец КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) - ЕСТЬNULL(ТаблицаСуммаПодарочнымиСертификатами.Сумма, 0) КАК Сумма,
	|	ВЫРАЗИТЬ((ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) - ЕСТЬNULL(ТаблицаСуммаПодарочнымиСертификатами.Сумма, 0)) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ((ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) - ЕСТЬNULL(ТаблицаСуммаПодарочнымиСертификатами.Сумма, 0)) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммаПлатежнымиКартами КАК ТаблицаСуммаПлатежнымиКартами
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммаПодарочнымиСертификатами КАК ТаблицаСуммаПодарочнымиСертификатами
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) - ЕСТЬNULL(ТаблицаСуммаПодарочнымиСертификатами.Сумма, 0) <> 0
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И (НЕ &Архивный)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоЭквайрингу(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоЭквайрингу";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПлатежей.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте) КАК ТипДенежныхСредств,
	|	&Организация                          КАК Организация,
	|	&Валюта                               КАК Валюта,
	|	ТаблицаПлатежей.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ТаблицаПлатежей.НомерПлатежнойКарты   КАК НомерПлатежнойКарты,
	|	ТаблицаПлатежей.КодАвторизации        КАК КодАвторизации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте) КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	&Период                               КАК ДатаПлатежа,
	|	ТаблицаПлатежей.Сумма                 КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка
	|	И (НЕ &Архивный)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваВПути";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаПлатежей.НомерСтроки                                                          КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                               КАК ВидДвижения,
	|	&Период                                                                              КАК Период,
	|	&Организация                                                                         КАК Организация,
	|	ТаблицаПлатежей.ЭквайринговыйТерминал.БанковскийСчет                                 КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)   КАК ВидПереводаДенежныхСредств,
	|	ТаблицаПлатежей.ЭквайринговыйТерминал.Эквайер                                        КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                                                                         КАК ПлатежныйДокумент,
	|	&Валюта                                                                              КАК Валюта,
	|	ТаблицаПлатежей.Сумма                                                                КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаПлатежей.Сумма * &КоэффициентПересчетаВВалютуУпр КАК Число(15,2))    КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаПлатежей.Сумма * &КоэффициентПересчетаВВалютуРегл КАК Число(15,2))   КАК СуммаРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте) КАК ХозяйственнаяОперация,
	|	&СтатьяДвиженияДенежныхСредств                                                       КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка
	|	И (НЕ &Архивный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаСерииТоваров", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                       КАК Склад,
	|	ТаблицаТовары.Помещение      КАК Помещение,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.Количество     КАК ВНаличии,
	|	Истина                       КАК КонтролироватьОстатки
	|ИЗ
	|	ВтТаблицаСерииТоваров КАК ТаблицаТовары
	|ГДЕ
	|	(НЕ &Архивный)
	|	И (&ЧекПробит ИЛИ &ТоварЗарезервирован)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (НЕ &Архивный)
	|	И (&ЧекПробит
	|			ИЛИ &ТоварЗарезервирован)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Склад КАК Отправитель,
	|	&Партнер КАК Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаВРозницу) КАК СкладскаяОперация,
	|	ТаблицаСерии.Помещение КАК ПомещениеОтправителя,
	|	&Период КАК Период,
	|	&Ссылка КАК Документ,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Количество,
	|	&Склад,
	|	&Партнер,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтгрузкаВРозницу),
	|	ТаблицаТовары.Помещение,
	|	&Период,
	|	&Ссылка,
	|	&Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ИСТИНА
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИсторияПодарочныхСертификатов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ИсторияПодарочныхСертификатов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                             КАК Период,
	|	ТабличнаяЧасть.ПодарочныйСертификат КАК ПодарочныйСертификат,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.ПодарочныйСертификат.Владелец.ЧастичнаяОплата ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ЧастичноПогашен)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.ПолностьюПогашен)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Документ.ЧекККМ.ПодарочныеСертификаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И (НЕ &Архивный)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодарочныеСертификаты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПодарочныеСертификаты";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ПодарочныйСертификат    КАК ПодарочныйСертификат,
	|	ТабличнаяЧасть.СуммаВВалютеСертификата                  КАК Сумма,
	|	ТабличнаяЧасть.Сумма * &КоэффициентПересчетаВВалютуРегл КАК СуммаРегл
	|ИЗ
	|	Документ.ЧекККМ.ПодарочныеСертификаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И (НЕ &Архивный)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаБонусныеБаллы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "БонусныеБаллы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтБонусныеБаллы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтБонусныеБаллы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БонусныеБаллы.Период                      КАК Период,
	|	БонусныеБаллы.ВидДвижения                 КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер                     КАК Партнер,
	|	СУММА(БонусныеБаллы.Начислено)            КАК Начислено,
	|	СУММА(БонусныеБаллы.КСписанию)            КАК КСписанию
	|ИЗ
	|	ВтБонусныеБаллы КАК БонусныеБаллы
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ВидДвижения
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаСерииТоваров(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСерииТоваров";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Помещение,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия
	|ПОМЕСТИТЬ ВтТаблицаСерииТоваров
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Помещение,
	|	ТаблицаСерии.Количество,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
	|	ТаблицаСерии.Серия
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Помещение      = ТаблицаТовары.Помещение
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Помещение,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8, 10)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСуммаПлатежнымиКартами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСуммаПлатежнымиКартами";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ТабличнаяЧасть.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВтСуммаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСуммаПодарочнымиСертификатами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСуммаПодарочнымиСертификатами";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ТабличнаяЧасть.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВтСуммаПодарочнымиСертификатами
	|ИЗ
	|	Документ.ЧекККМ.ПодарочныеСертификаты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтБонусныеБаллы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтБонусныеБаллы";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаНачисления                            КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                   КАК ВидДвижения,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности               КАК БонуснаяПрограммаЛояльности,
	|	&Партнер                                                 КАК Партнер,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов                       КАК Начислено,
	|	0                                                        КАК КСписанию
	|ПОМЕСТИТЬ ВтБонусныеБаллы
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТабличнаяЧасть.ДатаНачисления <> ДатаВремя(1,1,1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ДатаСписания                              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                   КАК ВидДвижения,
	|	ТабличнаяЧасть.БонуснаяПрограммаЛояльности               КАК БонуснаяПрограммаЛояльности,
	|	&Партнер                                                 КАК Партнер,
	|	0                                                        КАК Начислено,
	|	ТабличнаяЧасть.СуммаБонусныхБаллов                       КАК КСписанию
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТабличнаяЧасть.ДатаСписания <> ДатаВремя(1,1,1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачалоПериода(&Период, ДЕНЬ),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&БонуснаяПрограммаЛояльности,
	|	&Партнер,
	|	ТабличнаяЧасть.СуммаБонусныхБалловКСписанию,
	|	ТабличнаяЧасть.СуммаБонусныхБалловКСписанию
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|	И &ЧекПробит
	|	И НЕ &Архивный
	|	И ТабличнаяЧасть.СуммаБонусныхБалловКСписанию <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта,
																			Запрос.Параметры.Валюта,
																			Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//		КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Товарный чек
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТоварногоЧека";
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Функция получает данные для формирования печатной формы Товарный чек.
//
Функция ПолучитьДанныеДляПечатнойФормыТоварныйЧек(ПараметрыПечати, МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокЧек.Номер                     КАК Номер,
	|	ДокЧек.Дата                      КАК Дата,
	|	ДокЧек.Ссылка                    КАК Ссылка,
	|	ДокЧек.КассаККМ                  КАК КассаККМ,
	|	ДокЧек.Валюта                    КАК Валюта,
	|	ДокЧек.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ДокЧек.КассаККМ.Представление    КАК Покупатель,
	|	ДокЧек.Кассир.ФизическоеЛицо     КАК Ответственный,
	|	ДокЧек.Организация               КАК Организация,
	|	ДокЧек.Организация.Префикс       КАК Префикс,
	|	ДокЧек.Организация.Представление КАК Поставщик,
	|	ДокЧек.СуммаДокумента            КАК СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО                     КАК Подразделение
	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ГДЕ
	|	ДокЧек.Ссылка В (&МассивДокументов)
	|УПОРЯДОЧИТЬ ПО
	|	ДокЧек.МоментВремени
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка                            КАК Ссылка,
	|
	|	ВариантыКомплектацииНоменклатуры.Ссылка                                    КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                                                 КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                                               КАК ХарактеристикаНабора,
	|
	|	Таблица.НомерСтроки        КАК НомерСтроки,
	|	Таблица.Номенклатура       КАК Номенклатура,
	|	Таблица.Характеристика     КАК Характеристика,
	|	Таблица.Количество         КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Упаковка                          КАК Упаковка,
	|	Таблица.Цена                              КАК Цена,
	|	Таблица.КоличествоУпаковок * Таблица.Цена - Таблица.Сумма КАК СуммаСкидки,
	|	Таблица.КоличествоУпаковок * Таблица.Цена                 КАК СуммаБезСкидки,
	|	Таблица.Сумма                                             КАК Сумма,
	|	Таблица.СуммаНДС                                          КАК СуммаНДС,
	|	Таблица.Помещение                                         КАК Помещение
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Таблица
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|
	|ГДЕ
	|	Таблица.Ссылка В (&МассивДокументов)
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка                 КАК Ссылка,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	СУММА(Таблица.Сумма)                       КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)                    КАК СуммаНДС,
	|	СУММА(Таблица.СуммаСкидки)                 КАК СуммаСкидки,
	|	СУММА(Таблица.Сумма - Таблица.СуммаСкидки) КАК СуммаБезСкидки
	|ПОМЕСТИТЬ КомплектыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                                  КАК Ссылка,
	|	Комплектующие.Ссылка                                           КАК ВариантКомплектацииНоменклатуры,
	|	Комплектующие.Ссылка.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Комплектующие.Ссылка.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Комплектующие.Количество, 0) <> 0 ТОГДА
	|		Товары.Количество / Комплектующие.Количество
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДополнительно
	|ИЗ
	|	Товары КАК Товары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектующие
	|		ПО Комплектующие.Ссылка = Товары.ВариантКомплектацииНоменклатуры
	|		 И Комплектующие.Ссылка.НоменклатураОсновногоКомпонента   = Товары.Номенклатура
	|		 И Комплектующие.Ссылка.ХарактеристикаОсновногоКомпонента = Товары.Характеристика
	|		 И Комплектующие.Номенклатура                             = Товары.Номенклатура
	|		 И Комплектующие.Характеристика                           = Товары.Характеристика
	|
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ Комплектующие.Количество ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Комплектующие.Ссылка,
	|	Комплектующие.Ссылка.ВариантПредставленияНабораВПечатныхФормах,
	|	Комплектующие.Ссылка.ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДополнительно.ВариантКомплектацииНоменклатуры,
	|	ТаблицаДополнительно.ВариантПредставленияНабораВПечатныхФормах,
	|	ТаблицаДополнительно.ВариантРасчетаЦеныНабора,
	
	|	Таблица.Ссылка                            КАК Ссылка,
	|	Таблица.НоменклатураНабора                КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора              КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	ЕСТЬNULL(ТаблицаДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ТаблицаДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма                             КАК Сумма,
	|	Таблица.СуммаНДС                          КАК СуммаНДС,
	|	Таблица.СуммаСкидки                       КАК СуммаСкидки,
	|	Таблица.СуммаБезСкидки                    КАК СуммаБезСкидки
	|ПОМЕСТИТЬ Комплекты
	|ИЗ
	|	КомплектыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДополнительно КАК ТаблицаДополнительно
	|		ПО Таблица.НоменклатураНабора = ТаблицаДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ТаблицаДополнительно.ХарактеристикаНабора
	|		И Таблица.Ссылка = ТаблицаДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка                            КАК Ссылка,
	|
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.ВариантРасчетаЦеныНабора                  КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора                        КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                      КАК ХарактеристикаНабора,
	|	Таблица.ЭтоКомплектующие                          КАК ЭтоКомплектующие,
	|	Таблица.ЭтоНабор                                  КАК ЭтоНабор,
	|
	|	Таблица.НомерСтроки                       КАК НомерСтроки,
	|	Таблица.Номенклатура.НаименованиеПолное   КАК ПолноеНаименованиеНоменклатуры,
	|	Таблица.Номенклатура.Код                  КАК Код,
	|	Таблица.Номенклатура.Артикул              КАК Артикул,
	|	Таблица.Характеристика.НаименованиеПолное КАК ПолноеНаименованиеХарактеристики,
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Таблица.Упаковка.Наименование
	|	КОНЕЦ                      КАК НаименованиеУпаковки,
	|	Таблица.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Таблица.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Таблица.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Таблица.Упаковка)
	|	КОНЕЦ                                     КАК ЕдиницаИзмерения,
	|	Таблица.Упаковка                          КАК Упаковка,
	|	Таблица.Цена                              КАК Цена,
	|	Таблица.КоличествоУпаковок * Таблица.Цена - Таблица.Сумма КАК СуммаСкидки,
	|	Таблица.Сумма                                             КАК Сумма,
	|	Таблица.СуммаНДС                                          КАК СуммаНДС,
	|	Таблица.Помещение                                         КАК Помещение
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		Таблица.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|		Таблица.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		Таблица.Ссылка,
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|		ВЫБОР КОГДА ЕСТЬNULL(Комплекты.НомерСтроки, 0) <> 0 ТОГДА
	|			Истина
	|		ИНАЧЕ
	|			Ложь
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		Ложь КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(Комплекты.НомерСтроки, 0) <> 0 ТОГДА
	|			Комплекты.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура,
	|		Таблица.Количество,
	|		Таблица.КоличествоУпаковок,
	|		Таблица.Цена,
	|		Таблица.Сумма,
	|		Таблица.СуммаНДС,
	|		Таблица.Характеристика,
	|		Таблица.Упаковка,
	|		Таблица.СуммаСкидки,
	|		Таблица.СуммаБезСкидки,
	|		Таблица.Помещение
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Комплекты КАК Комплекты
	|			ПО Комплекты.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И Комплекты.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|
	|	ГДЕ
	|		Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ (Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	        И Таблица.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие),
	|	                                                                ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Комплекты.ВариантПредставленияНабораВПечатныхФормах,
	|		Комплекты.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|		Комплекты.Ссылка,
	|		Комплекты.НоменклатураНабора,
	|		Комплекты.ХарактеристикаНабора,
	|		Ложь КАК ЭтоКомплектующие,
	|		Истина КАК ЭтоНабор,
	|		Комплекты.НомерСтроки,
	|		Комплекты.НоменклатураНабора,
	|		Комплекты.Количество,
	|		Комплекты.КоличествоУпаковок,
	|		Комплекты.СуммаБезСкидки / ЕСТЬNULL(Комплекты.КоличествоУпаковок, 1) КАК Цена,
	|		Комплекты.Сумма КАК Сумма,
	|		Комплекты.СуммаНДС,
	|		Комплекты.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		Комплекты.СуммаСкидки,
	|		Комплекты.СуммаБезСкидки,
	|		Неопределено КАК Помещение
	|	ИЗ
	|		Комплекты КАК Комплекты
	|	ГДЕ
	|		Комплекты.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор),
	|	                                                           ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))
	|) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.НомерСтроки,
	|	ЭтоНабор УБЫВ
	|");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура(
		"РезультатПоШапке, РезультатПоТабличнойЧасти, ЗаголовокДокумента",
		ПакетРезультатовЗапроса[0],
		ПакетРезультатовЗапроса[5],
		НСтр("ru = 'Товарный чек'"));
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АкцизныеМарки.Ссылка
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложен)
	|	И АкцизныеМарки.КодАкцизнойМарки <> """"
	|	И АкцизныеМарки.АкцизнаяМарка = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|";
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ЧекККМ";
	МетаданныеДокумента = Метаданные.Документы.ЧекККМ;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбработкаЗавершена = Истина;
			Для каждого ТекСтрока Из ДокументОбъект.АкцизныеМарки Цикл
				Если ЗначениеЗаполнено(ТекСтрока.КодАкцизнойМарки) Тогда
					ТекСтрока.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьАкцизнуюМаркуПоКоду(ТекСтрока.КодАкцизнойМарки);
					Если НЕ ЗначениеЗаполнено(ТекСтрока.АкцизнаяМарка) Тогда
						ОбработкаЗавершена = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбработкаЗавершена Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляГенерацииАкцизныхМарок(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АкцизныеМарки.Ссылка
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложен)
	|	И АкцизныеМарки.КодАкцизнойМарки <> """"
	|	И АкцизныеМарки.АкцизнаяМарка = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|";
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюГенерацияАкцизныхМарок(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.ЧекККМ";
	МетаданныеДокумента = Метаданные.Документы.ЧекККМ;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеДокумента,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		ОбработкаСсылкиЗавершена = Истина;
		Для каждого ТекСтрока Из ДокументОбъект.АкцизныеМарки Цикл
			Если ЗначениеЗаполнено(ТекСтрока.КодАкцизнойМарки) И НЕ ЗначениеЗаполнено(ТекСтрока.АкцизнаяМарка) Тогда
				СтрокаТовар = ДокументОбъект.Товары.Найти(ТекСтрока.ИдентификаторСтроки, "ИдентификаторСтроки");
				Попытка
					Справочники.ШтрихкодыУпаковокТоваров.ПолучитьСгенерироватьАкцизнуюМарку(ТекСтрока.КодАкцизнойМарки,
						СтрокаТовар.Номенклатура,
						СтрокаТовар.Характеристика,
						Истина);
				Исключение
						
					ТекстСообщения = НСтр("ru = 'Не удалось сгенерировать акцизную марку: %Ключ% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", ТекСтрока.КодАкцизнойМарки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						МетаданныеДокумента, ТекстСообщения);
					ОбработкаСсылкиЗавершена = Ложь;
					ОтменитьТранзакцию();
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		Если ОбработкаСсылкиЗавершена Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияЕГАИС

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                          КАК Номер,
		|	Шапка.Дата                           КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)   КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                         КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.ОрганизацияЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2            КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка       КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки    КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
		|		И ТабличнаяЧастьТовары.ИдентификаторСтроки <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Кассир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.ИдентификаторСтроки     КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                   КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС                    КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.ИдентификаторСтроки        КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2                   КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка              КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки           КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
		|		И ТабличнаяЧастьТовары.ИдентификаторСтроки <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = Справочники.ШтрихкодыУпаковокТоваров.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		Справочники.ШтрихкодыУпаковокТоваров.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

#КонецОбласти

// Возвращает текст запроса для расчета статусов указания серий (С помещениями)
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийСПомещениями()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Помещение,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Помещение,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Помещение,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Помещение,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Помещение,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Помещение,
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА &ТолькоСерииДляСебестоимости
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Помещение = СерииДляЗапроса.Помещение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Помещение = ТоварыДляЗапроса.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий (Без помещений)
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийБезПомещений()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА &ТолькоСерииДляСебестоимости
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли

