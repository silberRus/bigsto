#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОперацияПоЯндексКассе.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.ВзаимозачетЗадолженности.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Операция по Яндекс.Кассе".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОперацияПоЯндексКассе) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ОперацияПоЯндексКассе.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = СтрШаблон(НСтр("ru = '%1 (Возврат оплаты клиенту)'"),
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ОперацияПоЯндексКассе)); 
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИнтеграциюСЯндексКассой";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	
	
КонецПроцедуры


// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Создает операции по Яндекс.Кассе на основании полученных данных.
// 
// Параметры:
//  ПараметрыПроцедуры - Структура - данные для создания документов, вида:
//    * МассивОпераций - Массив - Массив структур с данными для создания документа
//    * АдресХранилища - Строка - Адрес на результат в хранилище
//
Процедура Создать(ПараметрыПроцедуры, АдресХранилища) Экспорт 
	Перем МассивОпераций, ДатыУспешногоОбмена;
	
	Если Не ПараметрыПроцедуры.Свойство("МассивОпераций", МассивОпераций) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыПроцедуры.Свойство("ДатыУспешногоОбмена", ДатыУспешногоОбмена) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивОпераций) Тогда 
		Возврат;
	КонецЕсли;
	
	СчетчикДокументов = 0;
	
	МассивНастроекЯндексКассы = Новый Массив;
	МассивДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Операция из МассивОпераций Цикл 
		
		Если Не Операция.СДоговором Тогда 
			Продолжить;
		КонецЕсли;
		
		Операция.Вставить("Валюта", Операция.ВалютаДокумента);
		
		Если Операция.ВидОперации = "Оплата" Тогда 
			
			Если ЭтоНеУчтеннаяТранзакция(Операция, СчетчикДокументов) Тогда 
				
				ДанныеЗаполнения = Новый Структура();
				ДанныеЗаполнения.Вставить("ДанныеОперации",			Операция);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация",	Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",	Операция.СтатьяДвиженияДенежныхСредствОплаты); 
				
				ДокументОбъект = Документы.ОперацияПоЯндексКассе.СоздатьДокумент();
				ДокументОбъект.Заполнить(ДанныеЗаполнения);
				
				Если ДокументОбъект.КодПроблемы = 0 Тогда 
					Режим = РежимЗаписиДокумента.Проведение;
				Иначе
					Режим = РежимЗаписиДокумента.Запись;
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Записать(Режим);
					СчетчикДокументов = СчетчикДокументов + 1;
					Если МассивНастроекЯндексКассы.Найти(Операция.НастройкаЯндексКассы) = Неопределено Тогда 
						МассивНастроекЯндексКассы.Добавить(Операция.НастройкаЯндексКассы);
					КонецЕсли;
					МассивДокументов.Добавить(ДокументОбъект.Ссылка);
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ ""Операция по Яндекс.Кассе"" №%1 от %2 не %3! Произошли ошибки при %4!'"),
					ДокументОбъект.Номер,
					ДокументОбъект.Дата,
					?(Режим = РежимЗаписиДокумента.Запись, "записан", "проведен"),
					?(Режим = РежимЗаписиДокумента.Запись, "записи", "проведении"));
					Сообщение.Сообщить();
					Если Режим = РежимЗаписиДокумента.Проведение Тогда 
						Попытка
							Режим = РежимЗаписиДокумента.Запись;
							ДокументОбъект.Записать(Режим);
							СчетчикДокументов = СчетчикДокументов + 1;
							Если МассивНастроекЯндексКассы.Найти(Операция.НастройкаЯндексКассы) = Неопределено Тогда 
								МассивНастроекЯндексКассы.Добавить(Операция.НастройкаЯндексКассы);
							КонецЕсли;
							МассивДокументов.Добавить(ДокументОбъект.Ссылка);
						Исключение
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Документ ""Операция по Яндекс.Кассе"" №%1 от %2 не %3! Произошли ошибки при %4!'"),
							ДокументОбъект.Номер,
							ДокументОбъект.Дата,
							?(Режим = РежимЗаписиДокумента.Запись, "записан", "проведен"),
							?(Режим = РежимЗаписиДокумента.Запись, "записи", "проведении"));
							Сообщение.Сообщить();
						КонецПопытки;
					КонецЕсли;
				КонецПопытки;
				
				
			КонецЕсли;
			
		ИначеЕсли Операция.ВидОперации = "Возврат" Тогда
			
			Режим = РежимЗаписиДокумента.Проведение;
			
			УчтеннаяТранзакция = Неопределено;
			Если ЭтоНеУчтеннаяТранзакция(Операция, СчетчикДокументов) Тогда 
				
				ДанныеЗаполнения = Новый Структура();
				ДанныеЗаполнения.Вставить("ДанныеОперации",			Операция);
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация",	Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
				ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств",	Операция.СтатьяДвиженияДенежныхСредствВозвраты);
				
				ДокументОбъект = Документы.ОперацияПоЯндексКассе.СоздатьДокумент();
				ДокументОбъект.Заполнить(ДанныеЗаполнения);
				
				Если ДокументОбъект.КодПроблемы = 0 Тогда 
					Режим = РежимЗаписиДокумента.Проведение;
				Иначе
					Режим = РежимЗаписиДокумента.Запись;
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Записать(Режим);
					СчетчикДокументов = СчетчикДокументов + 1;
					Если МассивНастроекЯндексКассы.Найти(Операция.НастройкаЯндексКассы) = Неопределено Тогда 
						МассивНастроекЯндексКассы.Добавить(Операция.НастройкаЯндексКассы);
					КонецЕсли;
					МассивДокументов.Добавить(ДокументОбъект.Ссылка);
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ ""Операция по Яндекс.Кассе"" №%1 от %2 не %3! Произошли ошибки при %4!'"),
					ДокументОбъект.Номер,
					ДокументОбъект.Дата,
					?(Режим = РежимЗаписиДокумента.Запись, "записан", "проведен"),
					?(Режим = РежимЗаписиДокумента.Запись, "записи", "проведении"));
					Сообщение.Сообщить();
					Если Режим = РежимЗаписиДокумента.Проведение Тогда
						Попытка
							Режим = РежимЗаписиДокумента.Запись;
							ДокументОбъект.Записать(Режим);
							СчетчикДокументов = СчетчикДокументов + 1;
							Если МассивНастроекЯндексКассы.Найти(Операция.НастройкаЯндексКассы) = Неопределено Тогда 
								МассивНастроекЯндексКассы.Добавить(Операция.НастройкаЯндексКассы);
							КонецЕсли;
							МассивДокументов.Добавить(ДокументОбъект.Ссылка);
						Исключение
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Документ ""Операция по Яндекс.Кассе"" №%1 от %2 не %3! Произошли ошибки при %4!'"),
							ДокументОбъект.Номер,
							ДокументОбъект.Дата,
							?(Режим = РежимЗаписиДокумента.Запись, "записан", "проведен"),
							?(Режим = РежимЗаписиДокумента.Запись, "записи", "проведении"));
							Сообщение.Сообщить();
						КонецПопытки;						
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		ОтразитьДокументВЖурналеФискальныхОпераций(ДокументОбъект, Операция);
		
	КонецЦикла;
	
	Для Каждого НастройкаЯндексКассы из МассивНастроекЯндексКассы Цикл 
		
		РегистрыСведений.СтатусОбменовСЯндексКассой.ОбновитьСтатус(НастройкаЯндексКассы,
			ДатыУспешногоОбмена.Получить(НастройкаЯндексКассы));
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(МассивДокументов, АдресХранилища);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает предварительные параметры фискализации чека для документа.
//
// Параметры:
//   ДокументСсылка - ДокументСсылка.ОперацияПоЯндексКассе - Документ.
//   СуммаПредоплатыКорректировка - Число - Откорректированная сумма предоплаты.
//
// ВозвращаемоеЗначение:
//  Структура - см. функцию МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ПараметрыОперацииФискализацииЧека(ДокументСсылка, СуммаПредоплатыКорректировка = Неопределено, ВерсияФФД = Неопределено) Экспорт
	
	Возврат ДенежныеСредстваСервер.ПараметрыОперацииФискализацииЧека(ДокументСсылка, СуммаПредоплатыКорректировка, ВерсияФФД);
	
КонецФункции

Процедура ОтразитьДокументВЖурналеФискальныхОпераций(ДокументОбъект, Операция)
	
	Если НЕ Операция.ОтправкаЧековЧерезЯндекс Тогда
		Возврат;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(Операция.ДатаФормированияЧека) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////
	
	РеквизитыОперации = СтруктураРеквизитыФискальнойОперацииКассовогоУзла();
	
	РеквизитыОперации.Дата 								= ПреобразоватьСтрокуВДату(Операция.ДатаФормированияЧека);
	РеквизитыОперации.ДокументОснование 				= ДокументОбъект.Ссылка;
	РеквизитыОперации.Организация	 					= ДокументОбъект.Организация;
	РеквизитыОперации.Сумма	 							= Операция.СуммаЧека;
	РеквизитыОперации.СуммаОплатыПлатежнаяКарта			= Операция.СуммаЧека;
	РеквизитыОперации.ТипОперации		 				= Перечисления.ТипыОперацииКассовогоУзла.ФискальнаяОперация;
	РеквизитыОперации.НомерЧекаККМ					 	= Операция.ФискальныйНомерДокумента;
	РеквизитыОперации.КонтактныеДанныеЭлектронногоЧека 	= Операция.КонтактныеДанныеЭлектронногоЧека;
	
	Если ЗначениеЗаполнено(РеквизитыОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
		РеквизитыОперации.ВариантОтправкиЭлектронногоЧека = ?(Найти(РеквизитыОперации.КонтактныеДанныеЭлектронногоЧека, "@") <> 0,
			Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail,
			Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS)
	КонецЕсли; 
	
	Если Операция.ВидОперации = "Оплата" Тогда
		РеквизитыОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ИначеЕсли Операция.ВидОперации = "Возврат" Тогда
		РеквизитыОперации.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли; 
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	
	ПодключаемоеОборудованиеУТВызовСервера.ЗаписатьВЖурналФискальныхОпераций(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = '%1 (%2) %3 от %4'"),
			НСтр("ru = 'Операция по Яндекс.Кассе'"),
			Данные.ХозяйственнаяОперация,
			Данные.Номер,
			Данные.Дата);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет отражена ли в учете транзакция сервиса Яндекс.Касса 
//
// Параметры:
//  ИдентификаторТранзакции  - Число - Уникальный номер транзакции в сервисе Яндекс.Денег.
// 	 
//  СсылкаИсключение - ДокументСсылка.ОперацииПоЯндексКассе - Необязательно. Ссылка на документ для которого проводить проверку не нужно
//
//	УчтеннаяТранзакция - ДокументСсылка.ОперацииПоЯндексКассе - Устанавливается и возвращается обратно. Найденный документ операции на основании которого учтена транзакция,
//																заполняется если транзакция учтена
//
// Возвращаемое значение:
//   Булево   - Истина - учтена, Ложь - не учтена
//
Функция ТранзакцияУчтена(ИдентификаторТранзакции, СсылкаИсключение = Неопределено, УчтеннаяТранзакция = Неопределено) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Если СсылкаИсключение = Неопределено Тогда 
		СсылкаИсключение = Документы.ОперацияПоЯндексКассе.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторТранзакции"	, ИдентификаторТранзакции);
	Запрос.УстановитьПараметр("СсылкаИсключение"		, СсылкаИсключение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПринятыеКУчетуОперацииПоЯндексКассе.Ссылка КАК Ссылка 
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ПринятыеКУчетуОперацииПоЯндексКассе
	               |ГДЕ
	               |	ПринятыеКУчетуОперацииПоЯндексКассе.ИдентификаторТранзакции = &ИдентификаторТранзакции
	               |	И ПринятыеКУчетуОперацииПоЯндексКассе.Ссылка <> &СсылкаИсключение";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		УчтеннаяТранзакция = Выборка.Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ТранзакцияУчтена()

// Возвращает информацию об оплатах пришедших из Яндекс.Кассы
//
// Параметры:
//  ИдентификаторПлатежа  - Строка - ИдентификаторПлатежа (Поле 22 "Код").
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса  - выборка вида:
//      * СуммаДокумента - Сумма - Сумма к зачислению на счет организации поступившего платежа
//      * СуммаКомиссии 	- Сумма - Сумма комиссии которую удерживает сервис Яндекс.Касса
//      * ДатаОплаты 	- Дата - Момент времени оплаты заказа в Яндекс.Деньгах.
//
Функция ОплатыПоУИП(УИП) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПлатежа"	, УИП);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОплатыПоЯндексКассе.СуммаДокумента КАК СуммаДокумента,
	               |	ОплатыПоЯндексКассе.СуммаКомиссии КАК СуммаКомиссии,
	               |	ОплатыПоЯндексКассе.ВалютаКомиссии КАК ВалютаКомиссии,
	               |	ОплатыПоЯндексКассе.Дата КАК Дата,
	               |	ОплатыПоЯндексКассе.ОснованиеПлатежа КАК ОснованиеПлатежа,
	               |	ОплатыПоЯндексКассе.Контрагент КАК Контрагент,
	               |	ОплатыПоЯндексКассе.Партнер КАК Партнер,
	               |	ОплатыПоЯндексКассе.ОбъектРасчетов КАК ОбъектРасчетов
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОплатыПоЯндексКассе
	               |ГДЕ
	               |	ОплатыПоЯндексКассе.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	               |	И НЕ ОплатыПоЯндексКассе.ПометкаУдаления
	               |	И ОплатыПоЯндексКассе.ИдентификаторПлатежа = &ИдентификаторПлатежа
	               |	И НЕ ОплатыПоЯндексКассе.ОснованиеПлатежа = НЕОПРЕДЕЛЕНО";
				   
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат;		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ОплатыПоУИП()

Функция ОснованиеПлатежаПоУИП(Организация, УИП) Экспорт 
	
	ПараметрыОтбора = ВзаиморасчетыСервер.ПараметрыОтбораПриВыбореДокументаРасчетовСКлиентами();
	ПараметрыОтбора.ЭтоУИП = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ВзаиморасчетыСервер.ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(Истина, ПараметрыОтбора);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтрокаПоиска", УИП);
	Запрос.УстановитьПараметр("ВыборОснованияПлатежа", Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		Если Не ИнтеграцияСЯндексКассой.ЭтоОснованиеПлатежаЧерезЯндексКассу(ТипЗнч(Выборка.Ссылка)) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеПоУИП = Новый Структура("ОснованиеПлатежа, ОбъектРасчетов, Партнер, Контрагент");
		ЗаполнитьЗначенияСвойств(ДанныеПоУИП, Выборка);
		
		ДанныеПоУИП.ОснованиеПлатежа = Выборка.Ссылка;
		ДанныеПоУИП.ОбъектРасчетов   = Выборка.ОбъектРасчетов;
		
		Возврат ДанныеПоУИП;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПровестиДиагностикуПриЗагрузке(РезультатДиагностики, ДокументОперацияСсылка, ДанныеОперации) Экспорт 
	
	РезультатДиагностики.КодПроблемы  = 0;
	
	РеквизитыДляПроведенияДиагностики = "ИдентификаторПлатежа, ИдентификаторПеревода, ИдентификаторВозврата, СуммаДокумента";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперацияСсылка, РеквизитыДляПроведенияДиагностики);
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Код1", 
		НСтр("ru = 'Идентификатор платежа %1 полученный из Яндекса отличается от сохраненного в документе %2.
	               |Для устранения этой проблемы следует пометить этот документ на удаление и повторно загрузить операцию.'")); 
	ШаблоныОшибок.Вставить("Код2", 
		НСтр("ru = 'Идентификатор операции перевода %1 полученный из Яндекса отличается от сохраненного в документе %2.
	               |Для устранения этой проблемы следует пометить этот документ на удаление и повторно загрузить операцию.'")); 
	ШаблоныОшибок.Вставить("Код3", 
		НСтр("ru = 'Идентификатор операции возврата %1 полученный из Яндекса отличается от сохраненного в документе %2.
	               |Для устранения этой проблемы следует пометить этот документ на удаление и повторно загрузить операцию.'")); 
	ШаблоныОшибок.Вставить("Код4", 
		НСтр("ru = 'Сумма операции %1 полученная из Яндекса отличается от суммы сохраненной в документе %2.
	               |Для устранения этой проблемы следует пометить этот документ на удаление и повторно загрузить операцию.'")); 
	
	Если РеквизитыДокумента.ИдентификаторПлатежа <> ДанныеОперации.ИдентификаторПлатежа Тогда 
		
		РезультатДиагностики.КодПроблемы         = 1;
		РезультатДиагностики.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код1,
			ДанныеОперации.ИдентификаторПлатежа, РеквизитыДокумента.ИдентификаторПлатежа);
		
	ИначеЕсли ДанныеОперации.Свойство("ИдентификаторПеревода") 
			И РеквизитыДокумента.ИдентификаторПеревода <> ДанныеОперации.ИдентификаторПеревода Тогда
		
		РезультатДиагностики.КодПроблемы         = 2;
		РезультатДиагностики.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код2,
			ДанныеОперации.ИдентификаторПеревода, РеквизитыДокумента.ИдентификаторПеревода);
		
	ИначеЕсли ДанныеОперации.Свойство("ИдентификаторВозврата") 
			И РеквизитыДокумента.ИдентификаторВозврата <> ДанныеОперации.ИдентификаторВозврата Тогда
		
		РезультатДиагностики.КодПроблемы         = 3;
		РезультатДиагностики.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код3,
			ДанныеОперации.ИдентификаторВозврата, РеквизитыДокумента.ИдентификаторВозврата);
		
	ИначеЕсли РеквизитыДокумента.СуммаДокумента <> ДанныеОперации.СуммаДокумента Тогда
		
		РезультатДиагностики.КодПроблемы         = 4;
		РезультатДиагностики.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код4,
			ДанныеОперации.СуммаДокумента, РеквизитыДокумента.СуммаДокумента);
		
	КонецЕсли;
	
	РезультатДиагностики.ЕстьПроблемы = Не РезультатДиагностики.КодПроблемы = 0;
	Если Не РезультатДиагностики.ЕстьПроблемы Тогда 
		РезультатДиагностики.ИнформацияОПроблеме = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиДиагностикуПередЗаписью(ТекущийОбъект, ДокументОперацияСсылка) Экспорт 
	
	ТекущийОбъект.КодПроблемы  = 0;
	
	РеквизитыДляПроведенияДиагностики = "ИдентификаторПлатежа, ИдентификаторПеревода, ИдентификаторВозврата, СуммаДокумента";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОперацияСсылка, РеквизитыДляПроведенияДиагностики);
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Код5",
		НСтр("ru = 'Не найден документ основание по идентификатору платежа: %1.
	               |Для устранения этой проблемы следует указать документ основание платежа вручную.'")); 
	ШаблоныОшибок.Вставить("Код6",
		НСтр("ru = 'Не найден документ оплаты через Яндекс.Кассу по идентификатору платежа: %1.
	               |Для устранения этой проблемы следует указать документ основание платежа вручную.'")); 
	

	Если ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		И Не ЗначениеЗаполнено(ТекущийОбъект.ОснованиеПлатежа) 
		И ОснованиеПлатежаПоУИП(ТекущийОбъект.Организация, ТекущийОбъект.ИдентификаторПлатежа) = Неопределено Тогда
		 
		ТекущийОбъект.КодПроблемы         = 5;
		ТекущийОбъект.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код5, ТекущийОбъект.ИдентификаторПлатежа);
	ИначеЕсли ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		И Не ЗначениеЗаполнено(ТекущийОбъект.ОснованиеПлатежа) 
		И ОснованиеПлатежаПоУИП(ТекущийОбъект.Организация, ТекущийОбъект.ИдентификаторПлатежа) = Неопределено Тогда
		ТекущийОбъект.КодПроблемы         = 6;
		ТекущийОбъект.ИнформацияОПроблеме = СтрШаблон(ШаблоныОшибок.Код6, ТекущийОбъект.ИдентификаторПлатежа);
	КонецЕсли;
	
	ТекущийОбъект.ЕстьПроблемы = Не ТекущийОбъект.КодПроблемы = 0;
	Если Не ТекущийОбъект.ЕстьПроблемы Тогда 
		ТекущийОбъект.ИнформацияОПроблеме = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьНДС(ТекущийОбъект) Экспорт 
	
	ТекущийОбъект.СуммаНДС18 = 0;
	ТекущийОбъект.СуммаДокументаСНДС18 = 0;
	ТекущийОбъект.СуммаНДС10 = 0;
	ТекущийОбъект.СуммаДокументаСНДС10 = 0;
	
	ОбъектРасчета = ОбъектРасчетаДляРасчетаНДС(ТекущийОбъект);
	
	Если Не ОбъектРасчета = Неопределено Тогда 
		РасшифровкаПлатежаПоНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущийОбъект.Дата,
			ТекущийОбъект.Валюта, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектРасчета), Истина);
		
		Для каждого	СтрокаРасшифровки из РасшифровкаПлатежаПоНДС Цикл 
			Если СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
				
				ТекущийОбъект.СуммаНДС18 = СтрокаРасшифровки.СуммаНДС * (ТекущийОбъект.СуммаДокумента / СтрокаРасшифровки.СуммаДокумента);
				ТекущийОбъект.СуммаДокументаСНДС18 = СтрокаРасшифровки.СуммаСНДС * (ТекущийОбъект.СуммаДокумента / СтрокаРасшифровки.СуммаДокумента);
				
			ИначеЕсли СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				
				ТекущийОбъект.СуммаНДС10 = СтрокаРасшифровки.СуммаНДС * (ТекущийОбъект.СуммаДокумента / СтрокаРасшифровки.СуммаДокумента);
				ТекущийОбъект.СуммаДокументаСНДС10 = СтрокаРасшифровки.СуммаСНДС * (ТекущийОбъект.СуммаДокумента / СтрокаРасшифровки.СуммаДокумента);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВычислитьСуммуКомиссииПоСуммеВозврата(ТекущийОбъект, ОплатыПоУИП) Экспорт 
	
	ПроцентКомиссии = 100 * ОплатыПоУИП.СуммаКомиссии / ОплатыПоУИП.СуммаДокумента; 
	ТекущийОбъект.СуммаКомиссии = ТекущийОбъект.СуммаДокумента * (ПроцентКомиссии / 100);
	
КонецПроцедуры

Функция ОбъектРасчетаДляРасчетаНДС(Объект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованиеПлатежа", Объект.ОснованиеПлатежа);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЗаказКлиента.Ссылка КАК ОбъектРасчета
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка = &ОснованиеПлатежа
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СчетНаОплатуКлиенту.Ссылка
	               |ИЗ
	               |	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	               |ГДЕ
	               |	СчетНаОплатуКлиенту.Ссылка = &ОснованиеПлатежа
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫРАЗИТЬ(ОперацияПоЯндексКассе.ОснованиеПлатежа КАК Документ.ЗаказКлиента).Ссылка
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	               |ГДЕ
	               |	ОперацияПоЯндексКассе.ОснованиеПлатежа ССЫЛКА Документ.ЗаказКлиента
	               |	И ОперацияПоЯндексКассе.Ссылка = &ОснованиеПлатежа
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫРАЗИТЬ(ОперацияПоЯндексКассе.ОснованиеПлатежа КАК Документ.СчетНаОплатуКлиенту).Ссылка
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	               |ГДЕ
	               |	ОперацияПоЯндексКассе.ОснованиеПлатежа ССЫЛКА Документ.СчетНаОплатуКлиенту
	               |	И ОперацияПоЯндексКассе.Ссылка = &ОснованиеПлатежа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ОбъектРасчета;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоНеУчтеннаяТранзакция(ДанныеОперации, СчетчикДокументов)
	
	УчтеннаяТранзакция = Неопределено;
	Если ТранзакцияУчтена(ДанныеОперации.ИдентификаторТранзакции,,УчтеннаяТранзакция) Тогда 
		
		РезультатДиагностики = Новый Структура("ЕстьПроблемы, КодПроблемы, ИнформацияОПроблеме");
		Документы.ОперацияПоЯндексКассе.ПровестиДиагностикуПриЗагрузке(
			РезультатДиагностики, 
			УчтеннаяТранзакция, 
			ДанныеОперации);
		
		Если РезультатДиагностики.ЕстьПроблемы Тогда 
			ДокументОбъект = УчтеннаяТранзакция.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РезультатДиагностики);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			СчетчикДокументов = СчетчикДокументов + 1;
		КонецЕсли;
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СтруктураРеквизитыФискальнойОперацииКассовогоУзла() 
	
	ДополнительныеПараметры = Новый Структура;
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Дата");
	Реквизиты.Вставить("ДокументОснование");
	Реквизиты.Вставить("Организация");
	Реквизиты.Вставить("ТорговыйОбъект");
	Реквизиты.Вставить("Устройство");
	
	Реквизиты.Вставить("ТипОперации");
	Реквизиты.Вставить("ТипРасчета");
	
	Реквизиты.Вставить("НомерЧекаККМ");
	Реквизиты.Вставить("НомерСмены");
	Реквизиты.Вставить("ВариантОтправкиЭлектронногоЧека");
	Реквизиты.Вставить("КонтактныеДанныеЭлектронногоЧека");
	
	Реквизиты.Вставить("Сумма");
	Реквизиты.Вставить("СуммаОплатыНаличные");
	Реквизиты.Вставить("СуммаОплатыПлатежнаяКарта");
	Реквизиты.Вставить("СуммаКредит");
	Реквизиты.Вставить("СуммаПредоплаты");
	Реквизиты.Вставить("СуммаВзаимозачет");
	
	Реквизиты.Вставить("Данные");
	
	Реквизиты.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПреобразоватьСтрокуВДату(СтрокаДанных)
	
	ДатаЧека = ТекущаяДата();
	
	Если ТипЗнч(СтрокаДанных) = Тип("Строка") Тогда // Формат: dd.MM.yyyy HH:mm:ss
		Попытка
			
			СтрокаДаты = Лев(СтрокаДанных, 10);
			СтрокаВремени = Прав(СтрокаДанных, 8);
			
			МассивДаты 		= СтрРазделить(СтрокаДаты, ".", Ложь);
			МассивВремени 	= СтрРазделить(СтрокаВремени, ":", Ложь);
			
			Если МассивДаты.Количество() >= 3
				И МассивВремени.Количество() >= 3 Тогда
				
				Для каждого ЭлементКоллекции Из МассивДаты Цикл
					ЭлементКоллекции = Число(СокрЛП(ЭлементКоллекции));
				КонецЦикла;
				Для каждого ЭлементКоллекции Из МассивВремени Цикл
					ЭлементКоллекции = Число(СокрЛП(ЭлементКоллекции));
				КонецЦикла;
				
				ДатаЧека = Дата(МассивДаты[2], МассивДаты[1], МассивДаты[0], МассивВремени[0], МассивВремени[1], МассивВремени[2]);	
			КонецЕсли; 
			
		Исключение
		КонецПопытки;
	ИначеЕсли ТипЗнч(СтрокаДанных) = Тип("Дата") Тогда	
		ДатаЧека = СтрокаДанных;
	КонецЕсли; 

	Возврат ДатаЧека;
	
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполнение его параметров
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

	// Текст запроса, формирующего таблицы движений
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаОперации(Запрос, ТекстыЗапроса); 
	ТекстЗапросаТаблицаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполнение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос,
		ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.Подразделение КАК БанковскийСчетПодразделение,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.НастройкаЯндексКассы КАК НастройкаЯндексКассы,
	|	ДанныеДокумента.Эквайер КАК Эквайер,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                                Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Организация",                           Реквизиты.Организация);
	Запрос.УстановитьПараметр("БанковскийСчет",                        Реквизиты.БанковскийСчет);
	Запрос.УстановитьПараметр("БанковскийСчетПодразделение",           Реквизиты.БанковскийСчетПодразделение);
	Запрос.УстановитьПараметр("Подразделение",                         Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("НастройкаЯндексКассы",                  Реквизиты.НастройкаЯндексКассы);
	Запрос.УстановитьПараметр("Эквайер",                               Реквизиты.Эквайер);
	Запрос.УстановитьПараметр("СтатьяРасходов",                        Реквизиты.СтатьяРасходов);
	Запрос.УстановитьПараметр("АналитикаРасходов",                     Реквизиты.АналитикаРасходов);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                 Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств",         Реквизиты.СтатьяДвиженияДенежныхСредств);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",        Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",            Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
	Запрос.УстановитьПараметр("ИдентификаторСтроки",                   Строка(ДокументСсылка.УникальныйИдентификатор()));
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("ВалютаУправленческогоУчета")
		И Запрос.Параметры.Свойство("ВалютаРегламентированногоУчета")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуЗаявки") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Запрос.Параметры.Валюта,
		Неопределено,
		Запрос.Параметры.Период);
		
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",        ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",    ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",    Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",   Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуЗаявки", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);

КонецПроцедуры

#Область ТекстыЗапроса

#Область ВременныеТаблицы

Функция ТекстЗапросаВременнаяТаблицаОбъектовРасчета(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ТаблицаОбъектовРасчетов";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА Таблица.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА Таблица.ОбъектРасчетов
	|		ИНАЧЕ ЕСТЬNULL(Таблица.ОбъектРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА Таблица.ОбъектРасчетов.Организация.ГоловнаяОрганизация = &Организация
	|			ТОГДА Таблица.ОбъектРасчетов.Организация
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Организация,
	|	ЕСТЬNULL(Таблица.ОбъектРасчетов.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ТаблицаОбъектовРасчетовОплаты
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПартнеровИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПоАналитикам = Новый Запрос;
	
	ЗапросПоАналитикам.Текст = ТекстЗапросаВременнаяТаблицаОбъектовРасчета(ЗапросПоАналитикам, Новый СписокЗначений);
	ЗапросПоАналитикам.Текст = ЗапросПоАналитикам.Текст + "
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	ЗапросПоАналитикам.Текст = ЗапросПоАналитикам.Текст + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектовРасчетов.Организация КАК Организация,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Партнер КАК Партнер,
	|	ТаблицаОбъектовРасчетов.Договор КАК Договор,
	|	ТаблицаОбъектовРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОбъектовРасчетовОплаты КАК ТаблицаОбъектовРасчетов
	|		ПО Таблица.ОбъектРасчетов = ТаблицаОбъектовРасчетов.ОбъектРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО (ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация)
	|			И Таблица.Контрагент = Аналитика.Контрагент
	|			И Таблица.Партнер = Аналитика.Партнер
	|			И (ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор)
	|			И (ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности)
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL ";
	ЗапросПоАналитикам.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросПоАналитикам.УстановитьПараметр("Организация", Запрос.Параметры.Организация);
	
	Выборка = ЗапросПоАналитикам.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПартнеровИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаОперации(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ТаблицаОперации";
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОбъектовРасчетов", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаОбъектовРасчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ТаблицаОперации.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаОперации.Партнер КАК Партнер,
		|	ТаблицаОперации.Контрагент КАК Контрагент,
		|	ТаблицаОбъектовРасчетовОплаты.Договор КАК Договор,
		|	ТаблицаОбъектовРасчетовОплаты.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблицаОперации.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе
		|				ТОГДА ТаблицаОперации.ОснованиеПлатежа.ОснованиеПлатежа
		|			ИНАЧЕ ТаблицаОперации.ОснованиеПлатежа
		|		КОНЕЦ КАК Документ.СчетНаОплатуКлиенту) КАК СчетНаОплату,
		|	ВЫБОР КОГДА ТаблицаОперации.ОснованиеПлатежа ССЫЛКА Документ.ОперацияПоЯндексКассе ТОГДА
		|		ТаблицаОперации.ОснованиеПлатежа.ОснованиеПлатежа
		|	ИНАЧЕ
		|		ТаблицаОперации.ОснованиеПлатежа 
		|	КОНЕЦ КАК ОснованиеПлатежа,
		|
		|	ТаблицаОперации.СуммаСчета КАК СуммаСчета,
		|	ТаблицаОперации.ВалютаСчета КАК ВалютаСчета,
		|
		|	ТаблицаОперации.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаОперации.Валюта КАК ВалютаОперации,
		|
		|	ТаблицаОперации.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаОперации.ВалютаКомиссии КАК ВалютаКомиссии,
		|	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, ТаблицаОперации.СуммаКомиссии) КАК СуммаКомиссииРегл,
		|
		|	ТаблицаОперации.СуммаНДС18 КАК СуммаНДС18,
		|	ТаблицаОперации.СуммаНДС10 КАК СуммаНДС10,
		|
		|	ТаблицаОперации.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ТаблицаОперации.Валюта КАК ВалютаВзаиморасчетов,
		|
		|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОперации.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаОперации.АналитикаРасходов КАК АналитикаРасходов,
		|
		|	&ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ПОМЕСТИТЬ ТаблицаОперации
		|ИЗ
		|	Документ.ОперацияПоЯндексКассе КАК ТаблицаОперации
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаОбъектовРасчетовОплаты КАК ТаблицаОбъектовРасчетовОплаты
		|	ПО
		|		ТаблицаОперации.ОбъектРасчетов = ТаблицаОбъектовРасчетовОплаты.ОбъектРасчетов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|	ПО
		|		ТаблицаОбъектовРасчетовОплаты.Организация = Аналитика.Организация
		|		И ТаблицаОперации.Контрагент = Аналитика.Контрагент
		|		И ТаблицаОперации.Партнер = Аналитика.Партнер
		|		И ТаблицаОбъектовРасчетовОплаты.Договор = Аналитика.Договор
		|		И ТаблицаОбъектовРасчетовОплаты.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
		|	ПО
		|		СуммыДокументовВВалютеРегл.Регистратор = ТаблицаОперации.Ссылка
		|ГДЕ
		|	ТаблицаОперации.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетовПоНДС(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ТаблицаРасчетовПоНДС";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ТаблицаОперации.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаОперации.Партнер КАК Партнер,
		|	ТаблицаОперации.Контрагент КАК Контрагент,
		|	ТаблицаОперации.Договор КАК Договор,
		|	ТаблицаОперации.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОперации.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаОперации.ОснованиеПлатежа КАК ОснованиеПлатежа,
		|
		|	ТаблицаОперации.СуммаСчета КАК СуммаСчета,
		|	ТаблицаОперации.ВалютаСчета КАК ВалютаСчета,
		|	ТаблицаОперации.СуммаДокумента КАК СуммаДокумента,
		|	ТаблицаОперации.ВалютаОперации КАК ВалютаОперации,
		|	ТаблицаОперации.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаОперации.ВалютаКомиссии КАК ВалютаКомиссии,
		|
		|	Значение(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,
		|	0 КАК СуммаНДС,
		|
		|	ТаблицаОперации.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
		|	ТаблицаОперации.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|
		|	ТаблицаОперации.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|
		|	ТаблицаОперации.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ПОМЕСТИТЬ ТаблицаРасчетовПоНДС
		|ИЗ
		|	ТаблицаОперации КАК ТаблицаОперации
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ТаблицаОперации.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаОперации.Партнер КАК Партнер,
		|	ТаблицаОперации.Контрагент КАК Контрагент,
		|	ТаблицаОперации.Договор КАК Договор,
		|	ТаблицаОперации.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОперации.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаОперации.ОснованиеПлатежа КАК ОснованиеПлатежа,
		|
		|	ТаблицаОперации.СуммаСчета КАК СуммаСчета,
		|	ТаблицаОперации.ВалютаСчета КАК ВалютаСчета,
		|	0 КАК СуммаДокумента,
		|	ТаблицаОперации.ВалютаОперации КАК ВалютаОперации,
		|	ТаблицаОперации.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаОперации.ВалютаКомиссии КАК ВалютаКомиссии,
		|
		|	Значение(Перечисление.СтавкиНДС.НДС18) КАК СтавкаНДС,
		|	ТаблицаОперации.СуммаНДС18 КАК СуммаНДС,
		|
		|	0  КАК СуммаВзаиморасчетов,
		|	ТаблицаОперации.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|
		|	ТаблицаОперации.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|
		|	ТаблицаОперации.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ИЗ
		|	ТаблицаОперации КАК ТаблицаОперации
		|ГДЕ
		|	ТаблицаОперации.СуммаНДС18 <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ТаблицаОперации.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ТаблицаОперации.Партнер КАК Партнер,
		|	ТаблицаОперации.Контрагент КАК Контрагент,
		|	ТаблицаОперации.Договор КАК Договор,
		|	ТаблицаОперации.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаОперации.СчетНаОплату КАК СчетНаОплату,
		|	ТаблицаОперации.ОснованиеПлатежа КАК ОснованиеПлатежа,
		|
		|	ТаблицаОперации.СуммаСчета КАК СуммаСчета,
		|	ТаблицаОперации.ВалютаСчета КАК ВалютаСчета,
		|	0 КАК СуммаДокумента,
		|	ТаблицаОперации.ВалютаОперации КАК ВалютаОперации,
		|	ТаблицаОперации.СуммаКомиссии КАК СуммаКомиссии,
		|	ТаблицаОперации.ВалютаКомиссии КАК ВалютаКомиссии,
		|
		|	Значение(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
		|	ТаблицаОперации.СуммаНДС10 КАК СуммаНДС,
		|
		|	0  КАК СуммаВзаиморасчетов,
		|	ТаблицаОперации.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|
		|	ТаблицаОперации.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|
		|	ТаблицаОперации.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ИЗ
		|	ТаблицаОперации КАК ТаблицаОперации
		|ГДЕ
		|	ТаблицаОперации.СуммаНДС10 <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаТаблицаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДенежныеСредстваДоходыРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Значение(Перечисление.ХозяйственныеОперации.КомиссияПоЭквайрингу) 		КАК ХозяйственнаяОперация,
	|	&Организация 															КАК Организация,
	|	&БанковскийСчетПодразделение 											КАК Подразделение,
	|	&Подразделение                											КАК ПодразделениеДоходовРасходов,
	|
	|	НЕОПРЕДЕЛЕНО 															КАК ДенежныеСредства,
	|	Значение(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера) 	КАК ТипДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО 															КАК СтатьяДвиженияДенежныхСредств,
	|	&Валюта 																КАК Валюта,
	|
	|	&СтатьяРасходов 														КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО 															КАК АналитикаДоходов,
	|	&АналитикаРасходов 														КАК АналитикаРасходов,
	|
	|	ВЫРАЗИТЬ(ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ТаблицаОперации.СуммаКомиссии 											КАК СуммаВВалюте,
	|
	|	НЕОПРЕДЕЛЕНО 															КАК ИсточникГФУДенежныхСредств,
	|	&СтатьяРасходов 														КАК ИсточникГФУДоходовРасходов
	|
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперации
	|
	|ГДЕ
	|	ТаблицаОперации.СуммаКомиссии <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваКонтрагент";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаРасчетовПоНДС", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаРасчетовПоНДС(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДенежныеСредства КАК ДенежныеСредства,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера) КАК ТипДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	
	|	СУММА(ДанныеДокумента.СуммаОплаты) КАК СуммаОплаты,
	|	СУММА(ДанныеДокумента.СуммаОплатыРегл) КАК СуммаОплатыРегл,
	|	СУММА(ДанныеДокумента.СуммаОплатыВВалютеПлатежа) КАК СуммаОплатыВВалютеПлатежа,
	|
	|	СУММА(ДанныеДокумента.СуммаПостоплаты) КАК СуммаПостоплаты,
	|	СУММА(ДанныеДокумента.СуммаПостоплатыРегл) КАК СуммаПостоплатыРегл,
	|	СУММА(ДанныеДокумента.СуммаПостоплатыВВалютеПлатежа) КАК СуммаПостоплатыВВалютеПлатежа,
	|
	|	СУММА(ДанныеДокумента.СуммаПредоплаты) КАК СуммаПредоплаты,
	|	СУММА(ДанныеДокумента.СуммаПредоплатыРегл) КАК СуммаПредоплатыРегл,
	|	СУММА(ДанныеДокумента.СуммаПредоплатыВВалютеПлатежа) КАК СуммаПредоплатыВВалютеПлатежа,
	|
	|	СУММА(ДанныеДокумента.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ДанныеДокумента.СуммаНДСРегл) КАК СуммаНДСРегл,
	|	СУММА(ДанныеДокумента.СуммаНДСВВалютеПлатежа) КАК СуммаНДСВВалютеПлатежа,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|
	|	СУММА(ДанныеДокумента.СуммаОплатыВВалютеВзаиморасчетов) КАК СуммаОплатыВВалютеВзаиморасчетов,
	|	СУММА(ДанныеДокумента.СуммаПостоплатыВВалютеВзаиморасчетов) КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|	СУММА(ДанныеДокумента.СуммаПредоплатыВВалютеВзаиморасчетов) КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	ДанныеДокумента.ИсточникГФУДенежныхСредств КАК ИсточникГФУДенежныхСредств,
	|	ДанныеДокумента.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	ДанныеДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ОтложенноеПроведение
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Период КАК Период,
	|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		&Организация КАК Организация,
	|		&Подразделение КАК Подразделение,
	|		&БанковскийСчет КАК ДенежныеСредства,
	|		&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		&Валюта КАК ВалютаПлатежа,
	|		ТаблицаРасчетовПоНДС.Партнер КАК Партнер,
	|		ТаблицаРасчетовПоНДС.Контрагент КАК Контрагент,
	|		ВЫБОР
	|			КОГДА ТаблицаРасчетовПоНДС.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ТаблицаРасчетовПоНДС.ОбъектРасчетов
	|			ИНАЧЕ ТаблицаРасчетовПоНДС.ОбъектРасчетов.Договор
	|		КОНЕЦ КАК Договор,
	|		ТаблицаРасчетовПоНДС.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ВЫРАЗИТЬ(ТаблицаРасчетовПоНДС.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаОплаты,
	|		ВЫРАЗИТЬ(ТаблицаРасчетовПоНДС.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаОплатыРегл,
	|		ТаблицаРасчетовПоНДС.СуммаДокумента КАК СуммаОплатыВВалютеПлатежа,
	|		0 КАК СуммаПостоплаты,
	|		0 КАК СуммаПостоплатыРегл,
	|		0 КАК СуммаПостоплатыВВалютеПлатежа,
	|		0 КАК СуммаПредоплаты,
	|		0 КАК СуммаПредоплатыРегл,
	|		0 КАК СуммаПредоплатыВВалютеПлатежа,
	|		0 КАК СуммаНДС,
	|		0 КАК СуммаНДСРегл,
	|		0 КАК СуммаНДСВВалютеПлатежа,
	|		ТаблицаРасчетовПоНДС.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		ТаблицаРасчетовПоНДС.СуммаВзаиморасчетов КАК СуммаОплатыВВалютеВзаиморасчетов,
	|		0 КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|		0 КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|		НЕОПРЕДЕЛЕНО КАК ИсточникГФУДенежныхСредств,
	|		ТаблицаРасчетовПоНДС.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|		НЕОПРЕДЕЛЕНО КАК СтавкаНДС
	|	ИЗ
	|		ТаблицаРасчетовПоНДС КАК ТаблицаРасчетовПоНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		&Период КАК Период,
	|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		&Организация КАК Организация,
	|		&Подразделение КАК Подразделение,
	|		&БанковскийСчет КАК ДенежныеСредства,
	|		&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|		&Валюта КАК ВалютаПлатежа,
	|		ТаблицаРасчетовПоНДС.Партнер КАК Партнер,
	|		ТаблицаРасчетовПоНДС.Контрагент КАК Контрагент,
	|		ВЫБОР
	|			КОГДА ТаблицаРасчетовПоНДС.ОбъектРасчетов ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ТаблицаРасчетовПоНДС.ОбъектРасчетов
	|			ИНАЧЕ ТаблицаРасчетовПоНДС.ОбъектРасчетов.Договор
	|		КОНЕЦ КАК Договор,
	|		ТаблицаРасчетовПоНДС.ОбъектРасчетов КАК ОбъектРасчетов,
	|		0 КАК СуммаОплаты,
	|		0 КАК СуммаОплатыРегл,
	|		0 КАК СуммаОплатыВВалютеПлатежа,
	|		0 КАК СуммаПостоплаты,
	|		0 КАК СуммаПостоплатыРегл,
	|		0 КАК СуммаПостоплатыВВалютеПлатежа,
	|		0 КАК СуммаПредоплаты,
	|		0 КАК СуммаПредоплатыРегл,
	|		0 КАК СуммаПредоплатыВВалютеПлатежа,
	|		ВЫРАЗИТЬ(ТаблицаРасчетовПоНДС.СуммаНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|		ВЫРАЗИТЬ(ТаблицаРасчетовПоНДС.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
	|		ТаблицаРасчетовПоНДС.СуммаНДС КАК СуммаНДСВВалютеПлатежа,
	|		ТаблицаРасчетовПоНДС.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		0 КАК СуммаОплатыВВалютеВзаиморасчетов,
	|		0 КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|		0 КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|		НЕОПРЕДЕЛЕНО КАК ИсточникГФУДенежныхСредств,
	|		ТаблицаРасчетовПоНДС.ОбъектРасчетов КАК ИсточникГФУРасчетов,
	|		ТаблицаРасчетовПоНДС.СтавкаНДС КАК СтавкаНДС
	|	ИЗ
	|		ТаблицаРасчетовПоНДС КАК ТаблицаРасчетовПоНДС
	|	ГДЕ
	|		ТаблицаРасчетовПоНДС.СуммаНДС <> 0) КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ДенежныеСредства,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ВалютаПлатежа,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.ОбъектРасчетов,
	|	ДанныеДокумента.ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ИсточникГФУДенежныхСредств,
	|	ДанныеДокумента.ИсточникГФУРасчетов,
	|	ДанныеДокумента.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства,
	|	ДанныеРегистра.ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа,
	|
	|	ДанныеРегистра.Партнер,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.РасчетныйДокумент,
	|
	|	ДанныеРегистра.СуммаОплаты,
	|	ДанныеРегистра.СуммаОплатыРегл,
	|	ДанныеРегистра.СуммаОплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаПостоплаты,
	|	ДанныеРегистра.СуммаПостоплатыРегл,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаПредоплаты,
	|	ДанныеРегистра.СуммаПредоплатыРегл,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаНДС,
	|	ДанныеРегистра.СуммаНДСРегл,
	|	ДанныеРегистра.СуммаНДСВВалютеПлатежа,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов,
	|
	|	ДанныеРегистра.СуммаОплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ИсточникГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУРасчетов,
	|	ДанныеРегистра.СтавкаНДС,
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Ссылка
	|	И ДанныеРегистра.ОтложенноеПроведение";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДенежныеСредстваВПути(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваВПути";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ  //Суммы оплат
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                               КАК ВидДвижения,
	|	&Период                                                                              КАК Период,
	|	
	|	&Организация                                                                         КАК Организация,
	|	&БанковскийСчет                                                                      КАК Получатель,
	|	НЕОПРЕДЕЛЕНО                                                                         КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)   КАК ВидПереводаДенежныхСредств,
	|	&Эквайер                                                                             КАК Контрагент,
	|	&Валюта                                                                              КАК Валюта,
	|	
	|	ТаблицаОперацииОплаты.СуммаДокумента                                                               КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаОперацииОплаты.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаОперацииОплаты.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	
	|	&СтатьяДвиженияДенежныхСредств                                                       КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперацииОплаты
	|	
	|ГДЕ
	| 	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ  //Комиссия с оплат
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                               КАК ВидДвижения,
	|	&Период                                                                              КАК Период,
	|	
	|	&Организация                                                                         КАК Организация,
	|	&БанковскийСчет                                                                      КАК Получатель,
	|	НЕОПРЕДЕЛЕНО                                                                         КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)   КАК ВидПереводаДенежныхСредств,
	|	&Эквайер                                                                             КАК Контрагент,
	|	&Валюта                                                                              КАК Валюта,
	|	
	|	ТаблицаОперацииОплаты.СуммаКомиссии                                                               КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаОперацииОплаты.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаОперацииОплаты.СуммаКомиссии * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	
	|	НЕОПРЕДЕЛЕНО                                                                         КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперацииОплаты
	|	
	|ГДЕ
	| 	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|   И ТаблицаОперацииОплаты.СуммаКомиссии <> 0  
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //Суммы возвратов
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                                               КАК ВидДвижения,
	|	&Период                                                                              КАК Период,
	|	
	|	&Организация                                                                         КАК Организация,
	|	&БанковскийСчет                                                                      КАК Получатель,
	|	НЕОПРЕДЕЛЕНО                                                                         КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)   КАК ВидПереводаДенежныхСредств,
	|	&Эквайер                                                                             КАК Контрагент,
	|	&Валюта                                                                              КАК Валюта,
	|	
	|	ТаблицаОперацииВозврата.СуммаДокумента                                                               КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаОперацииВозврата.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаОперацииВозврата.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	
	|	&СтатьяДвиженияДенежныхСредств                                                      КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперацииВозврата
	|	
	|ГДЕ
	| 	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ  //Отмененная комиссия
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                                               КАК ВидДвижения,
	|	&Период                                                                              КАК Период,
	|	
	|	&Организация                                                                         КАК Организация,
	|	&БанковскийСчет                                                                      КАК Получатель,
	|	НЕОПРЕДЕЛЕНО                                                                         КАК Отправитель,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПереводовДенежныхСредств.ПоступлениеОтБанкаПоЭквайрингу)   КАК ВидПереводаДенежныхСредств,
	|	&Эквайер                                                                             КАК Контрагент,
	|	&Валюта                                                                              КАК Валюта,
	|	
	|	ТаблицаОперацииВозврата.СуммаКомиссии	                                                            КАК Сумма,
	|	ВЫРАЗИТЬ(ТаблицаОперацииВозврата.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаОперацииВозврата.СуммаКомиссии * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	
	|	НЕОПРЕДЕЛЕНО                                                                         КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперацииВозврата
	|	
	|ГДЕ
	| 	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|   И ТаблицаОперацииВозврата.СуммаКомиссии <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                                    КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                     КАК ВидДвижения,
	|	&Организация                                               КАК Организация,
	|	ТаблицаОперации.СтатьяРасходов                             КАК СтатьяРасходов,
	|	ТаблицаОперации.АналитикаРасходов                          КАК АналитикаРасходов,
	|	&Подразделение                                             КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                                               КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                               КАК ВидДеятельностиНДС,
	|	
	|	// Рассчитаем сумму в валюте управленческого учета.
	|	ВЫРАЗИТЬ(ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК СуммаБезНДСУпр,
	|
	|	ТаблицаОперации.СуммаКомиссииРегл КАК СуммаСНДСРегл,
	|	ТаблицаОперации.СуммаКомиссииРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперации
	|	
	|ГДЕ
	|	ТаблицаОперации.СуммаКомиссии <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ЗаказКлиента,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплаты,
	|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК КОплате,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ТаблицаРасшифровкаПлатежа.СуммаДокумента * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	&Организация КАК Организация
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ЗаказКлиента,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплаты,
	|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	|	
	|	- ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
	|	- ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК КОплате,
	|	ВЫРАЗИТЬ(-ТаблицаРасшифровкаПлатежа.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(-ТаблицаРасшифровкаПлатежа.СуммаДокумента * &КоэффициентПересчетаВВалютуУПР КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	&Организация КАК Организация
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы(Ложь);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ТаблицаОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	"""" КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	ТаблицаОперации.СуммаКомиссии КАК СуммаБезНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР КОГДА ТаблицаОперации.ВалютаКомиссии = &ВалютаРегламентированногоУчета
	|		ТОГДА ТаблицаОперации.СуммаКомиссии
	|		ИНАЧЕ ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуРегл
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	0 КАК СуммаНДСРегл,
	|	ВЫБОР КОГДА ТаблицаОперации.ВалютаКомиссии = &ВалютаУправленческогоУчета
	|		ТОГДА ТаблицаОперации.СуммаКомиссии
	|		ИНАЧЕ ТаблицаОперации.СуммаКомиссии * &КоэффициентПересчетаВВалютуУпр
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|	0 КАК СуммаНДСУпр,
	|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
	|
	|ИЗ
	|	ТаблицаОперации КАК ТаблицаОперации
	|
	|ГДЕ
	|	ТаблицаОперации.СуммаКомиссии <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли




