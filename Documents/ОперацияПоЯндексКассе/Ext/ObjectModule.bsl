#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения); 
	
	Если ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДанныеОперации") Тогда
		
		ЗаполнитьПоДаннымЯндексКассы(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда 
		
		ЗаполнитьПоОперацииПоЯндексКассе(ДанныеЗаполнения, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьСписокЗависимыхЗаказов();
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда 
		Документы.ОперацияПоЯндексКассе.ПровестиДиагностикуПередЗаписью(ЭтотОбъект, Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если СуммаКомиссии = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТипОперацииВозврата");
	ИначеЕсли  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособОплаты");
	КонецЕсли;	
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Контроль перед проведением
	ВыполнитьКонтрольЗаполненияПередПроведением(Отказ);
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ОперацияПоЯндексКассе.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВПути(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по прочим расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с клиентами.
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваКонтрагент(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДенежныеСредстваДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);

	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

Процедура ВыполнитьКонтрольЗаполненияПередПроведением(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда 
		
		// Сумма возврата не больше суммы оплаты
		СуммаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПлатежа, "СуммаДокумента");
		Если СуммаДокументаОснования < СуммаДокумента Тогда
			
			ТекстСообщения = НСтр("ru = 'Сумма возврата не должна превышать сумму поступившей оплаты'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если Не Организация.Пустая() Тогда 
		НастройкаЯндексКассы = Справочники.НастройкиЯндексКассы.НайтиНастройку(Новый Структура("Организация", Организация));
	КонецЕсли;
	
	Если Не НастройкаЯндексКассы.Пустая() Тогда 
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЯндексКассы, "БанковскийСчет");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643"); // Рубль
		Валюта         = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ВалютаРубль);
		ВалютаКомиссии = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ВалютаРубль);
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымЯндексКассы(ДанныеЗаполнения)
	
	ДанныеОперации		= ДанныеЗаполнения.ДанныеОперации;
	
	ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
	СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		
		ДанныеПоУИП = Документы.ОперацияПоЯндексКассе.ОснованиеПлатежаПоУИП(ДанныеОперации.Организация,
			ДанныеОперации.ИдентификаторПлатежа);
		
		Дата = ДанныеОперации.ДатаОплаты;
		
		Если ДанныеПоУИП = Неопределено Тогда 
			ЕстьПроблемы = Истина;
			ИнформацияОПроблеме = СтрШаблон(
				НСтр("ru = 'Не найден документ основание по идентификатору платежа: %1.
					|Для устранения этой проблемы следует указать документ основание платежа вручную.'"),
				ДанныеОперации.ИдентификаторПлатежа);
			КодПроблемы = 5;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоУИП, "ОснованиеПлатежа, Контрагент, Партнер, ОбъектРасчетов");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОперации);
		
		СуммаКомиссии = СуммаДокумента - ДанныеОперации.СуммаКЗачислениюНаСчетОрганизации;
		
		Документы.ОперацияПоЯндексКассе.ПересчитатьНДС(ЭтотОбъект);
		
		ВалютаКомиссии = Валюта;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ОплатыПоУИП = Документы.ОперацияПоЯндексКассе.ОплатыПоУИП(ДанныеОперации.ИдентификаторПлатежа);
		
		Дата = ДанныеОперации.ДатаИсполненияЗапросаНаВозврат;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОперации);
		
		Если ОплатыПоУИП = Неопределено Тогда 
			ЕстьПроблемы = Истина;
			ИнформацияОПроблеме = СтрШаблон(
				НСтр("ru = 'Не найден документ оплаты через Яндекс.Кассу по идентификатору платежа: %1.
					|Для устранения этой проблемы следует указать документ основание платежа вручную.'"),
				ДанныеОперации.ИдентификаторПлатежа);
			КодПроблемы = 6;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОплатыПоУИП, "ОснованиеПлатежа, Контрагент, Партнер, ОбъектРасчетов, ВалютаКомиссии");
			
			Если КонецДня(ОплатыПоУИП.Дата) = КонецДня(Дата) Тогда 
				
				ТипОперацииВозврата = Перечисления.ТипыОперацийВозвратаЧерезЯндексКассу.Отмена;
				Документы.ОперацияПоЯндексКассе.ВычислитьСуммуКомиссииПоСуммеВозврата(ЭтотОбъект, ОплатыПоУИП);
				
			Иначе
				ТипОперацииВозврата = Перечисления.ТипыОперацийВозвратаЧерезЯндексКассу.Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Знач ДокументОснование, ДанныеЗаполнения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ТекущаяДата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Эквайер КАК Эквайер,
		|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
		|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
		|	&Ссылка КАК ОснованиеПлатежа,
		|	ДанныеДокумента.НастройкаЯндексКассы.СтатьяДвиженияДенежныхСредствВозвраты КАК СтатьяДвиженияДенежныхСредств,
		|	ДанныеДокумента.НастройкаЯндексКассы.СтатьяРасходов КАК СтатьяРасходов,
		|	ДанныеДокумента.НастройкаЯндексКассы.АналитикаРасходов КАК АналитикаРасходов,
		|	ДанныеДокумента.НастройкаЯндексКассы.Подразделение КАК Подразделение,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.ОбъектРасчетов,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ) = КОНЕЦПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВозвратаЧерезЯндексКассу.Отмена)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВозвратаЧерезЯндексКассу.Возврат)
		|	КОНЕЦ КАК ТипОперацииВозврата,
		|	ДанныеДокумента.НастройкаЯндексКассы,
		|	ДанныеДокумента.ВалютаКомиссии,
		|	ДанныеДокумента.СуммаКомиссии
		|ИЗ
		|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка,,"СуммаКомиссии");
	
	Если ДанныеЗаполнения.ОснованиеПлатежа = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Операцию по Яндекс.Кассе: Возврат оплаты клиенту на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	
	Если ДанныеЗаполнения.ТипОперацииВозврата = Перечисления.ТипыОперацийВозвратаЧерезЯндексКассу.Отмена Тогда 
		Документы.ОперацияПоЯндексКассе.ВычислитьСуммуКомиссииПоСуммеВозврата(ДанныеЗаполнения, Выборка);
	КонецЕсли;				
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.РасчетыСКлиентами);

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка = &ОбъектРасчетов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиента.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка = &ОбъектРасчетов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиента.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	               |		ПО ОперацияПоЯндексКассе.ОбъектРасчетов = ЗаказКлиента.Ссылка
	               |ГДЕ
	               |	ОперацияПоЯндексКассе.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиента.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказКлиента.Ссылка
	               |ИЗ
	               |	Документ.ОперацияПоЯндексКассе КАК ОперацияПоЯндексКассе
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	               |		ПО ОперацияПоЯндексКассе.ОбъектРасчетов = ЗаказКлиента.Ссылка
	               |ГДЕ
	               |	ОперацияПоЯндексКассе.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиента.Ссылка";
	
	
	Запрос.УстановитьПараметр("ОбъектРасчетов" , ОбъектРасчетов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	МассивЗависимыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", 
		Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
