&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		НастроитьПредставлениеСчетаФактуры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьПредставлениеСчетаФактуры();
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;	
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПервичныйДокумент", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ЗакрытьПослеЗаписи = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПервичногоДокументаПриИзменении(Элемент)
	
	ТипПервичногоДокументаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПервичногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовПриИзменении(Элемент)
	
	ПорядокРасчетовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ЗаполнитьСуммыРегл();
	 
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ВалютаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРасчетовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОбработкаНавигационнойСсылкиТекстСчетФактура(
		ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКоманд

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.Договор.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.ПорядокРасчетов", 
		Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, 
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.ДатаВходящегоДокумента.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.НомерВходящегоДокумента", 
		Неопределено, 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		Элемент.Поля, 
		Элементы.НомерВходящегоДокумента.Имя);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Элемент.Отбор, 
		"Объект.ДатаВходящегоДокумента", 
		Неопределено, 
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьПараметрыВыбораПартнера();
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораГруппыФинансовогоУчета();
	ЗаполнитьСписокВыбораПорядокаРасчетов();
	УстановитьЗаголовок();
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПредставлениеСчетаФактуры()
	
	Элементы.ТекстСчетФактура.Видимость = (Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика);
	ЭтаФорма.ТекстСчетФактура = ЗакупкиСервер.ПредставлениеСчетаФактурыВДокументеЗакупки(
			Объект.Ссылка, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	РеквизитыДокумента = Документы.ПервичныйДокумент.МассивРеквизитовПоТипуПервичногоДокумента(Объект.ТипПервичногоДокумента);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		РеквизитыДокумента.МассивВсехРеквизитов,
		РеквизитыДокумента.МассивРеквизитовДляТипа);
		
	Если РеквизитыДокумента.МассивРеквизитовДляТипа.Найти("ГруппаФинансовогоУчета") <> Неопределено Тогда
		Элементы.ГруппаФинансовогоУчета.Видимость = (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	Если РеквизитыДокумента.МассивРеквизитовДляТипа.Найти("НаправлениеДеятельности") <> Неопределено Тогда
		Элементы.НаправлениеДеятельности.Видимость = (Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
	Элементы.ПорядокРасчетов.Доступность = НЕ ЗначениеЗаполнено(Объект.Договор);
	 
	ВидимостьДоговора = Ложь;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента 
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		
		Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
		Иначе
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
		КонецЕсли;
		
	ИначеЕсли Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаПоставщику 
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
		
		Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
		Иначе
			ВидимостьДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
		КонецЕсли;
	Иначе
		ВидимостьДоговора= Ложь;
	КонецЕсли;
	Элементы.Договор.Видимость = ВидимостьДоговора;
	
	Элементы.СуммаРегл.Доступность = (Объект.Валюта <> ВалютаРегламентированногоУчета);
	
КонецПроцедуры

&НаСервере
Процедура ТипПервичногоДокументаПриИзмененииСервер()
	
	УстановитьТипДоговора();
	
	УстановитьПараметрыВыбораПартнера();
	УстановитьПараметрыВыбораДоговора();
	УстановитьПараметрыВыбораГруппыФинансовогоУчета();
	ЗаполнитьСписокВыбораПорядокаРасчетов(Ложь);
	
	УстановитьЗаголовок();
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьТипДоговора();
	НастроитьПредставлениеСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ПорядокРасчетовПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Объект.ГруппаФинансовогоУчета = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговора();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	ЗаполнитьСуммыРегл();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
			Объект.Контрагент = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	КонецЕсли;
	
	УстановитьТипДоговора();
	УстановитьПараметрыВыбораДоговора();
	ЗаполнитьСписокВыбораПорядокаРасчетов();
	
	НастроитьПредставлениеСчетаФактуры();
	УправлениеФормой()
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") 
		И Объект.Партнер <> Справочники.Партнеры.НашеПредприятие Тогда
		Объект.Партнер = Справочники.Партнеры.НашеПредприятие;
	КонецЕсли;
	
	УстановитьТипДоговора();
	УстановитьПараметрыВыбораДоговора();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ПорядокРасчетовПоДоговоры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
		Если Объект.ПорядокРасчетов <> ПорядокРасчетовПоДоговоры Тогда
			Объект.ПорядокРасчетов = ПорядокРасчетовПоДоговоры;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДоговора()
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Если ТипЗнч(Объект.Договор) <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			Объект.Договор = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Если ТипЗнч(Объект.Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыРегл()
	
	Объект.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(
							Объект.СуммаДокумента, Объект.Валюта, ВалютаРегламентированногоУчета, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	
	Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Объект.ТипПервичногоДокумента, СокрЛП(Объект.Номер), Объект.Дата)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПартнера()
	
	МассивПараметров = Новый Массив;
	Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("УстанавливатьОтборПоТипуПартнераКакИЛИ", Истина));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.НашеПредприятие", Истина));
	КонецЕсли;
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДоговора()
	
	МассивПараметровВыбораДоговора = Новый Массив;
	МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПорядокРасчетов", Объект.ПорядокРасчетов));
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		
		Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
			ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.Контрагент));
		Иначе
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Контрагент));
			МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ОрганизацияПолучатель", Объект.Организация));
		КонецЕсли;
		
	Иначе
		МассивТиповДоговоров = Новый Массив;
		Если Объект.ТипПервичногоДокумента  = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
			ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем"));
		Иначе
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ВвозИзЕАЭС"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком"));
			МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"));
		КонецЕсли;
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", Новый ФиксированныйМассив(МассивТиповДоговоров)));
		
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Партнер", Объект.Партнер));
		МассивПараметровВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
		
	КонецЕсли;
	
	Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораДоговора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораГруппыФинансовогоУчета()
	
	МассивПараметровВыбораГруппыФинансовогоУчета = Новый Массив;
	
	Если Объект.ТипПервичногоДокумента  = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
		ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
		МассивПараметровВыбораГруппыФинансовогоУчета.Добавить(Новый ПараметрВыбора("Отбор.РасчетыСКлиентами", Истина));
	Иначе
		МассивПараметровВыбораГруппыФинансовогоУчета.Добавить(Новый ПараметрВыбора("Отбор.РасчетыСПоставщиками", Истина));
	КонецЕсли;
	
	Элементы.ГруппаФинансовогоУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбораГруппыФинансовогоУчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПорядокаРасчетов(ПроверитьЗаполнение = Истина)
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным, НСтр("ru = 'По накладным'"));
	
	Если Объект.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями") Тогда
			СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, НСтр("ru = 'По договорам'"));
		КонецЕсли;
	Иначе
		Если Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ОплатаОтКлиента
				ИЛИ Объект.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
				СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, НСтр("ru = 'По договорам'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
				СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru = 'По заказам'"));
			КонецЕсли;
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
				СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, НСтр("ru = 'По договорам'"));
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
				СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru = 'По заказам'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьЗаполнение Тогда 
		Если СписокВыбора.НайтиПоЗначению(Объект.ПорядокРасчетов) = Неопределено Тогда
			Объект.ПорядокРасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

ЗакрытьПослеЗаписи = Ложь;
