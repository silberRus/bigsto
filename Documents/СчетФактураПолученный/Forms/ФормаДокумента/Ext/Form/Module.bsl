
&НаКлиенте
Перем ПараметрыПредставления;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	УчетНДСУТ.НастроитьСовместныйВыборКонтрагентовОрганизаций(Элементы.Контрагент);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьЗаголовокДоступностьФлагаОтнесенияКПредыдущемуПериоду();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыПредставления = ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(ТекущийДокументОснование, Объект.Организация);
	ТекстСчетФактура       = ПараметрыПредставления.ТекстСчетФактура;
	ТекстСписок            = ПараметрыПредставления.ТекстСписок;
	ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
	РазрешенВводНового	   = ПараметрыПредставления.РазрешенВводНового;
	РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами	

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ОбновитьИнформациюПоДокументамОснованиям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПараметрыПредставления = Новый Структура;
	ПараметрыПредставления.Вставить("ТекстСчетФактура",       ТекстСчетФактура);
	ПараметрыПредставления.Вставить("ТекстСписок",            ТекстСписок);
	ПараметрыПредставления.Вставить("ГиперссылкаСчетФактура", ГиперссылкаСчетФактура);
	ПараметрыПредставления.Вставить("РазрешенВводНового",     РазрешенВводНового);
	ПараметрыПредставления.Вставить("РазрешеныИсправления",   РазрешеныИсправления);
	
	ОповеститьОВыборе(ПараметрыПредставления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_СчетФактураПолученный", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
		
	ПроверитьЗаполнитьНомерДатуИсправления(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстСчетФактураОснованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьИсходныеСчетаФактуры" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИсходныеСчетаФактуры();
		
	ИначеЕсли  НавигационнаяСсылкаФорматированнойСтроки = "ВыборСчетаФактурыОснования" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыборСчетаФактурыОснования();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ИзменитьДокументыОснования" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьСписокДокументовОснований(СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоСчетуФактуреПриИзменении(Элемент)
		
	Если Не ПоСчетуФактуре Тогда

		Объект.Номер = "";
		Объект.НомерИсправления = "";
		Объект.Корректировочный = Ложь;
		Объект.Исправление = Ложь;
		
		Если ЕстьЗаполненныеИсходныеДокументы() или ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
			
			ОчиститьДокументыОснования();
	
		КонецЕсли;
		
	Иначе 	
		
		ОбновитьИнформациюПоСчетуФактуреОснованию();
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСоставленияПриИзменении(Элемент)
	
	ЗаполнитьДатуПолучения();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсправленияПриИзменении(Элемент)
	
	ЗаполнитьДатуПолучения();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КодВидаОперацииНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.КодВидаОперации = Результат.Значение;
		ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("КодВидаОперацииНаУменьшениеНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперацииНаУменьшение = ВыбранныйЭлемент.Значение;
		ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНаУменьшениеПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПолученияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы(Истина);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОтнестиКПредыдущемуОтчетномуКварталуПриИзменении(Элемент)
	
	УстановитьДатуЗаписиКнигиПокупок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПродавцыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ОткрытьФормуПродавцы" Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокПродавцов = Новый СписокЗначений;
		Для каждого Строка Из Объект.Продавцы Цикл
			
			ДанныеПродавца = Новый Структура("Продавец, ИННПродавца, КПППродавца");
			ЗаполнитьЗначенияСвойств(ДанныеПродавца, Строка);
			СписокПродавцов.Добавить(ДанныеПродавца);
			
		КонецЦикла;
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Продавцы", СписокПродавцов);
		ПараметрыФормы.Вставить("ДатаСведений", ДатаСведений(Объект)); 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродавцыЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаПродавцы", 
			ПараметрыФормы, 
			ЭтаФорма, 
			, 
			, 
			,
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли НавигационнаяСсылка = "ВыбратьПродавца" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродавецЗавершениеВыбора", ЭтотОбъект);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора"
			, 
			, 
			ЭтаФорма, 
			, 
			, 
			, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставленКомиссионеромОтИмениПродавцаПриИзменении(Элемент)
	
	СоставленКомиссионеромОтИмениПродавцаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КППКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокВыбораКПП.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ЗаполнитьСписокВыбораКПП(СписокВыбораКПП, Объект.Контрагент, ДатаСведений(Объект));
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = СписокВыбораКПП;
	
КонецПроцедуры

&НаКлиенте
Процедура КППКонтрагентаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИННКонтрагентаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ДокументыОснования

&НаСервере
Процедура ОчиститьДокументыОснования()
	
	Объект.ДокументыОснования.Очистить();
	Объект.СчетФактураОснование = Неопределено;
	
	ОбновитьИнформациюПоДокументамОснованиям();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоСчетуФактуреОснованию()
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Корректировочный/исправительный к:'"));
	МассивСтрок.Добавить("   ");
	
	КоличествоСчетовФактур = ИсходныеСчетаФактуры.Количество();
	
	РазрешеноИзменение = ЕстьПравоНаРедактирование;
	
	Если КоличествоСчетовФактур > 1 Тогда
		
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего документов: %1'"),
			КоличествоСчетовФактур);
			
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ПредставлениеДокументов, , ЦветаСтиля.ЦветГиперссылки, , "ОткрытьИсходныеСчетаФактуры"));
			
	Иначе
		
		Если КоличествоСчетовФактур = 1 Тогда
			
			ПерваяСтрока = ИсходныеСчетаФактуры[0];
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПерваяСтрока.ПредставлениеСчетаФактуры, ,
				ЦветаСтиля.ЦветГиперссылки, ,
				ПолучитьНавигационнуюСсылку(ПерваяСтрока.СчетФактура)));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Исправление И ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		
		Если КоличествоСчетовФактур > 0 Тогда
			МассивСтрок.Добавить(" / ");
		КонецЕсли;
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СчетФактураОснованиеПредставление, ,
			ЦветаСтиля.ЦветГиперссылки, ,
			ПолучитьНавигационнуюСсылку(Объект.СчетФактураОснование)));
			
	КонецЕсли;
	
	Если ПоСчетуФактуре И РазрешеноИзменение Тогда
		
		Если Объект.Исправление И ЗначениеЗаполнено(Объект.СчетФактураОснование) 
			Или КоличествоСчетовФактур > 0 Тогда
			
			МассивСтрок.Добавить("   ");
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Изменить'"), ,
				ЦветаСтиля.ЦветГиперссылки, ,
				"ВыборСчетаФактурыОснования"));
			
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Не выбран счет-фактура'"), ,
				WebЦвета.Кирпичный, ,
				"ВыборСчетаФактурыОснования"));
				
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСчетФактураОснование = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоДокументамОснованиям()
	
	МассивСтрок = Новый Массив;
	
	КоличествоДокументов = Объект.ДокументыОснования.Количество();
	
	РазрешеноИзменение = ЕстьПравоНаРедактирование И НЕ ТолькоПросмотр;
	
	Если КоличествоДокументов = 0 Тогда
		
		Если РазрешеноИзменение Тогда
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбрать'"), ,
				WebЦвета.Кирпичный, ,
				"ИзменитьДокументыОснования"));
			
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Не выбраны'"), , WebЦвета.Кирпичный));
			
		КонецЕсли;
		
	Иначе
		
		Если КоличествоДокументов = 1 Тогда
			
			ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				Строка(ПервыйДокумент), , ЦветаСтиля.ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(ПервыйДокумент)));
				
			Если РазрешеноИзменение Тогда
				МассивСтрок.Добавить("  ");
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '(Добавить)'"),  , ЦветаСтиля.ЦветГиперссылки, , "ИзменитьДокументыОснования"));
			КонецЕсли;
		Иначе
			
			ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего документов: %1'"),
				КоличествоДокументов);
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ПредставлениеДокументов, , ЦветаСтиля.ЦветГиперссылки, , "ИзменитьДокументыОснования"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыОснованияПредставление = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходныеСчетаФактуры()
	
	СписокДокументов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ИсходныеСчетаФактуры Цикл
		СписокДокументов.Добавить(СтрокаТаблицы.СчетФактура);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДокументов", СписокДокументов);
	СтруктураПараметров.Вставить("Заголовок", НСтр("ru='Корректировка к счетам-фактурам (%КоличествоДокументов%)'"));
	
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		СтруктураПараметров,
		ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы()
	
	ВалютаОснованияСчетаФактуры = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СчетФактураОснованиеПредставление = "";
	
	СписокОснований.Очистить();
	ИсходныеСчетаФактуры.Очистить();
	
	ПоСчетуФактуре = Объект.Исправление Или Объект.Корректировочный;
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		
		ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
		
		УстановитьПривилегированныйРежим(Истина);
		ВалютаОснованияСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервыйДокумент, "Валюта");
		УстановитьПривилегированныйРежим(Ложь);
		
		ТаблицаОснований = Объект.ДокументыОснования.Выгрузить();
		
		СписокОснований.ЗагрузитьЗначения(ТаблицаОснований.ВыгрузитьКолонку("ДокументОснование"));
		
		КолонкиСвертки = "ИсходныйДокумент, НомерИсходногоДокумента, ДатаИсходногоДокумента";
		ТаблицаОснований.Свернуть(КолонкиСвертки);
		
		Для Каждого СтрокаОснования Из ТаблицаОснований Цикл
			
			Если ЗначениеЗаполнено(СтрокаОснования.ИсходныйДокумент) Тогда
				
				СтрокаИсходногоСФ = ИсходныеСчетаФактуры.Добавить();
				СтрокаИсходногоСФ.СчетФактура = СтрокаОснования.ИсходныйДокумент;
				СтрокаИсходногоСФ.ПредставлениеСчетаФактуры = ЗакупкиСервер.ПредставлениеСчетаФактуры(
					СтрокаОснования.НомерИсходногоДокумента, СтрокаОснования.ДатаИсходногоДокумента, Истина );
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		
		РеквизитыСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СчетФактураОснование, "Номер, Дата");
		СчетФактураОснованиеПредставление = ЗакупкиСервер.ПредставлениеСчетаФактуры(РеквизитыСФ.Номер, РеквизитыСФ.Дата,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСчетФактурыОснования(ВыбранныйСчетФактура)
	
	Модифицированность = Истина;
	
	РеквизитыДляОбработки = Документы.СчетФактураПолученный.ПараметрыЗаполненияПоСчетуФактуре(ВыбранныйСчетФактура);
	
	Если РеквизитыДляОбработки.Исправление Тогда
		
		Объект.СчетФактураОснование = ВыбранныйСчетФактура;
		ЗаполнитьНаОснованииСчетаФактуры();
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Для выбранного документа уже введен корректировочный счет-фактура.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВыборСчетаФактурыОснования");
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииСчетаФактуры()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьИсправлениеПоСчетуФактуре();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	ОбновитьИнформациюПоДокументамОснованиям();
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСчетаФактурыПоОснованию()
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
	
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	КонецЕсли;
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаФактурыОснования()
	
	СтруктураПараметров = Новый Структура;
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Исправление", Ложь);
	ЗначениеОтбора.Вставить("ПометкаУдаления", Ложь);
	ЗначениеОтбора.Вставить("Проведен", Истина);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначениеОтбора.Вставить("Организация", Объект.Организация)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначениеОтбора.Вставить("ИсключитьСчетФактуру", Объект.Ссылка);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Отбор", ЗначениеОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ВыборСчетаФактурыОснованияЗавершение", ЭтаФорма);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.Форма.ФормаВыбора",
		СтруктураПараметров,
		ЭтаФорма, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаФактурыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьИзменениеСчетФактурыОснования(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияСпискаДокументовОснований(ИзмененныйСписокОснований)
	
	Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(ИзмененныйСписокОснований, СписокОснований) 
		И ИзмененныйСписокОснований.Количество() = СписокОснований.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ДокументыОснования.Очистить();
	Объект.СчетФактураОснование = Неопределено;
	
	СписокОснований = ИзмененныйСписокОснований;
	
	Если СписокОснований.Количество() > 0 Тогда
		
		Для Каждого СтрокаСписка Из СписокОснований Цикл
			СтрокаТаблицы = Объект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = СтрокаСписка.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПараметрыСчетаФактурыПоОснованию();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Перем РеквизитыСчетаФактуры;
	
	Если Параметры.Свойство("ДокументОснование") Тогда
		ТекущийДокументОснование = Параметры.ДокументОснование;
		ДокументОснование        = Параметры.ДокументОснование;
	ИначеЕсли Объект.ДокументыОснования.Количество() > 0 Тогда
		ДокументОснование        = Объект.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Макс(Объект.ДатаИсправления,Объект.ДатаСоставления));
	СтруктураПериода = УчетНДСПереопределяемый.БлижайшийНалоговыйПериод(Объект.Организация, Объект.Дата);
	НачалоНалоговогоПериода = СтруктураПериода.Период;
	ЭтоРасширенныйНалоговыйПериод = СтруктураПериода.Период <> СтруктураПериода.Начало;
	
	ПараметрыПредставления = ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(ТекущийДокументОснование, Объект.Организация);
	ТекстСчетФактура       = ПараметрыПредставления.ТекстСчетФактура;
	ТекстСписок            = ПараметрыПредставления.ТекстСписок;
	ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
	РазрешенВводНового	   = ПараметрыПредставления.РазрешенВводНового;
	РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураПолученный);
	
	ЗаполнитьСписокКодовВидовОпераций();
	
	ЗаполнитьЗависимыеОтДокументовОснованийРеквизитыФормы();
	ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы();
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоПродавцам();
	
	НастроитьВидимостьВалютыКодаОперации();
	
	Если Объект.ДокументыОснования.Количество() > 0 И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ВалютаОснованияСчетаФактуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументыОснования[0].ДокументОснование, "Валюта");
	КонецЕсли;
	
	Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДокументОснование, Объект.Организация, РеквизитыСчетаФактуры, Ложь);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
		
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ГруппаНомерДатаИсправления");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "Доступность",
		Форма.Объект.Исправление);
		
	Если Форма.Объект.Исправление Тогда
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДатаПриИсправлении;
	Иначе
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДата;
	КонецЕсли;
	
	ТипКонтрагентаКонтрагент = ТипЗнч(Форма.Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты");
	
	Форма.Элементы.ИННКонтрагента.Доступность = ТипКонтрагентаКонтрагент 
	                                            И ЗначениеЗаполнено(Форма.Объект.Контрагент);
	Форма.Элементы.КППКонтрагента.Доступность = ТипКонтрагентаКонтрагент
	                                            И ЗначениеЗаполнено(Форма.Объект.Контрагент)
	                                            И Форма.КонтрагентЮрЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияПриИзмененииКлиент()
	
	ДатаПолученияПриИзмененииСервер();
	УстановитьДатуЗаписиКнигиПокупок();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДатаСведений(Объект));
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ДатаПолученияПриИзмененииСервер()
	
	ВерсияПостановления1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Макс(Объект.ДатаИсправления,Объект.ДатаСоставления));
	СтруктураПериода = УчетНДСПереопределяемый.БлижайшийНалоговыйПериод(Объект.Организация, Объект.Дата);
	НачалоНалоговогоПериода = СтруктураПериода.Период;
	ЭтоРасширенныйНалоговыйПериод = СтруктураПериода.Период <> СтруктураПериода.Начало;
	УстановитьЗаголовокДоступностьФлагаОтнесенияКПредыдущемуПериоду();
	ЗаполнитьСписокКодовВидовОпераций();
	НастроитьВидимостьВалютыКодаОперации();
	ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПолучения()
	
	Если Объект.Исправление И ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда
		Объект.Дата = Объект.ДатаИсправления;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаСоставления) Тогда
		Объект.Дата = Объект.ДатаСоставления;
	КонецЕсли;
	
	ДатаПолученияПриИзмененииКлиент();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьВалютыКодаОперации()
	
	КодыВидовОперацийНаУвеличениеУменьшение = Объект.Корректировочный И ВерсияКодовВидовОпераций >= 3;
	Элементы.ДекорацияКодВидаОперации.Видимость = НЕ КодыВидовОперацийНаУвеличениеУменьшение;
	Элементы.ГруппаКодВидаОперации.Видимость = НЕ КодыВидовОперацийНаУвеличениеУменьшение;
	Элементы.ГруппаКодВидаОперацииНаУвеличение.Видимость = КодыВидовОперацийНаУвеличениеУменьшение;
	Элементы.ГруппаКодВидаОперацииНаУменьшение.Видимость = КодыВидовОперацийНаУвеличениеУменьшение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснований(СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыФормы.Вставить("СписокДокументовОснований", Новый СписокЗначений);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		Для Каждого СтрокаТаблицы Из Объект.ДокументыОснования Цикл
			ПараметрыФормы.СписокДокументовОснований.Добавить(СтрокаТаблицы.ДокументОснование)
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ОткрытьФорму("Документ.СчетФактураПолученный.Форма.ФормаДокументыОснования",
			ПараметрыФормы,
			ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьСписокДокументовОснованийЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументовОснованийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаИзмененияСпискаДокументовОснований(Результат);
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
	ОбновитьИнформациюПоДокументамОснованиям();
	ОбновитьИнформациюПоСчетуФактуреОснованию();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДоступностьФлагаОтнесенияКПредыдущемуПериоду()
	
	ФлагПереноса = Элементы.ОтнестиКПредыдущемуОтчетномуКварталу;
	ДатаПолучения = Объект.Дата;
	
	Если ЭтоРасширенныйНалоговыйПериод Тогда
		ЗаполнитьСписокВыборкаДатыЗаписиКнигиПокупок(ФлагПереноса.СписокВыбора, ДатаПолучения);
		ФлагПереноса.Доступность = Ложь;
		Объект.ОтнестиКПредыдущемуОтчетномуКварталу = Ложь;
	ИначеЕсли ВерсияПостановления1137 >=4 И Объект.Исправление И ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда 
		// исправления СФ по Постановлению №981 можно отражать в периоде составления
		ЗаполнитьСписокВыборкаДатыЗаписиКнигиПокупок(ФлагПереноса.СписокВыбора, Объект.ДатаИсправления, Объект.ДатаСоставления);
		
		// если ранее уже были оформлены исправления, то период отражения берем из предыдущего исправления
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Исправление
		|			ТОГДА СчетФактураПолученный.СчетФактураОснование
		|		ИНАЧЕ СчетФактураПолученный.Ссылка
		|	КОНЕЦ КАК Ссылка,
		|	СчетФактураПолученный.Номер КАК Номер
		|ПОМЕСТИТЬ ИсходныеДокументы
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &СчетФактураОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Исправления.ОтнестиКПредыдущемуОтчетномуКварталу
		|ИЗ
		|	ИсходныеДокументы КАК ИсходныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК Исправления
		|		ПО ИсходныеДокументы.Ссылка = Исправления.СчетФактураОснование
		|			И ИсходныеДокументы.Ссылка <> Исправления.Ссылка
		|			И Исправления.Ссылка <> &Ссылка
		|			И (Исправления.Исправление)
		|			И (Исправления.Корректировочный = &Корректировочный)
		|			И (НЕ Исправления.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исправления.НомерИсправления УБЫВ";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СчетФактураОснование", Объект.СчетФактураОснование);
		Запрос.УстановитьПараметр("Корректировочный", Объект.Корректировочный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда // найдено предыдущее исправление
			ФлагПереноса.Доступность = Ложь;
			Объект.ОтнестиКПредыдущемуОтчетномуКварталу = Выборка.ОтнестиКПредыдущемуОтчетномуКварталу;
		Иначе
			ФлагПереноса.Доступность = НачалоКвартала(Объект.ДатаСоставления) <> НачалоКвартала(Объект.ДатаИсправления);
			Если Не ФлагПереноса.Доступность Тогда
				Объект.ОтнестиКПредыдущемуОтчетномуКварталу = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДатаОснования =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		Иначе
			ДатаОснования =  Неопределено;
		КонецЕсли;
		
		ЗаполнитьСписокВыборкаДатыЗаписиКнигиПокупок(ФлагПереноса.СписокВыбора, ДатаПолучения);
		ФлагПереноса.Доступность = ЗначениеЗаполнено(ДатаПолучения)
								 И (
										(ЗначениеЗаполнено(ДокументОснование) 
											И НачалоКвартала(ДатаОснования) <> НачалоКвартала(ДатаПолучения))
										ИЛИ
										(НЕ ЗначениеЗаполнено(ДокументОснование))
									)
								 И НачалоМесяца(ДатаПолучения) = НачалоКвартала(ДатаПолучения)
								 И НачалоДня(ДатаПолучения) <= ПредельнаяДатаОтнесенияКПредыдущемуПериоду(ДатаПолучения);
		Если Не ФлагПереноса.Доступность Тогда
			Объект.ОтнестиКПредыдущемуОтчетномуКварталу = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПредельнаяДатаОтнесенияКПредыдущемуПериоду(ДатаПолучения)
	
	БазоваяДата = НачалоКвартала(ДатаПолучения) + 24*86400; // 25-е число месяца, следующего за отчетным периодом
	ПредельнаяДата = БазоваяДата;
	
	// Получаем ближайший следующий рабочий день
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ДанныеПроизводственногоКалендаря.Дата) КАК БлижайшийСледующийРабочийДень
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = ОсновнойКалендарьПредприятия.Значение.ПроизводственныйКалендарь
		|ГДЕ
		|	(ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|	И ДанныеПроизводственногоКалендаря.Дата >= &ДатаПолучения) 
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(ДанныеПроизводственногоКалендаря.Дата) ЕСТЬ NULL
		|";
	
	Запрос.УстановитьПараметр("ДатаПолучения", БазоваяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Получаем 25-е число месяца, следующиего за отчетным периодом,
		// с учетом возможных последующих выходных и праздников
		ПредельнаяДата = Макс(НачалоДня(Выборка.БлижайшийСледующийРабочийДень-1), БазоваяДата);
	КонецЕсли;
	
	Возврат ПредельнаяДата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыборкаДатыЗаписиКнигиПокупок(СписокВыбора, Знач ДатаПолучения, ДатаСоставления = Неопределено)
	
	СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(ДатаПолучения) Тогда
		ДатаПолучения = ТекущаяДата();
	КонецЕсли;
	СтрокаШаблон = НСтр("ru = 'Отнести к %Квартал% кварталу %Год% г.'");
	
	// Текущий квартал по дате получения
	НомерКвартала = Цел(Месяц(КонецКвартала(ДатаПолучения))/3);
	НомерГода     = Год(ДатаПолучения);
	СтрокаТекущийКвартал = СтрЗаменить(СтрокаШаблон, "%Квартал%", НомерКвартала);
	СтрокаТекущийКвартал = СтрЗаменить(СтрокаТекущийКвартал, "%Год%", Формат(НомерГода, "ЧЦ=4; ЧДЦ=; ЧГ=0"));
	СписокВыбора.Добавить(Ложь, СтрокаТекущийКвартал);
	
	Если ДатаСоставления = Неопределено Тогда
		// Предыдущий квартал по отношению к дате получения
		НомерПердыдущегоКвартала = ?(НомерКвартала = 1, 4, НомерКвартала - 1);
		НомерПредыдущегоГода     = ?(НомерКвартала = 1, НомерГода - 1, НомерГода);
		СтрокаПредыдущийКвартал = СтрЗаменить(СтрокаШаблон, "%Квартал%", НомерПердыдущегоКвартала);
		СтрокаПредыдущийКвартал = СтрЗаменить(СтрокаПредыдущийКвартал, "%Год%", Формат(НомерПредыдущегоГода, "ЧЦ=4; ЧДЦ=; ЧГ=0"));
		СписокВыбора.Добавить(Истина, СтрокаПредыдущийКвартал);
	Иначе
		// Квартал даты составления
		НомерКвартала = Цел(Месяц(КонецКвартала(ДатаСоставления))/3);
		НомерГода     = Год(ДатаСоставления);
		СтрокаКварталСоставления = СтрЗаменить(СтрокаШаблон, "%Квартал%", НомерКвартала);
		СтрокаКварталСоставления = СтрЗаменить(СтрокаКварталСоставления, "%Год%", Формат(НомерГода, "ЧЦ=4; ЧДЦ=; ЧГ=0"));
		СписокВыбора.Добавить(Истина, СтрокаКварталСоставления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗаписиКнигиПокупок()
	
	Если Объект.ОтнестиКПредыдущемуОтчетномуКварталу И Не Объект.Исправление Тогда
		Объект.ДатаЗаписиКнигиПокупок = НачалоКвартала(Объект.Дата) - 1;
	Иначе
		Если НачалоКвартала(Объект.Дата) = НачалоНалоговогоПериода Тогда
			Объект.ДатаЗаписиКнигиПокупок = Объект.Дата;
		Иначе
			Объект.ДатаЗаписиКнигиПокупок = НачалоНалоговогоПериода;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнитьНомерДатуИсправления(Отказ)
	
	Если Объект.Исправление Тогда
		Если не ЗначениеЗаполнено(Объект.НомерИсправления) Тогда
		
			// Установка номера по исходному документу.
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СчетФактураПолученный.Исправление
			|			ТОГДА СчетФактураПолученный.СчетФактураОснование
			|		ИНАЧЕ СчетФактураПолученный.Ссылка
			|	КОНЕЦ                     КАК Ссылка,
			|	СчетФактураПолученный.Номер КАК Номер
			|ПОМЕСТИТЬ ИсходныеДокументы
			|ИЗ Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &СчетФактураОснование
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсходныеДокументы.Номер КАК Номер,
			|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
			|ИЗ
			|	ИсходныеДокументы КАК ИсходныеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК Исправления
			|		ПО ИсходныеДокументы.Ссылка = Исправления.СчетФактураОснование
			|			И ИсходныеДокументы.Ссылка <> Исправления.Ссылка
			|			И Исправления.Исправление
			|			И Исправления.Корректировочный = &Корректировочный
			|			И НЕ Исправления.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерИсправления УБЫВ");
			
			Запрос.УстановитьПараметр("СчетФактураОснование", Объект.СчетФактураОснование);
			Запрос.УстановитьПараметр("Корректировочный", Объект.Корректировочный);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
								
				Объект.НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
				
			КонецЕсли;                                                 
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда
			Объект.ДатаИсправления = Объект.Дата;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Поле ""Номер"" не заполнено'"),
				,
				"Номер",
				"Объект",
				Отказ);

		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоставленКомиссионеромОтИмениПродавцаПриИзмененииСервер()
	
	Если НЕ Объект.СоставленКомиссионеромОтИмениПродавца Тогда
		Объект.Продавцы.Очистить();
	КонецЕсли;
	
	ОбновитьИнформациюПоПродавцам();
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавцыЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПродавцов(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродавецЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПродавцов = Новый СписокЗначений;
	СписокПродавцов.Добавить(Результат);
	
	ЗаполнитьПродавцов(СписокПродавцов, Истина);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПродавцов(СписокПродавцов, ПолучатьИННКПП = Ложь)
	
	УчетНДСУТ.ЗаполнитьПродавцов(ЭтотОбъект, СписокПродавцов, ДатаСведений(Объект), ПолучатьИННКПП );
	
	ОбновитьИнформациюПоПродавцам();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоПродавцам()
	
	МассивСтрок = Новый Массив();
	
	Если НЕ Объект.СоставленКомиссионеромОтИмениПродавца Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(""));
	ИначеЕсли Объект.Продавцы.Количество() = 0 Тогда
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru='Выбрать продавца'"), , WebЦвета.Кирпичный, , "ВыбратьПродавца"));
	ИначеЕсли Объект.Продавцы.Количество() = 1 Тогда
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(Строка(Объект.Продавцы[0].Продавец), , ЦветаСтиля.ЦветГиперссылки, , ПолучитьНавигационнуюСсылку(Объект.Продавцы[0].Продавец)));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока("  "));
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru='(Добавить)'"), , ЦветаСтиля.ЦветГиперссылки, , "ОткрытьФормуПродавцы"));
	Иначе
		ТекстПродавцов = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
				Объект.Продавцы.Количество(),
				НСтр("ru='продавец'"), НСтр("ru='продавца'"), НСтр("ru='продавцов'"), НСтр("ru='м'"));
		Текст = СтрШаблон(НСтр("ru='Выбрано %1 %2'"), Объект.Продавцы.Количество(), ТекстПродавцов);
		
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(Текст, , ЦветаСтиля.ЦветГиперссылки, , "ОткрытьФормуПродавцы"));
	КонецЕсли;
	
	ТекстПродавцы = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВидаОперации(Форма)
	
	ТекущийКод = Форма.СписокКодовВидовОпераций.НайтиПоЗначению(Форма.Объект.КодВидаОперации);
	Если ТекущийКод <> Неопределено Тогда
		Форма.ПредставлениеВидаОперации = Сред(ТекущийКод.Представление, 4);
	Иначе
		Форма.ПредставлениеВидаОперации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВидаОперацииНаУменьшение(Форма)
	
	ТекущийКод = Форма.СписокКодовВидовОпераций.НайтиПоЗначению(Форма.Объект.КодВидаОперацииНаУменьшение);
	Если ТекущийКод <> Неопределено Тогда
		Форма.ПредставлениеВидаОперацииНаУменьшение = Сред(ТекущийКод.Представление, 4);
	Иначе
		Форма.ПредставлениеВидаОперацииНаУменьшение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеИсходныеДокументы()
	
	СтруктураПоиска = Новый Структура("ИсходныйДокумент", Документы.СчетФактураПолученный.ПустаяСсылка());
	
	СтрокиБезИсходногоДокумента = Объект.ДокументыОснования.НайтиСтроки(СтруктураПоиска);
	
	Возврат Не СтрокиБезИсходногоДокумента.Количество() = Объект.ДокументыОснования.Количество();

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	ДатаКодовОпераций = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()); 
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(ДатаКодовОпераций);
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		СписокКодовВидовОпераций,
		ДатаКодовОпераций);
		
	ОбновитьПредставлениеВидаОперации(ЭтаФорма);
	ОбновитьПредставлениеВидаОперацииНаУменьшение(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы(ИзменятьИННКПП = Ложь) Экспорт
	
	УчетНДСУТ.ЗаполнитьЗависимыеОтКонтрагентаРеквизитыФормы(ЭтотОбъект, ДатаСведений(Объект), ИзменятьИННКПП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаСведений(Объект)
	
	Возврат ?(Объект.Исправление, Объект.ДатаИсправления, Объект.ДатаСоставления);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораКПП(СписокВыбора, Контрагент, ДатаСведений)
	
	УчетНДСУТ.ЗаполнитьСписокВыбораКППСчетФактурыПолученные(СписокВыбора, Контрагент, ДатаСведений);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
