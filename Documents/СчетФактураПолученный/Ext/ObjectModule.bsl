#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет код вида операции счета-фактуры
//
Процедура ЗаполнитьКодВидаОперации() Экспорт
	
	Основание = Неопределено;
	Если ДокументыОснования.Количество() > 0 Тогда
		Основание = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		КодВидаОперации = ?(ВерсияКодовВидовОпераций >= 3, "01", "03");
	КонецЕсли;
	
	Если СоставленКомиссионеромОтИмениПродавца И Продавцы.Количество() > 1 Тогда
		КодВидаОперации = "27";
	КонецЕсли;
	
	Если КодВидаОперации = "" Тогда
		КодВидаОперации = "01";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак СводныйКорректировочный
//
Процедура ЗаполнитьПризнакСводныйКорректировочный() Экспорт
	
	КоличествоКорректировокПоступлений = 0;
	Если ЭтотОбъект.Корректировочный Тогда
		Для каждого СтрокаОснование Из ЭтотОбъект.ДокументыОснования Цикл
			Если ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
				КоличествоКорректировокПоступлений = КоличествоКорректировокПоступлений + 1;
			КонецЕсли;
			Если КоличествоКорректировокПоступлений > 1 Тогда //Если корректировок несколько, то СФ сводный.
				ЭтотОбъект.СводныйКорректировочный = ИСТИНА;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоКорректировокПоступлений <= 1 Тогда
			ЭтотОбъект.СводныйКорректировочный = ЛОЖЬ;
		КонецЕсли;
	Иначе
		ЭтотОбъект.СводныйКорректировочный = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
#Область КорректировкаПриобретения
	ЕстьКорректировки = Ложь;
	ЕстьИсправления = Ложь;
	НетИсходногоСчетФактуры = Ложь;
	ХозОперации = Перечисления.ХозяйственныеОперации;
	КоличествоОснований = ДокументыОснования.Количество();
	
	СводныйКорректировочныйПризнак = Истина;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Основания""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	Для Каждого СтрТЧ Из ДокументыОснования Цикл
		
		Если ТипЗнч(СтрТЧ.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			
			ОперацияОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТЧ.ДокументОснование, "ВидКорректировки");
			
			ЕстьКорректировки = ЕстьКорректировки Или ОперацияОснования = ХозОперации.КорректировкаПоСогласованиюСторон;
			ЕстьИсправления   = ЕстьИсправления   Или ОперацияОснования = ХозОперации.ИсправлениеОшибок;
			
		Иначе
			
			СводныйКорректировочныйПризнак = Ложь;
	
		КонецЕсли;
		
		Если Корректировочный И Не ЗначениеЗаполнено(СтрТЧ.ИсходныйДокумент) Тогда
			НетИсходногоСчетФактуры = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстОшибки = "";
	ПутьКЭлементу = "";
	
	Если НетИсходногоСчетФактуры Тогда
		Если КоличествоОснований > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для всех документов списка ""Документы-основания"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	Если ЕстьКорректировки И ЕстьИсправления Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В документах основания нельзя одновременно указывать корректировки поступления с операциями: ""%1"" и ""%2""'"),
			ХозОперации.КорректировкаПоСогласованиюСторон,
			ХозОперации.ИсправлениеОшибок);
		
	ИначеЕсли ЕстьКорректировки И Не Корректировочный Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Счет-фактура должен быть корректировочным, т.к. среди документов основания есть корректировка поступления с операцией ""%1""'"),
			ХозОперации.КорректировкаПоСогласованиюСторон);
		
		ПутьКЭлементу = "Корректировочный";
		
	ИначеЕсли ЕстьИсправления И Не Исправление И Не СводныйКорректировочныйПризнак Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Счет-фактура должен быть исправительным, т.к. среди документов основания есть корректировка поступления с операцией ""%1""'"),
			ХозОперации.ИсправлениеОшибок);
		
		ПутьКЭлементу = "Исправление";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			ПутьКЭлементу,
			,
			Отказ);
		
	КонецЕсли;
#КонецОбласти
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
	КонецЕсли;
		
	Если НЕ СоставленКомиссионеромОтИмениПродавца Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продавцы");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументовОснований(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ Исправление Тогда
		НомерИсправления = "";
		ДатаИсправления  = '00010101';
	КонецЕсли;
	
	Если НЕ Корректировочный Тогда
		Для Каждого СтрТЧ из ДокументыОснования цикл
			СтрТЧ.НомерИсходногоДокумента = "";
			СтрТЧ.ДатаИсходногоДокумента  = '00010101';
			СтрТЧ.НомерИсправленияИсходногоДокумента = "";
			СтрТЧ.ДатаИсправленияИсходногоДокумента  = '00010101';
		КонецЦикла;
	КонецЕсли;
	
	СводныйКомиссионный = СоставленКомиссионеромОтИмениПродавца И (Продавцы.Количество() > 1);
	
	ЗаполнитьПризнакСводныйКорректировочный();
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДатаЗаписиКнигиПокупок) Тогда
		НачалоНалоговогоПериода = УчетНДСПереопределяемый.БлижайшийНалоговыйПериод(Организация, Дата).Период;
		Если НачалоКвартала(Дата) = НачалоНалоговогоПериода Тогда
			ДатаЗаписиКнигиПокупок = Дата;
		Иначе
			ДатаЗаписиКнигиПокупок = НачалоНалоговогоПериода;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
			// Заполним реквизиты исправления счета-фактуры по реквизитам основания
				
			Если ДанныеЗаполнения.Свойство("СчетФактураОснование") Тогда
				ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения);
			ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
				ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения);
			КонецЕсли;
				
		ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если Исправление Тогда
		
		// Установка номера по исходному документу.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетФактураПолученный.Исправление
		|			ТОГДА СчетФактураПолученный.СчетФактураОснование
		|		ИНАЧЕ СчетФактураПолученный.Ссылка
		|	КОНЕЦ                     КАК Ссылка,
		|	СчетФактураПолученный.Номер КАК Номер
		|ПОМЕСТИТЬ ИсходныеДокументы
		|ИЗ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.Ссылка = &СчетФактураОснование
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.Номер КАК Номер,
		|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	ИсходныеДокументы КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК Исправления
		|		ПО ИсходныеДокументы.Ссылка = Исправления.СчетФактураОснование
		|			И ИсходныеДокументы.Ссылка <> Исправления.Ссылка
		|			И Исправления.Исправление
		|			И Исправления.Корректировочный = &Корректировочный
		|			И НЕ Исправления.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ");
		
		Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
		Запрос.УстановитьПараметр("Корректировочный", Корректировочный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Установка номера и переопределение префикса информационной базы.
			Префикс = "И";
			ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, СтандартнаяОбработка, Префикс);
			
			НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.Номер, Истина, Истина);
			Если СтрДлина(СокрП(НомерБезПрефикса)) = 7 Тогда
				НомерБезПрефикса = Прав(НомерБезПрефикса, СтрДлина(НомерБезПрефикса)-1);
			КонецЕсли;
			Номер = Префикс + НомерБезПрефикса;
			
			НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Префикс = "0";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Ссылка);
		РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СформироватьЗаданияПоДокументам(МассивДокументов);
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	ДанныеЗаполнения.Свойство("Корректировочный", Корректировочный);
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Организация", ПараметрыСчетаФактуры.Организация);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Подразделение = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Подразделение", ПараметрыСчетаФактуры.Подразделение);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Контрагент",     ПараметрыСчетаФактуры.Контрагент);
		ДанныеЗаполнения.Вставить("КППКонтрагента", ПараметрыСчетаФактуры.КППКонтрагента);
		ДанныеЗаполнения.Вставить("ИННКонтрагента", ПараметрыСчетаФактуры.ИННКонтрагента);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		ДанныеЗаполнения.Вставить("Корректировочный", Корректировочный);
		ДанныеЗаполнения.Вставить("Исправление", ПараметрыСчетаФактуры.Исправление);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И ДанныеЗаполнения.Исправление Тогда
		ДанныеЗаполнения.Вставить("СчетФактураОснование", ПараметрыСчетаФактуры.СчетФактураОснование);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
		ЗаполнитьКодВидаОперации();
	КонецЕсли;
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	Если Корректировочный Тогда
		
		Если РеквизитыОснования.Количество() > 0 Тогда
			
			Для Каждого Основание Из ДокументыОснования Цикл
				
				СтрокаСРеквизитами = РеквизитыОснования.Найти(Основание.ДокументОснование, "ДокументОснование");
				Если СтрокаСРеквизитами <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Основание, СтрокаСРеквизитами); 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения.ДокументОснование;
	
	РеквизитыСчетаФактуры = Документы.СчетФактураПолученный.ИсправляемыйСчетФактураПоОснованию(
		ЭтотОбъект.Ссылка,
		Основание,
		?(ДанныеЗаполнения.Свойство("Организация"), ДанныеЗаполнения.Организация, Неопределено));
	
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		
		Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
			ИмяРеквизита      = РеквизитСФ.Ключ;
			ЗначениеРеквизита = РеквизитСФ.Значение;
			
			Если ИмяРеквизита = "ДокументыОснования" Тогда
				ДокументыОснования.Загрузить(ЗначениеРеквизита);
			ИначеЕсли ИмяРеквизита = "Ссылка" Тогда
				ДанныеЗаполнения.Вставить("СчетФактураОснование", ЗначениеРеквизита);
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Не обнаружен исходный счет-фактура к исправлению.
		|Введите счет-фактуру к исходному документу покупки, а уже затем введите исправительный счет-фактуру.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения.СчетФактураОснование;
	Иначе
		Основание = СчетФактураОснование;
		Исправление = Истина;
	КонецЕсли;
	
	РеквизитыСчетаФактуры = Документы.СчетФактураПолученный.ДанныеСчетаФактуры(Основание);
	
	Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
		ИмяРеквизита      = РеквизитСФ.Ключ;
		ЗначениеРеквизита = РеквизитСФ.Значение;
		
		Если ИмяРеквизита = "ДокументыОснования" Тогда
			ДокументыОснования.Загрузить(РеквизитСФ.Значение);
		ИначеЕсли ИмяРеквизита = "Дата" Тогда
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если ДанныеЗаполнения <> Неопределено Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Ответственный") Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Подразделение") Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ДатаСоставления") Тогда
		ДатаСоставления = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

// Определяет реквизиты счета-фактуры на основании выбранных документов-оснований
//
// Возвращаемое значение:
//	Структура - реквизиты счета-фактуры.
//
Функция ПолучитьПараметрыСчетаФактурыПоОснованиям()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Организация, Контрагент, КППКонтрагента, ИННКонтрагента, Валюта,
		|СчетФактураОснование, РеквизитыОснований, Ответственный, Подразделение");
	Результат.Вставить("Корректировочный", Ложь);
	Результат.Вставить("Исправление", Ложь);
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	Колонки = РеквизитыОснований.Колонки;
	Колонки.Добавить("ДокументОснование");
	Колонки.Добавить("ИсходныйДокумент");
	Колонки.Добавить("НомерИсходногоДокумента",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Колонки.Добавить("ДатаИсходногоДокумента",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Колонки.Добавить("НомерИсправленияИсходногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Колонки.Добавить("ДатаИсправленияИсходногоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	МассивДокументов = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	
	ТипыОснований = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументов);
	
	Запрос = Новый Запрос;
	ТекстЗапросаОснований = "";
	ТекстЗапросаИсходныхДанных = "";
	
	Для Каждого ТипОснования Из ТипыОснований Цикл
		
		ОбъектыТипа         = ТипОснования.Значение;
		МетаданныеДокумента = ОбъектыТипа[0].Метаданные();
		ИмяОбъекта          = МетаданныеДокумента.Имя;
		
		Запрос.Параметры.Вставить("ДокументОснование_" + ИмяОбъекта, ОбъектыТипа);
		
		Если Не ПустаяСтрока(ТекстЗапросаОснований) Тогда
			ТекстЗапросаОснований = ТекстЗапросаОснований + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
			
		
		Если ИмяОбъекта = "ВозвратТоваровМеждуОрганизациями"
		 Или ИмяОбъекта = "ПередачаТоваровМеждуОрганизациями" Тогда
		 
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.ОрганизацияПолучатель КАК Организация,
			|	ВЫБОР КОГДА Таблица.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		Таблица.Контрагент
			|	ИНАЧЕ
			|		Таблица.Организация
			|	КОНЕЦ                 КАК Контрагент,
			|	""""                  КАК КППКонтрагента,
			|	Таблица.Валюта        КАК Валюта,
			|	Таблица.Подразделение КАК Подразделение
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";

		ИначеЕсли ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" Тогда
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация КАК Организация,
			|	ВЫБОР КОГДА Таблица.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		Таблица.Контрагент
			|	ИНАЧЕ
			|		Таблица.Комиссионер
			|	КОНЕЦ                 КАК Контрагент,
			|	""""                  КАК КППКонтрагента,
			|	Таблица.Валюта        КАК Валюта,
			|	Таблица.Подразделение КАК Подразделение
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Грузоотправитель", МетаданныеДокумента) Тогда
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация    КАК Организация,
			|	Таблица.Контрагент     КАК Контрагент,
			|	Таблица.Контрагент.КПП КАК КППКонтрагента,
			|	Таблица.Контрагент.ИНН КАК ИННКонтрагента,
			|	Таблица.Валюта         КАК Валюта,
			|	Таблица.Подразделение  КАК Подразделение
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		Иначе
			
			ТекстЗапросаОснований = ТекстЗапросаОснований + 
			"ВЫБРАТЬ
			|	Таблица.Организация КАК Организация,
			|	Таблица.Контрагент  КАК Контрагент,
			|ВЫБОР
			|	КОГДА Таблица.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			И Таблица.Грузоотправитель <> Таблица.Контрагент
			|			И Таблица.Грузоотправитель.ОбособленноеПодразделение
			|			И Таблица.Грузоотправитель.ГоловнойКонтрагент = Таблица.Контрагент
			|		ТОГДА Таблица.Грузоотправитель.КПП
			|	ИНАЧЕ Таблица.Контрагент.КПП
			|КОНЕЦ                    КАК КППКонтрагента,
			|ВЫБОР
			|	КОГДА Таблица.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			И Таблица.Грузоотправитель <> Таблица.Контрагент
			|			И Таблица.Грузоотправитель.ОбособленноеПодразделение
			|			И Таблица.Грузоотправитель.ГоловнойКонтрагент = Таблица.Контрагент
			|		ТОГДА Таблица.Грузоотправитель.ИНН
			|	ИНАЧЕ Таблица.Контрагент.ИНН
			|КОНЕЦ                    КАК ИННКонтрагента,
			|	Таблица.Валюта        КАК Валюта,
			|	Таблица.Подразделение КАК Подразделение
			|ИЗ
			|	Документ." + ИмяОбъекта + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&ДокументОснование_" + ИмяОбъекта + ")";
			
		КонецЕсли;
		
		Если ИмяОбъекта = "КорректировкаПриобретения" Тогда
			
			ТекстЗапросаИсходныхДанных = 
			"ВЫБРАТЬ
			|	ТекущийДокумент.Ссылка                КАК Ссылка,
			|	ТекущийДокумент.ДокументОснование     КАК ДокументОснование,
			|	ТекущийДокумент.ВидКорректировки КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ДокументыОснования
			|ИЗ
			|	Документ.КорректировкаПриобретения КАК ТекущийДокумент
			|ГДЕ
			|	ТекущийДокумент.Ссылка В (&ДокументОснование_КорректировкаПриобретения)
			|	И ТекущийДокумент.ВидКорректировки В (
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
			|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТекущийДокумент.Ссылка                КАК Ссылка,
			|	ИсходныйСчетФактура.Ссылка            КАК СчетФактура,
			|	ТекущийДокумент.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
			|ИЗ
			|	ВТ_ДокументыОснования КАК ТекущийДокумент
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ИсходныйСФОснования
			|		ПО ТекущийДокумент.ДокументОснование = ИсходныйСФОснования.ДокументОснование
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ИсходныйСчетФактура
			|		ПО ИсходныйСФОснования.Ссылка = ИсходныйСчетФактура.Ссылка
			|			И ИсходныйСчетФактура.Проведен
			|			И НЕ ИсходныйСчетФактура.Исправление
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсходныеСчетаФактуры.Ссылка                КАК Ссылка,
			|	Основания.ДокументОснование                КАК ДокументОснование,
			|	ИсходныеСчетаФактуры.СчетФактура           КАК СчетФактура,
			|	ИсходныеСчетаФактуры.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ОснованияИсходных
			|ИЗ
			|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
			|		ПО ИсходныеСчетаФактуры.СчетФактура = Основания.Ссылка
			|;
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка                КАК Ссылка,
			|	КорректировкаПриобретения.Ссылка          КАК ДокументОснование,
			|	ОснованияИсходных.СчетФактура           КАК СчетФактура,
			|	ОснованияИсходных.ХозяйственнаяОперация КАК ХозяйственнаяОперация
			|ПОМЕСТИТЬ ВТ_ОснованияИсходныхИКорректировки
			|ИЗ
			|	ВТ_ОснованияИсходных КАК ОснованияИсходных
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
			|		ПО ОснованияИсходных.ДокументОснование = КорректировкаПриобретения.ДокументОснование
			|		И (КорректировкаПриобретения.Проведен)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка,
			|	ОснованияИсходных.ДокументОснование,
			|	ОснованияИсходных.СчетФактура,
			|	ОснованияИсходных.ХозяйственнаяОперация
			|ИЗ
			|	ВТ_ОснованияИсходных КАК ОснованияИсходных
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОснованияИсходных.Ссылка      КАК ДокументОснование,
			|	ОснованияИсходных.СчетФактура КАК ИсходныйСчетФактура,
			|	ИсходныеДокументы.Ссылка      КАК ИсходныйДокумент,
			|	ИсходныеДокументы.Номер       КАК НомерИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.ДатаСоставления, Неопределено)
			|	ИНАЧЕ
			|		ИсходныеДокументы.ДатаСоставления
			|	КОНЕЦ КАК ДатаИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ИсходныеДокументы.НомерИсправления
			|	ИНАЧЕ
			|		Неопределено
			|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
			|		ИсходныеДокументы.Дата
			|	ИНАЧЕ
			|		Неопределено
			|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
			|	
			|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
			|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
			|			ИЛИ ИсходныеДокументы.Корректировочный ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ КАК Корректировочный,
			|
			|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
			|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок) ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|	КОНЕЦ КАК Исправление
			|
			|ИЗ
			|	ВТ_ОснованияИсходныхИКорректировки КАК ОснованияИсходных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураОснования
			|		ПО ОснованияИсходных.ДокументОснование = СчетФактураОснования.ДокументОснование
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК ИсходныеДокументы
			|		ПО СчетФактураОснования.Ссылка = ИсходныеДокументы.Ссылка
			|			И (НЕ ИсходныеДокументы.Ссылка = &СчетФактура)
			|			И (НЕ ИсходныеДокументы.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИсходныеДокументы.Корректировочный УБЫВ,
			|	ВЫБОР КОГДА ИсходныеДокументы.Корректировочный И ИсходныеДокументы.Исправление ТОГДА
			|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.Дата, Неопределено)
			|	КОГДА ИсходныеДокументы.Корректировочный ТОГДА
			|		ИсходныеДокументы.Дата
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ УБЫВ,
			|	НомерИсправления УБЫВ
			|
			|ИТОГИ
			|	МАКСИМУМ(Корректировочный),
			|	МАКСИМУМ(Исправление)
			|ПО
			|	ОБЩИЕ,
			|	ИсходныйСчетФактура";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаОснований = Неопределено;
	ВыборкаИсходныхДанных = Неопределено;
	
	Если ПустаяСтрока(ТекстЗапросаИсходныхДанных) Тогда
	
		Запрос.Текст = ТекстЗапросаОснований;
		ВыборкаОснований = Запрос.Выполнить().Выбрать();
	
	Иначе
		
		Запрос.Текст = ТекстЗапросаОснований + "
		|;
		|
		|" + ТекстЗапросаИсходныхДанных;
		
		Запрос.УстановитьПараметр("СчетФактура", Ссылка);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВыборкаОснований = РезультатЗапроса[0].Выбрать();
		КоличествоЗапросов = РезультатЗапроса.Количество();
		ВыборкаИсходныхДанных = РезультатЗапроса[КоличествоЗапросов-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;
	
	ПерваяСтрока        = Истина;
	РазныеОрганизации   = Ложь;
	РазныеКонтрагенты   = Ложь;
	РазныеВалюты        = Ложь;
	РазныеПодразделения = Ложь;
	
	Пока ВыборкаОснований.Следующий() Цикл
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаОснований);
		Иначе
			РазныеОрганизации   = РазныеОрганизации Или Результат.Организация <> ВыборкаОснований.Организация;
			РазныеКонтрагенты   = РазныеКонтрагенты Или Результат.Контрагент <> ВыборкаОснований.Контрагент;
			РазныеВалюты        = РазныеВалюты Или Результат.Валюта <> ВыборкаОснований.Валюта;
			РазныеПодразделения = РазныеПодразделения Или Результат.Подразделение <> ВыборкаОснований.Подразделение;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеВалюты Тогда
			
		ТекстСообщения = НСтр("ru='Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:'")
			+ ?(РазныеОрганизации, Символы.ПС + НСтр("ru='- организация'"), "")
			+ ?(РазныеКонтрагенты, Символы.ПС + НСтр("ru='- контрагент'"), "")
			+ ?(РазныеВалюты, Символы.ПС + НСтр("ru='- валюта документа'"), "") + Символы.ПС 
			+ НСтр("ru='Необходимо изменить реквизиты документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если РазныеОрганизации Тогда
			Результат.Организация = Неопределено;
		КонецЕсли;
		Если РазныеКонтрагенты Тогда
			Результат.Контрагент = Неопределено;
		КонецЕсли;
		Если РазныеВалюты Тогда
			Результат.Валюта = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Ответственный = Пользователи.ТекущийПользователь();
	
	Если РазныеПодразделения Тогда
		Результат.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Результат.Ответственный, Результат.Подразделение);
	КонецЕсли;	
	
	Если ВыборкаИсходныхДанных <> Неопределено Тогда
		
		Если ВыборкаИсходныхДанных.Следующий() Тогда
			Результат.Исправление      = ВыборкаИсходныхДанных.Исправление;
			Результат.Корректировочный = ВыборкаИсходныхДанных.Корректировочный;
		КонецЕсли;
		
		ВыборкаПоИсходнымСчетамФактуры = ВыборкаИсходныхДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		РеквизитыСчетаФактурыОснования = Неопределено;
		
		Если Результат.Исправление Тогда
			
			ПерваяСтрока               = Истина;
			РазныеСчетФактураОснование = Ложь;
			
			Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
				
				ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
				Если ВыборкаПоДокументам.Следующий() Тогда
					
					Если ПерваяСтрока Тогда
						ПерваяСтрока = Ложь;
						Результат.СчетФактураОснование = ВыборкаПоДокументам.ИсходныйДокумент;
					Иначе
						РазныеСчетФактураОснование = РазныеСчетФактураОснование
							Или Результат.СчетФактураОснование <> ВыборкаПоДокументам.ИсходныйДокумент;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РазныеСчетФактураОснование Тогда
				Результат.Исправление = Ложь;
				Результат.Корректировочный = Истина;
			Иначе
				РеквизитыСчетаФактурыОснования = Документы.СчетФактураПолученный.ДанныеСчетаФактуры(Результат.СчетФактураОснование);
				Если Результат.Корректировочный И Не РеквизитыСчетаФактурыОснования.Корректировочный Тогда
					Результат.Исправление = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.Корректировочный Тогда
			
			Если Результат.Исправление Тогда
				
				МассивКорректировок = Запрос.Параметры.ДокументОснование_КорректировкаПриобретения;
				ИсходныеДанныеСчетаФактуры = РеквизитыСчетаФактурыОснования.ДокументыОснования;
				
				Для Каждого ОснованиеКорректировка Из МассивКорректировок Цикл
					Для Каждого СтрокаТаблицы Из ИсходныеДанныеСчетаФактуры Цикл
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, СтрокаТаблицы);
						СтрокаСРеквизитами.ДокументОснование = ОснованиеКорректировка;
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВыборкаПоИсходнымСчетамФактуры.Сбросить();
				
				Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
					
					ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
					Пока ВыборкаПоДокументам.Следующий() Цикл
						
						Если РеквизитыОснований.Найти(ВыборкаПоДокументам.ДокументОснование) = Неопределено Тогда
							СтрокаСРеквизитами = РеквизитыОснований.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, ВыборкаПоДокументам);
						КонецЕсли;
						
					КонецЦикла;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыСчетаФактурыПоОснованию() Экспорт
	
	Если ДокументыОснования.Количество() = 0
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ДокументыОснования[0].ДокументОснование;
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено И Не ПараметрыСчетаФактуры.Организация = Организация Тогда
		Номер = "";
		Организация = ПараметрыСчетаФактуры.Организация;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено И Не ПараметрыСчетаФактуры.Контрагент = Контрагент Тогда
		Контрагент = ПараметрыСчетаФактуры.Контрагент;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Валюта = Неопределено
			И Валюта <> ВалютаРегламентированногоУчета И Валюта <> ПараметрыСчетаФактуры.Валюта Тогда
		Валюта = ПараметрыСчетаФактуры.Валюта;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Ответственный = Неопределено И Не ПараметрыСчетаФактуры.Ответственный = Ответственный Тогда
		Ответственный = ПараметрыСчетаФактуры.Ответственный;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Подразделение = Неопределено И Не ПараметрыСчетаФактуры.Подразделение = Подразделение Тогда
		Подразделение = ПараметрыСчетаФактуры.Подразделение;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		Исправление = ПараметрыСчетаФактуры.Исправление;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И Исправление Тогда
		СчетФактураОснование = ПараметрыСчетаФактуры.СчетФактураОснование;
	КонецЕсли;
	
	ЗаполнитьКодВидаОперации();
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	Если РеквизитыОснования.Количество() > 0 Тогда
		ДокументыОснования.Загрузить(РеквизитыОснования);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеДокументовОснований(Отказ)
	
	МассивОснований = Новый Массив;
	ЭтоЗакупкаУПоставщика = Неопределено;
	ТипОснования = Неопределено;
	ВалютаОснования = Неопределено;
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		Если ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		 ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		 ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			Если ЭтоЗакупкаУПоставщика = Неопределено Тогда
				ЭтоЗакупкаУПоставщика = Истина;
			ИначеЕсли НЕ ЭтоЗакупкаУПоставщика Тогда
				СообщитьОбОшибкеТиповОснований(СтрокаОснование.НомерСтроки, Отказ);
			КонецЕсли;
			
			
		ИначеЕсли ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "ПокупательНеПлательщикНДС") = Истина Тогда
			СообщитьОбОшибкеОснования(СтрокаОснование.НомерСтроки, Отказ);
			
		ИначеЕсли ТипОснования = Неопределено Тогда
			ТипОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
			
		ИначеЕсли ТипОснования <> Неопределено И ТипОснования <> ТипЗнч(СтрокаОснование.ДокументОснование) Тогда
			СообщитьОбОшибкеТиповОснований(СтрокаОснование.НомерСтроки, Отказ);
			
		КонецЕсли;
		
		Если МассивОснований.Найти(СтрокаОснование.ДокументОснование) <> Неопределено Тогда
			СообщитьОбОшибкеДублейОснований(СтрокаОснование.НомерСтроки, СтрокаОснование.ДокументОснование, Отказ);
		КонецЕсли; 
		
		МассивОснований.Добавить(СтрокаОснование.ДокументОснование);
		
		Если ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) И
			НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "Проведен") Тогда
			СообщитьОбОшибкеСостоянияПроведенияОснований(СтрокаОснование.НомерСтроки, Отказ);
		КонецЕсли;
		
		Если ВалютаОснования = Неопределено Тогда
			ВалютаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "Валюта");
		ИначеЕсли ВалютаОснования <> Неопределено
				И ВалютаОснования <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "Валюта") Тогда
			СообщитьОбОшибкеВалютыОснований(СтрокаОснование.НомерСтроки, Отказ);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОснование.ДокументОснование, "НалогообложениеНДС")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДокументОснование, "НалогообложениеНДС") = 
				Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			СообщитьОбОшибкеНалогообложенияНДСОснований(СтрокаОснование.НомерСтроки, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеТиповОснований(НомерСтроки, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Запрещено выбирать в качестве оснований документы различных типов.'");
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеОснования(НомерСтроки, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Запрещено формировать счет-фактуру полученный для возврата от неплательщиков НДС.'");
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеДублейОснований(НомерСтроки, Основание, Отказ)
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В строке %1 в качестве документа-основания повторно указан документ %2.'"),
		НомерСтроки,
		Основание);
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеСостоянияПроведенияОснований(НомерСтроки, Отказ)
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В строке %1 документ-основание не проведен. Счет-фактуру можно провести только на основании проведенных документов.'"),
		НомерСтроки,);
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеВалютыОснований(НомерСтроки, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Запрещено выбирать в качестве оснований документы, оформленные в различной валюте.'");
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеНалогообложенияНДСОснований(НомерСтроки, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Запрещено выбирать в качестве оснований документы с типом налогообложения ""Облагается НДС у покупателя"".'");
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	Если Исправление ИЛИ Корректировочный Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка <> &Ссылка
	|	И ТаблицаОснований.ДокументОснование В(&СписокОснований)
	|	И ТаблицаОснований.Ссылка.Проведен
	|	И (ТаблицаОснований.Ссылка.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)
	|	И (НЕ ТаблицаОснований.Ссылка.Исправление)
	|	И (НЕ ТаблицаОснований.ДокументОснование ССЫЛКА Документ.ОтчетКомитенту)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокОснований", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура'"),
			Выборка.ДокументОснование,
			Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ДокументыОснования",
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
