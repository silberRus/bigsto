#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает сумму неотмененных строк заявки
//
// Параметры:
//	ТолькоЗалогЗаТару - Булево - признак залога за тару
//
// Возвращаемое значение:
//	Число - сумма заменяющих строк
Функция ПолучитьСуммуЗаменяющихСтрок(ТолькоЗалогЗаТару = Ложь) Экспорт
	
	СуммаЗаменяющихСтрок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И ((Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ (НЕ &ВернутьМногооборотнуюТару) ИЛИ &ТребуетсяЗалогЗаТару)
	|			И НЕ &ТолькоЗалогЗаТару)
	|		ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И &ВернутьМногооборотнуюТару
	|			И &ТребуетсяЗалогЗаТару
	|			И &ТолькоЗалогЗаТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", ЗаменяющиеТовары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("ТолькоЗалогЗаТару", ТолькоЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаЗаменяющихСтрок = Выгрузка[0].СуммаСНДС;
	
	Возврат СуммаЗаменяющихСтрок;
	
КонецФункции

// Рассчитывает количество неотмененных строк заявки
//
// Возвращаемое значение:
//	Число - количество неотмененных строк
//
Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
	
	НайденныеСтроки = ЗаменяющиеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

// Заполняет табличную часть ЭтапыГрафикаОплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты(СуммаОтклоненияМерныхТоваров = 0, ТолькоРаспределять = Ложь) Экспорт
	
	СуммаДоплаты = ПолучитьСуммуЗаменяющихСтрок();
	СуммаЗалога  = ПолучитьСуммуЗаменяющихСтрок(Истина);
	
	Если СуммаДоплаты > 0 Или СуммаЗалога > 0 Тогда
	
		Если ТолькоРаспределять Тогда
			
			СуммаДоплаты = СуммаДоплаты - СуммаЗалога;
			
			ГрафикСоглашенияЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
				И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
			ГрафикЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
				И ЗначениеЗаполнено(ГрафикОплаты);
			
			ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
				ЭтотОбъект,
				ГрафикСоглашенияЗаполнен,
				ГрафикЗаполнен,
				СуммаДоплаты,
				СуммаЗалога,,,ТолькоРаспределять);
				
			ЭтапыОплатыСервер.РаспределитьСуммуОтклоненияПоЭтапамГрафикаОплаты(
									ЭтотОбъект.ЭтапыГрафикаОплаты,
									СуммаОтклоненияМерныхТоваров);
			
		ИначеЕсли ЗначениеЗаполнено(ГрафикОплаты) Тогда
			
			ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
				ЭтотОбъект,
				СуммаДоплаты - СуммаЗалога,
				СуммаЗалога);
			
		Иначе
			
			Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				ЭтапыГрафикаОплаты.Очистить();
			КонецЕсли;
			
			Если ПолучитьКоличествоЗаказанныхСтрок() <> 0 Тогда
				
				НовыйЭтап                 = ЭтапыГрафикаОплаты.Добавить();
				НовыйЭтап.ВариантОплаты   = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
				
				Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
					НовыйЭтап.ДатаПлатежа = ЖелаемаяДатаОтгрузки;
				ИначеЕсли ЗначениеЗаполнено(Дата) Тогда
					НовыйЭтап.ДатаПлатежа = Дата;
				Иначе
					НовыйЭтап.ДатаПлатежа = ТекущаяДатаСеанса();
				КонецЕсли;
				
				НовыйЭтап.ПроцентПлатежа  = 100;
				НовыйЭтап.СуммаПлатежа    = СуммаДоплаты - СуммаЗалога;
				НовыйЭтап.ПроцентЗалогаЗаТару = 100;
				НовыйЭтап.СуммаЗалогаЗаТару   = СуммаЗалога;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//	ЗаполнятьРеквизитыОснования - Булево - признак заполнения ревизитов основания
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж, Знач ЗаполнятьРеквизитыОснования = Истина) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнятьРеквизитыОснования Тогда
		
		Валюта = УсловияПродаж.Валюта;
		НалогообложениеНДС   = УсловияПродаж.НалогообложениеНДС;
		ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
		ПорядокОплаты        = УсловияПродаж.ПорядокОплаты;
		
		Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
			Склад = УсловияПродаж.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(УсловияПродаж.ХозяйственнаяОперация);
		ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
		СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
		ТребуетсяЗалогЗаТару = УсловияПродаж.ТребуетсяЗалогЗаТару;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> ФормаОплаты;
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ИзмененаОрганизация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);  
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);

	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	ХозяйственнаяОперацияДоговора = Неопределено;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	КонецЕсли;
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Если ЗначениеЗаполнено(ХозяйственнаяОперацияДоговора) Тогда
			Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, Валюта);
		КонецЕсли;
	
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
	Иначе
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокОплаты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	КонецЕсли;
		
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
// Параметры:
//  ПересчитатьЦены - Булево - перезаполнять цены
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено(Партнер) ИЛИ НЕ ИспользоватьСоглашенияСКлиентами Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура("ВыбранноеСоглашение, ПустаяСсылкаДокумента", 
			Соглашение,
			Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка()));
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
				(Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
				Если ИспользоватьСоглашенияСКлиентами И ПересчитатьЦены Тогда
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ПродажиСервер.ЗаполнитьЦены(
						ВозвращаемыеТовары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							"Цена, СтавкаНДС, ВидЦены"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы));
					ПродажиСервер.ЗаполнитьЦены(
						ЗаменяющиеТовары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, РасчитыватьНаборы, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							Истина,
							"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
					
				КонецЕсли;
				
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) И ИспользоватьСоглашенияСКлиентами Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
		
КонецПроцедуры

// Заполняет условия продаж по соглашению в заявке на возврат
//
// Параметры:
//	ЗаполнитьЗаменяющиеЦены - Булево - Признак пересчета цен
//
Процедура ЗаполнитьУсловияПродажПоСоглашению(ЗаполнитьЗаменяющиеЦены = Истина) Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		ВозвращаемыеТовары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы));
	Если ЗаполнитьЗаменяющиеЦены Тогда
		ПродажиСервер.ЗаполнитьЦены(
			ЗаменяющиеТовары,
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, Соглашение, РасчитыватьНаборы, ПоляЗаполнения",
				Дата,
				Валюта,
				Соглашение,
				Истина,
				"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
			),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
		
		Если ВозвращаемыеТовары.Количество() > 0 Тогда
			
			Если ЗакупкиВызовСервера.ДатаПоступленияПустая(ЭтотОбъект, "ВозвращаемыеТовары") Тогда
				Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления >= Дата Тогда
					ДатаПоступления = ЖелаемаяДатаПоступления;
				Иначе
					ДатаПоступления = ТекущаяДатаСеанса();
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ВозвращаемыеТовары Цикл
				Если ПоступлениеОднойДатой Или Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
					СтрокаТЧ.ДатаПоступления = ДатаПоступления;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	
	ЭтоЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если ЭтоЗаказСоСклада Тогда
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ЗаменяющиеТовары, Ложь, Статус);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Заменяющие);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий.Возвращаемые);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Отменяет все строки, по которым не было документально оформлен возврат
//
// Параметры:
//	ПроверятьОстатки - Булево
//
// Возвращаемое значение:
//	Число - Количество отмененных строк
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	
	СтруктураВозврата = Новый Структура("КоличествоСтрок",0);
	
	ПроверятьОстатки             = СтруктураПараметров.ПроверятьОстатки;
	ОтменитьНеотработанныеСтроки = СтруктураПараметров.ОтменитьНеотработанныеСтроки;
	СкорректироватьМерныеТовары  = СтруктураПараметров.СкорректироватьМерныеТоварыПоПриемке;
	ТаблицаТовары                = ЭтотОбъект[СтруктураПараметров.ИмяТабличнойЧасти];
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено",
		Истина
	);
	
	Если Не ПроверятьОстатки Тогда
		Для Сч = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[Сч].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[Сч], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.КоличествоСтрок = КоличествоОтмененныхСтрок;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС КАК ЧИСЛО) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	&ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура   КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	СУММА(ТоварыКПоступлению.КОформлениюПриход
	|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Обороты(&НачПериод,&КонПериод,,
	|		ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозвратТоваровОтКлиента) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                     КАК Характеристика,
	|	ТаблицаТовары.Упаковка                           КАК Упаковка,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                   КАК СуммаСНДС,
	|	СУММА(ТаблицаТовары.Количество)                  КАК Количество
	|ПОМЕСТИТЬ ВТТаблицаТоваровКПроверке
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.Заявка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Поступления.Номенклатура   КАК Номенклатура,
	|	Поступления.Характеристика КАК Характеристика,
	|	СУММА(Поступления.Оформлено) КАК Оформлено,
	|	СУММА(Поступления.Принято)   КАК Принято,
	|	СУММА(Поступления.Заказано)  КАК Заказано
	|ПОМЕСТИТЬ ВтПринято
	|ИЗ (ВЫБРАТЬ
	|		Остатки.Номенклатура                          КАК Номенклатура,
	|		Остатки.Характеристика                        КАК Характеристика,
	|		Остатки.КОформлениюРасход                     КАК Оформлено,
	|		0                                             КАК Принято,
	|		0                                             КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.ОстаткиИОбороты(,,,,
	|			ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозвратТоваровОтКлиента) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКПоступлениюОстатки.Номенклатура               КАК Номенклатура,
	|		ТоварыКПоступлениюОстатки.Характеристика             КАК Характеристика,
	|		0                                                    КАК Оформлено,
	|		ТоварыКПоступлениюОстатки.КОформлениюОрдеровРасход   КАК Принято,
	|		0                                                    КАК Заказано
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(,,,,
	|			ДокументПоступления =&ЗаявкаНаВозвратТоваровОтКлиента) КАК ТоварыКПоступлениюОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.Номенклатура                           КАК Номенклатура,
	|		ТаблицаТовары.Характеристика                         КАК Характеристика,
	|		0                                                    КАК Оформлено,
	|		0                                                    КАК Принято,
	|		ТаблицаТовары.Количество                             КАК Заказано
	|	ИЗ
	|		ВТТаблицаТоваровКПроверке КАК ТаблицаТовары) КАК Поступления
	|СГРУППИРОВАТЬ ПО
	|	Поступления.Номенклатура,
	|	Поступления.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поступления.Номенклатура                          КАК Номенклатура,
	|	Поступления.Характеристика                        КАК Характеристика,
	|	ВЫБОР 
	|		КОГДА Поступления.Заказано - Поступления.Оформлено < 0 
	|			ТОГДА Поступления.Заказано - Поступления.Оформлено
	|		КОГДА НЕ &ОрдернаяСхемаПриПриемке 
	|			ТОГДА  Поступления.Заказано - Поступления.Оформлено
	|		ИНАЧЕ ВЫБОР 
	|					КОГДА Поступления.Оформлено > Поступления.Принято
	|						ТОГДА Поступления.Заказано - Поступления.Оформлено
	|					ИНАЧЕ Поступления.Заказано - Поступления.Принято
	|			КОНЕЦ
	|	КОНЕЦ                                             КАК КОформлениюОстаток,
	|	Поступления.Заказано                              КАК Количество
	|ИЗ
	|	ВтПринято КАК Поступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Заявка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ВозвращаемыеТовары.Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Номенклатура, Характеристика, Упаковка, Количество, СуммаСНДС, Отменено"
		)
	);
	Запрос.УстановитьПараметр("ЗаявкаНаВозвратТоваровОтКлиента", Ссылка);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад,"ИспользоватьОрдернуюСхемуПриПоступлении,ДатаНачалаОрдернойСхемыПриПоступлении");
	Запрос.УстановитьПараметр("ОрдернаяСхемаПриПриемке", РеквизитыСклада.ИспользоватьОрдернуюСхемуПриПоступлении И Дата >= РеквизитыСклада.ДатаНачалаОрдернойСхемыПриПоступлении);
		
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаявкиНаВозвратТоваровОтКлиентов",
																"ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозвратТоваровОтКлиента",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[4].Пустой() И Результат[5].Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;

	ДопустимыеОтклонения = Результат[1].Выгрузить();
	Выборка = Результат[4].Выбрать();
	ВыборкаОтменыБезПроверок = Результат[5].Выбрать();

	Пока ВыборкаОтменыБезПроверок.Следующий() Цикл
		
		Строка = ТаблицаТовары[ВыборкаОтменыБезПроверок.НомерСтроки-1];
			
		ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
		Продолжить;
			
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика, Отменено", 
				Выборка.Номенклатура,
				Выборка.Характеристика, 
				Ложь);
		
		СтрокиЗаказа = ТаблицаТовары.НайтиСтроки(ПараметрыПоиска);
		
		Отклонение = Выборка.КОформлениюОстаток;
		
		Для Сч = 0 По СтрокиЗаказа.Количество()-1 Цикл
			
			Строка = СтрокиЗаказа[сч];
			
			Если Отклонение = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтруктураПоискаОтклонений = Новый Структура("Номенклатура, Характеристика",
														Строка.Номенклатура,
														Строка.Характеристика);
			
			СтрокиДопустимыхОтклонений = ДопустимыеОтклонения.НайтиСтроки(СтруктураПоискаОтклонений);
			Если СтрокиДопустимыхОтклонений.Количество() > 0 
				И СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение > 0 Тогда
				ДопустимноеОтклонение = СтрокиДопустимыхОтклонений[0].ДопустимоеОтклонение;
			Иначе
				ДопустимноеОтклонение = 0;
			КонецЕсли;
			
			КоэффициентУпаковки = Строка.Количество / Строка.КоличествоУпаковок;
			
			Если Отклонение > 0 
				И (ОтменитьНеотработанныеСтроки ИЛИ (СкорректироватьМерныеТовары И ДопустимноеОтклонение >= Отклонение)) Тогда
				Если Строка.Количество <= Отклонение Тогда
					ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
					Отклонение = Отклонение - Строка.Количество;
				Иначе
					
					НоваяСтрока = ВозвращаемыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
					НоваяСтрока.КодСтроки = 0;
					
					Строка.Количество              = Выборка.Количество - Выборка.КОформлениюОстаток;
					Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КОформлениюОстаток) / КоэффициентУпаковки;
					НоваяСтрока.Количество         = Выборка.КОформлениюОстаток;
					НоваяСтрока.КоличествоУпаковок = Выборка.КОформлениюОстаток / КоэффициентУпаковки;
					
					Ценообразование.ПересчитатьСуммыВСтроке(Строка, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
					Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
					
					Отклонение = Отклонение - НоваяСтрока.Количество;
					
				КонецЕсли;
			ИначеЕсли Отклонение < 0 И (СкорректироватьМерныеТовары И ДопустимноеОтклонение >= Отклонение * (-1)) Тогда 
				Строка.Количество = Строка.Количество + Отклонение * (-1);
				Строка.КоличествоУпаковок = Строка.Количество / КоэффициентУпаковки;;
				Ценообразование.ПересчитатьСуммыВСтроке(Строка, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
			КонецЕсли;
			
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата.КоличествоСтрок = КоличествоОтмененныхСтрок;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус                  = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка();
	ЖелаемаяДатаОтгрузки    = Дата(1,1,1);
	ЖелаемаяДатаПоступления = Дата(1,1,1);
	ДатаСогласования        = Дата(1,1,1);
	ДатаПоступления         = Дата(1,1,1);
	ДатаОтгрузки            = Дата(1,1,1);
	Согласован              = Ложь;
	ДокументРеализации      = Неопределено;
	Назначение              = Неопределено;
	ИдентификаторПлатежа    = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	ЗаменяющиеТоварыМаксимальныйКодСтроки   = 0;
	ВозвращаемыеТоварыМаксимальныйКодСтроки = 0;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И ЗначениеЗаполнено(Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
		Если УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Тогда
			Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
				ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
				ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
			КонецЕсли;
		Иначе
			Соглашение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ВозвращаемыеТовары Цикл
		
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = Дата(1,1,1);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЗаменяющиеТовары Цикл
		
		СтрокаТЧ.КодСтроки    = 0;
		СтрокаТЧ.ДатаОтгрузки = Дата(1,1,1);
		СтрокаТЧ.Отменено = Ложь;
		СтрокаТЧ.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		
	КонецЦикла;
	
	ЭтотОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	
	ВозвращаемыеСерии.Очистить();
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "ЗаменяющиеТовары", Истина,,Истина);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполненНаОснованииДокумента = Ложь;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ЗаполнитьПоПереданнойТаре") Тогда
			ЗаполнитьДокументНаОснованииПереданнойТары(ДанныеЗаполнения);
			ЗаполненНаОснованииДокумента = Истина;
		ИначеЕсли ДанныеЗаполнения.Свойство("АктОРасхождениях") 
			И ДанныеЗаполнения.Свойство("РеализацияТоваровУслуг") Тогда
			ЗаполнитьДокументНаОснованииАктаПриемки(ДанныеЗаполнения);
		Иначе
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьДокументНаОснованииРеализацииТоваровИУслуг(ДанныеЗаполнения);
		ЗаполненНаОснованииДокумента = Истина;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьДокументНаОснованииЧекаККМ(ДанныеЗаполнения);
		ЗаполненНаОснованииДокумента = Истина;
	КонецЕсли;
	
	Если Не ЗаполненНаОснованииДокумента Тогда
		ИнициализироватьУсловияПродаж();
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ПорядокОплаты) Тогда	
		ВалютаОплаты  = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта,НалогообложениеНДС,ВалютаОплаты);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВозвращаемыеТовары";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	Если СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ПараметрыОкругления.ИмяТЧ = "ЗаменяющиеТовары";
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	Иначе
		ЗаменяющиеТовары.Очистить();
	КонецЕсли;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВозвращаемыеТовары", "ВозвращаемыеТоварыМаксимальныйКодСтроки");
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ЗаменяющиеТовары", "ЗаменяющиеТоварыМаксимальныйКодСтроки");
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,ПараметрыУказанияСерий.Возвращаемые);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,ПараметрыУказанияСерий.Заменяющие);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
		ВозвратПорчи = Ложь;
		Для Каждого СтрТабл из ВозвращаемыеТовары Цикл
			Если СтрТабл.Порча Тогда
				ВозвратПорчи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	Иначе
		ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕСли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары
		Или ГрафикИсполненияВДоговоре Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		Если Не ТребуетсяЗалогЗаТару Тогда
			Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
				ЭтапОплаты.СуммаЗалогаЗаТару = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаДокумента = ПолучитьСуммуДокумента();
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		
		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		
	КонецЕсли;
	
	СуммаЗамены = ПолучитьСуммуЗаменяющихСтрок();
	СуммаВозвратнойТары = ПолучитьСуммуВозвратнойТары();
	
	НоваяДатаПоступления = Дата(1,1,1);
	
	Если ВозвращаемыеТовары.Количество() > 0 Тогда
			
		Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату Тогда
			
			Если ВозвращаемыеТовары.Количество() > 0 Тогда
				
				ТаблицаТоваров = ВозвращаемыеТовары.Выгрузить(, "ДатаПоступления");
				ТаблицаТоваров.Сортировать("ДатаПоступления Возр");
				НоваяДатаПоступления = ТаблицаТоваров[0].ДатаПоступления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПервогоПоступления = НоваяДатаПоступления;
	
	Если Не НеОтгружатьЧастями Тогда
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если ЗаменяющиеТовары.Количество() > 0 Тогда
			
		Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату
			ИЛИ Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению 
			ИЛИ Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
			ИЛИ Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = ЗаменяющиеТовары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = ЗаменяющиеТовары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	Иначе
		ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, ЗаменяющиеТовары, "ДатаОтгрузки");
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	МассивСтатусовНеСогласован = Новый Массив();
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		МассивСтатусовНеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		Подразделение = Неопределено;
		Для Каждого СтрокаЗаменяющиеТовары Из ЗаменяющиеТовары Цикл
			СтрокаЗаменяющиеТовары.ПроцентРучнойСкидки = Неопределено;
			СтрокаЗаменяющиеТовары.СуммаРучнойСкидки = Неопределено;
			СтрокаЗаменяющиеТовары.ПроцентАвтоматическойСкидки = Неопределено;
			СтрокаЗаменяющиеТовары.СуммаАвтоматическойСкидки = Неопределено;
		КонецЦикла;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		Договор = Неопределено;
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ЧекККМ = Неопределено;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		Касса = Неопределено;
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	Иначе
		ИдентификаторПлатежа = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Партнер);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "ЗаменяющиеТовары", "Отменено");
	
	МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");

	Если Не ПоступлениеОднойДатой Или 
		ПоступлениеОднойДатой И 
		Не(Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВозвращаемыеТовары";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	Если СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ПараметрыПроверки.ИмяТЧ = "ЗаменяющиеТовары";
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
		НоменклатураСервер.ПроверитьЗаполнениеСодержания(ЭтотОбъект, Отказ, "ЗаменяющиеТовары");
	КонецЕсли;
	
	Если СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Или
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары");
	КонецЕсли;
	
	// Склад должен быть заполнен в статусах больше, чем Согласован
	ВсеЗаменяющиеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "ЗаменяющиеТовары", "Отменено");
	ВсеВозвращаемыеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "ВозвращаемыеТовары", "Отменено");
	Если НЕ ЗначениеЗаполнено(Склад) 
		И Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
		И (ВозвращаемыеТовары.Количество() > 0 И НЕ ВсеВозвращаемыеСтрокиОтменены)
		И (ЗаменяющиеТовары.Количество() = 0 ИЛИ ВсеЗаменяющиеСтрокиОтменены) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Склад",
			,
			Отказ);
		
	КонецЕсли;

	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована И
		ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаСогласования",
			,
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата)
		И СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаОтгрузки",
			,
			Отказ);
		
	КонецЕсли;
	
	// Желамемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
	
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);

	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.НоменклатураОприходование");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.ДатаПоступления");
	
	Для ТекИндекс = 0 По ВозвращаемыеТовары.Количество()-1 Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Возвращаемые товары""'");
		АдресОшибки =  СтрЗаменить(АдресОшибки, "%НомерСтроки%", ВозвращаемыеТовары[ТекИндекс].НомерСтроки);
		
		// Дата поступления в тч ВозвращаемыеТовары обязательна к заполнению только для заявок в 
		// статусах КВозврату, КОбеспечению, КОтгрузке, Выполнена
		Если Не ПоступлениеОднойДатой
			И (Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) И
			Не ВозвращаемыеТовары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
			
		// Дата поступления в тч Возвращаемые ВозвращаемыеТовары должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].ДатаПоступления) И ВозвращаемыеТовары[ТекИндекс].ДатаПоступления < НачалоДня(Дата) Тогда
		
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Если клиент возвращает некачественный товар то тогда нужно проверять данные некачественного товара
		Если ВозвращаемыеТовары[ТекИндекс].Порча Тогда
			Если Не ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].НоменклатураОприходование) Тогда
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура (оприходование)""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "НоменклатураОприходование"),
				,
				Отказ);
			ИначеЕсли ВозвращаемыеТовары[ТекИндекс].НоменклатураОприходование = ВозвращаемыеТовары[ТекИндекс].Номенклатура Тогда
				ТекстОшибки = НСтр("ru='Возвращаемый товар другого качества совпадает с ранее отгруженным товаром.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "НоменклатураОприходование"),
				,
				Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями И 
		ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата) И 
		СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
	
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ);

	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой И 
		ЗначениеЗаполнено(ДатаПоступления) И 
		ДатаПоступления < НачалоДня(Дата) Тогда
	
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ);

	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ДатаОтгрузки");
	
	СоСклада  = Перечисления.ВариантыОбеспечения.СоСклада;
	ИзЗаказов = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	Отгрузить = Перечисления.ВариантыОбеспечения.Отгрузить;
	ОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	НеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	
	ДатаОтгрузкиВыдатьОшибку = Ложь;
	СкладВыдатьОшибку        = Ложь;
	СоответствиеКодовСтрок = Новый Соответствие;
	
	Если СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
	
		Для ТекИндекс = 0 По ЗаменяющиеТовары.Количество()-1 Цикл
				
			АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Заменяющие товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ЗаменяющиеТовары[ТекИндекс].НомерСтроки);

			Если Не ЗаменяющиеТовары[ТекИндекс].Отменено 
				И ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения <> НеТребуется
				И ((Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
							Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
						И (ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = СоСклада
							Или ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = Отгрузить
							Или ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = ОтгрузитьОбособленно
							Или ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = ИзЗаказов)
					Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
					Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
					Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) Тогда

				Если Не ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки) И Не НеОтгружатьЧастями Тогда

					// Дата отгрузки в тч ЗаменяющиеТовары обязательна
					ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата отгрузки""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки + АдресОшибки,
						ЭтотОбъект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары",
							ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
						,
						Отказ);

				КонецЕсли;

				Если Не ДатаОтгрузкиВыдатьОшибку И НеОтгружатьЧастями И Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
					ДатаОтгрузкиВыдатьОшибку = Истина;
				КонецЕсли;

			КонецЕсли;

			// Проверка заполнения склада в статусе согласован, остальные проверки заполнения склада выполняются
			// в модуле ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи.
			Если Не ЗаменяющиеТовары[ТекИндекс].Отменено И (
					(Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
							Или Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
						И (ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = СоСклада
							ИЛИ ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = Отгрузить
							ИЛИ ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = ОтгрузитьОбособленно
							Или ЗаменяющиеТовары[ТекИндекс].ВариантОбеспечения = ИзЗаказов)) Тогда

				Если Не СкладВыдатьОшибку И Не ЗначениеЗаполнено(Склад) Тогда
					СкладВыдатьОшибку = Истина;
				КонецЕсли;

			КонецЕсли;

			// Причина отмены обязательна для заполнения в строках без признака Отменено
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
				И ЗаменяющиеТовары[ТекИндекс].Отменено И
				Не ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ПричинаОтмены) Тогда
					
				ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
					,
					Отказ);
				
			КонецЕсли;
				
			// Дата отгрузки в тч Товары должна быть не меньше даты документа
			Если Не НеОтгружатьЧастями И
				ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки)	И 
				ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки < НачалоДня(Дата) Тогда
					
				ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
					,
					Отказ);
				
			КонецЕсли;
			ЗаказыСервер.ПроверитьДублиКодовСтрокВТаблице(ЭтотОбъект,
				ЗаменяющиеТовары[ТекИндекс].КодСтроки,
				ЗаменяющиеТовары[ТекИндекс].НомерСтроки,
				СоответствиеКодовСтрок,
				Отказ,
				"ЗаменяющиеТовары");
		КонецЦикла;

		Если ДатаОтгрузкиВыдатьОшибку Тогда

			ТекстОшибки = НСтр("ru='Поле ""Дата отгрузки"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);

		КонецЕсли;

		Если СкладВыдатьОшибку Тогда

			ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Склад", , Отказ);

		КонецЕсли;

	КонецЕсли;
	
	ПорядокРасчетовПоДокументу = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕСли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ПорядокРасчетовПоДокументу <> Перечисления.ПорядокРасчетов.ПоНакладным
		И СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары
		И Не ГрафикИсполненияВДоговоре Тогда
		
		СуммаДоплаты = ПолучитьСуммуЗаменяющихСтрок();
		СуммаЗалога = ПолучитьСуммуЗаменяющихСтрок(Истина);
		
		ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
			ЭтотОбъект,
			СуммаДоплаты,
			СуммаЗалога,
			Истина,
			Отказ,
			Истина);
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ПроцентРучнойСкидки");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.СуммаРучнойСкидки");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ПроцентАвтоматическойСкидки");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.СуммаАвтоматическойСкидки");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВозвращаемыеТовары";
	ПараметрыПроверки.СуффиксДопРеквизита = "Оприходование";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
	                                            ПараметрыУказанияСерий.Возвращаемые,
	                                            Отказ,
	                                            МассивНепроверяемыхРеквизитов);
	
	Если СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "ЗаменяющиеТовары";
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
		                                            ПараметрыУказанияСерий.Заменяющие,
		                                            Отказ,
		                                            МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	
	Если СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.КоличествоУпаковок");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.Цена");
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьВидНоменклатурыОприходования(ЭтотОбъект,Отказ,"ВозвращаемыеТовары");
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	СуммаЗамены = ПолучитьСуммуЗаменяющихСтрок();
	СуммаВозвратнойТары = ПолучитьСуммуВозвратнойТары();
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьВозвращаемыхТоваров(ЭтотОбъект, "ВозвращаемыеТовары", Отказ);
	КонтрольЗаполненияЦенВозвращаемыхТоваров(Отказ);
	
	Если (Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
		ИЛИ Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
		ИЛИ Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		И ЗаменяющиеТовары.Количество() > 0 Тогда
		
		ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	// Инициализация данных документа
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаявкиНаВозвратТоваровОтКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПродажиСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ, Истина);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СделкиСКлиентами.Ссылка КАК Сделка,
		|	СделкиСКлиентами.Партнер КАК Партнер,
		|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
		|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
		|		ПО (СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Основание");
		
	Запрос.УстановитьПараметр("Основание",Основание);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ЗаполнитьУсловияПродажПоСоглашению();
		Иначе
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЧекаККМ(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) КАК ХозяйственнаяОперация,
		|	ОтчетОРозничныхПродажах.Ссылка    КАК ДокументРеализации,
		|	ОтчетОРозничныхПродажах.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель) КАК Партнер,
		|	ЧекККМ.Ссылка                     КАК ЧекККМ,
		|	ЧекККМ.Статус                     КАК Статус,
		|	ЧекККМ.КассоваяСмена              КАК КассоваяСмена,
		|	ЧекККМ.Организация                КАК Организация,
		|	ЧекККМ.Валюта                     КАК Валюта,
		|	ЧекККМ.Валюта                     КАК ВалютаВзаиморасчетов,
		|	ЧекККМ.Склад                      КАК Склад,
		|	ЧекККМ.ЦенаВключаетНДС            КАК ЦенаВключаетНДС,
		|	ЧекККМ.НалогообложениеНДС         КАК НалогообложениеНДС,
		|
		|	ВЫБОР КОГДА ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНеЦ КАК ЕстьОшибкиСтатус,
		|
		|	ЧекККМ.Товары.(
		|		НоменклатураНабора                            КАК НоменклатураНабора,
		|		ХарактеристикаНабора                          КАК ХарактеристикаНабора,
		|		Номенклатура                                  КАК Номенклатура,
		|		Номенклатура.ТипНоменклатуры  КАК ТипНоменклатуры,
		|		Характеристика                                КАК Характеристика,
		|		Серия                                         КАК Серия,
		|		Упаковка                                      КАК Упаковка,
		|		КоличествоУпаковок                            КАК КоличествоУпаковок,
		|		Количество                                    КАК Количество,
		|		ВЫБОР
		|			КОГДА
		|				СуммаРучнойСкидки + СуммаАвтоматическойСкидки = 0
		|				Или КоличествоУпаковок = 0
		|			ТОГДА
		|				Цена
		|			ИНАЧЕ
		|				Сумма / КоличествоУпаковок
		|		КОНеЦ КАК Цена,
		|		Сумма                                         КАК Сумма,
		|		СтавкаНДС                                     КАК СтавкаНДС,
		|		СуммаНДС                                      КАК СуммаНДС,
		|		ВЫБОР КОГДА ЧекККМ.ЦенаВключаетНДС
		|			ТОГДА Сумма
		|			ИНАЧЕ Сумма + СуммаНДС
		|		КОНеЦ                                         КАК СуммаСНДС,
		|		СуммаРучнойСкидки                             КАК СуммаРучнойСкидки,
		|		СуммаАвтоматическойСкидки                     КАК СуммаАвтоматическойСкидки,
		|		ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
		|		ПроцентАвтоматическойСкидки                   КАК ПроцентАвтоматическойСкидки
		|	) КАК Товары,
		|
		|	ЧекККМ.Серии.(
		|		Номенклатура                                  КАК Номенклатура,
		|		Характеристика                                КАК Характеристика,
		|		Серия                                         КАК Серия,
		|		Количество                                    КАК Количество
		|	) КАК Серии
		|
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|		ЛЕВОЕ СОЕДИНеНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|ГДЕ
		|	ЧекККМ.Ссылка = &ДокументОснование");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Пробит);
		
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ЧекККМ,
		ВыборкаШапка.Статус,
		,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	Если РозничныеПродажи.СменаОткрыта(ВыборкаШапка.КассоваяСмена, Дата) Тогда
		ВызватьИсключение НСтр("ru='Кассовая смена открыта! Ввод на основании чека документа ""Заявка на возврат товаров от клиента"" при открытой кассовой смене запрещен.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ТаблицаТоваров = ВыборкаШапка.Товары.Выгрузить();
	
	ДокументРеализации = РозничныеПродажи.ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ДокументОснование);
	
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
			ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			НоваяСтрока = ВозвращаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			НоваяСтрока.ДокументРеализации = ДокументРеализации;
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемыеСерии.Загрузить(ВыборкаШапка.Серии.Выгрузить());
	
	Если ЗначениеЗаполнено (Партнер) Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию, Ложь);
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка                       КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер                      КАК Партнер,
		|	СоглашениеСКлиентом.КонтактноеЛицо               КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям КАК ДоступноВнешнимПользователям,
		|
		|	СоглашениеСКлиентом.Статус                       КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое,
		|	СоглашениеСКлиентом.НаправлениеДеятельности КАК НаправлениеДеятельности 
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
		|");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		Выборка.ДоступноВнешнимПользователям);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоСоглашению();

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииРеализацииТоваровИУслуг(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|	И КорректировкаРеализации.ДокументОснование = &ДокументОснование
		|	И НЕ КорректировкаРеализации.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.МоментВремени УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
		|	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Соглашение.ГрафикОплаты
		|		ИНАЧЕ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты
		|	КОНЕЦ КАК ГрафикОплаты,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Соглашение.ГрафикОплаты.ФормаОплаты
		|		ИНАЧЕ РеализацияТоваровУслуг.ЗаказКлиента.ФормаОплаты
		|	КОНЕЦ КАК ФормаОплаты,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Партнер КАК Партнер,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
		|	РеализацияТоваровУслуг.Договор КАК Договор,
		|	РеализацияТоваровУслуг.Валюта КАК Валюта,
		|	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РеализацияТоваровУслуг.Сделка КАК Сделка,
		|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ РеализацияТоваровУслуг.Склад
		|	КОНЕЦ КАК Склад,
		|	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперацияРеализация,
		|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
		|	РеализацияТоваровУслуг.ПорядокРасчетов КАК ПорядокРасчетов,
		|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	РеализацияТоваровУслуг.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	РеализацияТоваровУслуг.Соглашение.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	РеализацияТоваровУслуг.Статус КАК СтатусДокумента,
		|	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
		|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|				ИЛИ РеализацияТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	РеализацияТоваровУслуг.Соглашение.ДоступноВнешнимПользователям КАК СоглашениеДоступноВнешнимПользователям,
		|	РеализацияТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НоменклатураНабора КАК НоменклатураНабора,
		|	ТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
		|	ТаблицаТовары.КодСтроки КАК КодСтроки,
		|	ТаблицаТовары.Склад КАК Склад,
		|	ТаблицаТовары.ЗаказКлиента КАК ЗаказКлиента,
		|	0 КАК СуммаРучнойСкидки,
		|	0 КАК СуммаАвтоматическойСкидки
		|ПОМЕСТИТЬ ТоварыДокументаПродажи
		|ИЗ
		|	Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ТаблицаТовары.Ссылка = ДанныеПоследнейКорректировки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.НоменклатураНабора,
		|	ТаблицаТовары.ХарактеристикаНабора,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Номенклатура.ТипНоменклатуры,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.ВидЦены,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Сумма,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС,
		|	ТаблицаТовары.СуммаСНДС,
		|	ТаблицаТовары.КодСтроки,
		|	ТаблицаТовары.Склад,
		|	ТаблицаТовары.ЗаказКлиента,
		|	ТаблицаТовары.СуммаРучнойСкидки,
		|	ТаблицаТовары.СуммаАвтоматическойСкидки
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL
		|	И ТаблицаТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыДокументаПродажи.НоменклатураНабора КАК НоменклатураНабора,
		|	ТоварыДокументаПродажи.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТоварыДокументаПродажи.Номенклатура КАК Номенклатура,
		|	ТоварыДокументаПродажи.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТоварыДокументаПродажи.Характеристика КАК Характеристика,
		|	ТоварыДокументаПродажи.Серия КАК Серия,
		|	ТоварыДокументаПродажи.Назначение КАК Назначение,
		|	ТоварыДокументаПродажи.Упаковка КАК Упаковка,
		|	СУММА(ТоварыДокументаПродажи.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СРЕДНЕЕ(ТоварыДокументаПродажи.Цена) КАК Цена,
		|	СУММА(ТоварыДокументаПродажи.Количество) КАК Количество,
		|	СУММА(ТоварыДокументаПродажи.Сумма) КАК Сумма,
		|	ТоварыДокументаПродажи.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ТоварыДокументаПродажи.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТоварыДокументаПродажи.СуммаСНДС) КАК СуммаСНДС,
		|	СУММА(ТоварыДокументаПродажи.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
		|	СУММА(ТоварыДокументаПродажи.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСКидки
		|ПОМЕСТИТЬ ТоварыРеализации
		|ИЗ
		|	ТоварыДокументаПродажи КАК ТоварыДокументаПродажи
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыДокументаПродажи.НоменклатураНабора,
		|	ТоварыДокументаПродажи.ХарактеристикаНабора,
		|	ТоварыДокументаПродажи.Номенклатура,
		|	ТоварыДокументаПродажи.ТипНоменклатуры,
		|	ТоварыДокументаПродажи.Характеристика,
		|	ТоварыДокументаПродажи.Серия,
		|	ТоварыДокументаПродажи.Упаковка,
		|	ТоварыДокументаПродажи.СтавкаНДС,
		|	ТоварыДокументаПродажи.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровОтКлиентаТовары.НоменклатураНабора КАК НоменклатураНабора,
		|	ВозвратТоваровОтКлиентаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
		|	ВозвратТоваровОтКлиентаТовары.Назначение КАК Назначение,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка КАК Упаковка,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.Количество) КАК Количество,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.Сумма) КАК Сумма,
		|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
		|	СРЕДНЕЕ(ВозвратТоваровОтКлиентаТовары.Цена) КАК Цена
		|ПОМЕСТИТЬ ТоварыПредыдущихВозвратов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
		|ГДЕ
		|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации = &ДокументОснование
		|	И ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтКлиентаТовары.НоменклатураНабора,
		|	ВозвратТоваровОтКлиентаТовары.ХарактеристикаНабора,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура.ТипНоменклатуры,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС,
		|	ВозвратТоваровОтКлиентаТовары.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыРеализации.НоменклатураНабора КАК НоменклатураНабора,
		|	ТоварыРеализации.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТоварыРеализации.Номенклатура КАК Номенклатура,
		|	ТоварыРеализации.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТоварыРеализации.Характеристика КАК Характеристика,
		|	ТоварыРеализации.Серия КАК Серия,
		|	ТоварыРеализации.Назначение КАК Назначение,
		|	ТоварыРеализации.Количество - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0) КАК Количество,
		|	ТоварыРеализации.КоличествоУпаковок - ЕСТЬNULL(ТоварыПредыдущихВозвратов.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
		|	ТоварыРеализации.Упаковка КАК Упаковка,
		|	ТоварыРеализации.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТоварыРеализации.КоличествоУпаковок - ЕСТЬNULL(ТоварыПредыдущихВозвратов.КоличествоУпаковок, 0) = 0
		|			ТОГДА ТоварыРеализации.Цена
		|		ИНАЧЕ (ТоварыРеализации.Сумма - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Сумма, 0)) / (ТоварыРеализации.КоличествоУпаковок - ЕСТЬNULL(ТоварыПредыдущихВозвратов.КоличествоУпаковок, 0))
		|	КОНЕЦ КАК Цена,
		|	ТоварыРеализации.Сумма - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Сумма, 0) КАК Сумма,
		|	ТоварыРеализации.СуммаНДС - ЕСТЬNULL(ТоварыПредыдущихВозвратов.СуммаНДС, 0) КАК СуммаНДС,
		|	ТоварыРеализации.СуммаСНДС - ЕСТЬNULL(ТоварыПредыдущихВозвратов.СуммаСНДС, 0) КАК СуммаСНДС,
		|	&ДокументОснование КАК ДокументРеализации
		|ИЗ
		|	ТоварыРеализации КАК ТоварыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПредыдущихВозвратов КАК ТоварыПредыдущихВозвратов
		|		ПО ТоварыРеализации.Номенклатура = ТоварыПредыдущихВозвратов.Номенклатура
		|			И ТоварыРеализации.НоменклатураНабора = ТоварыПредыдущихВозвратов.НоменклатураНабора
		|			И ТоварыРеализации.ХарактеристикаНабора = ТоварыПредыдущихВозвратов.ХарактеристикаНабора
		|			И ТоварыРеализации.Характеристика = ТоварыПредыдущихВозвратов.Характеристика
		|			И ТоварыРеализации.Серия = ТоварыПредыдущихВозвратов.Серия
		|			И ТоварыРеализации.Назначение = ТоварыПредыдущихВозвратов.Назначение
		|ГДЕ
		|	ТоварыРеализации.Количество - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереданнаяВозвратнаяТараОстатки.Номенклатура КАК Номенклатура,
		|	ПереданнаяВозвратнаяТараОстатки.Характеристика КАК Характеристика,
		|	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи КАК ДокументПередачи,
		|	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток КАК Количество,
		|	ПереданнаяВозвратнаяТараОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ втПереданнаяВозвратнаяТара
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(, ДокументПередачи = &ДокументОснование) КАК ПереданнаяВозвратнаяТараОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыРеализации.Номенклатура,
		|	ТоварыРеализации.Характеристика,
		|	ВЫРАЗИТЬ(&ДокументОснование КАК Документ.РеализацияТоваровУслуг).Партнер,
		|	&ДокументОснование,
		|	-ТоварыРеализации.Количество + ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0),
		|	-ТоварыРеализации.Сумма + ЕСТЬNULL(ТоварыПредыдущихВозвратов.Сумма, 0)
		|ИЗ
		|	ТоварыРеализации КАК ТоварыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПредыдущихВозвратов КАК ТоварыПредыдущихВозвратов
		|		ПО ТоварыРеализации.Номенклатура = ТоварыПредыдущихВозвратов.Номенклатура
		|			И ТоварыРеализации.НоменклатураНабора = ТоварыПредыдущихВозвратов.НоменклатураНабора
		|			И ТоварыРеализации.ХарактеристикаНабора = ТоварыПредыдущихВозвратов.ХарактеристикаНабора
		|			И ТоварыРеализации.Характеристика = ТоварыПредыдущихВозвратов.Характеристика
		|			И ТоварыРеализации.Серия = ТоварыПредыдущихВозвратов.Серия
		|ГДЕ
		|	ТоварыРеализации.Количество - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0) > 0
		|	И НЕ ТоварыРеализации.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТоварыРеализации.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|	И &ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПереданнаяВозвратнаяТара.Номенклатура КАК Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика КАК Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументПередачи КАК ДокументРеализации,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК Количество,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК КоличествоУпаковок,
		|	СУММА(втПереданнаяВозвратнаяТара.Сумма) КАК Сумма,
		|	СУММА(втПереданнаяВозвратнаяТара.Сумма) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА СУММА(втПереданнаяВозвратнаяТара.Количество) = 0
		|			ТОГДА СУММА(втПереданнаяВозвратнаяТара.Сумма)
		|		ИНАЧЕ СУММА(втПереданнаяВозвратнаяТара.Сумма) / СУММА(втПереданнаяВозвратнаяТара.Количество)
		|	КОНЕЦ КАК Цена,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС
		|ИЗ
		|	втПереданнаяВозвратнаяТара КАК втПереданнаяВозвратнаяТара
		|
		|СГРУППИРОВАТЬ ПО
		|	втПереданнаяВозвратнаяТара.Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументПередачи
		|
		|ИМЕЮЩИЕ
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) > 0");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = Результат[1].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.Ссылка,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов,
		ВыборкаШапка.СоглашениеДоступноВнешнимПользователям);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(ВыборкаШапка.ХозяйственнаяОперацияРеализация);
	
	ТаблицаТоваров = Результат[5].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
			(ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара 
			 И (НЕ ВыборкаШапка.ВернутьМногооборотнуюТару ИЛИ ЗначениеЗаполнено(ТекСтрока.НоменклатураНабора))) Тогда
			
			НоваяСтрока = ВозвращаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(
				НоваяСтрока,
				ВыборкаШапка.ЦенаВключаетНДС,
				Ложь,
				Ложь,
				Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТары = Результат[7].Выгрузить();
	
	Для каждого ТекущаяСтрока Из ТаблицаТары Цикл
		
		НоваяСтрока = ВозвращаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
		
		Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(НоваяСтрока, ВыборкаШапка.ЦенаВключаетНДС, Ложь, Ложь, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
			Партнер = Справочники.Партнеры.РозничныйПокупатель;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
				ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения.Свойство("Партнер") Тогда
		Партнер = ДанныеЗаполнения.Партнер;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПереданнойТары(Знач РеквизитыЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаполнения.РеквизитыШапки);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если Не ЗначениеЗаполнено(Соглашение) Тогда
			ЗаполнитьУсловияПродажПоУмолчанию(Ложь);
		Иначе
			СрокВозвратаМногооборотнойТары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Соглашение,
				"СрокВозвратаМногооборотнойТары");
		КонецЕсли;
	Иначе
		
		Если РеквизитыЗаполнения.РеквизитыШапки.ЦенаВключаетНДС = Неопределено Тогда
			
			РеквизитыЦеныПоУмолчанию = Справочники.ВидыЦен.ВидЦеныИПризнакЦенаВключаетНДСПоУмолчанию(
				Новый Структура("ИспользоватьПриПродаже", Истина),
				Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка());
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЦеныПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли;
	
	ВернутьМногооборотнуюТару = Истина;
	ТребуетсяЗалогЗаТару = РеквизитыЗаполнения.РеквизитыШапки.ПредусмотренЗалогЗаТару;
	
	Если ЭтоАдресВременногоХранилища(РеквизитыЗаполнения.АдресТарыВоВременномХранилище) Тогда
		
		ПереданнаяТара = ПолучитьИзВременногоХранилища(РеквизитыЗаполнения.АдресТарыВоВременномХранилище);
		ВозвращаемыеТовары.Загрузить(ПереданнаяТара);
		
		Для каждого ТекущаяСтрока Из ВозвращаемыеТовары Цикл
			
			ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма;
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
			ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекущаяСтрока, ЦенаВключаетНДС, Ложь, Ложь, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииАктаПриемки(Знач ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = Документы.АктОРасхожденияхПослеОтгрузки.ТекстЗапросаПерепоставленныйТовар();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.РеализацияТоваровУслуг);
	Запрос.УстановитьПараметр("АктОРасхождениях", ДанныеЗаполнения.АктОРасхождениях);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ВыборкаШапка = ПакетЗапросов[1].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.Ссылка,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ТаблицаТоваров = ПакетЗапросов[12].Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			
		НоваяСтрока = ВозвращаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		Ценообразование.ПересчитатьСуммыВСтроке(
			НоваяСтрока,
			Ложь,
			Ложь,
			Ложь,
			ВыборкаШапка.ЦенаВключаетНДС);
		
	КонецЦикла;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
			

	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;

	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.Касса 		= Касса;
	СтруктураПараметров.ФормаОплаты = ФормаОплаты;

	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		Контрагент, , 
		БанковскийСчетКонтрагента);
	Приоритет                 = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	ПорядокРасчетов           = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	НеОтгружатьЧастями        = Истина;
	ПоступлениеОднойДатой     = Истина;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Статус                    = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату;
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
			ДатаОтгрузки = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		Статус                    = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
	КонецЕсли; 
	
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ОбеспечиватьЗаказыОбособленно");
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ЗаменяющиеТовары, ЗаполнитьОбособленно, Статус);

	ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	
КонецПроцедуры

Процедура ИнициализироватьУсловияПродаж()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда

		Массив.Добавить(Движения.ЗаявкиНаВозвратТоваровОтКлиентов);
		Массив.Добавить(Движения.ЗаказыКлиентов);
		Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);

	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента).Заменяющие;
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ПолучитьСуммуДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено И
	|	(Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ НЕ &ВернутьМногооборотнуюТару
	|	ИЛИ &ТребуетсяЗалогЗаТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", ВозвращаемыеТовары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаИтого = Выгрузка[0].СуммаСНДС;
	Возврат СуммаИтого;
	
КонецФункции

Функция ПолучитьСуммуВозвратнойТары()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И &ВернутьМногооборотнуюТару
	|	И НЕ &ТребуетсяЗалогЗаТару
	|");
	
	Запрос.УстановитьПараметр("Товары", ЗаменяющиеТовары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаВозвратнойТарыЗаменяющихСтрок = Выгрузка[0].СуммаСНДС;
	Возврат СуммаВозвратнойТарыЗаменяющихСтрок;
	
КонецФункции

// Формирует проверку заполнения цен в документе
//
// Параметры:
// Отказ - Булево 
//
Процедура КонтрольЗаполненияЦенВозвращаемыхТоваров(Отказ)
	
	ПараметрыОтбора = Новый Структура("Отменено", Ложь); 
	ТаблицаПроверяемыеТовары = ЭтотОбъект.ВозвращаемыеТовары.Выгрузить(ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура  КАК Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.НомерСтроки   КАК НомерСтроки,
	|	ВозвратТоваровОтКлиентаТовары.Цена          КАК Цена
	|ПОМЕСТИТЬ ПроверяемыеТовары
	|ИЗ
	|	&ТаблицаПроверяемыеТовары КАК ВозвратТоваровОтКлиентаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Цена = 0
	|			И (ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ &ТребуетсяЗалогЗаТару
	|			ИЛИ НЕ &ВозвратМногооборотнойТары) ТОГДА
	|				ИСТИНА
	|		ИНАЧЕ
	|				ЛОЖЬ
	|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
	|ИЗ
	|	ПроверяемыеТовары КАК ВременнаяТаблицаТовары";
	
	Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
	Запрос.УстановитьПараметр("ВозвратМногооборотнойТары", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""ВозвращаемыеТовары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", Выборка.НомерСтроки,"Цена"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
