&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
			ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
			ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Если ЗначениеЗаполнено(Параметры.Основание) и ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
				Объект.Основание = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(Параметры.Основание,
					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметры.Основание.Номер),
					Параметры.Основание.Дата);
			КонецЕсли;
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненного();
	
	УточнитьСписокХозяйственныхОпераций();
	
	УстановитьЗаголовокСтатьяДоходовРасходов();
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание);
			
		Если ПериодАвансовогоОтчета = "Через неделю" Тогда
			Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		КонецЕсли;
	КонецЕсли;
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентам
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборЗаявокВДокументыОплаты" Тогда
		
		ОбработкаПодбораИзЗаявок(РезультатВыбора.АдресЗаявокВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу")
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком")
		И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику")
		И Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Отказ = Истина;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу")
			И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком")
			И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику") Тогда
		
			ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(
				ЭтаФорма,
				Новый ОписаниеОповещения("ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Иначе
			ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПересчитатьСуммуДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса Тогда
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РасходныйКассовыйОрдер", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ПереключательРасшифровки Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ДополнительныеСвойства.Вставить("РасшифровкаБезРазбиения", Истина);
		
		Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	
	Если Не ПереключательРасшифровки Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
				Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в расшифровке платежа введено более одной строки!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
	ПересчитатьДатуАвансовогоОтчета();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Список работников будет очищен. Продолжить?'");
		
		КодОтвета = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ХозяйственнаяОперацияПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ХозяйственнаяОперацияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Объект.ХозяйственнаяОперация = СохраненнаяХозяйственнаяОперация;
		Возврат;
	КонецЕсли;
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	ХозяйственнаяОперацияПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзмененииФрагмент()
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	СтруктурыРеквизитов = ПолучитьРеквизитыКассы(Объект.Касса);
	
	РазрешеныПлатежиБезУказанияЗаявок =
		СтруктурыРеквизитов.РазрешитьПлатежиБезУказанияЗаявок
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;
	
	Если Не ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктурыРеквизитов.Валюта) Тогда
		
		Если Объект.Валюта <> СтруктурыРеквизитов.Валюта Тогда
			ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		КонецЕсли;
		КассаПриИзмененииСервер(СтруктурыРеквизитов, Ложь);
		
	Иначе
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пересчитать суммы в документе в валюту %1?'"),
			СтруктурыРеквизитов.Валюта);
		
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать'"));
		КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешенПересчетВВалюту", ЭтотОбъект, Новый Структура("СтруктурыРеквизитов", СтруктурыРеквизитов));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДиалогаВопрос);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
	ФискальнаяОперацияОбновитьСтатус();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенПересчетВВалюту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		Если ТекущаяВалюта <> ДополнительныеПараметры.СтруктурыРеквизитов.Валюта Тогда
			ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		КонецЕсли;
		КассаПриИзмененииСервер(ДополнительныеПараметры.СтруктурыРеквизитов, Истина);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
	Иначе
		
		Объект.Касса = ТекущаяКасса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииСервер();
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента, Ложь);
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Для каждого СтрокаРасшифровка Из Объект.РасшифровкаПлатежа Цикл
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаРасшифровка, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда
		РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПолучательПриИзменении(Элемент)
	
	КассаПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ВалютаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаявкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокЗаявок.Количество() = 1 Тогда
		ПоказатьЗначение(, СписокЗаявок[0].Значение);
	Иначе
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокЗаявок,
				НСтр("ru='Заявки на расход ДС (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоЗаявкамПриИзменении(Элемент)
	
	ПриИзмененииОплатыПоНесколькимЗаявкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПриИзменении(Элемент)
	ВедомостьПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Возврат // В УТ код данного обработчика пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаПриИзменении(Элемент)
	
	ПересчитатьДатуАвансовогоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвансовогоОтчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ДоДаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату отчета по выдаваемому авансу'") + " ";
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст),
			,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элемент.ОграничениеТипа = ОписаниеТиповДата;
		
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РедактированиеТекста = Ложь;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ВыбранноеЗначение) <> Тип("Дата") И ВыбранноеЗначение <> "ДоДаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < Объект.Дата Тогда
			ВыбраннаяДата = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ВыбраннаяДата;
		ПериодАвансовогоОтчета = ВыбраннаяДата;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
		
		Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
		
		Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
		Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
	Иначе
		
		Если ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
			Возврат;
		КонецЕсли;
		
		Если Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ТекущаяДата() + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(ТекущаяДата(), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДатаАвансовогоОтчета.Видимость = (ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРасшифровка И Не ПереключательРасшифровки Тогда
		РасшифровкаПлатежаПриНачалеРедактирования(Элемент, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатие(Элемент)
	
	Модифицированность = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") 
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		ПараметрыФормы.Вставить("Контрагент",            Объект.ОрганизацияПолучатель);
	Иначе
		ПараметрыФормы.Вставить("Контрагент",            Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ГруппаФинансовогоУчета",  Объект.ГруппаФинансовогоУчета);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("Договор",                 Объект.Договор);
	ПараметрыФормы.Вставить("Организация",             Объект.Организация);
	
	ПараметрыФормы.Вставить("ДокументСсылка",          Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьРасшифровкуВоВременноеХранилище());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораРеквизитовОбъектаРасчетовПлатежа", 
		ПараметрыФормы,
		ЭтаФорма, ,
		ВариантОткрытияОкна.ОтдельноеОкно , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаРеквизитыОбъектаРасчетовНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ГруппаФинансовогоУчета  = Результат.ГруппаФинансовогоУчета;
	Объект.НаправлениеДеятельности = Результат.НаправлениеДеятельности;
	Объект.Договор                 = Результат.Договор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов) Тогда
		СтруктураОтбора.Вставить("ВалютаВзаиморасчетов", Элементы.РасшифровкаПлатежа.ТекущиеДанные.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("РежимВыбора", Истина);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию") 
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		СтруктураОтбора.Вставить("ОрганизацияПолучатель", Объект.ОрганизацияПолучатель);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
		ОткрытьФорму("Справочник.ДоговорыМеждуОрганизациями.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметровВыбора.Вставить("Отбор",СтруктураОтбора);
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора",
			СтруктураПараметровВыбора,
			Элемент,
			Элемент,)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальнаяОперацияСтатусОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ФискальнаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование,
		СтатьяДвиженияДенежныхСредств);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаТаблицы.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ПриДобавлениСтрокиРасшифровкиПлатежа(СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииЯчейки(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаВзаиморасчетов)
		И СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта
		И СтрокаТаблицы.СуммаВзаиморасчетов <> СтрокаТаблицы.Сумма Тогда
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияЗаказПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", Объект.Организация);
	
	ОплатаМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию");
	ВозвратМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	
	Если ОплатаМеждуОрганизациями ИЛИ ВозвратМеждуОрганизациями Тогда
		МассивОрганизаций = Новый Массив();
		МассивОрганизаций.Добавить(Объект.Организация);
		МассивОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
		
		ЗначенияОтбора.Вставить("Организация", МассивОрганизаций);
		ЗначенияОтбора.Вставить("Контрагент", МассивОрганизаций);
	Иначе
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ЭтоРасчетыСклиентами = ВозвратМеждуОрганизациями Или ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	НастройкиВыбора = ФинансыКлиент.ПараметрыВыбораДокументаРасчетов();
	НастройкиВыбора.РедактируемыйДокумент = Объект.Ссылка;
	НастройкиВыбора.ЭтоРасчетыСКлиентами = ЭтоРасчетыСклиентами;
	НастройкиВыбора.Валюта = Объект.Валюта;
	НастройкиВыбора.Сумма = Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сумма;
	
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(ЗначенияОтбора, НастройкиВыбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ИсключаемыеСвойства = "";
		Если ВыбранноеЗначение.Свойство("СтатьяДвиженияДенежныхСредств")
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.СтатьяДвиженияДенежныхСредств) Тогда
			ИсключаемыеСвойства = "СтатьяДвиженияДенежныхСредств";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение, , ИсключаемыеСвойства);
		Модифицированность = Истина;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ЭтаСтрока.СуммаВзаиморасчетов = 0;
	ЭтаСтрока.ТипСуммыКредитаДепозита = ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг");
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(
		ЭтаСтрока.ДоговорКредитаДепозита,
		ЭтаСтрока.ВалютаВзаиморасчетов,
		ЭтаСтрока.СтатьяДвиженияДенежныхСредств);
		
	Если Не ЗначениеЗаполнено(ЭтаСтрока.Партнер) Тогда
		ЭтаСтрока.Партнер = Партнер;
	КонецЕСли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорЛизингаПриИзменении(Элемент)
	
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтаСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	МассивПараметровВыбора = ПараметрыВыбораСтатьиДДС(ЭтаСтрока.ДоговорКредитаДепозита);
	Если ЗначениеЗаполнено(МассивПараметровВыбора) Тогда
		Элемент.ПараметрыВыбора = МассивПараметровВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	РасшифровкаПлатежаЗаявкаПриИзмененииСервер(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ЗаявкаНаРасходованиеДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	ОбновитьИнформациюПоЗаявкам();
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст) 
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст) 
		ИЛИ СтрокаТаблицы.АналитикаРасходовЗаказРеализация
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаТипСуммыКредитаДепозитаПриИзменении(Элемент)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ЭтоВыдачаВДругуюОрганизацию = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"))
		Или (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Касса");
	Если ЭтоВыдачаВДругуюОрганизацию Тогда
		СтруктураРеквизитов.Вставить("КассаПолучатель");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборПоОстаткамЗавершение", 
		ЭтотОбъект, 
		Новый Структура("ЭтоВыдачаВДругуюОрганизацию", ЭтоВыдачаВДругуюОрганизацию));
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзЗаявок(Команда)
	
	ЭтоВыдачаВДругуюОрганизацию = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"))
		Или (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	ЭтоВыдачаПодотчетнику = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
	ЭтоВнутренняяПередача = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
	ЭтоЗаймСотруднику = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Касса");
	Если ЭтоВыдачаВДругуюОрганизацию Тогда
		СтруктураРеквизитов.Вставить("КассаПолучатель");
	ИначеЕсли ЭтоВыдачаПодотчетнику Или ЭтоЗаймСотруднику Тогда
		СтруктураРеквизитов.Вставить("ПодотчетноеЛицо");
	ИначеЕсли Не ЭтоВнутренняяПередача Тогда
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьИзЗаявокЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма, 
		Неопределено, 
		СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиНевыданныхСумм(Команда)
	
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймов") Тогда
		ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере();
	КонецЕсли;
	
	Возврат; // в УТ обработчик пустой
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ИнициализироватьРасшифровкуПлатежа();
	
	УстановитьВидимость();
	УстановитьВозможныеЗначенияКассыПолучателя();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.ЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаБезРазбиенияЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКонтрагента(Объект, Элементы.Контрагент);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита, Истина);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита, Истина);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.СтатьяДвиженияДенежныхСредств);
	
	СтатьяДДСПоХО = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкиПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДДСПоХО;
	КонецЦикла;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		Объект.Касса = Неопределено;
		Если ТекущаяКасса <> Объект.Касса Тогда
			СтруктураРеквизитов = Справочники.Кассы.ПолучитьРеквизитыКассы(Объект.Касса);
			КассаПриИзмененииСервер(СтруктураРеквизитов, Ложь);
			ТекущаяКасса = Объект.Касса;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	ОбновитьИнформациюПоЗаявкам();
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
		И НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПолучитьБанковскийСчетПоУмолчанию();
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Банковский счет"". Возможно, в информационной базе не введено ни одного банковского счета организации!'");
		КонецЕсли;
	КонецЕсли;
	
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
	ФискальнаяОперацияОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущаяКасса = Объект.Касса;
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Если Объект.Организация <> СтруктураРеквизитов.Организация Тогда
			Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
			Объект.БанковскийСчет                      = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		КонецЕсли;
		Если Объект.Валюта <> СтруктураРеквизитов.Валюта Тогда
			Объект.КассаПолучатель                     = Справочники.Кассы.ПустаяСсылка();
			Объект.БанковскийСчет                      = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
			Объект.КассаККМ                            = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
		
		Объект.Организация = СтруктураРеквизитов.Организация;
		
		ПолучитьДоговорПоУмолчаниюСервер();
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, Объект.Валюта);
		
		СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	УстановитьВозможныеЗначенияКассыПолучателя();
	
	УстановитьДоступностьОплатыПоЗаявкам();
	УстановитьВидимостьПоОплатеПоЗаявкамНаСервере();
	УстановитьОтметкуНезаполненного();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ТекущаяВалюта <> Объект.Валюта Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
		И НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ПолучитьБанковскийСчетПоУмолчанию();
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	// Проверим филиалы
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	
	ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость);
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	Элементы.РасшифровкаБезРазбиенияОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	
	ФискальнаяОперацияОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура КассаПолучательПриИзмененииСервер()
	
	ЗаполнитьОрганизациюПолучателя();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		СтруктураРеквизитов = Справочники.Кассы.ПолучитьРеквизитыКассы(Объект.КассаПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Валюта) Тогда
			Объект.ВалютаКонвертации = СтруктураРеквизитов.Валюта;
			УстановитьВозможныеЗначенияКассыПолучателя(Ложь);
			ПересчитатьКурсКонвертации();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Выдать) Тогда
			Объект.Выдать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
		КонецЕсли;
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
		Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТЧ.Партнер = Партнер;
		КонецЦикла;
		
		ПолучитьДоговорПоУмолчаниюСервер();
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
		ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПолучитьДоговорПоУмолчаниюСервер();
	УстановитьВозможныеЗначенияКассыПолучателя();
	ОбновитьОтображениеСтрокаФизическиеЛица();
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.РаспоряжениеНаПеремещениеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		
		Объект.Выдать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПодотчетноеЛицо, "Наименование");
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Объект.ПодотчетноеЛицо).Представление;
		Если НЕ ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				Объект.ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ).Представление;
		КонецЕсли;
		Объект.ПоДокументу = ДокументФизическогоЛица;	
		Объект.Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(Объект.ПодотчетноеЛицо);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ВедомостьПриИзмененииНаСервере()
	
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПослеКонвертацииПриИзменении(Элемент)
	
	СуммаПослеКонвертацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СуммаПослеКонвертацииПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 И Объект.СуммаДокумента = 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации / Объект.КурсКонвертации;
		Иначе
			Объект.СуммаДокумента = Объект.СуммаПослеКонвертации * Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = ?(Объект.СуммаДокумента <> 0, Объект.СуммаПослеКонвертации / Объект.СуммаДокумента, 0);
		Иначе
			Объект.КурсКонвертации = ?(Объект.СуммаПослеКонвертации <> 0, Объект.СуммаДокумента / Объект.СуммаПослеКонвертации, 0);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.РасшифровкаПлатежа[0].Сумма = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		КонецЕсли;
	Иначе
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура("
		|ЗаполнитьПризнакАналитикаРасходовОбязательна, 
		|ЗаполнитьПризнакАналитикаРасходовЗаказРеализация, 
		|ЗаполнитьТипСтатьи");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.РасшифровкаПлатежа.ТекущаяСтрока);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", Элемент.ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаявкаПриИзмененииСервер(ЗаявкаСсылка)
	
	КонтрагентЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаСсылка, "Контрагент");
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = КонтрагентЗаявки;
	ИначеЕсли ЗначениеЗаполнено(КонтрагентЗаявки) И Объект.Контрагент <> КонтрагентЗаявки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получатель платежа ""%1"" в документе оплаты не соответствует получателю ""%2"" в заявке!'"),
			Объект.Контрагент,
			КонтрагентЗаявки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаявкам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"ВалютаВзаиморасчетов,ХарактерДоговора,СтатьяДДСОсновногоДолга,СтатьяДДСПоступленияВыдачи");
	Валюта = Реквизиты.ВалютаВзаиморасчетов;
	МассивСтатей = Новый Массив;
	Если Реквизиты.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = Реквизиты.СтатьяДДСОсновногоДолга;
	Иначе
		СтатьяДДС = Реквизиты.СтатьяДДСПоступленияВыдачи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокПериодовВозникновенияРасходов(
		Элементы.РасшифровкаПлатежаПериодВозникновенияРасхода.СписокВыбора,
		Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаКонвертацииПриИзмененииСервер()
	
	УстановитьВозможныеЗначенияКассыПолучателя();
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОплатыПоНесколькимЗаявкам()
	
	Если Не Объект.ОплатаПоЗаявкам Тогда
		
		Для каждого Строка из Объект.РасшифровкаПлатежа Цикл
			Строка.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
		КонецЦикла;
		
		Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
		СписокЗаявок.Очистить();
		
	КонецЕсли;
	
	ИнициализироватьРасшифровкуПлатежа();
	УстановитьВидимость();
	УстановитьОтметкуНеЗаполненного();
	ОбновитьИнформациюПоЗаявкам();
	
КонецПроцедуры

&НаСервере
Процедура СуммаДокументаПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
	// Заполним реквизит "Партнер"
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаРасшифровки.Партнер.Пустая() Тогда
			СтрокаРасшифровки.Партнер = Партнер;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
		И ЗначениеЗаполнено(ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Заказ) Тогда
		
		Объект.РасшифровкаПлатежа[0].Заказ = ДоговорКонтрагента;
		ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0],
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств, СтавкаНДС"));
			
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("РасшифровкаПлатежа"));
		
	//
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма, "РасшифровкаПлатежа", ТипыСтатей);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Аналитики

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаВалютаВзаиморасчетов.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерВедомостиНаВыплатуЗарплаты.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВедомостиНаВыплатуЗарплаты.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьСинхронизациюДанных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ГруппаОснование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОплатаПоЗаявкам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаАвансовогоОтчета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаРасходов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаСчетРеглУчетаАктивовПассивов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасшифровкаПлатежаЗаказ.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасшифровкаПлатежа.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ссылка");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.DarkGray);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<этот документ>'"));
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьДоступностьОплатыПоЗаявкам();
	УстановитьВидимость();
	УстановитьВозможныеЗначенияКассыПолучателя(Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.ЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.РасшифровкаБезРазбиенияЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКонтрагента(Объект, Элементы.Контрагент);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаБезРазбиенияПартнер);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаПлатежаДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораДоговораКредитаДепозита(Объект, Элементы.РасшифровкаБезРазбиенияДоговорКредитаДепозита);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтатьяДвиженияДенежныхСредств(Объект, Элементы.СтатьяДвиженияДенежныхСредств);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаПлатежаТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.ЗаполнитьСписокТиповСуммКредитовДепозитов(Элементы.РасшифровкаБезРазбиенияТипСуммыКредитаДепозита.СписокВыбора, Объект.ХозяйственнаяОперация);
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаПлатежаСтавкаНДС);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораСтавкиНДС(Элементы.РасшифровкаБезРазбиенияСтавкаНДС);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы);
	Элементы.НадписьВалюта.Заголовок = Строка(Объект.Валюта);
	
	ОбновитьОтображениеСтрокаФизическиеЛица();
	
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаПлатежаПартнер", Объект.ХозяйственнаяОперация);
	ПартнерыИКонтрагенты.ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(
		ЭтотОбъект, "РасшифровкаБезРазбиенияПартнер", Объект.ХозяйственнаяОперация);
	
	СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов();
	
	ФискальнаяОперацияОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассивуРасширенный(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		"РасшифровкаПлатежа",
		"РасшифровкаБезРазбиения");
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам);
		
	Элементы.СтраницыПроблемаПроверкаКонтрагентаКонтрагент.Видимость = Элементы.Контрагент.Видимость;
	
	Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаПлатежаСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость =
		Элементы.РасшифровкаБезРазбиенияСуммаВзаиморасчетов.Видимость И ИспользоватьНесколькоВалют;
	Элементы.НадписьВалюта.Видимость = Не ИспользоватьНесколькоВалют;
	
	Элементы.СтраницаРасшифровка.Видимость =
		МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено
		И (Документы.РасходныйКассовыйОрдер.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) = Неопределено
			Или Документы.РасходныйКассовыйОрдер.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
			И Объект.ОплатаПоЗаявкам);
	
	Если ПереключательРасшифровки Тогда
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаСписком;
	Иначе
		Элементы.СтраницыРасшифровки.ТекущаяСтраница = Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;
	Если НЕ ПереключательРасшифровки Тогда
		УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения();
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
			"РасшифровкаПлатежаПартнер,РасшифровкаБезРазбиенияПартнер",
			"Доступность",
			Истина);
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Раздатчик'");
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Сотрудник'");
	Иначе
		Элементы.ПодотчетноеЛицо.Заголовок = НСтр("ru='Подотчетное лицо'");
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость = 
		ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		И Объект.ДокументОснование <> Неопределено;
		
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОснование",
			"Видимость",
			Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОснование",
			"Видимость",
			Истина);
	КонецЕсли;
	
	УстановитьВидимостьПоОплатеПоЗаявкамНаСервере();
	
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(Объект.ХозяйственнаяОперация) И Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Элементы.НомерВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ПереключательРасшифровки Тогда
		ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаПлатежаЗаказ.Видимость);
	Иначе
		ВидимостьВладельцаОбъектаРасчетов = (ЕстьФилиалы И Элементы.РасшифровкаБезРазбиенияЗаказ.Видимость);
	КонецЕсли;
	Элементы.РасшифровкаПлатежаОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	Элементы.РасшифровкаБезРазбиенияОрганизация.Видимость = ВидимостьВладельцаОбъектаРасчетов;
	
	Элементы.РасшифровкаПлатежаЗаполнить.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")) 
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;
		
	Элементы.ПериодАвансовогоОтчета.Видимость = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Элементы.ДатаАвансовогоОтчета.Видимость = (Элементы.ПериодАвансовогоОтчета.Видимость И ТипЗнч(ПериодАвансовогоОтчета) <> Тип("Дата"));
	Элементы.ПериодАвансовогоОтчета.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если РазрешеныПлатежиБезУказанияЗаявок И Не Объект.ОплатаПоЗаявкам Тогда
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
		Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОплатыПоЗаявкам()
	
	Если ЗначениеЗаполнено(Объект.Касса) И Не РазрешеныПлатежиБезУказанияЗаявок Тогда
		Объект.ОплатаПоЗаявкам = Истина;
		Элементы.ОплатаПоЗаявкам.Доступность = Ложь;
	Иначе
		Элементы.ОплатаПоЗаявкам.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ЭлементХозяйственнаяОперация = Элементы.ХозяйственнаяОперация;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыНаличные(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуКассами(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийСКассамиККМ(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииОплатаЛизингодателю(ЭлементХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементХозяйственнаяОперация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОплатеПоЗаявкамНаСервере()
	
	Элементы.РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств.Видимость = Объект.ОплатаПоЗаявкам;
	Элементы.РасшифровкаБезРазбиенияЗаявкаНаРасходованиеДенежныхСредств.Видимость = Объект.ОплатаПоЗаявкам;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаявкам()
	
	ЕстьСтрокиСНезаполненнойЗаявкой = Ложь;
	СписокЗаявок.Очистить();
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"])
			И СписокЗаявок.НайтиПоЗначению(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]) = Неопределено Тогда
			СписокЗаявок.Добавить(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]);
		ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока["ЗаявкаНаРасходованиеДенежныхСредств"]) Тогда
			ЕстьСтрокиСНезаполненнойЗаявкой = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) И СписокЗаявок.НайтиПоЗначению(Объект.ЗаявкаНаРасходованиеДенежныхСредств) = Неопределено Тогда
		СписокЗаявок.Добавить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	КонецЕсли;
	
	Если СписокЗаявок.Количество() > 1 Тогда
		НадписьЗаголовокЗаявки = НСтр("ru = 'Всего заявок'") + ": " + СписокЗаявок.Количество();
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявкам'");
	ИначеЕсли СписокЗаявок.Количество() = 1 И Не ЕстьСтрокиСНезаполненнойЗаявкой Тогда
		НадписьЗаголовокЗаявки = СписокЗаявок[0].Значение;
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявке'");
	Иначе
		НадписьЗаголовокЗаявки = "";
		Элементы.ОплатаПоЗаявкам.Заголовок = НСтр("ru = 'Оплата по заявке'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовРасшифровкиБезРазбиения()
	
	Если Объект.РасшифровкаПлатежа.Количество() Тогда
		
		ТекСтрока = Объект.РасшифровкаПлатежа[0];
		
		ТолькоПросмотрПартнераВалюты = ЗначениеЗаполнено(ТекСтрока.Заказ) И ТекСтрока.Заказ <> Объект.Ссылка;
		Элементы.РасшифровкаБезРазбиенияПартнер.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		Элементы.РасшифровкаБезРазбиенияВалютаВзаиморасчетов.ТолькоПросмотр = ТолькоПросмотрПартнераВалюты;
		
		ВидимостьАналитикПоХО = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
		Элементы.РасшифровкаБезРазбиенияАналитикаРасходов.Видимость =         (ТекСтрока.ТипСтатьи = 1 И ВидимостьАналитикПоХО);
		Элементы.РасшифровкаБезРазбиенияАналитикаАктивовПассивов.Видимость =  (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		
		Элементы.РасшифровкаБезРазбиенияПредставлениеОтраженияВРеглУчете.Видимость = (ТекСтрока.ТипСтатьи = 3 И ВидимостьАналитикПоХО);
		
	КонецЕсли;
	
	Элементы.ВалютаНДС.Видимость = Элементы.РасшифровкаБезРазбиенияСуммаНДС.Видимость;
	
	СуммаНераспределено = ВзаиморасчетыСервер.НераспределенныйОстатокПлатежа(Объект);
	Если СуммаНераспределено = 0 Тогда
		Элементы.Договор.Видимость                               = Ложь;
		Элементы.ГруппаФинансовогоУчета.Видимость                = Ложь;
		Элементы.НаправлениеДеятельности.Видимость               = Ложь;
	Иначе
		УстановитьСвойстваПоляВводаДоговор();
		Элементы.ГруппаФинансовогоУчета.Видимость                = Истина;
		Элементы.НаправлениеДеятельности.Видимость               = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ФискальнаяОперация

&НаСервере
Процедура ФискальнаяОперацияОбновитьСтатус()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		ФискальнаяОперацияПодключенноеОборудование = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеККассеККМ(Объект.КассаККМ);
		ИмяКоманды = "ПробитьЧекИнкассация";
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ФискальнаяОперацияПодключенноеОборудование = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеККассе(Объект.Касса);
		ИмяКоманды = "ПробитьЧек";
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		ФискальнаяОперацияПодключенноеОборудование = ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеККассе(Объект.Касса);
		ИмяКоманды = "ПробитьЧек";
	Иначе
		ФискальнаяОперацияПодключенноеОборудование = Неопределено;
	КонецЕсли;
	
	Элементы.ФискальнаяОперацияСтатус.Видимость = (ФискальнаяОперацияПодключенноеОборудование <> Неопределено);
	Если ФискальнаяОперацияПодключенноеОборудование = Неопределено Тогда
		ФискальнаяОперацияСтатус = "";
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФискальнаяОперацияДанныеЖурнала = ПодключаемоеОборудованиеУТВызовСервера.ДанныеЖурналаФискальныхОпераций(Объект.Ссылка);
	Иначе
		ФискальнаяОперацияДанныеЖурнала = Неопределено;
	КонецЕсли;
	
	Строки = Новый Массив;
	Если ФискальнаяОперацияДанныеЖурнала = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ФискальнаяОперацияПодключенноеОборудование.ККТ) Тогда
			
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Пробить чек'"),,
					ЦветаСтиля.ЦветГиперссылки,,
					ИмяКоманды));
			
		Иначе
			
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Чек не пробит'"),,
					ЦветаСтиля.ЦветГиперссылки,,
					"НастроитьОборудование"));
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Пробит чек на сумму %1'"),
						ФискальнаяОперацияДанныеЖурнала.Сумма),,
					ЦветаСтиля.ЦветГиперссылки,,
					"ОткрытьЗаписьЖурналаФискальныхОпераций"));
		Иначе
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Пробит чек №%1'"),
						ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ),,
					ЦветаСтиля.ЦветГиперссылки,,
					"ОткрытьЗаписьЖурналаФискальныхОпераций"));
		КонецЕсли;
		
	КонецЕсли;
	
	ФискальнаяОперацияСтатус = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальнаяОперацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ") Тогда
		ТорговыйОбъект = Объект.КассаККМ;
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		ТорговыйОбъект = Объект.Касса;
	ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию") Тогда
		ТорговыйОбъект = Объект.Касса;
	КонецЕсли;
	
	Если "ПробитьЧек" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ДокументСсылка",           Объект.Ссылка);
		ПараметрыОперации.Вставить("Партнер",                  Партнер);
		ПараметрыОперации.Вставить("Организация",              Объект.Организация);
		ПараметрыОперации.Вставить("ТорговыйОбъект",           ТорговыйОбъект);
		ПараметрыОперации.Вставить("ПодключенноеОборудование", ФискальнаяОперацияПодключенноеОборудование);
		
		ПодключаемоеОборудованиеУТКлиент.ПробитьЧек(
			ЭтотОбъект,
			ПараметрыОперации,
			РежимЗаписиДокумента.Проведение,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли "ПробитьЧекИнкассация" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("Сумма",                    Объект.СуммаДокумента);
		ПараметрыОперации.Вставить("Валюта",                   Объект.Валюта);
		ПараметрыОперации.Вставить("ДокументСсылка",           Объект.Ссылка);
		ПараметрыОперации.Вставить("Организация",              Объект.Организация);
		ПараметрыОперации.Вставить("ТорговыйОбъект",           ТорговыйОбъект);
		ПараметрыОперации.Вставить("ПодключенноеОборудование", ПараметрыКассыККМ.ИдентификаторУстройства);
		
		ПараметрыОперации.Вставить("ВнесениеДенежныхСредствВКассуККМ", Неопределено);
		
		ПодключаемоеОборудованиеУТКлиент.ПробитьЧекВнесениеДенежныхСредств(
			ЭтотОбъект,
			ПараметрыОперации,
			РежимЗаписиДокумента.Проведение,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗавершение", ЭтотОбъект));
		
	ИначеЕсли "ОткрытьЗаписьЖурналаФискальныхОпераций" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		ПодключаемоеОборудованиеУТКлиент.ОткрытьЗаписьЖурналаФискальныхОпераций(ЭтотОбъект, ФискальнаяОперацияДанныеЖурнала);
		
	ИначеЕсли "НастроитьОборудование" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		ОткрытьФорму("Обработка.ПредпросмотрЧека.Форма.ОшибкаПодключенияККТ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФискальнаяОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФискальнаяОперацияОбновитьСтатус();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьЗаявкиНаРасходованиеДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	ИспользоватьНесколькоВалют             = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ИспользоватьНачислениеЗарплаты         = Константы.ИспользоватьНачислениеЗарплаты.Получить();;
	ИспользоватьСинхронизациюДанных        = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	ИспользоватьДоговорыМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	ИспользоватьДоговорыСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользоватьДоговорыСПоставщиками      = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
		ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	ТекущаяКасса = Объект.Касса;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Объект.Организация).Количество() > 0;
	КонецЕсли;
	
	РазрешеныПлатежиБезУказанияЗаявок =
		Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).РазрешитьПлатежиБезУказанияЗаявок
		Или Не ИспользоватьЗаявкиНаРасходованиеДенежныхСредств;
		
	ЗаполнитьСписокВыбораПериодов();
	ЗаполнитьОрганизациюПолучателя();
	
	УстановитьДоступностьОплатыПоЗаявкам();
	ИнициализироватьРасшифровкуПлатежа();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
	ДенежныеСредстваСервер.ЗаполнитьСписокПериодовВозникновенияРасходов(
		Элементы.РасшифровкаПлатежаПериодВозникновенияРасхода.СписокВыбора,
		Объект.Дата);
		
	ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
	ПолучитьДоговорПоУмолчаниюСервер();
	
	УправлениеЭлементамиФормы();
	ОбновитьИнформациюПоЗаявкам();
	
	СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРасшифровкуПлатежа()
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") = Неопределено
		Или Документы.РасходныйКассовыйОрдер.МассивОперацийБезРасшифровкиПлатежа().Найти(Объект.ХозяйственнаяОперация) <> Неопределено
			И Не Объект.ОплатаПоЗаявкам Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ПереключательРасшифровки = 0;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			ПереключательРасшифровки = 0;
		Иначе
			ПереключательРасшифровки = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор);
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПолучателя()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
	Тогда
		СтруктураРеквизитов = Справочники.Кассы.ПолучитьРеквизитыКассы(Объект.КассаПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			Объект.ОрганизацияПолучатель = СтруктураРеквизитов.Организация;
			Если Не ЗначениеЗаполнено(Объект.Выдать) Тогда
				Объект.Выдать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОрганизацияПолучатель, "НаименованиеПолное");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможныеЗначенияКассыПолучателя(ИзменятьКассуПолучателя = Истина)
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		И ЗначениеЗаполнено(Объект.Касса) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Получатели.Ссылка КАК Ссылка
		|
		|ИЗ
		|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК Получатели
		|
		|ГДЕ
		|	Получатели.Ссылка = &КассаОтправитель
		|");
		Запрос.УстановитьПараметр("КассаОтправитель", Объект.Касса);
		ЕстьКассыПолучатели = НЕ Запрос.Выполнить().Пустой();
		
	Иначе
		
		ЕстьКассыПолучатели = Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиКассыОтправителя
	|	ПО
	|		ПолучателиКассыОтправителя.ПолучательПлатежа = Кассы.Ссылка
	|		И ПолучателиКассыОтправителя.Ссылка = &КассаОтправитель
	|		И &ОтбиратьПоКассамПолучателям
	|
	|ГДЕ
	|	(Кассы.ВалютаДенежныхСредств = &Валюта ИЛИ НЕ &ОтбиратьПоВалюте)
	|	И (Кассы.ВалютаДенежныхСредств <> &Валюта ИЛИ НЕ &ОтбиратьПоВалютеКонвертации)
	|	И (Кассы.Владелец В (&Владелец) ИЛИ НЕ &ОтбиратьПоВладельцу)
	|	И Кассы.Владелец НЕ В (&ФильтрВладельца)
	|	И (ПолучателиКассыОтправителя.Ссылка ЕСТЬ НЕ NULL ИЛИ НЕ &ОтбиратьПоКассамПолучателям)
	|	И Кассы.Ссылка <> &КассаОтправитель
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Кассы.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Справочник.КассыККМ КАК Кассы
	|
	|ГДЕ
	|	(Кассы.ВалютаДенежныхСредств = &Валюта ИЛИ НЕ &ОтбиратьПоВалюте)
	|	И (Кассы.Владелец В (&Владелец) ИЛИ НЕ &ОтбиратьПоВладельцу)
	|	И Кассы.Владелец НЕ В (&ФильтрВладельца)
	|	И Кассы.ТипКассы НЕ В (ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.АвтономнаяККМ), ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline))
	|");
	
	Запрос.УстановитьПараметр("КассаОтправитель", Объект.Касса);
	Запрос.УстановитьПараметр("ОтбиратьПоКассамПолучателям", ЕстьКассыПолучатели);
	Запрос.УстановитьПараметр("ОтбиратьПоВалютеКонвертации", Ложь);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			Запрос.УстановитьПараметр("Валюта", Объект.ВалютаКонвертации);
			Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
		Иначе
			Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
			Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
			Запрос.УстановитьПараметр("ОтбиратьПоВалютеКонвертации", Истина);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("Валюта", Неопределено);
		Запрос.УстановитьПараметр("ОтбиратьПоВалюте", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", Неопределено);
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты)
		И ЗначениеЗаполнено(Объект.Касса)
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
		Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
	Иначе
		
		Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Ложь);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФильтрВладельца", Неопределено);
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) Тогда
		
		Если ЗначениеЗаполнено(Объект.Касса)
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		
			МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
			МассивВзаимосвязанныхОрганизаций.Добавить(Объект.Организация);
			Запрос.УстановитьПараметр("ФильтрВладельца", МассивВзаимосвязанныхОрганизаций);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
			МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.ОрганизацияПолучатель);
			МассивВзаимосвязанныхОрганизаций.Добавить(Объект.ОрганизацияПолучатель);
			Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
			Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
		КонецЕсли;
	КонецЕсли;
	
	МассивКассПолучателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.КассаПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивКассПолучателей);
	
	Если ИзменятьКассуПолучателя Тогда
		Если МассивКассПолучателей.Количество() = 1 Тогда
			
			Объект.КассаПолучатель = МассивКассПолучателей[0];
			КассаПолучательПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.КассаПолучатель)
			И МассивКассПолучателей.Найти(Объект.КассаПолучатель) = Неопределено Тогда
			
			Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
			КассаПолучательПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ДенежныеСредстваСервер.ДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора);
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьБанковскийСчетПоУмолчанию()
	
	Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.Валюта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер, ХозяйственнаяОперация)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент, ХозяйственнаяОперация);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОстаткамиНевыданныхСуммКонтрагентуНаСервере()
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	ДействующиеДоговоры = Справочники.ДоговорыКредитовИДепозитов.ДействующиеДоговорыПоКонтрагенту(
		Объект.Организация,
		Объект.Контрагент,
		Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный);
	
	Для Каждого Договор Из ДействующиеДоговоры Цикл
		
		ДанныеРасшифровки = Справочники.ДоговорыКредитовИДепозитов.ДанныеРасшифровкиПлатежаДокументаДДС(Договор, Ложь, Объект.Ссылка);
		
		Для Каждого Строка Из ДанныеРасшифровки Цикл
			НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ПриДобавлениСтрокиРасшифровкиПлатежа(НоваяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСтрокаФизическиеЛица()
	
	СтрокаФизическиеЛица = НСтр("ru='Список работников'") + " (" + Объект.ВыплатаЗаработнойПлаты.Количество() + ")";
	Элементы.СтрокаФизическиеЛица.ЦветТекста = ?(Объект.ВыплатаЗаработнойПлаты.Количество() = 0, 
													ЦветаСтиля.ЦветОсобогоТекста, 
													ЦветаСтиля.ЦветГиперссылки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыКассы(Касса)
	
	Возврат Справочники.Кассы.ПолучитьРеквизитыКассы(Касса);
	
КонецФункции

&НаСервере
Функция ПараметрыВыбораСтатьиДДС(ДоговорКредитаДепозита)
	
	Возврат ДенежныеСредстваСервер.ПолучитьПараметрыВыбораСтатьиДДС(
		Объект,
		Новый Структура("ДоговорКредитаДепозита", ДоговорКредитаДепозита));
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораИзЗаявок(АдресЗаявокВХранилище)
	
	Объект.ОплатаПоЗаявкам = Истина;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"РасшифровкаПлатежаЗаявкаНаРасходованиеДенежныхСредств",
		"Видимость",
		Объект.ОплатаПоЗаявкам);
	
	ТаблицаПлатежей = ПолучитьИзВременногоХранилища(АдресЗаявокВХранилище);
	
	ИспользуютсяОбъектыРасчетов = Элементы.РасшифровкаПлатежаПодборПоОстаткам.Видимость;
	СтруктураПоиска = Новый Структура("СтатьяДвиженияДенежныхСредств, ЗаявкаНаРасходованиеДенежныхСредств, Сумма");
	Если ИспользуютсяОбъектыРасчетов Тогда
		СтруктураПоиска.Вставить("Заказ");
	КонецЕсли;
	
	Для каждого СтрокаПлатежа из ТаблицаПлатежей Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлатежа);
		Строки = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураПоиска);
		
		Если Строки.Количество() = 0 Тогда
			
			Строка = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаПлатежа);
			
			Если Не ЗначениеЗаполнено(Строка.Партнер) Тогда
				Если Не ЗначениеЗаполнено(Партнер) Тогда
					ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер, Объект.ХозяйственнаяОперация);
				КонецЕсли;
				Строка.Партнер = Партнер;
			КонецЕсли;
			ПриДобавлениСтрокиРасшифровкиПлатежа(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнформациюПоЗаявкам();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.РасшифровкаПлатежа);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.РасшифровкаПлатежа);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.РасшифровкаПлатежа);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИмяТабличнойЧасти") Тогда
		ТабличнаяЧасть = Объект[ДополнительныеПараметры.ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	КонецЕсли;
	
	КодОтвета = РезультатВопроса;
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЭтоВыдачаВДругуюОрганизацию = ДополнительныеПараметры.ЭтоВыдачаВДругуюОрганизацию;
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", ?(ЭтоВыдачаВДругуюОрганизацию, Объект.ОрганизацияПолучатель, Объект.Контрагент));
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("СуммаДокумента", Объект.СуммаДокумента);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзЗаявокЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"Контрагент,
		|КассаПолучатель,
		|ПодотчетноеЛицо,
		|Организация,
		|ХозяйственнаяОперация,
		|ХозяйственнаяОперацияПоЗарплате,
		|Валюта,
		|СуммаДокумента,
		|Дата");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	
	ПараметрыПодбора.Вставить("Ссылка",                              Объект.Ссылка);
	ПараметрыПодбора.Вставить("ФормаОплаты",                         ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	ПараметрыПодбора.Вставить("БанковскийСчетКасса",                 Объект.Касса);
	ПараметрыПодбора.Вставить("АдресПлатежейВХранилище",             АдресПлатежейВХранилище);
	
	ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПодборЗаявокВДокументыОплаты",
		ПараметрыПодбора,
		ЭтаФорма,
		,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПериодов()
	
	СписокВыбораПериода = Элементы.ПериодАвансовогоОтчета.СписокВыбора;
	
	СписокВыбораПериода.Добавить("Через неделю",     НСтр("ru='Через неделю'"));
	СписокВыбораПериода.Добавить("Через две недели", НСтр("ru='Через две недели'"));
	СписокВыбораПериода.Добавить("Через месяц",      НСтр("ru='Через месяц'"));
	СписокВыбораПериода.Добавить("ДоДаты",           НСтр("ru='До даты...'"));
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.ДатаАвансовогоОтчета) Тогда
		
		ПериодАвансовогоОтчета = "Через неделю";
		
	Иначе
		Если Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 7 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через неделю";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = НачалоДня(Объект.Дата) + 14 * 24 * 3600 Тогда
			ПериодАвансовогоОтчета = "Через две недели";
		ИначеЕсли Объект.ДатаАвансовогоОтчета = ДобавитьМесяц(НачалоДня(Объект.Дата), 1) Тогда
			ПериодАвансовогоОтчета = "Через месяц";
		Иначе
			ПериодАвансовогоОтчета = Объект.ДатаАвансовогоОтчета;
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Дата"));
			ОписаниеТиповДата = Новый ОписаниеТипов(Массив, , );
			
			Элементы.ПериодАвансовогоОтчета.ОграничениеТипа = ОписаниеТиповДата;
			
			Элементы.ПериодАвансовогоОтчета.КнопкаВыбора = Истина;
			Элементы.ПериодАвансовогоОтчета.РедактированиеТекста = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриДобавлениСтрокиРасшифровкиПлатежа(Строка)
	
	ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов");
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(Строка, "СтатьяРасходов")
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДатуАвансовогоОтчета()
	
	Если ПериодАвансовогоОтчета = "Через неделю" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 7 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через две недели" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 14 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "Через месяц" Тогда
		Объект.ДатаАвансовогоОтчета = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()) + 30 * 24 * 3600;
		
	ИначеЕсли ПериодАвансовогоОтчета = "ДоДаты" Тогда
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтаФорма, );
		ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()), НСтр("ru = 'Дата отчета по выдаваемому авансу'"), ЧастиДаты.Дата);
		Возврат;
		
	ИначеЕсли ТипЗнч(ПериодАвансовогоОтчета) = Тип("Дата") Тогда
		Если ПериодАвансовогоОтчета < Объект.Дата Тогда
			ПериодАвансовогоОтчета = Объект.Дата;
		КонецЕсли;
		
		Объект.ДатаАвансовогоОтчета = ПериодАвансовогоОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтатьяДоходовРасходов()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") Тогда
		Элементы.РасшифровкаБезРазбиенияСтатьяРасходов.Заголовок = НСтр("ru = 'Статья расходов'");
		Элементы.РасшифровкаПлатежаСтатьяРасходов.Заголовок      = НСтр("ru = 'Статья расходов'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов()
	ВзаиморасчетыСервер.СформироватьНадписьГиперссылкиРеквизитыОбъектаРасчетов(ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.РасшифровкаПлатежа.Выгрузить());
КонецФункции

&НаСервере
Процедура УстановитьСвойстваПоляВводаДоговор()
	
	ЭтоИнтеркампани = ВзаиморасчетыСервер.ХозяйственнаяОперацияИнтеркампани(Объект.ХозяйственнаяОперация);
	
	Если ЭтоИнтеркампани И ИспользоватьДоговорыМеждуОрганизациями 
		ИЛИ ВзаиморасчетыСервер.ХозяйственнаяОперацияСКлиентом(Объект.ХозяйственнаяОперация) И ИспользоватьДоговорыСКлиентами
		ИЛИ ВзаиморасчетыСервер.ХозяйственнаяОперацияСПоставщиком(Объект.ХозяйственнаяОперация) И ИспользоватьДоговорыСПоставщиками Тогда
		Элементы.Договор.Видимость = Истина;
	Иначе
		Элементы.Договор.Видимость = Ложь;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Если ЭтоИнтеркампани Тогда
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка");
			МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
		Иначе
			Объект.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Договор.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

#КонецОбласти
