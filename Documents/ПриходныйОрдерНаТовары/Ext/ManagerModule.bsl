#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ОтборРазмещениеТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуТоварыКПоступлению(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок    = 1;
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	
	
КонецПроцедуры

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Помещение,Статус,СкладскаяОперация,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//		Структура - состав полей структуры задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПриходныйОрдерНаТовары";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = 
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад",Объект.Склад));
	
	ПараметрыУказанияСерий.ИспользуютсяТоварныеМеста = Истина;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Объект.СкладскаяОперация);
	
	ПараметрыУказанияСерий.ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение, Объект.Дата);
	
	ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("УпаковочныйЛистРодитель");
	
	Если ПараметрыУказанияСерий.ИспользоватьАдресноеХранение Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
		ПараметрыУказанияСерий.ИмяПоляКоличество = "КоличествоУпаковок";	
	КонецЕсли;
	
	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("ДокументОтгрузки");
	КонецЕсли;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ЭтоОрдер = Истина;
	ПараметрыУказанияСерий.ИмяПоляПомещение = "Помещение";
	
	Если Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению
		Или Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка 
		Или Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе Тогда
		ПараметрыУказанияСерий.ПодготовкаОрдера = Истина;
	КонецЕсли;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Распоряжение");
	ПараметрыУказанияСерий.РегистрироватьСерии = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа
// 
// Возвращаемое значение:
//  ДокументСсылка - ссылка на распоряжение
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Распоряжение;	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.УпаковочныйЛистРодитель,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица." + ПараметрыУказанияСерий.ИмяПоляКоличество + " КАК Количество,
	|	Таблица.СтатусУказанияСерий,
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Таблица.Назначение,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
		
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Упаковка", "ИСТИНА");
	КонецЕсли;
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("ДокументОтгрузки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.ДокументОтгрузки", "ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Количество > 0
	|									И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|											ТОГДА 14
	|										ИНАЧЕ 10
	|									КОНЕЦ
	|							КОГДА &ПодготовкаОрдера
	|								ТОГДА 11
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|										ТОГДА 13
	|									ИНАЧЕ 9
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Количество > 0
	|												И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 6
	|										КОГДА &ПодготовкаОрдера
	|											ТОГДА 25
	|										ИНАЧЕ 5
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Товары.Количество > 0
	|											И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|										ТОГДА 8
	|									КОГДА &ПодготовкаОрдера
	|										ТОГДА 27
	|									ИНАЧЕ 7
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОГДА &УсловиеПоПараметруПолитикиУчетаСерий
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Количество > 0
	|												И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 4
	|										КОГДА &ПодготовкаОрдера
	|											ТОГДА 23
	|										ИНАЧЕ 3
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Товары.Количество > 0
	|											И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|										ТОГДА 2
	|									КОГДА &ПодготовкаОрдера
	|										ТОГДА 21
	|									ИНАЧЕ 1
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И Товары.Номенклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерий <> ТаблицаСтатусов.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЭтоВозвратНепринятыхТоваров = ПараметрыУказанияСерий.СкладскиеОперации
		.Найти(Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров) <> Неопределено;
	ЭтоВозвратНепринятыхТоваровУстаревший = ПараметрыУказанияСерий.СкладскиеОперации
		.Найти(Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваровУстарел) <> Неопределено;
		
	Если ЭтоВозвратНепринятыхТоваров
		Или ЭтоВозвратНепринятыхТоваровУстаревший Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоПараметруПолитикиУчетаСерий",
			"ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриВозвратеНепринятыхПолучателемТоваров");
			
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеПоПараметруПолитикиУчетаСерий",
			"ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
			|						И (ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
			|								И &ПриемкаОтПоставщика
			|							ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
			|								И &ПриемкаПоВозвратуОтКлиента
			|							ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
			|								И &ПриемкаПоПеремещению
			|							ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
			|								И &ПриемкаПоПрочемуОприходованию
			|							ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
			|								И &ПриемкаКомплектующихПослеРазборки
			|							ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
			|								И &ПриемкаСобранныхКомплектов)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Если ПараметрыФормированияЗапроса.ВидОперации = ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров") Тогда
		Возврат Справочники.Назначения.ТекстЗапросаВсехНазначений(ПараметрыФормированияЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	Назначения.Ссылка КАК Назначение,
	|	СУММА(ТоварыКПоступлению.Потребность) КАК Потребность,
	|	СУММА(ТоварыКПоступлению.Потребность) - МАКСИМУМ(ЕСТЬNULL(ДанныеДокумента.Количество, 0)) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКПоступлениюОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКПоступлениюОстатки.Характеристика КАК Характеристика,
	|		ТоварыКПоступлениюОстатки.Назначение КАК Назначение,
	|		ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток КАК Потребность
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ДокументПоступления = &Распоряжение
	|					И (Номенклатура, Характеристика) В (&ОтборПоТоварам)
	|					И Склад = &Склад
	|					И Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыКПоступлениюОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКПоступлениюПоРегистратору.Номенклатура,
	|		ТоварыКПоступлениюПоРегистратору.Характеристика,
	|		ТоварыКПоступлениюПоРегистратору.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыКПоступлениюПоРегистратору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 0
	|			ИНАЧЕ ТоварыКПоступлениюПоРегистратору.КОформлениюОрдеров
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлениюПоРегистратору
	|	ГДЕ
	|		ТоварыКПоступлениюПоРегистратору.ДокументПоступления = &Распоряжение
	|		И ТоварыКПоступлениюПоРегистратору.Склад = &Склад
	|		И ТоварыКПоступлениюПоРегистратору.Регистратор = &Регистратор
	|		И (ТоварыКПоступлениюПоРегистратору.Номенклатура, ТоварыКПоступлениюПоРегистратору.Характеристика) В (&ОтборПоТоварам)
	|		И ТоварыКПоступлениюПоРегистратору.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыКПоступлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДокументаСгруппированные КАК ДанныеДокумента
	|		ПО ТоварыКПоступлению.Номенклатура = ДанныеДокумента.Номенклатура
	|			И ТоварыКПоступлению.Характеристика = ДанныеДокумента.Характеристика
	|			И ТоварыКПоступлению.Назначение = ДанныеДокумента.Назначение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ТоварыКПоступлению.Назначение = Назначения.Ссылка
	|ГДЕ
	|	ТоварыКПоступлению.Назначение.ДвиженияПоСкладскимРегистрам
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	Назначения.Ссылка";
	
	Если ПараметрыФормированияЗапроса.УчестьУжеПодобранные Тогда
		// Запрос не для динамических списков
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТоварыДокумента.Номенклатура,
		|	ТоварыДокумента.Характеристика,
		|	ТоварыДокумента.Назначение,
		|	ТоварыДокумента.Количество
		|ПОМЕСТИТЬ ТаблицаТоваровДокумента
		|ИЗ
		|	&ТоварыДокумента КАК ТоварыДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваровДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика КАК Характеристика,
		|	ТаблицаТоваровДокумента.Назначение КАК Назначение,
		|	СУММА(ТаблицаТоваровДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыДокументаСгруппированные
		|ИЗ
		|	ТаблицаТоваровДокумента КАК ТаблицаТоваровДокумента
		|ГДЕ
		|	(ТаблицаТоваровДокумента.Номенклатура, ТаблицаТоваровДокумента.Характеристика) В (&ОтборПоТоварам)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТоваровДокумента.Номенклатура,
		|	ТаблицаТоваровДокумента.Характеристика,
		|	ТаблицаТоваровДокумента.Назначение
		|;" + ТекстЗапроса;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТоварыДокументаСгруппированные", "(" +
			"ВЫБРАТЬ
			|	ИСТИНА КАК Номенклатура,
			|	ИСТИНА КАК Характеристика,
			|	ИСТИНА КАК Назначение,
			|	0 КАК Количество" + ")");
	КонецЕсли;
	
	Если ПараметрыФормированияЗапроса.ПоНесколькимТоварам Тогда
		// Запрос не для динамических списков
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика
		|ПОМЕСТИТЬ ТаблицаОтбораПоТоварам
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтбораПоТоварам.Номенклатура,
		|	ТаблицаОтбораПоТоварам.Характеристика
		|ПОМЕСТИТЬ ТоварыОтборСгруппированные
		|ИЗ
		|	ТаблицаОтбораПоТоварам КАК ТаблицаОтбораПоТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтбораПоТоварам.Номенклатура,
		|	ТаблицаОтбораПоТоварам.Характеристика
		|;" + ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТоварам",
			"ВЫБРАТЬ
			|	ТоварыОтборСгруппированные.Номенклатура,
			|	ТоварыОтборСгруппированные.Характеристика
			|ИЗ
			|	ТоварыОтборСгруппированные КАК ТоварыОтборСгруппированные");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоТоварам",
			"ВЫБРАТЬ
			|	&Номенклатура,
			|	&Характеристика");
	КонецЕсли;
	
	Если ПараметрыФормированияЗапроса.УпорядочитьПоДатеЗаказаНазначения Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Назначения.Заказ.Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПриходныйОрдерНаТовары"; 
	
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ВозвратНепринятыхТоваров",
	" ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров)
	|			ИЛИ ТаблицаТовары.Ссылка.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваровУстарел)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ");
	ПереопределениеРасчетаПараметров.Вставить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",
	" ВЫБОР
	|		КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ");
	
	ПереопределениеРасчетаПараметров.Вставить("ДокументПоступления", "ТаблицаТовары.Ссылка.Распоряжение");
	
	Если ИмяРегистра = "ТоварыНаСкладах" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "СвободныеОстатки" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтТаблицаТовары", ТекстЗапросаВТТаблицаТовары(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОформлениюИзлишковНедостач" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ДвиженияСерийТоваров" Тогда
	
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтТаблицаТовары", ТекстЗапросаВТТаблицаТовары(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров,
																								ТекстыЗапросаВременныхТаблиц);

	Возврат Результат;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт

	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдер.Дата                       КАК Период,
	|	ПриходныйОрдер.Склад                      КАК Склад,
	|	ПриходныйОрдер.Статус                     КАК Статус,
	|	ПриходныйОрдер.Распоряжение               КАК Распоряжение,
	|	ПриходныйОрдер.СкладскаяОперация          КАК СкладскаяОперация,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдер.Склад.ИспользоватьСкладскиеПомещения
	|				И ПриходныйОрдер.Дата >= ПриходныйОрдер.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ПриходныйОрдер.Помещение.ИспользоватьАдресноеХранение
	|							И ПриходныйОрдер.Дата >= ПриходныйОрдер.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПриходныйОрдер.Склад.ИспользоватьАдресноеХранение
	|						И ПриходныйОрдер.Дата >= ПриходныйОрдер.Склад.ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ                               КАК ИспользоватьАдресноеХранение,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдер.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			И ПриходныйОрдер.Дата >= ПриходныйОрдер.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
	|	ПриходныйОрдер.ЗонаПриемки                КАК ЗонаПриемки,
	|	ПриходныйОрдер.Помещение                  КАК Помещение,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдер.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров)
	|			ИЛИ ПриходныйОрдер.СкладскаяОперация = ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваровУстарел)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                               КАК ВозвратНепринятыхТоваров,
	|	ПриходныйОрдер.ЗакрыватьГрафикПоступления КАК ЗакрыватьГрафикПоступления,
	|	ПриходныйОрдер.Отправитель                КАК Отправитель,
	|	ПриходныйОрдер.ХозяйственнаяОперация      КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдер
	|ГДЕ
	|	ПриходныйОрдер.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	
	Запрос.УстановитьПараметр("Склад",                               Реквизиты.Склад);
	Запрос.УстановитьПараметр("Статус",                              Реквизиты.Статус);
	Запрос.УстановитьПараметр("Период",                              Реквизиты.Период);
	Запрос.УстановитьПараметр("Распоряжение",                        Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("ЗонаПриемки",                         Реквизиты.ЗонаПриемки);
	Запрос.УстановитьПараметр("Помещение",                           Реквизиты.Помещение);
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",        Реквизиты.ИспользоватьАдресноеХранение);
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Реквизиты.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
	Запрос.УстановитьПараметр("СкладскаяОперация",                   Реквизиты.СкладскаяОперация);
	Запрос.УстановитьПараметр("Отправитель",                         Реквизиты.Отправитель);
	Запрос.УстановитьПараметр("ВозвратНепринятыхТоваров",            Реквизиты.ВозвратНепринятыхТоваров);
	Запрос.УстановитьПараметр("ЗакрыватьГрафикПоступления",          Реквизиты.ЗакрыватьГрафикПоступления);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",               Реквизиты.ХозяйственнаяОперация);
	
	// Если в соглашении указаны особые правила учета товаров к поступлению.
	Если Реквизиты.ЗакрыватьГрафикПоступления Тогда
		Если ТипЗнч(Реквизиты.Распоряжение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос.УстановитьПараметр("РаспоряжениеДляГрафика", Справочники.СоглашенияСПоставщиками.ПолучитьДокументРегистрации(Реквизиты.Распоряжение));
		ИначеЕсли ТипЗнч(Реквизиты.Распоряжение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Запрос.УстановитьПараметр("РаспоряжениеДляГрафика", Справочники.ДоговорыКонтрагентов.ПолучитьДокументРегистрации(Реквизиты.Распоряжение));
		Иначе
			Запрос.УстановитьПараметр("РаспоряжениеДляГрафика", Реквизиты.Распоряжение);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("РаспоряжениеДляГрафика", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	&Отправитель КАК Отправитель,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	&Распоряжение КАК ДокументПоступления,
	|	ТаблицаТовары.Количество КАК Принимается,
	|	0 КАК КОформлениюОрдеров,
	|	0 КАК КОформлениюПоступленийПоОрдерам,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
	|			ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.ВРаботе)
	|			ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.ТребуетсяОбработка))
	|	И ТаблицаТовары.Количество <> 0
	|	И НЕ &ВозвратНепринятыхТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	&Склад,
	|	&Отправитель,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТаблицаТовары.Назначение,
	|	&Распоряжение,
	|	0,
	|	ТаблицаТовары.Количество,
	|	0,
	|	&ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Количество <> 0
	|	И НЕ &ВозвратНепринятыхТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Склад,
	|	&Отправитель,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	&Распоряжение,
	|	0,
	|	0,
	|	ТаблицаТовары.Количество,
	|	&ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество <> 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И НЕ &ВозвратНепринятыхТоваров";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаСкладах(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыНаСкладах";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	&Помещение КАК Помещение,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество <> 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыВЯчейках(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыВЯчейках";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ЗонаПриемки КАК Ячейка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10, 14)
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И НЕ ТаблицаТовары.ЭтоУпаковочныйЛист
	|	И &ИспользоватьАдресноеХранение";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество,
	|	&Склад КАК Получатель,
	|	&Помещение КАК ПомещениеПолучателя,
	|	&Отправитель КАК Отправитель,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	ИСТИНА КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюИзлишковНедостач(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюИзлишковНедостач";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК КОформлениюАктов,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТовары.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Количество <> 0
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И &ВозвратНепринятыхТоваров
	|	И &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                      КАК Период,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Склад          			 КАК Склад,
	|	ТаблицаТовары.Назначение     КАК Назначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Количество
	|	КОНЕЦ 						 КАК НаличиеПодЗаказ
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)	
	|	И ТаблицаТовары.Количество <> 0
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                      КАК Период,
	|	&Склад                       КАК Склад,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&РаспоряжениеДляГрафика      КАК Распоряжение,
	|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|		  ТОГДА ТаблицаТовары.Назначение
	|		  ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ						 КАК ПланируемоеПоступление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ						 КАК ПланируемоеПоступлениеПодЗаказ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ						 КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА -ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ						 КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ЗакрыватьГрафикПоступления
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Количество <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВРезервеПодЗаказ
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаТовары";
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТовары.Количество
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.ЭтоУпаковочныйЛист
	|	И ЕСТЬNULL(ТаблицаТовары.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Серия,
	|	Таблица.СтатусУказанияСерий,
	|	СУММА(ПриходныйОрдерНаТоварыТоварыКоличество.Количество)
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Назначение КАК Назначение,
	|		ТаблицаТовары.Серия КАК Серия,
	|		МАКСИМУМ(ТаблицаТовары.Упаковка) КАК Упаковка,
	|		ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|	ИЗ
	|		Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И НЕ ТаблицаТовары.ЭтоУпаковочныйЛист
	|		И ЕСТЬNULL(ТаблицаТовары.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаТовары.Ссылка,
	|		ТаблицаТовары.Номенклатура,
	|		ТаблицаТовары.Характеристика,
	|		ТаблицаТовары.Назначение,
	|		ТаблицаТовары.Серия,
	|		ТаблицаТовары.СтатусУказанияСерий) КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТоварыКоличество
	|		ПО Таблица.Ссылка = ПриходныйОрдерНаТоварыТоварыКоличество.Ссылка
	|			И Таблица.Номенклатура = ПриходныйОрдерНаТоварыТоварыКоличество.Номенклатура
	|			И Таблица.Характеристика = ПриходныйОрдерНаТоварыТоварыКоличество.Характеристика
	|			И Таблица.Серия = ПриходныйОрдерНаТоварыТоварыКоличество.Серия
	|			И Таблица.Назначение = ПриходныйОрдерНаТоварыТоварыКоличество.Назначение
	|			И Таблица.Упаковка = ПриходныйОрдерНаТоварыТоварыКоличество.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Назначение,
	|	Таблица.Серия,
	|	Таблица.СтатусУказанияСерий";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйОрдерНаТовары) Тогда
		// Приходный ордер на товары
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПриходныйОрдерНаТовары";
		КомандаПечати.Представление = НСтр("ru = 'Приходный ордер на товары'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;

	// Бланк приемки товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкПриемкиТоваров";
	КомандаПечати.Представление = НСтр("ru = 'Бланк приемки товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// Задание на размещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаданияНаОтборРазмещениеТоваров";
	КомандаПечати.Идентификатор = "ЗаданиеНаОтборРазмещениеТовара";
	КомандаПечати.Представление = НСтр("ru = 'Задание на размещение товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ИмяФормы", "ЗаданиеНаРазмещение");

	Если ПраваПользователяПовтИсп.ПечатьЭтикетокИЦенников() Тогда
		// Ценники
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "Документ.ПриходныйОрдерНаТовары";
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценники'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Этикетки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьЭтикетокИЦенников";
		КомандаПечати.МенеджерПечати = "Документ.ПриходныйОрдерНаТовары";
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПриходныйОрдерНаТовары",
			НСтр("ru = 'Приходный ордер на товары'"),
			ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкПриемкиТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"БланкПриемкиТоваров",
			НСтр("ru = 'Бланк приемки товаров'"),
			ПечатьБланкаПриемкиТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры

Функция ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ПриходныйОрдерНаТовары";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Приходный ордер на товары'");
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Отправитель) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.НомерДокументаИБ, """""""")
	|	КОНЕЦ КАК РаспоряжениеНомер,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Организация.Префикс
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.Организация.Префикс, """""""")
	|	КОНЕЦ КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Исполнитель.ФизическоеЛицо КАК Исполнитель,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО (НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись)
	|			И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул
	|		КОГДА &КолонкаКодов = ""Код""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Серия) КАК ПредставлениеСерии,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	NULL КАК НастройкаИспользованияСерий
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
		ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);
		
		ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;
		
		//Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_ПриходныйОрдерНаТовары");
		
		ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
		
		ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
		ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
		ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
		
		ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
		
		ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
		
		ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
		ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
		
		ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
		
		ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
		
		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ВыводитьУпаковки Тогда
			ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
			+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		КонецЕсли;
		
		ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
		ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
		ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
		ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
		ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
		ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru='Зона приемки:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			//если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада",
		СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,ВыборкаПоДокументам.ПредставлениеПомещения));
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПредставлениеВходящегоДокумента = ?(ПустаяСтрока(ВыборкаПоДокументам.НомерВходящегоДокумента),"","№ " + СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента))
		+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаВходящегоДокумента),""," от " + Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
		ПараметрыШапки.Вставить("ПредставлениеВходящегоДокумента", ПредставлениеВходящегоДокумента);
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПерваяСтрока = Истина;
		СтрокаУпаковок = "";
		СтрокаКоличесткаУпаковок = "";
		СтрокаЕдиницИзмерений = "";
		СтрокаКоличества = "";
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
			Иначе
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
				ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
				, // Упаковка
				ВыборкаПоСтрокамТЧ.ПредставлениеСерии);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Если ВыводитьУпаковки Тогда
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.ПредставлениеЕдининицыИзмеренияУпаковки = НСтр("ru = 'место'");
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКонец.Параметры.ПредставлениеБазовойЕдиницыИзмерения = НСтр("ru = 'место'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		Если ВыводитьУпаковки Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
		ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

Функция ПечатьБланкаПриемкиТоваров(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_БланкПриемкиТоваров";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Бланк приемки товаров'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Отправитель) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Номер
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.НомерДокументаИБ, """""""")
	|	КОНЕЦ КАК РаспоряжениеНомер,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Дата
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.ДатаДокументаИБ, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК РаспоряжениеДата,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|			ТОГДА ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.Распоряжение КАК Справочник.СоглашенияСПоставщиками).Организация.Префикс
	|		ИНАЧЕ ЕСТЬNULL(РеквизитыРаспоряжения.Организация.Префикс, """""""")
	|	КОНЕЦ КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Исполнитель.ФизическоеЛицо КАК Исполнитель,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспоряжения
	|		ПО (НЕ РеквизитыРаспоряжения.ДополнительнаяЗапись)
	|			И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.УпаковочныйЛист) КАК УпаковочныйЛист,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Артикул
	|		КОГДА &КолонкаКодов = ""Код""
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Артикул,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.Упаковка.Представление
	|	КОНЕЦ КАК ЕдиницаИзмеренияПредставление,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.СтатусУказанияСерий,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("КолонкаКодов", КолонкаКодов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[0].Выбрать();	
	ВыборкаПоТабличнымЧастям = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_БланкПриемкиТоваров");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьСтрокаСерийНачало    = Макет.ПолучитьОбласть("СтрокаСерий|НачалоСтрокиСерий");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьСтрокаСерийКолонкаКодов      = Макет.ПолучитьОбласть("СтрокаСерий|КолонкаКодовСерий");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	ОбластьСерийКонец     = Макет.Область("КонецСтрокиСерий");
	
	ШиринаКолонкиКодов = Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки   = ОбластьКолонкаТоваров.ШиринаКолонки + ШиринаКолонкиКодов;
		ОбластьСерийКонец.ШиринаКолонки       = ОбластьСерийКонец.ШиринаКолонки + ШиринаКолонкиКодов;
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьСтрокаСерийКонец     = Макет.ПолучитьОбласть("СтрокаСерий|КонецСтрокиСерий");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
			ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение, ВыборкаПоДокументам.Дата);
		
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru='Зона приемки:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			//если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада", СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,
																								ВыборкаПоДокументам.ПредставлениеПомещения));
		
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПараметрыШапки.Вставить("НомерВходящегоДокумента",СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента));
		ПараметрыШапки.Вставить("ДатаВходящегоДокумента", Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ВыборкаПоСтрокамТЧ.УпаковочныйЛист;
			Иначе
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
				ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			Если ВыборкаПоСтрокамТЧ.ЭтоУпаковочныйЛист Тогда
				ОбластьСтрокаТаблицыКонец.Параметры.ЕдиницаИзмеренияПредставление = НСтр("ru = 'место'");
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
			Если ВыборкаПоСтрокамТЧ.СтатусУказанияСерий <> 0 Тогда
				
				НадписьСерии = "";
				
				Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров Тогда
					Если ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии
						И ВыборкаПоСтрокамТЧ.ИспользоватьСрокГодностиСерии Тогда
						НадписьСерии = НСтр("ru = 'Серии (номер, годен до, количество):'");
					ИначеЕсли ВыборкаПоСтрокамТЧ.ИспользоватьНомерСерии Тогда
						НадписьСерии = НСтр("ru = 'Серии (номер, количество):'");
					Иначе
						НадписьСерии = НСтр("ru = 'Серии (годен до, количество):'");
					КонецЕсли;
				ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
					НадписьСерии = НСтр("ru = 'Серийные номера:'");	
				КонецЕсли;
				
				ОбластьСтрокаСерийНачало.Параметры.НадписьСерии = НадписьСерии;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаСерийНачало);
				
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКолонкаКодов);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКонец);
				
			КонецЕсли;
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный, ВыборкаПоДокументам.Дата);
		ОбластьПодписей.Параметры.ПредставлениеИсполнителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Исполнитель, ВыборкаПоДокументам.Дата);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПомещениеПредставление,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Дата КАК Дата,
	|	ПриходныйОрдерНаТовары.Номер КАК Номер,
	|	ЛОЖЬ КАК НарушенаОрдернаяСхема,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения
	|				И ПриходныйОрдерНаТовары.Дата >= ПриходныйОрдерНаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ПриходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранениеСправочно
	|							И (НЕ ПриходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранение
	|								ИЛИ ПриходныйОрдерНаТовары.Дата < ПриходныйОрдерНаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьАдресноеХранениеСправочно
	|						И (НЕ ПриходныйОрдерНаТовары.Склад.ИспользоватьАдресноеХранение
	|							ИЛИ ПриходныйОрдерНаТовары.Дата < ПриходныйОрдерНаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	NULL КАК ВидОперации,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения
	|				И ПриходныйОрдерНаТовары.Дата >= ПриходныйОрдерНаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ПриходныйОрдерНаТовары.Помещение.ИспользованиеРабочихУчастков
	|		ИНАЧЕ ПриходныйОрдерНаТовары.Склад.ИспользованиеРабочихУчастков
	|	КОНЕЦ КАК ИспользованиеРабочихУчастков,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения
	|				И ПриходныйОрдерНаТовары.Дата >= ПриходныйОрдерНаТовары.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|			ТОГДА ВЫБОР
	|					КОГДА ПриходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранение
	|							И ПриходныйОрдерНаТовары.Дата >= ПриходныйОрдерНаТовары.Помещение.ДатаНачалаАдресногоХраненияОстатков
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьАдресноеХранение
	|						И ПриходныйОрдерНаТовары.Дата >= ПриходныйОрдерНаТовары.Склад.ДатаНачалаАдресногоХраненияОстатков
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК ИспользуетсяАдресноеХранение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|				ИЛИ ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ТаблицаТовары.Номенклатура.НаборУпаковок КАК НаборУпаковок,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровСуммированная
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И НЕ ТаблицаТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Номенклатура.НаборУпаковок,
	|	ТаблицаТовары.Ссылка.Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|				ИЛИ ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|			ТОГДА NULL
	|		ИНАЧЕ ТаблицаТовары.Серия
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровСуммированная.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровСуммированная.Характеристика КАК Характеристика,
	|	ТаблицаТоваровСуммированная.Серия КАК Серия,
	|	ТаблицаТоваровСуммированная.Номенклатура.Код КАК Код,
	|	ТаблицаТоваровСуммированная.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТоваровСуммированная.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ТаблицаТоваровСуммированная.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТоваровСуммированная.Серия.Наименование КАК ПредставлениеСерии,
	|	ТаблицаТоваровСуммированная.Количество КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.Код, """") КАК ОсновнаяЯчейкаПредставление,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.Код, """") КАК ЯчейкаПредставление,
	|	ТаблицаТоваровСуммированная.Количество КАК КоличествоУпаковок,
	|	ТаблицаТоваровСуммированная.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Упаковка) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|			И (ВЫБОР
	|				КОГДА ТаблицаТоваровСуммированная.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|						И ТаблицаТоваровСуммированная.Ссылка.Дата >= ТаблицаТоваровСуммированная.Ссылка.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|					ТОГДА РазмещениеОсновнаяЯчейка.Помещение = ТаблицаТоваровСуммированная.Ссылка.Помещение
	|				ИНАЧЕ РазмещениеОсновнаяЯчейка.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|			И (ВЫБОР
	|				КОГДА ТаблицаТоваровСуммированная.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|						И ТаблицаТоваровСуммированная.Ссылка.Дата >= ТаблицаТоваровСуммированная.Ссылка.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|					ТОГДА РазмещениеОстальныеЯчейки.Помещение = ТаблицаТоваровСуммированная.Ссылка.Помещение
	|				ИНАЧЕ РазмещениеОстальныеЯчейки.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаТоваровСуммированная.Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|ИТОГИ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваровСуммированная.Ссылка КАК Ссылка,
	|	ТаблицаТоваровСуммированная.Склад КАК Склад,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ТаблицаТоваровСуммированная.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(&Коэффициент, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения.Представление, ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровСуммированная.Номенклатура.ЕдиницаИзмерения)) КАК ПредставлениеЕдининицыИзмеренияУпаковки
	|ИЗ
	|	ТаблицаТоваровСуммированная КАК ТаблицаТоваровСуммированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ТаблицаТоваровСуммированная.Упаковка = УпаковкиНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТоваровСуммированная.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТоваровСуммированная.Ссылка.Склад)
	|			И (ВЫБОР
	|				КОГДА ТаблицаТоваровСуммированная.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|						И ТаблицаТоваровСуммированная.Ссылка.Дата >= ТаблицаТоваровСуммированная.Ссылка.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|					ТОГДА РазмещениеОсновнаяЯчейка.Помещение = ТаблицаТоваровСуммированная.Ссылка.Помещение
	|				ИНАЧЕ РазмещениеОсновнаяЯчейка.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	НомерСтроки,
	|	КоличествоВУпаковке УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад)
	|			И (ВЫБОР
	|				КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|						И ТаблицаТовары.Ссылка.Дата >= ТаблицаТовары.Ссылка.Склад.ДатаНачалаИспользованияСкладскихПомещений
	|					ТОГДА РазмещениеОсновнаяЯчейка.Помещение = ТаблицаТовары.Ссылка.Помещение
	|				ИНАЧЕ РазмещениеОсновнаяЯчейка.Помещение = ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка)
	|			КОНЕЦ)
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Склад,
	|	РабочийУчасток,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"УпаковкиНоменклатуры",
			"ТаблицаТоваровСуммированная.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[2];
	РезультатПоУпаковкам 		= МассивРезультатов[3];
	РезультатПоСериям	 		= МассивРезультатов[4];
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", РезультатПоШапке);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатПоТабличнойЧасти);
	СтруктураДанныхДляПечати.Вставить("РезультатПоУпаковкам", РезультатПоУпаковкам);
	СтруктураДанныхДляПечати.Вставить("РезультатПоСериям", РезультатПоСериям);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ЦеныНоменклатуры.Упаковка
	|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	МИНИМУМ(ПриходныйОрдерНаТоварыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(ВЫБОР
	|			КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|				ТОГДА ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * (ЕСТЬNULL(&Коэффициент1, 1) / ЕСТЬNULL(&Коэффициент2, 1))
	|			ИНАЧЕ ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = ПриходныйОрдерНаТоварыТовары.Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ПриходныйОрдерНаТоварыТовары.Характеристика)
	|			И (ЦеныНоменклатуры.ВидЦены = ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.РозничныйВидЦены)
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивДокументов)
	|	И НЕ ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ЦеныНоменклатуры.Упаковка
	|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыРаспряжения.Организация КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Склад.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспряжения
	|		ПО (НЕ РеквизитыРаспряжения.ДополнительнаяЗапись
	|				И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспряжения.Ссылка)
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПриходныйОрдерНаТоварыТовары.Упаковка",
			"ПриходныйОрдерНаТоварыТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатуры.Упаковка",
			"ЦеныНоменклатуры.Номенклатура"));
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

Функция ДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура    КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика  КАК Характеристика,
	|
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	МИНИМУМ(ПриходныйОрдерНаТоварыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * (ЕСТЬNULL(&Коэффициент1, 1) / ЕСТЬNULL(&Коэффициент2, 1))
	|		ИНАЧЕ
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ЦеныНоменклатуры.Номенклатура   = ПриходныйОрдерНаТоварыТовары.Номенклатура
	|		 И ЦеныНоменклатуры.Характеристика = ПриходныйОрдерНаТоварыТовары.Характеристика
	|		 И ЦеныНоменклатуры.ВидЦены        = ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.РозничныйВидЦены
	|	
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивДокументов)
	|	И (НЕ ПриходныйОрдерНаТоварыТовары.ЭтоУпаковочныйЛист)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыРаспряжения.Организация КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Склад.РозничныйВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеквизитыРаспряжения
	|		ПО (НЕ РеквизитыРаспряжения.ДополнительнаяЗапись
	|				И ПриходныйОрдерНаТовары.Распоряжение = РеквизитыРаспряжения.Ссылка)
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ПриходныйОрдерНаТоварыТовары.Упаковка",
			"ПриходныйОрдерНаТоварыТовары.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Коэффициент2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатуры.Упаковка",
			"ЦеныНоменклатуры.Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

#КонецОбласти

#Область Прочее

Функция ОрдерныеСклады(Объект) Экспорт
	
	ДатаОрдера = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОрдера", ДатаОрдера);
	МассивСкладов = Новый Массив;
	ТипРаспоряжения = Объект.Распоряжение.Метаданные().Имя;
	
	Если ТипРаспоряжения = "СоглашенияСПоставщиками" Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("Склад", "Склад");
		СтруктураРеквизитов.Вставить("ЭтоГруппа", "Склад.ЭтоГруппа");
		СтруктураРеквизитов.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении",
			"Склад.ИспользоватьОрдернуюСхемуПриПоступлении");
		СтруктураРеквизитов.Вставить("ДатаНачалаОрдернойСхемыПриПоступлении",
			"Склад.ДатаНачалаОрдернойСхемыПриПоступлении");
		
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, СтруктураРеквизитов);
		
		Если ЗначениеЗаполнено(РеквизитыСклада.Склад) Тогда
			Если РеквизитыСклада.ЭтоГруппа Тогда
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Склады.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
				|	И Склады.ИспользоватьОрдернуюСхемуПриПоступлении
				|	И &ДатаОрдера >= Склады.ДатаНачалаОрдернойСхемыПриПоступлении
				|	И (НЕ Склады.ПометкаУдаления)
				|	И (НЕ Склады.ЭтоГруппа)";
				
				Запрос.УстановитьПараметр("ГруппаСкладов", РеквизитыСклада.Склад);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МассивСкладов.Добавить(Выборка.Склад);
				КонецЦикла;
			ИначеЕсли РеквизитыСклада.ИспользоватьОрдернуюСхемуПриПоступлении
				И ДатаОрдера >= РеквизитыСклада.ДатаНачалаОрдернойСхемыПриПоступлении Тогда
				МассивСкладов.Добавить(РеквизитыСклада.Склад);
			КонецЕсли;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.ИспользоватьОрдернуюСхемуПриПоступлении
			|	И &ДатаОрдера >= Склады.ДатаНачалаОрдернойСхемыПриПоступлении
			|	И (НЕ Склады.ПометкаУдаления)
			|	И (НЕ Склады.ЭтоГруппа)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивСкладов.Добавить(Выборка.Склад);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("Ссылка", Объект.Распоряжение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварыКПоступлению.Склад
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.ДокументПоступления = &Ссылка";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Пока Выборка.Следующий() Цикл
			МассивСкладов.Добавить(Выборка.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) 
	 И МассивСкладов.Найти(Объект.Склад) = Неопределено Тогда
		МассивСкладов.Добавить(Объект.Склад);
	КонецЕсли;
	
	Возврат МассивСкладов;
	
КонецФункции

Функция ЗаполнитьСерииПоРаспоряжению(Объект, ВыдаватьОшибки) Экспорт
	
	Если Не ВозможноЗаполнениеСерийПоРаспоряжению(Объект, ВыдаватьОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению Тогда
		Серии = ТаблицаСерийПоОтгрузкеПриПеремещении(Объект);
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства Тогда
		Серии = ТаблицаСерийВыпущеннойПродукции(Объект);
	Иначе
		Серии = ТаблицаФинансовыхСерийИзРаспоряжения(Объект);
	КонецЕсли;
	
	Если Серии.Количество() = 0 Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'По распоряжению нет серий, которые можно перенести в ордер.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары);
	
	НоменклатураСервер.ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Серии,, Истина);
	
	Действия = Новый Структура;
	Действия.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда 
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Иначе
		Действия.Вставить("ПересчитатьКоличествоУпаковок");
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
														ПараметрыУказанияСерий,
														Серии,
														Действия);
	Возврат Истина;
КонецФункции

Функция ВозможноЗаполнениеСерийПоРаспоряжению(Объект, ВыдаватьОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",Объект.Склад)) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'На складе не ведется учет серий.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;	
	КонецЕсли;
	
	Если СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад,Объект.Дата)
		И Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Помещение""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Помещение","Объект");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению Тогда
		
		СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение,"СкладОтправитель");
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",СкладОтправитель)) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе-отправителе не ведется учет по сериям'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;
		
		Если СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(СкладОтправитель,Объект.Дата) Тогда
			
			Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата)
				И Не СкладыСервер.ИспользоватьАдресноеХранение(СкладОтправитель, Справочники.СкладскиеПомещения.ПустаяСсылка(),Объект.Дата)
				И Не СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель,Объект.Дата) Тогда
				
				Если ВыдаватьОшибки Тогда
					ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Возврат Ложь;	
				
			КонецЕсли;
				
			Если СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель,Объект.Дата)
				И СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТоварыПоРаспоряжениям.Ссылка
				|ИЗ
				|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
				|ГДЕ
				|	ТоварыПоРаспоряжениям.Распоряжение = &Распоряжение 
				|	И ТоварыПоРаспоряжениям.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
				|	И ТоварыПоРаспоряжениям.Ссылка.Проведен
				|	И (НЕ (ТоварыПоРаспоряжениям.Ссылка.Помещение.ИспользоватьАдресноеХранение)
				|		ИЛИ ТоварыПоРаспоряжениям.Ссылка.Дата < ТоварыПоРаспоряжениям.Ссылка.Помещение.ДатаНачалаАдресногоХраненияОстатков)";
				
				Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
				
				Если Не Запрос.Выполнить().Пустой() Тогда
					Если ВыдаватьОшибки Тогда
						ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. Отгрузка производилась из помещений склада-отправителя, на которых учет в разрезе складския ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					Возврат Ложь;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда
				Если ВыдаватьОшибки Тогда
					ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок. На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров
		Или Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваровУстарел Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'В операциях при приемке по возврату непринятых получателем товаров заполнение серий по распоряжению не поддерживается.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	Иначе
		
		Если Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура("Склад",Объект.Склад)) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'В распоряжении могут быть указаны только серии, по которым учитывается себестоимость, но складе не настроено использование таких серий.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;
		
		Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек. Серии могут быть заполнены по распоряжению только при перемещении товаров с адресного склада. По другим типам распоряжений заполнение серий на этом складе не поддерживается.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции

Функция ТаблицаСерийПоОтгрузкеПриПеремещении(Объект)
	
	СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение,"СкладОтправитель");
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстЗапросаПоРаспоряжениям =
		" ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПеремещениеТоваров.Ссылка КАК Распоряжение 
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Товары.ЗаказНаПеремещение = &Распоряжение";
	Иначе
		ТекстЗапросаПоРаспоряжениям =
		" &Распоряжение ";
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыКПоступлению.Назначение) КАК Назначение
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.ДокументПоступления = &Распоряжение
	|	И ТоварыКПоступлению.КОформлениюОрдеров > 0
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыКПоступлению.Назначение) > 1";
	
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	ОдноНазначениеПоТовару = Запрос.Выполнить().Пустой();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(СкладОтправитель,Объект.Дата)
		И ОдноНазначениеПоТовару Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Упаковка,
		|	ВложенныйЗапрос.Серия,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ТаблицаСерии
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасходныйОрдерНаТоварыСерии.Номенклатура КАК Номенклатура,
		|		РасходныйОрдерНаТоварыСерии.Характеристика КАК Характеристика,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА РасходныйОрдерНаТоварыСерии.Упаковка
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		КОНЕЦ КАК Упаковка,
		|		РасходныйОрдерНаТоварыСерии.Серия КАК Серия,
		|		РасходныйОрдерНаТоварыСерии.Количество КАК Количество,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА РасходныйОрдерНаТоварыСерии.КоличествоУпаковок
		|			ИНАЧЕ РасходныйОрдерНаТоварыСерии.Количество
		|		КОНЕЦ КАК КоличествоУпаковок
		|	ИЗ
		|		Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыСерии
		|	ГДЕ
		|		РасходныйОрдерНаТоварыСерии.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|												ТоварыПоРаспоряжениям.Ссылка КАК Ссылка 
		|												ИЗ
		|													Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
		|												ГДЕ
		|													ТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
		|													И ТоварыПоРаспоряжениям.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
		|													И ТоварыПоРаспоряжениям.Ссылка.Проведен)
		|		И РасходныйОрдерНаТоварыСерии.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить)
		|		И НЕ РасходныйОрдерНаТоварыСерии.ЭтоУпаковочныйЛист
		|		И РасходныйОрдерНаТоварыСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйОрдерНаТоварыСерии.Номенклатура,
		|		ПриходныйОрдерНаТоварыСерии.Характеристика,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА ПриходныйОрдерНаТоварыСерии.Упаковка
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		КОНЕЦ,
		|		ПриходныйОрдерНаТоварыСерии.Серия,
		|		-ПриходныйОрдерНаТоварыСерии.Количество,
		|		-ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА ПриходныйОрдерНаТоварыСерии.КоличествоУпаковок
		|			ИНАЧЕ ПриходныйОрдерНаТоварыСерии.Количество
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыСерии
		|	ГДЕ
		|		ПриходныйОрдерНаТоварыСерии.Ссылка.Распоряжение = &Распоряжение
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка <> &ТекущийПриходныйОрдер
		|		И ПриходныйОрдерНаТоварыСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка.Проведен) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Серия,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика КАК Характеристика,
		|	ТоварыКПоступлению.Назначение КАК Назначение
		|ПОМЕСТИТЬ НазначенияТоваров
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.ДокументПоступления = &Распоряжение
		|	И ТоварыКПоступлению.КОформлениюОрдеров > 0
		|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	НазначенияТоваров.Назначение,
		|	ТаблицаСерии.Упаковка,
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаСерии.Количество КАК Количество
		|ИЗ
		|	ТаблицаСерии КАК ТаблицаСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенияТоваров КАК НазначенияТоваров
		|		ПО ТаблицаСерии.Номенклатура = НазначенияТоваров.Номенклатура
		|			И ТаблицаСерии.Характеристика = НазначенияТоваров.Характеристика";
			
		Запрос.УстановитьПараметр("Распоряжение",Объект.Распоряжение);
		Запрос.УстановитьПараметр("ТекущийПриходныйОрдер",Объект.Ссылка);
		Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение,Объект.Дата));
		
		Серии = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Серия,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПеремещениеТоваровСерии.Серия КАК Серия,
		|		ПеремещениеТоваровСерии.Количество КАК Количество,
		|		ПеремещениеТоваровСерии.Номенклатура КАК Номенклатура,
		|		ПеремещениеТоваровСерии.Характеристика КАК Характеристика,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПеремещениеТоваровСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
		|				ТОГДА ПеремещениеТоваровСерии.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК Назначение
		|	ИЗ
		|		Документ.ПеремещениеТоваров.Серии КАК ПеремещениеТоваровСерии
		|	ГДЕ
		|		ПеремещениеТоваровСерии.Ссылка В(&ТекстЗапросаПоРаспоряжениям)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПеремещениеТоваровТовары.Серия,
		|		ПеремещениеТоваровТовары.Количество,
		|		ПеремещениеТоваровТовары.Номенклатура,
		|		ПеремещениеТоваровТовары.Характеристика,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ПеремещениеТоваровТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
		|				ТОГДА ПеремещениеТоваровТовары.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|	ГДЕ
		|		ПеремещениеТоваровТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		И ПеремещениеТоваровТовары.Ссылка В(&ТекстЗапросаПоРаспоряжениям)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйОрдерНаТоварыСерии.Серия,
		|		-ПриходныйОрдерНаТоварыСерии.Количество,
		|		ПриходныйОрдерНаТоварыСерии.Номенклатура,
		|		ПриходныйОрдерНаТоварыСерии.Характеристика,
		|		ПриходныйОрдерНаТоварыСерии.Назначение
		|	ИЗ
		|		Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыСерии
		|	ГДЕ
		|		ПриходныйОрдерНаТоварыСерии.Ссылка.Распоряжение = &Распоряжение
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка <> &ТекущийПриходныйОрдер
		|		И ПриходныйОрдерНаТоварыСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка.Проведен) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Серия,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПоРаспоряжениям", ТекстЗапросаПоРаспоряжениям);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Распоряжение",Объект.Распоряжение);
		Запрос.УстановитьПараметр("ТекущийПриходныйОрдер",Объект.Ссылка);
		
		Серии = Запрос.Выполнить().Выгрузить();
	
	КонецЕсли;
	
	Возврат Серии;
	
КонецФункции

Функция ТаблицаСерийВыпущеннойПродукции(Объект)
	

	Возврат Новый ТаблицаЗначений;
КонецФункции

Функция ТаблицаФинансовыхСерийИзРаспоряжения(Объект)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	-СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлениюПоступленияОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлениюПоступленияОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОформлениюПоступленияОстатки.Назначение КАК Назначение,
	|		ТоварыКОформлениюПоступленияОстатки.Серия КАК Серия,
	|		ТоварыКОформлениюПоступленияОстатки.КОформлениюПоступленийПоОрдерамОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению.Остатки(
	|				,
	|				ДокументПоступления = &Распоряжение
	|					И Склад = &Склад
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК ТоварыКОформлениюПоступленияОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлениюПоступления.Номенклатура,
	|		ТоварыКОформлениюПоступления.Характеристика,
	|		ТоварыКОформлениюПоступления.Назначение,
	|		ТоварыКОформлениюПоступления.Серия,
	|		ВЫБОР
	|			КОГДА ТоварыКОформлениюПоступления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
	|			ИНАЧЕ -ТоварыКОформлениюПоступления.КОформлениюПоступленийПоОрдерам
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКПоступлению КАК ТоварыКОформлениюПоступления
	|	ГДЕ
	|		ТоварыКОформлениюПоступления.Регистратор = &ТекущийПриходныйОрдер) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Серия
	|
	|ИМЕЮЩИЕ
	|	-СУММА(ВложенныйЗапрос.Количество) > 0";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ТекущийПриходныйОрдер", Объект.Ссылка);
	Серии = Запрос.Выполнить().Выгрузить();
	
	Возврат Серии;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.ХозяйственнаяОперация В (&ОперацииДляЗамены)
	|	И ПриходныйОрдерНаТовары.СкладскаяОперация <> ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров)
	|	И ПриходныйОрдерНаТовары.Распоряжение <> НЕОПРЕДЕЛЕНО
	|";
	
	ОперацииДляЗамены = ОперацииДляЗамены();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОперацииДляЗамены", ОперацииДляЗамены);
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриходныйОрдерНаТовары";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	РезультатВТРеестра = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
																														"РегистрСведений.РеестрДокументов",
																														МенеджерВременныхТаблиц); 
	
	РезультатВТСоглашения = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
																														"Справочник.СоглашенияСПоставщиками",
																														МенеджерВременныхТаблиц); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ОбъектыДляОбработки.Ссылка.Распоряжение КАК Распоряжение,
	|	(ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация В (&ОперацииДляЗамены)
	|		И ОбъектыДляОбработки.Ссылка.СкладскаяОперация <> ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров))
	|		КАК ТребуетсяЗаполнениеХозяйственнойОперации,
	|	МАКСИМУМ(ВЫБОР
	// Ордера по соглашениям по двухходовке не могут взять новую хоз.операцию из внешнего источника или самого соглашения
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|
	|			КОГДА ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация В (&ОперацииДляЗамены)
	|				И ЕСТЬNULL(РеестрДокументов.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|				ТОГДА РеестрДокументов.ХозяйственнаяОперация
	|
	|			КОГДА ОбъектыДляОбработки.Ссылка.Распоряжение ССЫЛКА Справочник.СоглашенияСПоставщиками
	|				ТОГДА ЕСТЬNULL(СоглашенияСПоставщиками.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
	|			КОГДА ОбъектыДляОбработки.Ссылка.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
	|			ИНАЧЕ ЕСТЬNULL(РеестрДокументов.ХозяйственнаяОперация, ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка))
	|		КОНЕЦ) КАК ХозяйственнаяОперация,
	|	СУММА(1) КАК Контроль
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО (РеестрДокументов.Ссылка = ОбъектыДляОбработки.Ссылка.Распоряжение)
	|			И (РеестрДокументов.ХозяйственнаяОперация В (&ХозяйственныеОперации))
	|			И (НЕ РеестрДокументов.ДополнительнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеобработанныеЗаписиРеестра КАК НеобработанныеЗаписиРеестра
	|		ПО (НеобработанныеЗаписиРеестра.Ссылка = ОбъектыДляОбработки.Ссылка.Распоряжение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО (СоглашенияСПоставщиками.Ссылка = ОбъектыДляОбработки.Ссылка.Распоряжение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО (ДоговорыКонтрагентов.Ссылка = ОбъектыДляОбработки.Ссылка.Распоряжение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеобработанныеСоглашения КАК НеобработанныеСоглашения
	|		ПО (НеобработанныеСоглашения.Ссылка = ОбъектыДляОбработки.Ссылка.Распоряжение)
	|ГДЕ
	|	НеобработанныеЗаписиРеестра.Ссылка ЕСТЬ NULL
	|	И НеобработанныеСоглашения.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыДляОбработки.Ссылка,
	|	ОбъектыДляОбработки.Ссылка.ВерсияДанных,
	|	ОбъектыДляОбработки.Ссылка.Распоряжение,
	|	(ОбъектыДляОбработки.Ссылка.ХозяйственнаяОперация В (&ОперацииДляЗамены)
	|		И ОбъектыДляОбработки.Ссылка.СкладскаяОперация <> ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВозвратНепринятыхТоваров))
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНеобработанныеЗаписиРеестра", РезультатВТРеестра.ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНеобработанныеСоглашения", РезультатВТСоглашения.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозяйственныеОперации", СкладыКлиентСервер.ХозяйственныеОперацииПриемкиНаСклад());
	
	ОперацииДляЗамены = ОперацииДляЗамены();
	
	Запрос.УстановитьПараметр("ОперацииДляЗамены", ОперацииДляЗамены);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			
			Блокировка.Заблокировать();
			
			// Реестр документов не блокируем, т.к.
			// - запись другими обработчиками обновления в реестр исключается соединением с ВТ заблокированных
			// - ситуация, когда при конкуретной работе хоз. операция в реестре по распоряжению поменяется до отработки обработчика
			//    аналогична ситуации, когда после создания приходного ордера хоз. операцию поменяют в распоряжении. Мы не блокируем
			//    возникновение такой ситуации в обычной работе, значит можно не блокировать и при работе обработчика.
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Выборка.ТребуетсяЗаполнениеХозяйственнойОперации Тогда
				
				Если Выборка.Контроль <> 1 Тогда
					ТекстИсключения = НСтр("ru = 'Невозможно заполнить хозяйственную операцию в ордере, т.к. в распоряжение отражено в реестре более чем по одной хозяйственной операции приемки товаров на склад.'");
					ВызватьИсключение ТекстИсключения;
				ИначеЕсли Не ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация) Тогда
					ТекстИсключения = НСтр("ru = 'Невозможно заполнить хозяйственную операцию в ордере, т.к. в распоряжение не удалось по данным реестра документов определить хозяйственную операцию.'");
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				ДокументОбъект.ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
				
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Функция ОперацииДляЗамены()
	
	ОперацииДляЗамены = Новый Массив();
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
	ОперацииДляЗамены.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	
	Возврат ОперацииДляЗамены;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
