#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заявление о ввозе товаров из ЕАЭС".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваров) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявлениеОВвозеТоваров);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Функция находит заявления о ввозе товаров заданного документа-основания.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти заявление о ввозе товаров
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется заявление о ввозе товаров
//	РеквизитыЗаявленияОВВозеТоваров - Структура - Возвращаемый. Данные заявления о ввозе товаров (Ссылка, Номер, Дата, Организация)
//	Проведен - Булево - Признак того, что 
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных заявлений о ввозе товаров (Ссылка, Номер, Дата, Организация, ДатаПодтвержденияОплаты)
//
Функция ЗаявленияОВвозеТоваровПоОснованию(Основание, Организация = Неопределено, РеквизитыЗаявленияОВВозеТоваров = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Операция.Ссылка                                  КАК Ссылка,
	|	Операция.Проведен                                КАК Проведен,
	|	Операция.Номер                                   КАК Номер,
	|	Операция.Дата                                    КАК Дата,
	|	Операция.Организация                             КАК Организация,
	|	Операция.Контрагент                              КАК Контрагент,
	|	ПолученоПодтверждение.ДатаПодтвержденияОплаты    КАК ДатаПодтвержденияОплаты,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ЗаявлениеОВвозеТоваровТовары.Ссылка = Операция.Ссылка
	|		И НЕ Операция.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПолученоПодтверждение
	|		ПО Операция.Ссылка = ПолученоПодтверждение.СчетФактура
	|			И ПолученоПодтверждение.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = &Основание
	|	И ВЫБОР 
	|		КОГДА &Организация = НЕОПРЕДЕЛЕНО ТОГДА
	|			ИСТИНА 
	|		ИНАЧЕ 
	|			Операция.Организация = &Организация 
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	ЗаявлениеОВвозеТоваровТовары.ДокументПоступления,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	ПолученоПодтверждение.ДатаПодтвержденияОплаты
	|");
	
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыЗаявленияОВвозеТоваров = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыЗаявленияОВвозеТоваров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаЗаявлений = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаявлений = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыЗаявленияОВвозеТоваров, ТаблицаЗаявлений[0]);
	КонецЕсли;
	
	Возврат ТаблицаЗаявлений;
	
КонецФункции

// Процедура формирует таблицу остатков товаров к оформлению заявлений о ввозе товаров по документу поступления.
//
// Параметры:
//	ДокументПоступления - ДокументСсылка.ПриобретениеТоваровУслуг - Документ поступления, по которому 
//						  будут определены остатки товаров к оформлению заявлений о ввозе товаров
//	ЗаполнениеНаОсновании - Булево, признак того, что документ введен на основании приобретения товаров  услуг
//	
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица остатокв товаров для оформления заявлений
//
Функция ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ДокументПоступления, ЗаполнениеНаОсновании = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе();
	
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Запрос.УстановитьПараметр("ДатаПринятияНаУчет", ДокументПоступления.Дата);
	Запрос.УстановитьПараметр("ДолларСША", Справочники.Валюты.НайтиПоКоду("840"));
	Запрос.УстановитьПараметр("ВидТранспорта", ОпределитьВидТранспортаПоСтатистике(ДокументПоступления));
	Запрос.УстановитьПараметр("ЗаполнениеНаОсновании", ЗаполнениеНаОсновании);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "ЗаявлениеОВвозеТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Заявление о ввозе товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьЗаявлениеОВвозеТоваров";
	КомандаПечати.СписокФорм     = "ФормаДокумента,ФормаСписка,СписокДокументов";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "СтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.Представление  = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Статистическая форма учета перемещения товаров'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьСтатистическаяФормаУчетаПеремещенияТоваров";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   ОбъектыПечати         - Список значений  - значение - ссылка на объект
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОВвозеТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ЗаявлениеОВвозеТоваров", 
			НСтр("ru = 'Заявление о ввозе товаров и уплате косвенных налогов'"),
			ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СтатистическаяФормаУчетаПеремещенияТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"СтатистическаяФормаУчетаПеремещенияТоваров", 
			НСтр("ru = 'Статистическая форма учета перемещения товаров'"),
			ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

//Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - структура со следующими свойствами:
//	* МассивОрганизаций - Массив - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа приобретения.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа приобретения 
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументПриобретениеТоваровУслуг.Ссылка) КАК КоличествоДокументовКОформлению
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(&КонецПериодаГраница, ) КАК ТоварыКОформлениюЗаявленийОВвозеОстатки
	|		ПО ДокументПриобретениеТоваровУслуг.Ссылка = ТоварыКОформлениюЗаявленийОВвозеОстатки.ДокументПоступления
	|ГДЕ
	|	&УсловиеОтбораОрганизации
	|	И &УсловиеОтбораПериода";
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		УсловиеОтбораОрганизации = "ДокументПриобретениеТоваровУслуг.Организация В (&МассивОрганизаций)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораОрганизации", УсловиеОтбораОрганизации);
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораОрганизации", "ИСТИНА");
	КонецЕсли;
	
	Если Параметры.Свойство("БезОграниченияПериода") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораПериода", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&КонецПериодаГраница", "");
	Иначе
		УсловиеОтбораПериода = "ДокументПриобретениеТоваровУслуг.Дата <= &КонецПериода";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбораПериода", УсловиеОтбораПериода);
		Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(Параметры.КонецПериода));
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.КоличествоДокументовКОформлению = NULL Тогда
		Возврат Выборка.КоличествоДокументовКОформлению;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаявлениеОВвозеТоваров";
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОплатаНДСВБюджет(ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка,
	|	ЗаявлениеОВвозеТоваров.Дата,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.Валюта,
	|	ЗаявлениеОВвозеТоваров.СуммаДокумента,
	|	ЗаявлениеОВвозеТоваров.Номер                    КАК Номер,
	|	ЗаявлениеОВвозеТоваров.Договор                  КАК Договор,
	|	ЗаявлениеОВвозеТоваров.Ответственный            КАК Ответственный,
	|	ЗаявлениеОВвозеТоваров.Подразделение            КАК Подразделение,
	|	ЗаявлениеОВвозеТоваров.Комментарий              КАК Комментарий,
	|	ЗаявлениеОВвозеТоваров.ПометкаУдаления          КАК ПометкаУдаления,
	|	ЗаявлениеОВвозеТоваров.Проведен                 КАК Проведен
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Дата);
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",                 Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Валюта",                     Реквизиты.Валюта);
	Запрос.УстановитьПараметр("КодВидаОперации", 			"19"); // "19 Ввоз товаров из Евразийского экономического союза"
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	Запрос.УстановитьПараметр("Договор",                       Реквизиты.Договор);
	Запрос.УстановитьПараметр("СуммаДокумента",                Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("Валюта",                        Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент",                    Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Номер",                         Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерНаПечать",       	       ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер,Истина));
	Запрос.УстановитьПараметр("Ответственный",                 Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Подразделение",                 Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",         Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Запрос.УстановитьПараметр("Комментарий",                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления",               Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                      Реквизиты.Проведен);
	Запрос.УстановитьПараметр("СуммаНДС",                      ДокументСсылка.Товары.Итог("СуммаНДС"));
	Запрос.УстановитьПараметр("НалоговаяБазаНДС",              ДокументСсылка.Товары.Итог("НалоговаяБазаНДС"));
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКурсыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Константы.ВалютаРегламентированногоУчета.Получить(),
		Константы.ВалютаУправленческогоУчета.Получить(),
		Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОформлениюЗаявленийОВвозеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|		ЗаявлениеОВвозеТоваровТовары.НомерСтроки           КАК НомерСтроки,
	|		&Период                                            КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|		ЗаявлениеОВвозеТоваровТовары.ДокументПоступления   КАК ДокументПоступления,
	|		ЗаявлениеОВвозеТоваровТовары.Номенклатура          КАК Номенклатура,
	|		ЗаявлениеОВвозеТоваровТовары.Характеристика        КАК Характеристика,
	|		ЗаявлениеОВвозеТоваровТовары.Серия                 КАК Серия,
	|		ЗаявлениеОВвозеТоваровТовары.Склад                 КАК Склад,
	|		ЗаявлениеОВвозеТоваровТовары.Количество            КАК КОформлению,
	|		ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость    КАК ФактурнаяСтоимость
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|	ГДЕ
	|		ЗаявлениеОВвозеТоваровТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 											КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО										КАК Поставщик,
	|	ДанныеДокумента.Контрагент							КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС 							КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность				КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныйСоюз)	КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыПоступления"" 								КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер					КАК Поставщик,
	|	ДанныеДокументаПоступления.Контрагент				КАК Контрагент,
	|	МИНИМУМ(ТаблицаДокументаПоступления.СтавкаНДС)		КАК СтавкаНДС,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)			КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ТаблицаДокументаПоступления.Ссылка
	|		И ВЫБОР 
	|			КОГДА ТаблицаДокументаПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТаблицаДокумента.ИдентификаторСтроки = ТаблицаДокументаПоступления.ИдентификаторСтроки
	|			ИНАЧЕ
	|		 		ТаблицаДокумента.АналитикаУчетаНоменклатуры = ТаблицаДокументаПоступления.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ДанныеДокументаПоступления.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер,
	|	ДанныеДокументаПоступления.Контрагент,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокументаПоступления.СтавкаНДС) = 1
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата							КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ДокументПоступления				КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.Ссылка 							КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|						* ТоварыДокумента.СуммаНДС) КАК Стоимость,
	|	0										 		КАК СтоимостьБезНДС,
	|	0										 		КАК СтоимостьРегл,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)										КАК НДСРегл,
	|	ТоварыДокумента.Подразделение					КАК ПодразделениеРасходов,
	|	0												КАК ПостояннаяРазница,
	|	0												КАК ВременнаяРазница
	|
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.ДокументПоступления,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий,
	|	ТоварыДокумента.Подразделение
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|
	|	0			 КАК Стоимость,
	|	0 			 КАК СтоимостьБезНДС,
	|	0 			 КАК СтоимостьРегл,
	|	0			 КАК ПостояннаяРазница,
	|	0			 КАК ВременнаяРазница,
	|	ТоварыДокумента.СуммаНДС	 					 КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		ИНАЧЕ 0 КОНЕЦ 							 КАК НДСУпр,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС	 КАК ВидДеятельностиНДС,
	|	&Ссылка 					 					 КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий	 КАК АналитикаУчетаПартий,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		 КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|	ПО ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период													КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)									КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры 								КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ 													КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ															КАК ВидЗапасов,
	|	ДанныеДокумента.Организация												КАК Организация,
	|
	//	партионный учет версии 2.2
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК Партия,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ КАК ТипЗаписи,
	|
	|	0																		КАК Количество,
	|	0																		КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС)		КАК ДопРасходы,
	|	0																		КАК СтоимостьБезНДС,
	|	0																		КАК ДопРасходыБезНДС,
	|	СУММА(ВЫБОР КОГДА &УправленческийУчетОрганизаций
	|	 И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыУпр,
	|	СУММА(ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|			ТОГДА 0 
	|		ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|	КОНЕЦ)	 																КАК НДСУпр,
	|
	|	СУММА(ВЫБОР КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	ТОГДА
	|		&КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)																	КАК ДопРасходыРегл,
	|	0																		КАК ПостояннаяРазница,
	|	0																		КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)		КАК ХозяйственнаяОперация,
	|	ТоварыДокумента.Подразделение											КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления										КАК ДокументИсточник
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|	ПО 
	|		ТоварыПоступления.Ссылка = ТоварыДокумента.ДокументПоступления
	|		И ВЫБОР 
	|			КОГДА ТоварыПоступления.ИдентификаторСтроки <> """" ТОГДА
	|				ТоварыПоступления.ИдентификаторСтроки = ТоварыДокумента.ИдентификаторСтроки
	|			ИНАЧЕ
	|				ТоварыПоступления.АналитикаУчетаНоменклатуры = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|			КОНЕЦ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ПО
	|		ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|	ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.СуммаНДС <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ЕСТЬNULL(ТоварыПоступления.ВидЗапасов, ТоварыДокумента.ВидЗапасов)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ПриобретениеТоваровУслуг.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ПриобретениеТоваровУслуг.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ПриобретениеТоваровУслуг.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ПриобретениеТоваровУслуг.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ПриобретениеТоваровУслуг.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПриобретениеТоваровУслуг.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаСтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода) КОНЕЦ,
	|	ТоварыДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                               КАК ВидДвижения,
	|	ДанныеДокумента.Организация                                          КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)               КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)            КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеПассивы) КАК Статья,
	|	ДанныеДокумента.Организация                                          КАК Аналитика,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента 
	|					* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК Сумма
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";

	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьКурсыВалют(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Операция.Дата                                              КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КАК ХозяйственнаяОперация,
	|	Операция.Организация                                       КАК Организация,
	|	ПриобретениеТоваровУслугТовары.Подразделение                КАК Подразделение,
	|	ПриобретениеТоваровУслуг.Менеджер                           КАК Менеджер,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры                 КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад                                      КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов                      КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                      КАК ВидЗапасов,
	|	ПриобретениеТоваровУслуг.Партнер                            КАК Партнер,
	|	ПриобретениеТоваровУслуг.Контрагент                         КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Соглашение                         КАК Соглашение,
	|	ПриобретениеТоваровУслуг.Договор                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|	ПриобретениеТоваровУслуг.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	0                                                          КАК Количество,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Сумма,
	|	0                                                          КАК СуммаБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаРегл,
	|	0                                                          КАК СуммаРеглБезНДС,
	|	0                                                          КАК СуммаСкидки,
	|	&КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС КАК Стоимость,
	|	0                                                          КАК СтоимостьБезНДС,
	|	ТоварыДокумента.СуммаНДС                                   КАК СтоимостьРегл,
	|	0                                                          КАК ДопРасходы,
	|	0                                                          КАК ДопРасходыБезНДС,
	|
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаДокумента,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеДокумента,
	|	0                                                          КАК СуммаБезНДСВВалютеДокумента,
	|	&ВалютаРегламентированногоУчета                            КАК ВалютаВзаиморасчетов,
	|	ТоварыДокумента.СуммаНДС                                   КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                          КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ                                                      КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПриобретениеТоваровУслуг.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|			ТОГДА
	|				ПриобретениеТоваровУслуг.Договор
	|		КОГДА ПриобретениеТоваровУслуг.ПоступлениеПоЗаказам
	|				И ПриобретениеТоваровУслуг.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА
	|				ПриобретениеТоваровУслуг.ЗаказПоставщику
	|		ИНАЧЕ
	|			ПриобретениеТоваровУслуг.Ссылка
	|	КОНЕЦ                                                       КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО ПриобретениеТоваровУслугТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|		ПО ТоварыДокумента.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ТоварыДокумента.АналитикаУчетаНоменклатуры = ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|		ПО ТоварыДокумента.Ссылка = Операция.Ссылка
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	&ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО             КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ДанныеДокумента.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                    КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	&Ответственный           КАК Ответственный,
	|	&Комментарий             КАК Комментарий,
	|	&Валюта                  КАК Валюта,
	|	&СуммаДокумента          КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	&Период                  КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать           КАК НомерПервичногоДокумента
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                                             КАК Ссылка,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК МестоХранения,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))                  КАК КоличествоМестХранения
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТаблицаТовары
	|		ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	&Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.НомерОтметкиОРегистрации, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ПодтверждениеОплатыНДСВБюджет.ДатаПодтвержденияОплаты, &Период) КАК ДатаСчетаФактуры,
	|	""19"" КАК КодВидаОперации,
	|	2 КАК КодВидаСделки,
	|	1 КАК КодСпособаПолучения,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	&НалоговаяБазаНДС КАК СуммаПоСчетуФактуре,
	|	&СуммаНДС КАК СуммаНДС
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ПодтверждениеОплатыНДСВБюджет
	|ГДЕ
	|	ПодтверждениеОплатыНДСВБюджет.СчетФактура = &Ссылка
	|	И ПодтверждениеОплатыНДСВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура формирования движений по регистру "Товары к оформлению заявлений о ввозе".
//
// Параметры:
//	ДополнительныеСвойства - Структура, перечень таблиц значений для записи в регистры
//	Движения - Коллекция движений документа
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТоварыКОформлениюЗаявленийОВвозеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКОформлениюЗаявленийОВвозе = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюЗаявленийОВвозеТоваров;
	
	Если Отказ ИЛИ ТаблицаТоварыКОформлениюЗаявленийОВвозе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКОформлениюЗаявленийОВвозе = Движения.ТоварыКОформлениюЗаявленийОВвозе;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Записывать = Истина;
	ДвиженияТоварыКОформлениюЗаявленийОВвозе.Загрузить(ТаблицаТоварыКОформлениюЗаявленийОВвозе);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОплатаНДСВБюджет(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПодтверждениеОплатыНДСВБюджет";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка             КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты)
	|						КАК Состояние,
	|	ЛОЖЬ                КАК РучнаяКорректировка,
	|	""""                КАК НомерДокументаПеречисленияНалога,
	|	ДАТАВРЕМЯ(1,1,1)    КАК ДатаДокументаПеречисленияНалога,
	|	&СуммаНДС 			КАК Сумма,
	|	""""                КАК НомерОтметкиОРегистрации,
	|	ДАТАВРЕМЯ(1,1,1)    КАК ДатаПодтвержденияОплаты,
	|	""""                КАК СтрокаПлатежноРасчетныеДокументы,
	|	НЕОПРЕДЕЛЕНО        КАК ВидАгентскогоДоговора";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ЗаявлениеОВвозеТоваров";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	ЗначенияПараметров.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

// Переформировывает движения в ЖурналУчетаСчетовФактур без перепроведения документа.
// Формирует задание на отражение в книге покупок.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивДокументов - Массив - Документы, движения которых необходимо актуализировать.
//	ПризнакОтменаПроведения - Булево - Признак, что переформировать движения необходимо по причине отмены проведения документа.
//
Процедура СформироватьДвиженияВЖурналУчетаСчетовФактур(МассивРегистраторов, ПризнакОтменаПроведения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка КАК СчетФактура,
	|	Заявления.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты, МЕСЯЦ) КАК Месяц,
	|	ДанныеОплатыВБюджет.ДатаПодтвержденияОплаты КАК ДатаОтражения
	|ИЗ
	|	РегистрСведений.ПодтверждениеОплатыНДСВБюджет КАК ДанныеОплатыВБюджет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ПО ДанныеОплатыВБюджет.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	ДанныеОплатыВБюджет.СчетФактура В(&МассивРегистраторов)
	|	И ДанныеОплатыВБюджет.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ПолученоПодтверждение)
	|	И Заявления.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявления.Ссылка,
	|	Заявления.Организация,
	|	НАЧАЛОПЕРИОДА(ЖурналУчетаСчетовФактур.ДатаСчетаФактуры, МЕСЯЦ),
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Заявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ЖурналУчетаСчетовФактур.СчетФактура = Заявления.Ссылка
	|ГДЕ
	|	Заявления.Ссылка В(&МассивРегистраторов)
	|	И Заявления.Проведен
	|ИТОГИ ПО
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	МассивСчетовФактур = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналУчетаСчетовФактур.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.СчетФактура);
			
			Блокировка.Заблокировать();
			
			ДополнительныеСвойства = Новый Структура;
			ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
			
			Движения = Новый Структура;
			
			ЖурналУчетаСчетовФактур = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			ЖурналУчетаСчетовФактур.Отбор.Регистратор.Установить(Выборка.СчетФактура);
			Движения.Вставить("ЖурналУчетаСчетовФактур", ЖурналУчетаСчетовФактур);
			
			
			Регистры = Новый Структура;
			Регистры.Вставить("ЖурналУчетаСчетовФактур");
			
			ИнициализироватьДанныеДокумента(Выборка.СчетФактура, ДополнительныеСвойства, Регистры); 
			ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Ложь);
			
			ВыборкаДатыОтражения = Выборка.Выбрать();
			РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СоздатьЗаписиРегистраПоДаннымВыборки(ВыборкаДатыОтражения);
			
			
			Для каждого Движение Из Движения Цикл
				Движение.Значение.Записать();
			КонецЦикла;
			
			МассивСчетовФактур.Добавить(Выборка.СчетФактура);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить отражение в учете НДС документа ""%1"" по причине: %2'"),
					Выборка.СчетФактура,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

Функция ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ПервичноеЗаявление", НСтр("ru = 'первичное заявление'"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументСсылка,
	|	Реквизиты.Номер КАК НомерЗаяв,
	|	Реквизиты.Дата КАК ДатаДокНП,
	|	Реквизиты.Дата КАК Дата,
	|	ДЕНЬ(Реквизиты.Дата) КАК Число,
	|	МЕСЯЦ(Реквизиты.Дата) КАК Месяц,
	|	ГОД(Реквизиты.Дата) КАК Год,
	|	НЕОПРЕДЕЛЕНО КАК СтрВсего,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.НаименованиеПолное = """"
	|			ТОГДА Реквизиты.Контрагент.Наименование
	|		ИНАЧЕ Реквизиты.Контрагент.НаименованиеПолное
	|	КОНЕЦ КАК ПродавецНаимОрг,
	|	Реквизиты.Контрагент.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	Реквизиты.Контрагент.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	Реквизиты.НомерДоговора КАК НомерДог,
	|	Реквизиты.ДатаДоговора КАК ДатаДог,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ИННОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК НаимОрг_1,
	|	НЕОПРЕДЕЛЕНО КАК КодСтраныОрг1,
	|	НЕОПРЕДЕЛЕНО КАК МестоНахождОрг_1,
	|	ЛОЖЬ КАК КомиссионерБайконур,
	|	НЕОПРЕДЕЛЕНО КАК НомКонтр_2,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаКонтр_2,
	|	НЕОПРЕДЕЛЕНО КАК НомерСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСпецификации_07,
	|	НЕОПРЕДЕЛЕНО КАК РеквизитыПосредник,
	|	ЛОЖЬ КАК ПрЛизинг,
	|	ЛОЖЬ КАК ПрДавСырья,
	|	ЛОЖЬ КАК ПрПродФЛ,
	|	Реквизиты.Организация.ИНН КАК ПокупательИНН,
	|	Реквизиты.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО ПокупательНаимОрг,
	|	""643"" КАК КодСтраныПокупатель,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	Реквизиты.Проведен,
	|	Реквизиты.Организация,
	|	Реквизиты.Контрагент,
	|	Реквизиты.Договор,
	|	Реквизиты.Валюта,
	|	Реквизиты.Ответственный,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.Валюта.Код,
	|	НЕОПРЕДЕЛЕНО КАК ФИОРук,
	|	НЕОПРЕДЕЛЕНО КАК ФИОБух,
	|	Реквизиты.Дата КАК ДатаПодписиРук,
	|	Реквизиты.Дата КАК ДатаПодписиБух,
	|	&ПервичноеЗаявление КАК ПричинаЗаявления,
	|	"""" КАК НомерОтметки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтметки,
	|	0 КАК ИзмениеЦеныМесяц,
	|	0 КАК ИзмениеЦеныГод,
	|	Реквизиты.ИспользоватьАкцизы КАК ИспользоватьАкцизы
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спецификации.НомерСпецификации КАК Номер,
	|	Спецификации.ДатаСпецификации КАК Дата,
	|	Спецификации.НомерСтроки КАК НомерСтроки,
	|	Спецификации.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаСпецификацииКонтрагента = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК П000010000101,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.НаименованиеПолное = """"
	|			ТОГДА Товары.Номенклатура.Наименование
	|		ИНАЧЕ Товары.Номенклатура.НаименованиеПолное
	|	КОНЕЦ КАК П000010000102,
	|	Товары.КодТНВЭД.Код КАК П000010000103,
	|	Товары.ЕдиницаИзмерения.Наименование КАК П000010000104,
	|	Товары.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Товары.Количество КАК П000010000105,
	|	Товары.ФактурнаяСтоимость КАК П000010000106,
	|	Товары.СерияНомерТСД КАК П000010000109,
	|	Товары.ДатаТСД КАК ДатаТСД,
	|	Товары.НомерСчетаФактуры КАК П000010000111,
	|	Товары.ДатаСчетаФактуры КАК ДатаСчетаФактуры,
	|	Товары.ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	Товары.НалоговаяБазаАкцизы КАК П000010000114,
	|	Товары.НалоговаяБазаНДС КАК П000010000115,
	|	Товары.ТвердаяСтавкаАкциза КАК П000010000116,
	|	Товары.АдвалорнаяСтавкаАкциза КАК П000010000117,
	|	Товары.СтавкаНДС КАК П000010000118,
	|	Товары.СуммаАкциза КАК П000010000119,
	|	Товары.СуммаНДС КАК П000010000120,
	|	Товары.Валюта КАК Валюта,
	|	Товары.Валюта.Код КАК П000010000107,
	|	НЕОПРЕДЕЛЕНО КАК П000010000108,
	|	НЕОПРЕДЕЛЕНО КАК П000010000125,
	|	НЕОПРЕДЕЛЕНО КАК П000010000110,
	|	НЕОПРЕДЕЛЕНО КАК П000010000112,
	|	НЕОПРЕДЕЛЕНО КАК П000010000113,
	|	Товары.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиСделки.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комитент)
	|			ТОГДА ""0""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Доверитель)
	|			ТОГДА ""1""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Принципал)
	|			ТОГДА ""2""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Продавец)
	|			ТОГДА ""6""
	|		КОГДА УчастникиСделки.РольПродавца = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК ТипПрод_Пр,
	|	УчастникиСделки.РольПродавца КАК ТипПродавца,
	|	ВЫБОР
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Комиссионер)
	|			ТОГДА ""3""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Поверенный)
	|			ТОГДА ""4""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Агент)
	|			ТОГДА ""5""
	|		КОГДА УчастникиСделки.РольПокупателя = ЗНАЧЕНИЕ(Перечисление.СубъектыГражданскоПравовыхОтношений.Покупатель)
	|			ТОГДА ""7""
	|		ИНАЧЕ ""3""
	|	КОНЕЦ КАК ТипПок_Пр,
	|	УчастникиСделки.РольПокупателя КАК ТипПокупателя,
	|	УчастникиСделки.Продавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.Код КАК КодСтраныПродавец,
	|	УчастникиСделки.Продавец.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПродавец,
	|	УчастникиСделки.Покупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.Код КАК КодСтраныПокупатель,
	|	УчастникиСделки.Покупатель.СтранаРегистрации.НаименованиеПолное КАК НаименованиеСтраныПокупатель,
	|	УчастникиСделки.НомерДоговора КАК НомерДог,
	|	УчастникиСделки.ДатаДоговора КАК ДатаДог,
	|	УчастникиСделки.НомерСпецификации,
	|	УчастникиСделки.ДатаСпецификации,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПродавецМестоНахожд,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательИНН_КПП,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательНаимОрг,
	|	НЕОПРЕДЕЛЕНО КАК ПокупательМестоНахожд,
	|	ЛОЖЬ КАК ПродавецБайконур,
	|	ЛОЖЬ КАК ПокупательБайконур,
	|	УчастникиСделки.Ссылка КАК ДокументСсылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерЗаяв,
	|	НЕОПРЕДЕЛЕНО КАК Число,
	|	НЕОПРЕДЕЛЕНО КАК Месяц,
	|	НЕОПРЕДЕЛЕНО КАК Год
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.УчастникиСделки КАК УчастникиСделки
	|ГДЕ
	|	УчастникиСделки.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТаблицаУчастникиСделки = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеОВвозеТоваров";
	
	ПервыйДокумент = Истина;
	
	// Объявление таблиц
	
	ТаблицаСпецификацииДляВыгрузки = Новый ТаблицаЗначений;
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Номер");
	ТаблицаСпецификацииДляВыгрузки.Колонки.Добавить("Дата");
	
	ТЗСпецификации07           = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТЗСпецификацииРаздел3      = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	ТаблСпецификацииПриложение = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
	
	ТТД = Новый ТаблицаЗначений;
	ТТД.Колонки.Добавить("Номер");
	ТТД.Колонки.Добавить("Дата");
	
	МассивТиповПродавцов = Новый Массив();
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Доверитель);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Комитент);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Принципал);
	МассивТиповПродавцов.Добавить(Перечисления.СубъектыГражданскоПравовыхОтношений.Продавец);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20150101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2012кв3");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.ЗаявлениеОВвозе2015кв1");
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		
		// Структуры для выгрузки
		
		РеквизитыРаздел1 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); 
		РеквизитыРаздел2 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр");
		РеквизитыРаздел3 = Новый Структура("НомерЗаяв,Число,Месяц,Год,СтрВсего,Стр,ТипПрод_3,
			|ТипПродавца,ПродавецИНН_КПП,ПродавецНаимОрг,КодСтраныПродавец,
			|ПродавецМестоНахожд,ПродавецАдрес,ПродавецБайконур,НомерДог,ДатаДог,
			|НомерСпецификации,ДатаСпецификации,ТипПок_3,ТипПокупателя,ПокупательИНН_КПП,
			|ПокупательНаимОрг,КодСтраныПокупатель,ПокупательМестоНахожд,ПокупательАдрес,
			|ПокупательБайконур,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух"); 
		РеквизитыПриложение = Новый Структура("НомерЗаяв,Число,Месяц,Год");
		
		ТаблицаСпецификацииДляВыгрузки.Очистить();
		ТЗСпецификации07.Очистить();
		ТЗСпецификацииРаздел3.Очистить();
		ТаблСпецификацииПриложение.Очистить();

		НомераСпецификаций = "";
		ДатыСпецификаций = "";
		
		ПечататьРаздел3 = Ложь;
		
		// Раздел 1
		
		Если НЕ ЗначениеЗаполнено(СтрокаШапки.Организация) 
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаШапки.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сведения о покупателе-имортере
		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ФИОРук = Руководители.РуководительПредставление;
		РеквизитыРаздел1.ФИОБух = Руководители.ГлавныйБухгалтерПредставление;
		
		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Организация, СтрокаШапки.Дата);
		
		РеквизитыРаздел1.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
			РеквизитыРаздел1.КодСтраныПокупатель,
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
		РеквизитыРаздел1.ПокупательИНН_КПП = РеквизитыРаздел1.ПокупательИНН
			+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ РеквизитыРаздел1.ПокупательКПП = "", "", "/" + РеквизитыРаздел1.ПокупательКПП);
		
		Если СведенияОПокупателе.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.ФИОФизлица;
		Иначе
			РеквизитыРаздел1.ПокупательНаимОрг = СведенияОПокупателе.НаименованиеДляПечатныхФорм;
		КонецЕсли; 
			
		РеквизитыРаздел1.НомерЗаяв = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаздел1.НомерЗаяв, Истина, Ложь);
		
		// Адрес покупателя для выгрузки
		РеквизитыРаздел1.Вставить("ПокупательАдрес", 
			ПолучитьАдресВВидеСоответствия(СтрокаШапки.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата));
			
		// Адрес продавца для выгрузки
		РеквизитыРаздел1.Вставить("ПродавецАдрес", ПустойРоссийскийАдрес());
		// Адрес комиссионера для выгрузки
		РеквизитыРаздел1.Вставить("КомиссионерАдрес", ПустойРоссийскийАдрес());
		
		// Если сделка осуществляется через третьих лиц необходимо определить
		// первоначального продавца товаров (продавца, комитента, доверителя или принципала),
		// заполнить раздел 3 либо Приложение к Заявлению.
		
		НайденныеСтрокиУчастникиСделки = ТаблицаУчастникиСделки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтрокиУчастникиСделки.Количество() > 0 Тогда
			
			СтрокаУчастникиСделки = Неопределено;
			
			Для Каждого СтрокаТаблицыУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				Если МассивТиповПродавцов.Найти(СтрокаТаблицыУчастникиСделки.ТипПродавца) <> Неопределено Тогда
					СтрокаУчастникиСделки = СтрокаТаблицыУчастникиСделки;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Если СтрокаУчастникиСделки <> Неопределено Тогда
				
				РеквизитыРаздел1.КодСтраныПродавец = СтрокаУчастникиСделки.КодСтраныПродавец;
				
				СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				
				РеквизитыРаздел1.ПродавецНаимОрг = СведенияОПродавце.НаименованиеДляПечатныхФорм;
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					РеквизитыРаздел1.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				РеквизитыРаздел1.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				РеквизитыРаздел1.НомерДог          = СтрокаУчастникиСделки.НомерДог;
				РеквизитыРаздел1.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
				РеквизитыРаздел1.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
				РеквизитыРаздел1.ДатаСпецификации  = Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДФ=dd.MM.yyyy");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации) 
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификации = ТаблицаСпецификацииДляВыгрузки.Добавить();
					СтрокаСпецификации.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификации.Дата =  Формат(СтрокаУчастникиСделки.ДатаСпецификации, "ДФ=dd.MM.yyyy");
				КонецЕсли;
				
				АдресПродавца = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
				РеквизитыРаздел1.ПродавецАдрес = АдресПродавца;
				
				Если НайденныеСтрокиУчастникиСделки.Количество() = 1 Тогда
					
					ПечататьРаздел3 = Истина;
					РеквизитыРаздел1.СтрВсего = 3; // Если строка одна
					
					// Раздел 3
					ЗаполнитьЗначенияСвойств(РеквизитыРаздел3, РеквизитыРаздел1, 
						"НомерЗаяв,Число,Месяц,Год,СтрВсего,ФИОРук,ФИОБух,ДатаПодписиРук,ДатаПодписиБух");
					
					РеквизитыРаздел3.ТипПрод_3 = СтрокаУчастникиСделки.ТипПрод_Пр;
					РеквизитыРаздел3.ТипПок_3  = СтрокаУчастникиСделки.ТипПок_Пр;
					
					РеквизитыРаздел3.ТипПродавца   = СтрокаУчастникиСделки.ТипПродавца;
					РеквизитыРаздел3.ТипПокупателя = СтрокаУчастникиСделки.ТипПокупателя;
										
					РеквизитыРаздел3.ПродавецБайконур   = СтрокаУчастникиСделки.ПродавецБайконур;
					РеквизитыРаздел3.ПокупательБайконур = СтрокаУчастникиСделки.ПокупательБайконур;
					
					Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
					Иначе
						РеквизитыРаздел3.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					РеквизитыРаздел3.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПродавец   = СтрокаУчастникиСделки.КодСтраныПродавец; 
					РеквизитыРаздел3.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
						
					СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
						СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
						
					Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
							+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
					Иначе
						РеквизитыРаздел3.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
					КонецЕсли;
					
					РеквизитыРаздел3.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
					РеквизитыРаздел3.КодСтраныПокупатель   = СтрокаУчастникиСделки.КодСтраныПокупатель;
					РеквизитыРаздел3.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
						СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
					
					РеквизитыРаздел3.НомерДог          = СтрокаУчастникиСделки.НомерДог;
					РеквизитыРаздел3.ДатаДог           = СтрокаУчастникиСделки.ДатаДог;
					РеквизитыРаздел3.НомерСпецификации = СтрокаУчастникиСделки.НомерСпецификации;
					РеквизитыРаздел3.ДатаСпецификации  = СтрокаУчастникиСделки.ДатаСпецификации;
					
					РеквизитыРаздел3.ПродавецАдрес   = АдресПродавца;
					РеквизитыРаздел3.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
						СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
					
					ТЗСпецификацииРаздел3 = ТаблицаСпецификацииДляВыгрузки;
					
				Иначе
					РеквизитыРаздел1.СтрВсего = 2;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			РеквизитыРаздел1.СтрВсего = 2;
		КонецЕсли;
		
		
		// Сведения о контрагенте
		
		СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СтрокаШапки.Контрагент, СтрокаШапки.Дата);
		МестонахождениеКонтрагента = СформироватьПредставлениеМестонахожденияКонтрагента(
			СтрокаШапки.КодСтраныПродавец, 
			ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "ЮридическийАдрес,"));
		Если СведенияОКонтрагенте.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
			ИНН_КППКонтрагента = СведенияОКонтрагенте.ИНН
				+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОКонтрагенте.КПП = "", "", "/" + СведенияОКонтрагенте.КПП);
		Иначе
			ИНН_КППКонтрагента = СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации;
		КонецЕсли;
		
		ТаблицаСпецификацииДляВыгрузкиВременная = ТаблицаСпецификацииДляВыгрузки.СкопироватьКолонки();
		
		Пока ТаблицаСпецификацииКонтрагента.НайтиСледующий(СтруктураПоиска) Цикл
			НомераСпецификаций = НомераСпецификаций + ?(НомераСпецификаций = "", "", ", ") + ТаблицаСпецификацииКонтрагента.Номер;
			ДатыСпецификаций   = ДатыСпецификаций + ?(ДатыСпецификаций = "", "", ", ") + Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций = ТаблицаСпецификацииДляВыгрузкиВременная.Добавить();
			НоваяСтрокаСпецификаций.Дата = Формат(ТаблицаСпецификацииКонтрагента.Дата, "ДФ=dd.MM.yyyy");
			НоваяСтрокаСпецификаций.Номер = ТаблицаСпецификацииКонтрагента.Номер;
		КонецЦикла;
			
		Если СтрокаУчастникиСделки <> Неопределено Тогда
			
			// Контрагент не является продавцом, сведения о нем указываем в строках 06, 07 Заявления.
			
			РеквизитыРаздел1.КодСтраныОрг1        = СтрокаШапки.КодСтраныПродавец;
			РеквизитыРаздел1.НаимОрг_1            = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.ИННОрг_1             = ИНН_КППКонтрагента;
			РеквизитыРаздел1.МестоНахождОрг_1     = МестонахождениеКонтрагента;
			РеквизитыРаздел1.НомКонтр_2           = СтрокаШапки.НомерДог;
			РеквизитыРаздел1.ДатаКонтр_2          = СтрокаШапки.ДатаДог;
			РеквизитыРаздел1.НомерСпецификации_07 = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации_07  = ДатыСпецификаций;
			
			РеквизитыРаздел1.РеквизитыПосредник = СведенияОКонтрагенте.ПолноеНаименование + ", " + МестонахождениеКонтрагента;
			РеквизитыРаздел1.КомиссионерАдрес   = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТЗСпецификации07 = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		Иначе
			
			// Контрагент является продавцом, сведения о нем указываем в строках 01, 03 Заявления.
			
			РеквизитыРаздел1.ПродавецМестоНахожд = МестонахождениеКонтрагента;
			РеквизитыРаздел1.ПродавецИНН_КПП     = ИНН_КППКонтрагента;
			РеквизитыРаздел1.ПродавецНаимОрг     = СведенияОКонтрагенте.НаименованиеДляПечатныхФорм;
			РеквизитыРаздел1.НомерСпецификации   = НомераСпецификаций;
			РеквизитыРаздел1.ДатаСпецификации    = ДатыСпецификаций;
			РеквизитыРаздел1.ПродавецАдрес       = ПолучитьАдресВВидеСоответствия(
				СтрокаШапки.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);

			ТаблицаСпецификацииДляВыгрузки = ТаблицаСпецификацииДляВыгрузкиВременная;
			
		КонецЕсли;
		
		// Вывод на печать
		
		ШапкаРаздел1 = Макет.ПолучитьОбласть("Шапка");
		ШапкаРаздел1.Параметры.Заполнить(РеквизитыРаздел1);
		ТабДокумент.Вывести(ШапкаРаздел1);
		
		// Товары
		
		ТекущийНомерСтраницы = 1;
		ЗаголовокТаблицыТоваров = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
		ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
		
		ТаблицаТоварыРаздел1 = ТаблицаТовары.СкопироватьКолонки(); // Таблица для выгрузки
		
		ТТД.Очистить();
		
		МногострочнаяЧасть = Макет.ПолучитьОбласть("ТаблицаТовары");
		ПодвалТаблицаТовары = Макет.ПолучитьОбласть("ПодвалТаблицаТовары");
		
		МассивОбластейДляПроверкиВывода = Новый Массив;
		
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			Для каждого СтрокаТоваров Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаТоваровДляВыгрузки = ТаблицаТоварыРаздел1.Добавить();
				
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТоваров.Валюта, СтрокаТоваров.ДатаПринятияНаУчет);
			
				СтрокаТоваров.П000010000108 = СтруктураКурса.Курс;
				СтрокаТоваров.П000010000125 = СтруктураКурса.Кратность;
				СтрокаТоваров.П000010000107 = РеквизитыРаздел1.ВалютаКод;
				СтрокаТоваров.П000010000110 = Формат(СтрокаТоваров.ДатаТСД, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000112 = Формат(СтрокаТоваров.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy");
				СтрокаТоваров.П000010000113 = Формат(СтрокаТоваров.ДатаПринятияНаУчет, "ДФ=dd.MM.yyyy");
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваровДляВыгрузки, СтрокаТоваров);
				
				НоваяСтрокаДокументы = ТТД.Добавить();
				НоваяСтрокаДокументы.Номер = СтрокаТоваров.П000010000109;
				НоваяСтрокаДокументы.Дата = СтрокаТоваров.П000010000110;
				
				МногострочнаяЧасть.Параметры.Заполнить(СтрокаТоваров);
				
				Если Не СтрокаШапки.ИспользоватьАкцизы Тогда
					МногострочнаяЧасть.Параметры.П000010000114 = "--";
					МногострочнаяЧасть.Параметры.П000010000116 = "--";
					МногострочнаяЧасть.Параметры.П000010000117 = "--";
					МногострочнаяЧасть.Параметры.П000010000119 = "--";
				КонецЕсли;
				
				МассивОбластейДляПроверкиВывода.Очистить();
				МассивОбластейДляПроверкиВывода.Добавить(МногострочнаяЧасть);
				МассивОбластейДляПроверкиВывода.Добавить(ПодвалТаблицаТовары);
				Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(
						ТабДокумент, МассивОбластейДляПроверкиВывода) Тогда
					
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
					ЗаголовокТаблицыТоваров.Параметры.НомерСтраницы = ТекущийНомерСтраницы;
					ТабДокумент.Вывести(ЗаголовокТаблицыТоваров);
				КонецЕсли;
				
				ТабДокумент.Вывести(МногострочнаяЧасть);
				
			КонецЦикла;
		КонецЕсли;
		
		РеквизитыРаздел1.Вставить("П000010000114", ТаблицаТоварыРаздел1.Итог("П000010000114"));
		РеквизитыРаздел1.Вставить("П000010000115", ТаблицаТоварыРаздел1.Итог("П000010000115"));
		
		// Итоговые суммы налогов подлежат округлению до целых рублей
		РеквизитыРаздел1.Вставить("П000010000119", Окр(ТаблицаТоварыРаздел1.Итог("П000010000119")));
		РеквизитыРаздел1.Вставить("П000010000120", Окр(ТаблицаТоварыРаздел1.Итог("П000010000120")));
		
		ПодвалТаблицаТовары.Параметры.П000010000114 = РеквизитыРаздел1.П000010000114;
		ПодвалТаблицаТовары.Параметры.П000010000115 = РеквизитыРаздел1.П000010000115;
		ПодвалТаблицаТовары.Параметры.П000010000119 = РеквизитыРаздел1.П000010000119;
		ПодвалТаблицаТовары.Параметры.П000010000120 = РеквизитыРаздел1.П000010000120;
		
		ТабДокумент.Вывести(ПодвалТаблицаТовары);
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(РеквизитыРаздел1);
		МассивОбластейДляПроверкиВывода.Очистить();
		МассивОбластейДляПроверкиВывода.Добавить(Подвал);
		Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент,
			МассивОбластейДляПроверкиВывода) Тогда
			
			ТабДокумент.ВывестиВертикальныйРазделительСтраниц();
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		КонецЕсли;

		ТабДокумент.Вывести(Подвал);
		
		// Раздел 2
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ЗаполнитьЗначенияСвойств(РеквизитыРаздел2, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год,СтрВсего");
		
		ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
		РеквизитыРаздел2.Стр = ТекущийНомерСтраницы;
			
		ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел2");
		ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел2);
		ТабДокумент.Вывести(ОсновнаяЧасть);
		
		// Раздел 3
		
		Если ПечататьРаздел3 Тогда
		
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
			РеквизитыРаздел3.Стр = ТекущийНомерСтраницы;
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Раздел3");
			ОсновнаяЧасть.Параметры.Заполнить(РеквизитыРаздел3);
			ТабДокумент.Вывести(ОсновнаяЧасть);
		
		КонецЕсли; 
		
		// Приложение
		
		ТаблицаДляВыгрузкиПриложение = ТаблицаУчастникиСделки.СкопироватьКолонки(); // Таблица для выгрузки
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПродавецАдрес");
		ТаблицаДляВыгрузкиПриложение.Колонки.Добавить("ПокупательАдрес");
		
		Если НайденныеСтрокиУчастникиСделки.Количество() > 1 Тогда
			
			ОсновнаяЧасть = Макет.ПолучитьОбласть("Приложение");
			
			Для каждого СтрокаУчастникиСделки Из НайденныеСтрокиУчастникиСделки Цикл
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СведенияОПродавце   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Продавец, РеквизитыРаздел1.Дата);
				СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					СтрокаУчастникиСделки.Покупатель, РеквизитыРаздел1.Дата);
				
				Если СведенияОПродавце.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПродавце.КПП = "", "", "/" + СведенияОПродавце.КПП);
				Иначе
					СтрокаУчастникиСделки.ПродавецИНН_КПП = СведенияОПродавце.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				СтрокаУчастникиСделки.ПродавецНаимОрг     = СведенияОПродавце.ПолноеНаименование;
				СтрокаУчастникиСделки.ПродавецМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПродавец, СведенияОПродавце.ЮридическийАдрес);
				
				Если СведенияОПокупателе.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.ИНН 
						+ ?(СтрокаШапки.Дата >= '20150101' ИЛИ СведенияОПокупателе.КПП = "", "", "/" + СведенияОПокупателе.КПП);
				Иначе
					СтрокаУчастникиСделки.ПокупательИНН_КПП = СведенияОПокупателе.НалоговыйНомерВСтранеРегистрации;
				КонецЕсли;
				
				СтрокаУчастникиСделки.ПокупательНаимОрг     = СведенияОПокупателе.ПолноеНаименование;
				СтрокаУчастникиСделки.ПокупательМестоНахожд = СформироватьПредставлениеМестонахожденияКонтрагента(
					СтрокаУчастникиСделки.КодСтраныПокупатель, СведенияОПокупателе.ЮридическийАдрес);
				
				ЗаполнитьЗначенияСвойств(СтрокаУчастникиСделки, РеквизитыРаздел1, "НомерЗаяв,Число,Месяц,Год");
				
				Если ЗначениеЗаполнено(СтрокаУчастникиСделки.НомерСпецификации)
					И ЗначениеЗаполнено(СтрокаУчастникиСделки.ДатаСпецификации) Тогда
					СтрокаСпецификацииПриложение = ТаблСпецификацииПриложение.Добавить();
					СтрокаСпецификацииПриложение.Номер = СтрокаУчастникиСделки.НомерСпецификации;
					СтрокаСпецификацииПриложение.Дата  =  СтрокаУчастникиСделки.ДатаСпецификации;
	 			КонецЕсли;
				
				СтрокаВыгрузки = ТаблицаДляВыгрузкиПриложение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаВыгрузки, СтрокаУчастникиСделки);
				
				// Адрес продавца в Приложении для выгрузки
				СтрокаВыгрузки.ПродавецАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Продавец, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				// Адрес покупателя в Приложении для выгрузки
				СтрокаВыгрузки.ПокупательАдрес = ПолучитьАдресВВидеСоответствия(
					СтрокаУчастникиСделки.Покупатель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
				
				ОсновнаяЧасть.Параметры.Заполнить(СтрокаВыгрузки);
				ТабДокумент.Вывести(ОсновнаяЧасть);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаВыпискиБанка = Новый ТаблицаЗначений;
	ТаблицаСведенияОЗачете = Новый ТаблицаЗначений;
	
	Если ТаблицаТоварыРаздел1 <> Неопределено Тогда
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыРаздел1.Колонки.Удалить("ДатаПринятияНаУчет");
		
		ТаблицаТоварыРаздел1.Колонки.Удалить("П000010000104");
		ТаблицаТоварыРаздел1.Колонки.ЕдиницаИзмеренияКод.Имя = "П000010000104";
	КонецЕсли;
	
	Если ТаблицаДляВыгрузкиПриложение <> Неопределено Тогда
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ДокументСсылка");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Покупатель");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("Продавец");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПродавца");
		ТаблицаДляВыгрузкиПриложение.Колонки.Удалить("ТипПокупателя");
	КонецЕсли;
	
	КоличествоСтраниц = ТабДокумент.КоличествоСтраниц();
	ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего");
	Пока ОбластьКоличествоСтраниц <> Неопределено Цикл
		ОбластьКоличествоСтраниц.Текст = КоличествоСтраниц;
		ОбластьКоличествоСтраниц = ТабДокумент.НайтиТекст("СтрВсего", ОбластьКоличествоСтраниц)
	КонецЦикла;
	
	Возврат Новый Структура(
		"РеквизитыРаздел1,ТаблицаРаздел1,РеквизитыРаздел2,РеквизитыРаздел3,ТаблицаПриложение,
		|ТЗСпецификации,ТЗСпецификации07,ТЗСпецификацииРаздел3,ТаблСпецПрил3,
		|ТТД,ТаблицаВыпискиБанка,ТаблицаСведенияОЗачете,ТабДокумент",
		РеквизитыРаздел1, ТаблицаТоварыРаздел1, РеквизитыРаздел2, РеквизитыРаздел3, ТаблицаДляВыгрузкиПриложение, 
		ТаблицаСпецификацииДляВыгрузки, ТЗСпецификации07, ТЗСпецификацииРаздел3, ТаблСпецификацииПриложение, 
		ТТД, ТаблицаВыпискиБанка, ТаблицаСведенияОЗачете, ТабДокумент);
		
КонецФункции

Функция ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивДокументов)

	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК ДокументСсылка,
	|	ЗаявлениеОВвозеТоваров.Номер КАК СистемныйНомер,
	|	ЗаявлениеОВвозеТоваров.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияД2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияМ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ1,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ2,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ3,
	|	НЕОПРЕДЕЛЕНО КАК ДатаЗаполненияГ4,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцМ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ1,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ2,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ3,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетныйМесяцГ4,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ИНН КАК ОтправительКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОтправительНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент,
	|	ЗаявлениеОВвозеТоваров.НомерДоговора КАК НомерДоговора,
	|	ЗаявлениеОВвозеТоваров.ДатаДоговора КАК ДатаДоговора,
	|	ЗаявлениеОВвозеТоваров.Организация.ИНН КАК ПокупательИНН,
	|	ЗаявлениеОВвозеТоваров.Организация.КПП КАК ПокупательКПП,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательКоды,
	|	НЕОПРЕДЕЛЕНО КАК ПолучательРеквизиты,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдрес,
	|	НЕОПРЕДЕЛЕНО КАК ОргТелефонИсп,
	|	ЗаявлениеОВвозеТоваров.Валюта КАК ВалютаДокумента,
	|	ЗаявлениеОВвозеТоваров.Валюта.Код КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваров.Организация,
	|	ЗаявлениеОВвозеТоваров.Организация.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаявлениеОВвозеТоваров.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	НЕОПРЕДЕЛЕНО КАК ОргИсполнитель,
	|	НЕОПРЕДЕЛЕНО КАК ОргДолжностьИсп,
	|	НЕОПРЕДЕЛЕНО КАК ОргАдресЭлПочты,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК ТоргующаяСтранаКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК ТоргующаяСтранаНаименование,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 КАК СтранаОтправленияКод,
	|	ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.Наименование КАК СтранаОтправленияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаКод,
	|	НЕОПРЕДЕЛЕНО КАК ВидТранспортаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрКоды,
	|	НЕОПРЕДЕЛЕНО КАК ОтвЛицоФинУрРеквизиты,
	|	""ИМ"" КАК НаправлениеПеремещения,
	|	""ИМ"" КАК НапрПеремещения,
	|	""РОССИЯ"" КАК СтранаНазначенияНаименование,
	|	""RU"" КАК СтранаНазначенияКод,
	|	НЕОПРЕДЕЛЕНО КАК ОргПочтовыйАдресСоответствие,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Валюта= &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваров.Валюта.Наименование
	|	КОНЕЦ КАК КодВалютыЦеныТовара,
	|	"""" КАК ИмяКлючевогоУзлаСодержательнойЧасти,
	|	"""" КАК ИмяФайла,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KZ""
	|			ТОГДА ""РК""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""BY""
	|			ТОГДА ""РБ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""AM""
	|			ТОГДА ""АМ""
	|		КОГДА ЗаявлениеОВвозеТоваров.Контрагент.СтранаРегистрации.КодАльфа2 = ""KG""
	|			ТОГДА ""КГ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтранаОтправления,
	|	""РФ"" КАК СтранаНазначения,
	|	ЗаявлениеОВвозеТоваров.Контрагент.ЮридическоеФизическоеЛицо КАК ОтправительЮридическоеФизическоеЛицо,
	|	ЗаявлениеОВвозеТоваров.Организация.ИндивидуальныйПредприниматель КАК ИндивидуальныйПредприниматель,
	|	ЗаявлениеОВвозеТоваров.Организация.ОГРН КАК ОГРН,
	|	"""" КАК Отправитель_ФормаСобственности,
	|	ЗаявлениеОВвозеТоваров.Организация.НаименованиеОКОПФ КАК Получатель_ФормаСобственности
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ЗаявлениеОВвозеТоваров
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка В(&МассивДокументов)";
	
	Шапка = Запрос.Выполнить().Выгрузить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИспользоватьНоменклатуруПоставщиков.Значение = ИСТИНА И
	|				ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка) ТОГДА
	|			ЗаявлениеОВвозеТоваровТовары.НоменклатураПоставщика.Наименование
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное = """"
	|					ТОГДА ЗаявлениеОВвозеТоваровТовары.Номенклатура.Наименование
	|				ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Номенклатура.НаименованиеПолное
	|			КОНЕЦ 
	|	КОНЕЦ КАК НаименованиеТовара,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.Номенклатура.КодТНВЭД.Код, """") КАК КодТовара,
	|	ЗаявлениеОВвозеТоваровТовары.ФактурнаяСтоимость КАК ЦенаТовараВыбВал,
	|	ПриобретениеТоваровУслуг.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	ПриобретениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаТСД,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Номер,СчетФактураПолученныйНА.Ссылка.Номер) КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураПолученный.Ссылка.Дата,СчетФактураПолученныйНА.Ссылка.Дата) КАК ДатаСчетаФактуры,
	|	ЗаявлениеОВвозеТоваровТовары.НалоговаяБазаНДС КАК ЦенаТовараВалРубль,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.Валюта = &ВалютаРеглУчета
	|			ТОГДА ""RUB""
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.Валюта.Наименование
	|	КОНЕЦ КАК ВалютаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.СтатСтоимостьДолларыСША КАК ЦенаТовараВалДоллар,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.Наименование,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.Наименование) КАК СтранаТовараНаименование,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.НомерГТД.СтранаПроисхождения.КодАльфа2,
	|			ПриобретениеТоваровУслуг.Контрагент.СтранаРегистрации.КодАльфа2) КАК СтранаТовараКод,
	|	ЗаявлениеОВвозеТоваровТовары.ВесНеттоКг КАК ВесТовара,
	|	ЗаявлениеОВвозеТоваровТовары.КодВидаТранспорта КАК КодВидаТранспорта,
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.ДокументПоступления.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА 0
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД
	|	КОНЕЦ КАК ЕдИзмТовараКво,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдИзмТовараКратко,
	|	ВЫБОР
	|		КОГДА ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код = ""166""
	|			ТОГДА """"
	|		ИНАЧЕ ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдИзмТовараКод,
	|	ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.НомерТД.Код, """") КАК НомерТаможеннойДекларации
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|			ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученный.ДокументОснование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйНА
	|			ПО ПриобретениеТоваровУслуг.Ссылка = СчетФактураПолученныйНА.ДокументОснование
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ЗаявлениеОВвозеТоваровТовары.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ЗаявлениеОВвозеТоваровТовары.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ЗаявлениеОВвозеТоваровТовары.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ЗаявлениеОВвозеТоваровТовары.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ЗаявлениеОВвозеТоваровТовары.Склад = ПриобретениеТоваровУслугТовары.Склад,
	|		Константа.ИспользоватьНоменклатуруПоставщиков КАК ИспользоватьНоменклатуруПоставщиков	
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ПолеСверху	= 10;
	ТабДокумент.ПолеСнизу	= 10;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	СисИнфо = Новый СистемнаяИнформация;
	Если ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра) Тогда 
		ТабДокумент.ПолеСлева  = 0;
		ТабДокумент.ПолеСправа = 0;
	Иначе
		ТабДокумент.ПолеСлева  = 10;
		ТабДокумент.ПолеСправа = 10;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СтатистическаяФормаУчетаПеремещенияТоваров";
	
	ПервыйДокумент = Истина;
	
	СписокВидовТранспорта = Новый СписокЗначений;
	ЗаполнитьСписокВыбораВидовТранспорта(СписокВидовТранспорта);
	
	Для каждого СтрокаШапки Из Шапка Цикл
		
		Если СтрокаШапки.Дата < '20160101' Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2011Кв1");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявлениеОВвозеТоваров.СтатФормаУчетаПеремещенияТоваров2016Кв1");
		КонецЕсли;
		
		ОсновнаяЧасть1      = Макет.ПолучитьОбласть("ОсновнаяЧасть1");
		МногострочнаяЧасть1 = Макет.ПолучитьОбласть("МногострочнаяЧасть1");
		МногострочнаяЧасть2 = Макет.ПолучитьОбласть("МногострочнаяЧасть2");
		ОсновнаяЧасть2      = Макет.ПолучитьОбласть("ОсновнаяЧасть2");
		ОсновнаяЧасть3      = Макет.ПолучитьОбласть("ОсновнаяЧасть3");
		
		РеквизитыШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаШапки); // Структура для выгрузки
		РеквизитыШапка.СистемныйНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыШапка.СистемныйНомер, Истина, Ложь);
		
		Если ЗначениеЗаполнено(РеквизитыШапка.Организация) И ЗначениеЗаполнено(РеквизитыШапка.Контрагент) Тогда
			
			СведенияОПродавце = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Контрагент, РеквизитыШапка.Дата);
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(РеквизитыШапка.Организация, РеквизитыШапка.Дата);
			
			РеквизитыШапка.ПолучательРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ПолучательКоды = РеквизитыШапка.ПокупательИНН + ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП);
			
			РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
			РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
			
			РеквизитыШапка.ОргПочтовыйАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргТелефонИсп = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, СтрокаШапки.Дата);
			РеквизитыШапка.ОргАдресЭлПочты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации, СтрокаШапки.Дата);
			
			// Отправитель
			
			РеквизитыШапка.ОтправительРеквизиты = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,ЮридическийАдрес,");
			РеквизитыШапка.ОтправительНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПродавце, "ПолноеНаименование,");
		
			РеквизитыШапка.Вставить("ОтправительРБ_УНП", "");
			РеквизитыШапка.Вставить("ОтправительРК_БИН", "");
			РеквизитыШапка.Вставить("ОтправительРК_ИИН", "");
			РеквизитыШапка.Вставить("ОтправительРА_УНН", "");
			РеквизитыШапка.Вставить("ОтправительРА_Соц", "");
			РеквизитыШапка.Вставить("ОтправительКодКГ", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", "");
		
			Если РеквизитыШапка.СтранаОтправления = "РБ" Тогда
				РеквизитыШапка.Вставить("ОтправительРБ_УНП", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "РК" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительРК_БИН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительРК_ИИН", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "АМ" Тогда
				РеквизитыШапка.Вставить("ОтправительРА_УНН", РеквизитыШапка.ОтправительКоды);
			ИначеЕсли РеквизитыШапка.СтранаОтправления = "КГ" Тогда
				Если РеквизитыШапка.ОтправительЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
					РеквизитыШапка.Вставить("ОтправительКГ_ИНН", РеквизитыШапка.ОтправительКоды);
				Иначе
					РеквизитыШапка.Вставить("ОтправительКГ_ОКПО", РеквизитыШапка.ОтправительКоды);
				КонецЕсли;
			КонецЕсли;
			
			ОтправительАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Контрагент, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтправительСтранаКод", РеквизитыШапка.ТоргующаяСтранаКод);
			РеквизитыШапка.Вставить("ОтправительСтранаНаименование", РеквизитыШапка.ТоргующаяСтранаНаименование);
			РеквизитыШапка.Вставить("ОтправительИндекс", ОтправительАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтправительНаселенныйПункт", ОтправительАдрес.Получить("НаселенныйПункт"));
			Если ПустаяСтрока(РеквизитыШапка.ОтправительНаселенныйПункт) Тогда
				РеквизитыШапка.ОтправительНаселенныйПункт = ОтправительАдрес.Получить("Город");
			КонецЕсли;
			
			// Дата выдачи документа, удостоверяющего личность отправителя
			РеквизитыШапка.Вставить("Отправитель_ДатаДокСтр", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокКод", "");
			РеквизитыШапка.Вставить("Отправитель_ВидДокНаим", "");
			РеквизитыШапка.Вставить("Отправитель_СерДок", "");
			РеквизитыШапка.Вставить("Отправитель_НомДок", "");
			РеквизитыШапка.Вставить("Отправитель_ДатаДок", "");
			РеквизитыШапка.Вставить("Отправитель_ОргДок", "");
			
			РеквизитыШапка.Вставить("Отправитель_Тел", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Факс", СведенияОПродавце.Телефоны);
			РеквизитыШапка.Вставить("Отправитель_Телекс", "");
			
			// В документе "Заявление о ввозе товаров" получателем всегда является РФ, а отправителем иностранное государство,
			// поэтому данные реквизиты передаются пустыми
			
			РеквизитыШапка.Вставить("ПолучательРА_УНН", "");
			РеквизитыШапка.Вставить("ПолучательРА_Соц", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ИНН", "");
			РеквизитыШапка.Вставить("ПолучательКГ_ОКПО", "");
			РеквизитыШапка.Вставить("ПолучательКодКГ", ""); 
			РеквизитыШапка.Вставить("ОтправительРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтправительРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтправительРФ_ОГРН", "");
			
			РеквизитыШапка.Вставить("ОтправительОбласть", ОтправительАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтправительУлицаНомерДома", 
				"" + ОтправительАдрес.Получить("Улица") + ", " + ОтправительАдрес.Получить("Дом") + ", " 
				+ ОтправительАдрес.Получить("Корпус") + ", " + ОтправительАдрес.Получить("Квартира"));
				
			// Получатель
			
			ПолучательНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			ПолучательАдрес = ПолучитьАдресВВидеСоответствия(РеквизитыШапка.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, СтрокаШапки.Дата);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаименование", ПолучательНаименование);
			
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасВидДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасДатаДокумента", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасНомерДок", "");
			// Серия документа,удостоверяющего личность физ лица - составителя статистики
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасСерДок", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПасОрг", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУр", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрКоды", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрРеквизиты", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодИндекс", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодОбласть", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
			РеквизитыШапка.Вставить("ОтвЛицоФинУрИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ОтвЛицоФинУрОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОтвЛицоФинУрУлицаНомерДома", ПолучательАдрес.Получить("Улица") 
				+ ", " 
				+ ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
				
			Если РеквизитыШапка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				
				// Получатель физ лицо
				
				Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				
					ДанныеДокумента = ПолучитьДокФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель, РеквизитыШапка.Дата);
					
					Если ЗначениеЗаполнено(ДанныеДокумента) Тогда
						
						РеквизитыШапка.ОтвЛицоФинУрПасВидДок 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ВидДокумента, "КодМВД");
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДок 		= ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента = ДанныеДокумента.ДатаВыдачи;
						РеквизитыШапка.ОтвЛицоФинУрПасНаименование 	= ДанныеДокумента.Представление;
						РеквизитыШапка.ОтвЛицоФинУрПасНомерДок 		= ДанныеДокумента.Номер;
						РеквизитыШапка.ОтвЛицоФинУрПасСерДок        = ДанныеДокумента.Серия;
						РеквизитыШапка.ОтвЛицоФинУрПасОрг           = ДанныеДокумента.КемВыдан;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				
			ИначеЕсли РеквизитыШапка.ОбособленноеПодразделение Тогда
				
				// Получатель обособленное подразделение
				
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрПодРФ_ОГРН = РеквизитыШапка.ОГРН;
				
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаКод = РеквизитыШапка.СтранаНазначенияКод;
				РеквизитыШапка.ОтвЛицоФинУрПодСтранаНаименование = РеквизитыШапка.СтранаНазначенияНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодНаименование = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрПодИндекс = ПолучательАдрес.Получить("Индекс");
				РеквизитыШапка.ОтвЛицоФинУрПодОбласть = ПолучательАдрес.Получить("Регион");
				РеквизитыШапка.ОтвЛицоФинУрПодУлицаНомерДома = 
					ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
					+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира");
				
			Иначе	
				
				// Получатель юридическое лицо
				
				РеквизитыШапка.ОтвЛицоФинУр = ПолучательНаименование;
				РеквизитыШапка.ОтвЛицоФинУрКоды = РеквизитыШапка.ПолучательКоды;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ИНН = РеквизитыШапка.ПокупательИНН;
				РеквизитыШапка.ОтвЛицоФинУрРФ_КПП = РеквизитыШапка.ПокупательКПП;
				РеквизитыШапка.ОтвЛицоФинУрРФ_ОГРН = РеквизитыШапка.ОГРН;
				РеквизитыШапка.ОтвЛицоФинУрРеквизиты = РеквизитыШапка.ПолучательРеквизиты;
				
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ПолучательИндекс", ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ПолучательКоды", РеквизитыШапка.ПолучательКоды);
			РеквизитыШапка.Вставить("ПолучательНаименование", ПолучательНаименование);
			РеквизитыШапка.Вставить("ПолучательНаселенныйПункт", ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ПолучательОбласть", ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ПолучательРБ_УНП", "");
			РеквизитыШапка.Вставить("ПолучательРК_БИН", "");
			РеквизитыШапка.Вставить("ПолучательРК_ИИН", "");
			РеквизитыШапка.Вставить("ПолучательРФ_ИНН", РеквизитыШапка.ПокупательИНН);
			РеквизитыШапка.Вставить("ПолучательРФ_КПП", РеквизитыШапка.ПокупательКПП);
			РеквизитыШапка.Вставить("ПолучательРФ_ОГРН", РеквизитыШапка.ОГРН);
			РеквизитыШапка.Вставить("ПолучательРеквизиты", РеквизитыШапка.ПолучательРеквизиты);
			РеквизитыШапка.Вставить("ПолучательСтранаКод", РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ПолучательСтранаНаименование", РеквизитыШапка.СтранаНазначенияНаименование);
			РеквизитыШапка.Вставить("ПолучательУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			ПочтовыйАдресОрганизации = "643, " + РеквизитыШапка.ОргПочтовыйАдрес;
			
			Если ЗначениеЗаполнено(РеквизитыШапка.ИндивидуальныйПредприниматель) Тогда
				РеквизитыШапка.ОргИсполнитель = РеквизитыШапка.ИндивидуальныйПредприниматель;
				РеквизитыШапка.ОргДолжностьИсп = НСтр("ru='Индивидуальный предприниматель'"); 
				ФИО = ПолучитьФИОФизЛица(РеквизитыШапка.ИндивидуальныйПредприниматель);
			Иначе
				Руководители                   = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаШапки.Организация, СтрокаШапки.Дата);
				РеквизитыШапка.ОргИсполнитель  = Руководители.РуководительПредставление;
				РеквизитыШапка.ОргДолжностьИсп = Руководители.РуководительДолжностьПредставление;
				ФИО = Руководители.РуководительФИО;
			КонецЕсли;
			
			РеквизитыШапка.Вставить("ОргИмяИсп",      ФИО.Имя);
			РеквизитыШапка.Вставить("ОргФамилияИсп",  ФИО.Фамилия);
			РеквизитыШапка.Вставить("ОргОтчествоИсп", ФИО.Отчество);
			
			РеквизитыШапка.Вставить("ОргТелефонИсп",  РеквизитыШапка.ОргТелефонИсп);
			
			РеквизитыШапка.Вставить("ОргИндекс", 			ПолучательАдрес.Получить("Индекс"));
			РеквизитыШапка.Вставить("ОргНаселенныйПункт", 	ПолучательАдрес.Получить("НаселенныйПункт"));
			РеквизитыШапка.Вставить("ОргОбласть", 			ПолучательАдрес.Получить("Регион"));
			РеквизитыШапка.Вставить("ОргУлицаНомерДома", 
				ПолучательАдрес.Получить("Улица") + ", " + ПолучательАдрес.Получить("Дом") + ", " 
				+ ПолучательАдрес.Получить("Корпус") + ", " + ПолучательАдрес.Получить("Квартира"));
			
			РеквизитыШапка.Вставить("ОргАдресЭлПочты", 			РеквизитыШапка.ОргАдресЭлПочты);
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 		ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("ОргСтранаКод", 			РеквизитыШапка.СтранаНазначенияКод);
			РеквизитыШапка.Вставить("ОргСтранаНаименование", 	РеквизитыШапка.СтранаНазначенияНаименование);
			
			РеквизитыШапка.Вставить("ОргПочтовыйАдрес", 			ПочтовыйАдресОрганизации);
			РеквизитыШапка.Вставить("мАдресвФорматеДляВыгрузки", 	ПочтовыйАдресОрганизации);
			
			РеквизитыШапка.Вставить("Получатель_ДатаДокСтр", РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ВидДокКод",  РеквизитыШапка.ОтвЛицоФинУрПасВидДок);
			РеквизитыШапка.Вставить("Получатель_ВидДокНаим", РеквизитыШапка.ОтвЛицоФинУрПасНаименование);
			РеквизитыШапка.Вставить("Получатель_СерДок",     РеквизитыШапка.ОтвЛицоФинУрПасСерДок);
			РеквизитыШапка.Вставить("Получатель_НомДок",     РеквизитыШапка.ОтвЛицоФинУрПасНомерДок);
			РеквизитыШапка.Вставить("Получатель_ДатаДок",    РеквизитыШапка.ОтвЛицоФинУрПасДатаДокумента);
			РеквизитыШапка.Вставить("Получатель_ОргДок",     РеквизитыШапка.ПолучательНаименование);
			
			РеквизитыШапка.Вставить("Получатель_Тел",    РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Факс",   РеквизитыШапка.ОргТелефонИсп);
			РеквизитыШапка.Вставить("Получатель_Телекс", "");
			РеквизитыШапка.Вставить("Получатель_Почта",  РеквизитыШапка.ОргАдресЭлПочты);
			
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ПервыйДокумент = Ложь;
		
		СтруктураПоиска = Новый Структура("ДокументСсылка", СтрокаШапки.ДокументСсылка);
		НайденныеСтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		ОбщаяЦенаТоваров = 0;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			
				Если ЗначениеЗаполнено(СтрокаТовары.КодВидаТранспорта) Тогда
					
					РеквизитыШапка.ВидТранспортаКод = СтрокаТовары.КодВидаТранспорта;
					ВидТранспорта = СписокВидовТранспорта.НайтиПоЗначению(СтрокаТовары.КодВидаТранспорта);
					
					Если ВидТранспорта <> Неопределено Тогда
						РеквизитыШапка.ВидТранспортаНаименование = Сред(ВидТранспорта, 6);
					КонецЕсли;
					
				КонецЕсли;
				
				ОтчетныйПериод = СтрокаТовары.ОтчетныйПериод;
				
				ОбщаяЦенаТоваров = ОбщаяЦенаТоваров + СтрокаТовары.ЦенаТовараВыбВал;
				
			КонецЦикла;
			
		КонецЕсли;

		// Графа 7 - общая стоимость
		РеквизитыШапка.Вставить("ОбщаяЦенаТоваров", ОбщаяЦенаТоваров);
		
		// Реквизиты подписи - сокращенное наименование организации-покупателя.
		РеквизитыШапка.Вставить("ПолнСокрНаим", СведенияОПокупателе.СокращенноеНаименование);
		
		// Реквизиты подписи - ИНН/КПП/ОГРН организации-покупателя.
		ИННКППОГРН = РеквизитыШапка.ПокупательИНН 
			+ ?(РеквизитыШапка.ПокупательКПП = "", "", "/" + РеквизитыШапка.ПокупательКПП)
			+ "/" + РеквизитыШапка.ОГРН;
		
		РеквизитыШапка.Вставить("ИннКппОгрн", ИННКППОГРН);
		
		ОсновнаяЧасть1.Параметры.Заполнить(РеквизитыШапка);
		ТабДокумент.Вывести(ОсновнаяЧасть1);
		
		ТаблицаДокументы = Новый ТаблицаЗначений; // Таблица для выгрузки
		ТаблицаДокументы.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("НомерДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		ТаблицаДокументы.Колонки.Добавить("ДатаДокумента", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
		НоваяСтрокаВыгрузки.НаименованиеДокумента = "Договор";
		НоваяСтрокаВыгрузки.НомерДокумента = РеквизитыШапка.НомерДоговора;
		НоваяСтрокаВыгрузки.ДатаДокумента = РеквизитыШапка.ДатаДоговора;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			// Реквизиты сопроводительных документов и счетов-фактур
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТовары.СерияНомерТСД) Тогда
					
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-проформа (проформа-инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.СерияНомерТСД;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаТСД;
							
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовары.НомерСчетаФактуры) Тогда
						
					НоваяСтрокаВыгрузки = ТаблицаДокументы.Добавить();
					
					НоваяСтрокаВыгрузки.НаименованиеДокумента = НСтр("ru = 'Счет-фактура (инвойс)'");
					НоваяСтрокаВыгрузки.НомерДокумента = СтрокаТовары.НомерСчетаФактуры;
					НоваяСтрокаВыгрузки.ДатаДокумента = СтрокаТовары.ДатаСчетаФактуры;
				
				КонецЕсли; 
					
			КонецЦикла;
			
			ТаблицаДокументы.Свернуть("НаименованиеДокумента,НомерДокумента,ДатаДокумента");
			
			Для каждого СтрокаДокумента Из ТаблицаДокументы Цикл
			
				МногострочнаяЧасть1.Параметры.Документы = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 № %2 от %3 г.'"),
						СтрокаДокумента.НаименованиеДокумента,
						СтрокаДокумента.НомерДокумента, 
						Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy"));
						
				ТабДокумент.Вывести(МногострочнаяЧасть1);
			
			КонецЦикла; 
			
			ТабДокумент.Вывести(ОсновнаяЧасть2);
			
			ТаблицаТоварыДляВыгрузки = ТаблицаТовары.СкопироватьКолонки();   // Таблица для выгрузки
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("КодТО");              // Код таможенного органа
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДатаРегистрацииСтр"); // Дата таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("НомерДок");           // Номер таможенной декларации
			ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ДекларацияНом");      // Порядковый номер строки в декларации
			
			
			ОбщаяЦенаТоваров = 0;
			
			Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
				
				НоваяСтрокаВыгрузки = ТаблицаТоварыДляВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыгрузки, СтрокаТовары);
				ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаТовары, НоваяСтрокаВыгрузки);
				
				МногострочнаяЧасть2.Параметры.Заполнить(НоваяСтрокаВыгрузки);
				ТабДокумент.Вывести(МногострочнаяЧасть2);
				
				НоваяСтрокаВыгрузки.ЕдИзмТовараКратко = ВРег(СтрокаТовары.ЕдИзмТовараКратко);
				
			КонецЦикла;
			
		Иначе
			ТабДокумент.Вывести(МногострочнаяЧасть2);
		КонецЕсли; 
		
		// Подвал
	
		РеквизитыШапка.Вставить("ДатаЗаполнения", Формат(РеквизитыШапка.Дата, "ДФ=yyyy-MM-dd"));
		
		РеквизитыШапка.ДатаЗаполненияД1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		РеквизитыШапка.ДатаЗаполненияД2 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияД", Лев(Формат(РеквизитыШапка.Дата, "ДФ=""дд"""), 2));
		
		РеквизитыШапка.ДатаЗаполненияМ1 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ДатаЗаполненияМ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияМ", Сред(Формат(РеквизитыШапка.Дата, "ДФ=dd.MM.yyyy"), 4, 2));

		РеквизитыШапка.ДатаЗаполненияГ1 = Лев(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ДатаЗаполненияГ2 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ДатаЗаполненияГ3 = Сред(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ДатаЗаполненияГ4 = Прав(Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ДатаЗаполненияГ", Формат(РеквизитыШапка.Дата, "ДФ=""гггг"""));
		
		РеквизитыШапка.ОтчетныйМесяцМ1 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 1);
		РеквизитыШапка.ОтчетныйМесяцМ2 = Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 5, 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцМ", Сред(Формат(ОтчетныйПериод, "ДФ=dd.MM.yyyy"), 4, 2));
		
		РеквизитыШапка.ОтчетныйМесяцГ1 = Лев(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		РеквизитыШапка.ОтчетныйМесяцГ2 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 2, 1);
		РеквизитыШапка.ОтчетныйМесяцГ3 = Сред(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 3, 1);
		РеквизитыШапка.ОтчетныйМесяцГ4 = Прав(Формат(ОтчетныйПериод, "ДФ=""гггг"""), 1);
		
		РеквизитыШапка.Вставить("ОтчетныйМесяцГ", Формат(ОтчетныйПериод, "ДФ=""гггг"""));
		РеквизитыШапка.Вставить("ОтчетныйМесяц",  Формат(ОтчетныйПериод, "ДФ=yyyy-MM")); 
		РеквизитыШапка.Вставить("УникальныйИД",   РеквизитыШапка.ДокументСсылка.УникальныйИдентификатор());
		
		ОсновнаяЧасть3.Параметры.Заполнить(РеквизитыШапка);
		
		ТабДокумент.Вывести(ОсновнаяЧасть3);
		
	КонецЦикла;
	
	Если ТаблицаТоварыДляВыгрузки <> Неопределено Тогда
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДатаТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ДокументСсылка");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСчетаФактуры");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("ОтчетныйПериод");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("СерияНомерТСД");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("НомерСтроки");
		ТаблицаТоварыДляВыгрузки.Колонки.Удалить("КодВидаТранспорта");
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("РеквизитыШапка",           РеквизитыШапка);
	Структура.Вставить("ТаблицаДокументы",         ТаблицаДокументы);
	Структура.Вставить("ТаблицаТоварыДляВыгрузки", ТаблицаТоварыДляВыгрузки);
	Структура.Вставить("ТабДокумент",              ТабДокумент);
	
	Возврат Структура;
	
КонецФункции

Функция ПечатьЗаявленияОВвозеТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыЗаявленияОВвозеТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПечатьСтатистическойФормыУчетаПеремещенияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = ПодготовитьТаблицыСтатистическойФормыУчетаПеремещенияТоваровДляВыгрузкиПечати(МассивОбъектов);
	
	Возврат Результаты.ТабДокумент;

КонецФункции

Функция ПолучитьАдресВВидеСоответствия(СсылкаНаОбъект, ВидКонтактнойИнформации, Дата = '00010101')
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		,
		ВидКонтактнойИнформации,
		Дата);
	
	ЗначениеКонтактнойИнформации = "";
	ПредставлениеКонтактнойИнформации = "";
	
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		ЗначениеКонтактнойИнформации = КонтактнаяИнформация[0].ЗначенияПолей;
		ПредставлениеКонтактнойИнформации = КонтактнаяИнформация[0].Представление;
	КонецЕсли;
	
	РоссийскийАдрес = ПустойРоссийскийАдрес();
	
	Если СтрНайти(ЗначениеКонтактнойИнформации, "АдресРФ") > 0 Тогда
		СформироватьАдрес(ЗначениеКонтактнойИнформации, РоссийскийАдрес);
	Иначе
		СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеКонтактнойИнформации, ПредставлениеКонтактнойИнформации, РоссийскийАдрес);
	КонецЕсли;
	
	ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес);
	
	Возврат РоссийскийАдрес;

КонецФункции

Функция ПустойРоссийскийАдрес()

	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        );
	РоссийскийАдрес.Вставить("Регион",          );
	РоссийскийАдрес.Вставить("КодРегиона",      );
	РоссийскийАдрес.Вставить("Район",           );
	РоссийскийАдрес.Вставить("Город",           );
	РоссийскийАдрес.Вставить("НаселенныйПункт", );
	РоссийскийАдрес.Вставить("Улица",           );
	РоссийскийАдрес.Вставить("Дом",             );
	РоссийскийАдрес.Вставить("Корпус",          );
	РоссийскийАдрес.Вставить("Квартира",        );
	
	Возврат РоссийскийАдрес;

КонецФункции

Процедура ЗаполнитьНаселенныйПунктВРоссийскомАдресе(РоссийскийАдрес)

	Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") Тогда
		
		Город           = РоссийскийАдрес.Получить("Город");
		НаселенныйПункт = РоссийскийАдрес.Получить("НаселенныйПункт");
		Регион          = РоссийскийАдрес.Получить("Регион");
		
		Если НЕ ПустаяСтрока(Город) Тогда
			
			НаселенныйПункт = Город + ?(НЕ ПустаяСтрока(НаселенныйПункт), ", " + НаселенныйПункт, "");
			РоссийскийАдрес.Вставить("НаселенныйПункт", НаселенныйПункт);
			
		ИначеЕсли НЕ ПустаяСтрока(Регион) И ПустаяСтрока(НаселенныйПункт) Тогда
			
			РоссийскийАдрес.Вставить("НаселенныйПункт", Регион);
		
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьАдрес(КонтактнаяИнформация, РоссийскийАдрес)
	
	ЗначенияПолей = РаботаСАдресами.ПредыдущийФорматКонтактнойИнформацииXML(КонтактнаяИнформация);
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;
	
	Для НомСтр = 1 По СтрЧислоСтрок(ЗначенияПолей) Цикл
		
		Стр = СтрПолучитьСтроку(ЗначенияПолей, НомСтр);
		
		ПредставлениеСтр = Лев(Стр, СтрНайти(Стр, "=") - 1);
		ЗначениеСтр = Сред(Стр, СтрНайти(Стр, "=") + 1);
		
		Если ТипЗнч(РоссийскийАдрес) = Тип("Соответствие") И ЗначениеЗаполнено(ПредставлениеСтр) И НЕ РоссийскийАдрес.Получить(ПредставлениеСтр) = Неопределено Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		ИначеЕсли ТипЗнч(РоссийскийАдрес) = Тип("Структура") И ЗначениеЗаполнено(ПредставлениеСтр) И РоссийскийАдрес.Свойство(ПредставлениеСтр) Тогда
			РоссийскийАдрес[ПредставлениеСтр] = ЗначениеСтр;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьАдресИзСтрокиВФорматеДевятьЗапятых(ЗначениеКонтактнойИнформации, ПредставлениеКонтактнойИнформации, РоссийскийАдрес)
	
	Для Каждого Элемент Из РоссийскийАдрес Цикл
		РоссийскийАдрес[Элемент.Ключ] = "";
	КонецЦикла;

	Если ПредставлениеКонтактнойИнформации = "" Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыПервойЗапятой = СтрНайти(ПредставлениеКонтактнойИнформации, ",");
	
	Если КоординатыПервойЗапятой > 0 Тогда
		Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") = 10 Тогда
			// Для иностранного адреса представление может содержать наименование страны
			ПредставлениеКонтактнойИнформации = СокрЛП(Сред(ПредставлениеКонтактнойИнформации, КоординатыПервойЗапятой + 1));
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(ПредставлениеКонтактнойИнформации, ",") <> 9 Тогда 
		
		ПредставлениеКонтактнойИнформации = РаботаСАдресами.СведенияОбАдресе(ЗначениеКонтактнойИнформации);
		
		РоссийскийАдрес.Вставить("Индекс",          ПредставлениеКонтактнойИнформации.Индекс);
		РоссийскийАдрес.Вставить("Регион",          ПредставлениеКонтактнойИнформации.Регион);
		РоссийскийАдрес.Вставить("Район",           ПредставлениеКонтактнойИнформации.Район);
		РоссийскийАдрес.Вставить("Город",           ПредставлениеКонтактнойИнформации.Город);
		РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеКонтактнойИнформации.НаселенныйПункт);
		РоссийскийАдрес.Вставить("Улица",           ПредставлениеКонтактнойИнформации.Улица);
		
		РоссийскийАдрес.Вставить("Дом",
			?(ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Здание.Номер), 
			ПредставлениеКонтактнойИнформации.Здание.Номер, ""));
			
		Если ПредставлениеКонтактнойИнформации.Корпуса.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Корпуса[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Корпус", ПредставлениеКонтактнойИнформации.Корпуса[0].Номер);
		КонецЕсли;
		
		Если ПредставлениеКонтактнойИнформации.Помещения.Количество() <> 0
			И ЗначениеЗаполнено(ПредставлениеКонтактнойИнформации.Помещения[0].Номер) Тогда
			РоссийскийАдрес.Вставить("Квартира", ПредставлениеКонтактнойИнформации.Помещения[0].Номер);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РоссийскийАдрес = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(ПредставлениеКонтактнойИнформации);
	
КонецПроцедуры

Функция ПолучитьНазваниеРегионаПоКоду(КодРегиона)
    	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		ЧисловойКодРегиона = Число(КодРегиона);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат АдресныйКлассификатор.НаименованиеРегионаПоКоду(ЧисловойКодРегиона);

КонецФункции

Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых)
	 
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = СтрНайти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	Регион = "";
	
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",			СоставляющиеАдреса[1]);
	РоссийскийАдрес.Вставить("Регион",          Регион);
	РоссийскийАдрес.Вставить("КодРегиона",      СоставляющиеАдреса[2]);
	РоссийскийАдрес.Вставить("Район",           СоставляющиеАдреса[3]);
	РоссийскийАдрес.Вставить("Город",           СоставляющиеАдреса[4]);
	РоссийскийАдрес.Вставить("НаселенныйПункт", СоставляющиеАдреса[5]);
	РоссийскийАдрес.Вставить("Улица",           СоставляющиеАдреса[6]);
	РоссийскийАдрес.Вставить("Дом",             СоставляющиеАдреса[7]);
	РоссийскийАдрес.Вставить("Корпус",          СоставляющиеАдреса[8]);
	РоссийскийАдрес.Вставить("Квартира",        СоставляющиеАдреса[9]);
	
	Возврат РоссийскийАдрес;
	
КонецФункции

Функция СформироватьПредставлениеМестонахожденияКонтрагента(КодСтраны, ПредставлениеКонтактнойИнформации)
	
	Если КодСтраны = "643" Тогда
		ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
	Иначе
		Страна = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		НаименованиеСтраны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Наименование");
		Если СтрНачинаетсяС(ПредставлениеКонтактнойИнформации, НаименованиеСтраны) Тогда
			ПредставлениеМестонахождения = СтрЗаменить(ПредставлениеКонтактнойИнформации, НаименованиеСтраны, КодСтраны);
		Иначе
			ПредставлениеМестонахождения = КодСтраны + ", " + ПредставлениеКонтактнойИнформации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеМестонахождения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыТаможеннойДекларации(СтрокаДокумента, СтрокаВыгрузки)
	
	// Получим из номера таможенной декларации
	//   КодТО              - Код таможенного органа
	//   ДатаРегистрацииСтр - Дата таможенной декларации
	//   НомерДок           - Номер таможенной декларации
	//   ДекларацияНом      - Порядковый номер строки в декларации
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НомерТаможеннойДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДокумента.НомерТаможеннойДекларации, "/");
		
	Если МассивСлов.Количество() < 3
		ИЛИ МассивСлов.Количество() > 4 Тогда
		// Регистрационный номер таможенной декларации введен не корректно.
		Возврат;
	КонецЕсли;
	
	СтрокаВыгрузки.КодТО    = МассивСлов[0];
	ДатаРегистрацииСтр      = МассивСлов[1];
	СтрокаВыгрузки.НомерДок = МассивСлов[2];
	
	Если СтрДлина(ДатаРегистрацииСтр) = 6 Тогда
		Число = Лев(ДатаРегистрацииСтр, 2);
		Месяц = Сред(ДатаРегистрацииСтр, 3, 2);
		Год   = Прав(ДатаРегистрацииСтр, 2);
		СтрокаВыгрузки.ДатаРегистрацииСтр = "20" + Год + "-" + Месяц  + "-" + Число;
	Иначе
		СтрокаВыгрузки.ДатаРегистрацииСтр = "0001-01-01";
	КонецЕсли; 
	
	Если МассивСлов.Количество() = 4 Тогда
		// Регистрационный номер таможенной декларации содержит порядковый номер строки в декларации.
		ТипЧисло = Новый ОписаниеТипов("Число");
		СтрокаВыгрузки.ДекларацияНом = ТипЧисло.ПривестиЗначение(МассивСлов[3]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюЗаявленийОВвозе)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	Параметры.Вставить("БезОграниченияПериода");
	
	ТекстГиперссылки = НСтр("ru = 'Заявления о ввозе'");
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыЗаявленияОВвозеТоваров());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыЗаявленияОВвозеТоваров());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыЗаявленияОВвозеТоваров() Экспорт
	
	Возврат "Документ.ЗаявлениеОВвозеТоваров.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#Область Прочее 

Функция ПолучитьДокФизЛица(ФизЛицо, ДатаЗначения) Экспорт
	
	Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|	КОНЕЦ                                  КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА Строки.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК НДСУпр,
	|	НЕОПРЕДЕЛЕНО                           КАК Событие,
	|	НЕОПРЕДЕЛЕНО                           КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	""""                                   КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Операция.Дата                          КАК Период,
	|	Операция.Организация                   КАК Организация,
	|	&Ссылка                                КАК СчетФактура,
	|	Операция.Контрагент                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	Строки.СтавкаНДС                       КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                           КАК РеализацияЭкспорт,
	|	0                                      КАК СуммаБезНДС,
	|	СУММА(Строки.СуммаНДС)                 КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА Строки.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.ВключениеНДСВСтоимость) КАК Событие,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК КорВидДеятельностиНДС,
	|	ЛОЖЬ                                   КАК РегламентнаяОперация,
	|	Строки.ИдентификаторСтроки             КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявлениеОВвозеТоваров.Товары КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.НалоговаяБазаНДС <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= Строки.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	Строки.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС,
	|	Строки.ИдентификаторСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()), Новый Структура("ФизическоеЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораВидовТранспорта(СписокЗначений)

	СписокЗначений.Очистить();
	СписокЗначений.Добавить("10", НСтр("ru = '10 - Морской/речной транспорт'"));
	СписокЗначений.Добавить("20", НСтр("ru = '20 - Железнодорожный транспорт'"));
	СписокЗначений.Добавить("30", НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	СписокЗначений.Добавить("31", НСтр("ru = '31 - Состав транспортных средств (тягач с полуприцепом или прицепом)'"));
	СписокЗначений.Добавить("32", НСтр("ru = '32 - Состав транспортных средств (тягач с полуприцепом(-ами) или прицепом(-ами))'"));
	СписокЗначений.Добавить("40", НСтр("ru = '40 - Воздушный транспорт'"));
	СписокЗначений.Добавить("50", НСтр("ru = '50 - Почтовое отправление'"));
	СписокЗначений.Добавить("71", НСтр("ru = '71 - Трубопроводный транспорт'"));
	СписокЗначений.Добавить("72", НСтр("ru = '72 - Линии электропередачи'"));
	СписокЗначений.Добавить("80", НСтр("ru = '80 - Внутренний водный транспорт'"));
	СписокЗначений.Добавить("90", НСтр("ru = '90 - Транспортное средство, перемещающееся в качестве товара своим ходом'"));
	СписокЗначений.Добавить("99", НСтр("ru = '99 - Прочее'"));
	
КонецПроцедуры

Функция ОпределитьВидТранспортаПоСтатистике(ДокументПоступления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата КАК Период,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Контрагент = &Контрагент
		|	И ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	2
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЗаявлениеОВвозеТоваровТовары.ВидТранспорта,
		|	ЗаявлениеОВвозеТоваровТовары.Ссылка.Дата,
		|	3
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&АвтодорожныйТранспорт,
		|	NULL,
		|	4
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подзапрос.ВидТранспорта КАК ВидТранспорта
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.ВидТранспорта КАК ВидТранспорта,
		|		СУММА(1) КАК ЧастотаИспользования,
		|		ВТ_Документы.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_Документы.ВидТранспорта,
		|		ВТ_Документы.Приоритет) КАК Подзапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Приоритет,
		|	Подзапрос.ЧастотаИспользования УБЫВ";
		
	Запрос.УстановитьПараметр("Контрагент", ДокументПоступления.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументПоступления.Организация);
	Запрос.УстановитьПараметр("АвтодорожныйТранспорт", 
			НСтр("ru = '30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ВидТранспорта;
	
КонецФункции

Функция ТекстЗапросаТоварыКОформлениюЗаявленийОВвозе(ЗаполнениеНаОсновании = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.НомерГТД КАК НомерТД,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.КОформлениюОстаток  КАК КОформлению
	|ПОМЕСТИТЬ ОстаткиКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе.Остатки(, ДокументПоступления = &ДокументПоступления) КАК ТоварыКОформлению
	|ГДЕ
	|	ТоварыКОформлению.КОформлениюОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.НомерСтроки,
	|	ТоварыКОформлению.ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура,
	|	СпрНоменклатура.ЕдиницаИзмерения,
	|	СпрНоменклатура.КодТНВЭД,
	|	СпрНоменклатура.ТипНоменклатуры,
	|	СпрНоменклатура.СтавкаНДС,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.ФактурнаяСтоимость,
	|	ТоварыКОформлению.КОформлению
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюЗаявленийОВвозе КАК ТоварыКОформлению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыКОформлению.Номенклатура = СпрНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиКОформлению КАК ОстаткиКОформлению
	|	ПО
	|		ТоварыКОформлению.ДокументПоступления = ОстаткиКОформлению.ДокументПоступления
	|		И ТоварыКОформлению.Номенклатура = ОстаткиКОформлению.Номенклатура
	|		И ТоварыКОформлению.Характеристика = ОстаткиКОформлению.Характеристика
	|		И ТоварыКОформлению.Серия = ОстаткиКОформлению.Серия
	|		И ТоварыКОформлению.Склад = ОстаткиКОформлению.Склад
	|ГДЕ
	|	ТоварыКОформлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И (НЕ &ЗаполнениеНаОсновании 
	|		ИЛИ НЕ ОстаткиКОформлению.ДокументПоступления ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКОформлению.Номенклатура        КАК Номенклатура,
	|	ТоварыКОформлению.КодТНВЭД            КАК КодТНВЭД,
	|	ТоварыКОформлению.Характеристика      КАК Характеристика,
	|	ТоварыКОформлению.Серия               КАК Серия,
	|	ТоварыКОформлению.Склад               КАК Склад,
	|	ТоварыКОформлению.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ТоварыКОформлению.КОформлению         КАК Количество,
	|	ТоварыКОформлению.ФактурнаяСтоимость  КАК ФактурнаяСтоимость,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаНДС,
	|	ТоварыКОформлению.СтавкаНДС           КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА НЕ КурсВалютыДолларСША.Курс ЕСТЬ NULL 
	|			ТОГДА ТоварыКОформлению.ФактурнаяСтоимость * 
	|						(КурсыВалют.Курс / КурсыВалют.Кратность) / (КурсВалютыДолларСША.Курс / КурсВалютыДолларСША.Кратность)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатСтоимостьДолларыСША,
	|	&ТекстЗапросаВес * ТоварыКОформлению.КОформлению 	 КАК ВесНеттоКг,
	|	ВЫБОР
	|		КОГДА ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения = ТоварыКОформлению.ЕдиницаИзмерения
	|			ТОГДА 1
	|		КОГДА ТоварыКОформлению.ЕдиницаИзмерения.ЕдиницаИзмерения = ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения
	|				И ТоварыКОформлению.ЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА ТоварыКОформлению.ЕдиницаИзмерения.Числитель / ТоварыКОформлению.ЕдиницаИзмерения.Знаменатель
	|		КОГДА ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Числитель = 0 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.ТипИзмеряемойВеличины
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|					ТОГДА &ТекстЗапросаВес
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|					ТОГДА &ТекстЗапросаОбъем
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|					ТОГДА &ТекстЗапросаПлощадь
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|					ТОГДА &ТекстЗапросаДлина
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|					ТОГДА &ТекстЗапросаКоличествоШтук
	|				ИНАЧЕ 0
	|			КОНЕЦ * ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Знаменатель / ТоварыКОформлению.КодТНВЭД.ЕдиницаИзмерения.Числитель 
	|	КОНЕЦ * ТоварыКОформлению.КОформлению КАК КоличествоПоТНВЭД,
	|	ТоварыКОформлению.ФактурнаяСтоимость * КурсыВалют.Курс / КурсыВалют.Кратность КАК НалоговаяБазаАкцизы,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугТовары.СтранаПроисхождения, Операция.Контрагент.СтранаРегистрации) КАК СтранаПроисхождения,
	|	ПриобретениеТоваровУслугТовары.НомерТД КАК НомерТД,
	|
	|	Операция.Валюта                  КАК Валюта,
	|	Операция.НомерВходящегоДокумента КАК СерияНомерТСД,
	|	Операция.ДатаВходящегоДокумента  КАК ДатаТСД,
	|	Операция.Договор                 КАК Договор,
	|	Операция.ЗакупкаПодДеятельность  КАК ЗакупкаПодДеятельность,
	|
	|	ПриобретениеТоваровУслугТовары.НоменклатураПоставщика     КАК НоменклатураПоставщика,
	|	ПриобретениеТоваровУслугТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПриобретениеТоваровУслугТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ПриобретениеТоваровУслугТовары.Подразделение              КАК Подразделение,
	|	ПриобретениеТоваровУслугТовары.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|
	|	&ДатаПринятияНаУчет КАК ДатаПринятияНаУчет,
	|	&ВидТранспорта      КАК ВидТранспорта
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Операция
	|		ПО ТоварыКОформлению.ДокументПоступления = Операция.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ПриобретениеТоваровУслугТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, ) КАК КурсыВалют
	|			ПО ПриобретениеТоваровУслугТовары.Ссылка.Валюта = КурсыВалют.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПринятияНаУчет, Валюта = &ДолларСША) КАК КурсВалютыДолларСША
	|			ПО (ИСТИНА)
	|		ПО ТоварыКОформлению.ДокументПоступления = ПриобретениеТоваровУслугТовары.Ссылка
	|			И ТоварыКОформлению.Номенклатура = ПриобретениеТоваровУслугТовары.Номенклатура
	|			И ТоварыКОформлению.Характеристика = ПриобретениеТоваровУслугТовары.Характеристика
	|			И ТоварыКОформлению.Серия = ПриобретениеТоваровУслугТовары.Серия
	|			И ТоварыКОформлению.Склад = ПриобретениеТоваровУслугТовары.Склад
	|			И ТоварыКОформлению.НомерСтроки = ПриобретениеТоваровУслугТовары.НомерСтроки
	|ГДЕ
	|	ТоварыКОформлению.ДокументПоступления = &ДокументПоступления
	|	И ТоварыКОформлению.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъем", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПлощадь", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаПлощадьУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДлина", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДлинаУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоличествоШтук", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"ТоварыКОформлению.ЕдиницаИзмерения", 
						"ТоварыКОформлению.Номенклатура"));
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.КоличествоПоТНВЭД = 0
	|	И ЕСТЬNULL(ЗаявлениеОВвозеТоваровТовары.КодТНВЭД.ЕдиницаИзмерения.Код,""166"") <> ""166""";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЗаявлениеОВвозеТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ДополнительныеИсточникиДанных = Новый Соответствие;
	ДополнительныеПараметры.ДополнительныеИсточникиДанных.Вставить("Товары.КодТНВЭД");
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки( Параметры.Очередь,
																						ПолноеИмяОбъекта,
																						МенеджерВременныхТаблиц,
																						ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	Товары.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.КодТНВЭД.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|			ТОГДА 1
	|		КОГДА Товары.ЕдиницаИзмерения.ЕдиницаИзмерения = Товары.КодТНВЭД.ЕдиницаИзмерения
	|				И Товары.ЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА Товары.ЕдиницаИзмерения.Числитель / Товары.ЕдиницаИзмерения.Знаменатель
	|		КОГДА Товары.КодТНВЭД.ЕдиницаИзмерения.Числитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР Товары.КодТНВЭД.ЕдиницаИзмерения.ТипИзмеряемойВеличины
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|					ТОГДА &ТекстЗапросаВес
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|					ТОГДА &ТекстЗапросаОбъем
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	|					ТОГДА &ТекстЗапросаПлощадь
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	|					ТОГДА &ТекстЗапросаДлина
	|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|					ТОГДА &ТекстЗапросаКоличествоШтук
	|				ИНАЧЕ 1
	|			КОНЕЦ * Товары.КодТНВЭД.ЕдиницаИзмерения.Знаменатель / Товары.КодТНВЭД.ЕдиницаИзмерения.Числитель
	|	КОНЕЦ * Товары.Количество КАК КоличествоПоТНВЭД
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|		ПО (Товары.Ссылка = ОбъектыДляОбработки.Ссылка)
	|ГДЕ
	|	Товары.КодТНВЭД.ЕдиницаИзмерения.Код <> ""166""
	|ИТОГИ ПО
	|	ВерсияДанных, Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
						"Товары.ЕдиницаИзмерения", 
						"Товары.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъем", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
						"Товары.ЕдиницаИзмерения", 
						"Товары.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПлощадь", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаПлощадьУпаковки(
						"Товары.ЕдиницаИзмерения", 
						"Товары.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДлина", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДлинаУпаковки(
						"Товары.ЕдиницаИзмерения", 
						"Товары.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоличествоШтук", 
					Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
						"Товары.ЕдиницаИзмерения", 
						"Товары.Номенклатура"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	ВыборкаПоВерсиям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВерсиям.Следующий() Цикл
		ВыборкаПоДокументам = ВыборкаПоВерсиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(ВыборкаПоДокументам.Ссылка);
				Продолжить;
			КонецПопытки;
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(ВыборкаПоДокументам.Ссылка, 
																					ВыборкаПоДокументам.ВерсияДанных, 
																					Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
		
			Попытка
				Выборка = ВыборкаПоДокументам.Выбрать();
				Пока Выборка.Следующий() Цикл
					ДокументОбъект.Товары[Выборка.НомерСтроки - 1].КоличествоПоТНВЭД = Выборка.КоличествоПоТНВЭД;
					ДокументОбъект.Товары[Выборка.НомерСтроки - 1].КодТНВЭД = Выборка.КодТНВЭД;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),  ВыборкаПоДокументам.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#КонецЕсли
