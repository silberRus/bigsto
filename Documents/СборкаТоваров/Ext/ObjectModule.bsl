#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыСборокТоваров[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.ТЧ);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий.Шапка);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ИнициализироватьДокумент();
	ЗаказНаСборку        = Неопределено;
	ВидыЗапасовСписание.Очистить();
	ВидыЗапасовОприходование.Очистить();
	Серии.Очистить();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.КодСтроки = 0;
			СтрокаТЧ.ИдентификаторСтроки = "";
			
		КонецЦикла;
		
		Таблица = ОбеспечениеСервер.ТаблицаПоОписаниюПолей("Индекс,Номенклатура,Назначение");
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭтотОбъект);
		СтрокаТаблицы.Индекс = 0;
		НазначениеПоУмолчанию = НаправленияДеятельностиСервер.ТолкающееНазначение(НаправлениеДеятельности);
		НакладныеСервер.ЗаполнитьНазначенияВТабличнойЧасти(Таблица, НазначениеПоУмолчанию);
		Назначение = Таблица[0].Назначение;
		
	Иначе
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.КодСтроки = 0;
			СтрокаТЧ.ИдентификаторСтроки = "";
			
		КонецЦикла;
		НазначениеПоУмолчанию = НаправленияДеятельностиСервер.ТолкающееНазначение(НаправлениеДеятельности);
		НакладныеСервер.ЗаполнитьНазначенияВТабличнойЧасти(Товары, НазначениеПоУмолчанию);
		
	КонецЕсли;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ХозяйственныеОперации = Перечисления.ХозяйственныеОперации;
	
	// Проверка количества в шапке.
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Объект";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

	// Проверка количества в т.ч. товары.
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	// Если сборка - доля стоимости не нужна.
	Если ХозяйственнаяОперация = ХозяйственныеОперации.СборкаТоваров Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоляСтоимости");
	КонецЕсли;

	// Если накладная по заказу - то код строки должен быть заполнен.
	Если Не ЗначениеЗаполнено(ЗаказНаСборку) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	КонецЕсли;

	// Проверка характеристки в шапке.
	Если Не ИспользоватьХарактеристики Или Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
		
	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ВестиУчетПоГТД = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(Номенклатура).ВестиУчетПоГТД;
	КонтролироватьНомераГТД = ЗапретитьПоступлениеТоваровБезНомеровГТД
		И ((ХозяйственнаяОперация = ХозяйственныеОперации.СборкаТоваров И ВестиУчетПоГТД)
		ИЛИ ХозяйственнаяОперация = ХозяйственныеОперации.РазборкаТоваров И НЕ ВестиУчетПоГТД);
	
	Если (ХозяйственнаяОперация = ХозяйственныеОперации.СборкаТоваров) И ЗначениеЗаполнено(НоменклатураОсновногоКомпонента) Тогда
		ПредставлениеОсновногоКомпонента =
			НоменклатураКлиентСервер.ПредставлениеНоменклатуры(НоменклатураОсновногоКомпонента, ХарактеристикаОсновногоКомпонента);
			
		ОтборТоваров =
			Новый Структура("Номенклатура, Характеристика", НоменклатураОсновногоКомпонента, ХарактеристикаОсновногоКомпонента);
		Если Товары.НайтиСтроки(ОтборТоваров).Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Основной компонент `%НазваниеТовара%` в товарах не найден.
				|Укажите основной компонент из перечня товаров'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеОсновногоКомпонента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		КонецЕсли;
		
		Если КонтролироватьНомераГТД Тогда
			КомпонентВестиУчетПоГТД =
				Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(НоменклатураОсновногоКомпонента).ВестиУчетПоГТД;
			Если Не КомпонентВестиУчетПоГТД Тогда
				ТекстСообщения = НСтр("ru = 'По основному компоненту `%НазваниеТовара%` учет по ГТД не ведется.
					|Укажите основной компонент, по которому ведется учет по ГТД.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеОсновногоКомпонента);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПроверятьХарактеристикуКомпонента = 
			ИспользоватьХарактеристики И Не ЗначениеЗаполнено(ХарактеристикаОсновногоКомпонента)
			И Справочники.Номенклатура.ХарактеристикиИспользуются(НоменклатураОсновногоКомпонента);
		Если ПроверятьХарактеристикуКомпонента Тогда
			ПроверяемыеРеквизиты.Добавить("ХарактеристикаОсновногоКомпонента");
		КонецЕсли;
		
	ИначеЕсли (ХозяйственнаяОперация = ХозяйственныеОперации.СборкаТоваров) И КонтролироватьНомераГТД Тогда
		ТекстСообщения = НСтр("ru = 'Требуется определять страну происхождения и номера ГТД комплекта.
			|Укажите основной компонент, по которому ведется учет по ГТД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		
	ИначеЕсли (ХозяйственнаяОперация = ХозяйственныеОперации.РазборкаТоваров) И КонтролироватьНомераГТД Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Компоненты.НомерСтроки КАК НомерСтроки,
			|	Компоненты.Номенклатура
			|ПОМЕСТИТЬ Компоненты
			|ИЗ &Компоненты КАК Компоненты;
			|
			|ВЫБРАТЬ
			|	Компоненты.НомерСтроки,
			|	ИСТИНА КАК ВестиУчетПоГТД
			|ИЗ Компоненты КАК Компоненты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Описания
			|		ПО Описания.Ссылка = Компоненты.Номенклатура
			|ГДЕ Описания.ВестиУчетПоГТД
			|");
		Запрос.УстановитьПараметр("Компоненты", Товары.Выгрузить( , "НомерСтроки, Номенклатура"));
		Выборка = Запрос.Выполнить().Выбрать();
		ТекстСообщения = НСтр("ru = 'Для комплектующей в строке %НомерСтроки% списка ""Товары"" ведется учет по ГТД.
			|Такие позиции недопустимы, если для разбираемого комплекта не ведется учет по ГТД.'");
		Пока Выборка.Следующий() Цикл
			ИтоговоеСообщение = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерГТД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИтоговоеСообщение, , Поле, "Объект", Отказ);
		КонецЦикла;
	КонецЕсли;

	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОтборТоваров = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
	ПредставлениеКомплекта = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Номенклатура, Характеристика);
	Для Каждого СтрокаТЧ Из Товары.НайтиСтроки(ОтборТоваров) Цикл
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указан товар ""%НазваниеТовара%"".
			|Один и тот же товар не может являться и комплектом, и комплектующей одновременно.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%", ПредставлениеКомплекта);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
	
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Отказ, МассивНепроверяемыхРеквизитов);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.Шапка, Отказ, МассивНепроверяемыхРеквизитов);
		
	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Объект";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	// Очистка неиспользуемых реквизитов в тч Товары
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Для Каждого Товар Из Товары Цикл
			Если Товар.ДоляСтоимости <> 0 Тогда
				Товар.ДоляСтоимости = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыСерий);
	
	// Заполнение видов запасов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьАналитикиУчетаНоменклатуры();
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасовСписание.Очистить();
			ВидыЗапасовОприходование.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Распоряжение = ДокументОснованиеПриЗаполнении(ДанныеЗаполнения);
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Распоряжение);
	
	// Заполнение по заказу(-ам).
	СтруктураЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		СтруктураЗаполнения = ДанныеЗаполнения;
		
	КонецЕсли;
	
	Если СтруктураЗаполнения <> Неопределено Тогда
		
		СтруктураЗаполнения.РеквизитыШапки.Вставить("ВариантПриемкиТоваров", ВариантПриемкиТоваров);
		ЗаполнитьПоЗаказу(СтруктураЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СборкаТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	// Движения по оборотным регистрам управленческого учета 
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);

	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение);
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();
	
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Ложь;
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);

	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);

	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);

	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Склад;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказу(СтруктураЗаполнения)
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	
	ПараметрыЗаполнения = Документы.СборкаТоваров.ПараметрыЗаполненияДокумента();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтруктураЗаполнения);
	Документы.СборкаТоваров.ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, СтруктураЗаполнения.РеквизитыШапки,
		МассивЗаказов);
		
	МассивРаспоряжений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Ссылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРаспоряжений, МассивЗаказов);
	
	// Заполнение шапки
	Документы.СборкаТоваров.ЗаполнитьШапкуДокументаПоЗаказу(ЭтотОбъект, ПараметрыЗаполнения, МассивЗаказов);
	
	ОрдернаяСхемаПриОтгрузке    = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, ТекущаяДатаСеанса());
	ОрдернаяСхемаПриПоступлении = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Склад, ТекущаяДатаСеанса());
	
	ПорядокОформления = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
	СначалаОрдера = (ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		ЗаполнятьПоОрдеру = СтруктураЗаполнения.ЗаполнятьПоОрдеру;
	Иначе
		ЗаполнятьПоОрдеру = ОрдернаяСхемаПриОтгрузке И СначалаОрдера;
	КонецЕсли;
	
	ТаблицаНакладная = Документы.СборкаТоваров.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка);
	ТаблицаНакладнаяПоШапке = Документы.СборкаТоваров.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка, Истина);
	
	Ресурсы = Новый Массив(1);
	
	Ресурсы[0] = "Комплект";
	ШапкуЗаполнятьПоОрдеру = ЗаполнятьПоОрдеру
		И ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров,
			ОрдернаяСхемаПриОтгрузке, Истина);
	
	ПараметрыЗаполнения.Ресурсы = Ресурсы;
	ПараметрыЗаполнения.ЗаполнятьПоОрдеру = ШапкуЗаполнятьПоОрдеру;
	Документы.СборкаТоваров.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладнаяПоШапке, Ссылка, ПараметрыЗаполнения);
	
	Ресурсы[0] = "Комплектующие";
	ТЧЗаполнятьПоОрдеру = ЗаполнятьПоОрдеру
		И ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров,
			ОрдернаяСхемаПриОтгрузке, Истина);
	
	ПараметрыЗаполнения.Ресурсы = Ресурсы;
	ПараметрыЗаполнения.ЗаполнятьПоОрдеру = ТЧЗаполнятьПоОрдеру;
	Документы.СборкаТоваров.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, Ссылка, ПараметрыЗаполнения);
	
	Если ШапкуЗаполнятьПоОрдеру Тогда
		ТаблицаНакладнаяПоШапке.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладнаяПоШапке.Колонки.КоличествоВОрдере.Имя = "Количество";
	Иначе
		ТаблицаНакладнаяПоШапке.Колонки.Количество.Имя        = "КоличествоДоИзменения";
		ТаблицаНакладнаяПоШапке.Колонки.КоличествоВЗаказе.Имя = "Количество";
	КонецЕсли;
	
	Если ТЧЗаполнятьПоОрдеру Тогда
		ТаблицаНакладная.Колонки.Количество.Имя               = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя        = "Количество";
	Иначе
		ТаблицаНакладная.Колонки.Количество.Имя               = "КоличествоДоИзменения";
		ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя        = "Количество";
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаНакладная);
	
	Документы.СборкаТоваров.ПерезаполнитьТоварыВШапке(ЭтотОбъект, ТаблицаНакладнаяПоШапке, МассивЗаказов[0]);
	
	Документы.СборкаТоваров.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
	// Заполнение серий.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект, ПараметрыУказанияСерий.ТЧ, Ложь);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект, ПараметрыУказанияСерий.Шапка, Ложь);
	
	// Заполнение заказа в шапке.
	ЗаказНаСборку = МассивЗаказов[0];
	
	// Заполнение долей стоимости
	Если Не ЗаполнятьПоОрдеру
		И ЗначениеЗаполнено(ЗаказНаСборку)
		И ЗначениеЗаполнено(ВариантКомплектации)
		И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
		ЗаполнитьДолиСтоимости();
	КонецЕсли;
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру")
		И СтруктураЗаполнения.ЗаполнятьПоОрдеру
		И СначалаОрдера Тогда
		Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДолиСтоимости()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.КОформлениюПоступленийПоОрдерамРасход
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , , ДокументПоступления = &ЗаказНаСборку) КАК Таблица";
	
	// Заполнение долей стоимости возможно только если нет накладных (создается первая)
	Если Запрос.Выполнить().Пустой() Тогда
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		Запрос.УстановитьПараметр("КоличествоКомплектов", Количество);
		Запрос.УстановитьПараметр("ВариантКомплектации", ВариантКомплектации);
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"НомерСтроки, Номенклатура, Характеристика, Упаковка, Количество"));
		
		// Доля стоимости заполняется если состав строк и количество совпадает с вариантом комплектации
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки     КАК НомерСтроки,
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Упаковка        КАК Упаковка,
		|	Таблица.Количество      КАК Количество
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Товары КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура              КАК Номенклатура,
		|	Таблица.Характеристика            КАК Характеристика,
		|	Таблица.Упаковка                  КАК Упаковка,
		|	&КоличествоКомплектов * Таблица.Количество * ВЫБОР
		|		КОГДА Таблица.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ / Таблица.Ссылка.Количество КАК Количество,
		|	Таблица.ДоляСтоимости             КАК ДоляСтоимости
		|ПОМЕСТИТЬ ВтВариантыКомплектации
		|ИЗ
		|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &ВариантКомплектации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Набор.Номенклатура      КАК Номенклатура,
		|	Набор.Характеристика    КАК Характеристика,
		|	Набор.Упаковка          КАК Упаковка,
		|	СУММА(Набор.Количество) КАК Количество,
		|	СУММА(Набор.ЕстьТовар)  КАК ЕстьТовар
		|ПОМЕСТИТЬ ВтЕстьОтклонения
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура    КАК Номенклатура,
		|		Таблица.Характеристика  КАК Характеристика,
		|		Таблица.Упаковка        КАК Упаковка,
		|		-Таблица.Количество     КАК Количество,
		|		1                       КАК ЕстьТовар
		|	ИЗ
		|		ВтТовары КАК Таблица
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Таблица.Номенклатура    КАК Номенклатура,
		|		Таблица.Характеристика  КАК Характеристика,
		|		Таблица.Упаковка        КАК Упаковка,
		|		Таблица.Количество      КАК Количество,
		|		1                       КАК ЕстьТовар
		|	ИЗ
		|		ВтВариантыКомплектации КАК Таблица) КАК Набор
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) <> 0 ИЛИ СУММА(Набор.ЕстьТовар) <> 2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки               КАК НомерСтроки,
		|	ТаблицаКомплектации.ДоляСтоимости КАК ДоляСтоимости
		|ИЗ
		|	ВтТовары КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтВариантыКомплектации КАК ТаблицаКомплектации
		|		ПО Таблица.Номенклатура = ТаблицаКомплектации.Номенклатура
		|			И Таблица.Характеристика = ТаблицаКомплектации.Характеристика
		|			И Таблица.Упаковка = ТаблицаКомплектации.Упаковка
		|			И Таблица.Количество = ТаблицаКомплектации.Количество
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьОтклонения КАК ВтЕстьОтклонения
		|		ПО ИСТИНА
		|	
		|ГДЕ
		|	НЕ ТаблицаКомплектации.ДоляСтоимости ЕСТЬ NULL
		|	И ВтЕстьОтклонения.ЕстьТовар ЕСТЬ NULL";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Таблица.Упаковка",
			"Таблица.Номенклатура"));
		
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыТовары = Товары[Выборка.НомерСтроки - 1];
			СтрокаТаблицыТовары.ДоляСтоимости = Выборка.ДоляСтоимости;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Ответственный    = Пользователи.ТекущийПользователь();
	ДатаРаспоряжения = ТекущаяДатаСеанса();
	Подразделение    = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыСборокТоваров") Тогда
		Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	КонецЕсли;
	
	УчетНДСУТ.ПроверитьКорректностьДеятельностиНДСПотребления(
		СборкаПодДеятельность, 
		Организация,
		Дата);
		
	Если Не ЗначениеЗаполнено(СборкаПодДеятельность) Тогда
		СборкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли;
	
КонецПроцедуры

Функция ДокументОснованиеПриЗаполнении(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда
		
		Возврат ДанныеЗаполнения.МассивЗаказов[0];
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ВидыЗапасов

Функция СформироватьТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ТаблицаТоваров.Колонки.Добавить("АналитикаУчетаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("СтатусУказанияСерий", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), ЭтотОбъект);
	ТаблицаТоваров[0].НомерСтроки = 1;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

// Функция формирует временные данных документа.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Дата КАК Дата,
	|	&Склад КАК Склад,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		ТОГДА
	|			&Подразделение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И Не ЕСТЬNULL(Сделки.ОбособленныйУчетТоваровПоСделке, Ложь)
	|			И Подразделения.ВариантОбособленногоУчетаТоваров
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		ТОГДА
	|			&Менеджер
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И Сделки.ОбособленныйУчетТоваровПоСделке ТОГДА
	|			&Сделка
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|		КОНЕЦ КАК Сделка,
	|
	|	&НоменклатураОсновногоКомпонента КАК НоменклатураОсновногоКомпонента,
	|	&ХарактеристикаОсновногоКомпонента КАК ХарактеристикаОсновногоКомпонента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК Подразделения
	|	ПО
	|		Подразделения.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК Сделки
	|	ПО
	|		Сделки.Ссылка = &Сделка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&ЗаказНаСборку КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваровСписание
	|ИЗ
	|	&ТаблицаТоваровСписание КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(НазначениеЗаказа.Ссылка, ЗаказКакНазначение.Ссылка) КАК Назначение
	|	
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваровСписание КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.Заказ = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|	ПО
	|		ТаблицаТоваров.Заказ = ЗаказНаСборку.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК НазначениеЗаказа
	|	ПО
	|		ЗаказНаСборку.Назначение = НазначениеЗаказа.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК ЗаказКакНазначение
	|	ПО
	|		ЗаказНаСборку.НазначениеТовары = ЗаказКакНазначение.Ссылка
	|
	|ГДЕ
	|	ТаблицаТоваров.Заказ <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ ТоварыЗаказа.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаСборку.Назначение   КАК Назначение
	|	
	|ИЗ
	|	ВтТаблицаТоваровСписание КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|	ПО
	|		ТаблицаТоваров.Заказ = ЗаказНаСборку.Ссылка
	|		И ТаблицаТоваров.Номенклатура = ЗаказНаСборку.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ЗаказНаСборку.Характеристика
	|
	|ГДЕ
	|	ТаблицаТоваров.Заказ <> Неопределено
	|	И ЗаказНаСборку.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|			ТОГДА ТаблицаТоваров.Назначение
	|		ИНАЧЕ ЕСТЬNULL(ТоварыПодЗаказ.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|	КОНЕЦ КАК Назначение,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваровСписание КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовСписание
	|ИЗ
	|	&ТаблицаВидыЗапасовСписание КАК ТаблицаВидыЗапасов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	&Сделка КАК Сделка,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасовСписание КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ВтТаблицаТоваровОприходование
	|ИЗ
	|	&ТаблицаТоваровОприходование КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовОприходование
	|ИЗ
	|	&ТаблицаВидыЗапасовОприходование КАК ТаблицаВидыЗапасов
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ТекущийВидЗапасов,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&СборкаПодДеятельность КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка) КАК ВидЦены
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваровОприходование КАК ТаблицаТоваров
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Запрос.УстановитьПараметр("СборкаПодДеятельность", СборкаПодДеятельность);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("НоменклатураОсновногоКомпонента", НоменклатураОсновногоКомпонента);
	Запрос.УстановитьПараметр("ХарактеристикаОсновногоКомпонента", ХарактеристикаОсновногоКомпонента);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваровСписание", Товары.Выгрузить());
		Запрос.УстановитьПараметр("ТаблицаТоваровОприходование", СформироватьТаблицуТоваров());
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваровСписание", СформироватьТаблицуТоваров());
		Запрос.УстановитьПараметр("ТаблицаТоваровОприходование", Товары.Выгрузить());
	КонецЕсли;
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасовСписание", ВидыЗапасовСписание);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасовОприходование", ВидыЗапасовОприходование);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект, Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(Перечисления.ХозяйственныеОперации.СборкаТоваров, Склад, Подразделение, Неопределено);
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета);
	ШапкаДокумента = СформироватьТаблицуТоваров();
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ШапкаДокумента, МестаУчета);
	АналитикаУчетаНоменклатуры = ШапкаДокумента[0].АналитикаУчетаНоменклатуры;

КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокументаСписание(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, Дата, Склад";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеРеквизитовДокументаОприходование(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "НоменклатураОсновногоКомпонента, ХарактеристикаОсновногоКомпонента";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеСписываемыхТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Функция ПроверитьИзменениеОприходуемыхТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ВтТаблицаТоваровОприходование КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ВтВидыЗапасовОприходование КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

// Процедура заполнения табличной части "Виды запасов документа".
//
// Параметры:
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	ВидыЗапасовСписаниеПерезаполнены = Ложь;
	
	Если Не Проведен ИЛИ ПерезаполнитьВидыЗапасов
		ИЛИ ПроверитьИзменениеРеквизитовДокументаСписание(МенеджерВременныхТаблиц)
		ИЛИ ПроверитьИзменениеСписываемыхТоваров(МенеджерВременныхТаблиц) Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ,
			ПараметрыЗаполнения);
		
		ВидыЗапасовСписание.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
		МассивУдаляемыхСтрок = ВидыЗапасовСписание.НайтиСтроки(Новый Структура("Количество", 0));
		Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
			ВидыЗапасовСписание.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ВидыЗапасовСписаниеПерезаполнены = Истина;
		
	КонецЕсли;
	
	Если Не Проведен ИЛИ ПерезаполнитьВидыЗапасов ИЛИ ВидыЗапасовСписаниеПерезаполнены
		ИЛИ ПроверитьИзменениеРеквизитовДокументаОприходование(МенеджерВременныхТаблиц)
		ИЛИ ПроверитьИзменениеОприходуемыхТоваров(МенеджерВременныхТаблиц) Тогда
		
		ВидыЗапасовОприходование.Очистить();
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
			ЗаполнитьЗначенияСвойств(ВидыЗапасовОприходование.Добавить(), ЭтотОбъект);
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров Тогда
			Для каждого СтрокаТовары Из Товары Цикл
				ЗаполнитьЗначенияСвойств(ВидыЗапасовОприходование.Добавить(), СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, ВидыЗапасовОприходование);
		
		РаспределитьНомераГТД();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьНомераГТД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
	|	ВЫБОР
	|		КОГДА АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ШтучнаяЕдиница,
	|	АналитикаУчетаНоменклатуры.Номенклатура.ВестиУчетПоГТД КАК УчетПоГТД
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ГДЕ
	|	АналитикаУчетаНоменклатуры.КлючАналитики В(&КлючиАналитики)";
	Запрос.УстановитьПараметр("КлючиАналитики", ВидыЗапасовОприходование.ВыгрузитьКолонку("АналитикаУчетаНоменклатуры"));
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеАналитикУчета = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДанныеАналитикУчета.Вставить(Выборка.КлючАналитики,
			Новый Структура("УчетПоГТД, ШтучнаяЕдиница", Выборка.УчетПоГТД, Выборка.ШтучнаяЕдиница));
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.НомерГТД
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ВидыЗапасов КАК ВидыЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗапасов.Количество,
	|	ВидыЗапасов.НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов";
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасовСписание);
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика = &Характеристика";
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураОсновногоКомпонента);
		Запрос.УстановитьПараметр("Характеристика", ХарактеристикаОсновногоКомпонента);
	КонецЕсли;
	СписываемыеЗапасы = Запрос.Выполнить().Выгрузить();
	
	Индекс = ВидыЗапасовОприходование.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ЗапасОприходование = ВидыЗапасовОприходование[Индекс];
		ДанныеАналитики = ДанныеАналитикУчета.Получить(ЗапасОприходование.АналитикаУчетаНоменклатуры);
		
		Если НЕ ДанныеАналитики.УчетПоГТД Тогда
			ЗапасОприходование.НомерГТД = Неопределено;
			Индекс = Индекс - 1;
			Продолжить;
		КонецЕсли;
		
		Разрядность = ?(ДанныеАналитики.ШтучнаяЕдиница И Цел(ЗапасОприходование.Количество) = ЗапасОприходование.Количество, 0, 3);
		ОсталосьРаспределить = ЗапасОприходование.Количество;
		ВсегоКоличество = СписываемыеЗапасы.Итог("Количество");
		
		Для каждого ЗапасСписание Из СписываемыеЗапасы Цикл
			
			ЗапасОприходование.Количество = Окр(ОсталосьРаспределить * ЗапасСписание.Количество / ВсегоКоличество,
				Разрядность, 1);
			ЗапасОприходование.НомерГТД = ЗапасСписание.НомерГТД;
			
			ОсталосьРаспределить = ОсталосьРаспределить - ЗапасОприходование.Количество;
			ВсегоКоличество = ВсегоКоличество - ЗапасСписание.Количество;
			
			Если ОсталосьРаспределить <> 0 Тогда
				ЗаполнитьЗначенияСвойств(ВидыЗапасовОприходование.Вставить(Индекс), ЗапасОприходование);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыЗаполненияВидовЗапасов()
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
	ПараметрыЗаполнения.ИмяТЧВидыЗапасов = "ВидыЗапасовСписание";
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	// Контроль при перепроведении и отмене проведения.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;

	Если ЗаказНаСборку <> Документы.ЗаказНаСборку.ПустаяСсылка() // По заказу 
		Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	// При проведении выполняется контроль превышения свободного остатка и заказа.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ЗаказыНаСборку);

		ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.СборкаТоваров);
		Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		 Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда

			Массив.Добавить(Движения.ТоварыНаСкладах);

		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
