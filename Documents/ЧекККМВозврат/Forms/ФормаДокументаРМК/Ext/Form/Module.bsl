&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // используется механизмом серий

&НаКлиенте
Перем ДанныеУдаляемыхСтрок; // Для удаления акцизных марок

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьПодарочныеСертификаты   = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	ИспользоватьКартыЛояльности         = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	
	ДанныеФискальнойОперации = РозничныеПродажи.СтруктураДанныеФискальнойОперации();
	
	РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС = ИнтеграцияЕГАИСВызовСервера.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС();
	
	КонтролироватьАссортимент = АссортиментСерверПовтИсп.КонтролироватьАссортимент(Объект.Склад, Объект.Дата);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ДисплейПокупателя,
	                                              |ФискальныйРегистратор,
	                                              |ККТ,
	                                              |ПринтерЧеков,
	                                              |ЭквайринговыйТерминал,
	                                              |ЭлектронныеВесы,
	                                              |СчитывательМагнитныхКарт";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьВидимостьЭлементовСерий();
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонецЕсли;
	
	ПриСозданииЧека();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Если ОткрыватьФормуСПодключеннымОборудованием И ВладелецФормы = Неопределено Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания", 0.5, Истина);
			
		Иначе
			
			Для Каждого СтрокаТЧ Из Оборудование Цикл
				
				МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
					Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, СтрокаТЧ),
					ЭтотОбъект.УникальныйИдентификатор,
					СтрокаТЧ.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	Если ПринудительнаяАвторизация И ВладелецФормы = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
		И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
			Если Не ИспользоватьАкцизныеМарки Тогда
				ДанныеШтрихкодов = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
				ОбработатьШтрихкоды(ДанныеШтрихкодов);
			Иначе
				МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
				АкцизныеМаркиЕГАИСКлиент.ОбработатьВводШтрихкода(
					ЭтотОбъект,
					МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр),
					КэшированныеЗначения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор
		И Не ТолькоПросмотр Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора());
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
		ПараметрыОткрытия.Вставить("ВидЦены", Объект.ВидЦены);
		ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
		ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОборудованиеПодключено" Тогда
		ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ВыборОтложенногоЧека" Тогда
		ЗагрузитьНовыйЧек(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
	
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	РозничныеПродажи.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары, Объект.Серии);
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЧекККМВозврат", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.ЧекККМВозврат));
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	РозничныеПродажи.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары, Объект.Серии);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущийЭлемент = Элементы.ТоварыШтрихкод
		И НЕ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕГАИС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТоварыШтрихкод.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыШтрихкод Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		Структура.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		Структура.Вставить("Упаковка",       ТекущиеДанные.Упаковка);
	
		Элементы.ТоварыШтрихкод.СписокВыбора.ЗагрузитьЗначения(РозничныеПродажиВызовСервера.ПолучитьШтрихкодыНоменклатуры(Структура));
	КонецЕсли;
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕГАИС Тогда
		
		ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущиеДанные);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
			ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ТекущиеДанные.КоличествоАкцизныхМарок = 0;
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтотОбъект, "Товары", Отказ);
	
	ДанныеУдаляемыхСтрок = Новый Структура;
	ДанныеУдаляемыхСтрок.Вставить("ИдентификаторыСтрок", Новый Массив);
	ДанныеУдаляемыхСтрок.Вставить("Справки2", Новый Массив);
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ДанныеУдаляемыхСтрок.ИдентификаторыСтрок.Добавить(СтрокаТЧ.ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ДанныеУдаляемыхСтрок <> Неопределено Тогда
		УдалитьАкцизныеМарки(ДанныеУдаляемыхСтрок);
	КонецЕсли;
	
	ДанныеУдаляемыхСтрок = Неопределено;
	
	ПересчитатьДокументНаКлиенте();
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Истина) Тогда
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ТоварыНоменклатураПриИзмененииСервер(ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПараметрыЗаполнения = ПараметрыЗаполненияНоменклатурыЕГАИС();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТоварыХарактеристикаПриИзмененииСервер(ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыХарактеристикаПриИзмененииСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ПараметрыЗаполнения = ПараметрыЗаполненияНоменклатурыЕГАИС();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	
	СтруктураДействий = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	ПараметрыЗаполнения.Вставить("Серии", Объект.Серии);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОчиститьСообщения();
	
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтотОбъект);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ТекущаяСтрока),
		УникальныйИдентификатор);
	
КонецПроцедуры

// Вызывается из меню прочих операций
&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАкцизныеМарки Тогда
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если ПустаяСтрока(СтрокаТЧ.ИдентификаторСтроки) И СтрокаТЧ.МаркируемаяАлкогольнаяПродукция = 1 Тогда
				СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище",            ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества());
	ПараметрыОткрытия.Вставить("ПревышениеКоличестваТоваровРазрешено", Истина);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	ПараметрыОткрытия.Вставить("Склад",                                Объект.Склад);
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",                    "Товары");
	ПараметрыОткрытия.Вставить("Ссылка",                               Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИспользоватьАкцизныеМарки",            ИспользоватьАкцизныеМарки);
	ПараметрыОткрытия.Вставить("ОрганизацияЕГАИС",                     Объект.ОрганизацияЕГАИС);
	
	ВозвращаемыеПараметры = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ПроверитьКоличествоВДокументеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозвращаемыеПараметры = Результат;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, 
		?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора());
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("ВидыЦены", Объект.ВидЦены);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено, ОповещениеПриЗавершении = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтотОбъект,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;

		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ОткрытьФорму(
			ПараметрыФормыУказанияСерий.ИмяФормы,
			ПараметрыФормыУказанияСерий,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	Если Результат <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацииСККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",   Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ИзменитьКассуККМ", Ложь);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюОперацииСККМ", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюПрочихОпераций(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ",       Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",         Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("Документ",       Объект.Ссылка);
	
	ПараметрыОткрытияФормы.Вставить("ПроверитьКоличествоВДокументе",         Истина);
	ПараметрыОткрытияФормы.Вставить("ПродажаПодарочногоСертификата",         ИспользоватьПодарочныеСертификаты);
	ПараметрыОткрытияФормы.Вставить("ВозвратПодарочногоСертификата",         ИспользоватьПодарочныеСертификаты);
	ПараметрыОткрытияФормы.Вставить("Заблокировать",                         ПринудительнаяАвторизация);
	ПараметрыОткрытияФормы.Вставить("АдресКомандПечатиВоВременномХранилище", АдресКомандПечатиВоВременномХранилище);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюПрочиеОперации", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеТовары(Команда)
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.БыстрыеТовары", Новый Структура("ГорячиеКлавиши", ГорячиеКлавиши), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенноеОборудование(Команда)
	
	ОткрытьФормуПодключенноеОборудование(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЧекККМВозврат.ФормаДокументаРМК.Команда.ОткрытьПодбор");
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='чек ККМ'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами ", Истина);
	ПараметрыФормы.Вставить("ВариантАнализаНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	ПараметрыФормы.Вставить("РежимОтбораПоАссортименту", КонтролироватьАссортимент);
	
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Ложь);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПродавца(Команда)
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ВыборПродавца",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьПродавцаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПомещение(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[0]);
	
	Отбор = Новый Структура("Владелец", Объект.Склад);
	ПараметрыОткрытия = Новый Структура(
		"РежимВыбора, Отбор, Номенклатура, Характеристика",
		Истина, Отбор, СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
	
	ОткрытьФорму(
		"Справочник.СкладскиеПомещения.Форма.ФормаВыбораСОстатками",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ИзменитьПомещениеЗавершение", ЭтотОбъект, Новый Структура("СтрокаТЧ", СтрокаТЧ)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьНаличнымиОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СмешаннаяОплатаОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура АкцизныеМарки(Команда)
	
	ОткрытьФормуСканированияАлкогольнойПродукции();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, Ложь);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтотОбъект, Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕГАИС.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НоменклатураЕГАИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция"));
	

КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)
	
	ИзменятьКоличество = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	ПараметрыЗаполнения.Вставить("Серии", Объект.Серии);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	СтруктураДействий.МаркируемаяАлкогольнаяПродукцияВТЧ     = Истина;
	СтруктураДействий.ШтрихкодыВТЧ                           = Истина;
	СтруктураДействий.ЗагрузкаИзТСД                          = ЗагрузкаИзТСД;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтотОбъект);
	
	Если ИспользоватьАкцизныеМарки И ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияАкцизныхМарокПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ДополнительныеПараметры = АкцизныеМаркиКлиентСервер.ПараметрыСканированияАкцизныхМарок(ЭтотОбъект);
		ДополнительныеПараметры.ИдентификаторСтроки = СтруктураДействий.МассивСтрокСАкцизнымиМарками[0];
		
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		
		СчитываниеАкцизнойМарки = Новый ОписаниеОповещения(
			"ОткрытьФормуСчитыванияАкцизнойМарки",
			АкцизныеМаркиЕГАИСКлиент,
			ДополнительныеПараметры);
		
	Иначе
		СчитываниеАкцизнойМарки = Неопределено;
	КонецЕсли;
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		Если ТекущиеДанныеИдентификатор <> Неопределено Тогда
			
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
			ОткрытьПодборСерий(,
				ТекущиеДанные,
				СчитываниеАкцизнойМарки);
			
		КонецЕсли;
		
	Иначе
		
		Если СчитываниеАкцизнойМарки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(СчитываниеАкцизнойМарки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтотОбъект,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМестоОборудования)
	|		Или ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|	И ЭквайринговыеТерминалы.ЭквайринговыйТерминал.БанковскийСчет.Владелец = &Организация
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМестоОборудования", РабочееМесто);
	Иначе
		Запрос.УстановитьПараметр("РабочееМестоОборудования", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Новый Структура;
		ЭквайринговыйТерминал.Вставить("Ссылка",                                 Выборка.Ссылка);
		ЭквайринговыйТерминал.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ЭквайринговыйТерминал.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ЭквайринговыеТерминалы.Добавить(ЭквайринговыйТерминал);
		
	КонецЦикла;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ДисплейПокупателя"));
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудование(ПодключитьОборудованиеПриОткрытии = Истина)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор",           УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ПодключитьОборудованиеПриОткрытии", ПодключитьОборудованиеПриОткрытии);
	ПараметрыОткрытия.Вставить("ПоддерживаемыеТипыПодключаемогоОборудования", ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ПодключенноеОборудование", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания()
	
	ОткрытьФормуПодключенноеОборудование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка:
		                            |""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Данные.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СтрокаТЧ.Подключено = 1;
		
	Иначе
		
		СтрокаТЧ.Подключено = 0;
		
		Если СтрокаТЧ.ТипОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя") Тогда
			ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокВТЧ = Объект.Товары.Количество();
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Объект.Товары[КоличествоСтрокВТЧ - 1];
		Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	ДПТекст1 = НСтр("ru = 'Здравствуйте!'");
	Если ТекущиеДанные <> Неопределено Тогда
		ДПТекст1 = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				ТекущиеДанные.Номенклатура,
				ТекущиеДанные.Характеристика,
				,
				ТекущиеДанные.Серия);
	КонецЕсли;
	
	ДПТекст2 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
		НСтр("ru='Итог:'"), СуммаДокумента);
	
	РозничныеПродажиКлиент.ВывестиТекстНаДисплеиПокупателя(
		ЭтотОбъект,
		Дисплеи,
		ДПТекст1 + Символы.ПС + ДПТекст2);
	
КонецПроцедуры


&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если НЕ ИспользоватьАкцизныеМарки Тогда
		ДанныеШтрихкодов = Новый Массив;
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
	Иначе
		АкцизныеМаркиЕГАИСКлиент.ОбработатьВводШтрихкода(
				ЭтотОбъект,
				ДанныеШтрихкода,
				КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения)
	
	РезультатОбработкиШтрихкода = АкцизныеМаркиЕГАИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ОбработатьВыборНоменклатуры(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	РезультатОбработкиШтрихкода = АкцизныеМаркиЕГАИС.ОбработатьВыборНоменклатуры(ЭтотОбъект, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Функция Подключаемый_ОбработатьВыборСправки2(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	РезультатОбработкиШтрихкода = АкцизныеМаркиЕГАИС.ОбработатьВыборСправки2(ЭтотОбъект, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ИзменятьКоличество = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(ДанныеДляОбработки,КэшированныеЗначения,ЭтотОбъект);
	
	Если ИспользоватьАкцизныеМарки И ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияАкцизныхМарокПослеОбработкиШтрихкодов(ДанныеДляОбработки) Тогда
		
		ДополнительныеПараметры = АкцизныеМаркиКлиентСервер.ПараметрыСканированияАкцизныхМарок(ЭтотОбъект);
		ДополнительныеПараметры.ИдентификаторСтроки = ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками[0];
		
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		
		СчитываниеАкцизнойМарки = Новый ОписаниеОповещения(
			"ОткрытьФормуСчитыванияАкцизнойМарки",
			АкцизныеМаркиЕГАИСКлиент,
			ДополнительныеПараметры);
		
	Иначе
		СчитываниеАкцизнойМарки = Неопределено;
	КонецЕсли;
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(ДанныеДляОбработки) Тогда
		
		ТекущиеДанныеИдентификатор = ДанныеДляОбработки.МассивСтрокССериями[0];
		Если ТекущиеДанныеИдентификатор <> Неопределено Тогда
			
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
			ОткрытьПодборСерий(,
				ТекущиеДанные,
				СчитываниеАкцизнойМарки);
			
		КонецЕсли;
		
	Иначе
		
		Если СчитываниеАкцизнойМарки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(СчитываниеАкцизнойМарки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
	Если ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ДанныеДляОбработки.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработаныНеизвестныеШтрихкоды(ДанныеШтрихкодов, ДополнительныеПараметры) Экспорт
	
	ШтрихкодированиеНоменклатурыЕГАИСКлиентПереопределяемый.ОчиститьКэшированныеШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения);
	
	ОбработатьПрочиеШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПрочиеШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения)
	
	РезультатОбработкиШтрихкода = АкцизныеМаркиЕГАИС.РезультатОбработкиШтрихкода();
	РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода = Истина;
	РезультатОбработкиШтрихкода.ИсходныеДанные = ДанныеШтрихкодов;
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено)
	
	ПараметрыЗаполнения = ПараметрыЗаполненияНоменклатурыЕГАИС();
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПомещение", Новый Структура("Склад", Объект.Склад));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтотОбъект.ИмяФормы, "Товары"));
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействийСДобавленнымиСтроками, КэшированныеЗначения);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействийСИзмененнымиСтроками, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ДобавленныеСтроки[ДобавленныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	ИначеЕсли ИзмененныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ИзмененныеСтроки[ИзмененныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ЗагрузкаИзТСД = Ложь;
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		ИзменятьКоличество = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
	
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
		ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
		ПараметрыЗаполнения.Вставить("Серии", Объект.Серии);
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		Если КонтролироватьАссортимент Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
		
		ДанныеДляОбработки = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов();
		
		ДанныеДляОбработки.Штрихкоды                              = ДанныеШтрихкодов;
		ДанныеДляОбработки.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		ДанныеДляОбработки.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		ДанныеДляОбработки.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
		ДанныеДляОбработки.ИзменятьКоличество                     = ИзменятьКоличество;
		ДанныеДляОбработки.РассчитыватьНаборы                     = Истина;
		ДанныеДляОбработки.МаркируемаяАлкогольнаяПродукцияВТЧ     = Истина;
		ДанныеДляОбработки.ШтрихкодыВТЧ                           = Истина;
		ДанныеДляОбработки.ЗагрузкаИзТСД                          = ЗагрузкаИзТСД;
		
		ОбработатьШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения);
		
	Иначе
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения);
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции


&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, Истина);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.УказатьСерии.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	Элементы.ТоварыСерияДополнительно.Видимость = ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
	РозничныеПродажи.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары, Объект.Серии);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора()
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтотОбъект, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтотОбъект, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтотОбъект, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора());
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтотОбъект, "Товары", ПараметрыДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

#Область СканированиеОтгружаемойПродукции

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ДеревоУпаковок = РезультатПроверки.ДеревоМаркируемойПродукции;
	ДеревоУпаковок.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	ШтрихкодыУпаковок = ИнтеграцияЕГАИС.ШтрихкодыУпаковок(
		ИнтеграцияЕГАИС.ЗначенияШтрихкодовИзДереваУпаковок(ДеревоУпаковок));
	
	Объект.АкцизныеМарки.Очистить();
	
	Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковок(
		ДеревоУпаковок,
		ШтрихкодыУпаковок);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(ЭтотОбъект, Ложь);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	
	Документы.ЧекККМВозврат.ЗаполнитьТоварыИАкцизныеМарки(
		Объект, ДеревоУпаковок, ПараметрыЗаполнения);
	
	ОбработатьСтрокиТЧ(
		ПараметрыЗаполнения.ДобавленныеСтроки,
		ПараметрыЗаполнения.ИзмененныеСтроки);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукции()

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПроверкаНеПоДокументу",                                  Истина);
	ПараметрыОткрытия.Вставить("АдресДанныхПроверяемойАлкогольнойПродукции",             АдресДанныхПроверки());
	ПараметрыОткрытия.Вставить("РежимПодбораСуществующихУпаковок",                       Истина);
	ПараметрыОткрытия.Вставить("ОрганизацияЕГАИС",                                       Объект.ОрганизацияЕГАИС);
	ПараметрыОткрытия.Вставить("КонтролироватьСканируемуюПродукцииПоДокументуОснованию", Ложь);
	ПараметрыОткрытия.Вставить("НачальныйСтатусПроверки",                                ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии"));
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		ПараметрыОткрытия.Вставить("РежимПросмотра", Истина);
		ПараметрыОткрытия.Вставить("ПроверятьНеобходимостьПеремаркировки", Ложь);
	Иначе
		ПараметрыОткрытия.Вставить("ПроверятьНеобходимостьПеремаркировки", Истина);
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииПослеЗакрытия", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция АдресДанныхПроверки()
	
	ДанныеХранилища = Новый Структура("ДеревоУпаковок, ТаблицаАлкогольнойПродукцииКОпределениюСправок2", Неопределено, Новый ТаблицаЗначений);
	ДанныеХранилища.ДеревоУпаковок = АкцизныеМаркиЕГАИС.ШтрихкодыУпаковок(Объект, Объект.ОрганизацияЕГАИС, "НоменклатураЕГАИС").ДеревоУпаковок;
	ДанныеХранилища.ТаблицаАлкогольнойПродукцииКОпределениюСправок2 = Документы.ЧекККМВозврат.ТаблицаАлкогольнойПродукцииКОпределениюСправок2(Объект);
	
	Возврат ПоместитьВоВременноеХранилище(
		ДанныеХранилища,
		УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УдалитьАкцизныеМарки(Данные)
	
	АкцизныеМаркиЕГАИС.УдалитьАкцизныеМаркиЧека(
		ЭтотОбъект,
		Данные.ИдентификаторыСтрок);
	
	ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПечатьЧека

&НаСервере
Функция ДанныеДляЕГАИС()
	
	Возврат Документы.ЧекККМВозврат.ДанныеДляЕГАИС(Объект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыОперацииФискализацииЧека()
	
	ПараметрыОперацииФискализацииЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	Данные = ДанныеДляЕГАИС();
	
	Для Каждого СтрокаТЧ Из Данные Цикл
		
		Если Объект.ЦенаВключаетНДС Тогда
			Сумма = СтрокаТЧ.Сумма;
		Иначе
			Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		// Данные по алкогольной продукции
		ПараметрыАлкогольнойПродукции = Новый Массив;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "АлкогольнаяПродукция")
			И СтрокаТЧ.АлкогольнаяПродукция Тогда
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.МаркируемаяАлкогольнаяПродукция); // Признак наличия штрихкода PDF417
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАкцизнойМарки);                // Штрихкод марки в формате PDF417
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.Объем);                           // Объем номенклатуры в литрах
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.Крепость);                        // Процент содержания алкоголя
			ПараметрыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодВидаАлкогольнойПродукции);     // Код вида алкогольной продукции
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
		СтрокаПозицииЧека.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(СтрокаТЧ.ТипНоменклатуры, СтрокаТЧ.ПодакцизныйТовар);
		СтрокаПозицииЧека.Наименование          = СтрокаТЧ.Наименование;
		СтрокаПозицииЧека.Количество            = СтрокаТЧ.КоличествоУпаковок;
		СтрокаПозицииЧека.Цена                  = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма                 = Сумма;
		СтрокаПозицииЧека.НомерСекции           = 1;
		СтрокаПозицииЧека.СтавкаНДС             = РозничныеПродажиКлиентСервер.СтавкаНДСФискальнойОперации(СтрокаТЧ.СтавкаНДС);
		СтрокаПозицииЧека.Штрихкод              = СтрокаТЧ.Штрихкод;
		
		Если СтрокаПозицииЧека.Количество <> 0 Тогда
			СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2);
		КонецЕсли;
		
		// Дополнительные параметры
		СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
		
		ПараметрыОперацииФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	ПараметрыОперацииФискализацииЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	РозничныеПродажиКлиентСервер.ЗаполнитьДанныеФискальнойОперации(ПараметрыОперацииФискализацииЧека, ДанныеФискальнойОперации);
	ПараметрыОперацииФискализацииЧека.ДокументОснование = Объект.Ссылка;
	
	ПараметрыОперацииФискализацииЧека.Кассир                 = РеквизитыКассира.Наименование;
	ПараметрыОперацииФискализацииЧека.КассирИНН              = РеквизитыКассира.ИНН;
	ПараметрыОперацииФискализацииЧека.СистемаНалогообложения = СтруктураСостояниеКассовойСмены.СистемаНалогообложения;
	ПараметрыОперацииФискализацииЧека.АдресРасчетов          = СтруктураСостояниеКассовойСмены.АдресСклада;
	ПараметрыОперацииФискализацииЧека.МестоРасчетов          = "";
	
	ПараметрыОперацииФискализацииЧека.ОрганизацияНазвание = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ОфициальноеНаименование;
	ПараметрыОперацииФискализацииЧека.ОрганизацияИНН      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.ИНН;
	ПараметрыОперацииФискализацииЧека.ОрганизацияКПП      = СтруктураСостояниеКассовойСмены.СведенияООрганизации.КПП;
	ПараметрыОперацииФискализацииЧека.НомерКассы          = "00001";
	ПараметрыОперацииФискализацииЧека.НомерЧека           = 1;
	ПараметрыОперацииФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыОперацииФискализацииЧека.АдресМагазина          = СтруктураСостояниеКассовойСмены.АдресСклада;
	ПараметрыОперацииФискализацииЧека.НаименованиеМагазина   = Строка(СтруктураСостояниеКассовойСмены.Склад);
	ПараметрыОперацииФискализацииЧека.СерийныйНомер          = ПараметрыКассыККМ.СерийныйНомер;
	
	// Подготовка таблицы оплат
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Наличные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.Наличные);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Безналичные
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПлатежныеКартыОтменено);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	// Сертификатом
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Предоплата"));
	СтрокаОплаты.Вставить("Сумма",     ИнформацияОбОплате.ПодарочныеСертификаты);
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧек()
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЕстьОшибки Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека = ПараметрыОперацииФискализацииЧека();
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект, ПараметрыОперацииФискализацииЧека),
		НСтр("ru = 'Перед выполнением операции пробития чека не удалось провести документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ПараметрыОперацииФискализацииЧека) Экспорт
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
	
	Результат = МенеджерОборудованияКлиентПереопределяемый.ОборудованиеПодключено(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	Если Результат Или ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			
			ЕстьАлкогольнаяПродукция = Ложь;
			Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "АлкогольнаяПродукция")
						И СтрокаТЧ.АлкогольнаяПродукция И СтрокаТЧ.МаркируемаяАлкогольнаяПродукция Тогда
						ЕстьАлкогольнаяПродукция = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения",                ОписаниеОповещения);
			ДополнительныеПараметры.Вставить("ЕстьАлкогольнаяПродукция",          ЕстьАлкогольнаяПродукция);
			ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека", ПараметрыОперацииФискализацииЧека);
			
			Оповещение            = Новый ОписаниеОповещения("ПечатьЧека_Завершение",            ЭтотОбъект, ДополнительныеПараметры);
			ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметры);
			ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, ДополнительныеПараметры);
		
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				Оповещение,
				УникальныйИдентификатор,
				ПараметрыОперацииФискализацииЧека,
				ПараметрыКассыККМ.ИдентификаторУстройства,,
				ПослеОткрытияЧека,
				ПослеОшибкиПечатиЧека);
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("Результат", Истина);
			ПечатьЧека_Завершение(
				РезультатВыполнения,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Фискальное устройство не подключено. Чек не напечатан.'"));
			
		ВыполнитьОбработкуОповещения(
			ОписаниеОповещения,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", ПараметрыКассыККМ.СерийныйНомер);
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("СерийныйНомер", ПараметрыКассыККМ.СерийныйНомер);
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			
			ТекстXML = ?(РезультатВыполнения.ВыходныеПараметры.Количество() > 7, РезультатВыполнения.ВыходныеПараметры[7], Неопределено);
			
			РеквизитыФискальнойОперацииКассовогоУзла = ПодключаемоеОборудованиеУТКлиент.СтруктураРеквизитыФискальнойОперацииКассовогоУзла();
			РеквизитыФискальнойОперацииКассовогоУзла.Данные            = ТекстXML;
			РеквизитыФискальнойОперацииКассовогоУзла.Дата              = ДополнительныеПараметры.ПараметрыОперацииФискализацииЧека.ДатаВремя;
			РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование = Объект.Ссылка;
			РеквизитыФискальнойОперацииКассовогоУзла.Организация       = Объект.Организация;
			РеквизитыФискальнойОперацииКассовогоУзла.ТорговыйОбъект    = Объект.КассаККМ;
			РеквизитыФискальнойОперацииКассовогоУзла.Устройство        = ПараметрыКассыККМ.ИдентификаторУстройства;
			
			РеквизитыФискальнойОперацииКассовогоУзла.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацииКассовогоУзла.ФискальнаяОперация");
			РеквизитыФискальнойОперацииКассовогоУзла.ТипРасчета  = ДополнительныеПараметры.ПараметрыОперацииФискализацииЧека.ТипРасчета;
			
			Если ПараметрыКассыККМ.ДоступнаПередачаДанных Тогда
				РеквизитыФискальнойОперацииКассовогоУзла.ВариантОтправкиЭлектронногоЧека  = ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека;
				РеквизитыФискальнойОперацииКассовогоУзла.КонтактныеДанныеЭлектронногоЧека = ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека;
			КонецЕсли;
			
			РеквизитыФискальнойОперацииКассовогоУзла.НомерСмены   = РезультатВыполнения.ВыходныеПараметры[0];
			РеквизитыФискальнойОперацииКассовогоУзла.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
			
			ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
			РеквизитыФискальнойОперацииКассовогоУзла.Сумма                     = ИнформацияОбОплате.СуммаДокумента;
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаОплатыНаличные       = ИнформацияОбОплате.Наличные;
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаОплатыПлатежнаяКарта = ИнформацияОбОплате.ПлатежныеКарты;
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаКредит               = 0;
			РеквизитыФискальнойОперацииКассовогоУзла.СуммаПредоплаты           = ИнформацияОбОплате.ПодарочныеСертификаты;
			
		КонецЕсли;
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("Дата",   Объект.Дата);
		ДанныеДляЖурналаРегистрации.Вставить("Статус", Объект.Статус);
		Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", РеквизитыФискальнойОперацииКассовогоУзла.НомерЧекаККМ);
		КонецЕсли;
		
		ВыполненаОперацияНаУстройстве = Истина;
		Модифицированность = Истина;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		ИзмененныеДанныеЗаписаны = ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла);
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
			ДополнительныеПараметрыПовторЗаписи.РеквизитыФискальнойОперацииКассовогоУзла = РеквизитыФискальнойОперацииКассовогоУзла;
			ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения             = ДополнительныеПараметры.ОписаниеОповещения;
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'");
			ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
			ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
			ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
			ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьНаСервере";
			ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
				Возврат;
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи),
				ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Чек не напечатан на фискальном устройстве.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

#Область ФискальнаяОперация

&НаКлиенте
Функция ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	Результат = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла);
	
	Если Результат Тогда
		Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЖурналФискальныхОпераций";
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("ДокументОснование", РеквизитыФискальнойОперацииКассовогоУзла.ДокументОснование);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМВозврат";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Если РеквизитыФискальнойОперацииКассовогоУзла <> Неопределено Тогда
			ПодключаемоеОборудованиеУТСервер.ЗаписатьВЖурналФискальныхОперацийУпрощенно(
				РеквизитыФискальнойОперацииКассовогоУзла);
		КонецЕсли;
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ОтложитьНаСервере" Тогда
			РезультатОперации = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьФискальнуюОперациюНаСервере" Тогда
			РезультатОперации = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ДополнительныеПараметры.РеквизитыФискальнойОперацииКассовогоУзла);
		КонецЕсли;
		
		Если РезультатОперации Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ЧекККМВозврат"));
		Значение.УстановитьСсылкуНового(Документы.ЧекККМВозврат.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМВозврат";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	Товары = Объект.Товары.Выгрузить(,"ИдентификаторСтроки, НоменклатураНабора, ХарактеристикаНабора, НоменклатураЕГАИС, Номенклатура, Характеристика, Серия, СтатусУказанияСерий, ТипНоменклатуры, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Количество");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	АкцизныеМарки = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.АкцизныеМарки);
	
	УдаляемыеСтроки              = Новый Массив;
	УдаляемыеСтрокиАкцизныеМарки = Новый Массив;
	
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			НайденныеСтрокиАкцизныеМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
			Для Каждого СтрокаТЧАкцизныеМарки Из НайденныеСтрокиАкцизныеМарки Цикл
				Если УдаляемыеСтрокиАкцизныеМарки.Найти(СтрокаТЧАкцизныеМарки) = Неопределено Тогда
					УдаляемыеСтрокиАкцизныеМарки.Добавить(СтрокаТЧАкцизныеМарки);
				КонецЕсли;
			КонецЦикла;
			
			НайденныеСтрокиАкцизныеМарки = АкцизныеМарки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
			Для Каждого СтрокаТЧАкцизныеМарки Из НайденныеСтрокиАкцизныеМарки Цикл
				ЗаполнитьЗначенияСвойств(Объект.АкцизныеМарки.Добавить(), СтрокаТЧАкцизныеМарки);
			КонецЦикла;
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				
				Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТЧ);
				КонецЕсли;
				
				НайденныеСтрокиАкцизныеМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
				Для Каждого СтрокаТЧАкцизныеМарки Из НайденныеСтрокиАкцизныеМарки Цикл
					Если УдаляемыеСтрокиАкцизныеМарки.Найти(СтрокаТЧАкцизныеМарки) = Неопределено Тогда
						УдаляемыеСтрокиАкцизныеМарки.Добавить(СтрокаТЧАкцизныеМарки);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
				СтруктураДействий.Вставить("ПересчитатьСумму");
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			Если КонтролироватьАссортимент Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
			КонецЕсли;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтрокиАкцизныеМарки Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваЕдиниц(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются,
			                |ЗаполнитьПризнакТипНоменклатуры,
			                |ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция,
			                |ЗаполнитьПризнакАлкогольнаяПродукция",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"),
			Новый Структура("Номенклатура", "АлкогольнаяПродукция"),));
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	ИнтеграцияЕГАИСУТ.АкцизныеМаркиЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма)
	
	ОплатаПлатежнымиКартамиОтменено = 0;
	Для Каждого СтрокаТЧ Из Форма.Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаТЧ.ОплатаОтменена Тогда
			ОплатаПлатежнымиКартамиОтменено = ОплатаПлатежнымиКартамиОтменено + СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Форма.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	
	Если Форма.Объект.ЦенаВключаетНДС Тогда
		СуммаБезСкидки = Форма.СуммаДокумента;
	Иначе
		СуммаБезСкидки = Форма.СуммаДокумента - Форма.Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",               Форма.Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные",               Форма.Объект.ВыданоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты",         Форма.Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
	ИнформацияОбОплате.Вставить("ПлатежныеКартыОтменено", ОплатаПлатежнымиКартамиОтменено);
	ИнформацияОбОплате.Вставить("ПодарочныеСертификаты",  0);
	ИнформацияОбОплате.Вставить("БонусныеБаллы",          0);
	
	ИнформацияОбОплате.Вставить("СуммаДокумента",        Форма.СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаБезСкидки);
	ИнформацияОбОплате.Вставить("СуммаСкидки",           0);
	ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + ОплатаПлатежнымиКартамиОтменено);
	
	ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(Форма));
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

#Область ОтменаОплатыПлатежнымиКартами

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());
	РезультатВыбора = Неопределено;
	
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeRefund");
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДополнительныеПараметры.Форма.ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеВФормуОплаты") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОтменитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Функция ОтменитьОплатуПлатежнымиКартами(ОповещениеОЗавершении)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаОплаты.ОплатаОтменена Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",       ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeRefund");
	
	РозничныеПродажиКлиент.ОтменитьОплатуПлатежнымиКартамиПоследовательно(
		Неопределено,
		ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",  ДополнительныеПараметры.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", ДополнительныеПараметры.СсылочныйНомер);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",    ДополнительныеПараметры.НомерЧека);
	
	СтрокаОплаты = Объект.ОплатаПлатежнымиКартами.Получить(Объект.ОплатаПлатежнымиКартами.Индекс(ДополнительныеПараметры.СтрокаОплаты));
	СтрокаОплаты.ОплатаОтменена = Истина;
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения = ДополнительныеПараметры.ОповещениеПриЗавершении;
		ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'");
		ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
		ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
		ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
		ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьНаСервере";
		ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ОтменитьОплату(Результат, ДополнительныеПараметры) Экспорт
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ОтменитьОплатуСторно(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаОплаты.ОплатаОтменена Тогда
			СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из СтрокиОплатыПлатежнымиКартами Цикл
		Объект.ОплатаПлатежнымиКартами.Удалить(Объект.ОплатаПлатежнымиКартами.Индекс(СтрокаТЧ));
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Элементы.ТоварыДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыСкопировать.Доступность = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыУдалить.Доступность     = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.КонтекстноеМенюОбластьКорзиныТоварыДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.КонтекстноеМенюОбластьКорзиныТоварыСкопировать.Доступность = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ТоварыКоличествоУпаковок.ТолькоПросмотр = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыНоменклатура.ТолькоПросмотр       = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыНоменклатураЕГАИС.ТолькоПросмотр  = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыШтрихкод.ТолькоПросмотр           = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр     = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыПродавец.ТолькоПросмотр           = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыПомещение.ТолькоПросмотр          = Не ПраваДоступа.КорректировкаСтрок;
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеИнформационнойПанели(Форма, ОтобразитьСдачу = Ложь)
	
	ИнформацияОбОплате = ИнформацияОбОплате(Форма);
	
	Форма.ИнформационнаяПанельСуммаКВозврату                  = ИнформацияОбОплате.СуммаКОплате;
	Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ПлатежныеКарты;
	Форма.ИнформационнаяПанельСуммаКВозвратуПлатежнымиКартами = ИнформацияОбОплате.ПлатежныеКарты;
	
	КоличествоСтрокВТЧ = Форма.Объект.Товары.Количество();
	
	ТекущаяСтрока = Форма.Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Форма.Объект.Товары[КоличествоСтрокВТЧ - 1];
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	НаименованиеТовара = "";
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			НаименованиеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				ТекущиеДанные.Номенклатура,
				ТекущиеДанные.Характеристика,
				,
				ТекущиеДанные.Серия);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураЕГАИС) Тогда
			НаименованиеТовара = Строка(ТекущиеДанные.НоменклатураЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	ОбязательныеРеквизиты = Новый Массив;
	ДанныеСтроки = Новый Структура;
	ПродавецТолькоКассир = Форма.КассирМожетБытьПродавцом И Не Форма.МенеджерТорговогоЗалаМожетБытьПродавцом;
	Если Не ПродавецТолькоКассир И ТекущиеДанные <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("Продавец");
		ДанныеСтроки.Вставить("Продавец", ТекущиеДанные.Продавец);
	КонецЕсли;
	Если Форма.ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения И ТекущиеДанные <> Неопределено Тогда
		ОбязательныеРеквизиты.Добавить("Помещение");
		ДанныеСтроки.Вставить("Помещение", ТекущиеДанные.Помещение);
	КонецЕсли;
	Если Форма.ИспользоватьКартыЛояльности И ТекущиеДанные <> Неопределено Тогда
		ДанныеСтроки.Вставить("Карта", Форма.Объект.КартаЛояльности);
	КонецЕсли;
	
	СуммовыеПараметры = Новый Структура;
	СуммовыеПараметры.Вставить("Количество",                0);
	СуммовыеПараметры.Вставить("Цена",                      0);
	СуммовыеПараметры.Вставить("СуммаРучнойСкидки",         0);
	СуммовыеПараметры.Вставить("СуммаАвтоматическойСкидки", 0);
	СуммовыеПараметры.Вставить("Сумма",                     0);
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СуммовыеПараметры, ТекущиеДанные);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("НаименованиеТовара",    НаименованиеТовара);
	Данные.Вставить("ДанныеСтроки",          ДанныеСтроки);
	Данные.Вставить("СуммовыеПараметры",     СуммовыеПараметры);
	Данные.Вставить("ОбязательныеРеквизиты", ОбязательныеРеквизиты);
	
	Если ОтобразитьСдачу Тогда
		
		ТекстСдача = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Получить сдачу: %1'"),
				Формат(ИнформацияОбОплате.ИтогоОплачено - ИнформацияОбОплате.СуммаКОплате, "ЧДЦ=2; ЧН=0.00")));
		
		Данные.Вставить("ОтобразитьСдачу", Истина);
		Данные.Вставить("ТекстСдача",      ТекстСдача);
		
	Иначе
		Данные.Вставить("ОтобразитьСдачу", Ложь);
	КонецЕсли;
	
	РозничныеПродажиКлиентСервер.ОбновитьДанныеИнформационнойПанели(Форма, Данные);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьСсылкиНаОборудование();
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Объект.Организация,
		Объект.Склад,
		ТекущаяДатаСеанса());
	ИспользоватьАкцизныеМарки = ИспользуетсяРегистрацияРозничныхПродажВЕГАИС;
	
	Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		Элементы.Товары.ТолькоПросмотр        = Истина;
		Элементы.ПоискПоШтрихкоду.Доступность = Ложь;
		Элементы.ОткрытьПодбор.Доступность    = Ложь;
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.СуммаКВозврату.Ширина                  = 22;
		Элементы.СуммаКВозвратуПлатежнымиКартами.Ширина = 22;
		Элементы.СуммаКВозвратуНаличными.Ширина         = 22;
	КонецЕсли;
	
	РозничныеПродажи.ПодписатьГорячиеКлавишиНаКнопках(ЭтотОбъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши, Неопределено)               КАК ГорячиеКлавиши,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.БыстрыеТовары, Неопределено) КАК БыстрыеТовары,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.КомандыФормы, Неопределено)  КАК КомандыФормы,
	|	НастройкиРМК.КассирМожетБытьПродавцом                             КАК КассирМожетБытьПродавцом,
	|	НастройкиРМК.МенеджерТорговогоЗалаМожетБытьПродавцом              КАК МенеджерТорговогоЗалаМожетБытьПродавцом,
	|	НастройкиРМК.ИспользоватьАвторизацию                              КАК ИспользоватьАвторизацию
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто
	|	И НастройкиРМК.Ссылка В (ВЫБРАТЬ Различные Т.Ссылка Из Справочник.НастройкиРМК.КассыККМ КАК Т Где Т.КассаККМ = &КассаККМ)
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ГорячиеКлавиши            = Выборка.ГорячиеКлавиши;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Выборка.МенеджерТорговогоЗалаМожетБытьПродавцом;
		КассирМожетБытьПродавцом  = Выборка.КассирМожетБытьПродавцом;
		ПринудительнаяАвторизация = Выборка.ИспользоватьАвторизацию;
		
		Если ЗначениеЗаполнено(ГорячиеКлавиши) Тогда
			РозничныеПродажи.НастроитьБыстрыеТоварыИГорячиеКлавиши(ЭтотОбъект, Выборка);
		КонецЕсли;
		
	Иначе
		
		ГорячиеКлавиши                          = Неопределено;
		ПринудительнаяАвторизация               = Ложь;
		МенеджерТорговогоЗалаМожетБытьПродавцом = Ложь;
		КассирМожетБытьПродавцом                = Истина;
		
	КонецЕсли;
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	
	ПродавецТолькоКассир = КассирМожетБытьПродавцом И Не МенеджерТорговогоЗалаМожетБытьПродавцом;
	Элементы.ТоварыПродавец.Видимость = Не ПродавецТолькоКассир;
	
	Элементы.БыстрыеТовары.Видимость     = ЭтотОбъект.БыстрыеТовары.Количество() > 0;
	
	Элементы.ИзменитьПродавца.Видимость  = Не ПродавецТолькоКассир;
	Элементы.ИзменитьПомещение.Видимость = ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения;
	Элементы.ТоварыПомещение.Видимость   = ПараметрыКассыККМ.ИспользоватьСкладскиеПомещения;
	Элементы.СоставНабора.Видимость      = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
	Элементы.УказатьСерии.Видимость      = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.АкцизныеМарки.Видимость             = ИспользоватьАкцизныеМарки;
	Элементы.ТоварыИндексАкцизнойМарки.Видимость = ИспользоватьАкцизныеМарки;
	// Установка видимости команды "Получить вес"
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	
	ДоступныеВидыОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
	Элементы.ОплатитьНаличными.Видимость = ДоступныеВидыОплаты.Наличные    И Не Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	Элементы.ОплатитьКартой.Видимость    = ДоступныеВидыОплаты.ПлатежныеКарты И Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	Элементы.СмешаннаяОплата.Видимость   = ДоступныеВидыОплаты.ПлатежныеКарты И Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	
	ЭлементыНаПерегруппировку = Новый Массив;
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.БыстрыеТовары);
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.ИзменитьПродавца);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ИзменитьПомещение);
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.ПолучитьВес);
	ЭлементыНаПерегруппировку.Добавить(Элементы.СоставНабора);
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.УказатьСерии);
	ЭлементыНаПерегруппировку.Добавить(Элементы.АкцизныеМарки);
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьНаличными);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьКартой);
	ЭлементыНаПерегруппировку.Добавить(Элементы.СмешаннаяОплата);
	
	РозничныеПродажи.ПерегруппироватьКнопкиФормы(ЭтотОбъект, ЭлементыНаПерегруппировку);
	
	РозничныеПродажи.НастроитьКомандыПечати(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь);
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Возврат (Кассир: %Кассир%)'");
	Заголовок = СтрЗаменить(Заголовок, "%Кассир%", Объект.Кассир);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧека()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий); 
		
		УстановитьВидимостьЭлементовСерий();
		
	КонецЕсли;
	
	Объект.ОрганизацияЕГАИС = РозничныеПродажи.ПолучитьОрганизациюЕГАИС(Объект.Склад, Объект.Организация);
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	РозничныеПродажи.ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	РеквизитыФискальнойОперацииКассовогоУзла = Неопределено;
	
	ОбновитьЗаголовокФормы();
	
	НастроитьРМК();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыОплаты(Форма)
	
	ОплатаПлатежнымиКартами = Ложь;
	Если Форма.ИспользоватьОплатуПлатежнымиКартами
		И Форма.Объект.ОплатаПлатежнымиКартами.Количество() > 0
		И Форма.ЭквайринговыеТерминалы.Количество() > 0 Тогда
		
		ОплатаПлатежнымиКартами = Истина;
		
	КонецЕсли;
	
	ДоступныеВидыОплаты = Новый Структура;
	ДоступныеВидыОплаты.Вставить("Наличные",              Истина);
	ДоступныеВидыОплаты.Вставить("ПлатежныеКарты",        ОплатаПлатежнымиКартами);
	ДоступныеВидыОплаты.Вставить("БонусныеБаллы",         Ложь);
	ДоступныеВидыОплаты.Вставить("ПодарочныеСертификаты", Ложь);
	
	Возврат ДоступныеВидыОплаты;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметры.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметры.ТекстСообщения             = ТекстСообщения;
		ДополнительныеПараметры.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметры.ИмяПроцедуры               = "ЗаписатьНаСервере";
		ДополнительныеПараметры.РезультатОперации          = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыНаличными", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыНаличными(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплатыНаличными",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартойОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ДобавитьОплатуКартой", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплатаОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСмешаннойОплаты(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбОплате = Новый Массив;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаСмешаннойОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОплаты(РезультатОплаты, ДополнительныеПараметры) Экспорт
	
	Если РезультатОплаты <> Неопределено Тогда
		
		Объект.ВыданоНаличными = РезультатОплаты.ПолученоНаличными;
		Объект.Партнер         = РезультатОплаты.ДанныеЭлектронногоЧека.Партнер;
		
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека  = РезультатОплаты.ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = РезультатОплаты.ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека;
		
	КонецЕсли;
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОплаты(ДополнительныеПараметры)
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Команда оплаты картой вызвана из формы РМК
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			
			ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
			
		Иначе
			
			Если ИнформацияОбОплате.ИтогоОплачено >= ИнформацияОбОплате.СуммаКОплате
				И ЗначениеЗаполнено(ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека) Тогда
				
				ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
				
				ПробитьЧек();
				
			ИначеЕсли ИнформацияОбОплате.ИтогоОплачено > 0 Тогда
				
				ВыполнитьДействиеПослеЗаписи(
					Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
					НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
				
				ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
				
			Иначе
				
				ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ПараметрыЗаполнения = ПараметрыЗаполненияНоменклатурыЕГАИС();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		СписокСвойств = "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Серия";
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Новый Структура("Номенклатура", "МаркируемаяАлкогольнаяПродукция"));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполнения);
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти", ЭтотОбъект.ИмяФормы, "Товары"));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуПечати(ИмяКоманды, ДополнительныеПараметры) Экспорт

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команды[ИмяКоманды], Объект);

КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяПанельПрочиеПараметрыЗначениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПродавецЗначениеНеЗаполнено"
		Или НавигационнаяСсылкаФорматированнойСтроки = "Продавец" Тогда
		ОткрытьФорму(
			"Справочник.Пользователи.ФормаВыбора",
			Новый Структура("РежимВыбора", Истина),,,,,
			Новый ОписаниеОповещения("ИзменитьПродавцаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПомещениеЗначениеНеЗаполнено"
		Или НавигационнаяСсылкаФорматированнойСтроки = "Помещение" Тогда
		ИзменитьПомещение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при клике на гиперссылку в информационной панели и по команде "ИзменитьПродавца"
&НаКлиенте
Процедура ИзменитьПродавцаЗавершение(Продавец, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Продавец) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаТЧ.Продавец = Продавец;
		
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПомещениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
	
	Помещение = Результат;
	Если Не ЗначениеЗаполнено(Помещение) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.Помещение = Помещение;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧек(Ссылка)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
		
		Отказ = Ложь;
		ПередЗакрытиемЧека(
			Отказ,
			Новый ОписаниеОповещения("ЗагрузитьНовыйЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НовыйЧекНаСервере(Ссылка);
		ЗагрузитьНовыйЧекФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекФрагмент()
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйЧекНаСервере(ДополнительныеПараметры.Ссылка);
	
	ЗагрузитьНовыйЧекФрагмент();
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении)
	
	Модифицированность = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПопытка = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПопытка.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметрыПопытка.ТекстСообщения             = НСтр("ru = 'Не удалось записать документ.'");
		ДополнительныеПараметрыПопытка.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметрыПопытка.ИмяПроцедуры               = "ОтложитьНаСервере";
		ДополнительныеПараметрыПопытка.РезультатОперации          = Результат;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопытка);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопытка),
			ДополнительныеПараметрыПопытка.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЧек(Ссылка)
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЧекОбъект = Ссылка.ПолучитьОбъект();
	
	Если ЧекОбъект = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЧекОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Пробитый чек не может быть удален'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЧекОбъект.Удалить();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОписаниеОповещения = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	Если Не ТолькоПросмотр И (Модифицированность ИЛИ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		Если ПраваДоступа.Отложить Тогда
			Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		Иначе
			Если Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			КонецЕсли;
			Если Не Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Выберите действие перед закрытием.'"),
			Кнопки);
		
	Иначе
		
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
	
	Если Результат Тогда
		
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЧекаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек без резервирования
		ОтложитьНаКлиенте(Новый ОписаниеОповещения("ВопросПередЗакрытиемОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = УдалитьЧек(Объект.Ссылка);
		
		Если УдалениеВыполнено Тогда
			
			Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
			
			Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
				ПринудительноеЗавершениеРаботы = Истина;
				Закрыть(Неопределено);
			Иначе
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере(Ссылка = Неопределено)
	
	НовыйЧек = Ссылка.ПолучитьОбъект();
	
	НовыйЧек.Дата = ТекущаяДатаСеанса();
	РазблокироватьДанныеФормыДляРедактирования();
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
	
	ПриСозданииЧека();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияНоменклатурыЕГАИС()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	ПараметрыЗаполнения.Вставить("ИмяКолонки", "НоменклатураЕГАИС");
	ПараметрыЗаполнения.Вставить("Серии", Объект.Серии);
	
	Возврат ПараметрыЗаполнения
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатураЕГАИС.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
