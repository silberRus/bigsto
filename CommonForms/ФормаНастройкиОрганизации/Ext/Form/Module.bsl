&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	// ИнтеграцияГИСМ
	ВнешниеРодительскиеКонстанты.Вставить("ВестиУчетМаркировкиПродукцииВГИСМ");
	// Конец ИнтеграцияГИСМ
	
	РежимРаботы = Новый Структура;

	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("БазоваяВерсия", 				 ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	Элементы.ГруппаОткрытьДополнительныеОтчетыИОбработки.Видимость = Не ОбщегоНазначения.РазделениеВключено()  
		// При работе в модели сервиса, если включено администратором сервиса.
		Или НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
		
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Элементы.ГруппаПроверкаКонтрагентов.Видимость = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Если Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		ПроверкаКонтрагентов.УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(
			Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента);
		ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов();
	
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ОпределитьНастройкиРегламентногоЗаданияПолучениеУведомленийОтЯндексКассы();
	ДобавитьКомандыСозданияШаблона();
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	ОбщегоНазначенияУТ.ПереключениеИнтерфейсаПриСозданииНаСервере(ЭтаФорма);
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Элементы.ГруппаФункциональностьУТ.Видимость = Ложь;
	Иначе
		Элементы.ГруппаФункциональностьУТ.Видимость = Истина;
		Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
			ФункциональностьПрограммы = "БазоваяВерсия";
		Иначе
			ФункциональностьПрограммы = "ПолнаяФункциональность";
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Элементы.ГруппаИнтерфейсИФункциональность.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		Элементы.ГруппаУправлениеПолнотекстовымПоискомИИзвлечениемТекстов.Видимость =
			Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Иначе
		Элементы.ГруппаУправлениеПолнотекстовымПоискомИИзвлечениемТекстов.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ТекущийОбъект.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
		ВариантПоиска = "Стандартный"
	Иначе
		ВариантПоиска = "Расширенный"
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЕдиницыИзмерения(Команда)
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец",ПредопределенноеЗначение("Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения"));
	ПараметрыФормыСправочника = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаСписка",
		ПараметрыФормыСправочника,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПрефиксовВнутреннихШтрихкодовEAN13(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПрефиксовВнутреннихШтрихкодовEAN13");	
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчета(Команда)
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Валюты(Команда)
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Кассы(Команда)
	
	ОткрытьФорму("Справочник.Кассы.ФормаСписка",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУзлыОбменаССайтами(Команда)
	ОткрытьФорму("ПланОбмена.ОбменССайтом.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВидовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыНоменклатуры(Команда)
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидНоменклатурыТовар(Команда)
	
	Ключ = ПолучитьПредустановленныеВидыНоменклатуры(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"),НСтр("ru = 'Товар'"));
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Ключ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидНоменклатурыУслуга(Команда)
	
	Ключ = ПолучитьПредустановленныеВидыНоменклатуры(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"),НСтр("ru = 'Услуга'"));
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Ключ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодыТНВЭД(Команда)
	
	ОткрытьФорму("Справочник.КлассификаторТНВЭД.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ОткрытьВидыМехаГИСМ(Команда)
	
	ОткрытьФорму("Справочник.ВидыМехаГИСМ.ФормаСписка");

КонецПроцедуры
// Конец ИнтеграцияГИСМ

// СтандартныеПодсистемы.ЭлектроннаяПодпись
&НаКлиенте
Процедура НастройкиЭлектроннойПодписиИШифрования(Команда)
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования");
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись

&НаКлиенте
Процедура ОткрытьШаблоныЭтикетокИЦенников(Команда)
	ОткрытьФорму("Справочник.ШаблоныЭтикетокИЦенников.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьБазовыеЕдиницыИзмеренияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВестиОтдельнуюНумерациюСчетовФактурНаАвансыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСкидокВПечатныхФормахДокументовПродажи(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСкидокВПечатныхФормахДокументовПродажиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяКолонкаПечатныхФормДокументовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяКолонкаПечатныхФормДокументовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиВидовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНаКоторуюЗарегистрированаПрограммаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхРеквизитов");
	
	ОткрытьФорму(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка",
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСведения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхСведений");
	
	ОткрытьФорму(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка",
		ПараметрыФормы);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СправочникДополнительныеОтчетыИОбработки(Команда)
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеОтчетыИОбработкиПриИзменении(Элемент)
	
	СтароеЗначение = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	
	Попытка
		
		ЗапросыНаИспользованиеВнешнихРесурсов = ЗапросыНаИспользованиеВнешнихРесурсовДополнительныхОтчетовИОбработок(СтароеЗначение);
		
		Обработчик = Новый ОписаниеОповещения("ИспользоватьДополнительныеОтчетыИОбработкиПриИзмененииЗавершение", ЭтотОбъект, Элемент);
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(ЗапросыНаИспользованиеВнешнихРесурсов, ЭтотОбъект, Обработчик);
		
	Исключение
		
		НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки = СтароеЗначение;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросыНаИспользованиеВнешнихРесурсовДополнительныхОтчетовИОбработок(Включение)
	
	Возврат ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.ЗапросыРазрешенийДополнительныхОбработок(Включение);
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьДополнительныеОтчетыИОбработкиПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки = Не НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстаткиТоваровОрганизацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеКлассификаторовНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоискПриИзменении(Элемент)
	
	Если ИспользоватьПолнотекстовыйПоиск = 0 Тогда // Предыдущее значение - 2 (3й режим).
		ИспользоватьПолнотекстовыйПоиск = 1;
	ИначеЕсли ИспользоватьПолнотекстовыйПоиск = 2 Тогда // Предыдущее значение - 1 (Истина).
		ИспользоватьПолнотекстовыйПоиск = 0;
	КонецЕсли;
	
	ПриИзмененииРежимаПолнотекстовогоПоиска(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУправлениеПолнотекстовымПоиском(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ПоказатьУправлениеПолнотекстовымПоискомИИзвлечениемТекстов();
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура ПроверитьДоступКСервису(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьДоступКСервису();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПроверкиКонтрагентов(Команда)
	
	РегламентныеЗаданияГиперссылкаНажатие("АвтоматическиПроверятьКонтрагентов");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура НастроитьПолучениеУведомленийОтЯндексКассы(Команда)
	
	РегламентныеЗаданияГиперссылкаНажатие("АвтоматическиПолучатьУведомленияОтЯндексКассы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЯндексКассы(Команда)
	
	ФормаНастройки = "Справочник.НастройкиЯндексКассы.Форма.ФормаСписка";
	ОткрытьФорму(ФормаНастройки, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВШаблоныСообщений(Команда)
	
	ОтборФормы = Новый Структура();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаСписка", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьШаблон(Команда)
	
	Кнопка                  = Элементы.Найти(Команда.Имя);
	ИмяДокумента            = СтрЗаменить(Команда.Имя, "СоздатьШаблон", "");
	ПредставлениеДокумента  = СокрЛП(СтрЗаменить(СтрЗаменить(Кнопка.Заголовок, НСтр("ru = 'Шаблон для'"), ""), """", ""));
	НаименованиеШаблона     = СтрШаблон(НСтр("ru = 'Счет на оплату через Яндекс.Кассу (%1)'"), ПредставлениеДокумента);
	
	СоздатьШаблон(Новый Структура("ПолноеИмяТипаПараметраВводаНаОсновании, Наименование", 
		"Документ." + ИмяДокумента, НаименованиеШаблона));
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура Перезапустить(Команда)
	
	УстановитьИнтерфейсНаСервере(ВариантИнтерфейса);
	
	ЗавершитьРаботуСистемы(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиНоменклатурыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНоменклатуруПоставщиковПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоРасчетныхСчетовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВалютПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоКассПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменССайтамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТТНПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихкодированиеПечатныхФормОбъектовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПрочихДоходовРасходовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияКоличестваШтукПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияРазливнойПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДопустимоеОтклонениеПриОкругленииКоличестваПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйВДокументахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура АвтоматическаяПроверкаИспользованиеПриИзменении(Элемент)
	
	РегламентныеЗаданияИспользованиеПриИзменении("АвтоматическиПроверятьКонтрагентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроверкуКонтрагентовПриИзменении(Элемент)
	
	ИспользоватьПроверкуКонтрагентовПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ИспользоватьИнтеграциюСЯндексКассойПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользование(Элемент)
	
	
	ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;
	
	Если ЗначениеКонстанты Тогда 
			
		Команда = "ВключитьИспользованиеРегламентыхЗаданий";
		ВключитьИспользованиеРегламентыхЗаданийПродолжение = Новый ОписаниеОповещения(
			"АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПродолжение", ЭтотОбъект);
		ВключитьИспользованиеРегламентыхЗаданийОтказ = Новый ОписаниеОповещения(
			"АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПриИзмененииОтказ", ЭтотОбъект);
			
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("ВключитьИспользованиеРегламентыхЗаданийПродолжение", ВключитьИспользованиеРегламентыхЗаданийПродолжение);
		ПараметрыКоманды.Вставить("ОповещениеОбОтказе", ВключитьИспользованиеРегламентыхЗаданийОтказ);
		
		ИнтеграцияСЯндексКассойСлужебныйКлиент.ВыполнитьКомандуСПроверкойПодключенияИПП("ВключитьИспользованиеРегламентыхЗаданий", ПараметрыКоманды);
	Иначе
		АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПродолжение(Неопределено, Неопределено);
	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;

	АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПриИзмененииСервер(ЗначениеКонстанты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПолучениеУведомленийОтЯндексКассы", "Доступность", ЗначениеКонстанты);
			
	Подключаемый_ПриИзмененииРеквизита(Элементы.АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользование);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПриИзмененииОтказ(Результат, ДополнительныеПараметры) Экспорт 
	
	НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеПолучениеУведомленияОтЯндексКассыИспользованиеПриИзмененииСервер(Использование)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
		
		Изменения = Новый Структура("Использование", Использование);
		РегламентныеЗаданияСохранить(АвтоматическиПолучатьУведомленияОтЯндексКассыИдентификатор,
			Изменения,
			"АвтоматическиПолучатьУведомленияОтЯндексКассыИспользование");
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВариантИнтерфейсаПриИзменении(Элемент)

	Если ВариантИнтерфейсаДоИзменения <> ВариантИнтерфейса Тогда
		Элементы.ГруппаПерезапускКнопка.Видимость = Истина;
	Иначе
		Элементы.ГруппаПерезапускКнопка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункциональностьПрограммыПриИзменении(Элемент)
	
	Если ФункциональностьПрограммы = "БазоваяВерсия" Тогда
		НаборКонстант.БазоваяВерсия = Истина;
	Иначе
		НаборКонстант.БазоваяВерсия = Ложь;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.БазоваяВерсия);
	
	Если ФункциональностьПрограммы <> "БазоваяВерсия" Тогда
		Закрыть();
		ОткрытьФорму(
			"Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки",
			Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоиска1ПриИзменении(Элемент)
	Если ВариантПоиска = "Стандартный" Тогда
		НаборКонстант.ИспользоватьСтандартныйПоискПриПодбореТоваров = Истина;
	Иначе
		НаборКонстант.ИспользоватьСтандартныйПоискПриПодбореТоваров = Ложь;
	КонецЕсли;	
	Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьСтандартныйПоискПриПодбореТоваров, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВариантПоиска2ПриИзменении(Элемент)
	Если ВариантПоиска = "Стандартный" Тогда
		НаборКонстант.ИспользоватьСтандартныйПоискПриПодбореТоваров = Истина;
	Иначе
		НаборКонстант.ИспользоватьСтандартныйПоискПриПодбореТоваров = Ложь;
	КонецЕсли;	
	Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьСтандартныйПоискПриПодбореТоваров, Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаПолнотекстовогоПоиска(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если КонстантаИмя = "НеУдалосьУстановитьРежимПолнотекстовогоПоиска" Тогда
		// Выдача предупреждающего сообщения.
		ТекстВопроса = НСтр("ru = 'Для изменения режима полнотекстового поиска требуется завершение сеансов всех пользователей, кроме текущего.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПриИзмененииРеквизитаПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , "АктивныеПользователи");
		Возврат;
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Тогда
			Попытка
				Если ИспользоватьПолнотекстовыйПоиск Тогда
					ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
				Иначе
					ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Полнотекстовый поиск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат "НеУдалосьУстановитьРежимПолнотекстовогоПоиска";
			КонецПопытки;
			КонстантаИмя = "ИспользоватьПолнотекстовыйПоиск";
			НаборКонстант.ИспользоватьПолнотекстовыйПоиск = ИспользоватьПолнотекстовыйПоиск;
			// Включение/отключение зависимых регламентных заданий.
			Изменения = Новый Структура("Использование", НаборКонстант.ИспользоватьПолнотекстовыйПоиск);
			Задание = РегламентныеЗаданияНайтиПредопределенное("ОбновлениеИндексаППД");
			Если Задание <> Неопределено Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
			КонецЕсли;
			Задание = РегламентныеЗаданияНайтиПредопределенное("СлияниеИндексаППД");
			Если Задание <> Неопределено Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
			КонецЕсли;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
				Изменения.Использование = Изменения.Использование И НаборКонстант.ИзвлекатьТекстыФайловНаСервере;
				Задание = РегламентныеЗаданияНайтиПредопределенное("ИзвлечениеТекста");
				Если Задание <> Неопределено Тогда
					РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ДоступностьДопРеквизитов = 
			НЕ НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения 
			ИЛИ НЕ Константы.ИспользоватьОбменССайтом.Получить();
	
	Элементы.ИспользоватьДополнительныеРеквизитыИСведения.Доступность = ДоступностьДопРеквизитов;
	Элементы.ИспользоватьДополнительныеРеквизитыИСведения.ОтображениеПодсказки = ?(ДоступностьДопРеквизитов,ОтображениеПодсказки.Нет,ОтображениеПодсказки.ОтображатьСнизу);
	Элементы.ДополнительныеРеквизиты.Доступность = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ДополнительныеСведения.Доступность = НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	
	ИспользоватьДополнительныеРеквизитыИСведения = Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить();
	
	Элементы.ИспользоватьОбменССайтом.Доступность 			  = ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.ИспользоватьОбменССайтом.ОтображениеПодсказки = ?(ИспользоватьДополнительныеРеквизитыИСведения,ОтображениеПодсказки.Нет,ОтображениеПодсказки.ОтображатьСнизу);
	Элементы.ОткрытьУзлыОбменаССайтами.Доступность 			  = НаборКонстант.ИспользоватьОбменССайтом;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьУпаковкиНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьУпаковкиНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьУпаковкиНоменклатуры, ЗначениеКонстанты);
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьХарактеристикиНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьХарактеристикиНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьХарактеристикиНоменклатуры, ЗначениеКонстанты);
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСерииНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьСерииНоменклатуры;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьСерииНоменклатуры, НаборКонстант.ИспользоватьСерииНоменклатуры);
		
		Элементы.ГруппаКомментарийНевозможноОтключениеСерий.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.ИспользоватьСерииНоменклатуры.Доступность = Не НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.КонтролироватьОстаткиТоваровОрганизаций" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.КонтролироватьОстаткиТоваровОрганизаций;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВидовНоменклатуры;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьНесколькоВидовНоменклатуры, ЗначениеКонстанты);
		Элементы.ОткрытьВидНоменклатурыТовар.Видимость = Не ЗначениеКонстанты;
		Элементы.ОткрытьВидНоменклатурыУслуга.Видимость = Не ЗначениеКонстанты;
		Элементы.ОткрытьВидыНоменклатуры.Видимость = ЗначениеКонстанты;
		Элементы.ГруппаКомментарийИспользоватьНесколькоВидов.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.ИспользоватьНесколькоВидовНоменклатуры.Доступность = Не НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов, ЗначениеКонстанты);
		Элементы.ГруппаКомментарийКонтролироватьУникальность.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.КонтролироватьУникальностьНоменклатурыПоСочетаниюЗначенийРеквизитов.Доступность = Не НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользованиеКлассификаторовНоменклатуры" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользованиеКлассификаторовНоменклатуры;
		Элементы.ГруппаКомментарийИспользоватьКлассификаторыНоменклатуры.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.ИспользованиеКлассификаторовНоменклатуры.Доступность = Не НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.ОткрытьКодыТНВЭД.Видимость = ЗначениеКонстанты;
		Элементы.ОткрытьВидыМехаГИСМ.Видимость = ЗначениеКонстанты И НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
	КонецЕсли;
	
	// Начало ИнтеграцияГИСМ
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи" 
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьЭлектронныеПодписи.Доступность = Не НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.КомментарийИспользоватьЭлектроннуюПодпись.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
		Элементы.ДекорацияИспользоватьЭлектроннуюПодпись.Видимость = НаборКонстант.ВестиУчетМаркировкиПродукцииВГИСМ;
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВалют" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВалют;
		
		Элементы.Валюты.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов;
		
		Элементы.БанковскиеСчета.Видимость = Не ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоКасс" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоКасс;
		
		Элементы.Кассы.Заголовок = ?(ЗначениеКонстанты,НСтр("ru = 'Кассы предприятия'"),НСтр("ru = 'Настройка кассы'"));;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьДополнительныеОтчетыИОбработки.Доступность = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		Если РеквизитПутьКДанным = "" Или РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Тогда
			МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
			Если НаборКонстант.ИспользоватьПолнотекстовыйПоиск <> МодульПолнотекстовыйПоискСервер.ОперацииРазрешены() Тогда
				ИспользоватьПолнотекстовыйПоиск = 2;
			Иначе
				ИспользоватьПолнотекстовыйПоиск = НаборКонстант.ИспользоватьПолнотекстовыйПоиск;
			КонецЕсли;
			Элементы.ГруппаУправлениеПолнотекстовымПоискомИИзвлечениемТекстовНастройка.Доступность = (ИспользоватьПолнотекстовыйПоиск = 1);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.АвтоматическиПроверятьКонтрагентовИспользование.Видимость = Ложь;
		Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Видимость     = Ложь;
		Элементы.НастроитьРасписаниеПроверкиКонтрагентов.Видимость         = Ложь;
	Иначе
		Если РеквизитПутьКДанным = "АвтоматическиПроверятьКонтрагентовРасписание"
			Или РеквизитПутьКДанным = "АвтоматическиПроверятьКонтрагентовИспользование"
			Или РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроверкуКонтрагентов"
			Или РеквизитПутьКДанным = "" Тогда
			
			// Настройка регламентного задания
			ИспользоватьСервисПроверкиКонтрагентов = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
			
			Элементы.АвтоматическиПроверятьКонтрагентовИспользование.Доступность 	= ИспользоватьСервисПроверкиКонтрагентов;
			Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Видимость 			= ИспользоватьСервисПроверкиКонтрагентов;
			Элементы.НастроитьРасписаниеПроверкиКонтрагентов.Доступность 			= ИспользоватьСервисПроверкиКонтрагентов;
			Если ИспользоватьСервисПроверкиКонтрагентов Тогда
				РасписаниеПредставление = Строка(АвтоматическиПроверятьКонтрагентовРасписание);
				Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
			Иначе
				Представление = НСтр("ru = '<Отключено>'");
			КонецЕсли;
			Элементы.АвтоматическиПроверятьКонтрагентовПояснение.Заголовок = Представление;
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИнтеграцияСЯндексКассой", "Видимость",
		Не ОбщегоНазначения.РазделениеВключено());
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
		ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
		Если ЕстьИнтеграцияСЯндексКассой
			И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьИнтеграциюСЯндексКассой" ИЛИ РеквизитПутьКДанным = "") Тогда
			
			ЗначениеКонстанты = НаборКонстант.ИспользоватьИнтеграциюСЯндексКассой;
		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ОткрытьНастройкиЯндексКассы", "Доступность", ЗначениеКонстанты);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ГруппаПолучениеУведомлений", "Доступность", ЗначениеКонстанты);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ГруппаНастройкаШаблонов", "Доступность", ЗначениеКонстанты);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ГруппаНастройкаШаблонов", "Видимость",
				ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.Справочники.ШаблоныСообщений));
				
		КонецЕсли;
		
		Если ЕстьИнтеграцияСЯндексКассой
			И (РеквизитПутьКДанным = "АвтоматическиПолучатьУведомленияОтЯндексКассыИспользование"
			ИЛИ РеквизитПутьКДанным = "АвтоматическиПолучатьУведомленияОтЯндексКассыРасписание"
			ИЛИ РеквизитПутьКДанным = "") Тогда
			
			ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ПолучениеУведомленийОтЯндексКассы", "Доступность", ЗначениеКонстанты);
				
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "ОткрытьНастройкиШаблоновПисем", "Видимость", 
				Не ОбщегоНазначения.РазделениеВключено()); // В модели сервиса расписание настраивать запрещено
				
			Если ЗначениеКонстанты Тогда
				РасписаниеПредставление = Строка(АвтоматическиПолучатьУведомленияОтЯндексКассыРасписание);
				Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
			Иначе
				Представление = НСтр("ru = '<Отключено>'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "АвтоматическоеПолучениеУведомленияОтЯндексКассыПояснение", "Видимость", ЗначениеКонстанты);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, "АвтоматическоеПолучениеУведомленияОтЯндексКассыПояснение", "Заголовок", Представление);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредустановленныеВидыНоменклатуры(ТипНоменклатуры, Имя)
	
	МассивВидов = Новый Массив();
	
	Справочники.ВидыНоменклатуры.ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, ТипНоменклатуры, Имя);
	
	Если МассивВидов.Количество() > 0 Тогда
		Возврат МассивВидов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

#КонецОбласти

#Область РаботаСКонтрагентами
&НаСервере
Процедура ИспользоватьПроверкуКонтрагентовПриИзмененииСервер(ИмяЭлемента)
	
	ПриИзмененииРеквизитаСервер(ИмяЭлемента);
	ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНастройкиРегламентногоЗаданияПроверкиКонтрагентов()
	
	РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("ПроверкаКонтрагентов");
	Если РегламентноеЗадание <> Неопределено Тогда
		АвтоматическиПроверятьКонтрагентовИдентификатор	= РегламентноеЗадание.УникальныйИдентификатор;
		АвтоматическиПроверятьКонтрагентовИспользование = РегламентноеЗадание.Использование;
		АвтоматическиПроверятьКонтрагентовРасписание 	= РегламентноеЗадание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцяСЯндексКассой

&НаСервере
Процедура ОпределитьНастройкиРегламентногоЗаданияПолучениеУведомленийОтЯндексКассы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Если ЕстьИнтеграцияСЯндексКассой Тогда
			
			// Устанавливаем флаг "ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы"
			РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("ПроверкаКонтрагентов");
			Если РегламентноеЗадание <> Неопределено Тогда
				АвтоматическиПолучатьУведомленияОтЯндексКассыИдентификатор	= РегламентноеЗадание.УникальныйИдентификатор;
				АвтоматическиПолучатьУведомленияОтЯндексКассыИспользование	= РегламентноеЗадание.Использование;
				АвтоматическиПолучатьУведомленияОтЯндексКассыРасписание 	= РегламентноеЗадание.Расписание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область ШаблоныСообщений

&НаСервере
Процедура ДобавитьКомандыСозданияШаблона()
	
	ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	Если Не ЕстьИнтеграцияСЯндексКассой Тогда 
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассойПереопределяемый");
	МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
	
	ТипыИсключения = Новый Массив;
	МодульИнтеграцияСЯндексКассойПереопределяемый.ИсключенияИзТипаОснованиеПлатежаЧерезЯндексКассу(ТипыИсключения);

	ТипыОснованияПлатежа = МодульИнтеграцияСЯндексКассой.ТипыОснованияПлатежаЧерезЯндексКассу();
	
	КомандыДобавлены = Ложь;
	Для Каждого ТипОснованияПлатежа из ТипыОснованияПлатежа Цикл 
		
		Если Не ТипыИсключения.Найти(ТипОснованияПлатежа) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОснованияПлатежа);
		ПолноеИмяОбъектаМетаданных 		= ОбъектМетаданных.ПолноеИмя();
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда 
			Продолжить;
		КонецЕсли;
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		Если Менеджер = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не УправлениеДоступом.ЕстьПраво("Чтение", Менеджер.ПустаяСсылка()) Тогда 
			Продолжить;				
		КонецЕсли;
		
		ПредставлениеОбъектаМетаданных 	= ?(ПустаяСтрока(ОбъектМетаданных.ПредставлениеОбъекта), ОбъектМетаданных.Представление(), ОбъектМетаданных.ПредставлениеОбъекта); 
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных,".");
		ИмяКоманды     = МассивПодстрок[1];

		ПредставлениеКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаблон для ""%1""'"), ПредставлениеОбъектаМетаданных);

		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ИмяКоманды"	, ИмяКоманды);
		ОписаниеКоманды.Вставить("Представление", ПредставлениеКоманды);
		
		
		ДобавитьКомандуСозданияШаблона(ОписаниеКоманды);
		КомандыДобавлены = Истина;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКнопокСоздать",
		"Видимость",
		КомандыДобавлены);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуСозданияШаблона(ОписаниеКоманды)

	ИмяКоманды = "СоздатьШаблон" + ОписаниеКоманды.ИмяКоманды;
	
	Если ЭтотОбъект.Команды.Найти(ИмяКоманды) = Неопределено Тогда  
		КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуСоздатьШаблон";
		КомандаФормы.Заголовок = ОписаниеКоманды.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	МестоРазмещения = Элементы.ГруппаКнопокСоздатьШаблон;
	
	Если ЭтотОбъект.Элементы.Найти(ИмяКоманды) = Неопределено Тогда 
		НовыйЭлемент = ЭтотОбъект.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Заголовок  = ОписаниеКоманды.Представление;
		НовыйЭлемент.Видимость  = Истина;
		НовыйЭлемент.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблон(ПараметрыСозданияШаблона)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебныйКлиент");
	
	СпособРедактированияЭлектронныхПисемHTML = "Перечисление.СпособыРедактированияЭлектронныхПисем.HTML";
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Наименование",            ПараметрыСозданияШаблона.Наименование);
	ДанныеЗаполнения.Вставить("ПолноеИмяТипаНазначения", ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании);
	ДанныеЗаполнения.Вставить("ТипШаблона",              "Письмо");
	ДанныеЗаполнения.Вставить("ФорматПисьма",            ПредопределенноеЗначение(СпособРедактированияЭлектронныхПисемHTML));
	ДанныеЗаполнения.Вставить("Тема",                    НСтр("ru = 'Вам выставлен счет'"));
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании,".");
	ИмяДокумента   = МассивПодстрок[1];
	ДанныеЗаполнения.Вставить("Текст", СтрЗаменить(ТекстМакета(),"ИмяДокумента", ИмяДокумента));
	
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент.ПолучитьДанныеЗаполненияПредопределенногоШаблона(ДанныеЗаполнения);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", ДанныеЗаполнения.ПолноеИмяТипаНазначения);
	
	Форма = "Справочник.ШаблоныСообщений.ФормаОбъекта";
	
	ОткрытьФорму(Форма, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстМакета()
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.НастройкиЯндексКассы").ПолучитьМакет("Макет").ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

&НаКлиенте
Процедура РегламентныеЗаданияИспользованиеПриИзменении(ПрефиксРеквизитов)
	ИмяРеквизитаИспользование = ПрефиксРеквизитов + "Использование";
	Идентификатор = ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"];
	Если ЭтотОбъект[ИмяРеквизитаИспользование] Тогда
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Идентификатор", Идентификатор);
		ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
		ПараметрыВыполнения.Вставить("ИмяРеквизитаИспользование", ИмяРеквизитаИспользование);
		
		РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
	Иначе
		Изменения = Новый Структура("Использование", Ложь);
		РегламентныеЗаданияСохранить(Идентификатор, Изменения, ИмяРеквизитаИспользование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияГиперссылкаНажатие(ПрефиксРеквизитов)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Идентификатор", ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"]);
	ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
	
	РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения)
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание]);
	Диалог.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	
	Если Расписание = Неопределено Тогда
		Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
			ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание] = Расписание;
	
	Изменения = Новый Структура("Расписание", Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
		ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Истина;
		Изменения.Вставить("Использование", Истина);
	КонецЕсли;
	РегламентныеЗаданияСохранить(ПараметрыВыполнения.Идентификатор, Изменения, ПараметрыВыполнения.ИмяРеквизитаРасписание);
	
КонецПроцедуры

&НаСервере
Процедура РегламентныеЗаданияСохранить(УникальныйИдентификатор, Изменения, РеквизитПутьКДанным)
	
	Отбор = Новый Структура;
	Отбор.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = Задания[0];
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, Изменения);
	
	Если РеквизитПутьКДанным <> Неопределено Тогда
		УстановитьДоступность(РеквизитПутьКДанным);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного)
	МетаданныеПредопределенного = Метаданные.РегламентныеЗадания.Найти(ИмяПредопределенного);
	Если МетаданныеПредопределенного = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегламентныеЗаданияСервер.Задание(МетаданныеПредопределенного);
	КонецЕсли;
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Процедура УстановитьИнтерфейсНаСервере(ВариантИнтерфейса)
	
	ОбщегоНазначенияУТ.УстановитьРежимКомандногоИнтерфейса(ВариантИнтерфейса);
	
КонецПроцедуры

#КонецОбласти